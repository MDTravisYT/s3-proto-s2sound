 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 1 - 2/19/2024 13:50:44


    1/       0 :                        z80_ptr function x,(x)<<8&$FF00|(x)>>8&$7F|$80
    2/       0 :                        
    3/       0 : =$0                    zeroOffsetOptimization	= 0
    4/       0 :                        
    5/       0 :                        	include "MacroSetup.asm"
(1)    1/       0 :                     	padding off	; we don't want AS padding out dc.b instructions
(1)    2/       0 :                     	listing purecode	; Want listing file, but only the final code in expanded macros
(1)    3/       0 :                     	page	0	; Don't want form feeds
(1)    4/       0 :                     	supmode on	; we don't need warnings about privileged instructions
(1)    5/       0 :                     
(1)    6/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)    7/       0 :                     
(1)    8/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes)
(1)    9/       0 :                     ; and also make it work in Z80 code without creating a new segment
(1)   10/       0 :                     org macro address
(1)   11/       0 :                     	if notZ80(MOMCPU)
(1)   12/       0 :                     		if address < *
(1)   13/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   14/       0 :                     		else
(1)   15/       0 :                     			!org address
(1)   16/       0 :                     		endif
(1)   17/       0 :                     	else
(1)   18/       0 :                     		if address < $
(1)   19/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   20/       0 :                     		else
(1)   21/       0 :                     			while address > $
(1)   22/       0 :                     				db 0
(1)   23/       0 :                     			endm
(1)   24/       0 :                     		endif
(1)   25/       0 :                     	endif
(1)   26/       0 :                         endm
(1)   27/       0 :                     
(1)   28/       0 :                     ; define an alternate org that fills the extra space with 0s instead of FFs
(1)   29/       0 :                     org0 macro address
(1)   30/       0 :                     .diff := address - *
(1)   31/       0 :                     	if .diff < 0
(1)   32/       0 :                     		error "too much stuff before org0 $\{address} ($\{(-diff)} bytes)"
(1)   33/       0 :                     	else
(1)   34/       0 :                     		while .diff > 1024
(1)   35/       0 :                     			; AS can only generate 1 kb of code on a single line
(1)   36/       0 :                     			dc.b [1024]0
(1)   37/       0 :                     .diff := .diff - 1024
(1)   38/       0 :                     		endm
(1)   39/       0 :                     		dc.b [.diff]0
(1)   40/       0 :                     	endif
(1)   41/       0 :                         endm
(1)   42/       0 :                     
(1)   43/       0 :                     ; define the cnop pseudo-instruction
(1)   44/       0 :                     cnop macro offset,alignment
(1)   45/       0 :                     	if notZ80(MOMCPU)
(1)   46/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   47/       0 :                     	else
(1)   48/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   49/       0 :                     	endif
(1)   50/       0 :                         endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; define an alternate cnop that fills the extra space with 0s instead of FFs
(1)   53/       0 :                     cnop0 macro offset,alignment
(1)   54/       0 :                     	org0 (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   55/       0 :                         endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; redefine align in terms of cnop, because the built-in align can be stupid sometimes
(1)   58/       0 :                     align macro alignment
(1)   59/       0 :                     	cnop 0,alignment
(1)   60/       0 :                         endm
(1)   61/       0 :                     
(1)   62/       0 :                     ; define an alternate align that fills the extra space with 0s instead of FFs
(1)   63/       0 :                     align0 macro alignment
(1)   64/       0 :                     	cnop0 0,alignment
(1)   65/       0 :                         endm
(1)   66/       0 :                     
(1)   67/       0 :                     ; define the even pseudo-instruction
(1)   68/       0 :                     even macro
(1)   69/       0 :                     	if notZ80(MOMCPU)
(1)   70/       0 :                     		if (*)&1
(1)   71/       0 :                     			dc.b 0 ;ds.b 1
(1)   72/       0 :                     		endif
(1)   73/       0 :                     	else
(1)   74/       0 :                     		if ($)&1
(1)   75/       0 :                     			db 0
(1)   76/       0 :                     		endif
(1)   77/       0 :                     	endif
(1)   78/       0 :                         endm
(1)   79/       0 :                     
(1)   80/       0 :                     ; make ds work in Z80 code without creating a new segment
(1)   81/       0 :                     ds macro
(1)   82/       0 :                     	if notZ80(MOMCPU)
(1)   83/       0 :                     		!ds.ATTRIBUTE ALLARGS
(1)   84/       0 :                     	else
(1)   85/       0 :                     		rept ALLARGS
(1)   86/       0 :                     			db 0
(1)   87/       0 :                     		endm
(1)   88/       0 :                     	endif
(1)   89/       0 :                        endm
(1)   90/       0 :                     
(1)   91/       0 :                     ; define a trace macro
(1)   92/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   93/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   94/       0 :                     	if MOMPASS=1
(1)   95/       0 :                     		if ("ALLARGS"<>"")
(1)   96/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF} msg=ALLARGS"
(1)   97/       0 :                     		else
(1)   98/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF}"
(1)   99/       0 :                     		endif
(1)  100/       0 :                     tracenum := (tracenum+1)
(1)  101/       0 :                     	endif
(1)  102/       0 :                        endm
(1)  103/       0 : =$0                 tracenum := 0
(1)  104/       0 :                     
(1)  106/       0 :                         ; disable a space optimization in AS so we can build a bit-perfect ROM
(1)  107/       0 :                         ; (the hard way, but it requires no modification of AS itself)
(1)  108/       0 :                     
(1)  109/       0 :                     
(1)  110/       0 :                     chkop function op,ref,(substr(lowstring(op),0,strlen(ref))<>ref)
(1)  111/       0 :                     
(1)  112/       0 :                     ; 1-arg instruction that's self-patching to remove 0-offset optimization
(1)  113/       0 :                     insn1op	 macro oper,x
(1)  114/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout(") && chkop("x","soundqueue.music0("))
(1)  115/       0 :                     		!oper	x
(1)  116/       0 :                     	  else
(1)  117/       0 :                     		!oper	1+x
(1)  118/       0 :                     		!org	*-1
(1)  119/       0 :                     		!dc.b	0
(1)  120/       0 :                     	  endif
(1)  121/       0 :                     	 endm
(1)  122/       0 :                     
(1)  123/       0 :                     ; 2-arg instruction that's self-patching to remove 0-offset optimization
(1)  124/       0 :                     insn2op	 macro oper,x,y
(1)  125/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout(") && chkop("x","soundqueue.music0("))
(1)  126/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout(") && chkop("y","soundqueue.music0("))
(1)  127/       0 :                     			!oper	x,y
(1)  128/       0 :                     		  else
(1)  129/       0 :                     			!oper	x,1+y
(1)  130/       0 :                     			!org	*-1
(1)  131/       0 :                     			!dc.b	0
(1)  132/       0 :                     		  endif
(1)  133/       0 :                     	  else
(1)  134/       0 :                     		if chkop("y","d")
(1)  135/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout(") && chkop("y","soundqueue.music0("))
(1)  136/       0 :                     start:
(1)  137/       0 :                     			!oper	1+x,y
(1)  138/       0 :                     end:
(1)  139/       0 :                     			!org	start+3
(1)  140/       0 :                     			!dc.b	0
(1)  141/       0 :                     			!org	end
(1)  142/       0 :                     		  else
(1)  143/       0 :                     			!oper	1+x,1+y
(1)  144/       0 :                     			!org	*-3
(1)  145/       0 :                     			!dc.b	0
(1)  146/       0 :                     			!org	*+1
(1)  147/       0 :                     			!dc.b	0
(1)  148/       0 :                     		  endif
(1)  149/       0 :                     		else
(1)  150/       0 :                     			!oper	1+x,y
(1)  151/       0 :                     			!org	*-1
(1)  152/       0 :                     			!dc.b	0
(1)  153/       0 :                     		endif
(1)  154/       0 :                     	  endif
(1)  155/       0 :                     	 endm
(1)  156/       0 :                     
(1)  157/       0 :                     	; instructions that were used with 0(a#) syntax
(1)  158/       0 :                     	; defined to assemble as they originally did
(1)  159/       0 :                     _move	macro
(1)  160/       0 :                     		insn2op move.ATTRIBUTE, ALLARGS
(1)  161/       0 :                     	endm
(1)  162/       0 :                     _add	macro
(1)  163/       0 :                     		insn2op add.ATTRIBUTE, ALLARGS
(1)  164/       0 :                     	endm
(1)  165/       0 :                     _addq	macro
(1)  166/       0 :                     		insn2op addq.ATTRIBUTE, ALLARGS
(1)  167/       0 :                     	endm
(1)  168/       0 :                     _cmp	macro
(1)  169/       0 :                     		insn2op cmp.ATTRIBUTE, ALLARGS
(1)  170/       0 :                     	endm
(1)  171/       0 :                     _cmpi	macro
(1)  172/       0 :                     		insn2op cmpi.ATTRIBUTE, ALLARGS
(1)  173/       0 :                     	endm
(1)  174/       0 :                     _clr	macro
(1)  175/       0 :                     		insn1op clr.ATTRIBUTE, ALLARGS
(1)  176/       0 :                     	endm
(1)  177/       0 :                     _tst	macro
(1)  178/       0 :                     		insn1op tst.ATTRIBUTE, ALLARGS
(1)  179/       0 :                     	endm
(1)  180/       0 :                     
(1)  207/       0 :                     
(1)  208/       0 :                     bit function nBits,1<<(nBits-1)
(1)  209/       0 :                     signmask function val,nBits,-((-(val&bit(nBits)))&bit(nBits))
(1)  210/       0 :                     signextend function val,nBits,(val+signmask(val,nBits))!signmask(val,nBits)
(1)  211/       0 :                     signextendB function val,signextend(val,8)
    6/       0 :                        	include "Macros.asm"
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
(1)    2/       0 :                     ; start the Z80
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     startZ80:       macro
(1)    5/       0 :                     		move.w	#0,(z80_bus_request).l
(1)    6/       0 :                     		endm
(1)    7/       0 :                     
(1)    8/       0 :                     ; ---------------------------------------------------------------------------
(1)    9/       0 :                     ; stop the Z80
(1)   10/       0 :                     ; ---------------------------------------------------------------------------
(1)   11/       0 :                     stopZ80:        macro
(1)   12/       0 :                     		move.w	#$100,(z80_bus_request).l
(1)   13/       0 :                     		endm
(1)   14/       0 :                     
(1)   15/       0 :                     ; ---------------------------------------------------------------------------
(1)   16/       0 :                     ; wait for Z80 to stop
(1)   17/       0 :                     ; ---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     waitZ80:	macro
(1)   20/       0 :                     .wait:		btst	#0,(z80_bus_request).l
(1)   21/       0 :                     		bne.s	.wait
(1)   22/       0 :                     		endm
(1)   23/       0 :                     		
(1)   24/       0 :                     
    7/       0 :                        
    8/       0 : =$3                    SonicDriverVer			= 3
    9/       0 :                        
   10/       0 : =$1                    use_s2_samples			= 1
   11/       0 :                        
   12/       0 : =$1                    use_s3d_samples			= 1
   13/       0 :                        
   14/       0 : =$1                    use_s3_samples			= 1
   15/       0 :                        
   16/       0 : =$1                    use_sk_samples			= 1
   17/       0 :                        		include		"_smps2asm_inc.asm"
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(1)    3/       0 :                     ; ===========================================================================
(1)    4/       0 :                     ; Permission to use, copy, modify, and/or distribute this software for any
(1)    5/       0 :                     ; purpose with or without fee is hereby granted.
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(1)    8/       0 :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(1)    9/       0 :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(1)   10/       0 :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(1)   11/       0 :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(1)   12/       0 :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(1)   13/       0 :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(1)   14/       0 :                     ; ===========================================================================
(1)   15/       0 :                     
(1)   16/       0 : =$1                 SMPS2ASMVer	= 1
(1)   17/       0 :                     
(1)   18/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)   19/       0 : =$C                 psgdelta	EQU 12
(1)   20/       0 :                     ; ---------------------------------------------------------------------------
(1)   21/       0 :                     ; Standard Octave Pitch Equates
(1)   22/       0 : =$88..$B8           	enum smpsPitch10lo=$88,smpsPitch09lo=$94,smpsPitch08lo=$A0,smpsPitch07lo=$AC,smpsPitch06lo=$B8
(1)   23/       0 : =$C4..$F4           	enum smpsPitch05lo=$C4,smpsPitch04lo=$D0,smpsPitch03lo=$DC,smpsPitch02lo=$E8,smpsPitch01lo=$F4
(1)   24/       0 : =$0..$30            	enum smpsPitch00=$00,smpsPitch01hi=$0C,smpsPitch02hi=$18,smpsPitch03hi=$24,smpsPitch04hi=$30
(1)   25/       0 : =$3C..$6C           	enum smpsPitch05hi=$3C,smpsPitch06hi=$48,smpsPitch07hi=$54,smpsPitch08hi=$60,smpsPitch09hi=$6C
(1)   26/       0 : =$78                	enum smpsPitch10hi=$78
(1)   27/       0 :                     ; ---------------------------------------------------------------------------
(1)   28/       0 :                     ; Note Equates
(1)   29/       0 : =$80..$8F           	enum nRst=$80+0,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(1)   30/       0 : =$90..$9F           	enum nEb1=nD1+1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(1)   31/       0 : =$A0..$AF           	enum nG2=nFs2+1,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(1)   32/       0 : =$B0..$BF           	enum nB3=nBb3+1,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(1)   33/       0 : =$C0..$CF           	enum nEb5=nD5+1,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(1)   34/       0 : =$D0..$DF           	enum nG6=nFs6+1,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(1)   35/       0 :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(1)   36/       0 :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(1)   37/       0 :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(1)   38/       0 :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(1)   44/       0 : =$C7                nMaxPSG				EQU nBb6-psgdelta
(1)   45/       0 : =$D3                nMaxPSG1			EQU nBb6
(1)   46/       0 : =$D4                nMaxPSG2			EQU nB6
(1)   48/       0 :                     	
(1)   49/       0 :                     
(1)   50/       0 :                     ; ---------------------------------------------------------------------------
(1)   51/       0 :                     ; PSG volume envelope equates
(1)   52/       0 : =$1..$6             		enum fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   53/       0 : =$7..$C             		enum fTone_07=fTone_06+1,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(1)   54/       0 : =$D                 		enum fTone_0D=fTone_0C+1
(1)   55/       0 :                     ; ---------------------------------------------------------------------------
(1)   56/       0 :                     ; DAC Equates
(1)   57/       0 : =$81..$89           			enum		dKick=$81,dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)   58/       0 : =$8A..$8F           			nextenum	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)   59/       0 : =$90..$91           			nextenum	dMidClap,dLowClap
(1)   60/       0 :                     ; ---------------------------------------------------------------------------
(1)   61/       0 :                     ; Channel IDs for SFX
(1)   62/       0 : =$80                cPSG1				EQU $80
(1)   63/       0 : =$A0                cPSG2				EQU $A0
(1)   64/       0 : =$C0                cPSG3				EQU $C0
(1)   65/       0 : =$E0                cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(1)   66/       0 : =$2                 cFM3				EQU $02
(1)   67/       0 : =$4                 cFM4				EQU $04
(1)   68/       0 : =$5                 cFM5				EQU $05
(1)   69/       0 : =$6                 cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(1)   70/       0 :                     ; ---------------------------------------------------------------------------
(1)   71/       0 :                     ; Conversion macros and functions
(1)   72/       0 :                     
(1)   73/       0 :                     conv0To256  function n,((n==0)<<8)|n
(1)   74/       0 :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(1)   75/       0 :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(1)   76/       0 :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(1)   77/       0 :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(1)   78/       0 :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(1)   79/       0 :                     s3TempotoS2 function n,s2TempotoS3(n)
(1)   80/       0 :                     
(1)   81/       0 :                     convertMainTempoMod macro mod
(1)   82/       0 :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)   83/       0 :                     		dc.b	mod
(1)   84/       0 :                     	elseif SourceDriver==1
(1)   85/       0 :                     		if mod==1
(1)   86/       0 :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)   87/       0 :                     		endif
(1)   88/       0 :                     		if SonicDriverVer==2
(1)   89/       0 :                     			dc.b	s1TempotoS2(mod)
(1)   90/       0 :                     		else;if SonicDriverVer>=3
(1)   91/       0 :                     			dc.b	s1TempotoS3(mod)
(1)   92/       0 :                     		endif
(1)   93/       0 :                     	elseif SourceDriver==2
(1)   94/       0 :                     		if mod==0
(1)   95/       0 :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)   96/       0 :                     		endif
(1)   97/       0 :                     		if SonicDriverVer==1
(1)   98/       0 :                     			dc.b	s2TempotoS1(mod)
(1)   99/       0 :                     		else;if SonicDriverVer>=3
(1)  100/       0 :                     			dc.b	s2TempotoS3(mod)
(1)  101/       0 :                     		endif
(1)  102/       0 :                     	else;if SourceDriver>=3
(1)  103/       0 :                     		if mod==0
(1)  104/       0 :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)  105/       0 :                     		endif
(1)  106/       0 :                     		if SonicDriverVer==1
(1)  107/       0 :                     			dc.b	s3TempotoS1(mod)
(1)  108/       0 :                     		else;if SonicDriverVer==2
(1)  109/       0 :                     			dc.b	s3TempotoS2(mod)
(1)  110/       0 :                     		endif
(1)  111/       0 :                     	endif
(1)  112/       0 :                     	endm
(1)  113/       0 :                     
(1)  114/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)  115/       0 :                     PSGPitchConvert macro pitch
(1)  116/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  117/       0 :                     		dc.b	(pitch+psgdelta)&$FF
(1)  118/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  119/       0 :                     		dc.b	(pitch-psgdelta)&$FF
(1)  120/       0 :                     	else
(1)  121/       0 :                     		dc.b	pitch
(1)  122/       0 :                     	endif
(1)  123/       0 :                     	endm
(1)  124/       0 :                     
(1)  125/       0 :                     CheckedChannelPointer macro loc
(1)  126/       0 :                     	if SonicDriverVer<>1
(1)  127/       0 :                     		dc.w	z80_ptr(loc)
(1)  128/       0 :                     	else
(1)  129/       0 :                     		if MOMPASS==2
(1)  130/       0 :                     			if loc<songStart
(1)  131/       0 :                     				fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)  132/       0 :                     			endif
(1)  133/       0 :                     		endif
(1)  134/       0 :                     		dc.w	loc-songStart
(1)  135/       0 :                     	endif
(1)  136/       0 :                     	endm
(1)  137/       0 :                     ; ---------------------------------------------------------------------------
(1)  138/       0 :                     ; Header Macros
(1)  139/       0 :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(1)  140/       0 :                     
(1)  141/       0 :                     SourceDriver set ver
(1)  142/       0 :                     
(1)  143/       0 :                     	if ("sourcesmps2asmver"<>"")
(1)  144/       0 :                     SourceSMPS2ASM set sourcesmps2asmver
(1)  145/       0 :                     	else
(1)  146/       0 :                     SourceSMPS2ASM set 0
(1)  147/       0 :                     	endif
(1)  148/       0 :                     
(1)  149/       0 :                     songStart set *
(1)  150/       0 :                     
(1)  151/       0 :                     	if MOMPASS==2
(1)  152/       0 :                     	if SMPS2ASMVer < SourceSMPS2ASM
(1)  153/       0 :                     	message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)  154/       0 :                     	endif
(1)  155/       0 :                     	endif
(1)  156/       0 :                     
(1)  157/       0 :                     	endm
(1)  158/       0 :                     
(1)  159/       0 :                     smpsHeaderVoiceNull macro
(1)  160/       0 :                     	if songStart<>*
(1)  161/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  162/       0 :                     	endif
(1)  163/       0 :                     	dc.w	$0000
(1)  164/       0 :                     	endm
(1)  165/       0 :                     
(1)  166/       0 :                     ; Header - Set up Voice Location
(1)  167/       0 :                     ; Common to music and SFX
(1)  168/       0 :                     smpsHeaderVoice macro loc
(1)  169/       0 :                     	if songStart<>*
(1)  170/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  171/       0 :                     	endif
(1)  172/       0 :                     	if SonicDriverVer<>1
(1)  173/       0 :                     		dc.w	z80_ptr(loc)
(1)  174/       0 :                     	else
(1)  175/       0 :                     		if MOMPASS==2
(1)  176/       0 :                     		if loc<songStart
(1)  177/       0 :                     			fatal "Voice banks for Sonic 1 songs must come after the song"
(1)  178/       0 :                     		endif
(1)  179/       0 :                     		endif
(1)  180/       0 :                     		dc.w	loc-songStart
(1)  181/       0 :                     	endif
(1)  182/       0 :                     	endm
(1)  183/       0 :                     
(1)  184/       0 :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(1)  185/       0 :                     ; Common to music and SFX
(1)  186/       0 :                     smpsHeaderVoiceUVB macro
(1)  187/       0 :                     	if songStart<>*
(1)  188/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  189/       0 :                     	endif
(1)  190/       0 :                     	if SonicDriverVer>=5
(1)  191/       0 :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(1)  192/       0 :                     	elseif SonicDriverVer>=3
(1)  193/       0 :                     		dc.w	little_endian(z80_UniVoiceBank)
(1)  194/       0 :                     	else
(1)  195/       0 :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
(1)  196/       0 :                     	endif
(1)  197/       0 :                     	endm
(1)  198/       0 :                     
(1)  199/       0 :                     ; Header macros for music (not for SFX)
(1)  200/       0 :                     ; Header - Set up Channel Usage
(1)  201/       0 :                     smpsHeaderChan macro fm,psg
(1)  202/       0 :                     	dc.b	fm,psg
(1)  203/       0 :                     	endm
(1)  204/       0 :                     
(1)  205/       0 :                     ; Header - Set up Tempo
(1)  206/       0 :                     smpsHeaderTempo macro div,mod
(1)  207/       0 :                     	dc.b	div
(1)  208/       0 :                     	convertMainTempoMod mod
(1)  209/       0 :                     	endm
(1)  210/       0 :                     
(1)  211/       0 :                     ; Header - Set up DAC Channel
(1)  212/       0 :                     smpsHeaderDAC macro loc,pitch,vol
(1)  213/       0 :                     	CheckedChannelPointer loc
(1)  214/       0 :                     	if ("pitch"<>"")
(1)  215/       0 :                     		dc.b	pitch
(1)  216/       0 :                     		if ("vol"<>"")
(1)  217/       0 :                     			dc.b	vol
(1)  218/       0 :                     		else
(1)  219/       0 :                     			dc.b	$00
(1)  220/       0 :                     		endif
(1)  221/       0 :                     	else
(1)  222/       0 :                     		dc.w	$00
(1)  223/       0 :                     	endif
(1)  224/       0 :                     	endm
(1)  225/       0 :                     
(1)  226/       0 :                     ; Header - Set up FM Channel
(1)  227/       0 :                     smpsHeaderFM macro loc,pitch,vol
(1)  228/       0 :                     	CheckedChannelPointer loc
(1)  229/       0 :                     	dc.b	pitch,vol
(1)  230/       0 :                     	endm
(1)  231/       0 :                     
(1)  232/       0 :                     ; Header - Set up PSG Channel
(1)  233/       0 :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(1)  234/       0 :                     	CheckedChannelPointer loc
(1)  235/       0 :                     	PSGPitchConvert pitch
(1)  236/       0 :                     	dc.b	vol,mod,voice
(1)  237/       0 :                     	endm
(1)  238/       0 :                     
(1)  239/       0 :                     ; Header macros for SFX (not for music)
(1)  240/       0 :                     ; Header - Set up Tempo
(1)  241/       0 :                     smpsHeaderTempoSFX macro div
(1)  242/       0 :                     	dc.b	div
(1)  243/       0 :                     	endm
(1)  244/       0 :                     
(1)  245/       0 :                     ; Header - Set up Channel Usage
(1)  246/       0 :                     smpsHeaderChanSFX macro chan
(1)  247/       0 :                     	dc.b	chan
(1)  248/       0 :                     	endm
(1)  249/       0 :                     
(1)  250/       0 :                     ; Header - Set up FM Channel
(1)  251/       0 :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(1)  252/       0 :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(1)  253/       0 :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)  254/       0 :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(1)  255/       0 :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)  256/       0 :                     	endif
(1)  257/       0 :                     	dc.b	$80,chanid
(1)  258/       0 :                     	CheckedChannelPointer loc
(1)  259/       0 :                     	if (chanid&$80)<>0
(1)  260/       0 :                     		PSGPitchConvert pitch
(1)  261/       0 :                     	else
(1)  262/       0 :                     		dc.b	pitch
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	dc.b	vol
(1)  265/       0 :                     	endm
(1)  266/       0 :                     ; ---------------------------------------------------------------------------
(1)  267/       0 :                     ; Co-ord Flag Macros and Equates
(1)  268/       0 :                     ; E0xx - Panning, AMS, FMS
(1)  269/       0 :                     smpsPan macro direction,amsfms
(1)  270/       0 :                     panNone set $00
(1)  271/       0 :                     panRight set $40
(1)  272/       0 :                     panLeft set $80
(1)  273/       0 :                     panCentre set $C0
(1)  274/       0 :                     panCenter set $C0 ; silly Americans :U
(1)  275/       0 :                     	dc.b $E0,direction+amsfms
(1)  276/       0 :                     	endm
(1)  277/       0 :                     
(1)  278/       0 :                     ; E1xx - Set channel detune to val
(1)  279/       0 :                     smpsDetune macro val
(1)  280/       0 :                     	dc.b	$E1,val
(1)  281/       0 :                     	endm
(1)  282/       0 :                     
(1)  283/       0 :                     ; E2xx - Useless
(1)  284/       0 :                     smpsNop macro val
(1)  285/       0 :                     	if SonicDriverVer<3
(1)  286/       0 :                     		dc.b	$E2,val
(1)  287/       0 :                     	endif
(1)  288/       0 :                     	endm
(1)  289/       0 :                     
(1)  290/       0 :                     ; Return (used after smpsCall)
(1)  291/       0 :                     smpsReturn macro val
(1)  292/       0 :                     	if SonicDriverVer>=3
(1)  293/       0 :                     		dc.b	$F9
(1)  294/       0 :                     	else
(1)  295/       0 :                     		dc.b	$E3
(1)  296/       0 :                     	endif
(1)  297/       0 :                     	endm
(1)  298/       0 :                     
(1)  299/       0 :                     ; Fade in previous song (ie. 1-Up)
(1)  300/       0 :                     smpsFade macro val
(1)  301/       0 :                     	if SonicDriverVer>=3
(1)  302/       0 :                     		dc.b	$E2
(1)  303/       0 :                     		if ("val"<>"")
(1)  304/       0 :                     			dc.b	val
(1)  305/       0 :                     		else
(1)  306/       0 :                     			dc.b	$FF
(1)  307/       0 :                     		endif
(1)  308/       0 :                     		if SourceDriver<3
(1)  309/       0 :                     			smpsStop
(1)  310/       0 :                     		endif
(1)  311/       0 :                     	elseif (SourceDriver>=3) && ("val"<>"") && ("val"<>"$FF")
(1)  312/       0 :                     		; This is one of those weird S3+ "fades" that we don't need
(1)  313/       0 :                     	else
(1)  314/       0 :                     		dc.b	$E4
(1)  315/       0 :                     	endif
(1)  316/       0 :                     	endm
(1)  317/       0 :                     
(1)  318/       0 :                     ; E5xx - Set channel tempo divider to xx
(1)  319/       0 :                     smpsChanTempoDiv macro val
(1)  320/       0 :                     	if SonicDriverVer>=5
(1)  321/       0 :                     		; New flag unique to Flamewing's modified S&K driver
(1)  322/       0 :                     		dc.b	$FF,$08,val
(1)  323/       0 :                     	elseif SonicDriverVer==3
(1)  324/       0 :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(1)  325/       0 :                     	else
(1)  326/       0 :                     		dc.b	$E5,val
(1)  327/       0 :                     	endif
(1)  328/       0 :                     	endm
(1)  329/       0 :                     
(1)  330/       0 :                     ; E6xx - Alter Volume by xx
(1)  331/       0 :                     smpsAlterVol macro val
(1)  332/       0 :                     	dc.b	$E6,val
(1)  333/       0 :                     	endm
(1)  334/       0 :                     
(1)  335/       0 :                     ; E7 - Prevent attack of next note
(1)  336/       0 : =$E7                smpsNoAttack	EQU $E7
(1)  337/       0 :                     
(1)  338/       0 :                     ; E8xx - Set note fill to xx
(1)  339/       0 :                     smpsNoteFill macro val
(1)  340/       0 :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  341/       0 :                     		; Unique to Flamewing's modified driver
(1)  342/       0 :                     		dc.b	$FF,$0A,val
(1)  343/       0 :                     	else
(1)  344/       0 :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  345/       0 :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  346/       0 :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  347/       0 :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  348/       0 :                     		endif
(1)  349/       0 :                     		dc.b	$E8,val
(1)  350/       0 :                     	endif
(1)  351/       0 :                     	endm
(1)  352/       0 :                     
(1)  353/       0 :                     ; Add xx to channel pitch
(1)  354/       0 :                     smpsChangeTransposition macro val
(1)  355/       0 :                     	if SonicDriverVer>=3
(1)  356/       0 :                     		dc.b	$FB,val
(1)  357/       0 :                     	else
(1)  358/       0 :                     		dc.b	$E9,val
(1)  359/       0 :                     	endif
(1)  360/       0 :                     	endm
(1)  361/       0 :                     
(1)  362/       0 :                     ; Set music tempo modifier to xx
(1)  363/       0 :                     smpsSetTempoMod macro mod
(1)  364/       0 :                     	if SonicDriverVer>=3
(1)  365/       0 :                     		dc.b	$FF,$00
(1)  366/       0 :                     	else
(1)  367/       0 :                     		dc.b	$EA
(1)  368/       0 :                     	endif
(1)  369/       0 :                     	convertMainTempoMod mod
(1)  370/       0 :                     	endm
(1)  371/       0 :                     
(1)  372/       0 :                     ; Set music tempo divider to xx
(1)  373/       0 :                     smpsSetTempoDiv macro val
(1)  374/       0 :                     	if SonicDriverVer>=3
(1)  375/       0 :                     		dc.b	$FF,$04,val
(1)  376/       0 :                     	else
(1)  377/       0 :                     		dc.b	$EB,val
(1)  378/       0 :                     	endif
(1)  379/       0 :                     	endm
(1)  380/       0 :                     
(1)  381/       0 :                     ; ECxx - Set Volume to xx
(1)  382/       0 :                     smpsSetVol macro val
(1)  383/       0 :                     	if SonicDriverVer>=3
(1)  384/       0 :                     		dc.b	$E4,val
(1)  385/       0 :                     	else
(1)  386/       0 :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(1)  387/       0 :                     	endif
(1)  388/       0 :                     	endm
(1)  389/       0 :                     
(1)  390/       0 :                     ; Works on all drivers
(1)  391/       0 :                     smpsPSGAlterVol macro vol
(1)  392/       0 :                     	dc.b	$EC,vol
(1)  393/       0 :                     	endm
(1)  394/       0 :                     
(1)  395/       0 :                     ; Clears pushing sound flag in S1
(1)  396/       0 :                     smpsClearPush macro
(1)  397/       0 :                     	if SonicDriverVer==1
(1)  398/       0 :                     		dc.b	$ED
(1)  399/       0 :                     	else
(1)  400/       0 :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(1)  401/       0 :                     	endif
(1)  402/       0 :                     	endm
(1)  403/       0 :                     
(1)  404/       0 :                     ; Stops special SFX (S1 only) and restarts overridden music track
(1)  405/       0 :                     smpsStopSpecial macro
(1)  406/       0 :                     	if SonicDriverVer==1
(1)  407/       0 :                     		dc.b	$EE
(1)  408/       0 :                     	else
(1)  409/       0 :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(1)  410/       0 :                     		smpsStop
(1)  411/       0 :                     	endif
(1)  412/       0 :                     	endm
(1)  413/       0 :                     
(1)  414/       0 :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(1)  415/       0 :                     smpsFMvoice macro voice,songID
(1)  416/       0 :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(1)  417/       0 :                     		dc.b	$EF,voice|$80,songID+$81
(1)  418/       0 :                     	else
(1)  419/       0 :                     		dc.b	$EF,voice
(1)  420/       0 :                     	endif
(1)  421/       0 :                     	endm
(1)  422/       0 :                     
(1)  423/       0 :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(1)  424/       0 :                     smpsModSet macro wait,speed,change,step
(1)  425/       0 :                     	dc.b	$F0
(1)  426/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  427/       0 :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(1)  428/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  429/       0 :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(1)  430/       0 :                     	else
(1)  431/       0 :                     		dc.b	wait,speed,change,step
(1)  432/       0 :                     	endif
(1)  433/       0 :                     	;dc.b	speed,change,step
(1)  434/       0 :                     	endm
(1)  435/       0 :                     
(1)  436/       0 :                     ; Turn on Modulation
(1)  437/       0 :                     smpsModOn macro type
(1)  438/       0 :                     	if SonicDriverVer>=3
(1)  439/       0 :                     		if "type"<>""
(1)  440/       0 :                     			dc.b	$F4,type
(1)  441/       0 :                     		else
(1)  442/       0 :                     			dc.b	$F4,$80
(1)  443/       0 :                     		endif
(1)  444/       0 :                     	else
(1)  445/       0 :                     		dc.b	$F1
(1)  446/       0 :                     	endif
(1)  447/       0 :                     	endm
(1)  448/       0 :                     
(1)  449/       0 :                     ; F2 - End of channel
(1)  450/       0 :                     smpsStop macro
(1)  451/       0 :                     	dc.b	$F2
(1)  452/       0 :                     	endm
(1)  453/       0 :                     
(1)  454/       0 :                     ; F3xx - PSG waveform to xx
(1)  455/       0 :                     smpsPSGform macro form
(1)  456/       0 :                     	dc.b	$F3,form
(1)  457/       0 :                     	endm
(1)  458/       0 :                     
(1)  459/       0 :                     ; Turn off Modulation
(1)  460/       0 :                     smpsModOff macro
(1)  461/       0 :                     	if SonicDriverVer>=3
(1)  462/       0 :                     		dc.b	$FA
(1)  463/       0 :                     	else
(1)  464/       0 :                     		dc.b	$F4
(1)  465/       0 :                     	endif
(1)  466/       0 :                     	endm
(1)  467/       0 :                     
(1)  468/       0 :                     ; F5xx - PSG voice to xx
(1)  469/       0 :                     smpsPSGvoice macro voice
(1)  470/       0 :                     	dc.b	$F5,voice
(1)  471/       0 :                     	endm
(1)  472/       0 :                     
(1)  473/       0 :                     ; F6xxxx - Jump to xxxx
(1)  474/       0 :                     smpsJump macro loc
(1)  475/       0 :                     	dc.b	$F6
(1)  476/       0 :                     	if SonicDriverVer<>1
(1)  477/       0 :                     		dc.w	z80_ptr(loc)
(1)  478/       0 :                     	else
(1)  479/       0 :                     		dc.w	loc-*-1
(1)  480/       0 :                     	endif
(1)  481/       0 :                     	endm
(1)  482/       0 :                     
(1)  483/       0 :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(1)  484/       0 :                     smpsLoop macro index,loops,loc
(1)  485/       0 :                     	dc.b	$F7
(1)  486/       0 :                     	dc.b	index,loops
(1)  487/       0 :                     	if SonicDriverVer<>1
(1)  488/       0 :                     		dc.w	z80_ptr(loc)
(1)  489/       0 :                     	else
(1)  490/       0 :                     		dc.w	loc-*-1
(1)  491/       0 :                     	endif
(1)  492/       0 :                     	endm
(1)  493/       0 :                     
(1)  494/       0 :                     ; F8xxxx - Call pattern at xxxx, saving return point
(1)  495/       0 :                     smpsCall macro loc
(1)  496/       0 :                     	dc.b	$F8
(1)  497/       0 :                     	if SonicDriverVer<>1
(1)  498/       0 :                     		dc.w	z80_ptr(loc)
(1)  499/       0 :                     	else
(1)  500/       0 :                     		dc.w	loc-*-1
(1)  501/       0 :                     	endif
(1)  502/       0 :                     	endm
(1)  503/       0 :                     ; ---------------------------------------------------------------------------
(1)  504/       0 :                     ; Alter Volume
(1)  505/       0 :                     smpsFMAlterVol macro val1,val2
(1)  506/       0 :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(1)  507/       0 :                     		dc.b	$E5,val1,val2
(1)  508/       0 :                     	else
(1)  509/       0 :                     		dc.b	$E6,val1
(1)  510/       0 :                     	endif
(1)  511/       0 :                     	endm
(1)  512/       0 :                     
(1)  513/       0 :                     ; S3/S&K/S3D-only coordination flags
(1)  515/       0 :                     ; Silences FM channel then stops as per smpsStop
(1)  516/       0 :                     smpsStopFM macro
(1)  517/       0 :                     	dc.b	$E3
(1)  518/       0 :                     	endm
(1)  519/       0 :                     
(1)  520/       0 :                     ; Spindash Rev
(1)  521/       0 :                     smpsSpindashRev macro
(1)  522/       0 :                     	dc.b	$E9
(1)  523/       0 :                     	endm
(1)  524/       0 :                     
(1)  525/       0 :                     smpsPlayDACSample macro sample
(1)  526/       0 :                     	dc.b	$EA,(sample&$7F)
(1)  527/       0 :                     	endm
(1)  528/       0 :                     
(1)  529/       0 :                     smpsConditionalJump macro index,loc
(1)  530/       0 :                     	dc.b	$EB
(1)  531/       0 :                     	dc.b	index
(1)  532/       0 :                     	dc.w	z80_ptr(loc)
(1)  533/       0 :                     	endm
(1)  534/       0 :                     
(1)  535/       0 :                     ; Set note values to xx-$40
(1)  536/       0 :                     smpsSetNote macro val
(1)  537/       0 :                     	dc.b	$ED,val
(1)  538/       0 :                     	endm
(1)  539/       0 :                     
(1)  540/       0 :                     smpsFMICommand macro reg,val
(1)  541/       0 :                     	dc.b	$EE,reg,val
(1)  542/       0 :                     	endm
(1)  543/       0 :                     
(1)  544/       0 :                     ; Set Modulation
(1)  545/       0 :                     smpsModChange2 macro fmmod,psgmod
(1)  546/       0 :                     	dc.b	$F1,fmmod,psgmod
(1)  547/       0 :                     	endm
(1)  548/       0 :                     
(1)  549/       0 :                     ; Set Modulation
(1)  550/       0 :                     smpsModChange macro val
(1)  551/       0 :                     	dc.b	$F4,val
(1)  552/       0 :                     	endm
(1)  553/       0 :                     
(1)  554/       0 :                     ; FCxxxx - Jump to xxxx
(1)  555/       0 :                     smpsContinuousLoop macro loc
(1)  556/       0 :                     	dc.b	$FC
(1)  557/       0 :                     	dc.w	z80_ptr(loc)
(1)  558/       0 :                     	endm
(1)  559/       0 :                     
(1)  560/       0 :                     smpsAlternateSMPS macro flag
(1)  561/       0 :                     	dc.b	$FD,flag
(1)  562/       0 :                     	endm
(1)  563/       0 :                     
(1)  564/       0 :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(1)  565/       0 :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(1)  566/       0 :                     	endm
(1)  567/       0 :                     
(1)  568/       0 :                     smpsPlaySound macro index
(1)  569/       0 :                     	if SonicDriverVer>=5
(1)  570/       0 :                     		message "smpsPlaySound only plays SFX in Flamedriver; use smpsPlayMusic to play music or fade effects."
(1)  571/       0 :                     	endif
(1)  572/       0 :                     	dc.b	$FF,$01,index
(1)  573/       0 :                     	endm
(1)  574/       0 :                     
(1)  575/       0 :                     smpsHaltMusic macro flag
(1)  576/       0 :                     	dc.b	$FF,$02,flag
(1)  577/       0 :                     	endm
(1)  578/       0 :                     
(1)  579/       0 :                     smpsCopyData macro data,len
(1)  580/       0 :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(1)  581/       0 :                     	dc.b	$FF,$03
(1)  582/       0 :                     	dc.w	little_endian(data)
(1)  583/       0 :                     	dc.b	len
(1)  584/       0 :                     	endm
(1)  585/       0 :                     
(1)  586/       0 :                     smpsSSGEG macro op1,op2,op3,op4
(1)  587/       0 :                     	dc.b	$FF,$05,op1,op3,op2,op4
(1)  588/       0 :                     	endm
(1)  589/       0 :                     
(1)  590/       0 :                     smpsFMVolEnv macro tone,mask
(1)  591/       0 :                     	dc.b	$FF,$06,tone,mask
(1)  592/       0 :                     	endm
(1)  593/       0 :                     
(1)  594/       0 :                     smpsResetSpindashRev macro val
(1)  595/       0 :                     	dc.b	$FF,$07
(1)  596/       0 :                     	endm
(1)  597/       0 :                     
(1)  598/       0 :                     	; Flags ported from other drivers.
(1)  616/       0 :                     
(1)  618/       0 :                     ; ---------------------------------------------------------------------------
(1)  619/       0 :                     ; S1/S2 only coordination flag
(1)  620/       0 :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(1)  621/       0 :                     smpsMaxRelRate macro
(1)  622/       0 :                     	if SonicDriverVer>=3
(1)  623/       0 :                     		; Emulate it in S3/S&K/S3D driver
(1)  624/       0 :                     		smpsFMICommand $88,$0F
(1)  625/       0 :                     		smpsFMICommand $8C,$0F
(1)  626/       0 :                     	else
(1)  627/       0 :                     		dc.b	$F9
(1)  628/       0 :                     	endif
(1)  629/       0 :                     	endm
(1)  630/       0 :                     ; ---------------------------------------------------------------------------
(1)  631/       0 :                     ; Backwards compatibility
(1)  632/       0 :                     smpsAlterNote macro
(1)  633/       0 :                     	smpsDetune	ALLARGS
(1)  634/       0 :                     	endm
(1)  635/       0 :                     
(1)  636/       0 :                     smpsAlterPitch macro
(1)  637/       0 :                     	smpsChangeTransposition	ALLARGS
(1)  638/       0 :                     	endm
(1)  639/       0 :                     
(1)  640/       0 :                     smpsFMFlutter macro
(1)  641/       0 :                     	smpsFMVolEnv	ALLARGS
(1)  642/       0 :                     	endm
(1)  643/       0 :                     
(1)  644/       0 :                     smpsWeirdD1LRR macro
(1)  645/       0 :                     	smpsMaxRelRate ALLARGS
(1)  646/       0 :                     	endm
(1)  647/       0 :                     
(1)  648/       0 :                     smpsSetvoice macro
(1)  649/       0 :                     	smpsFMvoice ALLARGS
(1)  650/       0 :                     	endm
(1)  651/       0 :                     ; ---------------------------------------------------------------------------
(1)  652/       0 :                     ; Macros for FM instruments
(1)  653/       0 :                     ; Voices - Feedback
(1)  654/       0 :                     smpsVcFeedback macro val
(1)  655/       0 :                     vcFeedback set val
(1)  656/       0 :                     	endm
(1)  657/       0 :                     
(1)  658/       0 :                     ; Voices - Algorithm
(1)  659/       0 :                     smpsVcAlgorithm macro val
(1)  660/       0 :                     vcAlgorithm set val
(1)  661/       0 :                     	endm
(1)  662/       0 :                     
(1)  663/       0 :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(1)  664/       0 :                     vcUnusedBits set val
(1)  665/       0 :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
(1)  666/       0 :                     vcD1R1Unk set d1r1<<5
(1)  667/       0 :                     vcD1R2Unk set d1r2<<5
(1)  668/       0 :                     vcD1R3Unk set d1r3<<5
(1)  669/       0 :                     vcD1R4Unk set d1r4<<5
(1)  670/       0 :                     	else
(1)  671/       0 :                     vcD1R1Unk set 0
(1)  672/       0 :                     vcD1R2Unk set 0
(1)  673/       0 :                     vcD1R3Unk set 0
(1)  674/       0 :                     vcD1R4Unk set 0
(1)  675/       0 :                     	endif
(1)  676/       0 :                     	endm
(1)  677/       0 :                     
(1)  678/       0 :                     ; Voices - Detune
(1)  679/       0 :                     smpsVcDetune macro op1,op2,op3,op4
(1)  680/       0 :                     vcDT1 set op1
(1)  681/       0 :                     vcDT2 set op2
(1)  682/       0 :                     vcDT3 set op3
(1)  683/       0 :                     vcDT4 set op4
(1)  684/       0 :                     	endm
(1)  685/       0 :                     
(1)  686/       0 :                     ; Voices - Coarse-Frequency
(1)  687/       0 :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(1)  688/       0 :                     vcCF1 set op1
(1)  689/       0 :                     vcCF2 set op2
(1)  690/       0 :                     vcCF3 set op3
(1)  691/       0 :                     vcCF4 set op4
(1)  692/       0 :                     	endm
(1)  693/       0 :                     
(1)  694/       0 :                     ; Voices - Rate Scale
(1)  695/       0 :                     smpsVcRateScale macro op1,op2,op3,op4
(1)  696/       0 :                     vcRS1 set op1
(1)  697/       0 :                     vcRS2 set op2
(1)  698/       0 :                     vcRS3 set op3
(1)  699/       0 :                     vcRS4 set op4
(1)  700/       0 :                     	endm
(1)  701/       0 :                     
(1)  702/       0 :                     ; Voices - Attack Rate
(1)  703/       0 :                     smpsVcAttackRate macro op1,op2,op3,op4
(1)  704/       0 :                     vcAR1 set op1
(1)  705/       0 :                     vcAR2 set op2
(1)  706/       0 :                     vcAR3 set op3
(1)  707/       0 :                     vcAR4 set op4
(1)  708/       0 :                     	endm
(1)  709/       0 :                     
(1)  710/       0 :                     ; Voices - Amplitude Modulation
(1)  711/       0 :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(1)  712/       0 :                     ; were the Amplitude Modulation.
(1)  713/       0 :                     ; According to several docs, however, it's actually the high bit.
(1)  714/       0 :                     smpsVcAmpMod macro op1,op2,op3,op4
(1)  715/       0 :                     	if SourceSMPS2ASM==0
(1)  716/       0 :                     vcAM1 set op1<<5
(1)  717/       0 :                     vcAM2 set op2<<5
(1)  718/       0 :                     vcAM3 set op3<<5
(1)  719/       0 :                     vcAM4 set op4<<5
(1)  720/       0 :                     	else
(1)  721/       0 :                     vcAM1 set op1<<7
(1)  722/       0 :                     vcAM2 set op2<<7
(1)  723/       0 :                     vcAM3 set op3<<7
(1)  724/       0 :                     vcAM4 set op4<<7
(1)  725/       0 :                     	endif
(1)  726/       0 :                     	endm
(1)  727/       0 :                     
(1)  728/       0 :                     ; Voices - First Decay Rate
(1)  729/       0 :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(1)  730/       0 :                     vcD1R1 set op1
(1)  731/       0 :                     vcD1R2 set op2
(1)  732/       0 :                     vcD1R3 set op3
(1)  733/       0 :                     vcD1R4 set op4
(1)  734/       0 :                     	endm
(1)  735/       0 :                     
(1)  736/       0 :                     ; Voices - Second Decay Rate
(1)  737/       0 :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(1)  738/       0 :                     vcD2R1 set op1
(1)  739/       0 :                     vcD2R2 set op2
(1)  740/       0 :                     vcD2R3 set op3
(1)  741/       0 :                     vcD2R4 set op4
(1)  742/       0 :                     	endm
(1)  743/       0 :                     
(1)  744/       0 :                     ; Voices - Decay Level
(1)  745/       0 :                     smpsVcDecayLevel macro op1,op2,op3,op4
(1)  746/       0 :                     vcDL1 set op1
(1)  747/       0 :                     vcDL2 set op2
(1)  748/       0 :                     vcDL3 set op3
(1)  749/       0 :                     vcDL4 set op4
(1)  750/       0 :                     	endm
(1)  751/       0 :                     
(1)  752/       0 :                     ; Voices - Release Rate
(1)  753/       0 :                     smpsVcReleaseRate macro op1,op2,op3,op4
(1)  754/       0 :                     vcRR1 set op1
(1)  755/       0 :                     vcRR2 set op2
(1)  756/       0 :                     vcRR3 set op3
(1)  757/       0 :                     vcRR4 set op4
(1)  758/       0 :                     	endm
(1)  759/       0 :                     
(1)  760/       0 :                     ; Voices - Total Level
(1)  761/       0 :                     ; The original SMPS2ASM decides TL high bits automatically,
(1)  762/       0 :                     ; but later versions leave it up to the user.
(1)  763/       0 :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(1)  764/       0 :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(1)  765/       0 :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(1)  766/       0 :                     ; SMPS Z80 does the opposite.
(1)  767/       0 :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(1)  768/       0 :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(1)  769/       0 :                     ; what we do, so we just print a warning.
(1)  770/       0 :                     smpsVcTotalLevel macro op1,op2,op3,op4
(1)  771/       0 :                     vcTL1 set op1
(1)  772/       0 :                     vcTL2 set op2
(1)  773/       0 :                     vcTL3 set op3
(1)  774/       0 :                     vcTL4 set op4
(1)  775/       0 :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  776/       0 :                     ;   0     1     2     3     4     5     6     7
(1)  777/       0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  778/       0 :                     	if SourceSMPS2ASM==0
(1)  779/       0 :                     vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  780/       0 :                     vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  781/       0 :                     vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  782/       0 :                     vcTLMask1 set $80
(1)  783/       0 :                     	else
(1)  784/       0 :                     vcTLMask4 set 0
(1)  785/       0 :                     vcTLMask3 set 0
(1)  786/       0 :                     vcTLMask2 set 0
(1)  787/       0 :                     vcTLMask1 set 0
(1)  788/       0 :                     	endif
(1)  789/       0 :                     
(1)  790/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  791/       0 :                     vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  792/       0 :                     vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  793/       0 :                     vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  794/       0 :                     vcTLMask1 set $80
(1)  795/       0 :                     vcTL1 set vcTL1&$7F
(1)  796/       0 :                     vcTL2 set vcTL2&$7F
(1)  797/       0 :                     vcTL3 set vcTL3&$7F
(1)  798/       0 :                     vcTL4 set vcTL4&$7F
(1)  799/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&(((vcTL1&$80)<>$80)||((vcTL2&$80)<>((vcAlgorithm>=5)<<7))||((vcTL3&$80)<>((vcAlgorithm>=4)<<7))||((vcTL4&$80)<>((vcAlgorithm==7)<<7)))
(1)  800/       0 :                     		if MOMPASS==2
(1)  801/       0 :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  802/       0 :                     		endif
(1)  803/       0 :                     	endif
(1)  804/       0 :                     
(1)  805/       0 :                     	if SonicDriverVer==2
(1)  806/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  807/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  808/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  809/       0 :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  810/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  811/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  812/       0 :                     	else
(1)  813/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  814/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  815/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  816/       0 :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  817/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  818/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  819/       0 :                     	endif
(1)  820/       0 :                     	endm
(1)  821/       0 :                     
(1)  822/       0 :                     
   18/       0 :                        
   19/       0 :                        ;		MUSIC STARTS HERE
   20/       0 :                        
   21/       0 : (MACRO)                	align	$B0000
   21/       0 :  (MACRO-2)                     cnop 0,$B0000
   21/       0 :   (MACRO-3)                            org (*-1+($B0000)-((*-1+(-(0)))#($B0000)))
   21/   B0000 :                                                !org (*-1+($B0000)-((*-1+(-(0)))#($B0000)))
   22/   B0000 :                        
   23/   B0000 :                        
   24/   B0000 :                        ; Z80 Bank $16
   25/   B0000 :                            ;            align   $8000
   26/   B0000 :                        
   27/   B0000 :                        ; Z80 Bank $17    
   28/   B0000 : (MACRO)                                align   $8000
   28/   B0000 :  (MACRO-2)                     cnop 0,$8000
   28/   B0000 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   28/   B0000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   29/   B0000 :                        Music_01:	include		"music-improved/81 - 2 Player Menu.asm"
(1)    1/   B0000 :                     Results_screen_2p_Header:
(1)    2/   B0000 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B0000 :                     
(1)    2/   B0000 : =$2                 SourceDriver set 2
(1)    2/   B0000 :                     
(1)    2/   B0000 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B0000 :                     
(1)    2/   B0000 : =$B0000             songStart set *
(1)    2/   B0000 :                     
(1)    2/   B0000 :                     
(1)    3/   B0000 : (MACRO)             	smpsHeaderVoice     Results_screen_2p_Voices
(1)    3/   B0000 : CD83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_VOICES)
(1)    4/   B0002 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B0002 : 0603                        dc.b    $06,$03
(1)    5/   B0004 : (MACRO)             	smpsHeaderTempo     $01, $68
(1)    5/   B0004 : 01                          dc.b    $01
(1)    5/   B0005 :  (MACRO-2)                  convertMainTempoMod $68
(1)    5/   B0005 : 98                                          dc.b    s2TempotoS3($68)
(1)    6/   B0006 :                     
(1)    7/   B0006 : (MACRO)             	smpsHeaderDAC       Results_screen_2p_DAC
(1)    7/   B0006 :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_DAC
(1)    7/   B0006 : 9E83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_DAC)
(1)    7/   B0008 : 0000                                dc.w    $00
(1)    8/   B000A : (MACRO)             	smpsHeaderFM        Results_screen_2p_FM1,	$F4, $10
(1)    8/   B000A :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_FM1
(1)    8/   B000A : 3080                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM1)
(1)    8/   B000C : F410                        dc.b    $F4,$10
(1)    9/   B000E : (MACRO)             	smpsHeaderFM        Results_screen_2p_FM2,	$F4, $0C
(1)    9/   B000E :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_FM2
(1)    9/   B000E : DE80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM2)
(1)    9/   B0010 : F40C                        dc.b    $F4,$0C
(1)   10/   B0012 : (MACRO)             	smpsHeaderFM        Results_screen_2p_FM3,	$F4, $19
(1)   10/   B0012 :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_FM3
(1)   10/   B0012 : 4A81                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM3)
(1)   10/   B0014 : F419                        dc.b    $F4,$19
(1)   11/   B0016 : (MACRO)             	smpsHeaderFM        Results_screen_2p_FM4,	$F4, $10
(1)   11/   B0016 :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_FM4
(1)   11/   B0016 : 6982                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM4)
(1)   11/   B0018 : F410                        dc.b    $F4,$10
(1)   12/   B001A : (MACRO)             	smpsHeaderFM        Results_screen_2p_FM5,	$F4, $11
(1)   12/   B001A :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_FM5
(1)   12/   B001A : 1882                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM5)
(1)   12/   B001C : F411                        dc.b    $F4,$11
(1)   13/   B001E : (MACRO)             	smpsHeaderPSG       Results_screen_2p_PSG1,	$D0, $01, $00, $00
(1)   13/   B001E :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_PSG1
(1)   13/   B001E : 9282                                dc.w    z80_ptr(RESULTS_SCREEN_2P_PSG1)
(1)   13/   B0020 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   B0020 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   B0021 : 0100 00                     dc.b    $01,$00,$00
(1)   14/   B0024 : (MACRO)             	smpsHeaderPSG       Results_screen_2p_PSG2,	$D0, $01, $00, $00
(1)   14/   B0024 :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_PSG2
(1)   14/   B0024 : 1F83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_PSG2)
(1)   14/   B0026 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   14/   B0026 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   14/   B0027 : 0100 00                     dc.b    $01,$00,$00
(1)   15/   B002A : (MACRO)             	smpsHeaderPSG       Results_screen_2p_PSG3,	$D0, $01, $00, $00
(1)   15/   B002A :  (MACRO-2)                  CheckedChannelPointer RESULTS_SCREEN_2P_PSG3
(1)   15/   B002A : 8E83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_PSG3)
(1)   15/   B002C :  (MACRO-2)                  PSGPitchConvert $D0
(1)   15/   B002C : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   15/   B002D : 0100 00                     dc.b    $01,$00,$00
(1)   16/   B0030 :                     
(1)   17/   B0030 :                     ; FM1 Data
(1)   18/   B0030 :                     Results_screen_2p_FM1:
(1)   19/   B0030 : (MACRO)             	smpsSetvoice        $04
(1)   19/   B0030 :  (MACRO-2)                  smpsFMvoice $04
(1)   19/   B0030 : EF04                                dc.b    $EF,$04
(1)   20/   B0032 : (MACRO)             	smpsModSet          $02, $01, $01, $01
(1)   20/   B0032 : F0                          dc.b    $F0
(1)   20/   B0033 : 0301 0102                           dc.b    $02+1,$01,$01,(($01+1) * $01) & $FF
(1)   20/   B0037 :                             ;dc.b   $01,$01,$01
(1)   21/   B0037 : (MACRO)             	smpsPan             panRight, $00
(1)   21/   B0037 : =$0                 panNone set $00
(1)   21/   B0037 : =$40                panRight set $40
(1)   21/   B0037 : =$80                panLeft set $80
(1)   21/   B0037 : =$C0                panCentre set $C0
(1)   21/   B0037 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   21/   B0037 : E040                        dc.b $E0,PANRIGHT+$00
(1)   22/   B0039 : (MACRO)             	smpsAlterVol        $03
(1)   22/   B0039 : E603                        dc.b    $E6,$03
(1)   23/   B003B : 8002                	dc.b	nRst, $02
(1)   24/   B003D : (MACRO)             	smpsCall            Results_screen_2p_Call03
(1)   24/   B003D : F8                          dc.b    $F8
(1)   24/   B003E : 8080                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL03)
(1)   25/   B0040 : CB16                	dc.b	nD6, $16
(1)   26/   B0042 : (MACRO)             	smpsAlterVol        $FD
(1)   26/   B0042 : E6FD                        dc.b    $E6,$FD
(1)   27/   B0044 : (MACRO)             	smpsSetvoice        $05
(1)   27/   B0044 :  (MACRO-2)                  smpsFMvoice $05
(1)   27/   B0044 : EF05                                dc.b    $EF,$05
(1)   28/   B0046 : (MACRO)             	smpsPan             panRight, $00
(1)   28/   B0046 : =$0                 panNone set $00
(1)   28/   B0046 : =$40                panRight set $40
(1)   28/   B0046 : =$80                panLeft set $80
(1)   28/   B0046 : =$C0                panCentre set $C0
(1)   28/   B0046 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   28/   B0046 : E040                        dc.b $E0,PANRIGHT+$00
(1)   29/   B0048 : (MACRO)             	smpsAlterVol        $FB
(1)   29/   B0048 : E6FB                        dc.b    $E6,$FB
(1)   30/   B004A : (MACRO)             	smpsCall            Results_screen_2p_Call01
(1)   30/   B004A : F8                          dc.b    $F8
(1)   30/   B004B : 9C80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL01)
(1)   31/   B004D : (MACRO)             	smpsCall            Results_screen_2p_Call01
(1)   31/   B004D : F8                          dc.b    $F8
(1)   31/   B004E : 9C80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL01)
(1)   32/   B0050 : (MACRO)             	smpsAlterVol        $05
(1)   32/   B0050 : E605                        dc.b    $E6,$05
(1)   33/   B0052 : (MACRO)             	smpsPan             panCenter, $00
(1)   33/   B0052 : =$0                 panNone set $00
(1)   33/   B0052 : =$40                panRight set $40
(1)   33/   B0052 : =$80                panLeft set $80
(1)   33/   B0052 : =$C0                panCentre set $C0
(1)   33/   B0052 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   33/   B0052 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   34/   B0054 : (MACRO)             	smpsSetvoice        $01
(1)   34/   B0054 :  (MACRO-2)                  smpsFMvoice $01
(1)   34/   B0054 : EF01                                dc.b    $EF,$01
(1)   35/   B0056 : (MACRO)             	smpsCall            Results_screen_2p_Call05
(1)   35/   B0056 : F8                          dc.b    $F8
(1)   35/   B0057 : CB80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL05)
(1)   36/   B0059 : 8018 BF03 BC80 BF80 	dc.b	nRst, $18, nD5, $03, nB4, nRst, nD5, nRst, $0C, nRst, $18, nCs5
            B0061 : 0C80 18BE         
(1)   37/   B0065 : 03BE 80BE BA06 BE   	dc.b	$03, nCs5, nRst, nCs5, nA4, $06, nCs5
(1)   38/   B006C : (MACRO)             	smpsCall            Results_screen_2p_Call05
(1)   38/   B006C : F8                          dc.b    $F8
(1)   38/   B006D : CB80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL05)
(1)   39/   B006F : 800C BC80 BE80 BF80 	dc.b	nRst, $0C, nB4, nRst, nCs5, nRst, nD5, nRst, nE5, nRst, $18, nD6
            B0077 : C180 18CB         
(1)   40/   B007B : 0CCA                	dc.b	$0C, nCs6
(1)   41/   B007D : (MACRO)             	smpsJump            Results_screen_2p_FM1
(1)   41/   B007D : F6                          dc.b    $F6
(1)   41/   B007E : 3080                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM1)
(1)   42/   B0080 :                     
(1)   43/   B0080 :                     Results_screen_2p_Call03:
(1)   44/   B0080 : (MACRO)             	smpsCall            Results_screen_2p_Call0C
(1)   44/   B0080 : F8                          dc.b    $F8
(1)   44/   B0081 : 8F80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL0C)
(1)   45/   B0083 : D206 D4D2 18        	dc.b	nA6, $06, nB6, nA6, $18
(1)   46/   B0088 : (MACRO)             	smpsCall            Results_screen_2p_Call0C
(1)   46/   B0088 : F8                          dc.b    $F8
(1)   46/   B0089 : 8F80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL0C)
(1)   47/   B008B : CF06 CD             	dc.b	nFs6, $06, nE6
(1)   48/   B008E : (MACRO)             	smpsReturn
(1)   48/   B008E : F9                                  dc.b    $F9
(1)   49/   B008F :                     
(1)   50/   B008F :                     Results_screen_2p_Call0C:
(1)   51/   B008F : D40C D606 D7D2 0CCF 	dc.b	nB6, $0C, nCs7, $06, nD7, nA6, $0C, nFs6, $06, nD6, nG6, $0C
            B0097 : 06CB D00C         
(1)   52/   B009B : (MACRO)             	smpsReturn
(1)   52/   B009B : F9                                  dc.b    $F9
(1)   53/   B009C :                     
(1)   54/   B009C :                     Results_screen_2p_Call01:
(1)   55/   B009C : (MACRO)             	smpsCall            Results_screen_2p_Call0B
(1)   55/   B009C : F8                          dc.b    $F8
(1)   55/   B009D : B880                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL0B)
(1)   56/   B009F : CD80 CD80 CFCF 80CB 	dc.b	nE6, nRst, nE6, nRst, nFs6, nFs6, nRst, nD6, nRst, $18
            B00A7 : 8018               
(1)   57/   B00A9 : (MACRO)             	smpsCall            Results_screen_2p_Call0B
(1)   57/   B00A9 : F8                          dc.b    $F8
(1)   57/   B00AA : B880                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL0B)
(1)   58/   B00AC : 8003 D080 CFCD 80CB 	dc.b	nRst, $03, nG6, nRst, nFs6, nE6, nRst, nD6, nD6, nRst, $18
            B00B4 : CB80 18            
(1)   59/   B00B7 : (MACRO)             	smpsReturn
(1)   59/   B00B7 : F9                                  dc.b    $F9
(1)   60/   B00B8 :                     
(1)   61/   B00B8 :                     Results_screen_2p_Call0B:
(1)   62/   B00B8 : CD03 80CD 80CF CF80 	dc.b	nE6, $03, nRst, nE6, nRst, nFs6, nFs6, nRst, nD6, nRst, nD6, nRst
            B00C0 : CB80 CB80         
(1)   63/   B00C4 : C6C8 06CB 0380      	dc.b	nA5, nB5, $06, nD6, $03, nRst
(1)   64/   B00CA : (MACRO)             	smpsReturn
(1)   64/   B00CA : F9                                  dc.b    $F9
(1)   65/   B00CB :                     
(1)   66/   B00CB :                     Results_screen_2p_Call05:
(1)   67/   B00CB : 8018 BF03 BC80 BF80 	dc.b	nRst, $18, nD5, $03, nB4, nRst, nD5, nRst, $0C, nRst, $18, nCs5
            B00D3 : 0C80 18BE         
(1)   68/   B00D7 : 03BA 80BE 800C      	dc.b	$03, nA4, nRst, nCs5, nRst, $0C
(1)   69/   B00DD : (MACRO)             	smpsReturn
(1)   69/   B00DD : F9                                  dc.b    $F9
(1)   70/   B00DE :                     
(1)   71/   B00DE :                     ; FM2 Data
(1)   72/   B00DE :                     Results_screen_2p_FM2:
(1)   73/   B00DE : (MACRO)             	smpsSetvoice        $00
(1)   73/   B00DE :  (MACRO-2)                  smpsFMvoice $00
(1)   73/   B00DE : EF00                                dc.b    $EF,$00
(1)   74/   B00E0 :                     
(1)   75/   B00E0 :                     Results_screen_2p_Loop01:
(1)   76/   B00E0 : A706 B303 03A7 06B3 	dc.b	nD3, $06, nD4, $03, $03, nD3, $06, nD4
(1)   77/   B00E8 : (MACRO)             	smpsLoop            $00, $18, Results_screen_2p_Loop01
(1)   77/   B00E8 : F7                          dc.b    $F7
(1)   77/   B00E9 : 0018                        dc.b    $00,$18
(1)   77/   B00EB : E080                                dc.w    z80_ptr(RESULTS_SCREEN_2P_LOOP01)
(1)   78/   B00ED : (MACRO)             	smpsCall            Results_screen_2p_Call04
(1)   78/   B00ED : F8                          dc.b    $F8
(1)   78/   B00EE : 3181                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL04)
(1)   79/   B00F0 :                     
(1)   80/   B00F0 :                     Results_screen_2p_Loop02:
(1)   81/   B00F0 : A9B5 0303 A906 B5   	dc.b	nE3, nE4, $03, $03, nE3, $06, nE4
(1)   82/   B00F7 : (MACRO)             	smpsLoop            $00, $02, Results_screen_2p_Loop02
(1)   82/   B00F7 : F7                          dc.b    $F7
(1)   82/   B00F8 : 0002                        dc.b    $00,$02
(1)   82/   B00FA : F080                                dc.w    z80_ptr(RESULTS_SCREEN_2P_LOOP02)
(1)   83/   B00FC :                     
(1)   84/   B00FC :                     Results_screen_2p_Loop03:
(1)   85/   B00FC : ABB7 0303 AB06 B7   	dc.b	nFs3, nFs4, $03, $03, nFs3, $06, nFs4
(1)   86/   B0103 : (MACRO)             	smpsLoop            $00, $02, Results_screen_2p_Loop03
(1)   86/   B0103 : F7                          dc.b    $F7
(1)   86/   B0104 : 0002                        dc.b    $00,$02
(1)   86/   B0106 : FC80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_LOOP03)
(1)   87/   B0108 : (MACRO)             	smpsCall            Results_screen_2p_Call04
(1)   87/   B0108 : F8                          dc.b    $F8
(1)   87/   B0109 : 3181                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL04)
(1)   88/   B010B : A9B5 0303 A906 B5AB 	dc.b	nE3, nE4, $03, $03, nE3, $06, nE4, nFs3, nFs4, $03, $03, nFs3
            B0113 : B703 03AB         
(1)   89/   B0117 : 06B7 ACB8 0303 AC06 	dc.b	$06, nFs4, nG3, nG4, $03, $03, nG3, $06, nG4, nA3, nA4, $03
            B011F : B8AE BA03         
(1)   90/   B0123 : 03AE 06BA AEBA AEBA 	dc.b	$03, nA3, $06, nA4, nA3, nA4, nA3, nA4, nA3, $0C, $0C
            B012B : AE0C 0C            
(1)   91/   B012E : (MACRO)             	smpsJump            Results_screen_2p_Loop01
(1)   91/   B012E : F6                          dc.b    $F6
(1)   91/   B012F : E080                                dc.w    z80_ptr(RESULTS_SCREEN_2P_LOOP01)
(1)   92/   B0131 :                     
(1)   93/   B0131 :                     Results_screen_2p_Call04:
(1)   94/   B0131 : ACB8 0303 AC06 B8   	dc.b	nG3, nG4, $03, $03, nG3, $06, nG4
(1)   95/   B0138 : (MACRO)             	smpsLoop            $01, $02, Results_screen_2p_Call04
(1)   95/   B0138 : F7                          dc.b    $F7
(1)   95/   B0139 : 0102                        dc.b    $01,$02
(1)   95/   B013B : 3181                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL04)
(1)   96/   B013D :                     
(1)   97/   B013D :                     Results_screen_2p_Loop04:
(1)   98/   B013D : ABB7 0303 AB06 B7   	dc.b	nFs3, nFs4, $03, $03, nFs3, $06, nFs4
(1)   99/   B0144 : (MACRO)             	smpsLoop            $01, $02, Results_screen_2p_Loop04
(1)   99/   B0144 : F7                          dc.b    $F7
(1)   99/   B0145 : 0102                        dc.b    $01,$02
(1)   99/   B0147 : 3D81                                dc.w    z80_ptr(RESULTS_SCREEN_2P_LOOP04)
(1)  100/   B0149 : (MACRO)             	smpsReturn
(1)  100/   B0149 : F9                                  dc.b    $F9
(1)  101/   B014A :                     
(1)  102/   B014A :                     ; FM3 Data
(1)  103/   B014A :                     Results_screen_2p_FM3:
(1)  104/   B014A : (MACRO)             	smpsSetvoice        $02
(1)  104/   B014A :  (MACRO-2)                  smpsFMvoice $02
(1)  104/   B014A : EF02                                dc.b    $EF,$02
(1)  105/   B014C : (MACRO)             	smpsCall            Results_screen_2p_Call00
(1)  105/   B014C : F8                          dc.b    $F8
(1)  105/   B014D : F381                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL00)
(1)  106/   B014F : (MACRO)             	smpsAlterVol        $F9
(1)  106/   B014F : E6F9                        dc.b    $E6,$F9
(1)  107/   B0151 : 801E BA03 BCBF 8009 	dc.b	nRst, $1E, nA4, $03, nB4, nD5, nRst, $09, nRst, $1E, nE5, $03
            B0159 : 801E C103         
(1)  108/   B015D : C3BF 8009 801E BA03 	dc.b	nFs5, nD5, nRst, $09, nRst, $1E, nA4, $03, nB4, nD5, nRst, $09
            B0165 : BCBF 8009         
(1)  109/   B0169 : 8018 C303 C380 C3C1 	dc.b	nRst, $18, nFs5, $03, nFs5, nRst, nFs5, nE5, $06, nD5, nRst, $1E
            B0171 : 06BF 801E         
(1)  110/   B0175 : BA03 BCBF 8009 801E 	dc.b	nA4, $03, nB4, nD5, nRst, $09, nRst, $1E, nFs5, $06, nD5, $03
            B017D : C306 BF03         
(1)  111/   B0181 : 8009 801E BA03 BCBF 	dc.b	nRst, $09, nRst, $1E, nA4, $03, nB4, nD5, nRst, $09, nRst, $18
            B0189 : 8009 8018         
(1)  112/   B018D : C403 C3C4 C5C6 80CB 	dc.b	nG5, $03, nFs5, nG5, nAb5, nA5, nRst, nD6, nRst
            B0195 : 80               
(1)  113/   B0196 : (MACRO)             	smpsAlterVol        $07
(1)  113/   B0196 : E607                        dc.b    $E6,$07
(1)  114/   B0198 : (MACRO)             	smpsSetvoice        $01
(1)  114/   B0198 :  (MACRO-2)                  smpsFMvoice $01
(1)  114/   B0198 : EF01                                dc.b    $EF,$01
(1)  115/   B019A : (MACRO)             	smpsAlterVol        $F2
(1)  115/   B019A : E6F2                        dc.b    $E6,$F2
(1)  116/   B019C : (MACRO)             	smpsPan             panRight, $00
(1)  116/   B019C : =$0                 panNone set $00
(1)  116/   B019C : =$40                panRight set $40
(1)  116/   B019C : =$80                panLeft set $80
(1)  116/   B019C : =$C0                panCentre set $C0
(1)  116/   B019C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  116/   B019C : E040                        dc.b $E0,PANRIGHT+$00
(1)  117/   B019E : (MACRO)             	smpsCall            Results_screen_2p_Call02
(1)  117/   B019E : F8                          dc.b    $F8
(1)  117/   B019F : A881                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL02)
(1)  118/   B01A1 : (MACRO)             	smpsPan             panCenter, $00
(1)  118/   B01A1 : =$0                 panNone set $00
(1)  118/   B01A1 : =$40                panRight set $40
(1)  118/   B01A1 : =$80                panLeft set $80
(1)  118/   B01A1 : =$C0                panCentre set $C0
(1)  118/   B01A1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  118/   B01A1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  119/   B01A3 : (MACRO)             	smpsAlterVol        $0E
(1)  119/   B01A3 : E60E                        dc.b    $E6,$0E
(1)  120/   B01A5 : (MACRO)             	smpsJump            Results_screen_2p_FM3
(1)  120/   B01A5 : F6                          dc.b    $F6
(1)  120/   B01A6 : 4A81                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM3)
(1)  121/   B01A8 :                     
(1)  122/   B01A8 :                     Results_screen_2p_Call02:
(1)  123/   B01A8 : CB1E C803 CACB 06C8 	dc.b	nD6, $1E, nB5, $03, nCs6, nD6, $06, nB5, $03, nRst, nCs6, $1B
            B01B0 : 0380 CA1B         
(1)  124/   B01B4 : C603 80C8 CA06 C6C8 	dc.b	nA5, $03, nRst, nB5, nCs6, $06, nA5, nB5, $1E, nA5, $03, nRst
            B01BC : 1EC6 0380         
(1)  125/   B01C0 : C806 C6CA 0CC8 06C6 	dc.b	nB5, $06, nA5, nCs6, $0C, nB5, $06, nA5, $12, nB5, $06, nCs6
            B01C8 : 12C8 06CA         
(1)  126/   B01CC : CB1E C803 CACB 80C8 	dc.b	nD6, $1E, nB5, $03, nCs6, nD6, nRst, nB5, $06, nCs6, $1E, nA5
            B01D4 : 06CA 1EC6         
(1)  127/   B01D8 : 03C8 CA80 C606 C812 	dc.b	$03, nB5, nCs6, nRst, nA5, $06, nB5, $12, nA5, $03, nB5, nCs6
            B01E0 : C603 C8CA         
(1)  128/   B01E4 : 12C8 03CA CB12 CA03 	dc.b	$12, nB5, $03, nCs6, nD6, $12, nCs6, $03, nD6, nE6, $30, nFs6
            B01EC : CBCD 30CF         
(1)  129/   B01F0 : 0CCD                	dc.b	$0C, nE6
(1)  130/   B01F2 : (MACRO)             	smpsReturn
(1)  130/   B01F2 : F9                                  dc.b    $F9
(1)  131/   B01F3 :                     
(1)  132/   B01F3 :                     Results_screen_2p_Call00:
(1)  133/   B01F3 : 801E BA03 BCBF 8009 	dc.b	nRst, $1E, nA4, $03, nB4, nD5, nRst, $09, nRst, $1E, nE5, $03
            B01FB : 801E C103         
(1)  134/   B01FF : C3BF 8009 801E BA03 	dc.b	nFs5, nD5, nRst, $09, nRst, $1E, nA4, $03, nB4, nD5, nRst, $09
            B0207 : BCBF 8009         
(1)  135/   B020B : 8018 C403 C3C4 C5C6 	dc.b	nRst, $18, nG5, $03, nFs5, nG5, nAb5, nA5, nD5, nRst, nD5, $03
            B0213 : BF80 BF03         
(1)  136/   B0217 : (MACRO)             	smpsReturn
(1)  136/   B0217 : F9                                  dc.b    $F9
(1)  137/   B0218 :                     
(1)  138/   B0218 :                     ; FM5 Data
(1)  139/   B0218 :                     Results_screen_2p_FM5:
(1)  140/   B0218 : (MACRO)             	smpsSetvoice        $03
(1)  140/   B0218 :  (MACRO-2)                  smpsFMvoice $03
(1)  140/   B0218 : EF03                                dc.b    $EF,$03
(1)  141/   B021A : (MACRO)             	smpsModSet          $02, $01, $01, $01
(1)  141/   B021A : F0                          dc.b    $F0
(1)  141/   B021B : 0301 0102                           dc.b    $02+1,$01,$01,(($01+1) * $01) & $FF
(1)  141/   B021F :                             ;dc.b   $01,$01,$01
(1)  142/   B021F :                     
(1)  143/   B021F :                     Results_screen_2p_Jump00:
(1)  144/   B021F : (MACRO)             	smpsPan             panLeft, $00
(1)  144/   B021F : =$0                 panNone set $00
(1)  144/   B021F : =$40                panRight set $40
(1)  144/   B021F : =$80                panLeft set $80
(1)  144/   B021F : =$C0                panCentre set $C0
(1)  144/   B021F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  144/   B021F : E080                        dc.b $E0,PANLEFT+$00
(1)  145/   B0221 : (MACRO)             	smpsAlterVol        $02
(1)  145/   B0221 : E602                        dc.b    $E6,$02
(1)  146/   B0223 : (MACRO)             	smpsCall            Results_screen_2p_Call03
(1)  146/   B0223 : F8                          dc.b    $F8
(1)  146/   B0224 : 8080                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL03)
(1)  147/   B0226 : CB18                	dc.b	nD6, $18
(1)  148/   B0228 : (MACRO)             	smpsPan             panCenter, $00
(1)  148/   B0228 : =$0                 panNone set $00
(1)  148/   B0228 : =$40                panRight set $40
(1)  148/   B0228 : =$80                panLeft set $80
(1)  148/   B0228 : =$C0                panCentre set $C0
(1)  148/   B0228 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  148/   B0228 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  149/   B022A : (MACRO)             	smpsAlterVol        $FE
(1)  149/   B022A : E6FE                        dc.b    $E6,$FE
(1)  150/   B022C : 8030 8080 802A      	dc.b	nRst, $30, nRst, nRst, nRst, $2A
(1)  151/   B0232 : (MACRO)             	smpsAlterVol        $03
(1)  151/   B0232 : E603                        dc.b    $E6,$03
(1)  152/   B0234 : C803 CACB 18CA C8C6 	dc.b	nB5, $03, nCs6, nD6, $18, nCs6, nB5, nA5, nG5, nFs5, nRst, $03
            B023C : C4C3 8003         
(1)  153/   B0240 : C803 80C6 C480 C3C3 	dc.b	nB5, $03, nRst, nA5, nG5, nRst, nFs5, nFs5, nRst, $18
            B0248 : 8018               
(1)  154/   B024A : (MACRO)             	smpsAlterVol        $FD
(1)  154/   B024A : E6FD                        dc.b    $E6,$FD
(1)  155/   B024C : (MACRO)             	smpsAlterVol        $03
(1)  155/   B024C : E603                        dc.b    $E6,$03
(1)  156/   B024E :                     
(1)  157/   B024E :                     Results_screen_2p_Loop00:
(1)  158/   B024E : D203 D0CF CD        	dc.b	nA6, $03, nG6, nFs6, nE6
(1)  159/   B0253 : (MACRO)             	smpsLoop            $00, $18, Results_screen_2p_Loop00
(1)  159/   B0253 : F7                          dc.b    $F7
(1)  159/   B0254 : 0018                        dc.b    $00,$18
(1)  159/   B0256 : 4E82                                dc.w    z80_ptr(RESULTS_SCREEN_2P_LOOP00)
(1)  160/   B0258 : (MACRO)             	smpsAlterVol        $FD
(1)  160/   B0258 : E6FD                        dc.b    $E6,$FD
(1)  161/   B025A : 800C CB80 CD80 CF80 	dc.b	nRst, $0C, nD6, nRst, nE6, nRst, nFs6, nRst, nG6, $18, nRst, $24
            B0262 : D018 8024         
(1)  162/   B0266 : (MACRO)             	smpsJump            Results_screen_2p_Jump00
(1)  162/   B0266 : F6                          dc.b    $F6
(1)  162/   B0267 : 1F82                                dc.w    z80_ptr(RESULTS_SCREEN_2P_JUMP00)
(1)  163/   B0269 :                     
(1)  164/   B0269 :                     ; FM4 Data
(1)  165/   B0269 :                     Results_screen_2p_FM4:
(1)  166/   B0269 : (MACRO)             	smpsSetvoice        $01
(1)  166/   B0269 :  (MACRO-2)                  smpsFMvoice $01
(1)  166/   B0269 : EF01                                dc.b    $EF,$01
(1)  167/   B026B : (MACRO)             	smpsAlterVol        $FE
(1)  167/   B026B : E6FE                        dc.b    $E6,$FE
(1)  168/   B026D : (MACRO)             	smpsAlterNote       $02
(1)  168/   B026D :  (MACRO-2)                  smpsDetune      $02
(1)  168/   B026D : E102                        dc.b    $E1,$02
(1)  169/   B026F : (MACRO)             	smpsCall            Results_screen_2p_Call00
(1)  169/   B026F : F8                          dc.b    $F8
(1)  169/   B0270 : F381                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL00)
(1)  170/   B0272 : (MACRO)             	smpsAlterVol        $02
(1)  170/   B0272 : E602                        dc.b    $E6,$02
(1)  171/   B0274 : (MACRO)             	smpsSetvoice        $01
(1)  171/   B0274 :  (MACRO-2)                  smpsFMvoice $01
(1)  171/   B0274 : EF01                                dc.b    $EF,$01
(1)  172/   B0276 : (MACRO)             	smpsPan             panLeft, $00
(1)  172/   B0276 : =$0                 panNone set $00
(1)  172/   B0276 : =$40                panRight set $40
(1)  172/   B0276 : =$80                panLeft set $80
(1)  172/   B0276 : =$C0                panCentre set $C0
(1)  172/   B0276 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  172/   B0276 : E080                        dc.b $E0,PANLEFT+$00
(1)  173/   B0278 : (MACRO)             	smpsAlterVol        $FB
(1)  173/   B0278 : E6FB                        dc.b    $E6,$FB
(1)  174/   B027A : (MACRO)             	smpsCall            Results_screen_2p_Call01
(1)  174/   B027A : F8                          dc.b    $F8
(1)  174/   B027B : 9C80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL01)
(1)  175/   B027D : (MACRO)             	smpsCall            Results_screen_2p_Call01
(1)  175/   B027D : F8                          dc.b    $F8
(1)  175/   B027E : 9C80                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL01)
(1)  176/   B0280 : (MACRO)             	smpsAlterVol        $05
(1)  176/   B0280 : E605                        dc.b    $E6,$05
(1)  177/   B0282 : (MACRO)             	smpsAlterPitch      $F4
(1)  177/   B0282 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  177/   B0282 : FBF4                                dc.b    $FB,$F4
(1)  178/   B0284 : (MACRO)             	smpsAlterVol        $FB
(1)  178/   B0284 : E6FB                        dc.b    $E6,$FB
(1)  179/   B0286 : (MACRO)             	smpsCall            Results_screen_2p_Call02
(1)  179/   B0286 : F8                          dc.b    $F8
(1)  179/   B0287 : A881                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL02)
(1)  180/   B0289 : (MACRO)             	smpsAlterPitch      $0C
(1)  180/   B0289 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  180/   B0289 : FB0C                                dc.b    $FB,$0C
(1)  181/   B028B : (MACRO)             	smpsAlterVol        $05
(1)  181/   B028B : E605                        dc.b    $E6,$05
(1)  182/   B028D : (MACRO)             	smpsPan             panCenter, $00
(1)  182/   B028D : =$0                 panNone set $00
(1)  182/   B028D : =$40                panRight set $40
(1)  182/   B028D : =$80                panLeft set $80
(1)  182/   B028D : =$C0                panCentre set $C0
(1)  182/   B028D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  182/   B028D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  183/   B028F : (MACRO)             	smpsJump            Results_screen_2p_FM4
(1)  183/   B028F : F6                          dc.b    $F6
(1)  183/   B0290 : 6982                                dc.w    z80_ptr(RESULTS_SCREEN_2P_FM4)
(1)  184/   B0292 :                     
(1)  185/   B0292 :                     ; PSG1 Data
(1)  186/   B0292 :                     Results_screen_2p_PSG1:
(1)  187/   B0292 : (MACRO)             	smpsPSGvoice        fTone_04
(1)  187/   B0292 : F504                        dc.b    $F5,FTONE_04
(1)  188/   B0294 : (MACRO)             	smpsNoteFill        $0A
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  188/   B0294 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  188/   B0294 : E80A                                dc.b    $E8,$0A
(1)  189/   B0296 :                     
(1)  190/   B0296 :                     Results_screen_2p_Jump03:
(1)  191/   B0296 : (MACRO)             	smpsCall            Results_screen_2p_Call09
(1)  191/   B0296 : F8                          dc.b    $F8
(1)  191/   B0297 : EF82                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL09)
(1)  192/   B0299 : (MACRO)             	smpsPSGAlterVol     $01
(1)  192/   B0299 : EC01                        dc.b    $EC,$01
(1)  193/   B029B : (MACRO)             	smpsCall            Results_screen_2p_Call09
(1)  193/   B029B : F8                          dc.b    $F8
(1)  193/   B029C : EF82                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL09)
(1)  194/   B029E : (MACRO)             	smpsCall            Results_screen_2p_Call09
(1)  194/   B029E : F8                          dc.b    $F8
(1)  194/   B029F : EF82                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL09)
(1)  195/   B02A1 : (MACRO)             	smpsCall            Results_screen_2p_Call0A
(1)  195/   B02A1 : F8                          dc.b    $F8
(1)  195/   B02A2 : 0483                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL0A)
(1)  196/   B02A4 : 8003 C806 0306 C409 	dc.b	nRst, $03, nB5, $06, $03, $06, nG5, $09, nB5, $06, $03, $06
            B02AC : C806 0306         
(1)  197/   B02B0 : C480 03CA 0603 06C6 	dc.b	nG5, nRst, $03, nCs6, $06, $03, $06, nA5, $09, nCs6, $06, $09
            B02B8 : 09CA 0609         
(1)  198/   B02BC : C606                	dc.b	nA5, $06
(1)  199/   B02BE : (MACRO)             	smpsCall            Results_screen_2p_Call0A
(1)  199/   B02BE : F8                          dc.b    $F8
(1)  199/   B02BF : 0483                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL0A)
(1)  200/   B02C1 : (MACRO)             	smpsCall            Results_screen_2p_Call08
(1)  200/   B02C1 : F8                          dc.b    $F8
(1)  200/   B02C2 : CE82                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL08)
(1)  201/   B02C4 : CA03 CD0C 24        	dc.b	nCs6, $03, nE6, $0C, $24
(1)  202/   B02C9 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  202/   B02C9 : ECFF                        dc.b    $EC,$FF
(1)  203/   B02CB : (MACRO)             	smpsJump            Results_screen_2p_Jump03
(1)  203/   B02CB : F6                          dc.b    $F6
(1)  203/   B02CC : 9682                                dc.w    z80_ptr(RESULTS_SCREEN_2P_JUMP03)
(1)  204/   B02CE :                     
(1)  205/   B02CE :                     Results_screen_2p_Call08:
(1)  206/   B02CE : C803 C4C8 C4C8 C4C8 	dc.b	nB5, $03, nG5, nB5, nG5, nB5, nG5, nB5, nG5, nCs6, nA5, nCs6
            B02D6 : C4CA C6CA         
(1)  207/   B02DA : C6CA C6CA C6CB C8CB 	dc.b	nA5, nCs6, nA5, nCs6, nA5, nD6, nB5, nD6, nB5, nD6, nB5, nD6
            B02E2 : C8CB C8CB         
(1)  208/   B02E6 : C8CD CACD CACD CACD 	dc.b	nB5, nE6, nCs6, nE6, nCs6, nE6, nCs6, nE6
(1)  209/   B02EE : (MACRO)             	smpsReturn
(1)  209/   B02EE : F9                                  dc.b    $F9
(1)  210/   B02EF :                     
(1)  211/   B02EF :                     Results_screen_2p_Call09:
(1)  212/   B02EF : C809 09C6 1EC4 0909 	dc.b	nB5, $09, $09, nA5, $1E, nG5, $09, $09, nA5, $1E, nB5, $09
            B02F7 : C61E C809         
(1)  213/   B02FB : 09C6 1EC4 09C6 C31E 	dc.b	$09, nA5, $1E, nG5, $09, nA5, nFs5, $1E
(1)  214/   B0303 : (MACRO)             	smpsReturn
(1)  214/   B0303 : F9                                  dc.b    $F9
(1)  215/   B0304 :                     
(1)  216/   B0304 :                     Results_screen_2p_Call0A:
(1)  217/   B0304 : 8003 CB06 0306 C809 	dc.b	nRst, $03, nD6, $06, $03, $06, nB5, $09, nD6, $06, $03, $06
            B030C : CB06 0306         
(1)  218/   B0310 : C880 03CA 0603 06C6 	dc.b	nB5, nRst, $03, nCs6, $06, $03, $06, nA5, $09, nCs6, $06, $03
            B0318 : 09CA 0603         
(1)  219/   B031C : 06C6                	dc.b	$06, nA5
(1)  220/   B031E : (MACRO)             	smpsReturn
(1)  220/   B031E : F9                                  dc.b    $F9
(1)  221/   B031F :                     
(1)  222/   B031F :                     ; PSG2 Data
(1)  223/   B031F :                     Results_screen_2p_PSG2:
(1)  224/   B031F : (MACRO)             	smpsPSGvoice        fTone_04
(1)  224/   B031F : F504                        dc.b    $F5,FTONE_04
(1)  225/   B0321 : (MACRO)             	smpsNoteFill        $0A
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  225/   B0321 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  225/   B0321 : E80A                                dc.b    $E8,$0A
(1)  226/   B0323 :                     
(1)  227/   B0323 :                     Results_screen_2p_Jump02:
(1)  228/   B0323 : (MACRO)             	smpsCall            Results_screen_2p_Call06
(1)  228/   B0323 : F8                          dc.b    $F8
(1)  228/   B0324 : 5D83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL06)
(1)  229/   B0326 : (MACRO)             	smpsPSGAlterVol     $01
(1)  229/   B0326 : EC01                        dc.b    $EC,$01
(1)  230/   B0328 : (MACRO)             	smpsCall            Results_screen_2p_Call06
(1)  230/   B0328 : F8                          dc.b    $F8
(1)  230/   B0329 : 5D83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL06)
(1)  231/   B032B : (MACRO)             	smpsCall            Results_screen_2p_Call06
(1)  231/   B032B : F8                          dc.b    $F8
(1)  231/   B032C : 5D83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL06)
(1)  232/   B032E : (MACRO)             	smpsCall            Results_screen_2p_Call07
(1)  232/   B032E : F8                          dc.b    $F8
(1)  232/   B032F : 7283                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL07)
(1)  233/   B0331 : 8003 C406 0306 C109 	dc.b	nRst, $03, nG5, $06, $03, $06, nE5, $09, nG5, $06, $03, $06
            B0339 : C406 0306         
(1)  234/   B033D : C180 03C6 0603 06C3 	dc.b	nE5, nRst, $03, nA5, $06, $03, $06, nFs5, $09, nA5, $06, $09
            B0345 : 09C6 0609         
(1)  235/   B0349 : C306                	dc.b	nFs5, $06
(1)  236/   B034B : (MACRO)             	smpsCall            Results_screen_2p_Call07
(1)  236/   B034B : F8                          dc.b    $F8
(1)  236/   B034C : 7283                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL07)
(1)  237/   B034E : 8001                	dc.b	nRst, $01
(1)  238/   B0350 : (MACRO)             	smpsCall            Results_screen_2p_Call08
(1)  238/   B0350 : F8                          dc.b    $F8
(1)  238/   B0351 : CE82                                dc.w    z80_ptr(RESULTS_SCREEN_2P_CALL08)
(1)  239/   B0353 : CA02 CA0C 24        	dc.b	nCs6, $02, nCs6, $0C, $24
(1)  240/   B0358 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  240/   B0358 : ECFF                        dc.b    $EC,$FF
(1)  241/   B035A : (MACRO)             	smpsJump            Results_screen_2p_Jump02
(1)  241/   B035A : F6                          dc.b    $F6
(1)  241/   B035B : 2383                                dc.w    z80_ptr(RESULTS_SCREEN_2P_JUMP02)
(1)  242/   B035D :                     
(1)  243/   B035D :                     Results_screen_2p_Call06:
(1)  244/   B035D : C409 09C3 1EC1 0909 	dc.b	nG5, $09, $09, nFs5, $1E, nE5, $09, $09, nFs5, $1E, nG5, $09
            B0365 : C31E C409         
(1)  245/   B0369 : 09C3 1EC1 09C3 BF1E 	dc.b	$09, nFs5, $1E, nE5, $09, nFs5, nD5, $1E
(1)  246/   B0371 : (MACRO)             	smpsReturn
(1)  246/   B0371 : F9                                  dc.b    $F9
(1)  247/   B0372 :                     
(1)  248/   B0372 :                     Results_screen_2p_Call07:
(1)  249/   B0372 : 8003 C806 0306 C409 	dc.b	nRst, $03, nB5, $06, $03, $06, nG5, $09, nB5, $06, $03, $06
            B037A : C806 0306         
(1)  250/   B037E : C480 03C6 0603 06C3 	dc.b	nG5, nRst, $03, nA5, $06, $03, $06, nFs5, $09, nA5, $06, $03
            B0386 : 09C6 0603         
(1)  251/   B038A : CA06 C3             	dc.b	nCs6, $06, nFs5
(1)  252/   B038D : (MACRO)             	smpsReturn
(1)  252/   B038D : F9                                  dc.b    $F9
(1)  253/   B038E :                     
(1)  254/   B038E :                     ; PSG3 Data
(1)  255/   B038E :                     Results_screen_2p_PSG3:
(1)  256/   B038E : (MACRO)             	smpsPSGvoice        fTone_02
(1)  256/   B038E : F502                        dc.b    $F5,FTONE_02
(1)  257/   B0390 : (MACRO)             	smpsNoteFill        $04
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  257/   B0390 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  257/   B0390 : E804                                dc.b    $E8,$04
(1)  258/   B0392 :                     
(1)  259/   B0392 :                     Results_screen_2p_Jump01:
(1)  260/   B0392 : CE06 CB03 03CE 80CB 	dc.b	nF6, $06, nD6, $03, $03, nF6, nRst, nD6, nRst
            B039A : 80               
(1)  261/   B039B : (MACRO)             	smpsJump            Results_screen_2p_Jump01
(1)  261/   B039B : F6                          dc.b    $F6
(1)  261/   B039C : 9283                                dc.w    z80_ptr(RESULTS_SCREEN_2P_JUMP01)
(1)  262/   B039E :                     
(1)  263/   B039E :                     ; DAC Data
(1)  264/   B039E :                     Results_screen_2p_DAC:
(1)  265/   B039E : 8106 8003 8181 068C 	dc.b	dKick, $06, nRst, $03, dKick, dKick, $06, dMidTom, dKick, $06, nRst, $03
            B03A6 : 8106 8003         
(1)  266/   B03AA : 8181 068C 8106 8003 	dc.b	dKick, dKick, $06, dMidTom, dKick, $06, nRst, $03, dKick, dKick, $06, dMidTom
            B03B2 : 8181 068C         
(1)  267/   B03B6 : 8103 0603 068C 06   	dc.b	dKick, $03, $06, $03, $06, dMidTom, $06
(1)  268/   B03BD : (MACRO)             	smpsLoop            $00, $0A, Results_screen_2p_DAC
(1)  268/   B03BD : F7                          dc.b    $F7
(1)  268/   B03BE : 000A                        dc.b    $00,$0A
(1)  268/   B03C0 : 9E83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_DAC)
(1)  269/   B03C2 : 8106 8C06 0606 0C0C 	dc.b	dKick, $06, dMidTom, $06, $06, $06, $0C, $0C
(1)  270/   B03CA : (MACRO)             	smpsJump            Results_screen_2p_DAC
(1)  270/   B03CA : F6                          dc.b    $F6
(1)  270/   B03CB : 9E83                                dc.w    z80_ptr(RESULTS_SCREEN_2P_DAC)
(1)  271/   B03CD :                     
(1)  272/   B03CD :                     Results_screen_2p_Voices:
(1)  273/   B03CD :                     ;	Voice $00
(1)  274/   B03CD :                     ;	$08
(1)  275/   B03CD :                     ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  276/   B03CD :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $80
(1)  277/   B03CD : (MACRO)             	smpsVcAlgorithm     $00
(1)  277/   B03CD : =$0                 vcAlgorithm set $00
(1)  278/   B03CD : (MACRO)             	smpsVcFeedback      $01
(1)  278/   B03CD : =$1                 vcFeedback set $01
(1)  279/   B03CD : (MACRO)             	smpsVcUnusedBits    $00
(1)  279/   B03CD : =$0                 vcUnusedBits set $00
(1)  279/   B03CD : =$0                 vcD1R1Unk set 0
(1)  279/   B03CD : =$0                 vcD1R2Unk set 0
(1)  279/   B03CD : =$0                 vcD1R3Unk set 0
(1)  279/   B03CD : =$0                 vcD1R4Unk set 0
(1)  280/   B03CD : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  280/   B03CD : =$0                 vcDT1 set $00
(1)  280/   B03CD : =$3                 vcDT2 set $03
(1)  280/   B03CD : =$7                 vcDT3 set $07
(1)  280/   B03CD : =$0                 vcDT4 set $00
(1)  281/   B03CD : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)  281/   B03CD : =$0                 vcCF1 set $00
(1)  281/   B03CD : =$0                 vcCF2 set $00
(1)  281/   B03CD : =$0                 vcCF3 set $00
(1)  281/   B03CD : =$9                 vcCF4 set $09
(1)  282/   B03CD : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  282/   B03CD : =$1                 vcRS1 set $01
(1)  282/   B03CD : =$1                 vcRS2 set $01
(1)  282/   B03CD : =$0                 vcRS3 set $00
(1)  282/   B03CD : =$0                 vcRS4 set $00
(1)  283/   B03CD : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  283/   B03CD : =$1F                vcAR1 set $1F
(1)  283/   B03CD : =$1F                vcAR2 set $1F
(1)  283/   B03CD : =$1F                vcAR3 set $1F
(1)  283/   B03CD : =$1F                vcAR4 set $1F
(1)  284/   B03CD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  284/   B03CD : =$0                 vcAM1 set $00<<5
(1)  284/   B03CD : =$0                 vcAM2 set $00<<5
(1)  284/   B03CD : =$0                 vcAM3 set $00<<5
(1)  284/   B03CD : =$0                 vcAM4 set $00<<5
(1)  285/   B03CD : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  285/   B03CD : =$A                 vcD1R1 set $0A
(1)  285/   B03CD : =$A                 vcD1R2 set $0A
(1)  285/   B03CD : =$E                 vcD1R3 set $0E
(1)  285/   B03CD : =$12                vcD1R4 set $12
(1)  286/   B03CD : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  286/   B03CD : =$3                 vcD2R1 set $03
(1)  286/   B03CD : =$4                 vcD2R2 set $04
(1)  286/   B03CD : =$4                 vcD2R3 set $04
(1)  286/   B03CD : =$0                 vcD2R4 set $00
(1)  287/   B03CD : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  287/   B03CD : =$2                 vcDL1 set $02
(1)  287/   B03CD : =$2                 vcDL2 set $02
(1)  287/   B03CD : =$2                 vcDL3 set $02
(1)  287/   B03CD : =$2                 vcDL4 set $02
(1)  288/   B03CD : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  288/   B03CD : =$F                 vcRR1 set $0F
(1)  288/   B03CD : =$F                 vcRR2 set $0F
(1)  288/   B03CD : =$F                 vcRR3 set $0F
(1)  288/   B03CD : =$F                 vcRR4 set $0F
(1)  289/   B03CD : (MACRO)             	smpsVcTotalLevel    $00, $13, $30, $25
(1)  289/   B03CD : =$0                 vcTL1 set $00
(1)  289/   B03CD : =$13                vcTL2 set $13
(1)  289/   B03CD : =$30                vcTL3 set $30
(1)  289/   B03CD : =$25                vcTL4 set $25
(1)  289/   B03CD : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  289/   B03CE :                     ;   0     1     2     3     4     5     6     7
(1)  289/   B03CE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  289/   B03CE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  289/   B03CE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  289/   B03CE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  289/   B03CE : =$80                vcTLMask1 set $80
(1)  289/   B03CE :                     
(1)  289/   B03CE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  289/   B03CE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  289/   B03CE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  289/   B03CE : =$80                vcTLMask1 set $80
(1)  289/   B03CE : =$0                 vcTL1 set vcTL1&$7F
(1)  289/   B03CE : =$13                vcTL2 set vcTL2&$7F
(1)  289/   B03CE : =$30                vcTL3 set vcTL3&$7F
(1)  289/   B03CE : =$25                vcTL4 set vcTL4&$7F
(1)  289/   B03CE :                     
(1)  289/   B03CE : 0970 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  289/   B03D2 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  289/   B03D6 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  289/   B03DA : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  289/   B03DE : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  289/   B03E2 : 2530 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  290/   B03E6 :                     
(1)  291/   B03E6 :                     ;	Voice $01
(1)  292/   B03E6 :                     ;	$3A
(1)  293/   B03E6 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  294/   B03E6 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1)  295/   B03E6 : (MACRO)             	smpsVcAlgorithm     $02
(1)  295/   B03E6 : =$2                 vcAlgorithm set $02
(1)  296/   B03E6 : (MACRO)             	smpsVcFeedback      $07
(1)  296/   B03E6 : =$7                 vcFeedback set $07
(1)  297/   B03E6 : (MACRO)             	smpsVcUnusedBits    $00
(1)  297/   B03E6 : =$0                 vcUnusedBits set $00
(1)  297/   B03E6 : =$0                 vcD1R1Unk set 0
(1)  297/   B03E6 : =$0                 vcD1R2Unk set 0
(1)  297/   B03E6 : =$0                 vcD1R3Unk set 0
(1)  297/   B03E6 : =$0                 vcD1R4Unk set 0
(1)  298/   B03E6 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  298/   B03E6 : =$0                 vcDT1 set $00
(1)  298/   B03E6 : =$0                 vcDT2 set $00
(1)  298/   B03E6 : =$0                 vcDT3 set $00
(1)  298/   B03E6 : =$0                 vcDT4 set $00
(1)  299/   B03E6 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  299/   B03E6 : =$1                 vcCF1 set $01
(1)  299/   B03E6 : =$1                 vcCF2 set $01
(1)  299/   B03E6 : =$7                 vcCF3 set $07
(1)  299/   B03E6 : =$1                 vcCF4 set $01
(1)  300/   B03E6 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  300/   B03E6 : =$1                 vcRS1 set $01
(1)  300/   B03E6 : =$2                 vcRS2 set $02
(1)  300/   B03E6 : =$2                 vcRS3 set $02
(1)  300/   B03E6 : =$2                 vcRS4 set $02
(1)  301/   B03E6 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  301/   B03E6 : =$13                vcAR1 set $13
(1)  301/   B03E6 : =$D                 vcAR2 set $0D
(1)  301/   B03E6 : =$E                 vcAR3 set $0E
(1)  301/   B03E6 : =$E                 vcAR4 set $0E
(1)  302/   B03E6 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  302/   B03E6 : =$0                 vcAM1 set $00<<5
(1)  302/   B03E6 : =$0                 vcAM2 set $00<<5
(1)  302/   B03E6 : =$0                 vcAM3 set $00<<5
(1)  302/   B03E6 : =$0                 vcAM4 set $00<<5
(1)  303/   B03E6 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  303/   B03E6 : =$3                 vcD1R1 set $03
(1)  303/   B03E6 : =$E                 vcD1R2 set $0E
(1)  303/   B03E6 : =$E                 vcD1R3 set $0E
(1)  303/   B03E6 : =$E                 vcD1R4 set $0E
(1)  304/   B03E6 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  304/   B03E6 : =$0                 vcD2R1 set $00
(1)  304/   B03E6 : =$0                 vcD2R2 set $00
(1)  304/   B03E6 : =$0                 vcD2R3 set $00
(1)  304/   B03E6 : =$0                 vcD2R4 set $00
(1)  305/   B03E6 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  305/   B03E6 : =$0                 vcDL1 set $00
(1)  305/   B03E6 : =$1                 vcDL2 set $01
(1)  305/   B03E6 : =$F                 vcDL3 set $0F
(1)  305/   B03E6 : =$1                 vcDL4 set $01
(1)  306/   B03E6 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  306/   B03E6 : =$F                 vcRR1 set $0F
(1)  306/   B03E6 : =$F                 vcRR2 set $0F
(1)  306/   B03E6 : =$F                 vcRR3 set $0F
(1)  306/   B03E6 : =$F                 vcRR4 set $0F
(1)  307/   B03E6 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $17
(1)  307/   B03E6 : =$0                 vcTL1 set $00
(1)  307/   B03E6 : =$27                vcTL2 set $27
(1)  307/   B03E6 : =$28                vcTL3 set $28
(1)  307/   B03E6 : =$17                vcTL4 set $17
(1)  307/   B03E6 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  307/   B03E7 :                     ;   0     1     2     3     4     5     6     7
(1)  307/   B03E7 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  307/   B03E7 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  307/   B03E7 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  307/   B03E7 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  307/   B03E7 : =$80                vcTLMask1 set $80
(1)  307/   B03E7 :                     
(1)  307/   B03E7 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  307/   B03E7 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  307/   B03E7 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  307/   B03E7 : =$80                vcTLMask1 set $80
(1)  307/   B03E7 : =$0                 vcTL1 set vcTL1&$7F
(1)  307/   B03E7 : =$27                vcTL2 set vcTL2&$7F
(1)  307/   B03E7 : =$28                vcTL3 set vcTL3&$7F
(1)  307/   B03E7 : =$17                vcTL4 set vcTL4&$7F
(1)  307/   B03E7 :                     
(1)  307/   B03E7 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  307/   B03EB : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  307/   B03EF : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  307/   B03F3 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  307/   B03F7 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  307/   B03FB : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  308/   B03FF :                     
(1)  309/   B03FF :                     ;	Voice $02
(1)  310/   B03FF :                     ;	$3A
(1)  311/   B03FF :                     ;	$03, $08, $03, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  312/   B03FF :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $20, $80
(1)  313/   B03FF : (MACRO)             	smpsVcAlgorithm     $02
(1)  313/   B03FF : =$2                 vcAlgorithm set $02
(1)  314/   B03FF : (MACRO)             	smpsVcFeedback      $07
(1)  314/   B03FF : =$7                 vcFeedback set $07
(1)  315/   B03FF : (MACRO)             	smpsVcUnusedBits    $00
(1)  315/   B03FF : =$0                 vcUnusedBits set $00
(1)  315/   B03FF : =$0                 vcD1R1Unk set 0
(1)  315/   B03FF : =$0                 vcD1R2Unk set 0
(1)  315/   B03FF : =$0                 vcD1R3Unk set 0
(1)  315/   B03FF : =$0                 vcD1R4Unk set 0
(1)  316/   B03FF : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  316/   B03FF : =$0                 vcDT1 set $00
(1)  316/   B03FF : =$0                 vcDT2 set $00
(1)  316/   B03FF : =$0                 vcDT3 set $00
(1)  316/   B03FF : =$0                 vcDT4 set $00
(1)  317/   B03FF : (MACRO)             	smpsVcCoarseFreq    $01, $03, $08, $03
(1)  317/   B03FF : =$1                 vcCF1 set $01
(1)  317/   B03FF : =$3                 vcCF2 set $03
(1)  317/   B03FF : =$8                 vcCF3 set $08
(1)  317/   B03FF : =$3                 vcCF4 set $03
(1)  318/   B03FF : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  318/   B03FF : =$1                 vcRS1 set $01
(1)  318/   B03FF : =$2                 vcRS2 set $02
(1)  318/   B03FF : =$2                 vcRS3 set $02
(1)  318/   B03FF : =$2                 vcRS4 set $02
(1)  319/   B03FF : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  319/   B03FF : =$13                vcAR1 set $13
(1)  319/   B03FF : =$D                 vcAR2 set $0D
(1)  319/   B03FF : =$E                 vcAR3 set $0E
(1)  319/   B03FF : =$E                 vcAR4 set $0E
(1)  320/   B03FF : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  320/   B03FF : =$0                 vcAM1 set $00<<5
(1)  320/   B03FF : =$0                 vcAM2 set $00<<5
(1)  320/   B03FF : =$0                 vcAM3 set $00<<5
(1)  320/   B03FF : =$0                 vcAM4 set $00<<5
(1)  321/   B03FF : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  321/   B03FF : =$3                 vcD1R1 set $03
(1)  321/   B03FF : =$E                 vcD1R2 set $0E
(1)  321/   B03FF : =$E                 vcD1R3 set $0E
(1)  321/   B03FF : =$E                 vcD1R4 set $0E
(1)  322/   B03FF : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  322/   B03FF : =$0                 vcD2R1 set $00
(1)  322/   B03FF : =$0                 vcD2R2 set $00
(1)  322/   B03FF : =$0                 vcD2R3 set $00
(1)  322/   B03FF : =$0                 vcD2R4 set $00
(1)  323/   B03FF : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  323/   B03FF : =$0                 vcDL1 set $00
(1)  323/   B03FF : =$1                 vcDL2 set $01
(1)  323/   B03FF : =$F                 vcDL3 set $0F
(1)  323/   B03FF : =$1                 vcDL4 set $01
(1)  324/   B03FF : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  324/   B03FF : =$F                 vcRR1 set $0F
(1)  324/   B03FF : =$F                 vcRR2 set $0F
(1)  324/   B03FF : =$F                 vcRR3 set $0F
(1)  324/   B03FF : =$F                 vcRR4 set $0F
(1)  325/   B03FF : (MACRO)             	smpsVcTotalLevel    $00, $20, $28, $17
(1)  325/   B03FF : =$0                 vcTL1 set $00
(1)  325/   B03FF : =$20                vcTL2 set $20
(1)  325/   B03FF : =$28                vcTL3 set $28
(1)  325/   B03FF : =$17                vcTL4 set $17
(1)  325/   B03FF : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  325/   B0400 :                     ;   0     1     2     3     4     5     6     7
(1)  325/   B0400 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  325/   B0400 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  325/   B0400 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  325/   B0400 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  325/   B0400 : =$80                vcTLMask1 set $80
(1)  325/   B0400 :                     
(1)  325/   B0400 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  325/   B0400 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  325/   B0400 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  325/   B0400 : =$80                vcTLMask1 set $80
(1)  325/   B0400 : =$0                 vcTL1 set vcTL1&$7F
(1)  325/   B0400 : =$20                vcTL2 set vcTL2&$7F
(1)  325/   B0400 : =$28                vcTL3 set vcTL3&$7F
(1)  325/   B0400 : =$17                vcTL4 set vcTL4&$7F
(1)  325/   B0400 :                     
(1)  325/   B0400 : 0308 0301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  325/   B0404 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  325/   B0408 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  325/   B040C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  325/   B0410 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  325/   B0414 : 1728 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  326/   B0418 :                     
(1)  327/   B0418 :                     ;	Voice $03
(1)  328/   B0418 :                     ;	$3D
(1)  329/   B0418 :                     ;	$61, $34, $03, $72, 	$0E, $0C, $8D, $0D, 	$08, $05, $05, $05
(1)  330/   B0418 :                     ;	$00, $00, $00, $00, 	$1F, $2F, $2F, $2F, 	$19, $99, $9E, $80
(1)  331/   B0418 : (MACRO)             	smpsVcAlgorithm     $05
(1)  331/   B0418 : =$5                 vcAlgorithm set $05
(1)  332/   B0418 : (MACRO)             	smpsVcFeedback      $07
(1)  332/   B0418 : =$7                 vcFeedback set $07
(1)  333/   B0418 : (MACRO)             	smpsVcUnusedBits    $00
(1)  333/   B0418 : =$0                 vcUnusedBits set $00
(1)  333/   B0418 : =$0                 vcD1R1Unk set 0
(1)  333/   B0418 : =$0                 vcD1R2Unk set 0
(1)  333/   B0418 : =$0                 vcD1R3Unk set 0
(1)  333/   B0418 : =$0                 vcD1R4Unk set 0
(1)  334/   B0418 : (MACRO)             	smpsVcDetune        $07, $00, $03, $06
(1)  334/   B0418 : =$7                 vcDT1 set $07
(1)  334/   B0418 : =$0                 vcDT2 set $00
(1)  334/   B0418 : =$3                 vcDT3 set $03
(1)  334/   B0418 : =$6                 vcDT4 set $06
(1)  335/   B0418 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $04, $01
(1)  335/   B0418 : =$2                 vcCF1 set $02
(1)  335/   B0418 : =$3                 vcCF2 set $03
(1)  335/   B0418 : =$4                 vcCF3 set $04
(1)  335/   B0418 : =$1                 vcCF4 set $01
(1)  336/   B0418 : (MACRO)             	smpsVcRateScale     $00, $02, $00, $00
(1)  336/   B0418 : =$0                 vcRS1 set $00
(1)  336/   B0418 : =$2                 vcRS2 set $02
(1)  336/   B0418 : =$0                 vcRS3 set $00
(1)  336/   B0418 : =$0                 vcRS4 set $00
(1)  337/   B0418 : (MACRO)             	smpsVcAttackRate    $0D, $0D, $0C, $0E
(1)  337/   B0418 : =$D                 vcAR1 set $0D
(1)  337/   B0418 : =$D                 vcAR2 set $0D
(1)  337/   B0418 : =$C                 vcAR3 set $0C
(1)  337/   B0418 : =$E                 vcAR4 set $0E
(1)  338/   B0418 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  338/   B0418 : =$0                 vcAM1 set $00<<5
(1)  338/   B0418 : =$0                 vcAM2 set $00<<5
(1)  338/   B0418 : =$0                 vcAM3 set $00<<5
(1)  338/   B0418 : =$0                 vcAM4 set $00<<5
(1)  339/   B0418 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $08
(1)  339/   B0418 : =$5                 vcD1R1 set $05
(1)  339/   B0418 : =$5                 vcD1R2 set $05
(1)  339/   B0418 : =$5                 vcD1R3 set $05
(1)  339/   B0418 : =$8                 vcD1R4 set $08
(1)  340/   B0418 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  340/   B0418 : =$0                 vcD2R1 set $00
(1)  340/   B0418 : =$0                 vcD2R2 set $00
(1)  340/   B0418 : =$0                 vcD2R3 set $00
(1)  340/   B0418 : =$0                 vcD2R4 set $00
(1)  341/   B0418 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $01
(1)  341/   B0418 : =$2                 vcDL1 set $02
(1)  341/   B0418 : =$2                 vcDL2 set $02
(1)  341/   B0418 : =$2                 vcDL3 set $02
(1)  341/   B0418 : =$1                 vcDL4 set $01
(1)  342/   B0418 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  342/   B0418 : =$F                 vcRR1 set $0F
(1)  342/   B0418 : =$F                 vcRR2 set $0F
(1)  342/   B0418 : =$F                 vcRR3 set $0F
(1)  342/   B0418 : =$F                 vcRR4 set $0F
(1)  343/   B0418 : (MACRO)             	smpsVcTotalLevel    $00, $1E, $19, $19
(1)  343/   B0418 : =$0                 vcTL1 set $00
(1)  343/   B0418 : =$1E                vcTL2 set $1E
(1)  343/   B0418 : =$19                vcTL3 set $19
(1)  343/   B0418 : =$19                vcTL4 set $19
(1)  343/   B0418 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  343/   B0419 :                     ;   0     1     2     3     4     5     6     7
(1)  343/   B0419 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  343/   B0419 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  343/   B0419 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  343/   B0419 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  343/   B0419 : =$80                vcTLMask1 set $80
(1)  343/   B0419 :                     
(1)  343/   B0419 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  343/   B0419 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  343/   B0419 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  343/   B0419 : =$80                vcTLMask1 set $80
(1)  343/   B0419 : =$0                 vcTL1 set vcTL1&$7F
(1)  343/   B0419 : =$1E                vcTL2 set vcTL2&$7F
(1)  343/   B0419 : =$19                vcTL3 set vcTL3&$7F
(1)  343/   B0419 : =$19                vcTL4 set vcTL4&$7F
(1)  343/   B0419 :                     
(1)  343/   B0419 : 6134 0372                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  343/   B041D : 0E0C 8D0D                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  343/   B0421 : 0805 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  343/   B0425 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  343/   B0429 : 1F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  343/   B042D : 1999 9E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  344/   B0431 :                     
(1)  345/   B0431 :                     ;	Voice $04
(1)  346/   B0431 :                     ;	$3C
(1)  347/   B0431 :                     ;	$31, $02, $72, $03, 	$0F, $4D, $0F, $0D, 	$00, $02, $00, $02
(1)  348/   B0431 :                     ;	$00, $00, $00, $00, 	$0F, $3F, $0F, $3F, 	$19, $80, $29, $8A
(1)  349/   B0431 : (MACRO)             	smpsVcAlgorithm     $04
(1)  349/   B0431 : =$4                 vcAlgorithm set $04
(1)  350/   B0431 : (MACRO)             	smpsVcFeedback      $07
(1)  350/   B0431 : =$7                 vcFeedback set $07
(1)  351/   B0431 : (MACRO)             	smpsVcUnusedBits    $00
(1)  351/   B0431 : =$0                 vcUnusedBits set $00
(1)  351/   B0431 : =$0                 vcD1R1Unk set 0
(1)  351/   B0431 : =$0                 vcD1R2Unk set 0
(1)  351/   B0431 : =$0                 vcD1R3Unk set 0
(1)  351/   B0431 : =$0                 vcD1R4Unk set 0
(1)  352/   B0431 : (MACRO)             	smpsVcDetune        $00, $07, $00, $03
(1)  352/   B0431 : =$0                 vcDT1 set $00
(1)  352/   B0431 : =$7                 vcDT2 set $07
(1)  352/   B0431 : =$0                 vcDT3 set $00
(1)  352/   B0431 : =$3                 vcDT4 set $03
(1)  353/   B0431 : (MACRO)             	smpsVcCoarseFreq    $03, $02, $02, $01
(1)  353/   B0431 : =$3                 vcCF1 set $03
(1)  353/   B0431 : =$2                 vcCF2 set $02
(1)  353/   B0431 : =$2                 vcCF3 set $02
(1)  353/   B0431 : =$1                 vcCF4 set $01
(1)  354/   B0431 : (MACRO)             	smpsVcRateScale     $00, $00, $01, $00
(1)  354/   B0431 : =$0                 vcRS1 set $00
(1)  354/   B0431 : =$0                 vcRS2 set $00
(1)  354/   B0431 : =$1                 vcRS3 set $01
(1)  354/   B0431 : =$0                 vcRS4 set $00
(1)  355/   B0431 : (MACRO)             	smpsVcAttackRate    $0D, $0F, $0D, $0F
(1)  355/   B0431 : =$D                 vcAR1 set $0D
(1)  355/   B0431 : =$F                 vcAR2 set $0F
(1)  355/   B0431 : =$D                 vcAR3 set $0D
(1)  355/   B0431 : =$F                 vcAR4 set $0F
(1)  356/   B0431 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  356/   B0431 : =$0                 vcAM1 set $00<<5
(1)  356/   B0431 : =$0                 vcAM2 set $00<<5
(1)  356/   B0431 : =$0                 vcAM3 set $00<<5
(1)  356/   B0431 : =$0                 vcAM4 set $00<<5
(1)  357/   B0431 : (MACRO)             	smpsVcDecayRate1    $02, $00, $02, $00
(1)  357/   B0431 : =$2                 vcD1R1 set $02
(1)  357/   B0431 : =$0                 vcD1R2 set $00
(1)  357/   B0431 : =$2                 vcD1R3 set $02
(1)  357/   B0431 : =$0                 vcD1R4 set $00
(1)  358/   B0431 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  358/   B0431 : =$0                 vcD2R1 set $00
(1)  358/   B0431 : =$0                 vcD2R2 set $00
(1)  358/   B0431 : =$0                 vcD2R3 set $00
(1)  358/   B0431 : =$0                 vcD2R4 set $00
(1)  359/   B0431 : (MACRO)             	smpsVcDecayLevel    $03, $00, $03, $00
(1)  359/   B0431 : =$3                 vcDL1 set $03
(1)  359/   B0431 : =$0                 vcDL2 set $00
(1)  359/   B0431 : =$3                 vcDL3 set $03
(1)  359/   B0431 : =$0                 vcDL4 set $00
(1)  360/   B0431 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  360/   B0431 : =$F                 vcRR1 set $0F
(1)  360/   B0431 : =$F                 vcRR2 set $0F
(1)  360/   B0431 : =$F                 vcRR3 set $0F
(1)  360/   B0431 : =$F                 vcRR4 set $0F
(1)  361/   B0431 : (MACRO)             	smpsVcTotalLevel    $0A, $29, $00, $19
(1)  361/   B0431 : =$A                 vcTL1 set $0A
(1)  361/   B0431 : =$29                vcTL2 set $29
(1)  361/   B0431 : =$0                 vcTL3 set $00
(1)  361/   B0431 : =$19                vcTL4 set $19
(1)  361/   B0431 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  361/   B0432 :                     ;   0     1     2     3     4     5     6     7
(1)  361/   B0432 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  361/   B0432 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  361/   B0432 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  361/   B0432 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  361/   B0432 : =$80                vcTLMask1 set $80
(1)  361/   B0432 :                     
(1)  361/   B0432 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  361/   B0432 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  361/   B0432 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  361/   B0432 : =$80                vcTLMask1 set $80
(1)  361/   B0432 : =$A                 vcTL1 set vcTL1&$7F
(1)  361/   B0432 : =$29                vcTL2 set vcTL2&$7F
(1)  361/   B0432 : =$0                 vcTL3 set vcTL3&$7F
(1)  361/   B0432 : =$19                vcTL4 set vcTL4&$7F
(1)  361/   B0432 :                     
(1)  361/   B0432 : 3102 7203                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  361/   B0436 : 0F4D 0F0D                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  361/   B043A : 0002 0002                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  361/   B043E : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  361/   B0442 : 0F3F 0F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  361/   B0446 : 1980 298A                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  362/   B044A :                     
(1)  363/   B044A :                     ;	Voice $05
(1)  364/   B044A :                     ;	$3A
(1)  365/   B044A :                     ;	$51, $05, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
(1)  366/   B044A :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
(1)  367/   B044A : (MACRO)             	smpsVcAlgorithm     $02
(1)  367/   B044A : =$2                 vcAlgorithm set $02
(1)  368/   B044A : (MACRO)             	smpsVcFeedback      $07
(1)  368/   B044A : =$7                 vcFeedback set $07
(1)  369/   B044A : (MACRO)             	smpsVcUnusedBits    $00
(1)  369/   B044A : =$0                 vcUnusedBits set $00
(1)  369/   B044A : =$0                 vcD1R1Unk set 0
(1)  369/   B044A : =$0                 vcD1R2Unk set 0
(1)  369/   B044A : =$0                 vcD1R3Unk set 0
(1)  369/   B044A : =$0                 vcD1R4Unk set 0
(1)  370/   B044A : (MACRO)             	smpsVcDetune        $00, $05, $00, $05
(1)  370/   B044A : =$0                 vcDT1 set $00
(1)  370/   B044A : =$5                 vcDT2 set $05
(1)  370/   B044A : =$0                 vcDT3 set $00
(1)  370/   B044A : =$5                 vcDT4 set $05
(1)  371/   B044A : (MACRO)             	smpsVcCoarseFreq    $02, $01, $05, $01
(1)  371/   B044A : =$2                 vcCF1 set $02
(1)  371/   B044A : =$1                 vcCF2 set $01
(1)  371/   B044A : =$5                 vcCF3 set $05
(1)  371/   B044A : =$1                 vcCF4 set $01
(1)  372/   B044A : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  372/   B044A : =$0                 vcRS1 set $00
(1)  372/   B044A : =$0                 vcRS2 set $00
(1)  372/   B044A : =$0                 vcRS3 set $00
(1)  372/   B044A : =$0                 vcRS4 set $00
(1)  373/   B044A : (MACRO)             	smpsVcAttackRate    $10, $1E, $1E, $1E
(1)  373/   B044A : =$10                vcAR1 set $10
(1)  373/   B044A : =$1E                vcAR2 set $1E
(1)  373/   B044A : =$1E                vcAR3 set $1E
(1)  373/   B044A : =$1E                vcAR4 set $1E
(1)  374/   B044A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  374/   B044A : =$0                 vcAM1 set $00<<5
(1)  374/   B044A : =$0                 vcAM2 set $00<<5
(1)  374/   B044A : =$0                 vcAM3 set $00<<5
(1)  374/   B044A : =$0                 vcAM4 set $00<<5
(1)  375/   B044A : (MACRO)             	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1)  375/   B044A : =$F                 vcD1R1 set $0F
(1)  375/   B044A : =$1F                vcD1R2 set $1F
(1)  375/   B044A : =$1F                vcD1R3 set $1F
(1)  375/   B044A : =$1F                vcD1R4 set $1F
(1)  376/   B044A : (MACRO)             	smpsVcDecayRate2    $02, $00, $00, $00
(1)  376/   B044A : =$2                 vcD2R1 set $02
(1)  376/   B044A : =$0                 vcD2R2 set $00
(1)  376/   B044A : =$0                 vcD2R3 set $00
(1)  376/   B044A : =$0                 vcD2R4 set $00
(1)  377/   B044A : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1)  377/   B044A : =$1                 vcDL1 set $01
(1)  377/   B044A : =$0                 vcDL2 set $00
(1)  377/   B044A : =$0                 vcDL3 set $00
(1)  377/   B044A : =$0                 vcDL4 set $00
(1)  378/   B044A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  378/   B044A : =$F                 vcRR1 set $0F
(1)  378/   B044A : =$F                 vcRR2 set $0F
(1)  378/   B044A : =$F                 vcRR3 set $0F
(1)  378/   B044A : =$F                 vcRR4 set $0F
(1)  379/   B044A : (MACRO)             	smpsVcTotalLevel    $01, $22, $24, $18
(1)  379/   B044A : =$1                 vcTL1 set $01
(1)  379/   B044A : =$22                vcTL2 set $22
(1)  379/   B044A : =$24                vcTL3 set $24
(1)  379/   B044A : =$18                vcTL4 set $18
(1)  379/   B044A : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  379/   B044B :                     ;   0     1     2     3     4     5     6     7
(1)  379/   B044B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  379/   B044B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  379/   B044B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  379/   B044B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  379/   B044B : =$80                vcTLMask1 set $80
(1)  379/   B044B :                     
(1)  379/   B044B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  379/   B044B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  379/   B044B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  379/   B044B : =$80                vcTLMask1 set $80
(1)  379/   B044B : =$1                 vcTL1 set vcTL1&$7F
(1)  379/   B044B : =$22                vcTL2 set vcTL2&$7F
(1)  379/   B044B : =$24                vcTL3 set vcTL3&$7F
(1)  379/   B044B : =$18                vcTL4 set vcTL4&$7F
(1)  379/   B044B :                     
(1)  379/   B044B : 5105 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  379/   B044F : 1E1E 1E10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  379/   B0453 : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  379/   B0457 : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  379/   B045B : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  379/   B045F : 1824 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  380/   B0463 :                     
(1)  381/   B0463 :                     
   30/   B0463 :                        Music_02:		include		"music-improved/82 - EHZ.asm"
(1)    1/   B0463 :                     EHZ_Header:
(1)    2/   B0463 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B0463 :                     
(1)    2/   B0463 : =$2                 SourceDriver set 2
(1)    2/   B0463 :                     
(1)    2/   B0463 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B0463 :                     
(1)    2/   B0463 : =$B0463             songStart set *
(1)    2/   B0463 :                     
(1)    2/   B0463 :                     
(1)    3/   B0463 : (MACRO)             	smpsHeaderVoice     EHZ_Voices
(1)    3/   B0463 : F48A                                dc.w    z80_ptr(EHZ_VOICES)
(1)    4/   B0465 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B0465 : 0603                        dc.b    $06,$03
(1)    5/   B0467 : (MACRO)             	smpsHeaderTempo     $01, $9E
(1)    5/   B0467 : 01                          dc.b    $01
(1)    5/   B0468 :  (MACRO-2)                  convertMainTempoMod $9E
(1)    5/   B0468 : 62                                          dc.b    s2TempotoS3($9E)
(1)    6/   B0469 :                     
(1)    7/   B0469 : (MACRO)             	smpsHeaderDAC       EHZ_DAC
(1)    7/   B0469 :  (MACRO-2)                  CheckedChannelPointer EHZ_DAC
(1)    7/   B0469 : 728A                                dc.w    z80_ptr(EHZ_DAC)
(1)    7/   B046B : 0000                                dc.w    $00
(1)    8/   B046D : (MACRO)             	smpsHeaderFM        EHZ_FM1,	$00, $0E
(1)    8/   B046D :  (MACRO-2)                  CheckedChannelPointer EHZ_FM1
(1)    8/   B046D : 0388                                dc.w    z80_ptr(EHZ_FM1)
(1)    8/   B046F : 000E                        dc.b    $00,$0E
(1)    9/   B0471 : (MACRO)             	smpsHeaderFM        EHZ_FM2,	$00, $16
(1)    9/   B0471 :  (MACRO-2)                  CheckedChannelPointer EHZ_FM2
(1)    9/   B0471 : 0785                                dc.w    z80_ptr(EHZ_FM2)
(1)    9/   B0473 : 0016                        dc.b    $00,$16
(1)   10/   B0475 : (MACRO)             	smpsHeaderFM        EHZ_FM3,	$00, $16
(1)   10/   B0475 :  (MACRO-2)                  CheckedChannelPointer EHZ_FM3
(1)   10/   B0475 : 2186                                dc.w    z80_ptr(EHZ_FM3)
(1)   10/   B0477 : 0016                        dc.b    $00,$16
(1)   11/   B0479 : (MACRO)             	smpsHeaderFM        EHZ_FM4,	$00, $20
(1)   11/   B0479 :  (MACRO-2)                  CheckedChannelPointer EHZ_FM4
(1)   11/   B0479 : 9E87                                dc.w    z80_ptr(EHZ_FM4)
(1)   11/   B047B : 0020                        dc.b    $00,$20
(1)   12/   B047D : (MACRO)             	smpsHeaderFM        EHZ_FM5,	$00, $25
(1)   12/   B047D :  (MACRO-2)                  CheckedChannelPointer EHZ_FM5
(1)   12/   B047D : 9384                                dc.w    z80_ptr(EHZ_FM5)
(1)   12/   B047F : 0025                        dc.b    $00,$25
(1)   13/   B0481 : (MACRO)             	smpsHeaderPSG       EHZ_PSG1,	$DC, $04, $00, fTone_03
(1)   13/   B0481 :  (MACRO-2)                  CheckedChannelPointer EHZ_PSG1
(1)   13/   B0481 : B488                                dc.w    z80_ptr(EHZ_PSG1)
(1)   13/   B0483 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   13/   B0483 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   13/   B0484 : 0400 03                     dc.b    $04,$00,FTONE_03
(1)   14/   B0487 : (MACRO)             	smpsHeaderPSG       EHZ_PSG2,	$DC, $04, $00, fTone_01
(1)   14/   B0487 :  (MACRO-2)                  CheckedChannelPointer EHZ_PSG2
(1)   14/   B0487 : 2E89                                dc.w    z80_ptr(EHZ_PSG2)
(1)   14/   B0489 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   B0489 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   B048A : 0400 01                     dc.b    $04,$00,FTONE_01
(1)   15/   B048D : (MACRO)             	smpsHeaderPSG       EHZ_PSG3,	$00, $02, $00, fTone_02
(1)   15/   B048D :  (MACRO-2)                  CheckedChannelPointer EHZ_PSG3
(1)   15/   B048D : A089                                dc.w    z80_ptr(EHZ_PSG3)
(1)   15/   B048F :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B048F : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B0490 : 0200 02                     dc.b    $02,$00,FTONE_02
(1)   16/   B0493 :                     
(1)   17/   B0493 :                     ; FM5 Data
(1)   18/   B0493 :                     EHZ_FM5:
(1)   19/   B0493 : 8020                	dc.b	nRst, $20
(1)   20/   B0495 : (MACRO)             	smpsSetvoice        $00
(1)   20/   B0495 :  (MACRO-2)                  smpsFMvoice $00
(1)   20/   B0495 : EF00                                dc.b    $EF,$00
(1)   21/   B0497 : (MACRO)             	smpsAlterVol        $F8
(1)   21/   B0497 : E6F8                        dc.b    $E6,$F8
(1)   22/   B0499 : D404 D0CD C9D0 CDC9 	dc.b	nB6, $04, nG6, nE6, nC6, nG6, nE6, nC6, nA5, nG6, nE6, nC6
            B04A1 : C6D0 CDC9         
(1)   23/   B04A5 : C6D0 CDC9 C6D2 CECB 	dc.b	nA5, nG6, nE6, nC6, nA5, nA6, nF6, nD6, nBb5, nA6, nF6, nD6
            B04AD : C7D2 CECB         
(1)   24/   B04B1 : C7                  	dc.b	nBb5
(1)   25/   B04B2 : (MACRO)             	smpsAlterVol        $08
(1)   25/   B04B2 : E608                        dc.b    $E6,$08
(1)   26/   B04B4 :                     
(1)   27/   B04B4 :                     EHZ_Jump03:
(1)   28/   B04B4 : (MACRO)             	smpsAlterVol        $F8
(1)   28/   B04B4 : E6F8                        dc.b    $E6,$F8
(1)   29/   B04B6 : (MACRO)             	smpsPan             panCenter, $00
(1)   29/   B04B6 : =$0                 panNone set $00
(1)   29/   B04B6 : =$40                panRight set $40
(1)   29/   B04B6 : =$80                panLeft set $80
(1)   29/   B04B6 : =$C0                panCentre set $C0
(1)   29/   B04B6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   29/   B04B6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   30/   B04B8 : (MACRO)             	smpsModSet          $30, $01, $04, $04
(1)   30/   B04B8 : F0                          dc.b    $F0
(1)   30/   B04B9 : 3101 0405                           dc.b    $30+1,$01,$04,(($04+1) * $01) & $FF
(1)   30/   B04BD :                             ;dc.b   $01,$04,$04
(1)   31/   B04BD : (MACRO)             	smpsSetvoice        $01
(1)   31/   B04BD :  (MACRO-2)                  smpsFMvoice $01
(1)   31/   B04BD : EF01                                dc.b    $EF,$01
(1)   32/   B04BF :                     
(1)   33/   B04BF :                     EHZ_Loop06:
(1)   34/   B04BF : C420 E720 C6E7 20C2 	dc.b	nG5, $20, smpsNoAttack, $20, nA5, smpsNoAttack, $20, nF5, smpsNoAttack, $20, nE5, smpsNoAttack
            B04C7 : E720 C1E7         
(1)   35/   B04CB : 20                  	dc.b	$20
(1)   36/   B04CC : (MACRO)             	smpsLoop            $00, $04, EHZ_Loop06
(1)   36/   B04CC : F7                          dc.b    $F7
(1)   36/   B04CD : 0004                        dc.b    $00,$04
(1)   36/   B04CF : BF84                                dc.w    z80_ptr(EHZ_LOOP06)
(1)   37/   B04D1 : (MACRO)             	smpsSetvoice        $02
(1)   37/   B04D1 :  (MACRO-2)                  smpsFMvoice $02
(1)   37/   B04D1 : EF02                                dc.b    $EF,$02
(1)   38/   B04D3 : (MACRO)             	smpsAlterVol        $FC
(1)   38/   B04D3 : E6FC                        dc.b    $E6,$FC
(1)   39/   B04D5 : (MACRO)             	smpsPan             panLeft, $00
(1)   39/   B04D5 : =$0                 panNone set $00
(1)   39/   B04D5 : =$40                panRight set $40
(1)   39/   B04D5 : =$80                panLeft set $80
(1)   39/   B04D5 : =$C0                panCentre set $C0
(1)   39/   B04D5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   39/   B04D5 : E080                        dc.b $E0,PANLEFT+$00
(1)   40/   B04D7 : C110 C1C1 C1BF BFBF 	dc.b	nE5, $10, nE5, nE5, nE5, nD5, nD5, nD5, nD5, nD5, nD5, nD5
            B04DF : BFBF BFBF         
(1)   41/   B04E3 : BFC1 C1C1 C1C1 C1C1 	dc.b	nD5, nE5, nE5, nE5, nE5, nE5, nE5, nE5, nE5, nD5, nD5, nD5
            B04EB : C1BF BFBF         
(1)   42/   B04EF : BF                  	dc.b	nD5
(1)   43/   B04F0 : (MACRO)             	smpsAlterVol        $06
(1)   43/   B04F0 : E606                        dc.b    $E6,$06
(1)   44/   B04F2 : (MACRO)             	smpsSetvoice        $03
(1)   44/   B04F2 :  (MACRO-2)                  smpsFMvoice $03
(1)   44/   B04F2 : EF03                                dc.b    $EF,$03
(1)   45/   B04F4 : B804 8008 BA20 E714 	dc.b	nG4, $04, nRst, $08, nA4, $20, smpsNoAttack, $14, smpsNoAttack, $20, smpsNoAttack, $0C
            B04FC : E720 E70C         
(1)   46/   B0500 : 8014                	dc.b	nRst, $14
(1)   47/   B0502 : (MACRO)             	smpsAlterVol        $06
(1)   47/   B0502 : E606                        dc.b    $E6,$06
(1)   48/   B0504 : (MACRO)             	smpsJump            EHZ_Jump03
(1)   48/   B0504 : F6                          dc.b    $F6
(1)   48/   B0505 : B484                                dc.w    z80_ptr(EHZ_JUMP03)
(1)   49/   B0507 :                     
(1)   50/   B0507 :                     ; FM2 Data
(1)   51/   B0507 :                     EHZ_FM2:
(1)   52/   B0507 : (MACRO)             	smpsSetvoice        $03
(1)   52/   B0507 :  (MACRO-2)                  smpsFMvoice $03
(1)   52/   B0507 : EF03                                dc.b    $EF,$03
(1)   53/   B0509 : BF08 8004 C120 E714 	dc.b	nD5, $08, nRst, $04, nE5, $20, smpsNoAttack, $14, nC5, $20, nD5
            B0511 : BD20 BF            
(1)   54/   B0514 :                     
(1)   55/   B0514 :                     EHZ_Jump02:
(1)   56/   B0514 : (MACRO)             	smpsSetvoice        $03
(1)   56/   B0514 :  (MACRO-2)                  smpsFMvoice $03
(1)   56/   B0514 : EF03                                dc.b    $EF,$03
(1)   57/   B0516 : 8008 C404 80C6 80C4 	dc.b	nRst, $08, nG5, $04, nRst, nA5, nRst, nG5, nRst, nC6, nRst, nC6
            B051E : 80C9 80C9         
(1)   58/   B0522 : 80CB CD80 0880 CB10 	dc.b	nRst, nD6, nE6, nRst, $08, nRst, nD6, $10, nA5, $04, nRst, nC6
            B052A : C604 80C9         
(1)   59/   B052E : C980 CB08 800C 8014 	dc.b	nC6, nRst, nD6, $08, nRst, $0C, nRst, $14, nBb5, $04, nC6, nBb5
            B0536 : C704 C9C7         
(1)   60/   B053A : CB80 C980 C7C9 80C6 	dc.b	nD6, nRst, nC6, nRst, nBb5, nC6, nRst, nA5, smpsNoAttack, nA5, $20, smpsNoAttack
            B0542 : E7C6 20E7         
(1)   61/   B0546 : 1080 1080 08C4 0480 	dc.b	$10, nRst, $10, nRst, $08, nG5, $04, nRst, nA5, nRst, nG5, nRst
            B054E : C680 C480         
(1)   62/   B0552 : C980 C980 CBCD 8008 	dc.b	nC6, nRst, nC6, nRst, nD6, nE6, nRst, $08, nRst, nD6, $10, nA5
            B055A : 80CB 10C6         
(1)   63/   B055E : 08C9 8004 CB08 800C 	dc.b	$08, nC6, nRst, $04, nD6, $08, nRst, $0C, nRst, $14, nBb5, $04
            B0566 : 8014 C704         
(1)   64/   B056A : C9C7 CB80 C980 C7C9 	dc.b	nC6, nBb5, nD6, nRst, nC6, nRst, nBb5, nC6, nRst, nA5, smpsNoAttack, nA5
            B0572 : 80C6 E7C6         
(1)   65/   B0576 : 20E7 1080 10        	dc.b	$20, smpsNoAttack, $10, nRst, $10
(1)   66/   B057B : (MACRO)             	smpsSetvoice        $04
(1)   66/   B057B :  (MACRO-2)                  smpsFMvoice $04
(1)   66/   B057B : EF04                                dc.b    $EF,$04
(1)   67/   B057D : (MACRO)             	smpsAlterVol        $FD
(1)   67/   B057D : E6FD                        dc.b    $E6,$FD
(1)   68/   B057F : (MACRO)             	smpsModSet          $12, $01, $0C, $04
(1)   68/   B057F : F0                          dc.b    $F0
(1)   68/   B0580 : 1301 0C05                           dc.b    $12+1,$01,$0C,(($04+1) * $01) & $FF
(1)   68/   B0584 :                             ;dc.b   $01,$0C,$04
(1)   69/   B0584 : 8008 B804 80B8 08BA 	dc.b	nRst, $08, nG4, $04, nRst, nG4, $08, nA4, $04, nRst, nC5, nRst
            B058C : 0480 BD80         
(1)   70/   B0590 : BD08 BFBD C1BF 10BA 	dc.b	nC5, $08, nD5, nC5, nE5, nD5, $10, nA4, $20, smpsNoAttack, $08, nRst
            B0598 : 20E7 0880         
(1)   71/   B059C : 08BB 0480 BB08 BDBF 	dc.b	$08, nBb4, $04, nRst, nBb4, $08, nC5, nD5, nC5, nBb4, $04, nC5
            B05A4 : BDBB 04BD         
(1)   72/   B05A8 : 0CBA 20E7 2080 08B8 	dc.b	$0C, nA4, $20, smpsNoAttack, $20, nRst, $08, nG4, $10, nA4, $08, nC5
            B05B0 : 10BA 08BD         
(1)   73/   B05B4 : 0480 BD08 BFBD C1BF 	dc.b	$04, nRst, nC5, $08, nD5, nC5, nE5, nD5, $10, nA4, $20, smpsNoAttack
            B05BC : 10BA 20E7         
(1)   74/   B05C0 : 0880 08BB 0480 BB08 	dc.b	$08, nRst, $08, nBb4, $04, nRst, nBb4, $08, nC5, nD5, nC5, nBb4
            B05C8 : BDBF BDBB         
(1)   75/   B05CC : 04BD 08BA 04E7 20E7 	dc.b	$04, nC5, $08, nA4, $04, smpsNoAttack, $20, smpsNoAttack, $20
            B05D4 : 20               
(1)   76/   B05D5 : (MACRO)             	smpsAlterVol        $03
(1)   76/   B05D5 : E603                        dc.b    $E6,$03
(1)   77/   B05D7 : (MACRO)             	smpsModOff
(1)   77/   B05D7 : FA                                  dc.b    $FA
(1)   78/   B05D8 : (MACRO)             	smpsSetvoice        $05
(1)   78/   B05D8 :  (MACRO-2)                  smpsFMvoice $05
(1)   78/   B05D8 : EF05                                dc.b    $EF,$05
(1)   79/   B05DA : (MACRO)             	smpsAlterPitch      $F4
(1)   79/   B05DA :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   79/   B05DA : FBF4                                dc.b    $FB,$F4
(1)   80/   B05DC : 8010 C2C4 C6C8 C9CB 	dc.b	nRst, $10, nF5, nG5, nA5, nB5, nC6, nD6, nB5, nRst, nB5, nC6
            B05E4 : C880 C8C9         
(1)   81/   B05E8 : CBC9 CBCD C980 C2C4 	dc.b	nD6, nC6, nD6, nE6, nC6, nRst, nF5, nG5, nA5, nB5, nC6, nD6
            B05F0 : C6C8 C9CB         
(1)   82/   B05F4 : C8                  	dc.b	nB5
(1)   83/   B05F5 : (MACRO)             	smpsAlterPitch      $0C
(1)   83/   B05F5 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   83/   B05F5 : FB0C                                dc.b    $FB,$0C
(1)   84/   B05F7 : (MACRO)             	smpsAlterVol        $FD
(1)   84/   B05F7 : E6FD                        dc.b    $E6,$FD
(1)   85/   B05F9 : (MACRO)             	smpsSetvoice        $06
(1)   85/   B05F9 :  (MACRO-2)                  smpsFMvoice $06
(1)   85/   B05F9 : EF06                                dc.b    $EF,$06
(1)   86/   B05FB : CB04 CB80 CD20 E714 	dc.b	nD6, $04, nD6, nRst, nE6, $20, smpsNoAttack, $14
(1)   87/   B0603 : (MACRO)             	smpsSetvoice        $00
(1)   87/   B0603 :  (MACRO-2)                  smpsFMvoice $00
(1)   87/   B0603 : EF00                                dc.b    $EF,$00
(1)   88/   B0605 : (MACRO)             	smpsAlterPitch      $0C
(1)   88/   B0605 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   88/   B0605 : FB0C                                dc.b    $FB,$0C
(1)   89/   B0607 : (MACRO)             	smpsAlterVol        $09
(1)   89/   B0607 : E609                        dc.b    $E6,$09
(1)   90/   B0609 : D204 CDC9 C6CD C9C6 	dc.b	nA6, $04, nE6, nC6, nA5, nE6, nC6, nA5, nE5, nC6, nA5, nE5
            B0611 : C1C9 C6C1         
(1)   91/   B0615 : BDC6 C1BD BA        	dc.b	nC5, nA5, nE5, nC5, nA4
(1)   92/   B061A : (MACRO)             	smpsAlterPitch      $F4
(1)   92/   B061A :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   92/   B061A : FBF4                                dc.b    $FB,$F4
(1)   93/   B061C : (MACRO)             	smpsAlterVol        $FA
(1)   93/   B061C : E6FA                        dc.b    $E6,$FA
(1)   94/   B061E : (MACRO)             	smpsJump            EHZ_Jump02
(1)   94/   B061E : F6                          dc.b    $F6
(1)   94/   B061F : 1485                                dc.w    z80_ptr(EHZ_JUMP02)
(1)   95/   B0621 :                     
(1)   96/   B0621 :                     ; FM3 Data
(1)   97/   B0621 :                     EHZ_FM3:
(1)   98/   B0621 : (MACRO)             	smpsSetvoice        $03
(1)   98/   B0621 :  (MACRO-2)                  smpsFMvoice $03
(1)   98/   B0621 : EF03                                dc.b    $EF,$03
(1)   99/   B0623 : (MACRO)             	smpsAlterNote       $01
(1)   99/   B0623 :  (MACRO-2)                  smpsDetune      $01
(1)   99/   B0623 : E101                        dc.b    $E1,$01
(1)  100/   B0625 : C208 8004 C420 E714 	dc.b	nF5, $08, nRst, $04, nG5, $20, smpsNoAttack, $14, nE5, $20, nF5
            B062D : C120 C2            
(1)  101/   B0630 :                     
(1)  102/   B0630 :                     EHZ_Jump01:
(1)  103/   B0630 : (MACRO)             	smpsAlterNote       $03
(1)  103/   B0630 :  (MACRO-2)                  smpsDetune      $03
(1)  103/   B0630 : E103                        dc.b    $E1,$03
(1)  104/   B0632 : (MACRO)             	smpsSetvoice        $03
(1)  104/   B0632 :  (MACRO-2)                  smpsFMvoice $03
(1)  104/   B0632 : EF03                                dc.b    $EF,$03
(1)  105/   B0634 : (MACRO)             	smpsPan             panLeft, $00
(1)  105/   B0634 : =$0                 panNone set $00
(1)  105/   B0634 : =$40                panRight set $40
(1)  105/   B0634 : =$80                panLeft set $80
(1)  105/   B0634 : =$C0                panCentre set $C0
(1)  105/   B0634 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  105/   B0634 : E080                        dc.b $E0,PANLEFT+$00
(1)  106/   B0636 : 8008 B804 80BA 80B8 	dc.b	nRst, $08, nG4, $04, nRst, nA4, nRst, nG4, nRst, nC5, nRst, nC5
            B063E : 80BD 80BD         
(1)  107/   B0642 : 80BF C180 0880 BF10 	dc.b	nRst, nD5, nE5, nRst, $08, nRst, nD5, $10, nA4, $04, nRst, nC5
            B064A : BA04 80BD         
(1)  108/   B064E : BD80 BF08 800C 8014 	dc.b	nC5, nRst, nD5, $08, nRst, $0C, nRst, $14, nBb4, $04, nC5, nBb4
            B0656 : BB04 BDBB         
(1)  109/   B065A : BF80 BD80 BBBD 80BA 	dc.b	nD5, nRst, nC5, nRst, nBb4, nC5, nRst, nA4, smpsNoAttack, nA4, $20, smpsNoAttack
            B0662 : E7BA 20E7         
(1)  110/   B0666 : 1080 1080 08B8 0480 	dc.b	$10, nRst, $10, nRst, $08, nG4, $04, nRst, nA4, nRst, nG4, nRst
            B066E : BA80 B880         
(1)  111/   B0672 : BD80 BD80 BFC1 8008 	dc.b	nC5, nRst, nC5, nRst, nD5, nE5, nRst, $08, nRst, nD5, $10, nA4
            B067A : 80BF 10BA         
(1)  112/   B067E : 08BD 8004 BF08 800C 	dc.b	$08, nC5, nRst, $04, nD5, $08, nRst, $0C, nRst, $14, nBb4, $04
            B0686 : 8014 BB04         
(1)  113/   B068A : BDBB BF80 BD80 BBBD 	dc.b	nC5, nBb4, nD5, nRst, nC5, nRst, nBb4, nC5, nRst, nA4, smpsNoAttack, nA4
            B0692 : 80BA E7BA         
(1)  114/   B0696 : 20E7 1080 10        	dc.b	$20, smpsNoAttack, $10, nRst, $10
(1)  115/   B069B : (MACRO)             	smpsSetvoice        $04
(1)  115/   B069B :  (MACRO-2)                  smpsFMvoice $04
(1)  115/   B069B : EF04                                dc.b    $EF,$04
(1)  116/   B069D : (MACRO)             	smpsAlterVol        $07
(1)  116/   B069D : E607                        dc.b    $E6,$07
(1)  117/   B069F : (MACRO)             	smpsPan             panLeft, $00
(1)  117/   B069F : =$0                 panNone set $00
(1)  117/   B069F : =$40                panRight set $40
(1)  117/   B069F : =$80                panLeft set $80
(1)  117/   B069F : =$C0                panCentre set $C0
(1)  117/   B069F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  117/   B069F : E080                        dc.b $E0,PANLEFT+$00
(1)  118/   B06A1 : 8014 B804 80B8 08BA 	dc.b	nRst, $14, nG4, $04, nRst, nG4, $08, nA4, $04, nRst, nC5, nRst
            B06A9 : 0480 BD80         
(1)  119/   B06AD : BD08 BFBD C1BF 10BA 	dc.b	nC5, $08, nD5, nC5, nE5, nD5, $10, nA4, $20, smpsNoAttack, $08, nRst
            B06B5 : 20E7 0880         
(1)  120/   B06B9 : 08BB 0480 BB08 BDBF 	dc.b	$08, nBb4, $04, nRst, nBb4, $08, nC5, nD5, nC5, nBb4, $04, nC5
            B06C1 : BDBB 04BD         
(1)  121/   B06C5 : 0CBA 14             	dc.b	$0C, nA4, $14
(1)  122/   B06C8 : (MACRO)             	smpsSetvoice        $06
(1)  122/   B06C8 :  (MACRO-2)                  smpsFMvoice $06
(1)  122/   B06C8 : EF06                                dc.b    $EF,$06
(1)  123/   B06CA : (MACRO)             	smpsAlterNote       $00
(1)  123/   B06CA :  (MACRO-2)                  smpsDetune      $00
(1)  123/   B06CA : E100                        dc.b    $E1,$00
(1)  124/   B06CC : (MACRO)             	smpsAlterVol        $F9
(1)  124/   B06CC : E6F9                        dc.b    $E6,$F9
(1)  125/   B06CE : C604 CD02 8002 8004 	dc.b	nA5, $04, nE6, $02, nRst, $02, nRst, $04, nE6, $02, nRst, $02
            B06D6 : CD02 8002         
(1)  126/   B06DA : CB08 C9             	dc.b	nD6, $08, nC6
(1)  127/   B06DD : (MACRO)             	smpsSetvoice        $04
(1)  127/   B06DD :  (MACRO-2)                  smpsFMvoice $04
(1)  127/   B06DD : EF04                                dc.b    $EF,$04
(1)  128/   B06DF : (MACRO)             	smpsAlterNote       $01
(1)  128/   B06DF :  (MACRO-2)                  smpsDetune      $01
(1)  128/   B06DF : E101                        dc.b    $E1,$01
(1)  129/   B06E1 : (MACRO)             	smpsAlterVol        $07
(1)  129/   B06E1 : E607                        dc.b    $E6,$07
(1)  130/   B06E3 : 8010 B8BA 08BD 0480 	dc.b	nRst, $10, nG4, nA4, $08, nC5, $04, nRst, nC5, $08, nD5, nC5
            B06EB : BD08 BFBD         
(1)  131/   B06EF : C1BF 10BA 20E7 0880 	dc.b	nE5, nD5, $10, nA4, $20, smpsNoAttack, $08, nRst, $08, nBb4, $04, nRst
            B06F7 : 08BB 0480         
(1)  132/   B06FB : BB08 BDBF BDBB 04BD 	dc.b	nBb4, $08, nC5, nD5, nC5, nBb4, $04, nC5, $08, nA4, $04
            B0703 : 08BA 04            
(1)  133/   B0706 : (MACRO)             	smpsSetvoice        $06
(1)  133/   B0706 :  (MACRO-2)                  smpsFMvoice $06
(1)  133/   B0706 : EF06                                dc.b    $EF,$06
(1)  134/   B0708 : (MACRO)             	smpsAlterVol        $F9
(1)  134/   B0708 : E6F9                        dc.b    $E6,$F9
(1)  135/   B070A : (MACRO)             	smpsAlterNote       $00
(1)  135/   B070A :  (MACRO-2)                  smpsDetune      $00
(1)  135/   B070A : E100                        dc.b    $E1,$00
(1)  136/   B070C : C608 C904 80C6 80CB 	dc.b	nA5, $08, nC6, $04, nRst, nA5, nRst, nD6, $0C, nC6, $04, nRst
            B0714 : 0CC9 0480         
(1)  137/   B0718 : 10                  	dc.b	$10
(1)  138/   B0719 : (MACRO)             	smpsSetvoice        $03
(1)  138/   B0719 :  (MACRO-2)                  smpsFMvoice $03
(1)  138/   B0719 : EF03                                dc.b    $EF,$03
(1)  139/   B071B : (MACRO)             	smpsPan             panCenter, $00
(1)  139/   B071B : =$0                 panNone set $00
(1)  139/   B071B : =$40                panRight set $40
(1)  139/   B071B : =$80                panLeft set $80
(1)  139/   B071B : =$C0                panCentre set $C0
(1)  139/   B071B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  139/   B071B : E0C0                        dc.b $E0,PANCENTER+$00
(1)  140/   B071D : (MACRO)             	smpsAlterNote       $01
(1)  140/   B071D :  (MACRO-2)                  smpsDetune      $01
(1)  140/   B071D : E101                        dc.b    $E1,$01
(1)  141/   B071F : C918 C608 8014 C604 	dc.b	nC6, $18, nA5, $08, nRst, $14, nA5, $04, nC6, $08, nB5, $04
            B0727 : C908 C804         
(1)  142/   B072B : 80C9 C804 8010      	dc.b	nRst, nC6, nB5, $04, nRst, $10
(1)  143/   B0731 : (MACRO)             	smpsSetvoice        $00
(1)  143/   B0731 :  (MACRO-2)                  smpsFMvoice $00
(1)  143/   B0731 : EF00                                dc.b    $EF,$00
(1)  144/   B0733 : (MACRO)             	smpsAlterNote       $00
(1)  144/   B0733 :  (MACRO-2)                  smpsDetune      $00
(1)  144/   B0733 : E100                        dc.b    $E1,$00
(1)  145/   B0735 : (MACRO)             	smpsAlterVol        $FE
(1)  145/   B0735 : E6FE                        dc.b    $E6,$FE
(1)  146/   B0737 : (MACRO)             	smpsAlterPitch      $0C
(1)  146/   B0737 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  146/   B0737 : FB0C                                dc.b    $FB,$0C
(1)  147/   B0739 : (MACRO)             	smpsPan             panRight, $00
(1)  147/   B0739 : =$0                 panNone set $00
(1)  147/   B0739 : =$40                panRight set $40
(1)  147/   B0739 : =$80                panLeft set $80
(1)  147/   B0739 : =$C0                panCentre set $C0
(1)  147/   B0739 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  147/   B0739 : E040                        dc.b $E0,PANRIGHT+$00
(1)  148/   B073B : C802 8006 C904 C814 	dc.b	nB5, $02, nRst, $06, nC6, $04, nB5, $14
(1)  149/   B0743 : (MACRO)             	smpsAlterPitch      $F4
(1)  149/   B0743 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  149/   B0743 : FBF4                                dc.b    $FB,$F4
(1)  150/   B0745 : (MACRO)             	smpsAlterVol        $02
(1)  150/   B0745 : E602                        dc.b    $E6,$02
(1)  151/   B0747 : (MACRO)             	smpsSetvoice        $03
(1)  151/   B0747 :  (MACRO-2)                  smpsFMvoice $03
(1)  151/   B0747 : EF03                                dc.b    $EF,$03
(1)  152/   B0749 : (MACRO)             	smpsPan             panCenter, $00
(1)  152/   B0749 : =$0                 panNone set $00
(1)  152/   B0749 : =$40                panRight set $40
(1)  152/   B0749 : =$80                panLeft set $80
(1)  152/   B0749 : =$C0                panCentre set $C0
(1)  152/   B0749 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  152/   B0749 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  153/   B074B : (MACRO)             	smpsAlterNote       $01
(1)  153/   B074B :  (MACRO-2)                  smpsDetune      $01
(1)  153/   B074B : E101                        dc.b    $E1,$01
(1)  154/   B074D : 8010 C808 C9CB C9C8 	dc.b	nRst, $10, nB5, $08, nC6, nD6, nC6, nB5, nD6, nC6, $04, nRst
            B0755 : CBC9 0480         
(1)  155/   B0759 : C910 C608 8020 C918 	dc.b	nC6, $10, nA5, $08, nRst, $20, nC6, $18, nA5, $08, nRst, $14
            B0761 : C608 8014         
(1)  156/   B0765 : C604 C908 C804 80C9 	dc.b	nA5, $04, nC6, $08, nB5, $04, nRst, nC6, nB5, $04, nRst, $10
            B076D : C804 8010         
(1)  157/   B0771 : (MACRO)             	smpsSetvoice        $00
(1)  157/   B0771 :  (MACRO-2)                  smpsFMvoice $00
(1)  157/   B0771 : EF00                                dc.b    $EF,$00
(1)  158/   B0773 : (MACRO)             	smpsAlterNote       $00
(1)  158/   B0773 :  (MACRO-2)                  smpsDetune      $00
(1)  158/   B0773 : E100                        dc.b    $E1,$00
(1)  159/   B0775 : (MACRO)             	smpsAlterVol        $FE
(1)  159/   B0775 : E6FE                        dc.b    $E6,$FE
(1)  160/   B0777 : (MACRO)             	smpsAlterPitch      $0C
(1)  160/   B0777 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  160/   B0777 : FB0C                                dc.b    $FB,$0C
(1)  161/   B0779 : (MACRO)             	smpsPan             panRight, $00
(1)  161/   B0779 : =$0                 panNone set $00
(1)  161/   B0779 : =$40                panRight set $40
(1)  161/   B0779 : =$80                panLeft set $80
(1)  161/   B0779 : =$C0                panCentre set $C0
(1)  161/   B0779 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  161/   B0779 : E040                        dc.b $E0,PANRIGHT+$00
(1)  162/   B077B : C802 8006 C904 C814 	dc.b	nB5, $02, nRst, $06, nC6, $04, nB5, $14
(1)  163/   B0783 : (MACRO)             	smpsAlterVol        $02
(1)  163/   B0783 : E602                        dc.b    $E6,$02
(1)  164/   B0785 : (MACRO)             	smpsAlterPitch      $F4
(1)  164/   B0785 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  164/   B0785 : FBF4                                dc.b    $FB,$F4
(1)  165/   B0787 : (MACRO)             	smpsSetvoice        $03
(1)  165/   B0787 :  (MACRO-2)                  smpsFMvoice $03
(1)  165/   B0787 : EF03                                dc.b    $EF,$03
(1)  166/   B0789 : (MACRO)             	smpsPan             panCenter, $00
(1)  166/   B0789 : =$0                 panNone set $00
(1)  166/   B0789 : =$40                panRight set $40
(1)  166/   B0789 : =$80                panLeft set $80
(1)  166/   B0789 : =$C0                panCentre set $C0
(1)  166/   B0789 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  166/   B0789 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  167/   B078B : (MACRO)             	smpsAlterNote       $01
(1)  167/   B078B :  (MACRO-2)                  smpsDetune      $01
(1)  167/   B078B : E101                        dc.b    $E1,$01
(1)  168/   B078D : CB04 C980 C620 E714 	dc.b	nD6, $04, nC6, nRst, nA5, $20, smpsNoAttack, $14, smpsNoAttack, $20, smpsNoAttack, $0C
            B0795 : E720 E70C         
(1)  169/   B0799 : 8014                	dc.b	nRst, $14
(1)  170/   B079B : (MACRO)             	smpsJump            EHZ_Jump01
(1)  170/   B079B : F6                          dc.b    $F6
(1)  170/   B079C : 3086                                dc.w    z80_ptr(EHZ_JUMP01)
(1)  171/   B079E :                     
(1)  172/   B079E :                     ; FM4 Data
(1)  173/   B079E :                     EHZ_FM4:
(1)  174/   B079E : (MACRO)             	smpsSetvoice        $03
(1)  174/   B079E :  (MACRO-2)                  smpsFMvoice $03
(1)  174/   B079E : EF03                                dc.b    $EF,$03
(1)  175/   B07A0 : (MACRO)             	smpsAlterVol        $F8
(1)  175/   B07A0 : E6F8                        dc.b    $E6,$F8
(1)  176/   B07A2 : B608 8004 B820 E714 	dc.b	nF4, $08, nRst, $04, nG4, $20, smpsNoAttack, $14, nE4, $20, nF4
            B07AA : B520 B6            
(1)  177/   B07AD : (MACRO)             	smpsAlterVol        $04
(1)  177/   B07AD : E604                        dc.b    $E6,$04
(1)  178/   B07AF :                     
(1)  179/   B07AF :                     EHZ_Jump00:
(1)  180/   B07AF : (MACRO)             	smpsPan             panCenter, $00
(1)  180/   B07AF : =$0                 panNone set $00
(1)  180/   B07AF : =$40                panRight set $40
(1)  180/   B07AF : =$80                panLeft set $80
(1)  180/   B07AF : =$C0                panCentre set $C0
(1)  180/   B07AF : =$C0                panCenter set $C0 ; silly Americans :U
(1)  180/   B07AF : E0C0                        dc.b $E0,PANCENTER+$00
(1)  181/   B07B1 : (MACRO)             	smpsSetvoice        $08
(1)  181/   B07B1 :  (MACRO-2)                  smpsFMvoice $08
(1)  181/   B07B1 : EF08                                dc.b    $EF,$08
(1)  182/   B07B3 : (MACRO)             	smpsModSet          $02, $01, $FE, $04
(1)  182/   B07B3 : F0                          dc.b    $F0
(1)  182/   B07B4 : 0301 FE05                           dc.b    $02+1,$01,$FE,(($04+1) * $01) & $FF
(1)  182/   B07B8 :                             ;dc.b   $01,$FE,$04
(1)  183/   B07B8 : (MACRO)             	smpsAlterPitch      $0C
(1)  183/   B07B8 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  183/   B07B8 : FB0C                                dc.b    $FB,$0C
(1)  184/   B07BA :                     
(1)  185/   B07BA :                     EHZ_Loop05:
(1)  186/   B07BA : C120 E720 C3E7 20BF 	dc.b	nE5, $20, smpsNoAttack, $20, nFs5, smpsNoAttack, $20, nD5, smpsNoAttack, $20, nC5, smpsNoAttack
            B07C2 : E720 BDE7         
(1)  187/   B07C6 : 20                  	dc.b	$20
(1)  188/   B07C7 : (MACRO)             	smpsLoop            $00, $04, EHZ_Loop05
(1)  188/   B07C7 : F7                          dc.b    $F7
(1)  188/   B07C8 : 0004                        dc.b    $00,$04
(1)  188/   B07CA : BA87                                dc.w    z80_ptr(EHZ_LOOP05)
(1)  189/   B07CC : (MACRO)             	smpsAlterPitch      $F4
(1)  189/   B07CC :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  189/   B07CC : FBF4                                dc.b    $FB,$F4
(1)  190/   B07CE : (MACRO)             	smpsModOff
(1)  190/   B07CE : FA                                  dc.b    $FA
(1)  191/   B07CF : (MACRO)             	smpsSetvoice        $02
(1)  191/   B07CF :  (MACRO-2)                  smpsFMvoice $02
(1)  191/   B07CF : EF02                                dc.b    $EF,$02
(1)  192/   B07D1 : (MACRO)             	smpsPan             panCenter, $00
(1)  192/   B07D1 : =$0                 panNone set $00
(1)  192/   B07D1 : =$40                panRight set $40
(1)  192/   B07D1 : =$80                panLeft set $80
(1)  192/   B07D1 : =$C0                panCentre set $C0
(1)  192/   B07D1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  192/   B07D1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  193/   B07D3 : BD10 BDBD BDBC BCBC 	dc.b	nC5, $10, nC5, nC5, nC5, nB4, nB4, nB4, nB4, nB4, nB4, nB4
            B07DB : BCBC BCBC         
(1)  194/   B07DF : BCBD BDBD BDBD BDBD 	dc.b	nB4, nC5, nC5, nC5, nC5, nC5, nC5, nC5, nC5, nB4, nB4, nB4
            B07E7 : BDBC BCBC         
(1)  195/   B07EB : BC                  	dc.b	nB4
(1)  196/   B07EC : (MACRO)             	smpsSetvoice        $03
(1)  196/   B07EC :  (MACRO-2)                  smpsFMvoice $03
(1)  196/   B07EC : EF03                                dc.b    $EF,$03
(1)  197/   B07EE : (MACRO)             	smpsAlterVol        $04
(1)  197/   B07EE : E604                        dc.b    $E6,$04
(1)  198/   B07F0 : B304 8008 B520 E714 	dc.b	nD4, $04, nRst, $08, nE4, $20, smpsNoAttack, $14, smpsNoAttack, $20, smpsNoAttack, $0C
            B07F8 : E720 E70C         
(1)  199/   B07FC : 8014                	dc.b	nRst, $14
(1)  200/   B07FE : (MACRO)             	smpsAlterVol        $FC
(1)  200/   B07FE : E6FC                        dc.b    $E6,$FC
(1)  201/   B0800 : (MACRO)             	smpsJump            EHZ_Jump00
(1)  201/   B0800 : F6                          dc.b    $F6
(1)  201/   B0801 : AF87                                dc.w    z80_ptr(EHZ_JUMP00)
(1)  202/   B0803 :                     
(1)  203/   B0803 :                     ; FM1 Data
(1)  204/   B0803 :                     EHZ_FM1:
(1)  205/   B0803 : (MACRO)             	smpsSetvoice        $07
(1)  205/   B0803 :  (MACRO-2)                  smpsFMvoice $07
(1)  205/   B0803 : EF07                                dc.b    $EF,$07
(1)  206/   B0805 : A30C A520 E708 AC04 	dc.b	nBb2, $0C, nC3, $20, smpsNoAttack, $08, nG3, $04, nE3, nC3, nA2, $08
            B080D : A9A5 A208         
(1)  207/   B0811 : AE04 AEA2 08AE 04AE 	dc.b	nA3, $04, nA3, nA2, $08, nA3, $04, nA3, nBb2, $08, nBb3, $04
            B0819 : A308 AF04         
(1)  208/   B081D : AFA3 08AF 04AF      	dc.b	nBb3, nBb2, $08, nBb3, $04, nBb3
(1)  209/   B0823 :                     
(1)  210/   B0823 :                     EHZ_Loop04:
(1)  211/   B0823 : A508 B104 80B1 08AC 	dc.b	nC3, $08, nC4, $04, nRst, nC4, $08, nG3, nD4, $0C, nC4, $08
            B082B : B30C B108         
(1)  212/   B082F : AC04 AEB1 A708 B304 	dc.b	nG3, $04, nA3, nC4, nD3, $08, nD4, $04, nRst, nD4, $08, nA3
            B0837 : 80B3 08AE         
(1)  213/   B083B : B50C B304 80AE B0B3 	dc.b	nE4, $0C, nD4, $04, nRst, nA3, nB3, nD4, nBb2, $08, nBb3, $04
            B0843 : A308 AF04         
(1)  214/   B0847 : 80AF 08AA B10C AF08 	dc.b	nRst, nBb3, $08, nF3, nC4, $0C, nBb3, $08, nF3, $04, nG3, nBb3
            B084F : AA04 ACAF         
(1)  215/   B0853 : A208 AE04 A2A4 08B0 	dc.b	nA2, $08, nA3, $04, nA2, nB2, $08, nB3, $04, nB2, nC3, $08
            B085B : 04A4 A508         
(1)  216/   B085F : B104 A5A2 08AE 04A2 	dc.b	nC4, $04, nC3, nA2, $08, nA3, $04, nA2
(1)  217/   B0867 : (MACRO)             	smpsLoop            $00, $04, EHZ_Loop04
(1)  217/   B0867 : F7                          dc.b    $F7
(1)  217/   B0868 : 0004                        dc.b    $00,$04
(1)  217/   B086A : 2388                                dc.w    z80_ptr(EHZ_LOOP04)
(1)  218/   B086C : AA08 B6A5 B1AA B6A5 	dc.b	nF3, $08, nF4, nC3, nC4, nF3, nF4, nC3, nC4, nE3, nE4, nB2
            B0874 : B1A9 B5A4         
(1)  219/   B0878 : B0A9 B5A4 B0A9 B5A4 	dc.b	nB3, nE3, nE4, nB2, nB3, nE3, nE4, nB2, nB3, nAb2, nAb3, nE2
            B0880 : B0A1 AD9D         
(1)  220/   B0884 : A9A2 AEA4 B0A5 B1A2 	dc.b	nE3, nA2, nA3, nB2, nB3, nC3, nC4, nA2, nA3, nF3, nF4, nC3
            B088C : AEAA B6A5         
(1)  221/   B0890 : B1AA B6A5 B1A9 B5A4 	dc.b	nC4, nF3, nF4, nC3, nC4, nE3, nE4, nB2, nB3, nE3, nE4, nB2
            B0898 : B0A9 B5A4         
(1)  222/   B089C : B0A0 04A0 80A2 20E7 	dc.b	nB3, nG2, $04, nG2, nRst, nA2, $20, smpsNoAttack, $14, $04, $08, $04
            B08A4 : 1404 0804         
(1)  223/   B08A8 : A408 A5A7 A5A4 04A2 	dc.b	nB2, $08, nC3, nD3, nC3, nB2, $04, nA2, $0C
            B08B0 : 0C               
(1)  224/   B08B1 : (MACRO)             	smpsJump            EHZ_Loop04
(1)  224/   B08B1 : F6                          dc.b    $F6
(1)  224/   B08B2 : 2388                                dc.w    z80_ptr(EHZ_LOOP04)
(1)  225/   B08B4 :                     
(1)  226/   B08B4 :                     ; PSG1 Data
(1)  227/   B08B4 :                     EHZ_PSG1:
(1)  228/   B08B4 : 8020 8080 80        	dc.b	nRst, $20, nRst, nRst, nRst
(1)  229/   B08B9 :                     
(1)  230/   B08B9 :                     EHZ_Jump05:
(1)  231/   B08B9 : (MACRO)             	smpsAlterPitch      $0C
(1)  231/   B08B9 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  231/   B08B9 : FB0C                                dc.b    $FB,$0C
(1)  232/   B08BB : (MACRO)             	smpsPSGvoice        fTone_0B
(1)  232/   B08BB : F50B                        dc.b    $F5,FTONE_0B
(1)  233/   B08BD : (MACRO)             	smpsPSGAlterVol     $02
(1)  233/   B08BD : EC02                        dc.b    $EC,$02
(1)  234/   B08BF :                     
(1)  235/   B08BF :                     EHZ_Loop0B:
(1)  236/   B08BF : C420 E720 C6E7 20C2 	dc.b	nG5, $20, smpsNoAttack, $20, nA5, smpsNoAttack, $20, nF5, smpsNoAttack, $20, nE5, smpsNoAttack
            B08C7 : E720 C1E7         
(1)  237/   B08CB : 20                  	dc.b	$20
(1)  238/   B08CC : (MACRO)             	smpsLoop            $00, $04, EHZ_Loop0B
(1)  238/   B08CC : F7                          dc.b    $F7
(1)  238/   B08CD : 0004                        dc.b    $00,$04
(1)  238/   B08CF : BF88                                dc.w    z80_ptr(EHZ_LOOP0B)
(1)  239/   B08D1 : 8020 80             	dc.b	nRst, $20, nRst
(1)  240/   B08D4 : (MACRO)             	smpsPSGvoice        fTone_08
(1)  240/   B08D4 : F508                        dc.b    $F5,FTONE_08
(1)  241/   B08D6 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  241/   B08D6 : ECFF                        dc.b    $EC,$FF
(1)  242/   B08D8 : 80C8 0280 06C9 04C8 	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
            B08E0 : 08               
(1)  243/   B08E1 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  243/   B08E1 : ECFF                        dc.b    $EC,$FF
(1)  244/   B08E3 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  244/   B08E3 : F502                        dc.b    $F5,FTONE_02
(1)  245/   B08E5 : (MACRO)             	smpsPSGAlterVol     $03
(1)  245/   B08E5 : EC03                        dc.b    $EC,$03
(1)  246/   B08E7 : C804 8004           	dc.b	nB5, $04, nRst, $04
(1)  247/   B08EB : (MACRO)             	smpsPSGAlterVol     $03
(1)  247/   B08EB : EC03                        dc.b    $EC,$03
(1)  248/   B08ED : C802 8002           	dc.b	nB5, $02, nRst, $02
(1)  249/   B08F1 : (MACRO)             	smpsPSGAlterVol     $FA
(1)  249/   B08F1 : ECFA                        dc.b    $EC,$FA
(1)  250/   B08F3 : (MACRO)             	smpsPSGvoice        fTone_08
(1)  250/   B08F3 : F508                        dc.b    $F5,FTONE_08
(1)  251/   B08F5 : (MACRO)             	smpsAlterPitch      $F4
(1)  251/   B08F5 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  251/   B08F5 : FBF4                                dc.b    $FB,$F4
(1)  252/   B08F7 : 8020 80C9 0480 C910 	dc.b	nRst, $20, nRst, nC6, $04, nRst, nC6, $10, nA5, $08, nRst, $20
            B08FF : C608 8020         
(1)  253/   B0903 : 8080                	dc.b	nRst, nRst
(1)  254/   B0905 : (MACRO)             	smpsAlterPitch      $0C
(1)  254/   B0905 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  254/   B0905 : FB0C                                dc.b    $FB,$0C
(1)  255/   B0907 : (MACRO)             	smpsPSGAlterVol     $01
(1)  255/   B0907 : EC01                        dc.b    $EC,$01
(1)  256/   B0909 : 80C8 0280 06C9 04C8 	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
            B0911 : 08               
(1)  257/   B0912 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  257/   B0912 : ECFF                        dc.b    $EC,$FF
(1)  258/   B0914 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  258/   B0914 : F502                        dc.b    $F5,FTONE_02
(1)  259/   B0916 : (MACRO)             	smpsPSGAlterVol     $03
(1)  259/   B0916 : EC03                        dc.b    $EC,$03
(1)  260/   B0918 : C804 8004           	dc.b	nB5, $04, nRst, $04
(1)  261/   B091C : (MACRO)             	smpsPSGAlterVol     $03
(1)  261/   B091C : EC03                        dc.b    $EC,$03
(1)  262/   B091E : C802 8002           	dc.b	nB5, $02, nRst, $02
(1)  263/   B0922 : (MACRO)             	smpsPSGAlterVol     $FA
(1)  263/   B0922 : ECFA                        dc.b    $EC,$FA
(1)  264/   B0924 : (MACRO)             	smpsAlterPitch      $F4
(1)  264/   B0924 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  264/   B0924 : FBF4                                dc.b    $FB,$F4
(1)  265/   B0926 : 8020 8080 80        	dc.b	nRst, $20, nRst, nRst, nRst
(1)  266/   B092B : (MACRO)             	smpsJump            EHZ_Jump05
(1)  266/   B092B : F6                          dc.b    $F6
(1)  266/   B092C : B988                                dc.w    z80_ptr(EHZ_JUMP05)
(1)  267/   B092E :                     
(1)  268/   B092E :                     ; PSG2 Data
(1)  269/   B092E :                     EHZ_PSG2:
(1)  270/   B092E : 8020 8080 80        	dc.b	nRst, $20, nRst, nRst, nRst
(1)  271/   B0933 :                     
(1)  272/   B0933 :                     EHZ_Jump04:
(1)  273/   B0933 : (MACRO)             	smpsPSGAlterVol     $03
(1)  273/   B0933 : EC03                        dc.b    $EC,$03
(1)  274/   B0935 : (MACRO)             	smpsPSGvoice        fTone_0B
(1)  274/   B0935 : F50B                        dc.b    $F5,FTONE_0B
(1)  275/   B0937 : (MACRO)             	smpsAlterNote       $00
(1)  275/   B0937 :  (MACRO-2)                  smpsDetune      $00
(1)  275/   B0937 : E100                        dc.b    $E1,$00
(1)  276/   B0939 :                     
(1)  277/   B0939 :                     EHZ_Loop0A:
(1)  278/   B0939 : C120 E720 C3E7 20BF 	dc.b	nE5, $20, smpsNoAttack, $20, nFs5, smpsNoAttack, $20, nD5, smpsNoAttack, $20, nC5, smpsNoAttack
            B0941 : E720 BDE7         
(1)  279/   B0945 : 20                  	dc.b	$20
(1)  280/   B0946 : (MACRO)             	smpsLoop            $00, $04, EHZ_Loop0A
(1)  280/   B0946 : F7                          dc.b    $F7
(1)  280/   B0947 : 0004                        dc.b    $00,$04
(1)  280/   B0949 : 3989                                dc.w    z80_ptr(EHZ_LOOP0A)
(1)  281/   B094B : (MACRO)             	smpsModOff
(1)  281/   B094B : FA                                  dc.b    $FA
(1)  282/   B094C : (MACRO)             	smpsPSGAlterVol     $FD
(1)  282/   B094C : ECFD                        dc.b    $EC,$FD
(1)  283/   B094E : 8020 80             	dc.b	nRst, $20, nRst
(1)  284/   B0951 : (MACRO)             	smpsPSGvoice        $00
(1)  284/   B0951 : F500                        dc.b    $F5,$00
(1)  285/   B0953 : (MACRO)             	smpsAlterNote       $01
(1)  285/   B0953 :  (MACRO-2)                  smpsDetune      $01
(1)  285/   B0953 : E101                        dc.b    $E1,$01
(1)  286/   B0955 : (MACRO)             	smpsPSGAlterVol     $01
(1)  286/   B0955 : EC01                        dc.b    $EC,$01
(1)  287/   B0957 : 80C8 0280 06C9 04C8 	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
            B095F : 08               
(1)  288/   B0960 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  288/   B0960 : ECFF                        dc.b    $EC,$FF
(1)  289/   B0962 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  289/   B0962 : F502                        dc.b    $F5,FTONE_02
(1)  290/   B0964 : (MACRO)             	smpsPSGAlterVol     $03
(1)  290/   B0964 : EC03                        dc.b    $EC,$03
(1)  291/   B0966 : C804 8004           	dc.b	nB5, $04, nRst, $04
(1)  292/   B096A : (MACRO)             	smpsPSGAlterVol     $03
(1)  292/   B096A : EC03                        dc.b    $EC,$03
(1)  293/   B096C : C802 8002           	dc.b	nB5, $02, nRst, $02
(1)  294/   B0970 : (MACRO)             	smpsPSGAlterVol     $FA
(1)  294/   B0970 : ECFA                        dc.b    $EC,$FA
(1)  295/   B0972 : (MACRO)             	smpsPSGvoice        $00
(1)  295/   B0972 : F500                        dc.b    $F5,$00
(1)  296/   B0974 : 8020 8080 8080 80   	dc.b	nRst, $20, nRst, nRst, nRst, nRst, nRst
(1)  297/   B097B : (MACRO)             	smpsPSGAlterVol     $01
(1)  297/   B097B : EC01                        dc.b    $EC,$01
(1)  298/   B097D : 80C8 0280 06C9 04C8 	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
            B0985 : 08               
(1)  299/   B0986 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  299/   B0986 : ECFF                        dc.b    $EC,$FF
(1)  300/   B0988 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  300/   B0988 : F502                        dc.b    $F5,FTONE_02
(1)  301/   B098A : (MACRO)             	smpsPSGAlterVol     $03
(1)  301/   B098A : EC03                        dc.b    $EC,$03
(1)  302/   B098C : C804 8004           	dc.b	nB5, $04, nRst, $04
(1)  303/   B0990 : (MACRO)             	smpsPSGAlterVol     $03
(1)  303/   B0990 : EC03                        dc.b    $EC,$03
(1)  304/   B0992 : C802 8002           	dc.b	nB5, $02, nRst, $02
(1)  305/   B0996 : (MACRO)             	smpsPSGAlterVol     $FA
(1)  305/   B0996 : ECFA                        dc.b    $EC,$FA
(1)  306/   B0998 : 8020 8080 80        	dc.b	nRst, $20, nRst, nRst, nRst
(1)  307/   B099D : (MACRO)             	smpsJump            EHZ_Jump04
(1)  307/   B099D : F6                          dc.b    $F6
(1)  307/   B099E : 3389                                dc.w    z80_ptr(EHZ_JUMP04)
(1)  308/   B09A0 :                     
(1)  309/   B09A0 :                     ; PSG3 Data
(1)  310/   B09A0 :                     EHZ_PSG3:
(1)  311/   B09A0 : (MACRO)             	smpsPSGform         $E7
(1)  311/   B09A0 : F3E7                        dc.b    $F3,$E7
(1)  312/   B09A2 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  312/   B09A2 : F502                        dc.b    $F5,FTONE_02
(1)  313/   B09A4 : 8008 C710 C7C7 C708 	dc.b	nRst, $08, nMaxPSG, $10, nMaxPSG, nMaxPSG, nMaxPSG, $08, nRst, $20, nRst
            B09AC : 8020 80            
(1)  314/   B09AF :                     
(1)  315/   B09AF :                     EHZ_Loop07:
(1)  316/   B09AF : C708 04C7 C708 04C7 	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
            B09B7 : C708 04C7         
(1)  317/   B09BB : C708 04C7           	dc.b	nMaxPSG, $08, $04, nMaxPSG
(1)  318/   B09BF : (MACRO)             	smpsLoop            $00, $07, EHZ_Loop07
(1)  318/   B09BF : F7                          dc.b    $F7
(1)  318/   B09C0 : 0007                        dc.b    $00,$07
(1)  318/   B09C2 : AF89                                dc.w    z80_ptr(EHZ_LOOP07)
(1)  319/   B09C4 : C708 04C7 C708 04C7 	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
            B09CC : C708 04C7         
(1)  320/   B09D0 : C708                	dc.b	nMaxPSG, $08
(1)  321/   B09D2 : (MACRO)             	smpsPSGvoice        fTone_03
(1)  321/   B09D2 : F503                        dc.b    $F5,FTONE_03
(1)  322/   B09D4 : C7                  	dc.b	nMaxPSG
(1)  323/   B09D5 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  323/   B09D5 : F502                        dc.b    $F5,FTONE_02
(1)  324/   B09D7 :                     
(1)  325/   B09D7 :                     EHZ_Loop08:
(1)  326/   B09D7 : C708 04C7 C708 04C7 	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
            B09DF : C708 04C7         
(1)  327/   B09E3 : C708 04C7           	dc.b	nMaxPSG, $08, $04, nMaxPSG
(1)  328/   B09E7 : (MACRO)             	smpsLoop            $00, $07, EHZ_Loop08
(1)  328/   B09E7 : F7                          dc.b    $F7
(1)  328/   B09E8 : 0007                        dc.b    $00,$07
(1)  328/   B09EA : D789                                dc.w    z80_ptr(EHZ_LOOP08)
(1)  329/   B09EC : C708 04C7 C708 04C7 	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
            B09F4 : C708 04C7         
(1)  330/   B09F8 : (MACRO)             	smpsPSGvoice        fTone_03
(1)  330/   B09F8 : F503                        dc.b    $F5,FTONE_03
(1)  331/   B09FA : C708                	dc.b	nMaxPSG, $08
(1)  332/   B09FC : (MACRO)             	smpsPSGvoice        fTone_02
(1)  332/   B09FC : F502                        dc.b    $F5,FTONE_02
(1)  333/   B09FE : C704 C7             	dc.b	nMaxPSG, $04, nMaxPSG
(1)  334/   B0A01 :                     
(1)  335/   B0A01 :                     EHZ_Loop09:
(1)  336/   B0A01 : C708 04C7 C708 04C7 	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
            B0A09 : C708 04C7         
(1)  337/   B0A0D : C708 C704 C7        	dc.b	nMaxPSG, $08, nMaxPSG, $04, nMaxPSG
(1)  338/   B0A12 : (MACRO)             	smpsLoop            $00, $03, EHZ_Loop09
(1)  338/   B0A12 : F7                          dc.b    $F7
(1)  338/   B0A13 : 0003                        dc.b    $00,$03
(1)  338/   B0A15 : 018A                                dc.w    z80_ptr(EHZ_LOOP09)
(1)  339/   B0A17 : C708 04C7 C708 04C7 	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
            B0A1F : C708 04C7         
(1)  340/   B0A23 : (MACRO)             	smpsPSGvoice        fTone_03
(1)  340/   B0A23 : F503                        dc.b    $F5,FTONE_03
(1)  341/   B0A25 : C708                	dc.b	nMaxPSG, $08
(1)  342/   B0A27 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  342/   B0A27 : F502                        dc.b    $F5,FTONE_02
(1)  343/   B0A29 : C704 C7C7 0804 C7C7 	dc.b	nMaxPSG, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG
            B0A31 : 0804 C7C7         
(1)  344/   B0A35 : 0804 C7C7 0804 C7C7 	dc.b	$08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG
            B0A3D : 0804 C7C7         
(1)  345/   B0A41 : 0804 C7C7 0804 C7   	dc.b	$08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
(1)  346/   B0A48 : (MACRO)             	smpsPSGvoice        fTone_03
(1)  346/   B0A48 : F503                        dc.b    $F5,FTONE_03
(1)  347/   B0A4A : C708                	dc.b	nMaxPSG, $08
(1)  348/   B0A4C : (MACRO)             	smpsPSGvoice        fTone_02
(1)  348/   B0A4C : F502                        dc.b    $F5,FTONE_02
(1)  349/   B0A4E : C704 C7C7 0804 C7C7 	dc.b	nMaxPSG, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG
            B0A56 : 0804 C7C7         
(1)  350/   B0A5A : 0804 C7             	dc.b	$08, $04, nMaxPSG
(1)  351/   B0A5D : (MACRO)             	smpsPSGvoice        fTone_03
(1)  351/   B0A5D : F503                        dc.b    $F5,FTONE_03
(1)  352/   B0A5F : C708                	dc.b	nMaxPSG, $08
(1)  353/   B0A61 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  353/   B0A61 : F502                        dc.b    $F5,FTONE_02
(1)  354/   B0A63 : C704 C7             	dc.b	nMaxPSG, $04, nMaxPSG
(1)  355/   B0A66 : (MACRO)             	smpsPSGvoice        fTone_01
(1)  355/   B0A66 : F501                        dc.b    $F5,FTONE_01
(1)  356/   B0A68 : C710 C7C7 C7        	dc.b	nMaxPSG, $10, nMaxPSG, nMaxPSG, nMaxPSG
(1)  357/   B0A6D : (MACRO)             	smpsPSGvoice        fTone_02
(1)  357/   B0A6D : F502                        dc.b    $F5,FTONE_02
(1)  358/   B0A6F : (MACRO)             	smpsJump            EHZ_Loop07
(1)  358/   B0A6F : F6                          dc.b    $F6
(1)  358/   B0A70 : AF89                                dc.w    z80_ptr(EHZ_LOOP07)
(1)  359/   B0A72 :                     
(1)  360/   B0A72 :                     ; DAC Data
(1)  361/   B0A72 :                     EHZ_DAC:
(1)  362/   B0A72 : 810C 20E7 1404 8C08 	dc.b	dKick, $0C, $20, smpsNoAttack, $14, $04, dMidTom, $08, dFloorTom, $04, dMidTom, $08
            B0A7A : 8E04 8C08         
(1)  363/   B0A7E : 8C8C 818E 048C 8E08 	dc.b	dMidTom, dMidTom, dKick, dFloorTom, $04, dMidTom, dFloorTom, $08
(1)  364/   B0A86 :                     
(1)  365/   B0A86 :                     EHZ_Loop00:
(1)  366/   B0A86 : 8110 8281 82        	dc.b	dKick, $10, dSnare, dKick, dSnare
(1)  367/   B0A8B : (MACRO)             	smpsLoop            $00, $07, EHZ_Loop00
(1)  367/   B0A8B : F7                          dc.b    $F7
(1)  367/   B0A8C : 0007                        dc.b    $00,$07
(1)  367/   B0A8E : 868A                                dc.w    z80_ptr(EHZ_LOOP00)
(1)  368/   B0A90 : 8110 8281 0882 1004 	dc.b	dKick, $10, dSnare, dKick, $08, dSnare, $10, $04, dSnare
            B0A98 : 82               
(1)  369/   B0A99 :                     
(1)  370/   B0A99 :                     EHZ_Loop01:
(1)  371/   B0A99 : 8110 8281 82        	dc.b	dKick, $10, dSnare, dKick, dSnare
(1)  372/   B0A9E : (MACRO)             	smpsLoop            $00, $03, EHZ_Loop01
(1)  372/   B0A9E : F7                          dc.b    $F7
(1)  372/   B0A9F : 0003                        dc.b    $00,$03
(1)  372/   B0AA1 : 998A                                dc.w    z80_ptr(EHZ_LOOP01)
(1)  373/   B0AA3 : 8110 8281 0882 1008 	dc.b	dKick, $10, dSnare, dKick, $08, dSnare, $10, $08
(1)  374/   B0AAB :                     
(1)  375/   B0AAB :                     EHZ_Loop02:
(1)  376/   B0AAB : 8110 8281 82        	dc.b	dKick, $10, dSnare, dKick, dSnare
(1)  377/   B0AB0 : (MACRO)             	smpsLoop            $00, $03, EHZ_Loop02
(1)  377/   B0AB0 : F7                          dc.b    $F7
(1)  377/   B0AB1 : 0003                        dc.b    $00,$03
(1)  377/   B0AB3 : AB8A                                dc.w    z80_ptr(EHZ_LOOP02)
(1)  378/   B0AB5 : 8110 8281 8208 0482 	dc.b	dKick, $10, dSnare, dKick, dSnare, $08, $04, dSnare, dKick, $10, dSnare, dKick
            B0ABD : 8110 8281         
(1)  379/   B0AC1 : 8281 8281 0882 8210 	dc.b	dSnare, dKick, dSnare, dKick, $08, dSnare, dSnare, $10
(1)  380/   B0AC9 :                     
(1)  381/   B0AC9 :                     EHZ_Loop03:
(1)  382/   B0AC9 : 8110 8281 82        	dc.b	dKick, $10, dSnare, dKick, dSnare
(1)  383/   B0ACE : (MACRO)             	smpsLoop            $00, $03, EHZ_Loop03
(1)  383/   B0ACE : F7                          dc.b    $F7
(1)  383/   B0ACF : 0003                        dc.b    $00,$03
(1)  383/   B0AD1 : C98A                                dc.w    z80_ptr(EHZ_LOOP03)
(1)  384/   B0AD3 : 8110 8281 0882 8210 	dc.b	dKick, $10, dSnare, dKick, $08, dSnare, dSnare, $10, dKick, $0C, dSnare, $20
            B0ADB : 810C 8220         
(1)  385/   B0ADF : 8004 8210 8104 8C08 	dc.b	nRst, $04, dSnare, $10, dKick, $04, dMidTom, $08, $04, dSnare, $08, dMidTom
            B0AE7 : 0482 088C         
(1)  386/   B0AEB : 818E 8E8E 048E      	dc.b	dKick, dFloorTom, dFloorTom, dFloorTom, $04, dFloorTom
(1)  387/   B0AF1 : (MACRO)             	smpsJump            EHZ_Loop00
(1)  387/   B0AF1 : F6                          dc.b    $F6
(1)  387/   B0AF2 : 868A                                dc.w    z80_ptr(EHZ_LOOP00)
(1)  388/   B0AF4 :                     
(1)  389/   B0AF4 :                     EHZ_Voices:
(1)  390/   B0AF4 :                     ;	Voice $00
(1)  391/   B0AF4 :                     ;	$07
(1)  392/   B0AF4 :                     ;	$05, $00, $01, $02, 	$1F, $1F, $1F, $1F, 	$0E, $0E, $0E, $0E
(1)  393/   B0AF4 :                     ;	$02, $02, $02, $02, 	$55, $55, $55, $54, 	$80, $80, $80, $80
(1)  394/   B0AF4 : (MACRO)             	smpsVcAlgorithm     $07
(1)  394/   B0AF4 : =$7                 vcAlgorithm set $07
(1)  395/   B0AF4 : (MACRO)             	smpsVcFeedback      $00
(1)  395/   B0AF4 : =$0                 vcFeedback set $00
(1)  396/   B0AF4 : (MACRO)             	smpsVcUnusedBits    $00
(1)  396/   B0AF4 : =$0                 vcUnusedBits set $00
(1)  396/   B0AF4 : =$0                 vcD1R1Unk set 0
(1)  396/   B0AF4 : =$0                 vcD1R2Unk set 0
(1)  396/   B0AF4 : =$0                 vcD1R3Unk set 0
(1)  396/   B0AF4 : =$0                 vcD1R4Unk set 0
(1)  397/   B0AF4 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  397/   B0AF4 : =$0                 vcDT1 set $00
(1)  397/   B0AF4 : =$0                 vcDT2 set $00
(1)  397/   B0AF4 : =$0                 vcDT3 set $00
(1)  397/   B0AF4 : =$0                 vcDT4 set $00
(1)  398/   B0AF4 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $00, $05
(1)  398/   B0AF4 : =$2                 vcCF1 set $02
(1)  398/   B0AF4 : =$1                 vcCF2 set $01
(1)  398/   B0AF4 : =$0                 vcCF3 set $00
(1)  398/   B0AF4 : =$5                 vcCF4 set $05
(1)  399/   B0AF4 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  399/   B0AF4 : =$0                 vcRS1 set $00
(1)  399/   B0AF4 : =$0                 vcRS2 set $00
(1)  399/   B0AF4 : =$0                 vcRS3 set $00
(1)  399/   B0AF4 : =$0                 vcRS4 set $00
(1)  400/   B0AF4 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  400/   B0AF4 : =$1F                vcAR1 set $1F
(1)  400/   B0AF4 : =$1F                vcAR2 set $1F
(1)  400/   B0AF4 : =$1F                vcAR3 set $1F
(1)  400/   B0AF4 : =$1F                vcAR4 set $1F
(1)  401/   B0AF4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  401/   B0AF4 : =$0                 vcAM1 set $00<<5
(1)  401/   B0AF4 : =$0                 vcAM2 set $00<<5
(1)  401/   B0AF4 : =$0                 vcAM3 set $00<<5
(1)  401/   B0AF4 : =$0                 vcAM4 set $00<<5
(1)  402/   B0AF4 : (MACRO)             	smpsVcDecayRate1    $0E, $0E, $0E, $0E
(1)  402/   B0AF4 : =$E                 vcD1R1 set $0E
(1)  402/   B0AF4 : =$E                 vcD1R2 set $0E
(1)  402/   B0AF4 : =$E                 vcD1R3 set $0E
(1)  402/   B0AF4 : =$E                 vcD1R4 set $0E
(1)  403/   B0AF4 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)  403/   B0AF4 : =$2                 vcD2R1 set $02
(1)  403/   B0AF4 : =$2                 vcD2R2 set $02
(1)  403/   B0AF4 : =$2                 vcD2R3 set $02
(1)  403/   B0AF4 : =$2                 vcD2R4 set $02
(1)  404/   B0AF4 : (MACRO)             	smpsVcDecayLevel    $05, $05, $05, $05
(1)  404/   B0AF4 : =$5                 vcDL1 set $05
(1)  404/   B0AF4 : =$5                 vcDL2 set $05
(1)  404/   B0AF4 : =$5                 vcDL3 set $05
(1)  404/   B0AF4 : =$5                 vcDL4 set $05
(1)  405/   B0AF4 : (MACRO)             	smpsVcReleaseRate   $04, $05, $05, $05
(1)  405/   B0AF4 : =$4                 vcRR1 set $04
(1)  405/   B0AF4 : =$5                 vcRR2 set $05
(1)  405/   B0AF4 : =$5                 vcRR3 set $05
(1)  405/   B0AF4 : =$5                 vcRR4 set $05
(1)  406/   B0AF4 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $00
(1)  406/   B0AF4 : =$0                 vcTL1 set $00
(1)  406/   B0AF4 : =$0                 vcTL2 set $00
(1)  406/   B0AF4 : =$0                 vcTL3 set $00
(1)  406/   B0AF4 : =$0                 vcTL4 set $00
(1)  406/   B0AF4 : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  406/   B0AF5 :                     ;   0     1     2     3     4     5     6     7
(1)  406/   B0AF5 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  406/   B0AF5 : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  406/   B0AF5 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  406/   B0AF5 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  406/   B0AF5 : =$80                vcTLMask1 set $80
(1)  406/   B0AF5 :                     
(1)  406/   B0AF5 : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  406/   B0AF5 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  406/   B0AF5 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  406/   B0AF5 : =$80                vcTLMask1 set $80
(1)  406/   B0AF5 : =$0                 vcTL1 set vcTL1&$7F
(1)  406/   B0AF5 : =$0                 vcTL2 set vcTL2&$7F
(1)  406/   B0AF5 : =$0                 vcTL3 set vcTL3&$7F
(1)  406/   B0AF5 : =$0                 vcTL4 set vcTL4&$7F
(1)  406/   B0AF5 :                     
(1)  406/   B0AF5 : 0500 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  406/   B0AF9 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  406/   B0AFD : 0E0E 0E0E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  406/   B0B01 : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  406/   B0B05 : 5555 5554                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  406/   B0B09 : 8080 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  407/   B0B0D :                     
(1)  408/   B0B0D :                     ;	Voice $01
(1)  409/   B0B0D :                     ;	$35
(1)  410/   B0B0D :                     ;	$01, $01, $13, $00, 	$1F, $1D, $18, $19, 	$00, $09, $06, $0D
(1)  411/   B0B0D :                     ;	$00, $00, $02, $03, 	$00, $06, $15, $16, 	$1E, $80, $83, $80
(1)  412/   B0B0D : (MACRO)             	smpsVcAlgorithm     $05
(1)  412/   B0B0D : =$5                 vcAlgorithm set $05
(1)  413/   B0B0D : (MACRO)             	smpsVcFeedback      $06
(1)  413/   B0B0D : =$6                 vcFeedback set $06
(1)  414/   B0B0D : (MACRO)             	smpsVcUnusedBits    $00
(1)  414/   B0B0D : =$0                 vcUnusedBits set $00
(1)  414/   B0B0D : =$0                 vcD1R1Unk set 0
(1)  414/   B0B0D : =$0                 vcD1R2Unk set 0
(1)  414/   B0B0D : =$0                 vcD1R3Unk set 0
(1)  414/   B0B0D : =$0                 vcD1R4Unk set 0
(1)  415/   B0B0D : (MACRO)             	smpsVcDetune        $00, $01, $00, $00
(1)  415/   B0B0D : =$0                 vcDT1 set $00
(1)  415/   B0B0D : =$1                 vcDT2 set $01
(1)  415/   B0B0D : =$0                 vcDT3 set $00
(1)  415/   B0B0D : =$0                 vcDT4 set $00
(1)  416/   B0B0D : (MACRO)             	smpsVcCoarseFreq    $00, $03, $01, $01
(1)  416/   B0B0D : =$0                 vcCF1 set $00
(1)  416/   B0B0D : =$3                 vcCF2 set $03
(1)  416/   B0B0D : =$1                 vcCF3 set $01
(1)  416/   B0B0D : =$1                 vcCF4 set $01
(1)  417/   B0B0D : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  417/   B0B0D : =$0                 vcRS1 set $00
(1)  417/   B0B0D : =$0                 vcRS2 set $00
(1)  417/   B0B0D : =$0                 vcRS3 set $00
(1)  417/   B0B0D : =$0                 vcRS4 set $00
(1)  418/   B0B0D : (MACRO)             	smpsVcAttackRate    $19, $18, $1D, $1F
(1)  418/   B0B0D : =$19                vcAR1 set $19
(1)  418/   B0B0D : =$18                vcAR2 set $18
(1)  418/   B0B0D : =$1D                vcAR3 set $1D
(1)  418/   B0B0D : =$1F                vcAR4 set $1F
(1)  419/   B0B0D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  419/   B0B0D : =$0                 vcAM1 set $00<<5
(1)  419/   B0B0D : =$0                 vcAM2 set $00<<5
(1)  419/   B0B0D : =$0                 vcAM3 set $00<<5
(1)  419/   B0B0D : =$0                 vcAM4 set $00<<5
(1)  420/   B0B0D : (MACRO)             	smpsVcDecayRate1    $0D, $06, $09, $00
(1)  420/   B0B0D : =$D                 vcD1R1 set $0D
(1)  420/   B0B0D : =$6                 vcD1R2 set $06
(1)  420/   B0B0D : =$9                 vcD1R3 set $09
(1)  420/   B0B0D : =$0                 vcD1R4 set $00
(1)  421/   B0B0D : (MACRO)             	smpsVcDecayRate2    $03, $02, $00, $00
(1)  421/   B0B0D : =$3                 vcD2R1 set $03
(1)  421/   B0B0D : =$2                 vcD2R2 set $02
(1)  421/   B0B0D : =$0                 vcD2R3 set $00
(1)  421/   B0B0D : =$0                 vcD2R4 set $00
(1)  422/   B0B0D : (MACRO)             	smpsVcDecayLevel    $01, $01, $00, $00
(1)  422/   B0B0D : =$1                 vcDL1 set $01
(1)  422/   B0B0D : =$1                 vcDL2 set $01
(1)  422/   B0B0D : =$0                 vcDL3 set $00
(1)  422/   B0B0D : =$0                 vcDL4 set $00
(1)  423/   B0B0D : (MACRO)             	smpsVcReleaseRate   $06, $05, $06, $00
(1)  423/   B0B0D : =$6                 vcRR1 set $06
(1)  423/   B0B0D : =$5                 vcRR2 set $05
(1)  423/   B0B0D : =$6                 vcRR3 set $06
(1)  423/   B0B0D : =$0                 vcRR4 set $00
(1)  424/   B0B0D : (MACRO)             	smpsVcTotalLevel    $00, $03, $00, $1E
(1)  424/   B0B0D : =$0                 vcTL1 set $00
(1)  424/   B0B0D : =$3                 vcTL2 set $03
(1)  424/   B0B0D : =$0                 vcTL3 set $00
(1)  424/   B0B0D : =$1E                vcTL4 set $1E
(1)  424/   B0B0D : 35                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  424/   B0B0E :                     ;   0     1     2     3     4     5     6     7
(1)  424/   B0B0E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  424/   B0B0E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  424/   B0B0E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  424/   B0B0E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  424/   B0B0E : =$80                vcTLMask1 set $80
(1)  424/   B0B0E :                     
(1)  424/   B0B0E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  424/   B0B0E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  424/   B0B0E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  424/   B0B0E : =$80                vcTLMask1 set $80
(1)  424/   B0B0E : =$0                 vcTL1 set vcTL1&$7F
(1)  424/   B0B0E : =$3                 vcTL2 set vcTL2&$7F
(1)  424/   B0B0E : =$0                 vcTL3 set vcTL3&$7F
(1)  424/   B0B0E : =$1E                vcTL4 set vcTL4&$7F
(1)  424/   B0B0E :                     
(1)  424/   B0B0E : 0101 1300                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  424/   B0B12 : 1F1D 1819                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  424/   B0B16 : 0009 060D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  424/   B0B1A : 0000 0203                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  424/   B0B1E : 0006 1516                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  424/   B0B22 : 1E80 8380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  425/   B0B26 :                     
(1)  426/   B0B26 :                     ;	Voice $02
(1)  427/   B0B26 :                     ;	$3D
(1)  428/   B0B26 :                     ;	$02, $02, $01, $02, 	$14, $0E, $8C, $0E, 	$08, $0A, $07, $0A
(1)  429/   B0B26 :                     ;	$00, $0E, $0E, $0E, 	$1F, $1F, $1F, $1F, 	$1A, $84, $84, $84
(1)  430/   B0B26 : (MACRO)             	smpsVcAlgorithm     $05
(1)  430/   B0B26 : =$5                 vcAlgorithm set $05
(1)  431/   B0B26 : (MACRO)             	smpsVcFeedback      $07
(1)  431/   B0B26 : =$7                 vcFeedback set $07
(1)  432/   B0B26 : (MACRO)             	smpsVcUnusedBits    $00
(1)  432/   B0B26 : =$0                 vcUnusedBits set $00
(1)  432/   B0B26 : =$0                 vcD1R1Unk set 0
(1)  432/   B0B26 : =$0                 vcD1R2Unk set 0
(1)  432/   B0B26 : =$0                 vcD1R3Unk set 0
(1)  432/   B0B26 : =$0                 vcD1R4Unk set 0
(1)  433/   B0B26 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  433/   B0B26 : =$0                 vcDT1 set $00
(1)  433/   B0B26 : =$0                 vcDT2 set $00
(1)  433/   B0B26 : =$0                 vcDT3 set $00
(1)  433/   B0B26 : =$0                 vcDT4 set $00
(1)  434/   B0B26 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $02, $02
(1)  434/   B0B26 : =$2                 vcCF1 set $02
(1)  434/   B0B26 : =$1                 vcCF2 set $01
(1)  434/   B0B26 : =$2                 vcCF3 set $02
(1)  434/   B0B26 : =$2                 vcCF4 set $02
(1)  435/   B0B26 : (MACRO)             	smpsVcRateScale     $00, $02, $00, $00
(1)  435/   B0B26 : =$0                 vcRS1 set $00
(1)  435/   B0B26 : =$2                 vcRS2 set $02
(1)  435/   B0B26 : =$0                 vcRS3 set $00
(1)  435/   B0B26 : =$0                 vcRS4 set $00
(1)  436/   B0B26 : (MACRO)             	smpsVcAttackRate    $0E, $0C, $0E, $14
(1)  436/   B0B26 : =$E                 vcAR1 set $0E
(1)  436/   B0B26 : =$C                 vcAR2 set $0C
(1)  436/   B0B26 : =$E                 vcAR3 set $0E
(1)  436/   B0B26 : =$14                vcAR4 set $14
(1)  437/   B0B26 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  437/   B0B26 : =$0                 vcAM1 set $00<<5
(1)  437/   B0B26 : =$0                 vcAM2 set $00<<5
(1)  437/   B0B26 : =$0                 vcAM3 set $00<<5
(1)  437/   B0B26 : =$0                 vcAM4 set $00<<5
(1)  438/   B0B26 : (MACRO)             	smpsVcDecayRate1    $0A, $07, $0A, $08
(1)  438/   B0B26 : =$A                 vcD1R1 set $0A
(1)  438/   B0B26 : =$7                 vcD1R2 set $07
(1)  438/   B0B26 : =$A                 vcD1R3 set $0A
(1)  438/   B0B26 : =$8                 vcD1R4 set $08
(1)  439/   B0B26 : (MACRO)             	smpsVcDecayRate2    $0E, $0E, $0E, $00
(1)  439/   B0B26 : =$E                 vcD2R1 set $0E
(1)  439/   B0B26 : =$E                 vcD2R2 set $0E
(1)  439/   B0B26 : =$E                 vcD2R3 set $0E
(1)  439/   B0B26 : =$0                 vcD2R4 set $00
(1)  440/   B0B26 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(1)  440/   B0B26 : =$1                 vcDL1 set $01
(1)  440/   B0B26 : =$1                 vcDL2 set $01
(1)  440/   B0B26 : =$1                 vcDL3 set $01
(1)  440/   B0B26 : =$1                 vcDL4 set $01
(1)  441/   B0B26 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  441/   B0B26 : =$F                 vcRR1 set $0F
(1)  441/   B0B26 : =$F                 vcRR2 set $0F
(1)  441/   B0B26 : =$F                 vcRR3 set $0F
(1)  441/   B0B26 : =$F                 vcRR4 set $0F
(1)  442/   B0B26 : (MACRO)             	smpsVcTotalLevel    $04, $04, $04, $1A
(1)  442/   B0B26 : =$4                 vcTL1 set $04
(1)  442/   B0B26 : =$4                 vcTL2 set $04
(1)  442/   B0B26 : =$4                 vcTL3 set $04
(1)  442/   B0B26 : =$1A                vcTL4 set $1A
(1)  442/   B0B26 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  442/   B0B27 :                     ;   0     1     2     3     4     5     6     7
(1)  442/   B0B27 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  442/   B0B27 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  442/   B0B27 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  442/   B0B27 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  442/   B0B27 : =$80                vcTLMask1 set $80
(1)  442/   B0B27 :                     
(1)  442/   B0B27 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  442/   B0B27 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  442/   B0B27 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  442/   B0B27 : =$80                vcTLMask1 set $80
(1)  442/   B0B27 : =$4                 vcTL1 set vcTL1&$7F
(1)  442/   B0B27 : =$4                 vcTL2 set vcTL2&$7F
(1)  442/   B0B27 : =$4                 vcTL3 set vcTL3&$7F
(1)  442/   B0B27 : =$1A                vcTL4 set vcTL4&$7F
(1)  442/   B0B27 :                     
(1)  442/   B0B27 : 0202 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  442/   B0B2B : 140E 8C0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  442/   B0B2F : 080A 070A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  442/   B0B33 : 000E 0E0E                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  442/   B0B37 : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  442/   B0B3B : 1A84 8484                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  443/   B0B3F :                     
(1)  444/   B0B3F :                     ;	Voice $03
(1)  445/   B0B3F :                     ;	$3D
(1)  446/   B0B3F :                     ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
(1)  447/   B0B3F :                     ;	$00, $00, $00, $00, 	$2B, $2B, $2B, $1B, 	$19, $80, $80, $80
(1)  448/   B0B3F : (MACRO)             	smpsVcAlgorithm     $05
(1)  448/   B0B3F : =$5                 vcAlgorithm set $05
(1)  449/   B0B3F : (MACRO)             	smpsVcFeedback      $07
(1)  449/   B0B3F : =$7                 vcFeedback set $07
(1)  450/   B0B3F : (MACRO)             	smpsVcUnusedBits    $00
(1)  450/   B0B3F : =$0                 vcUnusedBits set $00
(1)  450/   B0B3F : =$0                 vcD1R1Unk set 0
(1)  450/   B0B3F : =$0                 vcD1R2Unk set 0
(1)  450/   B0B3F : =$0                 vcD1R3Unk set 0
(1)  450/   B0B3F : =$0                 vcD1R4Unk set 0
(1)  451/   B0B3F : (MACRO)             	smpsVcDetune        $00, $05, $02, $00
(1)  451/   B0B3F : =$0                 vcDT1 set $00
(1)  451/   B0B3F : =$5                 vcDT2 set $05
(1)  451/   B0B3F : =$2                 vcDT3 set $02
(1)  451/   B0B3F : =$0                 vcDT4 set $00
(1)  452/   B0B3F : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  452/   B0B3F : =$1                 vcCF1 set $01
(1)  452/   B0B3F : =$1                 vcCF2 set $01
(1)  452/   B0B3F : =$1                 vcCF3 set $01
(1)  452/   B0B3F : =$1                 vcCF4 set $01
(1)  453/   B0B3F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  453/   B0B3F : =$0                 vcRS1 set $00
(1)  453/   B0B3F : =$0                 vcRS2 set $00
(1)  453/   B0B3F : =$0                 vcRS3 set $00
(1)  453/   B0B3F : =$0                 vcRS4 set $00
(1)  454/   B0B3F : (MACRO)             	smpsVcAttackRate    $0F, $14, $14, $12
(1)  454/   B0B3F : =$F                 vcAR1 set $0F
(1)  454/   B0B3F : =$14                vcAR2 set $14
(1)  454/   B0B3F : =$14                vcAR3 set $14
(1)  454/   B0B3F : =$12                vcAR4 set $12
(1)  455/   B0B3F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  455/   B0B3F : =$0                 vcAM1 set $00<<5
(1)  455/   B0B3F : =$0                 vcAM2 set $00<<5
(1)  455/   B0B3F : =$0                 vcAM3 set $00<<5
(1)  455/   B0B3F : =$0                 vcAM4 set $00<<5
(1)  456/   B0B3F : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1)  456/   B0B3F : =$5                 vcD1R1 set $05
(1)  456/   B0B3F : =$5                 vcD1R2 set $05
(1)  456/   B0B3F : =$5                 vcD1R3 set $05
(1)  456/   B0B3F : =$A                 vcD1R4 set $0A
(1)  457/   B0B3F : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  457/   B0B3F : =$0                 vcD2R1 set $00
(1)  457/   B0B3F : =$0                 vcD2R2 set $00
(1)  457/   B0B3F : =$0                 vcD2R3 set $00
(1)  457/   B0B3F : =$0                 vcD2R4 set $00
(1)  458/   B0B3F : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1)  458/   B0B3F : =$1                 vcDL1 set $01
(1)  458/   B0B3F : =$2                 vcDL2 set $02
(1)  458/   B0B3F : =$2                 vcDL3 set $02
(1)  458/   B0B3F : =$2                 vcDL4 set $02
(1)  459/   B0B3F : (MACRO)             	smpsVcReleaseRate   $0B, $0B, $0B, $0B
(1)  459/   B0B3F : =$B                 vcRR1 set $0B
(1)  459/   B0B3F : =$B                 vcRR2 set $0B
(1)  459/   B0B3F : =$B                 vcRR3 set $0B
(1)  459/   B0B3F : =$B                 vcRR4 set $0B
(1)  460/   B0B3F : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $19
(1)  460/   B0B3F : =$0                 vcTL1 set $00
(1)  460/   B0B3F : =$0                 vcTL2 set $00
(1)  460/   B0B3F : =$0                 vcTL3 set $00
(1)  460/   B0B3F : =$19                vcTL4 set $19
(1)  460/   B0B3F : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  460/   B0B40 :                     ;   0     1     2     3     4     5     6     7
(1)  460/   B0B40 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  460/   B0B40 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  460/   B0B40 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  460/   B0B40 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  460/   B0B40 : =$80                vcTLMask1 set $80
(1)  460/   B0B40 :                     
(1)  460/   B0B40 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  460/   B0B40 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  460/   B0B40 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  460/   B0B40 : =$80                vcTLMask1 set $80
(1)  460/   B0B40 : =$0                 vcTL1 set vcTL1&$7F
(1)  460/   B0B40 : =$0                 vcTL2 set vcTL2&$7F
(1)  460/   B0B40 : =$0                 vcTL3 set vcTL3&$7F
(1)  460/   B0B40 : =$19                vcTL4 set vcTL4&$7F
(1)  460/   B0B40 :                     
(1)  460/   B0B40 : 0121 5101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  460/   B0B44 : 1214 140F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  460/   B0B48 : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  460/   B0B4C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  460/   B0B50 : 2B2B 2B1B                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  460/   B0B54 : 1980 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  461/   B0B58 :                     
(1)  462/   B0B58 :                     ;	Voice $04
(1)  463/   B0B58 :                     ;	$3B
(1)  464/   B0B58 :                     ;	$07, $34, $32, $01, 	$1F, $14, $5F, $5F, 	$02, $02, $03, $04
(1)  465/   B0B58 :                     ;	$01, $01, $02, $03, 	$13, $13, $13, $17, 	$1E, $28, $28, $80
(1)  466/   B0B58 : (MACRO)             	smpsVcAlgorithm     $03
(1)  466/   B0B58 : =$3                 vcAlgorithm set $03
(1)  467/   B0B58 : (MACRO)             	smpsVcFeedback      $07
(1)  467/   B0B58 : =$7                 vcFeedback set $07
(1)  468/   B0B58 : (MACRO)             	smpsVcUnusedBits    $00
(1)  468/   B0B58 : =$0                 vcUnusedBits set $00
(1)  468/   B0B58 : =$0                 vcD1R1Unk set 0
(1)  468/   B0B58 : =$0                 vcD1R2Unk set 0
(1)  468/   B0B58 : =$0                 vcD1R3Unk set 0
(1)  468/   B0B58 : =$0                 vcD1R4Unk set 0
(1)  469/   B0B58 : (MACRO)             	smpsVcDetune        $00, $03, $03, $00
(1)  469/   B0B58 : =$0                 vcDT1 set $00
(1)  469/   B0B58 : =$3                 vcDT2 set $03
(1)  469/   B0B58 : =$3                 vcDT3 set $03
(1)  469/   B0B58 : =$0                 vcDT4 set $00
(1)  470/   B0B58 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $04, $07
(1)  470/   B0B58 : =$1                 vcCF1 set $01
(1)  470/   B0B58 : =$2                 vcCF2 set $02
(1)  470/   B0B58 : =$4                 vcCF3 set $04
(1)  470/   B0B58 : =$7                 vcCF4 set $07
(1)  471/   B0B58 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  471/   B0B58 : =$1                 vcRS1 set $01
(1)  471/   B0B58 : =$1                 vcRS2 set $01
(1)  471/   B0B58 : =$0                 vcRS3 set $00
(1)  471/   B0B58 : =$0                 vcRS4 set $00
(1)  472/   B0B58 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $14, $1F
(1)  472/   B0B58 : =$1F                vcAR1 set $1F
(1)  472/   B0B58 : =$1F                vcAR2 set $1F
(1)  472/   B0B58 : =$14                vcAR3 set $14
(1)  472/   B0B58 : =$1F                vcAR4 set $1F
(1)  473/   B0B58 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  473/   B0B58 : =$0                 vcAM1 set $00<<5
(1)  473/   B0B58 : =$0                 vcAM2 set $00<<5
(1)  473/   B0B58 : =$0                 vcAM3 set $00<<5
(1)  473/   B0B58 : =$0                 vcAM4 set $00<<5
(1)  474/   B0B58 : (MACRO)             	smpsVcDecayRate1    $04, $03, $02, $02
(1)  474/   B0B58 : =$4                 vcD1R1 set $04
(1)  474/   B0B58 : =$3                 vcD1R2 set $03
(1)  474/   B0B58 : =$2                 vcD1R3 set $02
(1)  474/   B0B58 : =$2                 vcD1R4 set $02
(1)  475/   B0B58 : (MACRO)             	smpsVcDecayRate2    $03, $02, $01, $01
(1)  475/   B0B58 : =$3                 vcD2R1 set $03
(1)  475/   B0B58 : =$2                 vcD2R2 set $02
(1)  475/   B0B58 : =$1                 vcD2R3 set $01
(1)  475/   B0B58 : =$1                 vcD2R4 set $01
(1)  476/   B0B58 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(1)  476/   B0B58 : =$1                 vcDL1 set $01
(1)  476/   B0B58 : =$1                 vcDL2 set $01
(1)  476/   B0B58 : =$1                 vcDL3 set $01
(1)  476/   B0B58 : =$1                 vcDL4 set $01
(1)  477/   B0B58 : (MACRO)             	smpsVcReleaseRate   $07, $03, $03, $03
(1)  477/   B0B58 : =$7                 vcRR1 set $07
(1)  477/   B0B58 : =$3                 vcRR2 set $03
(1)  477/   B0B58 : =$3                 vcRR3 set $03
(1)  477/   B0B58 : =$3                 vcRR4 set $03
(1)  478/   B0B58 : (MACRO)             	smpsVcTotalLevel    $00, $28, $28, $1E
(1)  478/   B0B58 : =$0                 vcTL1 set $00
(1)  478/   B0B58 : =$28                vcTL2 set $28
(1)  478/   B0B58 : =$28                vcTL3 set $28
(1)  478/   B0B58 : =$1E                vcTL4 set $1E
(1)  478/   B0B58 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  478/   B0B59 :                     ;   0     1     2     3     4     5     6     7
(1)  478/   B0B59 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  478/   B0B59 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  478/   B0B59 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  478/   B0B59 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  478/   B0B59 : =$80                vcTLMask1 set $80
(1)  478/   B0B59 :                     
(1)  478/   B0B59 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  478/   B0B59 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  478/   B0B59 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  478/   B0B59 : =$80                vcTLMask1 set $80
(1)  478/   B0B59 : =$0                 vcTL1 set vcTL1&$7F
(1)  478/   B0B59 : =$28                vcTL2 set vcTL2&$7F
(1)  478/   B0B59 : =$28                vcTL3 set vcTL3&$7F
(1)  478/   B0B59 : =$1E                vcTL4 set vcTL4&$7F
(1)  478/   B0B59 :                     
(1)  478/   B0B59 : 0734 3201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  478/   B0B5D : 1F14 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  478/   B0B61 : 0202 0304                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  478/   B0B65 : 0101 0203                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  478/   B0B69 : 1313 1317                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  478/   B0B6D : 1E28 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  479/   B0B71 :                     
(1)  480/   B0B71 :                     ;	Voice $05
(1)  481/   B0B71 :                     ;	$3B
(1)  482/   B0B71 :                     ;	$52, $31, $31, $51, 	$12, $14, $12, $14, 	$0E, $00, $0E, $02
(1)  483/   B0B71 :                     ;	$00, $00, $00, $01, 	$47, $07, $57, $37, 	$1C, $18, $1D, $80
(1)  484/   B0B71 : (MACRO)             	smpsVcAlgorithm     $03
(1)  484/   B0B71 : =$3                 vcAlgorithm set $03
(1)  485/   B0B71 : (MACRO)             	smpsVcFeedback      $07
(1)  485/   B0B71 : =$7                 vcFeedback set $07
(1)  486/   B0B71 : (MACRO)             	smpsVcUnusedBits    $00
(1)  486/   B0B71 : =$0                 vcUnusedBits set $00
(1)  486/   B0B71 : =$0                 vcD1R1Unk set 0
(1)  486/   B0B71 : =$0                 vcD1R2Unk set 0
(1)  486/   B0B71 : =$0                 vcD1R3Unk set 0
(1)  486/   B0B71 : =$0                 vcD1R4Unk set 0
(1)  487/   B0B71 : (MACRO)             	smpsVcDetune        $05, $03, $03, $05
(1)  487/   B0B71 : =$5                 vcDT1 set $05
(1)  487/   B0B71 : =$3                 vcDT2 set $03
(1)  487/   B0B71 : =$3                 vcDT3 set $03
(1)  487/   B0B71 : =$5                 vcDT4 set $05
(1)  488/   B0B71 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $02
(1)  488/   B0B71 : =$1                 vcCF1 set $01
(1)  488/   B0B71 : =$1                 vcCF2 set $01
(1)  488/   B0B71 : =$1                 vcCF3 set $01
(1)  488/   B0B71 : =$2                 vcCF4 set $02
(1)  489/   B0B71 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  489/   B0B71 : =$0                 vcRS1 set $00
(1)  489/   B0B71 : =$0                 vcRS2 set $00
(1)  489/   B0B71 : =$0                 vcRS3 set $00
(1)  489/   B0B71 : =$0                 vcRS4 set $00
(1)  490/   B0B71 : (MACRO)             	smpsVcAttackRate    $14, $12, $14, $12
(1)  490/   B0B71 : =$14                vcAR1 set $14
(1)  490/   B0B71 : =$12                vcAR2 set $12
(1)  490/   B0B71 : =$14                vcAR3 set $14
(1)  490/   B0B71 : =$12                vcAR4 set $12
(1)  491/   B0B71 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  491/   B0B71 : =$0                 vcAM1 set $00<<5
(1)  491/   B0B71 : =$0                 vcAM2 set $00<<5
(1)  491/   B0B71 : =$0                 vcAM3 set $00<<5
(1)  491/   B0B71 : =$0                 vcAM4 set $00<<5
(1)  492/   B0B71 : (MACRO)             	smpsVcDecayRate1    $02, $0E, $00, $0E
(1)  492/   B0B71 : =$2                 vcD1R1 set $02
(1)  492/   B0B71 : =$E                 vcD1R2 set $0E
(1)  492/   B0B71 : =$0                 vcD1R3 set $00
(1)  492/   B0B71 : =$E                 vcD1R4 set $0E
(1)  493/   B0B71 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1)  493/   B0B71 : =$1                 vcD2R1 set $01
(1)  493/   B0B71 : =$0                 vcD2R2 set $00
(1)  493/   B0B71 : =$0                 vcD2R3 set $00
(1)  493/   B0B71 : =$0                 vcD2R4 set $00
(1)  494/   B0B71 : (MACRO)             	smpsVcDecayLevel    $03, $05, $00, $04
(1)  494/   B0B71 : =$3                 vcDL1 set $03
(1)  494/   B0B71 : =$5                 vcDL2 set $05
(1)  494/   B0B71 : =$0                 vcDL3 set $00
(1)  494/   B0B71 : =$4                 vcDL4 set $04
(1)  495/   B0B71 : (MACRO)             	smpsVcReleaseRate   $07, $07, $07, $07
(1)  495/   B0B71 : =$7                 vcRR1 set $07
(1)  495/   B0B71 : =$7                 vcRR2 set $07
(1)  495/   B0B71 : =$7                 vcRR3 set $07
(1)  495/   B0B71 : =$7                 vcRR4 set $07
(1)  496/   B0B71 : (MACRO)             	smpsVcTotalLevel    $00, $1D, $18, $1C
(1)  496/   B0B71 : =$0                 vcTL1 set $00
(1)  496/   B0B71 : =$1D                vcTL2 set $1D
(1)  496/   B0B71 : =$18                vcTL3 set $18
(1)  496/   B0B71 : =$1C                vcTL4 set $1C
(1)  496/   B0B71 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  496/   B0B72 :                     ;   0     1     2     3     4     5     6     7
(1)  496/   B0B72 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  496/   B0B72 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  496/   B0B72 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  496/   B0B72 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  496/   B0B72 : =$80                vcTLMask1 set $80
(1)  496/   B0B72 :                     
(1)  496/   B0B72 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  496/   B0B72 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  496/   B0B72 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  496/   B0B72 : =$80                vcTLMask1 set $80
(1)  496/   B0B72 : =$0                 vcTL1 set vcTL1&$7F
(1)  496/   B0B72 : =$1D                vcTL2 set vcTL2&$7F
(1)  496/   B0B72 : =$18                vcTL3 set vcTL3&$7F
(1)  496/   B0B72 : =$1C                vcTL4 set vcTL4&$7F
(1)  496/   B0B72 :                     
(1)  496/   B0B72 : 5231 3151                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  496/   B0B76 : 1214 1214                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  496/   B0B7A : 0E00 0E02                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  496/   B0B7E : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  496/   B0B82 : 4707 5737                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  496/   B0B86 : 1C18 1D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  497/   B0B8A :                     
(1)  498/   B0B8A :                     ;	Voice $06
(1)  499/   B0B8A :                     ;	$3D
(1)  500/   B0B8A :                     ;	$01, $21, $50, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
(1)  501/   B0B8A :                     ;	$00, $00, $00, $00, 	$26, $28, $28, $18, 	$19, $80, $80, $80
(1)  502/   B0B8A : (MACRO)             	smpsVcAlgorithm     $05
(1)  502/   B0B8A : =$5                 vcAlgorithm set $05
(1)  503/   B0B8A : (MACRO)             	smpsVcFeedback      $07
(1)  503/   B0B8A : =$7                 vcFeedback set $07
(1)  504/   B0B8A : (MACRO)             	smpsVcUnusedBits    $00
(1)  504/   B0B8A : =$0                 vcUnusedBits set $00
(1)  504/   B0B8A : =$0                 vcD1R1Unk set 0
(1)  504/   B0B8A : =$0                 vcD1R2Unk set 0
(1)  504/   B0B8A : =$0                 vcD1R3Unk set 0
(1)  504/   B0B8A : =$0                 vcD1R4Unk set 0
(1)  505/   B0B8A : (MACRO)             	smpsVcDetune        $00, $05, $02, $00
(1)  505/   B0B8A : =$0                 vcDT1 set $00
(1)  505/   B0B8A : =$5                 vcDT2 set $05
(1)  505/   B0B8A : =$2                 vcDT3 set $02
(1)  505/   B0B8A : =$0                 vcDT4 set $00
(1)  506/   B0B8A : (MACRO)             	smpsVcCoarseFreq    $01, $00, $01, $01
(1)  506/   B0B8A : =$1                 vcCF1 set $01
(1)  506/   B0B8A : =$0                 vcCF2 set $00
(1)  506/   B0B8A : =$1                 vcCF3 set $01
(1)  506/   B0B8A : =$1                 vcCF4 set $01
(1)  507/   B0B8A : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  507/   B0B8A : =$0                 vcRS1 set $00
(1)  507/   B0B8A : =$0                 vcRS2 set $00
(1)  507/   B0B8A : =$0                 vcRS3 set $00
(1)  507/   B0B8A : =$0                 vcRS4 set $00
(1)  508/   B0B8A : (MACRO)             	smpsVcAttackRate    $0F, $14, $14, $12
(1)  508/   B0B8A : =$F                 vcAR1 set $0F
(1)  508/   B0B8A : =$14                vcAR2 set $14
(1)  508/   B0B8A : =$14                vcAR3 set $14
(1)  508/   B0B8A : =$12                vcAR4 set $12
(1)  509/   B0B8A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  509/   B0B8A : =$0                 vcAM1 set $00<<5
(1)  509/   B0B8A : =$0                 vcAM2 set $00<<5
(1)  509/   B0B8A : =$0                 vcAM3 set $00<<5
(1)  509/   B0B8A : =$0                 vcAM4 set $00<<5
(1)  510/   B0B8A : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1)  510/   B0B8A : =$5                 vcD1R1 set $05
(1)  510/   B0B8A : =$5                 vcD1R2 set $05
(1)  510/   B0B8A : =$5                 vcD1R3 set $05
(1)  510/   B0B8A : =$A                 vcD1R4 set $0A
(1)  511/   B0B8A : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  511/   B0B8A : =$0                 vcD2R1 set $00
(1)  511/   B0B8A : =$0                 vcD2R2 set $00
(1)  511/   B0B8A : =$0                 vcD2R3 set $00
(1)  511/   B0B8A : =$0                 vcD2R4 set $00
(1)  512/   B0B8A : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1)  512/   B0B8A : =$1                 vcDL1 set $01
(1)  512/   B0B8A : =$2                 vcDL2 set $02
(1)  512/   B0B8A : =$2                 vcDL3 set $02
(1)  512/   B0B8A : =$2                 vcDL4 set $02
(1)  513/   B0B8A : (MACRO)             	smpsVcReleaseRate   $08, $08, $08, $06
(1)  513/   B0B8A : =$8                 vcRR1 set $08
(1)  513/   B0B8A : =$8                 vcRR2 set $08
(1)  513/   B0B8A : =$8                 vcRR3 set $08
(1)  513/   B0B8A : =$6                 vcRR4 set $06
(1)  514/   B0B8A : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $19
(1)  514/   B0B8A : =$0                 vcTL1 set $00
(1)  514/   B0B8A : =$0                 vcTL2 set $00
(1)  514/   B0B8A : =$0                 vcTL3 set $00
(1)  514/   B0B8A : =$19                vcTL4 set $19
(1)  514/   B0B8A : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  514/   B0B8B :                     ;   0     1     2     3     4     5     6     7
(1)  514/   B0B8B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  514/   B0B8B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  514/   B0B8B : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  514/   B0B8B : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  514/   B0B8B : =$80                vcTLMask1 set $80
(1)  514/   B0B8B :                     
(1)  514/   B0B8B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  514/   B0B8B : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  514/   B0B8B : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  514/   B0B8B : =$80                vcTLMask1 set $80
(1)  514/   B0B8B : =$0                 vcTL1 set vcTL1&$7F
(1)  514/   B0B8B : =$0                 vcTL2 set vcTL2&$7F
(1)  514/   B0B8B : =$0                 vcTL3 set vcTL3&$7F
(1)  514/   B0B8B : =$19                vcTL4 set vcTL4&$7F
(1)  514/   B0B8B :                     
(1)  514/   B0B8B : 0121 5001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  514/   B0B8F : 1214 140F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  514/   B0B93 : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  514/   B0B97 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  514/   B0B9B : 2628 2818                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  514/   B0B9F : 1980 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  515/   B0BA3 :                     
(1)  516/   B0BA3 :                     ;	Voice $07
(1)  517/   B0BA3 :                     ;	$08
(1)  518/   B0BA3 :                     ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  519/   B0BA3 :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
(1)  520/   B0BA3 : (MACRO)             	smpsVcAlgorithm     $00
(1)  520/   B0BA3 : =$0                 vcAlgorithm set $00
(1)  521/   B0BA3 : (MACRO)             	smpsVcFeedback      $01
(1)  521/   B0BA3 : =$1                 vcFeedback set $01
(1)  522/   B0BA3 : (MACRO)             	smpsVcUnusedBits    $00
(1)  522/   B0BA3 : =$0                 vcUnusedBits set $00
(1)  522/   B0BA3 : =$0                 vcD1R1Unk set 0
(1)  522/   B0BA3 : =$0                 vcD1R2Unk set 0
(1)  522/   B0BA3 : =$0                 vcD1R3Unk set 0
(1)  522/   B0BA3 : =$0                 vcD1R4Unk set 0
(1)  523/   B0BA3 : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  523/   B0BA3 : =$0                 vcDT1 set $00
(1)  523/   B0BA3 : =$3                 vcDT2 set $03
(1)  523/   B0BA3 : =$7                 vcDT3 set $07
(1)  523/   B0BA3 : =$0                 vcDT4 set $00
(1)  524/   B0BA3 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $0A
(1)  524/   B0BA3 : =$0                 vcCF1 set $00
(1)  524/   B0BA3 : =$0                 vcCF2 set $00
(1)  524/   B0BA3 : =$0                 vcCF3 set $00
(1)  524/   B0BA3 : =$A                 vcCF4 set $0A
(1)  525/   B0BA3 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  525/   B0BA3 : =$1                 vcRS1 set $01
(1)  525/   B0BA3 : =$1                 vcRS2 set $01
(1)  525/   B0BA3 : =$0                 vcRS3 set $00
(1)  525/   B0BA3 : =$0                 vcRS4 set $00
(1)  526/   B0BA3 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  526/   B0BA3 : =$1F                vcAR1 set $1F
(1)  526/   B0BA3 : =$1F                vcAR2 set $1F
(1)  526/   B0BA3 : =$1F                vcAR3 set $1F
(1)  526/   B0BA3 : =$1F                vcAR4 set $1F
(1)  527/   B0BA3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  527/   B0BA3 : =$0                 vcAM1 set $00<<5
(1)  527/   B0BA3 : =$0                 vcAM2 set $00<<5
(1)  527/   B0BA3 : =$0                 vcAM3 set $00<<5
(1)  527/   B0BA3 : =$0                 vcAM4 set $00<<5
(1)  528/   B0BA3 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  528/   B0BA3 : =$A                 vcD1R1 set $0A
(1)  528/   B0BA3 : =$A                 vcD1R2 set $0A
(1)  528/   B0BA3 : =$E                 vcD1R3 set $0E
(1)  528/   B0BA3 : =$12                vcD1R4 set $12
(1)  529/   B0BA3 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  529/   B0BA3 : =$3                 vcD2R1 set $03
(1)  529/   B0BA3 : =$4                 vcD2R2 set $04
(1)  529/   B0BA3 : =$4                 vcD2R3 set $04
(1)  529/   B0BA3 : =$0                 vcD2R4 set $00
(1)  530/   B0BA3 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  530/   B0BA3 : =$2                 vcDL1 set $02
(1)  530/   B0BA3 : =$2                 vcDL2 set $02
(1)  530/   B0BA3 : =$2                 vcDL3 set $02
(1)  530/   B0BA3 : =$2                 vcDL4 set $02
(1)  531/   B0BA3 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  531/   B0BA3 : =$F                 vcRR1 set $0F
(1)  531/   B0BA3 : =$F                 vcRR2 set $0F
(1)  531/   B0BA3 : =$F                 vcRR3 set $0F
(1)  531/   B0BA3 : =$F                 vcRR4 set $0F
(1)  532/   B0BA3 : (MACRO)             	smpsVcTotalLevel    $00, $13, $2D, $24
(1)  532/   B0BA3 : =$0                 vcTL1 set $00
(1)  532/   B0BA3 : =$13                vcTL2 set $13
(1)  532/   B0BA3 : =$2D                vcTL3 set $2D
(1)  532/   B0BA3 : =$24                vcTL4 set $24
(1)  532/   B0BA3 : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  532/   B0BA4 :                     ;   0     1     2     3     4     5     6     7
(1)  532/   B0BA4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  532/   B0BA4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  532/   B0BA4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  532/   B0BA4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  532/   B0BA4 : =$80                vcTLMask1 set $80
(1)  532/   B0BA4 :                     
(1)  532/   B0BA4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  532/   B0BA4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  532/   B0BA4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  532/   B0BA4 : =$80                vcTLMask1 set $80
(1)  532/   B0BA4 : =$0                 vcTL1 set vcTL1&$7F
(1)  532/   B0BA4 : =$13                vcTL2 set vcTL2&$7F
(1)  532/   B0BA4 : =$2D                vcTL3 set vcTL3&$7F
(1)  532/   B0BA4 : =$24                vcTL4 set vcTL4&$7F
(1)  532/   B0BA4 :                     
(1)  532/   B0BA4 : 0A70 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  532/   B0BA8 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  532/   B0BAC : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  532/   B0BB0 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  532/   B0BB4 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  532/   B0BB8 : 242D 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  533/   B0BBC :                     
(1)  534/   B0BBC :                     ;	Voice $08
(1)  535/   B0BBC :                     ;	$04
(1)  536/   B0BBC :                     ;	$57, $02, $70, $50, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)  537/   B0BBC :                     ;	$06, $0A, $00, $0A, 	$00, $0F, $00, $0F, 	$1A, $80, $10, $80
(1)  538/   B0BBC : (MACRO)             	smpsVcAlgorithm     $04
(1)  538/   B0BBC : =$4                 vcAlgorithm set $04
(1)  539/   B0BBC : (MACRO)             	smpsVcFeedback      $00
(1)  539/   B0BBC : =$0                 vcFeedback set $00
(1)  540/   B0BBC : (MACRO)             	smpsVcUnusedBits    $00
(1)  540/   B0BBC : =$0                 vcUnusedBits set $00
(1)  540/   B0BBC : =$0                 vcD1R1Unk set 0
(1)  540/   B0BBC : =$0                 vcD1R2Unk set 0
(1)  540/   B0BBC : =$0                 vcD1R3Unk set 0
(1)  540/   B0BBC : =$0                 vcD1R4Unk set 0
(1)  541/   B0BBC : (MACRO)             	smpsVcDetune        $05, $07, $00, $05
(1)  541/   B0BBC : =$5                 vcDT1 set $05
(1)  541/   B0BBC : =$7                 vcDT2 set $07
(1)  541/   B0BBC : =$0                 vcDT3 set $00
(1)  541/   B0BBC : =$5                 vcDT4 set $05
(1)  542/   B0BBC : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $07
(1)  542/   B0BBC : =$0                 vcCF1 set $00
(1)  542/   B0BBC : =$0                 vcCF2 set $00
(1)  542/   B0BBC : =$2                 vcCF3 set $02
(1)  542/   B0BBC : =$7                 vcCF4 set $07
(1)  543/   B0BBC : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  543/   B0BBC : =$0                 vcRS1 set $00
(1)  543/   B0BBC : =$0                 vcRS2 set $00
(1)  543/   B0BBC : =$0                 vcRS3 set $00
(1)  543/   B0BBC : =$0                 vcRS4 set $00
(1)  544/   B0BBC : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  544/   B0BBC : =$1F                vcAR1 set $1F
(1)  544/   B0BBC : =$1F                vcAR2 set $1F
(1)  544/   B0BBC : =$1F                vcAR3 set $1F
(1)  544/   B0BBC : =$1F                vcAR4 set $1F
(1)  545/   B0BBC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  545/   B0BBC : =$0                 vcAM1 set $00<<5
(1)  545/   B0BBC : =$0                 vcAM2 set $00<<5
(1)  545/   B0BBC : =$0                 vcAM3 set $00<<5
(1)  545/   B0BBC : =$0                 vcAM4 set $00<<5
(1)  546/   B0BBC : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  546/   B0BBC : =$0                 vcD1R1 set $00
(1)  546/   B0BBC : =$0                 vcD1R2 set $00
(1)  546/   B0BBC : =$0                 vcD1R3 set $00
(1)  546/   B0BBC : =$0                 vcD1R4 set $00
(1)  547/   B0BBC : (MACRO)             	smpsVcDecayRate2    $0A, $00, $0A, $06
(1)  547/   B0BBC : =$A                 vcD2R1 set $0A
(1)  547/   B0BBC : =$0                 vcD2R2 set $00
(1)  547/   B0BBC : =$A                 vcD2R3 set $0A
(1)  547/   B0BBC : =$6                 vcD2R4 set $06
(1)  548/   B0BBC : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  548/   B0BBC : =$0                 vcDL1 set $00
(1)  548/   B0BBC : =$0                 vcDL2 set $00
(1)  548/   B0BBC : =$0                 vcDL3 set $00
(1)  548/   B0BBC : =$0                 vcDL4 set $00
(1)  549/   B0BBC : (MACRO)             	smpsVcReleaseRate   $0F, $00, $0F, $00
(1)  549/   B0BBC : =$F                 vcRR1 set $0F
(1)  549/   B0BBC : =$0                 vcRR2 set $00
(1)  549/   B0BBC : =$F                 vcRR3 set $0F
(1)  549/   B0BBC : =$0                 vcRR4 set $00
(1)  550/   B0BBC : (MACRO)             	smpsVcTotalLevel    $00, $10, $00, $1A
(1)  550/   B0BBC : =$0                 vcTL1 set $00
(1)  550/   B0BBC : =$10                vcTL2 set $10
(1)  550/   B0BBC : =$0                 vcTL3 set $00
(1)  550/   B0BBC : =$1A                vcTL4 set $1A
(1)  550/   B0BBC : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  550/   B0BBD :                     ;   0     1     2     3     4     5     6     7
(1)  550/   B0BBD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  550/   B0BBD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  550/   B0BBD : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  550/   B0BBD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  550/   B0BBD : =$80                vcTLMask1 set $80
(1)  550/   B0BBD :                     
(1)  550/   B0BBD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  550/   B0BBD : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  550/   B0BBD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  550/   B0BBD : =$80                vcTLMask1 set $80
(1)  550/   B0BBD : =$0                 vcTL1 set vcTL1&$7F
(1)  550/   B0BBD : =$10                vcTL2 set vcTL2&$7F
(1)  550/   B0BBD : =$0                 vcTL3 set vcTL3&$7F
(1)  550/   B0BBD : =$1A                vcTL4 set vcTL4&$7F
(1)  550/   B0BBD :                     
(1)  550/   B0BBD : 5702 7050                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  550/   B0BC1 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  550/   B0BC5 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  550/   B0BC9 : 060A 000A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  550/   B0BCD : 000F 000F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  550/   B0BD1 : 1A80 1080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  551/   B0BD5 :                     
(1)  552/   B0BD5 :                     
   31/   B0BD5 :                        Music_03:		include		"music-improved/83 - MCZ 2P.asm"
(1)    1/   B0BD5 :                     MCZ_2p_Header:
(1)    2/   B0BD5 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B0BD5 :                     
(1)    2/   B0BD5 : =$2                 SourceDriver set 2
(1)    2/   B0BD5 :                     
(1)    2/   B0BD5 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B0BD5 :                     
(1)    2/   B0BD5 : =$B0BD5             songStart set *
(1)    2/   B0BD5 :                     
(1)    2/   B0BD5 :                     
(1)    3/   B0BD5 : (MACRO)             	smpsHeaderVoice     MCZ_2p_Voices
(1)    3/   B0BD5 : 4990                                dc.w    z80_ptr(MCZ_2P_VOICES)
(1)    4/   B0BD7 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B0BD7 : 0603                        dc.b    $06,$03
(1)    5/   B0BD9 : (MACRO)             	smpsHeaderTempo     $01, $EC
(1)    5/   B0BD9 : 01                          dc.b    $01
(1)    5/   B0BDA :  (MACRO-2)                  convertMainTempoMod $EC
(1)    5/   B0BDA : 14                                          dc.b    s2TempotoS3($EC)
(1)    6/   B0BDB :                     
(1)    7/   B0BDB : (MACRO)             	smpsHeaderDAC       MCZ_2p_DAC
(1)    7/   B0BDB :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_DAC
(1)    7/   B0BDB : 3090                                dc.w    z80_ptr(MCZ_2P_DAC)
(1)    7/   B0BDD : 0000                                dc.w    $00
(1)    8/   B0BDF : (MACRO)             	smpsHeaderFM        MCZ_2p_FM1,	$00, $10
(1)    8/   B0BDF :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_FM1
(1)    8/   B0BDF : 798C                                dc.w    z80_ptr(MCZ_2P_FM1)
(1)    8/   B0BE1 : 0010                        dc.b    $00,$10
(1)    9/   B0BE3 : (MACRO)             	smpsHeaderFM        MCZ_2p_FM2,	$18, $0D
(1)    9/   B0BE3 :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_FM2
(1)    9/   B0BE3 : 638C                                dc.w    z80_ptr(MCZ_2P_FM2)
(1)    9/   B0BE5 : 180D                        dc.b    $18,$0D
(1)   10/   B0BE7 : (MACRO)             	smpsHeaderFM        MCZ_2p_FM3,	$00, $12
(1)   10/   B0BE7 :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_FM3
(1)   10/   B0BE7 : 4C8F                                dc.w    z80_ptr(MCZ_2P_FM3)
(1)   10/   B0BE9 : 0012                        dc.b    $00,$12
(1)   11/   B0BEB : (MACRO)             	smpsHeaderFM        MCZ_2p_FM4,	$00, $18
(1)   11/   B0BEB :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_FM4
(1)   11/   B0BEB : B28D                                dc.w    z80_ptr(MCZ_2P_FM4)
(1)   11/   B0BED : 0018                        dc.b    $00,$18
(1)   12/   B0BEF : (MACRO)             	smpsHeaderFM        MCZ_2p_FM5,	$00, $18
(1)   12/   B0BEF :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_FM5
(1)   12/   B0BEF : 7D8E                                dc.w    z80_ptr(MCZ_2P_FM5)
(1)   12/   B0BF1 : 0018                        dc.b    $00,$18
(1)   13/   B0BF3 : (MACRO)             	smpsHeaderPSG       MCZ_2p_PSG1,	$DC, $05, $00, fTone_0C
(1)   13/   B0BF3 :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_PSG1
(1)   13/   B0BF3 : EC8C                                dc.w    z80_ptr(MCZ_2P_PSG1)
(1)   13/   B0BF5 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   13/   B0BF5 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   13/   B0BF6 : 0500 0C                     dc.b    $05,$00,FTONE_0C
(1)   14/   B0BF9 : (MACRO)             	smpsHeaderPSG       MCZ_2p_PSG2,	$E8, $04, $00, fTone_04
(1)   14/   B0BF9 :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_PSG2
(1)   14/   B0BF9 : C08F                                dc.w    z80_ptr(MCZ_2P_PSG2)
(1)   14/   B0BFB :  (MACRO-2)                  PSGPitchConvert $E8
(1)   14/   B0BFB : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   14/   B0BFC : 0400 04                     dc.b    $04,$00,FTONE_04
(1)   15/   B0BFF : (MACRO)             	smpsHeaderPSG       MCZ_2p_PSG3,	$DC, $04, $00, fTone_0C
(1)   15/   B0BFF :  (MACRO-2)                  CheckedChannelPointer MCZ_2P_PSG3
(1)   15/   B0BFF : 4E8D                                dc.w    z80_ptr(MCZ_2P_PSG3)
(1)   15/   B0C01 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/   B0C01 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   15/   B0C02 : 0400 0C                     dc.b    $04,$00,FTONE_0C
(1)   16/   B0C05 :                     
(1)   17/   B0C05 :                     MCZ_2p_Call01:
(1)   18/   B0C05 : B808 BABC           	dc.b	nG4, $08, nA4, nB4
(1)   19/   B0C09 : (MACRO)             	smpsReturn
(1)   19/   B0C09 : F9                                  dc.b    $F9
(1)   20/   B0C0A :                     
(1)   21/   B0C0A :                     MCZ_2p_Call02:
(1)   22/   B0C0A : B630 E730 E7B6 8018 	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, nF4, nRst, $18, nG4, $08, nA4, nB4
            B0C12 : B808 BABC         
(1)   23/   B0C16 : B630 E730 E730 E724 	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $24
(1)   24/   B0C1E : (MACRO)             	smpsReturn
(1)   24/   B0C1E : F9                                  dc.b    $F9
(1)   25/   B0C1F :                     
(1)   26/   B0C1F :                     MCZ_2p_Call00:
(1)   27/   B0C1F : 8030 80BC 06BD BCB8 	dc.b	nRst, $30, nRst, nB4, $06, nC5, nB4, nG4, nA4, nF4, $0C, nG4
            B0C27 : BAB6 0CB8         
(1)   28/   B0C2B : B3B3 06B6 0CB8      	dc.b	nD4, nD4, $06, nF4, $0C, nG4
(1)   29/   B0C31 : (MACRO)             	smpsReturn
(1)   29/   B0C31 : F9                                  dc.b    $F9
(1)   30/   B0C32 :                     
(1)   31/   B0C32 :                     MCZ_2p_Call03:
(1)   32/   B0C32 : BC30 E730 BD30 E724 	dc.b	nB4, $30, smpsNoAttack, $30, nC5, $30, smpsNoAttack, $24, nB4, $06, nC5, nD5
            B0C3A : BC06 BDBF         
(1)   33/   B0C3E : 30E7 30BC 30E7 30BC 	dc.b	$30, smpsNoAttack, $30, nB4, $30, smpsNoAttack, $30, nB4, $30, smpsNoAttack, $30, nC5
            B0C46 : 30E7 30BD         
(1)   34/   B0C4A : 30E7 24BC 06BD BF30 	dc.b	$30, smpsNoAttack, $24, nB4, $06, nC5, nD5, $30, smpsNoAttack, $30, nF5, $30
            B0C52 : E730 C230         
(1)   35/   B0C56 : E730 C424 C2C1 18C2 	dc.b	smpsNoAttack, $30, nG5, $24, nF5, nE5, $18, nF5, $24, nE5, nC5, $18
            B0C5E : 24C1 BD18         
(1)   36/   B0C62 : (MACRO)             	smpsReturn
(1)   36/   B0C62 : F9                                  dc.b    $F9
(1)   37/   B0C63 :                     
(1)   38/   B0C63 :                     ; FM2 Data
(1)   39/   B0C63 :                     MCZ_2p_FM2:
(1)   40/   B0C63 : 8018                	dc.b	nRst, $18
(1)   41/   B0C65 : (MACRO)             	smpsSetvoice        $00
(1)   41/   B0C65 :  (MACRO-2)                  smpsFMvoice $00
(1)   41/   B0C65 : EF00                                dc.b    $EF,$00
(1)   42/   B0C67 :                     
(1)   43/   B0C67 :                     MCZ_2p_Jump05:
(1)   44/   B0C67 : 940C 8F92 8F06 9405 	dc.b	nG1, $0C, nD1, nF1, nD1, $06, nG1, $05, nG1, $07, $06, nD1
            B0C6F : 9407 068F         
(1)   45/   B0C73 : 0C92 8F             	dc.b	$0C, nF1, nD1
(1)   46/   B0C76 : (MACRO)             	smpsJump            MCZ_2p_Jump05
(1)   46/   B0C76 : F6                          dc.b    $F6
(1)   46/   B0C77 : 678C                                dc.w    z80_ptr(MCZ_2P_JUMP05)
(1)   47/   B0C79 :                     
(1)   48/   B0C79 :                     ; FM1 Data
(1)   49/   B0C79 :                     MCZ_2p_FM1:
(1)   50/   B0C79 : (MACRO)             	smpsSetvoice        $02
(1)   50/   B0C79 :  (MACRO-2)                  smpsFMvoice $02
(1)   50/   B0C79 : EF02                                dc.b    $EF,$02
(1)   51/   B0C7B : (MACRO)             	smpsAlterVol        $12
(1)   51/   B0C7B : E612                        dc.b    $E6,$12
(1)   52/   B0C7D : (MACRO)             	smpsCall            MCZ_2p_Call01
(1)   52/   B0C7D : F8                          dc.b    $F8
(1)   52/   B0C7E : 058C                                dc.w    z80_ptr(MCZ_2P_CALL01)
(1)   53/   B0C80 :                     
(1)   54/   B0C80 :                     MCZ_2p_Jump04:
(1)   55/   B0C80 : (MACRO)             	smpsCall            MCZ_2p_Call02
(1)   55/   B0C80 : F8                          dc.b    $F8
(1)   55/   B0C81 : 0A8C                                dc.w    z80_ptr(MCZ_2P_CALL02)
(1)   56/   B0C83 : (MACRO)             	smpsModSet          $24, $01, $03, $04
(1)   56/   B0C83 : F0                          dc.b    $F0
(1)   56/   B0C84 : 2501 0305                           dc.b    $24+1,$01,$03,(($04+1) * $01) & $FF
(1)   56/   B0C88 :                             ;dc.b   $01,$03,$04
(1)   57/   B0C88 : 800C                	dc.b	nRst, $0C
(1)   58/   B0C8A : (MACRO)             	smpsAlterVol        $E6
(1)   58/   B0C8A : E6E6                        dc.b    $E6,$E6
(1)   59/   B0C8C : (MACRO)             	smpsSetvoice        $03
(1)   59/   B0C8C :  (MACRO-2)                  smpsFMvoice $03
(1)   59/   B0C8C : EF03                                dc.b    $EF,$03
(1)   60/   B0C8E : (MACRO)             	smpsCall            MCZ_2p_Call03
(1)   60/   B0C8E : F8                          dc.b    $F8
(1)   60/   B0C8F : 328C                                dc.w    z80_ptr(MCZ_2P_CALL03)
(1)   61/   B0C91 : 24BC BF18 E730 E730 	dc.b	$24, nB4, nD5, $18, smpsNoAttack, $30, smpsNoAttack, $30, nB5, $24, nA5, nG5
            B0C99 : C824 C6C4         
(1)   62/   B0C9D : 18C6 24C4 C118 C1C2 	dc.b	$18, nA5, $24, nG5, nE5, $18, nE5, nF5, $0C, nD5, $30, smpsNoAttack
            B0CA5 : 0CBF 30E7         
(1)   63/   B0CA9 : 0CE7 30E7 2480 0C80 	dc.b	$0C, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C, nRst, $30, nRst, nRst, nRst
            B0CB1 : 3080 8080         
(1)   64/   B0CB5 : BD24 C1C4 18C2 24BF 	dc.b	nC5, $24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB4, nC5
            B0CBD : BC18 BCBD         
(1)   65/   B0CC1 : 0CBC 30E7 0CE7 30E7 	dc.b	$0C, nB4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18, nC5
            B0CC9 : 1880 18BD         
(1)   66/   B0CCD : 24C1 C418 C224 BFBC 	dc.b	$24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB5, $30, smpsNoAttack
            B0CD5 : 18C8 30E7         
(1)   67/   B0CD9 : 30E7 30E7 0C80 0C   	dc.b	$30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $0C
(1)   68/   B0CE0 : (MACRO)             	smpsModOff
(1)   68/   B0CE0 : FA                                  dc.b    $FA
(1)   69/   B0CE1 : (MACRO)             	smpsAlterVol        $1A
(1)   69/   B0CE1 : E61A                        dc.b    $E6,$1A
(1)   70/   B0CE3 : (MACRO)             	smpsSetvoice        $02
(1)   70/   B0CE3 :  (MACRO-2)                  smpsFMvoice $02
(1)   70/   B0CE3 : EF02                                dc.b    $EF,$02
(1)   71/   B0CE5 : B508 B6B8           	dc.b	nE4, $08, nF4, nG4
(1)   72/   B0CE9 : (MACRO)             	smpsJump            MCZ_2p_Jump04
(1)   72/   B0CE9 : F6                          dc.b    $F6
(1)   72/   B0CEA : 808C                                dc.w    z80_ptr(MCZ_2P_JUMP04)
(1)   73/   B0CEC :                     
(1)   74/   B0CEC :                     ; PSG1 Data
(1)   75/   B0CEC :                     MCZ_2p_PSG1:
(1)   76/   B0CEC : (MACRO)             	smpsAlterNote       $02
(1)   76/   B0CEC :  (MACRO-2)                  smpsDetune      $02
(1)   76/   B0CEC : E102                        dc.b    $E1,$02
(1)   77/   B0CEE : 801B                	dc.b	nRst, $1B
(1)   78/   B0CF0 :                     
(1)   79/   B0CF0 :                     MCZ_2p_Jump08:
(1)   80/   B0CF0 : 8030 8080 8080 8080 	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst
            B0CF8 : 80               
(1)   81/   B0CF9 : (MACRO)             	smpsCall            MCZ_2p_Call03
(1)   81/   B0CF9 : F8                          dc.b    $F8
(1)   81/   B0CFA : 328C                                dc.w    z80_ptr(MCZ_2P_CALL03)
(1)   82/   B0CFC : 24BC BF18 E730 E730 	dc.b	$24, nB4, nD5, $18, smpsNoAttack, $30, smpsNoAttack, $30, nB5, $24, nA5, nG5
            B0D04 : C824 C6C4         
(1)   83/   B0D08 : 18C6 24C4 C118 C1C2 	dc.b	$18, nA5, $24, nG5, nE5, $18, nE5, nF5, $0C, nD5, $30, smpsNoAttack
            B0D10 : 0CBF 30E7         
(1)   84/   B0D14 : 0CE7 30E7 2480 0C80 	dc.b	$0C, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C, nRst, $30, nRst, nRst, nRst
            B0D1C : 3080 8080         
(1)   85/   B0D20 : BD24 C1C4 18C2 24BF 	dc.b	nC5, $24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB4, nC5
            B0D28 : BC18 BCBD         
(1)   86/   B0D2C : 0CBC 30E7 0CE7 30E7 	dc.b	$0C, nB4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18, nC5
            B0D34 : 1880 18BD         
(1)   87/   B0D38 : 24C1 C418 C224 BFBC 	dc.b	$24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB5, $30, smpsNoAttack
            B0D40 : 18C8 30E7         
(1)   88/   B0D44 : 30E7 30E7 0C80 24   	dc.b	$30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $24
(1)   89/   B0D4B : (MACRO)             	smpsJump            MCZ_2p_Jump08
(1)   89/   B0D4B : F6                          dc.b    $F6
(1)   89/   B0D4C : F08C                                dc.w    z80_ptr(MCZ_2P_JUMP08)
(1)   90/   B0D4E :                     
(1)   91/   B0D4E :                     ; PSG3 Data
(1)   92/   B0D4E :                     MCZ_2p_PSG3:
(1)   93/   B0D4E : 8018                	dc.b	nRst, $18
(1)   94/   B0D50 :                     
(1)   95/   B0D50 :                     MCZ_2p_Jump07:
(1)   96/   B0D50 : 8030 8080 8080 8080 	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst
            B0D58 : 80               
(1)   97/   B0D59 : (MACRO)             	smpsCall            MCZ_2p_Call03
(1)   97/   B0D59 : F8                          dc.b    $F8
(1)   97/   B0D5A : 328C                                dc.w    z80_ptr(MCZ_2P_CALL03)
(1)   98/   B0D5C : 24BC BF18 E730 E730 	dc.b	$24, nB4, nD5, $18, smpsNoAttack, $30, smpsNoAttack, $30
(1)   99/   B0D64 : (MACRO)             	smpsPSGAlterVol     $FE
(1)   99/   B0D64 : ECFE                        dc.b    $EC,$FE
(1)  100/   B0D66 : C424 C2C1 18C2 24C1 	dc.b	nG5, $24, nF5, nE5, $18, nF5, $24, nE5, nC5, $18, nC5, nD5
            B0D6E : BD18 BDBF         
(1)  101/   B0D72 : 0CBC 30E7 0CE7 30E7 	dc.b	$0C, nB4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C, nRst
            B0D7A : 2480 0C80         
(1)  102/   B0D7E : 3080 8080 BA24 BDC1 	dc.b	$30, nRst, nRst, nRst, nA4, $24, nC5, nE5, $18, nD5, $24, nB4
            B0D86 : 18BF 24BC         
(1)  103/   B0D8A : B818 B6B3 0CB8 30E7 	dc.b	nG4, $18, nF4, nD4, $0C, nG4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack
            B0D92 : 0CE7 30E7         
(1)  104/   B0D96 : 1880 18BA 24BD C118 	dc.b	$18, nRst, $18, nA4, $24, nC5, nE5, $18, nD5, $24, nB4, nG4
            B0D9E : BF24 BCB8         
(1)  105/   B0DA2 : 18C4 30E7 30E7 30E7 	dc.b	$18, nG5, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $24
            B0DAA : 0C80 24            
(1)  106/   B0DAD : (MACRO)             	smpsPSGAlterVol     $02
(1)  106/   B0DAD : EC02                        dc.b    $EC,$02
(1)  107/   B0DAF : (MACRO)             	smpsJump            MCZ_2p_Jump07
(1)  107/   B0DAF : F6                          dc.b    $F6
(1)  107/   B0DB0 : 508D                                dc.w    z80_ptr(MCZ_2P_JUMP07)
(1)  108/   B0DB2 :                     
(1)  109/   B0DB2 :                     ; FM4 Data
(1)  110/   B0DB2 :                     MCZ_2p_FM4:
(1)  111/   B0DB2 : (MACRO)             	smpsSetvoice        $02
(1)  111/   B0DB2 :  (MACRO-2)                  smpsFMvoice $02
(1)  111/   B0DB2 : EF02                                dc.b    $EF,$02
(1)  112/   B0DB4 : (MACRO)             	smpsAlterNote       $02
(1)  112/   B0DB4 :  (MACRO-2)                  smpsDetune      $02
(1)  112/   B0DB4 : E102                        dc.b    $E1,$02
(1)  113/   B0DB6 : (MACRO)             	smpsPan             panLeft, $00
(1)  113/   B0DB6 : =$0                 panNone set $00
(1)  113/   B0DB6 : =$40                panRight set $40
(1)  113/   B0DB6 : =$80                panLeft set $80
(1)  113/   B0DB6 : =$C0                panCentre set $C0
(1)  113/   B0DB6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  113/   B0DB6 : E080                        dc.b $E0,PANLEFT+$00
(1)  114/   B0DB8 : (MACRO)             	smpsCall            MCZ_2p_Call01
(1)  114/   B0DB8 : F8                          dc.b    $F8
(1)  114/   B0DB9 : 058C                                dc.w    z80_ptr(MCZ_2P_CALL01)
(1)  115/   B0DBB :                     
(1)  116/   B0DBB :                     MCZ_2p_Jump03:
(1)  117/   B0DBB : (MACRO)             	smpsCall            MCZ_2p_Call02
(1)  117/   B0DBB : F8                          dc.b    $F8
(1)  117/   B0DBC : 0A8C                                dc.w    z80_ptr(MCZ_2P_CALL02)
(1)  118/   B0DBE : (MACRO)             	smpsAlterNote       $00
(1)  118/   B0DBE :  (MACRO-2)                  smpsDetune      $00
(1)  118/   B0DBE : E100                        dc.b    $E1,$00
(1)  119/   B0DC0 : (MACRO)             	smpsSetvoice        $01
(1)  119/   B0DC0 :  (MACRO-2)                  smpsFMvoice $01
(1)  119/   B0DC0 : EF01                                dc.b    $EF,$01
(1)  120/   B0DC2 : (MACRO)             	smpsAlterVol        $F2
(1)  120/   B0DC2 : E6F2                        dc.b    $E6,$F2
(1)  121/   B0DC4 : (MACRO)             	smpsAlterPitch      $F4
(1)  121/   B0DC4 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  121/   B0DC4 : FBF4                                dc.b    $FB,$F4
(1)  122/   B0DC6 : AE0C B006 8030 802A 	dc.b	nA3, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
            B0DCE : 8030 8024         
(1)  123/   B0DD2 : B10C B006 8030 802A 	dc.b	nC4, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
            B0DDA : 8030 8024         
(1)  124/   B0DDE : AE0C B006 8030 802A 	dc.b	nA3, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
            B0DE6 : 8030 8024         
(1)  125/   B0DEA : B10C B006 8030 802A 	dc.b	nC4, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nRst
            B0DF2 : 8030 8080         
(1)  126/   B0DF6 : 80B8 24B6 B518 B624 	dc.b	nRst, nG4, $24, nF4, nE4, $18, nF4, $24, nE4, nC4, $18, $24
            B0DFE : B5B1 1824         
(1)  127/   B0E02 : B0B3 18E7 30E7 30BC 	dc.b	nB3, nD4, $18, smpsNoAttack, $30, smpsNoAttack, $30, nB4, $24, nA4, nG4, $18
            B0E0A : 24BA B818         
(1)  128/   B0E0E : BA24 B8B5 18B5 B60C 	dc.b	nA4, $24, nG4, nE4, $18, nE4, nF4, $0C, nD4, $24
            B0E16 : B324               
(1)  129/   B0E18 : (MACRO)             	smpsAlterVol        $0E
(1)  129/   B0E18 : E60E                        dc.b    $E6,$0E
(1)  130/   B0E1A : (MACRO)             	smpsAlterPitch      $0C
(1)  130/   B0E1A :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  130/   B0E1A : FB0C                                dc.b    $FB,$0C
(1)  131/   B0E1C : (MACRO)             	smpsSetvoice        $02
(1)  131/   B0E1C :  (MACRO-2)                  smpsFMvoice $02
(1)  131/   B0E1C : EF02                                dc.b    $EF,$02
(1)  132/   B0E1E : (MACRO)             	smpsCall            MCZ_2p_Call01
(1)  132/   B0E1E : F8                          dc.b    $F8
(1)  132/   B0E1F : 058C                                dc.w    z80_ptr(MCZ_2P_CALL01)
(1)  133/   B0E21 : B630 E730 E730 E718 	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18
            B0E29 : 8018               
(1)  134/   B0E2B : (MACRO)             	smpsAlterVol        $F2
(1)  134/   B0E2B : E6F2                        dc.b    $E6,$F2
(1)  135/   B0E2D : (MACRO)             	smpsAlterPitch      $F4
(1)  135/   B0E2D :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  135/   B0E2D : FBF4                                dc.b    $FB,$F4
(1)  136/   B0E2F : (MACRO)             	smpsSetvoice        $01
(1)  136/   B0E2F :  (MACRO-2)                  smpsFMvoice $01
(1)  136/   B0E2F : EF01                                dc.b    $EF,$01
(1)  137/   B0E31 : 8030 8080 8024 B806 	dc.b	nRst, $30, nRst, nRst, nRst, $24, nG4, $06, nF4, nG4, $0C, nG4
            B0E39 : B6B8 0CB8         
(1)  138/   B0E3D : B606 B80C 0680 2480 	dc.b	nF4, $06, nG4, $0C, $06, nRst, $24, nRst, $06, nF4, nG4, $0C
            B0E45 : 06B6 B80C         
(1)  139/   B0E49 : B8B6 06B8 0C06 8030 	dc.b	nG4, nF4, $06, nG4, $0C, $06, nRst, $30, nRst, $30, nRst, nRst
            B0E51 : 8030 8080         
(1)  140/   B0E55 : 8024 8006 B6B8 0CB8 	dc.b	nRst, $24, nRst, $06, nF4, nG4, $0C, nG4, nF4, $06, nG4, $0C
            B0E5D : B606 B80C         
(1)  141/   B0E61 : 0680 2480 06B6 B80C 	dc.b	$06, nRst, $24, nRst, $06, nF4, nG4, $0C, nG4, nF4, $06, nG4
            B0E69 : B8B6 06B8         
(1)  142/   B0E6D : 0C06 8018           	dc.b	$0C, $06, nRst, $18
(1)  143/   B0E71 : (MACRO)             	smpsAlterVol        $0E
(1)  143/   B0E71 : E60E                        dc.b    $E6,$0E
(1)  144/   B0E73 : (MACRO)             	smpsAlterPitch      $0C
(1)  144/   B0E73 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  144/   B0E73 : FB0C                                dc.b    $FB,$0C
(1)  145/   B0E75 : (MACRO)             	smpsSetvoice        $02
(1)  145/   B0E75 :  (MACRO-2)                  smpsFMvoice $02
(1)  145/   B0E75 : EF02                                dc.b    $EF,$02
(1)  146/   B0E77 : (MACRO)             	smpsCall            MCZ_2p_Call01
(1)  146/   B0E77 : F8                          dc.b    $F8
(1)  146/   B0E78 : 058C                                dc.w    z80_ptr(MCZ_2P_CALL01)
(1)  147/   B0E7A : (MACRO)             	smpsJump            MCZ_2p_Jump03
(1)  147/   B0E7A : F6                          dc.b    $F6
(1)  147/   B0E7B : BB8D                                dc.w    z80_ptr(MCZ_2P_JUMP03)
(1)  148/   B0E7D :                     
(1)  149/   B0E7D :                     ; FM5 Data
(1)  150/   B0E7D :                     MCZ_2p_FM5:
(1)  151/   B0E7D : 8001                	dc.b	nRst, $01
(1)  152/   B0E7F : (MACRO)             	smpsSetvoice        $02
(1)  152/   B0E7F :  (MACRO-2)                  smpsFMvoice $02
(1)  152/   B0E7F : EF02                                dc.b    $EF,$02
(1)  153/   B0E81 : (MACRO)             	smpsAlterNote       $FE
(1)  153/   B0E81 :  (MACRO-2)                  smpsDetune      $FE
(1)  153/   B0E81 : E1FE                        dc.b    $E1,$FE
(1)  154/   B0E83 : (MACRO)             	smpsPan             panRight, $00
(1)  154/   B0E83 : =$0                 panNone set $00
(1)  154/   B0E83 : =$40                panRight set $40
(1)  154/   B0E83 : =$80                panLeft set $80
(1)  154/   B0E83 : =$C0                panCentre set $C0
(1)  154/   B0E83 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  154/   B0E83 : E040                        dc.b $E0,PANRIGHT+$00
(1)  155/   B0E85 : (MACRO)             	smpsCall            MCZ_2p_Call01
(1)  155/   B0E85 : F8                          dc.b    $F8
(1)  155/   B0E86 : 058C                                dc.w    z80_ptr(MCZ_2P_CALL01)
(1)  156/   B0E88 :                     
(1)  157/   B0E88 :                     MCZ_2p_Jump02:
(1)  158/   B0E88 : (MACRO)             	smpsCall            MCZ_2p_Call02
(1)  158/   B0E88 : F8                          dc.b    $F8
(1)  158/   B0E89 : 0A8C                                dc.w    z80_ptr(MCZ_2P_CALL02)
(1)  159/   B0E8B : (MACRO)             	smpsAlterNote       $FA
(1)  159/   B0E8B :  (MACRO-2)                  smpsDetune      $FA
(1)  159/   B0E8B : E1FA                        dc.b    $E1,$FA
(1)  160/   B0E8D : (MACRO)             	smpsAlterVol        $F2
(1)  160/   B0E8D : E6F2                        dc.b    $E6,$F2
(1)  161/   B0E8F : (MACRO)             	smpsAlterPitch      $F4
(1)  161/   B0E8F :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  161/   B0E8F : FBF4                                dc.b    $FB,$F4
(1)  162/   B0E91 : (MACRO)             	smpsSetvoice        $01
(1)  162/   B0E91 :  (MACRO-2)                  smpsFMvoice $01
(1)  162/   B0E91 : EF01                                dc.b    $EF,$01
(1)  163/   B0E93 : AA0B AC06 8030 802A 	dc.b	nF3, $0B, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
            B0E9B : 8030 8024         
(1)  164/   B0E9F : AE0C AC06 8030 802A 	dc.b	nA3, $0C, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
            B0EA7 : 8030 8024         
(1)  165/   B0EAB : AA0C AC06 8030 802A 	dc.b	nF3, $0C, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
            B0EB3 : 8030 8024         
(1)  166/   B0EB7 : AE0C AC06 8030 802A 	dc.b	nA3, $0C, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nRst
            B0EBF : 8030 8080         
(1)  167/   B0EC3 : 80B8 24B6 B518 B624 	dc.b	nRst, nG4, $24, nF4, nE4, $18, nF4, $24, nE4, nC4, $18, $24
            B0ECB : B5B1 1824         
(1)  168/   B0ECF : B0B3 18E7 30E7 30B8 	dc.b	nB3, nD4, $18, smpsNoAttack, $30, smpsNoAttack, $30, nG4, $24, nF4, nE4, $18
            B0ED7 : 24B6 B518         
(1)  169/   B0EDB : B624 B5B1 18B1 B30C 	dc.b	nF4, $24, nE4, nC4, $18, nC4, nD4, $0C, nB3, $24
            B0EE3 : B024               
(1)  170/   B0EE5 : (MACRO)             	smpsAlterVol        $0E
(1)  170/   B0EE5 : E60E                        dc.b    $E6,$0E
(1)  171/   B0EE7 : (MACRO)             	smpsAlterPitch      $0C
(1)  171/   B0EE7 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  171/   B0EE7 : FB0C                                dc.b    $FB,$0C
(1)  172/   B0EE9 : (MACRO)             	smpsSetvoice        $02
(1)  172/   B0EE9 :  (MACRO-2)                  smpsFMvoice $02
(1)  172/   B0EE9 : EF02                                dc.b    $EF,$02
(1)  173/   B0EEB : (MACRO)             	smpsCall            MCZ_2p_Call01
(1)  173/   B0EEB : F8                          dc.b    $F8
(1)  173/   B0EEC : 058C                                dc.w    z80_ptr(MCZ_2P_CALL01)
(1)  174/   B0EEE : B630 E730 E730 E718 	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18
            B0EF6 : 8018               
(1)  175/   B0EF8 : (MACRO)             	smpsAlterVol        $F2
(1)  175/   B0EF8 : E6F2                        dc.b    $E6,$F2
(1)  176/   B0EFA : (MACRO)             	smpsAlterPitch      $F4
(1)  176/   B0EFA :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  176/   B0EFA : FBF4                                dc.b    $FB,$F4
(1)  177/   B0EFC : (MACRO)             	smpsSetvoice        $01
(1)  177/   B0EFC :  (MACRO-2)                  smpsFMvoice $01
(1)  177/   B0EFC : EF01                                dc.b    $EF,$01
(1)  178/   B0EFE : 8030 8030 8030 8024 	dc.b	nRst, $30, nRst, $30, nRst, $30, nRst, $24, nD4, $06, nC4, nD4
            B0F06 : B306 B1B3         
(1)  179/   B0F0A : 0CB3 B106 B30C 0680 	dc.b	$0C, nD4, nC4, $06, nD4, $0C, $06, nRst, $24, nRst, $06, nC4
            B0F12 : 2480 06B1         
(1)  180/   B0F16 : B30C B3B1 06B3 0C06 	dc.b	nD4, $0C, nD4, nC4, $06, nD4, $0C, $06, nRst, $30, nRst, $30
            B0F1E : 8030 8030         
(1)  181/   B0F22 : 8080 8024 8006 B1B3 	dc.b	nRst, nRst, nRst, $24, nRst, $06, nC4, nD4, $0C, nD4, nC4, $06
            B0F2A : 0CB3 B106         
(1)  182/   B0F2E : B30C 0680 2480 06B1 	dc.b	nD4, $0C, $06, nRst, $24, nRst, $06, nC4, nD4, $0C, nD4, nD4
            B0F36 : B30C B3B3         
(1)  183/   B0F3A : 06B1 0C06 8019      	dc.b	$06, nC4, $0C, $06, nRst, $19
(1)  184/   B0F40 : (MACRO)             	smpsAlterVol        $0E
(1)  184/   B0F40 : E60E                        dc.b    $E6,$0E
(1)  185/   B0F42 : (MACRO)             	smpsAlterPitch      $0C
(1)  185/   B0F42 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  185/   B0F42 : FB0C                                dc.b    $FB,$0C
(1)  186/   B0F44 : (MACRO)             	smpsSetvoice        $02
(1)  186/   B0F44 :  (MACRO-2)                  smpsFMvoice $02
(1)  186/   B0F44 : EF02                                dc.b    $EF,$02
(1)  187/   B0F46 : (MACRO)             	smpsCall            MCZ_2p_Call01
(1)  187/   B0F46 : F8                          dc.b    $F8
(1)  187/   B0F47 : 058C                                dc.w    z80_ptr(MCZ_2P_CALL01)
(1)  188/   B0F49 : (MACRO)             	smpsJump            MCZ_2p_Jump02
(1)  188/   B0F49 : F6                          dc.b    $F6
(1)  188/   B0F4A : 888E                                dc.w    z80_ptr(MCZ_2P_JUMP02)
(1)  189/   B0F4C :                     
(1)  190/   B0F4C :                     ; FM3 Data
(1)  191/   B0F4C :                     MCZ_2p_FM3:
(1)  192/   B0F4C : (MACRO)             	smpsSetvoice        $04
(1)  192/   B0F4C :  (MACRO-2)                  smpsFMvoice $04
(1)  192/   B0F4C : EF04                                dc.b    $EF,$04
(1)  193/   B0F4E : 8018                	dc.b	nRst, $18
(1)  194/   B0F50 :                     
(1)  195/   B0F50 :                     MCZ_2p_Jump01:
(1)  196/   B0F50 : (MACRO)             	smpsAlterVol        $FC
(1)  196/   B0F50 : E6FC                        dc.b    $E6,$FC
(1)  197/   B0F52 : (MACRO)             	smpsCall            MCZ_2p_Call00
(1)  197/   B0F52 : F8                          dc.b    $F8
(1)  197/   B0F53 : 1F8C                                dc.w    z80_ptr(MCZ_2P_CALL00)
(1)  198/   B0F55 : (MACRO)             	smpsCall            MCZ_2p_Call00
(1)  198/   B0F55 : F8                          dc.b    $F8
(1)  198/   B0F56 : 1F8C                                dc.w    z80_ptr(MCZ_2P_CALL00)
(1)  199/   B0F58 : (MACRO)             	smpsAlterVol        $04
(1)  199/   B0F58 : E604                        dc.b    $E6,$04
(1)  200/   B0F5A :                     
(1)  201/   B0F5A :                     MCZ_2p_Loop00:
(1)  202/   B0F5A : BC0C BCBC 0680 12BA 	dc.b	nB4, $0C, nB4, nB4, $06, nRst, $12, nA4, $0C, nA4, nB4, $06
            B0F62 : 0CBA BC06         
(1)  203/   B0F66 : 8012 800C 8006 BC0C 	dc.b	nRst, $12, nRst, $0C, nRst, $06, nB4, $0C, nB4, nB4, $06, nA4
            B0F6E : BCBC 06BA         
(1)  204/   B0F72 : 0CBD BC06 8012      	dc.b	$0C, nC5, nB4, $06, nRst, $12
(1)  205/   B0F78 : (MACRO)             	smpsLoop            $00, $09, MCZ_2p_Loop00
(1)  205/   B0F78 : F7                          dc.b    $F7
(1)  205/   B0F79 : 0009                        dc.b    $00,$09
(1)  205/   B0F7B : 5A8F                                dc.w    z80_ptr(MCZ_2P_LOOP00)
(1)  206/   B0F7D :                     
(1)  207/   B0F7D :                     MCZ_2p_Loop01:
(1)  208/   B0F7D : BA0C BABA 0680 12B8 	dc.b	nA4, $0C, nA4, nA4, $06, nRst, $12, nG4, $0C, nG4, nA4, $06
            B0F85 : 0CB8 BA06         
(1)  209/   B0F89 : 8012 B80C 06B8 0CB8 	dc.b	nRst, $12, nG4, $0C, $06, nG4, $0C, nG4, nG4, $06, nG4, $0C
            B0F91 : B806 B80C         
(1)  210/   B0F95 : B5B8 0680 12BC 0CBC 	dc.b	nE4, nG4, $06, nRst, $12, nB4, $0C, nB4, nB4, $06, nRst, $12
            B0F9D : BC06 8012         
(1)  211/   B0FA1 : BA0C BABC 0680 1280 	dc.b	nA4, $0C, nA4, nB4, $06, nRst, $12, nRst, $0C, nRst, $06, nB4
            B0FA9 : 0C80 06BC         
(1)  212/   B0FAD : 0CBC BC06 BA0C BDBC 	dc.b	$0C, nB4, nB4, $06, nA4, $0C, nC5, nB4, $06, nRst, $12
            B0FB5 : 0680 12            
(1)  213/   B0FB8 : (MACRO)             	smpsLoop            $00, $02, MCZ_2p_Loop01
(1)  213/   B0FB8 : F7                          dc.b    $F7
(1)  213/   B0FB9 : 0002                        dc.b    $00,$02
(1)  213/   B0FBB : 7D8F                                dc.w    z80_ptr(MCZ_2P_LOOP01)
(1)  214/   B0FBD : (MACRO)             	smpsJump            MCZ_2p_Jump01
(1)  214/   B0FBD : F6                          dc.b    $F6
(1)  214/   B0FBE : 508F                                dc.w    z80_ptr(MCZ_2P_JUMP01)
(1)  215/   B0FC0 :                     
(1)  216/   B0FC0 :                     ; PSG2 Data
(1)  217/   B0FC0 :                     MCZ_2p_PSG2:
(1)  218/   B0FC0 : (MACRO)             	smpsNoteFill        $08
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  218/   B0FC0 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  218/   B0FC0 : E808                                dc.b    $E8,$08
(1)  219/   B0FC2 : 8018                	dc.b	nRst, $18
(1)  220/   B0FC4 :                     
(1)  221/   B0FC4 :                     MCZ_2p_Jump06:
(1)  222/   B0FC4 : (MACRO)             	smpsCall            MCZ_2p_Call00
(1)  222/   B0FC4 : F8                          dc.b    $F8
(1)  222/   B0FC5 : 1F8C                                dc.w    z80_ptr(MCZ_2P_CALL00)
(1)  223/   B0FC7 : (MACRO)             	smpsCall            MCZ_2p_Call00
(1)  223/   B0FC7 : F8                          dc.b    $F8
(1)  223/   B0FC8 : 1F8C                                dc.w    z80_ptr(MCZ_2P_CALL00)
(1)  224/   B0FCA :                     
(1)  225/   B0FCA :                     MCZ_2p_Loop02:
(1)  226/   B0FCA : B80C B8B8 0680 12B6 	dc.b	nG4, $0C, nG4, nG4, $06, nRst, $12, nF4, $0C, nF4, nG4, $06
            B0FD2 : 0CB6 B806         
(1)  227/   B0FD6 : 8012 800C 8006 B80C 	dc.b	nRst, $12, nRst, $0C, nRst, $06, nG4, $0C, nG4, nG4, $06, nF4
            B0FDE : B8B8 06B6         
(1)  228/   B0FE2 : 0CBA B806 8012      	dc.b	$0C, nA4, nG4, $06, nRst, $12
(1)  229/   B0FE8 : (MACRO)             	smpsLoop            $00, $09, MCZ_2p_Loop02
(1)  229/   B0FE8 : F7                          dc.b    $F7
(1)  229/   B0FE9 : 0009                        dc.b    $00,$09
(1)  229/   B0FEB : CA8F                                dc.w    z80_ptr(MCZ_2P_LOOP02)
(1)  230/   B0FED :                     
(1)  231/   B0FED :                     MCZ_2p_Loop03:
(1)  232/   B0FED : B60C B6B6 0680 12B5 	dc.b	nF4, $0C, nF4, nF4, $06, nRst, $12, nE4, $0C, nE4, nF4, $06
            B0FF5 : 0CB5 B606         
(1)  233/   B0FF9 : 8012 B50C 06B5 0CB5 	dc.b	nRst, $12, nE4, $0C, $06, nE4, $0C, nE4, nE4, $06, nE4, $0C
            B1001 : B506 B50C         
(1)  234/   B1005 : B1B5 0680 12B8 0CB8 	dc.b	nC4, nE4, $06, nRst, $12, nG4, $0C, nG4, nG4, $06, nRst, $12
            B100D : B806 8012         
(1)  235/   B1011 : B60C B6B8 0680 1280 	dc.b	nF4, $0C, nF4, nG4, $06, nRst, $12, nRst, $0C, nRst, $06, nG4
            B1019 : 0C80 06B8         
(1)  236/   B101D : 0CB8 B806 B60C BAB8 	dc.b	$0C, nG4, nG4, $06, nF4, $0C, nA4, nG4, $06, nRst, $12
            B1025 : 0680 12            
(1)  237/   B1028 : (MACRO)             	smpsLoop            $00, $02, MCZ_2p_Loop03
(1)  237/   B1028 : F7                          dc.b    $F7
(1)  237/   B1029 : 0002                        dc.b    $00,$02
(1)  237/   B102B : ED8F                                dc.w    z80_ptr(MCZ_2P_LOOP03)
(1)  238/   B102D : (MACRO)             	smpsJump            MCZ_2p_Jump06
(1)  238/   B102D : F6                          dc.b    $F6
(1)  238/   B102E : C48F                                dc.w    z80_ptr(MCZ_2P_JUMP06)
(1)  239/   B1030 :                     
(1)  240/   B1030 :                     ; DAC Data
(1)  241/   B1030 :                     MCZ_2p_DAC:
(1)  242/   B1030 : 8018                	dc.b	nRst, $18
(1)  243/   B1032 :                     
(1)  244/   B1032 :                     MCZ_2p_Jump00:
(1)  245/   B1032 : 810C 8F06 9082 0C90 	dc.b	dKick, $0C, dHiClap, $06, dMidClap, dSnare, $0C, dMidClap, $06, dLowClap, dKick, $0C
            B103A : 0691 810C         
(1)  246/   B103E : 8F06 9182 0C8F 0691 	dc.b	dHiClap, $06, dLowClap, dSnare, $0C, dHiClap, $06, dLowClap
(1)  247/   B1046 : (MACRO)             	smpsJump            MCZ_2p_Jump00
(1)  247/   B1046 : F6                          dc.b    $F6
(1)  247/   B1047 : 3290                                dc.w    z80_ptr(MCZ_2P_JUMP00)
(1)  248/   B1049 :                     
(1)  249/   B1049 :                     MCZ_2p_Voices:
(1)  250/   B1049 :                     ;	Voice $00
(1)  251/   B1049 :                     ;	$3A
(1)  252/   B1049 :                     ;	$69, $70, $50, $60, 	$1C, $18, $1A, $18, 	$10, $0C, $02, $09
(1)  253/   B1049 :                     ;	$08, $06, $06, $03, 	$F9, $56, $06, $06, 	$28, $15, $14, $00
(1)  254/   B1049 : (MACRO)             	smpsVcAlgorithm     $02
(1)  254/   B1049 : =$2                 vcAlgorithm set $02
(1)  255/   B1049 : (MACRO)             	smpsVcFeedback      $07
(1)  255/   B1049 : =$7                 vcFeedback set $07
(1)  256/   B1049 : (MACRO)             	smpsVcUnusedBits    $00
(1)  256/   B1049 : =$0                 vcUnusedBits set $00
(1)  256/   B1049 : =$0                 vcD1R1Unk set 0
(1)  256/   B1049 : =$0                 vcD1R2Unk set 0
(1)  256/   B1049 : =$0                 vcD1R3Unk set 0
(1)  256/   B1049 : =$0                 vcD1R4Unk set 0
(1)  257/   B1049 : (MACRO)             	smpsVcDetune        $06, $05, $07, $06
(1)  257/   B1049 : =$6                 vcDT1 set $06
(1)  257/   B1049 : =$5                 vcDT2 set $05
(1)  257/   B1049 : =$7                 vcDT3 set $07
(1)  257/   B1049 : =$6                 vcDT4 set $06
(1)  258/   B1049 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)  258/   B1049 : =$0                 vcCF1 set $00
(1)  258/   B1049 : =$0                 vcCF2 set $00
(1)  258/   B1049 : =$0                 vcCF3 set $00
(1)  258/   B1049 : =$9                 vcCF4 set $09
(1)  259/   B1049 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  259/   B1049 : =$0                 vcRS1 set $00
(1)  259/   B1049 : =$0                 vcRS2 set $00
(1)  259/   B1049 : =$0                 vcRS3 set $00
(1)  259/   B1049 : =$0                 vcRS4 set $00
(1)  260/   B1049 : (MACRO)             	smpsVcAttackRate    $18, $1A, $18, $1C
(1)  260/   B1049 : =$18                vcAR1 set $18
(1)  260/   B1049 : =$1A                vcAR2 set $1A
(1)  260/   B1049 : =$18                vcAR3 set $18
(1)  260/   B1049 : =$1C                vcAR4 set $1C
(1)  261/   B1049 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  261/   B1049 : =$0                 vcAM1 set $00<<5
(1)  261/   B1049 : =$0                 vcAM2 set $00<<5
(1)  261/   B1049 : =$0                 vcAM3 set $00<<5
(1)  261/   B1049 : =$0                 vcAM4 set $00<<5
(1)  262/   B1049 : (MACRO)             	smpsVcDecayRate1    $09, $02, $0C, $10
(1)  262/   B1049 : =$9                 vcD1R1 set $09
(1)  262/   B1049 : =$2                 vcD1R2 set $02
(1)  262/   B1049 : =$C                 vcD1R3 set $0C
(1)  262/   B1049 : =$10                vcD1R4 set $10
(1)  263/   B1049 : (MACRO)             	smpsVcDecayRate2    $03, $06, $06, $08
(1)  263/   B1049 : =$3                 vcD2R1 set $03
(1)  263/   B1049 : =$6                 vcD2R2 set $06
(1)  263/   B1049 : =$6                 vcD2R3 set $06
(1)  263/   B1049 : =$8                 vcD2R4 set $08
(1)  264/   B1049 : (MACRO)             	smpsVcDecayLevel    $00, $00, $05, $0F
(1)  264/   B1049 : =$0                 vcDL1 set $00
(1)  264/   B1049 : =$0                 vcDL2 set $00
(1)  264/   B1049 : =$5                 vcDL3 set $05
(1)  264/   B1049 : =$F                 vcDL4 set $0F
(1)  265/   B1049 : (MACRO)             	smpsVcReleaseRate   $06, $06, $06, $09
(1)  265/   B1049 : =$6                 vcRR1 set $06
(1)  265/   B1049 : =$6                 vcRR2 set $06
(1)  265/   B1049 : =$6                 vcRR3 set $06
(1)  265/   B1049 : =$9                 vcRR4 set $09
(1)  266/   B1049 : (MACRO)             	smpsVcTotalLevel    $00, $14, $15, $28
(1)  266/   B1049 : =$0                 vcTL1 set $00
(1)  266/   B1049 : =$14                vcTL2 set $14
(1)  266/   B1049 : =$15                vcTL3 set $15
(1)  266/   B1049 : =$28                vcTL4 set $28
(1)  266/   B1049 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  266/   B104A :                     ;   0     1     2     3     4     5     6     7
(1)  266/   B104A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  266/   B104A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  266/   B104A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  266/   B104A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  266/   B104A : =$80                vcTLMask1 set $80
(1)  266/   B104A :                     
(1)  266/   B104A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  266/   B104A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  266/   B104A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  266/   B104A : =$80                vcTLMask1 set $80
(1)  266/   B104A : =$0                 vcTL1 set vcTL1&$7F
(1)  266/   B104A : =$14                vcTL2 set vcTL2&$7F
(1)  266/   B104A : =$15                vcTL3 set vcTL3&$7F
(1)  266/   B104A : =$28                vcTL4 set vcTL4&$7F
(1)  266/   B104A :                     
(1)  266/   B104A : 6970 5060                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  266/   B104E : 1C18 1A18                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  266/   B1052 : 100C 0209                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  266/   B1056 : 0806 0603                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  266/   B105A : F956 0606                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  266/   B105E : 2815 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  267/   B1062 :                     
(1)  268/   B1062 :                     ;	Voice $01
(1)  269/   B1062 :                     ;	$3A
(1)  270/   B1062 :                     ;	$02, $04, $02, $02, 	$8E, $8E, $8D, $53, 	$0E, $0B, $0E, $0D
(1)  271/   B1062 :                     ;	$01, $00, $00, $00, 	$13, $FA, $13, $0A, 	$19, $19, $29, $00
(1)  272/   B1062 : (MACRO)             	smpsVcAlgorithm     $02
(1)  272/   B1062 : =$2                 vcAlgorithm set $02
(1)  273/   B1062 : (MACRO)             	smpsVcFeedback      $07
(1)  273/   B1062 : =$7                 vcFeedback set $07
(1)  274/   B1062 : (MACRO)             	smpsVcUnusedBits    $00
(1)  274/   B1062 : =$0                 vcUnusedBits set $00
(1)  274/   B1062 : =$0                 vcD1R1Unk set 0
(1)  274/   B1062 : =$0                 vcD1R2Unk set 0
(1)  274/   B1062 : =$0                 vcD1R3Unk set 0
(1)  274/   B1062 : =$0                 vcD1R4Unk set 0
(1)  275/   B1062 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  275/   B1062 : =$0                 vcDT1 set $00
(1)  275/   B1062 : =$0                 vcDT2 set $00
(1)  275/   B1062 : =$0                 vcDT3 set $00
(1)  275/   B1062 : =$0                 vcDT4 set $00
(1)  276/   B1062 : (MACRO)             	smpsVcCoarseFreq    $02, $02, $04, $02
(1)  276/   B1062 : =$2                 vcCF1 set $02
(1)  276/   B1062 : =$2                 vcCF2 set $02
(1)  276/   B1062 : =$4                 vcCF3 set $04
(1)  276/   B1062 : =$2                 vcCF4 set $02
(1)  277/   B1062 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  277/   B1062 : =$1                 vcRS1 set $01
(1)  277/   B1062 : =$2                 vcRS2 set $02
(1)  277/   B1062 : =$2                 vcRS3 set $02
(1)  277/   B1062 : =$2                 vcRS4 set $02
(1)  278/   B1062 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  278/   B1062 : =$13                vcAR1 set $13
(1)  278/   B1062 : =$D                 vcAR2 set $0D
(1)  278/   B1062 : =$E                 vcAR3 set $0E
(1)  278/   B1062 : =$E                 vcAR4 set $0E
(1)  279/   B1062 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  279/   B1062 : =$0                 vcAM1 set $00<<5
(1)  279/   B1062 : =$0                 vcAM2 set $00<<5
(1)  279/   B1062 : =$0                 vcAM3 set $00<<5
(1)  279/   B1062 : =$0                 vcAM4 set $00<<5
(1)  280/   B1062 : (MACRO)             	smpsVcDecayRate1    $0D, $0E, $0B, $0E
(1)  280/   B1062 : =$D                 vcD1R1 set $0D
(1)  280/   B1062 : =$E                 vcD1R2 set $0E
(1)  280/   B1062 : =$B                 vcD1R3 set $0B
(1)  280/   B1062 : =$E                 vcD1R4 set $0E
(1)  281/   B1062 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1)  281/   B1062 : =$0                 vcD2R1 set $00
(1)  281/   B1062 : =$0                 vcD2R2 set $00
(1)  281/   B1062 : =$0                 vcD2R3 set $00
(1)  281/   B1062 : =$1                 vcD2R4 set $01
(1)  282/   B1062 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  282/   B1062 : =$0                 vcDL1 set $00
(1)  282/   B1062 : =$1                 vcDL2 set $01
(1)  282/   B1062 : =$F                 vcDL3 set $0F
(1)  282/   B1062 : =$1                 vcDL4 set $01
(1)  283/   B1062 : (MACRO)             	smpsVcReleaseRate   $0A, $03, $0A, $03
(1)  283/   B1062 : =$A                 vcRR1 set $0A
(1)  283/   B1062 : =$3                 vcRR2 set $03
(1)  283/   B1062 : =$A                 vcRR3 set $0A
(1)  283/   B1062 : =$3                 vcRR4 set $03
(1)  284/   B1062 : (MACRO)             	smpsVcTotalLevel    $00, $29, $19, $19
(1)  284/   B1062 : =$0                 vcTL1 set $00
(1)  284/   B1062 : =$29                vcTL2 set $29
(1)  284/   B1062 : =$19                vcTL3 set $19
(1)  284/   B1062 : =$19                vcTL4 set $19
(1)  284/   B1062 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  284/   B1063 :                     ;   0     1     2     3     4     5     6     7
(1)  284/   B1063 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  284/   B1063 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  284/   B1063 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  284/   B1063 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  284/   B1063 : =$80                vcTLMask1 set $80
(1)  284/   B1063 :                     
(1)  284/   B1063 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  284/   B1063 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  284/   B1063 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  284/   B1063 : =$80                vcTLMask1 set $80
(1)  284/   B1063 : =$0                 vcTL1 set vcTL1&$7F
(1)  284/   B1063 : =$29                vcTL2 set vcTL2&$7F
(1)  284/   B1063 : =$19                vcTL3 set vcTL3&$7F
(1)  284/   B1063 : =$19                vcTL4 set vcTL4&$7F
(1)  284/   B1063 :                     
(1)  284/   B1063 : 0204 0202                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  284/   B1067 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  284/   B106B : 0E0B 0E0D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  284/   B106F : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  284/   B1073 : 13FA 130A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  284/   B1077 : 1919 2980                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  285/   B107B :                     
(1)  286/   B107B :                     ;	Voice $02
(1)  287/   B107B :                     ;	$3D
(1)  288/   B107B :                     ;	$00, $01, $02, $01, 	$4C, $0F, $50, $12, 	$0C, $02, $00, $05
(1)  289/   B107B :                     ;	$01, $00, $00, $00, 	$28, $29, $2A, $19, 	$1A, $00, $06, $00
(1)  290/   B107B : (MACRO)             	smpsVcAlgorithm     $05
(1)  290/   B107B : =$5                 vcAlgorithm set $05
(1)  291/   B107B : (MACRO)             	smpsVcFeedback      $07
(1)  291/   B107B : =$7                 vcFeedback set $07
(1)  292/   B107B : (MACRO)             	smpsVcUnusedBits    $00
(1)  292/   B107B : =$0                 vcUnusedBits set $00
(1)  292/   B107B : =$0                 vcD1R1Unk set 0
(1)  292/   B107B : =$0                 vcD1R2Unk set 0
(1)  292/   B107B : =$0                 vcD1R3Unk set 0
(1)  292/   B107B : =$0                 vcD1R4Unk set 0
(1)  293/   B107B : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  293/   B107B : =$0                 vcDT1 set $00
(1)  293/   B107B : =$0                 vcDT2 set $00
(1)  293/   B107B : =$0                 vcDT3 set $00
(1)  293/   B107B : =$0                 vcDT4 set $00
(1)  294/   B107B : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $00
(1)  294/   B107B : =$1                 vcCF1 set $01
(1)  294/   B107B : =$2                 vcCF2 set $02
(1)  294/   B107B : =$1                 vcCF3 set $01
(1)  294/   B107B : =$0                 vcCF4 set $00
(1)  295/   B107B : (MACRO)             	smpsVcRateScale     $00, $01, $00, $01
(1)  295/   B107B : =$0                 vcRS1 set $00
(1)  295/   B107B : =$1                 vcRS2 set $01
(1)  295/   B107B : =$0                 vcRS3 set $00
(1)  295/   B107B : =$1                 vcRS4 set $01
(1)  296/   B107B : (MACRO)             	smpsVcAttackRate    $12, $10, $0F, $0C
(1)  296/   B107B : =$12                vcAR1 set $12
(1)  296/   B107B : =$10                vcAR2 set $10
(1)  296/   B107B : =$F                 vcAR3 set $0F
(1)  296/   B107B : =$C                 vcAR4 set $0C
(1)  297/   B107B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  297/   B107B : =$0                 vcAM1 set $00<<5
(1)  297/   B107B : =$0                 vcAM2 set $00<<5
(1)  297/   B107B : =$0                 vcAM3 set $00<<5
(1)  297/   B107B : =$0                 vcAM4 set $00<<5
(1)  298/   B107B : (MACRO)             	smpsVcDecayRate1    $05, $00, $02, $0C
(1)  298/   B107B : =$5                 vcD1R1 set $05
(1)  298/   B107B : =$0                 vcD1R2 set $00
(1)  298/   B107B : =$2                 vcD1R3 set $02
(1)  298/   B107B : =$C                 vcD1R4 set $0C
(1)  299/   B107B : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1)  299/   B107B : =$0                 vcD2R1 set $00
(1)  299/   B107B : =$0                 vcD2R2 set $00
(1)  299/   B107B : =$0                 vcD2R3 set $00
(1)  299/   B107B : =$1                 vcD2R4 set $01
(1)  300/   B107B : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1)  300/   B107B : =$1                 vcDL1 set $01
(1)  300/   B107B : =$2                 vcDL2 set $02
(1)  300/   B107B : =$2                 vcDL3 set $02
(1)  300/   B107B : =$2                 vcDL4 set $02
(1)  301/   B107B : (MACRO)             	smpsVcReleaseRate   $09, $0A, $09, $08
(1)  301/   B107B : =$9                 vcRR1 set $09
(1)  301/   B107B : =$A                 vcRR2 set $0A
(1)  301/   B107B : =$9                 vcRR3 set $09
(1)  301/   B107B : =$8                 vcRR4 set $08
(1)  302/   B107B : (MACRO)             	smpsVcTotalLevel    $00, $06, $00, $1A
(1)  302/   B107B : =$0                 vcTL1 set $00
(1)  302/   B107B : =$6                 vcTL2 set $06
(1)  302/   B107B : =$0                 vcTL3 set $00
(1)  302/   B107B : =$1A                vcTL4 set $1A
(1)  302/   B107B : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  302/   B107C :                     ;   0     1     2     3     4     5     6     7
(1)  302/   B107C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  302/   B107C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  302/   B107C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  302/   B107C : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  302/   B107C : =$80                vcTLMask1 set $80
(1)  302/   B107C :                     
(1)  302/   B107C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  302/   B107C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  302/   B107C : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  302/   B107C : =$80                vcTLMask1 set $80
(1)  302/   B107C : =$0                 vcTL1 set vcTL1&$7F
(1)  302/   B107C : =$6                 vcTL2 set vcTL2&$7F
(1)  302/   B107C : =$0                 vcTL3 set vcTL3&$7F
(1)  302/   B107C : =$1A                vcTL4 set vcTL4&$7F
(1)  302/   B107C :                     
(1)  302/   B107C : 0001 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  302/   B1080 : 4C0F 5012                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  302/   B1084 : 0C02 0005                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  302/   B1088 : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  302/   B108C : 2829 2A19                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  302/   B1090 : 1A80 8680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  303/   B1094 :                     
(1)  304/   B1094 :                     ;	Voice $03
(1)  305/   B1094 :                     ;	$06
(1)  306/   B1094 :                     ;	$62, $23, $13, $71, 	$0D, $0D, $6D, $0E, 	$09, $06, $06, $06
(1)  307/   B1094 :                     ;	$00, $00, $00, $00, 	$1F, $2F, $2F, $2F, 	$10, $94, $97, $80
(1)  308/   B1094 : (MACRO)             	smpsVcAlgorithm     $06
(1)  308/   B1094 : =$6                 vcAlgorithm set $06
(1)  309/   B1094 : (MACRO)             	smpsVcFeedback      $00
(1)  309/   B1094 : =$0                 vcFeedback set $00
(1)  310/   B1094 : (MACRO)             	smpsVcUnusedBits    $00
(1)  310/   B1094 : =$0                 vcUnusedBits set $00
(1)  310/   B1094 : =$0                 vcD1R1Unk set 0
(1)  310/   B1094 : =$0                 vcD1R2Unk set 0
(1)  310/   B1094 : =$0                 vcD1R3Unk set 0
(1)  310/   B1094 : =$0                 vcD1R4Unk set 0
(1)  311/   B1094 : (MACRO)             	smpsVcDetune        $07, $01, $02, $06
(1)  311/   B1094 : =$7                 vcDT1 set $07
(1)  311/   B1094 : =$1                 vcDT2 set $01
(1)  311/   B1094 : =$2                 vcDT3 set $02
(1)  311/   B1094 : =$6                 vcDT4 set $06
(1)  312/   B1094 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $03, $02
(1)  312/   B1094 : =$1                 vcCF1 set $01
(1)  312/   B1094 : =$3                 vcCF2 set $03
(1)  312/   B1094 : =$3                 vcCF3 set $03
(1)  312/   B1094 : =$2                 vcCF4 set $02
(1)  313/   B1094 : (MACRO)             	smpsVcRateScale     $00, $01, $00, $00
(1)  313/   B1094 : =$0                 vcRS1 set $00
(1)  313/   B1094 : =$1                 vcRS2 set $01
(1)  313/   B1094 : =$0                 vcRS3 set $00
(1)  313/   B1094 : =$0                 vcRS4 set $00
(1)  314/   B1094 : (MACRO)             	smpsVcAttackRate    $0E, $2D, $0D, $0D
(1)  314/   B1094 : =$E                 vcAR1 set $0E
(1)  314/   B1094 : =$2D                vcAR2 set $2D
(1)  314/   B1094 : =$D                 vcAR3 set $0D
(1)  314/   B1094 : =$D                 vcAR4 set $0D
(1)  315/   B1094 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  315/   B1094 : =$0                 vcAM1 set $00<<5
(1)  315/   B1094 : =$0                 vcAM2 set $00<<5
(1)  315/   B1094 : =$0                 vcAM3 set $00<<5
(1)  315/   B1094 : =$0                 vcAM4 set $00<<5
(1)  316/   B1094 : (MACRO)             	smpsVcDecayRate1    $06, $06, $06, $09
(1)  316/   B1094 : =$6                 vcD1R1 set $06
(1)  316/   B1094 : =$6                 vcD1R2 set $06
(1)  316/   B1094 : =$6                 vcD1R3 set $06
(1)  316/   B1094 : =$9                 vcD1R4 set $09
(1)  317/   B1094 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  317/   B1094 : =$0                 vcD2R1 set $00
(1)  317/   B1094 : =$0                 vcD2R2 set $00
(1)  317/   B1094 : =$0                 vcD2R3 set $00
(1)  317/   B1094 : =$0                 vcD2R4 set $00
(1)  318/   B1094 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $01
(1)  318/   B1094 : =$2                 vcDL1 set $02
(1)  318/   B1094 : =$2                 vcDL2 set $02
(1)  318/   B1094 : =$2                 vcDL3 set $02
(1)  318/   B1094 : =$1                 vcDL4 set $01
(1)  319/   B1094 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  319/   B1094 : =$F                 vcRR1 set $0F
(1)  319/   B1094 : =$F                 vcRR2 set $0F
(1)  319/   B1094 : =$F                 vcRR3 set $0F
(1)  319/   B1094 : =$F                 vcRR4 set $0F
(1)  320/   B1094 : (MACRO)             	smpsVcTotalLevel    $80, $97, $94, $10
(1)  320/   B1094 : =$80                vcTL1 set $80
(1)  320/   B1094 : =$97                vcTL2 set $97
(1)  320/   B1094 : =$94                vcTL3 set $94
(1)  320/   B1094 : =$10                vcTL4 set $10
(1)  320/   B1094 : 06                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  320/   B1095 :                     ;   0     1     2     3     4     5     6     7
(1)  320/   B1095 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  320/   B1095 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  320/   B1095 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  320/   B1095 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  320/   B1095 : =$80                vcTLMask1 set $80
(1)  320/   B1095 :                     
(1)  320/   B1095 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  320/   B1095 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  320/   B1095 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  320/   B1095 : =$80                vcTLMask1 set $80
(1)  320/   B1095 : =$0                 vcTL1 set vcTL1&$7F
(1)  320/   B1095 : =$17                vcTL2 set vcTL2&$7F
(1)  320/   B1095 : =$14                vcTL3 set vcTL3&$7F
(1)  320/   B1095 : =$10                vcTL4 set vcTL4&$7F
(1)  320/   B1095 :                     
(1)  320/   B1095 : 6223 1371                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  320/   B1099 : 0D0D 6D0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  320/   B109D : 0906 0606                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  320/   B10A1 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  320/   B10A5 : 1F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  320/   B10A9 : 1094 9780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  321/   B10AD :                     
(1)  322/   B10AD :                     ;	Voice $04
(1)  323/   B10AD :                     ;	$2C
(1)  324/   B10AD :                     ;	$71, $71, $31, $31, 	$1F, $16, $1F, $16, 	$00, $0F, $00, $0F
(1)  325/   B10AD :                     ;	$00, $0F, $00, $0F, 	$00, $FA, $00, $FA, 	$15, $00, $14, $00
(1)  326/   B10AD : (MACRO)             	smpsVcAlgorithm     $04
(1)  326/   B10AD : =$4                 vcAlgorithm set $04
(1)  327/   B10AD : (MACRO)             	smpsVcFeedback      $05
(1)  327/   B10AD : =$5                 vcFeedback set $05
(1)  328/   B10AD : (MACRO)             	smpsVcUnusedBits    $00
(1)  328/   B10AD : =$0                 vcUnusedBits set $00
(1)  328/   B10AD : =$0                 vcD1R1Unk set 0
(1)  328/   B10AD : =$0                 vcD1R2Unk set 0
(1)  328/   B10AD : =$0                 vcD1R3Unk set 0
(1)  328/   B10AD : =$0                 vcD1R4Unk set 0
(1)  329/   B10AD : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(1)  329/   B10AD : =$3                 vcDT1 set $03
(1)  329/   B10AD : =$3                 vcDT2 set $03
(1)  329/   B10AD : =$7                 vcDT3 set $07
(1)  329/   B10AD : =$7                 vcDT4 set $07
(1)  330/   B10AD : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  330/   B10AD : =$1                 vcCF1 set $01
(1)  330/   B10AD : =$1                 vcCF2 set $01
(1)  330/   B10AD : =$1                 vcCF3 set $01
(1)  330/   B10AD : =$1                 vcCF4 set $01
(1)  331/   B10AD : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  331/   B10AD : =$0                 vcRS1 set $00
(1)  331/   B10AD : =$0                 vcRS2 set $00
(1)  331/   B10AD : =$0                 vcRS3 set $00
(1)  331/   B10AD : =$0                 vcRS4 set $00
(1)  332/   B10AD : (MACRO)             	smpsVcAttackRate    $16, $1F, $16, $1F
(1)  332/   B10AD : =$16                vcAR1 set $16
(1)  332/   B10AD : =$1F                vcAR2 set $1F
(1)  332/   B10AD : =$16                vcAR3 set $16
(1)  332/   B10AD : =$1F                vcAR4 set $1F
(1)  333/   B10AD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  333/   B10AD : =$0                 vcAM1 set $00<<5
(1)  333/   B10AD : =$0                 vcAM2 set $00<<5
(1)  333/   B10AD : =$0                 vcAM3 set $00<<5
(1)  333/   B10AD : =$0                 vcAM4 set $00<<5
(1)  334/   B10AD : (MACRO)             	smpsVcDecayRate1    $0F, $00, $0F, $00
(1)  334/   B10AD : =$F                 vcD1R1 set $0F
(1)  334/   B10AD : =$0                 vcD1R2 set $00
(1)  334/   B10AD : =$F                 vcD1R3 set $0F
(1)  334/   B10AD : =$0                 vcD1R4 set $00
(1)  335/   B10AD : (MACRO)             	smpsVcDecayRate2    $0F, $00, $0F, $00
(1)  335/   B10AD : =$F                 vcD2R1 set $0F
(1)  335/   B10AD : =$0                 vcD2R2 set $00
(1)  335/   B10AD : =$F                 vcD2R3 set $0F
(1)  335/   B10AD : =$0                 vcD2R4 set $00
(1)  336/   B10AD : (MACRO)             	smpsVcDecayLevel    $0F, $00, $0F, $00
(1)  336/   B10AD : =$F                 vcDL1 set $0F
(1)  336/   B10AD : =$0                 vcDL2 set $00
(1)  336/   B10AD : =$F                 vcDL3 set $0F
(1)  336/   B10AD : =$0                 vcDL4 set $00
(1)  337/   B10AD : (MACRO)             	smpsVcReleaseRate   $0A, $00, $0A, $00
(1)  337/   B10AD : =$A                 vcRR1 set $0A
(1)  337/   B10AD : =$0                 vcRR2 set $00
(1)  337/   B10AD : =$A                 vcRR3 set $0A
(1)  337/   B10AD : =$0                 vcRR4 set $00
(1)  338/   B10AD : (MACRO)             	smpsVcTotalLevel    $00, $14, $00, $15
(1)  338/   B10AD : =$0                 vcTL1 set $00
(1)  338/   B10AD : =$14                vcTL2 set $14
(1)  338/   B10AD : =$0                 vcTL3 set $00
(1)  338/   B10AD : =$15                vcTL4 set $15
(1)  338/   B10AD : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  338/   B10AE :                     ;   0     1     2     3     4     5     6     7
(1)  338/   B10AE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  338/   B10AE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  338/   B10AE : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  338/   B10AE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  338/   B10AE : =$80                vcTLMask1 set $80
(1)  338/   B10AE :                     
(1)  338/   B10AE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  338/   B10AE : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  338/   B10AE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  338/   B10AE : =$80                vcTLMask1 set $80
(1)  338/   B10AE : =$0                 vcTL1 set vcTL1&$7F
(1)  338/   B10AE : =$14                vcTL2 set vcTL2&$7F
(1)  338/   B10AE : =$0                 vcTL3 set vcTL3&$7F
(1)  338/   B10AE : =$15                vcTL4 set vcTL4&$7F
(1)  338/   B10AE :                     
(1)  338/   B10AE : 7171 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  338/   B10B2 : 1F16 1F16                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  338/   B10B6 : 000F 000F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  338/   B10BA : 000F 000F                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  338/   B10BE : 00FA 00FA                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  338/   B10C2 : 1580 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  339/   B10C6 :                     
(1)  340/   B10C6 :                     
   32/   B10C6 :                        Music_04:		include		"music-improved/84 - OOZ.asm"
(1)    1/   B10C6 :                     OOZ_Header:
(1)    2/   B10C6 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B10C6 :                     
(1)    2/   B10C6 : =$2                 SourceDriver set 2
(1)    2/   B10C6 :                     
(1)    2/   B10C6 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B10C6 :                     
(1)    2/   B10C6 : =$B10C6             songStart set *
(1)    2/   B10C6 :                     
(1)    2/   B10C6 :                     
(1)    3/   B10C6 : (MACRO)             	smpsHeaderVoice     OOZ_Voices
(1)    3/   B10C6 : B594                                dc.w    z80_ptr(OOZ_VOICES)
(1)    4/   B10C8 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B10C8 : 0603                        dc.b    $06,$03
(1)    5/   B10CA : (MACRO)             	smpsHeaderTempo     $02, $D0
(1)    5/   B10CA : 02                          dc.b    $02
(1)    5/   B10CB :  (MACRO-2)                  convertMainTempoMod $D0
(1)    5/   B10CB : 30                                          dc.b    s2TempotoS3($D0)
(1)    6/   B10CC :                     
(1)    7/   B10CC : (MACRO)             	smpsHeaderDAC       OOZ_DAC
(1)    7/   B10CC :  (MACRO-2)                  CheckedChannelPointer OOZ_DAC
(1)    7/   B10CC : 7D94                                dc.w    z80_ptr(OOZ_DAC)
(1)    7/   B10CE : 0000                                dc.w    $00
(1)    8/   B10D0 : (MACRO)             	smpsHeaderFM        OOZ_FM1,	$F4, $0C
(1)    8/   B10D0 :  (MACRO-2)                  CheckedChannelPointer OOZ_FM1
(1)    8/   B10D0 : F690                                dc.w    z80_ptr(OOZ_FM1)
(1)    8/   B10D2 : F40C                        dc.b    $F4,$0C
(1)    9/   B10D4 : (MACRO)             	smpsHeaderFM        OOZ_FM2,	$F4, $09
(1)    9/   B10D4 :  (MACRO-2)                  CheckedChannelPointer OOZ_FM2
(1)    9/   B10D4 : 0E92                                dc.w    z80_ptr(OOZ_FM2)
(1)    9/   B10D6 : F409                        dc.b    $F4,$09
(1)   10/   B10D8 : (MACRO)             	smpsHeaderFM        OOZ_FM3,	$C4, $09
(1)   10/   B10D8 :  (MACRO-2)                  CheckedChannelPointer OOZ_FM3
(1)   10/   B10D8 : 6393                                dc.w    z80_ptr(OOZ_FM3)
(1)   10/   B10DA : C409                        dc.b    $C4,$09
(1)   11/   B10DC : (MACRO)             	smpsHeaderFM        OOZ_FM4,	$F4, $10
(1)   11/   B10DC :  (MACRO-2)                  CheckedChannelPointer OOZ_FM4
(1)   11/   B10DC : 9592                                dc.w    z80_ptr(OOZ_FM4)
(1)   11/   B10DE : F410                        dc.b    $F4,$10
(1)   12/   B10E0 : (MACRO)             	smpsHeaderFM        OOZ_FM5,	$F4, $10
(1)   12/   B10E0 :  (MACRO-2)                  CheckedChannelPointer OOZ_FM5
(1)   12/   B10E0 : F992                                dc.w    z80_ptr(OOZ_FM5)
(1)   12/   B10E2 : F410                        dc.b    $F4,$10
(1)   13/   B10E4 : (MACRO)             	smpsHeaderPSG       OOZ_PSG1,	$D0, $04, $04, $00
(1)   13/   B10E4 :  (MACRO-2)                  CheckedChannelPointer OOZ_PSG1
(1)   13/   B10E4 : C393                                dc.w    z80_ptr(OOZ_PSG1)
(1)   13/   B10E6 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   B10E6 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   B10E7 : 0404 00                     dc.b    $04,$04,$00
(1)   14/   B10EA : (MACRO)             	smpsHeaderPSG       OOZ_PSG2,	$D0, $05, $04, $00
(1)   14/   B10EA :  (MACRO-2)                  CheckedChannelPointer OOZ_PSG2
(1)   14/   B10EA : E693                                dc.w    z80_ptr(OOZ_PSG2)
(1)   14/   B10EC :  (MACRO-2)                  PSGPitchConvert $D0
(1)   14/   B10EC : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   14/   B10ED : 0504 00                     dc.b    $05,$04,$00
(1)   15/   B10F0 : (MACRO)             	smpsHeaderPSG       OOZ_PSG3,	$FE, $07, $00, fTone_01
(1)   15/   B10F0 :  (MACRO-2)                  CheckedChannelPointer OOZ_PSG3
(1)   15/   B10F0 : 2194                                dc.w    z80_ptr(OOZ_PSG3)
(1)   15/   B10F2 :  (MACRO-2)                  PSGPitchConvert $FE
(1)   15/   B10F2 : 0A                                  dc.b    ($FE+psgdelta)&$FF
(1)   15/   B10F3 : 0700 01                     dc.b    $07,$00,FTONE_01
(1)   16/   B10F6 :                     
(1)   17/   B10F6 :                     ; FM1 Data
(1)   18/   B10F6 :                     OOZ_FM1:
(1)   19/   B10F6 : (MACRO)             	smpsSetvoice        $04
(1)   19/   B10F6 :  (MACRO-2)                  smpsFMvoice $04
(1)   19/   B10F6 : EF04                                dc.b    $EF,$04
(1)   20/   B10F8 : (MACRO)             	smpsModSet          $02, $03, $01, $03
(1)   20/   B10F8 : F0                          dc.b    $F0
(1)   20/   B10F9 : 0303 010C                           dc.b    $02+1,$03,$01,(($03+1) * $03) & $FF
(1)   20/   B10FD :                             ;dc.b   $03,$01,$03
(1)   21/   B10FD : (MACRO)             	smpsCall            OOZ_Call02
(1)   21/   B10FD : F8                          dc.b    $F8
(1)   21/   B10FE : 2F91                                dc.w    z80_ptr(OOZ_CALL02)
(1)   22/   B1100 :                     
(1)   23/   B1100 :                     OOZ_Jump00:
(1)   24/   B1100 : (MACRO)             	smpsSetvoice        $02
(1)   24/   B1100 :  (MACRO-2)                  smpsFMvoice $02
(1)   24/   B1100 : EF02                                dc.b    $EF,$02
(1)   25/   B1102 : (MACRO)             	smpsAlterVol        $FB
(1)   25/   B1102 : E6FB                        dc.b    $E6,$FB
(1)   26/   B1104 : (MACRO)             	smpsAlterPitch      $DC
(1)   26/   B1104 :  (MACRO-2)                  smpsChangeTransposition $DC
(1)   26/   B1104 : FBDC                                dc.b    $FB,$DC
(1)   27/   B1106 : (MACRO)             	smpsCall            OOZ_Call03
(1)   27/   B1106 : F8                          dc.b    $F8
(1)   27/   B1107 : 4A91                                dc.w    z80_ptr(OOZ_CALL03)
(1)   28/   B1109 : (MACRO)             	smpsAlterVol        $05
(1)   28/   B1109 : E605                        dc.b    $E6,$05
(1)   29/   B110B : (MACRO)             	smpsAlterPitch      $24
(1)   29/   B110B :  (MACRO-2)                  smpsChangeTransposition $24
(1)   29/   B110B : FB24                                dc.b    $FB,$24
(1)   30/   B110D : (MACRO)             	smpsSetvoice        $04
(1)   30/   B110D :  (MACRO-2)                  smpsFMvoice $04
(1)   30/   B110D : EF04                                dc.b    $EF,$04
(1)   31/   B110F : (MACRO)             	smpsCall            OOZ_Call04
(1)   31/   B110F : F8                          dc.b    $F8
(1)   31/   B1110 : 8791                                dc.w    z80_ptr(OOZ_CALL04)
(1)   32/   B1112 : (MACRO)             	smpsSetvoice        $02
(1)   32/   B1112 :  (MACRO-2)                  smpsFMvoice $02
(1)   32/   B1112 : EF02                                dc.b    $EF,$02
(1)   33/   B1114 : (MACRO)             	smpsAlterVol        $FC
(1)   33/   B1114 : E6FC                        dc.b    $E6,$FC
(1)   34/   B1116 : (MACRO)             	smpsAlterPitch      $DC
(1)   34/   B1116 :  (MACRO-2)                  smpsChangeTransposition $DC
(1)   34/   B1116 : FBDC                                dc.b    $FB,$DC
(1)   35/   B1118 : (MACRO)             	smpsCall            OOZ_Call05
(1)   35/   B1118 : F8                          dc.b    $F8
(1)   35/   B1119 : C391                                dc.w    z80_ptr(OOZ_CALL05)
(1)   36/   B111B : (MACRO)             	smpsAlterVol        $04
(1)   36/   B111B : E604                        dc.b    $E6,$04
(1)   37/   B111D : (MACRO)             	smpsAlterPitch      $24
(1)   37/   B111D :  (MACRO-2)                  smpsChangeTransposition $24
(1)   37/   B111D : FB24                                dc.b    $FB,$24
(1)   38/   B111F : (MACRO)             	smpsAlterPitch      $E8
(1)   38/   B111F :  (MACRO-2)                  smpsChangeTransposition $E8
(1)   38/   B111F : FBE8                                dc.b    $FB,$E8
(1)   39/   B1121 : (MACRO)             	smpsSetvoice        $05
(1)   39/   B1121 :  (MACRO-2)                  smpsFMvoice $05
(1)   39/   B1121 : EF05                                dc.b    $EF,$05
(1)   40/   B1123 : (MACRO)             	smpsAlterVol        $07
(1)   40/   B1123 : E607                        dc.b    $E6,$07
(1)   41/   B1125 : (MACRO)             	smpsCall            OOZ_Call06
(1)   41/   B1125 : F8                          dc.b    $F8
(1)   41/   B1126 : F591                                dc.w    z80_ptr(OOZ_CALL06)
(1)   42/   B1128 : (MACRO)             	smpsAlterVol        $F9
(1)   42/   B1128 : E6F9                        dc.b    $E6,$F9
(1)   43/   B112A : (MACRO)             	smpsAlterPitch      $18
(1)   43/   B112A :  (MACRO-2)                  smpsChangeTransposition $18
(1)   43/   B112A : FB18                                dc.b    $FB,$18
(1)   44/   B112C : (MACRO)             	smpsJump            OOZ_Jump00
(1)   44/   B112C : F6                          dc.b    $F6
(1)   44/   B112D : 0091                                dc.w    z80_ptr(OOZ_JUMP00)
(1)   45/   B112F :                     
(1)   46/   B112F :                     OOZ_Call02:
(1)   47/   B112F : C403 0306 C5C8 C9CB 	dc.b	nG5, $03, $03, $06, nAb5, nB5, nC6, nD6, $12, $03, $03, $06
            B1137 : 1203 0306         
(1)   48/   B113B : CCCE CCCB CCCB C9C8 	dc.b	nEb6, nF6, nEb6, nD6, nEb6, nD6, nC6, nB5, $03, nC6, nB5, nAb5
            B1143 : 03C9 C8C5         
(1)   49/   B1147 : C424                	dc.b	nG5, $24
(1)   50/   B1149 : (MACRO)             	smpsReturn
(1)   50/   B1149 : F9                                  dc.b    $F9
(1)   51/   B114A :                     
(1)   52/   B114A :                     OOZ_Call03:
(1)   53/   B114A : 8018 8003 8001 C901 	dc.b	nRst, $18, nRst, $03, nRst, $01, nC6, $01, nD6, $02, nEb6, $02
            B1152 : CB02 CC02         
(1)   54/   B1156 : CF25                	dc.b	nFs6, $25
(1)   55/   B1158 : (MACRO)             	smpsAlterVol        $02
(1)   55/   B1158 : E602                        dc.b    $E6,$02
(1)   56/   B115A : E702                	dc.b	smpsNoAttack, $02
(1)   57/   B115C : (MACRO)             	smpsAlterVol        $02
(1)   57/   B115C : E602                        dc.b    $E6,$02
(1)   58/   B115E : E702                	dc.b	smpsNoAttack, $02
(1)   59/   B1160 : (MACRO)             	smpsAlterVol        $02
(1)   59/   B1160 : E602                        dc.b    $E6,$02
(1)   60/   B1162 : E702                	dc.b	smpsNoAttack, $02
(1)   61/   B1164 : (MACRO)             	smpsAlterVol        $02
(1)   61/   B1164 : E602                        dc.b    $E6,$02
(1)   62/   B1166 : E702                	dc.b	smpsNoAttack, $02
(1)   63/   B1168 : (MACRO)             	smpsAlterVol        $F8
(1)   63/   B1168 : E6F8                        dc.b    $E6,$F8
(1)   64/   B116A : D101 D00B CC01 CB30 	dc.b	nAb6, $01, nG6, $0B, nEb6, $01, nD6, $30, smpsNoAttack, $2D
            B1172 : E72D               
(1)   65/   B1174 : (MACRO)             	smpsAlterVol        $02
(1)   65/   B1174 : E602                        dc.b    $E6,$02
(1)   66/   B1176 : E702                	dc.b	smpsNoAttack, $02
(1)   67/   B1178 : (MACRO)             	smpsAlterVol        $02
(1)   67/   B1178 : E602                        dc.b    $E6,$02
(1)   68/   B117A : E702                	dc.b	smpsNoAttack, $02
(1)   69/   B117C : (MACRO)             	smpsAlterVol        $02
(1)   69/   B117C : E602                        dc.b    $E6,$02
(1)   70/   B117E : E702                	dc.b	smpsNoAttack, $02
(1)   71/   B1180 : (MACRO)             	smpsAlterVol        $02
(1)   71/   B1180 : E602                        dc.b    $E6,$02
(1)   72/   B1182 : E702                	dc.b	smpsNoAttack, $02
(1)   73/   B1184 : (MACRO)             	smpsAlterVol        $F8
(1)   73/   B1184 : E6F8                        dc.b    $E6,$F8
(1)   74/   B1186 : (MACRO)             	smpsReturn
(1)   74/   B1186 : F9                                  dc.b    $F9
(1)   75/   B1187 :                     
(1)   76/   B1187 :                     OOZ_Call04:
(1)   77/   B1187 : (MACRO)             	smpsCall            OOZ_Call08
(1)   77/   B1187 : F8                          dc.b    $F8
(1)   77/   B1188 : 0192                                dc.w    z80_ptr(OOZ_CALL08)
(1)   78/   B118A : CB1E CC06 CBC9 C812 	dc.b	nD6, $1E, nEb6, $06, nD6, nC6, nB5, $12, nC6, $06, nB5, $0C
            B1192 : C906 C80C         
(1)   79/   B1196 : C5                  	dc.b	nAb5
(1)   80/   B1197 : (MACRO)             	smpsCall            OOZ_Call08
(1)   80/   B1197 : F8                          dc.b    $F8
(1)   80/   B1198 : 0192                                dc.w    z80_ptr(OOZ_CALL08)
(1)   81/   B119A : CE0C D006 CECC CBCC 	dc.b	nF6, $0C, nG6, $06, nF6, nEb6, nD6, nEb6, nD6, nC6, nB5, $0C
            B11A2 : CBC9 C80C         
(1)   82/   B11A6 : C506 C418           	dc.b	nAb5, $06, nG5, $18
(1)   83/   B11AA :                     
(1)   84/   B11AA :                     OOZ_Loop09:
(1)   85/   B11AA : C403 C5C8 06C9 C8C5 	dc.b	nG5, $03, nAb5, nB5, $06, nC6, nB5, nAb5, nG5, $0C, $03, nAb5
            B11B2 : C40C 03C5         
(1)   86/   B11B6 : C806 C9C8 C5C4 18   	dc.b	nB5, $06, nC6, nB5, nAb5, nG5, $18
(1)   87/   B11BD : (MACRO)             	smpsLoop            $01, $02, OOZ_Loop09
(1)   87/   B11BD : F7                          dc.b    $F7
(1)   87/   B11BE : 0102                        dc.b    $01,$02
(1)   87/   B11C0 : AA91                                dc.w    z80_ptr(OOZ_LOOP09)
(1)   88/   B11C2 : (MACRO)             	smpsReturn
(1)   88/   B11C2 : F9                                  dc.b    $F9
(1)   89/   B11C3 :                     
(1)   90/   B11C3 :                     OOZ_Call05:
(1)   91/   B11C3 : (MACRO)             	smpsCall            OOZ_Call07
(1)   91/   B11C3 : F8                          dc.b    $F8
(1)   91/   B11C4 : DA91                                dc.w    z80_ptr(OOZ_CALL07)
(1)   92/   B11C6 : D001 CF0B CC01 CB1D 	dc.b	nG6, $01, nFs6, $0B, nEb6, $01, nD6, $1D
(1)   93/   B11CE : (MACRO)             	smpsCall            OOZ_Call07
(1)   93/   B11CE : F8                          dc.b    $F8
(1)   93/   B11CF : DA91                                dc.w    z80_ptr(OOZ_CALL07)
(1)   94/   B11D1 : CF01 CE0B D301 D21D 	dc.b	nFs6, $01, nF6, $0B, nBb6, $01, nA6, $1D
(1)   95/   B11D9 : (MACRO)             	smpsReturn
(1)   95/   B11D9 : F9                                  dc.b    $F9
(1)   96/   B11DA :                     
(1)   97/   B11DA :                     OOZ_Call07:
(1)   98/   B11DA : 800C CA01 C905 CC01 	dc.b	nRst, $0C, nCs6, $01, nC6, $05, nEb6, $01, nD6, $05, nE6, $01
            B11E2 : CB05 CD01         
(1)   99/   B11E6 : CC05 CA01 C905 D101 	dc.b	nEb6, $05, nCs6, $01, nC6, $05, nAb6, $01, nG6, $0B, nAb6, $01
            B11EE : D00B D101         
(1)  100/   B11F2 : D005                	dc.b	nG6, $05
(1)  101/   B11F4 : (MACRO)             	smpsReturn
(1)  101/   B11F4 : F9                                  dc.b    $F9
(1)  102/   B11F5 :                     
(1)  103/   B11F5 :                     OOZ_Call06:
(1)  104/   B11F5 : DE03 DCDB D8DB D8D7 	dc.b	nA7, $03, nG7, nFs7, nEb7, nFs7, nEb7, nD7, nCs7, nD7, $18
            B11FD : D6D7 18            
(1)  105/   B1200 : (MACRO)             	smpsReturn
(1)  105/   B1200 : F9                                  dc.b    $F9
(1)  106/   B1201 :                     
(1)  107/   B1201 :                     OOZ_Call08:
(1)  108/   B1201 : C41E C506 C8C9 CB1E 	dc.b	nG5, $1E, nAb5, $06, nB5, nC6, nD6, $1E, nEb6, $06, nF6, nEb6
            B1209 : CC06 CECC         
(1)  109/   B120D : (MACRO)             	smpsReturn
(1)  109/   B120D : F9                                  dc.b    $F9
(1)  110/   B120E :                     
(1)  111/   B120E :                     ; FM2 Data
(1)  112/   B120E :                     OOZ_FM2:
(1)  113/   B120E : (MACRO)             	smpsSetvoice        $00
(1)  113/   B120E :  (MACRO-2)                  smpsFMvoice $00
(1)  113/   B120E : EF00                                dc.b    $EF,$00
(1)  114/   B1210 : 8006 8030 8080 2AB6 	dc.b	nRst, $06, nRst, $30, nRst, nRst, $2A, nF4, $03, nG4
            B1218 : 03B8               
(1)  115/   B121A :                     
(1)  116/   B121A :                     OOZ_Loop07:
(1)  117/   B121A : (MACRO)             	smpsCall            OOZ_Call01
(1)  117/   B121A : F8                          dc.b    $F8
(1)  117/   B121B : 8292                                dc.w    z80_ptr(OOZ_CALL01)
(1)  118/   B121D : 8012                	dc.b	nRst, $12
(1)  119/   B121F : (MACRO)             	smpsCall            OOZ_Call01
(1)  119/   B121F : F8                          dc.b    $F8
(1)  119/   B1220 : 8292                                dc.w    z80_ptr(OOZ_CALL01)
(1)  120/   B1222 : 8006 B603 80B6 B8   	dc.b	nRst, $06, nF4, $03, nRst, nF4, nG4
(1)  121/   B1229 : (MACRO)             	smpsLoop            $00, $04, OOZ_Loop07
(1)  121/   B1229 : F7                          dc.b    $F7
(1)  121/   B122A : 0004                        dc.b    $00,$04
(1)  121/   B122C : 1A92                                dc.w    z80_ptr(OOZ_LOOP07)
(1)  122/   B122E : B102 8001 B103 AC06 	dc.b	nC4, $02, nRst, $01, nC4, $03, nG3, $06, nBb3, nG3, nC4, $02
            B1236 : AFAC B102         
(1)  123/   B123A : 8001 B103 AC06 AFB1 	dc.b	nRst, $01, nC4, $03, nG3, $06, nBb3, nC4, nD4, $02, nRst, $01
            B1242 : B302 8001         
(1)  124/   B1246 : B303 AE06 B1AE B302 	dc.b	nD4, $03, nA3, $06, nC4, nA3, nD4, $02, nRst, $01, nD4, $03
            B124E : 8001 B303         
(1)  125/   B1252 : AE06 B1B3 B402 8001 	dc.b	nA3, $06, nC4, nD4, nEb4, $02, nRst, $01, nEb4, $03, nBb3, $06
            B125A : B403 AF06         
(1)  126/   B125E : B1AF B402 8001 B403 	dc.b	nC4, nBb3, nEb4, $02, nRst, $01, nEb4, $03, nBb3, $06, nC4, nEb4
            B1266 : AF06 B1B4         
(1)  127/   B126A : B603 80B6 80B6 80B6 	dc.b	nF4, $03, nRst, nF4, nRst, nF4, nRst, nF4, nRst, nFs4, nRst, nFs4
            B1272 : 80B7 80B7         
(1)  128/   B1276 : 80B7 80B7 8080 0CB3 	dc.b	nRst, nFs4, nRst, nFs4, nRst, nRst, $0C, nD4, $24
            B127E : 24               
(1)  129/   B127F : (MACRO)             	smpsJump            OOZ_Loop07
(1)  129/   B127F : F6                          dc.b    $F6
(1)  129/   B1280 : 1A92                                dc.w    z80_ptr(OOZ_LOOP07)
(1)  130/   B1282 :                     
(1)  131/   B1282 :                     OOZ_Call01:
(1)  132/   B1282 : AC03 ACA7 06AA ABAC 	dc.b	nG3, $03, nG3, nD3, $06, nF3, nFs3, nG3, nRst, $12, nG3, $03
            B128A : 8012 AC03         
(1)  133/   B128E : 03AF 06AE ADAC      	dc.b	$03, nBb3, $06, nA3, nAb3, nG3
(1)  134/   B1294 : (MACRO)             	smpsReturn
(1)  134/   B1294 : F9                                  dc.b    $F9
(1)  135/   B1295 :                     
(1)  136/   B1295 :                     ; FM4 Data
(1)  137/   B1295 :                     OOZ_FM4:
(1)  138/   B1295 : (MACRO)             	smpsSetvoice        $02
(1)  138/   B1295 :  (MACRO-2)                  smpsFMvoice $02
(1)  138/   B1295 : EF02                                dc.b    $EF,$02
(1)  139/   B1297 : (MACRO)             	smpsPan             panRight, $00
(1)  139/   B1297 : =$0                 panNone set $00
(1)  139/   B1297 : =$40                panRight set $40
(1)  139/   B1297 : =$80                panLeft set $80
(1)  139/   B1297 : =$C0                panCentre set $C0
(1)  139/   B1297 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  139/   B1297 : E040                        dc.b $E0,PANRIGHT+$00
(1)  140/   B1299 : (MACRO)             	smpsAlterPitch      $DC
(1)  140/   B1299 :  (MACRO-2)                  smpsChangeTransposition $DC
(1)  140/   B1299 : FBDC                                dc.b    $FB,$DC
(1)  141/   B129B : (MACRO)             	smpsAlterVol        $F9
(1)  141/   B129B : E6F9                        dc.b    $E6,$F9
(1)  142/   B129D : (MACRO)             	smpsCall            OOZ_Call00
(1)  142/   B129D : F8                          dc.b    $F8
(1)  142/   B129E : E592                                dc.w    z80_ptr(OOZ_CALL00)
(1)  143/   B12A0 : (MACRO)             	smpsAlterVol        $07
(1)  143/   B12A0 : E607                        dc.b    $E6,$07
(1)  144/   B12A2 : B830                	dc.b	nG4, $30
(1)  145/   B12A4 : (MACRO)             	smpsAlterPitch      $24
(1)  145/   B12A4 :  (MACRO-2)                  smpsChangeTransposition $24
(1)  145/   B12A4 : FB24                                dc.b    $FB,$24
(1)  146/   B12A6 : (MACRO)             	smpsSetvoice        $01
(1)  146/   B12A6 :  (MACRO-2)                  smpsFMvoice $01
(1)  146/   B12A6 : EF01                                dc.b    $EF,$01
(1)  147/   B12A8 : (MACRO)             	smpsPan             panCenter, $00
(1)  147/   B12A8 : =$0                 panNone set $00
(1)  147/   B12A8 : =$40                panRight set $40
(1)  147/   B12A8 : =$80                panLeft set $80
(1)  147/   B12A8 : =$C0                panCentre set $C0
(1)  147/   B12A8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  147/   B12A8 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  148/   B12AA :                     
(1)  149/   B12AA :                     OOZ_Loop04:
(1)  150/   B12AA : 8006 BF03 80BF 80BF 	dc.b	nRst, $06, nD5, $03, nRst, nD5, nRst, nD5, nRst, nCs5, $09, nD5
            B12B2 : 80BE 09BF         
(1)  151/   B12B6 : 0380 0C80 30        	dc.b	$03, nRst, $0C, nRst, $30
(1)  152/   B12BB : (MACRO)             	smpsLoop            $00, $08, OOZ_Loop04
(1)  152/   B12BB : F7                          dc.b    $F7
(1)  152/   B12BC : 0008                        dc.b    $00,$08
(1)  152/   B12BE : AA92                                dc.w    z80_ptr(OOZ_LOOP04)
(1)  153/   B12C0 :                     
(1)  154/   B12C0 :                     OOZ_Loop05:
(1)  155/   B12C0 : 8006 C703 C780 C780 	dc.b	nRst, $06, nBb5, $03, nBb5, nRst, nBb5, nRst, $06, nBb5, $09, nBb5
            B12C8 : 06C7 09C7         
(1)  156/   B12CC : 0380 0C             	dc.b	$03, nRst, $0C
(1)  157/   B12CF : (MACRO)             	smpsAlterPitch      $02
(1)  157/   B12CF :  (MACRO-2)                  smpsChangeTransposition $02
(1)  157/   B12CF : FB02                                dc.b    $FB,$02
(1)  158/   B12D1 : (MACRO)             	smpsLoop            $00, $03, OOZ_Loop05
(1)  158/   B12D1 : F7                          dc.b    $F7
(1)  158/   B12D2 : 0003                        dc.b    $00,$03
(1)  158/   B12D4 : C092                                dc.w    z80_ptr(OOZ_LOOP05)
(1)  159/   B12D6 : (MACRO)             	smpsAlterPitch      $FA
(1)  159/   B12D6 :  (MACRO-2)                  smpsChangeTransposition $FA
(1)  159/   B12D6 : FBFA                                dc.b    $FB,$FA
(1)  160/   B12D8 :                     
(1)  161/   B12D8 :                     OOZ_Loop06:
(1)  162/   B12D8 : C603 80             	dc.b	nA5, $03, nRst
(1)  163/   B12DB : (MACRO)             	smpsLoop            $00, $08, OOZ_Loop06
(1)  163/   B12DB : F7                          dc.b    $F7
(1)  163/   B12DC : 0008                        dc.b    $00,$08
(1)  163/   B12DE : D892                                dc.w    z80_ptr(OOZ_LOOP06)
(1)  164/   B12E0 : 8030                	dc.b	nRst, $30
(1)  165/   B12E2 : (MACRO)             	smpsJump            OOZ_Loop04
(1)  165/   B12E2 : F6                          dc.b    $F6
(1)  165/   B12E3 : AA92                                dc.w    z80_ptr(OOZ_LOOP04)
(1)  166/   B12E5 :                     
(1)  167/   B12E5 :                     OOZ_Call00:
(1)  168/   B12E5 : 8006 80BF BDBC BDBC 	dc.b	nRst, $06, nRst, nD5, nC5, nB4, nC5, nB4, nAb4, nG4, $0C, nD5
            B12ED : B9B8 0CBF         
(1)  169/   B12F1 : 06BD BCB8 12B6 06   	dc.b	$06, nC5, nB4, nG4, $12, nF4, $06
(1)  170/   B12F8 : (MACRO)             	smpsReturn
(1)  170/   B12F8 : F9                                  dc.b    $F9
(1)  171/   B12F9 :                     
(1)  172/   B12F9 :                     ; FM5 Data
(1)  173/   B12F9 :                     OOZ_FM5:
(1)  174/   B12F9 : (MACRO)             	smpsSetvoice        $02
(1)  174/   B12F9 :  (MACRO-2)                  smpsFMvoice $02
(1)  174/   B12F9 : EF02                                dc.b    $EF,$02
(1)  175/   B12FB : (MACRO)             	smpsPan             panLeft, $00
(1)  175/   B12FB : =$0                 panNone set $00
(1)  175/   B12FB : =$40                panRight set $40
(1)  175/   B12FB : =$80                panLeft set $80
(1)  175/   B12FB : =$C0                panCentre set $C0
(1)  175/   B12FB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  175/   B12FB : E080                        dc.b $E0,PANLEFT+$00
(1)  176/   B12FD : (MACRO)             	smpsAlterPitch      $E8
(1)  176/   B12FD :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  176/   B12FD : FBE8                                dc.b    $FB,$E8
(1)  177/   B12FF : 8001                	dc.b	nRst, $01
(1)  178/   B1301 : (MACRO)             	smpsAlterVol        $F9
(1)  178/   B1301 : E6F9                        dc.b    $E6,$F9
(1)  179/   B1303 : (MACRO)             	smpsCall            OOZ_Call00
(1)  179/   B1303 : F8                          dc.b    $F8
(1)  179/   B1304 : E592                                dc.w    z80_ptr(OOZ_CALL00)
(1)  180/   B1306 : (MACRO)             	smpsAlterVol        $07
(1)  180/   B1306 : E607                        dc.b    $E6,$07
(1)  181/   B1308 : B82F                	dc.b	nG4, $2F
(1)  182/   B130A : (MACRO)             	smpsAlterPitch      $18
(1)  182/   B130A :  (MACRO-2)                  smpsChangeTransposition $18
(1)  182/   B130A : FB18                                dc.b    $FB,$18
(1)  183/   B130C : (MACRO)             	smpsSetvoice        $01
(1)  183/   B130C :  (MACRO-2)                  smpsFMvoice $01
(1)  183/   B130C : EF01                                dc.b    $EF,$01
(1)  184/   B130E : (MACRO)             	smpsPan             panCenter, $00
(1)  184/   B130E : =$0                 panNone set $00
(1)  184/   B130E : =$40                panRight set $40
(1)  184/   B130E : =$80                panLeft set $80
(1)  184/   B130E : =$C0                panCentre set $C0
(1)  184/   B130E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  184/   B130E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  185/   B1310 :                     
(1)  186/   B1310 :                     OOZ_Loop02:
(1)  187/   B1310 : 8006 BB03 80BB 80BB 	dc.b	nRst, $06, nBb4, $03, nRst, nBb4, nRst, nBb4, nRst, nA4, $09, nBb4
            B1318 : 80BA 09BB         
(1)  188/   B131C : 0380 0C80 30        	dc.b	$03, nRst, $0C, nRst, $30
(1)  189/   B1321 : (MACRO)             	smpsLoop            $00, $08, OOZ_Loop02
(1)  189/   B1321 : F7                          dc.b    $F7
(1)  189/   B1322 : 0008                        dc.b    $00,$08
(1)  189/   B1324 : 1093                                dc.w    z80_ptr(OOZ_LOOP02)
(1)  190/   B1326 :                     
(1)  191/   B1326 :                     OOZ_Loop03:
(1)  192/   B1326 : 8006 C403 C480 C480 	dc.b	nRst, $06, nG5, $03, nG5, nRst, nG5, nRst, $06, nG5, $09, nG5
            B132E : 06C4 09C4         
(1)  193/   B1332 : 0380 0C             	dc.b	$03, nRst, $0C
(1)  194/   B1335 : (MACRO)             	smpsAlterPitch      $02
(1)  194/   B1335 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  194/   B1335 : FB02                                dc.b    $FB,$02
(1)  195/   B1337 : (MACRO)             	smpsLoop            $00, $02, OOZ_Loop03
(1)  195/   B1337 : F7                          dc.b    $F7
(1)  195/   B1338 : 0002                        dc.b    $00,$02
(1)  195/   B133A : 2693                                dc.w    z80_ptr(OOZ_LOOP03)
(1)  196/   B133C : (MACRO)             	smpsAlterPitch      $FC
(1)  196/   B133C :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  196/   B133C : FBFC                                dc.b    $FB,$FC
(1)  197/   B133E : 8006 C703 C780 C780 	dc.b	nRst, $06, nBb5, $03, nBb5, nRst, nBb5, nRst, $06, nBb5, $09, nBb5
            B1346 : 06C7 09C7         
(1)  198/   B134A : 0380 0CC2 0380 C280 	dc.b	$03, nRst, $0C, nF5, $03, nRst, nF5, nRst, nF5, nRst, nF5, nRst
            B1352 : C280 C280         
(1)  199/   B1356 : C380 C380 C380 C380 	dc.b	nFs5, nRst, nFs5, nRst, nFs5, nRst, nFs5, nRst, nRst, $30
            B135E : 8030               
(1)  200/   B1360 : (MACRO)             	smpsJump            OOZ_Loop02
(1)  200/   B1360 : F6                          dc.b    $F6
(1)  200/   B1361 : 1093                                dc.w    z80_ptr(OOZ_LOOP02)
(1)  201/   B1363 :                     
(1)  202/   B1363 :                     ; FM3 Data
(1)  203/   B1363 :                     OOZ_FM3:
(1)  204/   B1363 : (MACRO)             	smpsSetvoice        $03
(1)  204/   B1363 :  (MACRO-2)                  smpsFMvoice $03
(1)  204/   B1363 : EF03                                dc.b    $EF,$03
(1)  205/   B1365 : D503 D5D5 06D7 D7D5 	dc.b	nC7, $03, nC7, nC7, $06, nD7, nD7, nC7, nD7, $03, $03, nC7
            B136D : D703 03D5         
(1)  206/   B1371 : 0606 D703 03D5 0606 	dc.b	$06, $06, nD7, $03, $03, nC7, $06, $06, $06, nD7, $03, $03
            B1379 : 06D7 0303         
(1)  207/   B137D : 0303 D506 06D7 D503 	dc.b	$03, $03, nC7, $06, $06, nD7, nC7, $03, nD7, nD7, nD7, nD7
            B1385 : D7D7 D7D7         
(1)  208/   B1389 : 06D5 D5D7 0303 D50C 	dc.b	$06, nC7, nC7, nD7, $03, $03, nC7, $0C
(1)  209/   B1391 :                     
(1)  210/   B1391 :                     OOZ_Loop01:
(1)  211/   B1391 : 801E D703 03D5 06D7 	dc.b	nRst, $1E, nD7, $03, $03, nC7, $06, nD7, nRst, $1E, nC7, $03
            B1399 : 801E D503         
(1)  212/   B139D : 03D7 06D5           	dc.b	$03, nD7, $06, nC7
(1)  213/   B13A1 : (MACRO)             	smpsLoop            $00, $09, OOZ_Loop01
(1)  213/   B13A1 : F7                          dc.b    $F7
(1)  213/   B13A2 : 0009                        dc.b    $00,$09
(1)  213/   B13A4 : 9193                                dc.w    z80_ptr(OOZ_LOOP01)
(1)  214/   B13A6 : 801E D703 03D5 06D7 	dc.b	nRst, $1E, nD7, $03, $03, nC7, $06, nD7, nRst, $30, nC7, $03
            B13AE : 8030 D503         
(1)  215/   B13B2 : D7D7 D5D7 D7D5 D7D7 	dc.b	nD7, nD7, nC7, nD7, nD7, nC7, nD7, nD7, nC7, nD7, nD7, nC7
            B13BA : D5D7 D7D5         
(1)  216/   B13BE : 06D7                	dc.b	$06, nD7
(1)  217/   B13C0 : (MACRO)             	smpsJump            OOZ_Loop01
(1)  217/   B13C0 : F6                          dc.b    $F6
(1)  217/   B13C1 : 9193                                dc.w    z80_ptr(OOZ_LOOP01)
(1)  218/   B13C3 :                     
(1)  219/   B13C3 :                     ; PSG1 Data
(1)  220/   B13C3 :                     OOZ_PSG1:
(1)  221/   B13C3 : (MACRO)             	smpsAlterNote       $01
(1)  221/   B13C3 :  (MACRO-2)                  smpsDetune      $01
(1)  221/   B13C3 : E101                        dc.b    $E1,$01
(1)  222/   B13C5 : 8002 8001           	dc.b	nRst, $02, nRst, $01
(1)  223/   B13C9 : (MACRO)             	smpsCall            OOZ_Call02
(1)  223/   B13C9 : F8                          dc.b    $F8
(1)  223/   B13CA : 2F91                                dc.w    z80_ptr(OOZ_CALL02)
(1)  224/   B13CC :                     
(1)  225/   B13CC :                     OOZ_Jump02:
(1)  226/   B13CC : (MACRO)             	smpsPSGAlterVol     $03
(1)  226/   B13CC : EC03                        dc.b    $EC,$03
(1)  227/   B13CE : 8060 8060           	dc.b	nRst, $60, nRst, $60
(1)  228/   B13D2 : (MACRO)             	smpsPSGvoice        $00
(1)  228/   B13D2 : F500                        dc.b    $F5,$00
(1)  229/   B13D4 : (MACRO)             	smpsPSGAlterVol     $FD
(1)  229/   B13D4 : ECFD                        dc.b    $EC,$FD
(1)  230/   B13D6 : (MACRO)             	smpsCall            OOZ_Call04
(1)  230/   B13D6 : F8                          dc.b    $F8
(1)  230/   B13D7 : 8791                                dc.w    z80_ptr(OOZ_CALL04)
(1)  231/   B13D9 : (MACRO)             	smpsCall            OOZ_Call05
(1)  231/   B13D9 : F8                          dc.b    $F8
(1)  231/   B13DA : C391                                dc.w    z80_ptr(OOZ_CALL05)
(1)  232/   B13DC : (MACRO)             	smpsAlterPitch      $F4
(1)  232/   B13DC :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  232/   B13DC : FBF4                                dc.b    $FB,$F4
(1)  233/   B13DE : (MACRO)             	smpsCall            OOZ_Call06
(1)  233/   B13DE : F8                          dc.b    $F8
(1)  233/   B13DF : F591                                dc.w    z80_ptr(OOZ_CALL06)
(1)  234/   B13E1 : (MACRO)             	smpsAlterPitch      $0C
(1)  234/   B13E1 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  234/   B13E1 : FB0C                                dc.b    $FB,$0C
(1)  235/   B13E3 : (MACRO)             	smpsJump            OOZ_Jump02
(1)  235/   B13E3 : F6                          dc.b    $F6
(1)  235/   B13E4 : CC93                                dc.w    z80_ptr(OOZ_JUMP02)
(1)  236/   B13E6 :                     
(1)  237/   B13E6 :                     ; PSG2 Data
(1)  238/   B13E6 :                     OOZ_PSG2:
(1)  239/   B13E6 : 8001                	dc.b	nRst, $01
(1)  240/   B13E8 : (MACRO)             	smpsCall            OOZ_Call02
(1)  240/   B13E8 : F8                          dc.b    $F8
(1)  240/   B13E9 : 2F91                                dc.w    z80_ptr(OOZ_CALL02)
(1)  241/   B13EB :                     
(1)  242/   B13EB :                     OOZ_Jump01:
(1)  243/   B13EB : (MACRO)             	smpsPSGAlterVol     $03
(1)  243/   B13EB : EC03                        dc.b    $EC,$03
(1)  244/   B13ED : 8018 8003 8001      	dc.b	nRst, $18, nRst, $03, nRst, $01
(1)  245/   B13F3 : (MACRO)             	smpsPSGvoice        fTone_0C
(1)  245/   B13F3 : F50C                        dc.b    $F5,FTONE_0C
(1)  246/   B13F5 : (MACRO)             	smpsPSGAlterVol     $FE
(1)  246/   B13F5 : ECFE                        dc.b    $EC,$FE
(1)  247/   B13F7 : C901 CB02 CC02 CF2D 	dc.b	nC6, $01, nD6, $02, nEb6, $02, nFs6, $2D, nAb6, $01, nG6, $0B
            B13FF : D101 D00B         
(1)  248/   B1403 : CC01 CB30 E730 E705 	dc.b	nEb6, $01, nD6, $30, smpsNoAttack, $30, smpsNoAttack, $05
(1)  249/   B140B : (MACRO)             	smpsPSGAlterVol     $02
(1)  249/   B140B : EC02                        dc.b    $EC,$02
(1)  250/   B140D : (MACRO)             	smpsPSGvoice        $00
(1)  250/   B140D : F500                        dc.b    $F5,$00
(1)  251/   B140F : (MACRO)             	smpsPSGAlterVol     $FD
(1)  251/   B140F : ECFD                        dc.b    $EC,$FD
(1)  252/   B1411 : (MACRO)             	smpsCall            OOZ_Call04
(1)  252/   B1411 : F8                          dc.b    $F8
(1)  252/   B1412 : 8791                                dc.w    z80_ptr(OOZ_CALL04)
(1)  253/   B1414 : (MACRO)             	smpsCall            OOZ_Call05
(1)  253/   B1414 : F8                          dc.b    $F8
(1)  253/   B1415 : C391                                dc.w    z80_ptr(OOZ_CALL05)
(1)  254/   B1417 : (MACRO)             	smpsAlterPitch      $F4
(1)  254/   B1417 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  254/   B1417 : FBF4                                dc.b    $FB,$F4
(1)  255/   B1419 : (MACRO)             	smpsCall            OOZ_Call06
(1)  255/   B1419 : F8                          dc.b    $F8
(1)  255/   B141A : F591                                dc.w    z80_ptr(OOZ_CALL06)
(1)  256/   B141C : (MACRO)             	smpsAlterPitch      $0C
(1)  256/   B141C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  256/   B141C : FB0C                                dc.b    $FB,$0C
(1)  257/   B141E : (MACRO)             	smpsJump            OOZ_Jump01
(1)  257/   B141E : F6                          dc.b    $F6
(1)  257/   B141F : EB93                                dc.w    z80_ptr(OOZ_JUMP01)
(1)  258/   B1421 :                     
(1)  259/   B1421 :                     ; PSG3 Data
(1)  260/   B1421 :                     OOZ_PSG3:
(1)  261/   B1421 : 8006 8030 C103 80C1 	dc.b	nRst, $06, nRst, $30, nE5, $03, nRst, nE5, $03, nRst, $0F, nE5
            B1429 : 0380 0FC1         
(1)  262/   B142D : 0380 09C1 0380 8006 	dc.b	$03, nRst, $09, nE5, $03, nRst, nRst, $06, nE5, $03, nRst, nE5
            B1435 : C103 80C1         
(1)  263/   B1439 : 0380 0FC1 0380 C103 	dc.b	$03, nRst, $0F, nE5, $03, nRst, nE5, $03, nRst, nE5, $03, $03
            B1441 : 80C1 0303         
(1)  264/   B1445 : 8006 C103 80C1 0380 	dc.b	nRst, $06, nE5, $03, nRst, nE5, $03, nRst, $03, nRst, $18, nRst
            B144D : 0380 1880         
(1)  265/   B1451 : 0C                  	dc.b	$0C
(1)  266/   B1452 :                     
(1)  267/   B1452 :                     OOZ_Loop08:
(1)  268/   B1452 : C103 C1C1 80C1 80C1 	dc.b	nE5, $03, nE5, nE5, nRst, nE5, nRst, nE5, nE5, nE5, nE5, nE5
            B145A : C1C1 C1C1         
(1)  269/   B145E : 80C1 80C1 80C1 C1C1 	dc.b	nRst, nE5, nRst, nE5, nRst, nE5, nE5, nE5, nRst, nE5, nRst, nE5
            B1466 : 80C1 80C1         
(1)  270/   B146A : C1C1 C1C1 80C1 80C1 	dc.b	nE5, nE5, nE5, nE5, nRst, nE5, nRst, nE5, nE5
            B1472 : C1               
(1)  271/   B1473 : (MACRO)             	smpsLoop            $00, $0A, OOZ_Loop08
(1)  271/   B1473 : F7                          dc.b    $F7
(1)  271/   B1474 : 000A                        dc.b    $00,$0A
(1)  271/   B1476 : 5294                                dc.w    z80_ptr(OOZ_LOOP08)
(1)  272/   B1478 : 8030                	dc.b	nRst, $30
(1)  273/   B147A : (MACRO)             	smpsJump            OOZ_Loop08
(1)  273/   B147A : F6                          dc.b    $F6
(1)  273/   B147B : 5294                                dc.w    z80_ptr(OOZ_LOOP08)
(1)  274/   B147D :                     
(1)  275/   B147D :                     ; DAC Data
(1)  276/   B147D :                     OOZ_DAC:
(1)  277/   B147D : 8006 8030 8080 2A82 	dc.b	nRst, $06, nRst, $30, nRst, nRst, $2A, dSnare, $06
            B1485 : 06               
(1)  278/   B1486 :                     
(1)  279/   B1486 :                     OOZ_Loop00:
(1)  280/   B1486 : 8103 8181 8082 0906 	dc.b	dKick, $03, dKick, dKick, nRst, dSnare, $09, $06, dKick, $03, dKick, nRst
            B148E : 8103 8180         
(1)  281/   B1492 : 8206 8103 8081 8181 	dc.b	dSnare, $06, dKick, $03, nRst, dKick, dKick, dKick, nRst, dSnare, $09, $06
            B149A : 8082 0906         
(1)  282/   B149E : 8103 8180 8206 0303 	dc.b	dKick, $03, dKick, nRst, dSnare, $06, $03, $03
(1)  283/   B14A6 : (MACRO)             	smpsLoop            $00, $0A, OOZ_Loop00
(1)  283/   B14A6 : F7                          dc.b    $F7
(1)  283/   B14A7 : 000A                        dc.b    $00,$0A
(1)  283/   B14A9 : 8694                                dc.w    z80_ptr(OOZ_LOOP00)
(1)  284/   B14AB : 8024 8203 0381 06   	dc.b	nRst, $24, dSnare, $03, $03, dKick, $06
(1)  285/   B14B2 : (MACRO)             	smpsJump            OOZ_Loop00
(1)  285/   B14B2 : F6                          dc.b    $F6
(1)  285/   B14B3 : 8694                                dc.w    z80_ptr(OOZ_LOOP00)
(1)  286/   B14B5 :                     
(1)  287/   B14B5 :                     OOZ_Voices:
(1)  288/   B14B5 :                     ;	Voice $00
(1)  289/   B14B5 :                     ;	$39
(1)  290/   B14B5 :                     ;	$06, $60, $30, $01, 	$3F, $3F, $5F, $5F, 	$11, $0F, $13, $09
(1)  291/   B14B5 :                     ;	$05, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$23, $2C, $97, $80
(1)  292/   B14B5 : (MACRO)             	smpsVcAlgorithm     $01
(1)  292/   B14B5 : =$1                 vcAlgorithm set $01
(1)  293/   B14B5 : (MACRO)             	smpsVcFeedback      $07
(1)  293/   B14B5 : =$7                 vcFeedback set $07
(1)  294/   B14B5 : (MACRO)             	smpsVcUnusedBits    $00
(1)  294/   B14B5 : =$0                 vcUnusedBits set $00
(1)  294/   B14B5 : =$0                 vcD1R1Unk set 0
(1)  294/   B14B5 : =$0                 vcD1R2Unk set 0
(1)  294/   B14B5 : =$0                 vcD1R3Unk set 0
(1)  294/   B14B5 : =$0                 vcD1R4Unk set 0
(1)  295/   B14B5 : (MACRO)             	smpsVcDetune        $00, $03, $06, $00
(1)  295/   B14B5 : =$0                 vcDT1 set $00
(1)  295/   B14B5 : =$3                 vcDT2 set $03
(1)  295/   B14B5 : =$6                 vcDT3 set $06
(1)  295/   B14B5 : =$0                 vcDT4 set $00
(1)  296/   B14B5 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $00, $06
(1)  296/   B14B5 : =$1                 vcCF1 set $01
(1)  296/   B14B5 : =$0                 vcCF2 set $00
(1)  296/   B14B5 : =$0                 vcCF3 set $00
(1)  296/   B14B5 : =$6                 vcCF4 set $06
(1)  297/   B14B5 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  297/   B14B5 : =$1                 vcRS1 set $01
(1)  297/   B14B5 : =$1                 vcRS2 set $01
(1)  297/   B14B5 : =$0                 vcRS3 set $00
(1)  297/   B14B5 : =$0                 vcRS4 set $00
(1)  298/   B14B5 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $3F, $3F
(1)  298/   B14B5 : =$1F                vcAR1 set $1F
(1)  298/   B14B5 : =$1F                vcAR2 set $1F
(1)  298/   B14B5 : =$3F                vcAR3 set $3F
(1)  298/   B14B5 : =$3F                vcAR4 set $3F
(1)  299/   B14B5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  299/   B14B5 : =$0                 vcAM1 set $00<<5
(1)  299/   B14B5 : =$0                 vcAM2 set $00<<5
(1)  299/   B14B5 : =$0                 vcAM3 set $00<<5
(1)  299/   B14B5 : =$0                 vcAM4 set $00<<5
(1)  300/   B14B5 : (MACRO)             	smpsVcDecayRate1    $09, $13, $0F, $11
(1)  300/   B14B5 : =$9                 vcD1R1 set $09
(1)  300/   B14B5 : =$13                vcD1R2 set $13
(1)  300/   B14B5 : =$F                 vcD1R3 set $0F
(1)  300/   B14B5 : =$11                vcD1R4 set $11
(1)  301/   B14B5 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $05
(1)  301/   B14B5 : =$3                 vcD2R1 set $03
(1)  301/   B14B5 : =$4                 vcD2R2 set $04
(1)  301/   B14B5 : =$4                 vcD2R3 set $04
(1)  301/   B14B5 : =$5                 vcD2R4 set $05
(1)  302/   B14B5 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  302/   B14B5 : =$2                 vcDL1 set $02
(1)  302/   B14B5 : =$2                 vcDL2 set $02
(1)  302/   B14B5 : =$2                 vcDL3 set $02
(1)  302/   B14B5 : =$2                 vcDL4 set $02
(1)  303/   B14B5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  303/   B14B5 : =$F                 vcRR1 set $0F
(1)  303/   B14B5 : =$F                 vcRR2 set $0F
(1)  303/   B14B5 : =$F                 vcRR3 set $0F
(1)  303/   B14B5 : =$F                 vcRR4 set $0F
(1)  304/   B14B5 : (MACRO)             	smpsVcTotalLevel    $80, $97, $2C, $23
(1)  304/   B14B5 : =$80                vcTL1 set $80
(1)  304/   B14B5 : =$97                vcTL2 set $97
(1)  304/   B14B5 : =$2C                vcTL3 set $2C
(1)  304/   B14B5 : =$23                vcTL4 set $23
(1)  304/   B14B5 : 39                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  304/   B14B6 :                     ;   0     1     2     3     4     5     6     7
(1)  304/   B14B6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  304/   B14B6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  304/   B14B6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  304/   B14B6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  304/   B14B6 : =$80                vcTLMask1 set $80
(1)  304/   B14B6 :                     
(1)  304/   B14B6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  304/   B14B6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  304/   B14B6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  304/   B14B6 : =$80                vcTLMask1 set $80
(1)  304/   B14B6 : =$0                 vcTL1 set vcTL1&$7F
(1)  304/   B14B6 : =$17                vcTL2 set vcTL2&$7F
(1)  304/   B14B6 : =$2C                vcTL3 set vcTL3&$7F
(1)  304/   B14B6 : =$23                vcTL4 set vcTL4&$7F
(1)  304/   B14B6 :                     
(1)  304/   B14B6 : 0660 3001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  304/   B14BA : 3F3F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  304/   B14BE : 110F 1309                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  304/   B14C2 : 0504 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  304/   B14C6 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  304/   B14CA : 232C 1780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  305/   B14CE :                     
(1)  306/   B14CE :                     ;	Voice $01
(1)  307/   B14CE :                     ;	$3A
(1)  308/   B14CE :                     ;	$01, $07, $01, $01, 	$92, $91, $8F, $56, 	$0E, $0E, $0E, $03
(1)  309/   B14CE :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1)  310/   B14CE : (MACRO)             	smpsVcAlgorithm     $02
(1)  310/   B14CE : =$2                 vcAlgorithm set $02
(1)  311/   B14CE : (MACRO)             	smpsVcFeedback      $07
(1)  311/   B14CE : =$7                 vcFeedback set $07
(1)  312/   B14CE : (MACRO)             	smpsVcUnusedBits    $00
(1)  312/   B14CE : =$0                 vcUnusedBits set $00
(1)  312/   B14CE : =$0                 vcD1R1Unk set 0
(1)  312/   B14CE : =$0                 vcD1R2Unk set 0
(1)  312/   B14CE : =$0                 vcD1R3Unk set 0
(1)  312/   B14CE : =$0                 vcD1R4Unk set 0
(1)  313/   B14CE : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  313/   B14CE : =$0                 vcDT1 set $00
(1)  313/   B14CE : =$0                 vcDT2 set $00
(1)  313/   B14CE : =$0                 vcDT3 set $00
(1)  313/   B14CE : =$0                 vcDT4 set $00
(1)  314/   B14CE : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  314/   B14CE : =$1                 vcCF1 set $01
(1)  314/   B14CE : =$1                 vcCF2 set $01
(1)  314/   B14CE : =$7                 vcCF3 set $07
(1)  314/   B14CE : =$1                 vcCF4 set $01
(1)  315/   B14CE : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  315/   B14CE : =$1                 vcRS1 set $01
(1)  315/   B14CE : =$2                 vcRS2 set $02
(1)  315/   B14CE : =$2                 vcRS3 set $02
(1)  315/   B14CE : =$2                 vcRS4 set $02
(1)  316/   B14CE : (MACRO)             	smpsVcAttackRate    $16, $0F, $11, $12
(1)  316/   B14CE : =$16                vcAR1 set $16
(1)  316/   B14CE : =$F                 vcAR2 set $0F
(1)  316/   B14CE : =$11                vcAR3 set $11
(1)  316/   B14CE : =$12                vcAR4 set $12
(1)  317/   B14CE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  317/   B14CE : =$0                 vcAM1 set $00<<5
(1)  317/   B14CE : =$0                 vcAM2 set $00<<5
(1)  317/   B14CE : =$0                 vcAM3 set $00<<5
(1)  317/   B14CE : =$0                 vcAM4 set $00<<5
(1)  318/   B14CE : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  318/   B14CE : =$3                 vcD1R1 set $03
(1)  318/   B14CE : =$E                 vcD1R2 set $0E
(1)  318/   B14CE : =$E                 vcD1R3 set $0E
(1)  318/   B14CE : =$E                 vcD1R4 set $0E
(1)  319/   B14CE : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  319/   B14CE : =$0                 vcD2R1 set $00
(1)  319/   B14CE : =$0                 vcD2R2 set $00
(1)  319/   B14CE : =$0                 vcD2R3 set $00
(1)  319/   B14CE : =$0                 vcD2R4 set $00
(1)  320/   B14CE : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  320/   B14CE : =$0                 vcDL1 set $00
(1)  320/   B14CE : =$1                 vcDL2 set $01
(1)  320/   B14CE : =$F                 vcDL3 set $0F
(1)  320/   B14CE : =$1                 vcDL4 set $01
(1)  321/   B14CE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  321/   B14CE : =$F                 vcRR1 set $0F
(1)  321/   B14CE : =$F                 vcRR2 set $0F
(1)  321/   B14CE : =$F                 vcRR3 set $0F
(1)  321/   B14CE : =$F                 vcRR4 set $0F
(1)  322/   B14CE : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $17
(1)  322/   B14CE : =$80                vcTL1 set $80
(1)  322/   B14CE : =$27                vcTL2 set $27
(1)  322/   B14CE : =$28                vcTL3 set $28
(1)  322/   B14CE : =$17                vcTL4 set $17
(1)  322/   B14CE : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  322/   B14CF :                     ;   0     1     2     3     4     5     6     7
(1)  322/   B14CF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  322/   B14CF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  322/   B14CF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  322/   B14CF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  322/   B14CF : =$80                vcTLMask1 set $80
(1)  322/   B14CF :                     
(1)  322/   B14CF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  322/   B14CF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  322/   B14CF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  322/   B14CF : =$80                vcTLMask1 set $80
(1)  322/   B14CF : =$0                 vcTL1 set vcTL1&$7F
(1)  322/   B14CF : =$27                vcTL2 set vcTL2&$7F
(1)  322/   B14CF : =$28                vcTL3 set vcTL3&$7F
(1)  322/   B14CF : =$17                vcTL4 set vcTL4&$7F
(1)  322/   B14CF :                     
(1)  322/   B14CF : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  322/   B14D3 : 9291 8F56                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  322/   B14D7 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  322/   B14DB : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  322/   B14DF : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  322/   B14E3 : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  323/   B14E7 :                     
(1)  324/   B14E7 :                     ;	Voice $02
(1)  325/   B14E7 :                     ;	$3E
(1)  326/   B14E7 :                     ;	$56, $16, $34, $14, 	$4E, $55, $95, $58, 	$0E, $11, $14, $24
(1)  327/   B14E7 :                     ;	$23, $22, $06, $05, 	$3F, $4F, $2F, $0F, 	$19, $8E, $87, $87
(1)  328/   B14E7 : (MACRO)             	smpsVcAlgorithm     $06
(1)  328/   B14E7 : =$6                 vcAlgorithm set $06
(1)  329/   B14E7 : (MACRO)             	smpsVcFeedback      $07
(1)  329/   B14E7 : =$7                 vcFeedback set $07
(1)  330/   B14E7 : (MACRO)             	smpsVcUnusedBits    $00, $01, $00, $00, $00
(1)  330/   B14E7 : =$0                 vcUnusedBits set $00
(1)  330/   B14E7 : =$20                vcD1R1Unk set $01<<5
(1)  330/   B14E7 : =$0                 vcD1R2Unk set $00<<5
(1)  330/   B14E7 : =$0                 vcD1R3Unk set $00<<5
(1)  330/   B14E7 : =$0                 vcD1R4Unk set $00<<5
(1)  331/   B14E7 : (MACRO)             	smpsVcDetune        $01, $03, $01, $05
(1)  331/   B14E7 : =$1                 vcDT1 set $01
(1)  331/   B14E7 : =$3                 vcDT2 set $03
(1)  331/   B14E7 : =$1                 vcDT3 set $01
(1)  331/   B14E7 : =$5                 vcDT4 set $05
(1)  332/   B14E7 : (MACRO)             	smpsVcCoarseFreq    $04, $04, $06, $06
(1)  332/   B14E7 : =$4                 vcCF1 set $04
(1)  332/   B14E7 : =$4                 vcCF2 set $04
(1)  332/   B14E7 : =$6                 vcCF3 set $06
(1)  332/   B14E7 : =$6                 vcCF4 set $06
(1)  333/   B14E7 : (MACRO)             	smpsVcRateScale     $01, $02, $01, $01
(1)  333/   B14E7 : =$1                 vcRS1 set $01
(1)  333/   B14E7 : =$2                 vcRS2 set $02
(1)  333/   B14E7 : =$1                 vcRS3 set $01
(1)  333/   B14E7 : =$1                 vcRS4 set $01
(1)  334/   B14E7 : (MACRO)             	smpsVcAttackRate    $18, $15, $15, $0E
(1)  334/   B14E7 : =$18                vcAR1 set $18
(1)  334/   B14E7 : =$15                vcAR2 set $15
(1)  334/   B14E7 : =$15                vcAR3 set $15
(1)  334/   B14E7 : =$E                 vcAR4 set $0E
(1)  335/   B14E7 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  335/   B14E7 : =$0                 vcAM1 set $00<<5
(1)  335/   B14E7 : =$0                 vcAM2 set $00<<5
(1)  335/   B14E7 : =$0                 vcAM3 set $00<<5
(1)  335/   B14E7 : =$0                 vcAM4 set $00<<5
(1)  336/   B14E7 : (MACRO)             	smpsVcDecayRate1    $04, $14, $11, $0E
(1)  336/   B14E7 : =$4                 vcD1R1 set $04
(1)  336/   B14E7 : =$14                vcD1R2 set $14
(1)  336/   B14E7 : =$11                vcD1R3 set $11
(1)  336/   B14E7 : =$E                 vcD1R4 set $0E
(1)  337/   B14E7 : (MACRO)             	smpsVcDecayRate2    $05, $06, $22, $23
(1)  337/   B14E7 : =$5                 vcD2R1 set $05
(1)  337/   B14E7 : =$6                 vcD2R2 set $06
(1)  337/   B14E7 : =$22                vcD2R3 set $22
(1)  337/   B14E7 : =$23                vcD2R4 set $23
(1)  338/   B14E7 : (MACRO)             	smpsVcDecayLevel    $00, $02, $04, $03
(1)  338/   B14E7 : =$0                 vcDL1 set $00
(1)  338/   B14E7 : =$2                 vcDL2 set $02
(1)  338/   B14E7 : =$4                 vcDL3 set $04
(1)  338/   B14E7 : =$3                 vcDL4 set $03
(1)  339/   B14E7 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  339/   B14E7 : =$F                 vcRR1 set $0F
(1)  339/   B14E7 : =$F                 vcRR2 set $0F
(1)  339/   B14E7 : =$F                 vcRR3 set $0F
(1)  339/   B14E7 : =$F                 vcRR4 set $0F
(1)  340/   B14E7 : (MACRO)             	smpsVcTotalLevel    $87, $87, $8E, $19
(1)  340/   B14E7 : =$87                vcTL1 set $87
(1)  340/   B14E7 : =$87                vcTL2 set $87
(1)  340/   B14E7 : =$8E                vcTL3 set $8E
(1)  340/   B14E7 : =$19                vcTL4 set $19
(1)  340/   B14E7 : 3E                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  340/   B14E8 :                     ;   0     1     2     3     4     5     6     7
(1)  340/   B14E8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  340/   B14E8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  340/   B14E8 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  340/   B14E8 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  340/   B14E8 : =$80                vcTLMask1 set $80
(1)  340/   B14E8 :                     
(1)  340/   B14E8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  340/   B14E8 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  340/   B14E8 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  340/   B14E8 : =$80                vcTLMask1 set $80
(1)  340/   B14E8 : =$7                 vcTL1 set vcTL1&$7F
(1)  340/   B14E8 : =$7                 vcTL2 set vcTL2&$7F
(1)  340/   B14E8 : =$E                 vcTL3 set vcTL3&$7F
(1)  340/   B14E8 : =$19                vcTL4 set vcTL4&$7F
(1)  340/   B14E8 :                     
(1)  340/   B14E8 : 5616 3414                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  340/   B14EC : 4E55 9558                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  340/   B14F0 : 0E11 1424                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  340/   B14F4 : 2322 0605                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  340/   B14F8 : 3F4F 2F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  340/   B14FC : 198E 8787                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  341/   B1500 :                     
(1)  342/   B1500 :                     ;	Voice $03
(1)  343/   B1500 :                     ;	$36
(1)  344/   B1500 :                     ;	$01, $00, $72, $33, 	$9C, $9C, $17, $12, 	$0F, $14, $12, $12
(1)  345/   B1500 :                     ;	$00, $00, $0A, $0A, 	$FF, $FF, $FF, $FF, 	$05, $80, $80, $80
(1)  346/   B1500 : (MACRO)             	smpsVcAlgorithm     $06
(1)  346/   B1500 : =$6                 vcAlgorithm set $06
(1)  347/   B1500 : (MACRO)             	smpsVcFeedback      $06
(1)  347/   B1500 : =$6                 vcFeedback set $06
(1)  348/   B1500 : (MACRO)             	smpsVcUnusedBits    $00
(1)  348/   B1500 : =$0                 vcUnusedBits set $00
(1)  348/   B1500 : =$0                 vcD1R1Unk set 0
(1)  348/   B1500 : =$0                 vcD1R2Unk set 0
(1)  348/   B1500 : =$0                 vcD1R3Unk set 0
(1)  348/   B1500 : =$0                 vcD1R4Unk set 0
(1)  349/   B1500 : (MACRO)             	smpsVcDetune        $03, $07, $00, $00
(1)  349/   B1500 : =$3                 vcDT1 set $03
(1)  349/   B1500 : =$7                 vcDT2 set $07
(1)  349/   B1500 : =$0                 vcDT3 set $00
(1)  349/   B1500 : =$0                 vcDT4 set $00
(1)  350/   B1500 : (MACRO)             	smpsVcCoarseFreq    $03, $02, $00, $01
(1)  350/   B1500 : =$3                 vcCF1 set $03
(1)  350/   B1500 : =$2                 vcCF2 set $02
(1)  350/   B1500 : =$0                 vcCF3 set $00
(1)  350/   B1500 : =$1                 vcCF4 set $01
(1)  351/   B1500 : (MACRO)             	smpsVcRateScale     $00, $00, $02, $02
(1)  351/   B1500 : =$0                 vcRS1 set $00
(1)  351/   B1500 : =$0                 vcRS2 set $00
(1)  351/   B1500 : =$2                 vcRS3 set $02
(1)  351/   B1500 : =$2                 vcRS4 set $02
(1)  352/   B1500 : (MACRO)             	smpsVcAttackRate    $12, $17, $1C, $1C
(1)  352/   B1500 : =$12                vcAR1 set $12
(1)  352/   B1500 : =$17                vcAR2 set $17
(1)  352/   B1500 : =$1C                vcAR3 set $1C
(1)  352/   B1500 : =$1C                vcAR4 set $1C
(1)  353/   B1500 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  353/   B1500 : =$0                 vcAM1 set $00<<5
(1)  353/   B1500 : =$0                 vcAM2 set $00<<5
(1)  353/   B1500 : =$0                 vcAM3 set $00<<5
(1)  353/   B1500 : =$0                 vcAM4 set $00<<5
(1)  354/   B1500 : (MACRO)             	smpsVcDecayRate1    $12, $12, $14, $0F
(1)  354/   B1500 : =$12                vcD1R1 set $12
(1)  354/   B1500 : =$12                vcD1R2 set $12
(1)  354/   B1500 : =$14                vcD1R3 set $14
(1)  354/   B1500 : =$F                 vcD1R4 set $0F
(1)  355/   B1500 : (MACRO)             	smpsVcDecayRate2    $0A, $0A, $00, $00
(1)  355/   B1500 : =$A                 vcD2R1 set $0A
(1)  355/   B1500 : =$A                 vcD2R2 set $0A
(1)  355/   B1500 : =$0                 vcD2R3 set $00
(1)  355/   B1500 : =$0                 vcD2R4 set $00
(1)  356/   B1500 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)  356/   B1500 : =$F                 vcDL1 set $0F
(1)  356/   B1500 : =$F                 vcDL2 set $0F
(1)  356/   B1500 : =$F                 vcDL3 set $0F
(1)  356/   B1500 : =$F                 vcDL4 set $0F
(1)  357/   B1500 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  357/   B1500 : =$F                 vcRR1 set $0F
(1)  357/   B1500 : =$F                 vcRR2 set $0F
(1)  357/   B1500 : =$F                 vcRR3 set $0F
(1)  357/   B1500 : =$F                 vcRR4 set $0F
(1)  358/   B1500 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $05
(1)  358/   B1500 : =$80                vcTL1 set $80
(1)  358/   B1500 : =$80                vcTL2 set $80
(1)  358/   B1500 : =$80                vcTL3 set $80
(1)  358/   B1500 : =$5                 vcTL4 set $05
(1)  358/   B1500 : 36                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  358/   B1501 :                     ;   0     1     2     3     4     5     6     7
(1)  358/   B1501 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  358/   B1501 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  358/   B1501 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  358/   B1501 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  358/   B1501 : =$80                vcTLMask1 set $80
(1)  358/   B1501 :                     
(1)  358/   B1501 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  358/   B1501 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  358/   B1501 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  358/   B1501 : =$80                vcTLMask1 set $80
(1)  358/   B1501 : =$0                 vcTL1 set vcTL1&$7F
(1)  358/   B1501 : =$0                 vcTL2 set vcTL2&$7F
(1)  358/   B1501 : =$0                 vcTL3 set vcTL3&$7F
(1)  358/   B1501 : =$5                 vcTL4 set vcTL4&$7F
(1)  358/   B1501 :                     
(1)  358/   B1501 : 0100 7233                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  358/   B1505 : 9C9C 1712                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  358/   B1509 : 0F14 1212                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  358/   B150D : 0000 0A0A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  358/   B1511 : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  358/   B1515 : 0580 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  359/   B1519 :                     
(1)  360/   B1519 :                     ;	Voice $04
(1)  361/   B1519 :                     ;	$06
(1)  362/   B1519 :                     ;	$62, $23, $13, $71, 	$0D, $0D, $6D, $0E, 	$09, $06, $06, $06
(1)  363/   B1519 :                     ;	$00, $00, $00, $00, 	$1F, $2F, $2F, $2F, 	$10, $94, $97, $80
(1)  364/   B1519 : (MACRO)             	smpsVcAlgorithm     $06
(1)  364/   B1519 : =$6                 vcAlgorithm set $06
(1)  365/   B1519 : (MACRO)             	smpsVcFeedback      $00
(1)  365/   B1519 : =$0                 vcFeedback set $00
(1)  366/   B1519 : (MACRO)             	smpsVcUnusedBits    $00
(1)  366/   B1519 : =$0                 vcUnusedBits set $00
(1)  366/   B1519 : =$0                 vcD1R1Unk set 0
(1)  366/   B1519 : =$0                 vcD1R2Unk set 0
(1)  366/   B1519 : =$0                 vcD1R3Unk set 0
(1)  366/   B1519 : =$0                 vcD1R4Unk set 0
(1)  367/   B1519 : (MACRO)             	smpsVcDetune        $07, $01, $02, $06
(1)  367/   B1519 : =$7                 vcDT1 set $07
(1)  367/   B1519 : =$1                 vcDT2 set $01
(1)  367/   B1519 : =$2                 vcDT3 set $02
(1)  367/   B1519 : =$6                 vcDT4 set $06
(1)  368/   B1519 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $03, $02
(1)  368/   B1519 : =$1                 vcCF1 set $01
(1)  368/   B1519 : =$3                 vcCF2 set $03
(1)  368/   B1519 : =$3                 vcCF3 set $03
(1)  368/   B1519 : =$2                 vcCF4 set $02
(1)  369/   B1519 : (MACRO)             	smpsVcRateScale     $00, $01, $00, $00
(1)  369/   B1519 : =$0                 vcRS1 set $00
(1)  369/   B1519 : =$1                 vcRS2 set $01
(1)  369/   B1519 : =$0                 vcRS3 set $00
(1)  369/   B1519 : =$0                 vcRS4 set $00
(1)  370/   B1519 : (MACRO)             	smpsVcAttackRate    $0E, $2D, $0D, $0D
(1)  370/   B1519 : =$E                 vcAR1 set $0E
(1)  370/   B1519 : =$2D                vcAR2 set $2D
(1)  370/   B1519 : =$D                 vcAR3 set $0D
(1)  370/   B1519 : =$D                 vcAR4 set $0D
(1)  371/   B1519 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  371/   B1519 : =$0                 vcAM1 set $00<<5
(1)  371/   B1519 : =$0                 vcAM2 set $00<<5
(1)  371/   B1519 : =$0                 vcAM3 set $00<<5
(1)  371/   B1519 : =$0                 vcAM4 set $00<<5
(1)  372/   B1519 : (MACRO)             	smpsVcDecayRate1    $06, $06, $06, $09
(1)  372/   B1519 : =$6                 vcD1R1 set $06
(1)  372/   B1519 : =$6                 vcD1R2 set $06
(1)  372/   B1519 : =$6                 vcD1R3 set $06
(1)  372/   B1519 : =$9                 vcD1R4 set $09
(1)  373/   B1519 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  373/   B1519 : =$0                 vcD2R1 set $00
(1)  373/   B1519 : =$0                 vcD2R2 set $00
(1)  373/   B1519 : =$0                 vcD2R3 set $00
(1)  373/   B1519 : =$0                 vcD2R4 set $00
(1)  374/   B1519 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $01
(1)  374/   B1519 : =$2                 vcDL1 set $02
(1)  374/   B1519 : =$2                 vcDL2 set $02
(1)  374/   B1519 : =$2                 vcDL3 set $02
(1)  374/   B1519 : =$1                 vcDL4 set $01
(1)  375/   B1519 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  375/   B1519 : =$F                 vcRR1 set $0F
(1)  375/   B1519 : =$F                 vcRR2 set $0F
(1)  375/   B1519 : =$F                 vcRR3 set $0F
(1)  375/   B1519 : =$F                 vcRR4 set $0F
(1)  376/   B1519 : (MACRO)             	smpsVcTotalLevel    $80, $97, $94, $10
(1)  376/   B1519 : =$80                vcTL1 set $80
(1)  376/   B1519 : =$97                vcTL2 set $97
(1)  376/   B1519 : =$94                vcTL3 set $94
(1)  376/   B1519 : =$10                vcTL4 set $10
(1)  376/   B1519 : 06                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  376/   B151A :                     ;   0     1     2     3     4     5     6     7
(1)  376/   B151A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  376/   B151A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  376/   B151A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  376/   B151A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  376/   B151A : =$80                vcTLMask1 set $80
(1)  376/   B151A :                     
(1)  376/   B151A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  376/   B151A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  376/   B151A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  376/   B151A : =$80                vcTLMask1 set $80
(1)  376/   B151A : =$0                 vcTL1 set vcTL1&$7F
(1)  376/   B151A : =$17                vcTL2 set vcTL2&$7F
(1)  376/   B151A : =$14                vcTL3 set vcTL3&$7F
(1)  376/   B151A : =$10                vcTL4 set vcTL4&$7F
(1)  376/   B151A :                     
(1)  376/   B151A : 6223 1371                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  376/   B151E : 0D0D 6D0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  376/   B1522 : 0906 0606                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  376/   B1526 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  376/   B152A : 1F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  376/   B152E : 1094 9780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  377/   B1532 :                     
(1)  378/   B1532 :                     ;	Voice $05
(1)  379/   B1532 :                     ;	$14
(1)  380/   B1532 :                     ;	$58, $16, $38, $16, 	$51, $5E, $8E, $4F, 	$0E, $0A, $04, $04
(1)  381/   B1532 :                     ;	$03, $02, $00, $00, 	$3F, $4F, $2F, $0F, 	$0F, $90, $33, $80
(1)  382/   B1532 : (MACRO)             	smpsVcAlgorithm     $04
(1)  382/   B1532 : =$4                 vcAlgorithm set $04
(1)  383/   B1532 : (MACRO)             	smpsVcFeedback      $02
(1)  383/   B1532 : =$2                 vcFeedback set $02
(1)  384/   B1532 : (MACRO)             	smpsVcUnusedBits    $00
(1)  384/   B1532 : =$0                 vcUnusedBits set $00
(1)  384/   B1532 : =$0                 vcD1R1Unk set 0
(1)  384/   B1532 : =$0                 vcD1R2Unk set 0
(1)  384/   B1532 : =$0                 vcD1R3Unk set 0
(1)  384/   B1532 : =$0                 vcD1R4Unk set 0
(1)  385/   B1532 : (MACRO)             	smpsVcDetune        $01, $03, $01, $05
(1)  385/   B1532 : =$1                 vcDT1 set $01
(1)  385/   B1532 : =$3                 vcDT2 set $03
(1)  385/   B1532 : =$1                 vcDT3 set $01
(1)  385/   B1532 : =$5                 vcDT4 set $05
(1)  386/   B1532 : (MACRO)             	smpsVcCoarseFreq    $06, $08, $06, $08
(1)  386/   B1532 : =$6                 vcCF1 set $06
(1)  386/   B1532 : =$8                 vcCF2 set $08
(1)  386/   B1532 : =$6                 vcCF3 set $06
(1)  386/   B1532 : =$8                 vcCF4 set $08
(1)  387/   B1532 : (MACRO)             	smpsVcRateScale     $01, $02, $01, $01
(1)  387/   B1532 : =$1                 vcRS1 set $01
(1)  387/   B1532 : =$2                 vcRS2 set $02
(1)  387/   B1532 : =$1                 vcRS3 set $01
(1)  387/   B1532 : =$1                 vcRS4 set $01
(1)  388/   B1532 : (MACRO)             	smpsVcAttackRate    $0F, $0E, $1E, $11
(1)  388/   B1532 : =$F                 vcAR1 set $0F
(1)  388/   B1532 : =$E                 vcAR2 set $0E
(1)  388/   B1532 : =$1E                vcAR3 set $1E
(1)  388/   B1532 : =$11                vcAR4 set $11
(1)  389/   B1532 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  389/   B1532 : =$0                 vcAM1 set $00<<5
(1)  389/   B1532 : =$0                 vcAM2 set $00<<5
(1)  389/   B1532 : =$0                 vcAM3 set $00<<5
(1)  389/   B1532 : =$0                 vcAM4 set $00<<5
(1)  390/   B1532 : (MACRO)             	smpsVcDecayRate1    $04, $04, $0A, $0E
(1)  390/   B1532 : =$4                 vcD1R1 set $04
(1)  390/   B1532 : =$4                 vcD1R2 set $04
(1)  390/   B1532 : =$A                 vcD1R3 set $0A
(1)  390/   B1532 : =$E                 vcD1R4 set $0E
(1)  391/   B1532 : (MACRO)             	smpsVcDecayRate2    $00, $00, $02, $03
(1)  391/   B1532 : =$0                 vcD2R1 set $00
(1)  391/   B1532 : =$0                 vcD2R2 set $00
(1)  391/   B1532 : =$2                 vcD2R3 set $02
(1)  391/   B1532 : =$3                 vcD2R4 set $03
(1)  392/   B1532 : (MACRO)             	smpsVcDecayLevel    $00, $02, $04, $03
(1)  392/   B1532 : =$0                 vcDL1 set $00
(1)  392/   B1532 : =$2                 vcDL2 set $02
(1)  392/   B1532 : =$4                 vcDL3 set $04
(1)  392/   B1532 : =$3                 vcDL4 set $03
(1)  393/   B1532 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  393/   B1532 : =$F                 vcRR1 set $0F
(1)  393/   B1532 : =$F                 vcRR2 set $0F
(1)  393/   B1532 : =$F                 vcRR3 set $0F
(1)  393/   B1532 : =$F                 vcRR4 set $0F
(1)  394/   B1532 : (MACRO)             	smpsVcTotalLevel    $80, $33, $90, $0F
(1)  394/   B1532 : =$80                vcTL1 set $80
(1)  394/   B1532 : =$33                vcTL2 set $33
(1)  394/   B1532 : =$90                vcTL3 set $90
(1)  394/   B1532 : =$F                 vcTL4 set $0F
(1)  394/   B1532 : 14                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  394/   B1533 :                     ;   0     1     2     3     4     5     6     7
(1)  394/   B1533 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  394/   B1533 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  394/   B1533 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  394/   B1533 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  394/   B1533 : =$80                vcTLMask1 set $80
(1)  394/   B1533 :                     
(1)  394/   B1533 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  394/   B1533 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  394/   B1533 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  394/   B1533 : =$80                vcTLMask1 set $80
(1)  394/   B1533 : =$0                 vcTL1 set vcTL1&$7F
(1)  394/   B1533 : =$33                vcTL2 set vcTL2&$7F
(1)  394/   B1533 : =$10                vcTL3 set vcTL3&$7F
(1)  394/   B1533 : =$F                 vcTL4 set vcTL4&$7F
(1)  394/   B1533 :                     
(1)  394/   B1533 : 5816 3816                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  394/   B1537 : 515E 8E4F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  394/   B153B : 0E0A 0404                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  394/   B153F : 0302 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  394/   B1543 : 3F4F 2F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  394/   B1547 : 0F90 3380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  395/   B154B :                     
(1)  396/   B154B :                     
   33/   B154B :                        Music_05:		include		"music-improved/85 - MTZ.asm"
(1)    1/   B154B :                     MTZ_Header:
(1)    2/   B154B : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B154B :                     
(1)    2/   B154B : =$2                 SourceDriver set 2
(1)    2/   B154B :                     
(1)    2/   B154B : =$0                 SourceSMPS2ASM set 0
(1)    2/   B154B :                     
(1)    2/   B154B : =$B154B             songStart set *
(1)    2/   B154B :                     
(1)    2/   B154B :                     
(1)    3/   B154B : (MACRO)             	smpsHeaderVoice     MTZ_Voices
(1)    3/   B154B : 309A                                dc.w    z80_ptr(MTZ_VOICES)
(1)    4/   B154D : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B154D : 0603                        dc.b    $06,$03
(1)    5/   B154F : (MACRO)             	smpsHeaderTempo     $01, $EA
(1)    5/   B154F : 01                          dc.b    $01
(1)    5/   B1550 :  (MACRO-2)                  convertMainTempoMod $EA
(1)    5/   B1550 : 16                                          dc.b    s2TempotoS3($EA)
(1)    6/   B1551 :                     
(1)    7/   B1551 : (MACRO)             	smpsHeaderDAC       MTZ_DAC
(1)    7/   B1551 :  (MACRO-2)                  CheckedChannelPointer MTZ_DAC
(1)    7/   B1551 : FB99                                dc.w    z80_ptr(MTZ_DAC)
(1)    7/   B1553 : 0000                                dc.w    $00
(1)    8/   B1555 : (MACRO)             	smpsHeaderFM        MTZ_FM1,	$F4, $0E
(1)    8/   B1555 :  (MACRO-2)                  CheckedChannelPointer MTZ_FM1
(1)    8/   B1555 : 8395                                dc.w    z80_ptr(MTZ_FM1)
(1)    8/   B1557 : F40E                        dc.b    $F4,$0E
(1)    9/   B1559 : (MACRO)             	smpsHeaderFM        MTZ_FM2,	$18, $0A
(1)    9/   B1559 :  (MACRO-2)                  CheckedChannelPointer MTZ_FM2
(1)    9/   B1559 : AF98                                dc.w    z80_ptr(MTZ_FM2)
(1)    9/   B155B : 180A                        dc.b    $18,$0A
(1)   10/   B155D : (MACRO)             	smpsHeaderFM        MTZ_FM3,	$0C, $14
(1)   10/   B155D :  (MACRO-2)                  CheckedChannelPointer MTZ_FM3
(1)   10/   B155D : F096                                dc.w    z80_ptr(MTZ_FM3)
(1)   10/   B155F : 0C14                        dc.b    $0C,$14
(1)   11/   B1561 : (MACRO)             	smpsHeaderFM        MTZ_FM4,	$0C, $16
(1)   11/   B1561 :  (MACRO-2)                  CheckedChannelPointer MTZ_FM4
(1)   11/   B1561 : 8A97                                dc.w    z80_ptr(MTZ_FM4)
(1)   11/   B1563 : 0C16                        dc.b    $0C,$16
(1)   12/   B1565 : (MACRO)             	smpsHeaderFM        MTZ_FM5,	$0C, $16
(1)   12/   B1565 :  (MACRO-2)                  CheckedChannelPointer MTZ_FM5
(1)   12/   B1565 : 2C98                                dc.w    z80_ptr(MTZ_FM5)
(1)   12/   B1567 : 0C16                        dc.b    $0C,$16
(1)   13/   B1569 : (MACRO)             	smpsHeaderPSG       MTZ_PSG1,	$E8, $06, $00, $00
(1)   13/   B1569 :  (MACRO-2)                  CheckedChannelPointer MTZ_PSG1
(1)   13/   B1569 : 7B95                                dc.w    z80_ptr(MTZ_PSG1)
(1)   13/   B156B :  (MACRO-2)                  PSGPitchConvert $E8
(1)   13/   B156B : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   13/   B156C : 0600 00                     dc.b    $06,$00,$00
(1)   14/   B156F : (MACRO)             	smpsHeaderPSG       MTZ_PSG2,	$DC, $08, $00, $00
(1)   14/   B156F :  (MACRO-2)                  CheckedChannelPointer MTZ_PSG2
(1)   14/   B156F : 7E95                                dc.w    z80_ptr(MTZ_PSG2)
(1)   14/   B1571 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   B1571 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   B1572 : 0800 00                     dc.b    $08,$00,$00
(1)   15/   B1575 : (MACRO)             	smpsHeaderPSG       MTZ_PSG3,	$00, $02, $00, fTone_03
(1)   15/   B1575 :  (MACRO-2)                  CheckedChannelPointer MTZ_PSG3
(1)   15/   B1575 : 239A                                dc.w    z80_ptr(MTZ_PSG3)
(1)   15/   B1577 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B1577 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B1578 : 0200 03                     dc.b    $02,$00,FTONE_03
(1)   16/   B157B :                     
(1)   17/   B157B :                     ; PSG1 Data
(1)   18/   B157B :                     MTZ_PSG1:
(1)   19/   B157B : (MACRO)             	smpsJump            MTZ_Jump02
(1)   19/   B157B : F6                          dc.b    $F6
(1)   19/   B157C : AC96                                dc.w    z80_ptr(MTZ_JUMP02)
(1)   20/   B157E :                     
(1)   21/   B157E :                     ; PSG2 Data
(1)   22/   B157E :                     MTZ_PSG2:
(1)   23/   B157E : (MACRO)             	smpsAlterPitch      $0C
(1)   23/   B157E :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   23/   B157E : FB0C                                dc.b    $FB,$0C
(1)   24/   B1580 : (MACRO)             	smpsJump            MTZ_Jump02
(1)   24/   B1580 : F6                          dc.b    $F6
(1)   24/   B1581 : AC96                                dc.w    z80_ptr(MTZ_JUMP02)
(1)   25/   B1583 :                     
(1)   26/   B1583 :                     ; FM1 Data
(1)   27/   B1583 :                     MTZ_FM1:
(1)   28/   B1583 : 8030 80             	dc.b	nRst, $30, nRst
(1)   29/   B1586 : (MACRO)             	smpsLoop            $00, $04, MTZ_FM1
(1)   29/   B1586 : F7                          dc.b    $F7
(1)   29/   B1587 : 0004                        dc.b    $00,$04
(1)   29/   B1589 : 8395                                dc.w    z80_ptr(MTZ_FM1)
(1)   30/   B158B :                     
(1)   31/   B158B :                     MTZ_Loop09:
(1)   32/   B158B : 8030 80             	dc.b	nRst, $30, nRst
(1)   33/   B158E : (MACRO)             	smpsLoop            $00, $04, MTZ_Loop09
(1)   33/   B158E : F7                          dc.b    $F7
(1)   33/   B158F : 0004                        dc.b    $00,$04
(1)   33/   B1591 : 8B95                                dc.w    z80_ptr(MTZ_LOOP09)
(1)   34/   B1593 : (MACRO)             	smpsAlterPitch      $0C
(1)   34/   B1593 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   34/   B1593 : FB0C                                dc.b    $FB,$0C
(1)   35/   B1595 : (MACRO)             	smpsSetvoice        $03
(1)   35/   B1595 :  (MACRO-2)                  smpsFMvoice $03
(1)   35/   B1595 : EF03                                dc.b    $EF,$03
(1)   36/   B1597 : (MACRO)             	smpsModSet          $01, $02, $01, $7F
(1)   36/   B1597 : F0                          dc.b    $F0
(1)   36/   B1598 : 0202 0100                           dc.b    $01+1,$02,$01,(($7F+1) * $02) & $FF
(1)   36/   B159C :                             ;dc.b   $02,$01,$7F
(1)   37/   B159C : A460                	dc.b	nB2, $60
(1)   38/   B159E : (MACRO)             	smpsModSet          $01, $01, $08, $06
(1)   38/   B159E : F0                          dc.b    $F0
(1)   38/   B159F : 0201 0807                           dc.b    $01+1,$01,$08,(($06+1) * $01) & $FF
(1)   38/   B15A3 :                             ;dc.b   $01,$08,$06
(1)   39/   B15A3 : E7A5                	dc.b	smpsNoAttack, nC3
(1)   40/   B15A5 : (MACRO)             	smpsAlterVol        $04
(1)   40/   B15A5 : E604                        dc.b    $E6,$04
(1)   41/   B15A7 : E70C                	dc.b	smpsNoAttack, $0C
(1)   42/   B15A9 : (MACRO)             	smpsAlterVol        $04
(1)   42/   B15A9 : E604                        dc.b    $E6,$04
(1)   43/   B15AB : E70C                	dc.b	smpsNoAttack, $0C
(1)   44/   B15AD : (MACRO)             	smpsAlterVol        $04
(1)   44/   B15AD : E604                        dc.b    $E6,$04
(1)   45/   B15AF : E70C                	dc.b	smpsNoAttack, $0C
(1)   46/   B15B1 : (MACRO)             	smpsAlterVol        $04
(1)   46/   B15B1 : E604                        dc.b    $E6,$04
(1)   47/   B15B3 : E70C 8030           	dc.b	smpsNoAttack, $0C, nRst, $30
(1)   48/   B15B7 : (MACRO)             	smpsAlterVol        $F0
(1)   48/   B15B7 : E6F0                        dc.b    $E6,$F0
(1)   49/   B15B9 : (MACRO)             	smpsModSet          $0C, $01, $04, $04
(1)   49/   B15B9 : F0                          dc.b    $F0
(1)   49/   B15BA : 0D01 0405                           dc.b    $0C+1,$01,$04,(($04+1) * $01) & $FF
(1)   49/   B15BE :                             ;dc.b   $01,$04,$04
(1)   50/   B15BE : (MACRO)             	smpsSetvoice        $03
(1)   50/   B15BE :  (MACRO-2)                  smpsFMvoice $03
(1)   50/   B15BE : EF03                                dc.b    $EF,$03
(1)   51/   B15C0 :                     
(1)   52/   B15C0 :                     MTZ_Loop0A:
(1)   53/   B15C0 : 8030 800C           	dc.b	nRst, $30, nRst, $0C
(1)   54/   B15C4 : (MACRO)             	smpsModSet          $01, $01, $0C, $0C
(1)   54/   B15C4 : F0                          dc.b    $F0
(1)   54/   B15C5 : 0201 0C0D                           dc.b    $01+1,$01,$0C,(($0C+1) * $01) & $FF
(1)   54/   B15C9 :                             ;dc.b   $01,$0C,$0C
(1)   55/   B15C9 : A80C                	dc.b	nEb3, $0C
(1)   56/   B15CB : (MACRO)             	smpsModOff
(1)   56/   B15CB : FA                                  dc.b    $FA
(1)   57/   B15CC : E7A9 0CA7 0CA5 18   	dc.b	smpsNoAttack, nE3, $0C, nD3, $0C, nC3, $18
(1)   58/   B15D3 : (MACRO)             	smpsModSet          $01, $01, $10, $06
(1)   58/   B15D3 : F0                          dc.b    $F0
(1)   58/   B15D4 : 0201 1007                           dc.b    $01+1,$01,$10,(($06+1) * $01) & $FF
(1)   58/   B15D8 :                             ;dc.b   $01,$10,$06
(1)   59/   B15D8 : A806                	dc.b	nEb3, $06
(1)   60/   B15DA : (MACRO)             	smpsModOff
(1)   60/   B15DA : FA                                  dc.b    $FA
(1)   61/   B15DB : E7A9 0680 3080 0C80 	dc.b	smpsNoAttack, nE3, $06, nRst, $30, nRst, $0C, nRst, $30, nRst, $0C, nE3
            B15E3 : 3080 0CA9         
(1)   62/   B15E7 : AAA9                	dc.b	nF3, nE3
(1)   63/   B15E9 : (MACRO)             	smpsModSet          $01, $01, $06, $18
(1)   63/   B15E9 : F0                          dc.b    $F0
(1)   63/   B15EA : 0201 0619                           dc.b    $01+1,$01,$06,(($18+1) * $01) & $FF
(1)   63/   B15EE :                             ;dc.b   $01,$06,$18
(1)   64/   B15EE : AB0C                	dc.b	nFs3, $0C
(1)   65/   B15F0 : (MACRO)             	smpsModOff
(1)   65/   B15F0 : FA                                  dc.b    $FA
(1)   66/   B15F1 : E7AC 0C             	dc.b	smpsNoAttack, nG3, $0C
(1)   67/   B15F4 : (MACRO)             	smpsModSet          $01, $01, $06, $18
(1)   67/   B15F4 : F0                          dc.b    $F0
(1)   67/   B15F5 : 0201 0619                           dc.b    $01+1,$01,$06,(($18+1) * $01) & $FF
(1)   67/   B15F9 :                             ;dc.b   $01,$06,$18
(1)   68/   B15F9 : A80C                	dc.b	nEb3, $0C
(1)   69/   B15FB : (MACRO)             	smpsModOff
(1)   69/   B15FB : FA                                  dc.b    $FA
(1)   70/   B15FC : E7A9 0C             	dc.b	smpsNoAttack, nE3, $0C
(1)   71/   B15FF : (MACRO)             	smpsModSet          $01, $01, $05, $18
(1)   71/   B15FF : F0                          dc.b    $F0
(1)   71/   B1600 : 0201 0519                           dc.b    $01+1,$01,$05,(($18+1) * $01) & $FF
(1)   71/   B1604 :                             ;dc.b   $01,$05,$18
(1)   72/   B1604 : A40C                	dc.b	nB2, $0C
(1)   73/   B1606 : (MACRO)             	smpsModOff
(1)   73/   B1606 : FA                                  dc.b    $FA
(1)   74/   B1607 : E7A5 0C80 18        	dc.b	smpsNoAttack, nC3, $0C, nRst, $18
(1)   75/   B160C : (MACRO)             	smpsLoop            $00, $02, MTZ_Loop0A
(1)   75/   B160C : F7                          dc.b    $F7
(1)   75/   B160D : 0002                        dc.b    $00,$02
(1)   75/   B160F : C095                                dc.w    z80_ptr(MTZ_LOOP0A)
(1)   76/   B1611 : 8030 8080 8080 80   	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
(1)   77/   B1618 : (MACRO)             	smpsAlterPitch      $F4
(1)   77/   B1618 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   77/   B1618 : FBF4                                dc.b    $FB,$F4
(1)   78/   B161A : (MACRO)             	smpsModSet          $06, $01, $08, $04
(1)   78/   B161A : F0                          dc.b    $F0
(1)   78/   B161B : 0701 0805                           dc.b    $06+1,$01,$08,(($04+1) * $01) & $FF
(1)   78/   B161F :                             ;dc.b   $01,$08,$04
(1)   79/   B161F : (MACRO)             	smpsSetvoice        $00
(1)   79/   B161F :  (MACRO-2)                  smpsFMvoice $00
(1)   79/   B161F : EF00                                dc.b    $EF,$00
(1)   80/   B1621 : (MACRO)             	smpsAlterVol        $0A
(1)   80/   B1621 : E60A                        dc.b    $E6,$0A
(1)   81/   B1623 : C40A 8002 C406 80   	dc.b	nG5, $0A, nRst, $02, nG5, $06, nRst
(1)   82/   B162A : (MACRO)             	smpsAlterVol        $FB
(1)   82/   B162A : E6FB                        dc.b    $E6,$FB
(1)   83/   B162C : (MACRO)             	smpsAlterPitch      $0C
(1)   83/   B162C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   83/   B162C : FB0C                                dc.b    $FB,$0C
(1)   84/   B162E : (MACRO)             	smpsSetvoice        $03
(1)   84/   B162E :  (MACRO-2)                  smpsFMvoice $03
(1)   84/   B162E : EF03                                dc.b    $EF,$03
(1)   85/   B1630 : A006 A3A5 A812 A505 	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $05, nRst, $07, nBb2, $06
            B1638 : 8007 A306         
(1)   86/   B163C : A508 800A           	dc.b	nC3, $08, nRst, $0A
(1)   87/   B1640 : (MACRO)             	smpsAlterPitch      $F4
(1)   87/   B1640 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   87/   B1640 : FBF4                                dc.b    $FB,$F4
(1)   88/   B1642 : (MACRO)             	smpsSetvoice        $00
(1)   88/   B1642 :  (MACRO-2)                  smpsFMvoice $00
(1)   88/   B1642 : EF00                                dc.b    $EF,$00
(1)   89/   B1644 : (MACRO)             	smpsAlterVol        $05
(1)   89/   B1644 : E605                        dc.b    $E6,$05
(1)   90/   B1646 : C40A 8002 C406 80   	dc.b	nG5, $0A, nRst, $02, nG5, $06, nRst
(1)   91/   B164D : (MACRO)             	smpsAlterVol        $FB
(1)   91/   B164D : E6FB                        dc.b    $E6,$FB
(1)   92/   B164F : (MACRO)             	smpsAlterPitch      $0C
(1)   92/   B164F :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   92/   B164F : FB0C                                dc.b    $FB,$0C
(1)   93/   B1651 : (MACRO)             	smpsSetvoice        $03
(1)   93/   B1651 :  (MACRO-2)                  smpsFMvoice $03
(1)   93/   B1651 : EF03                                dc.b    $EF,$03
(1)   94/   B1653 : A006 A3A5 A812 A506 	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2, $06, nC3
            B165B : 80A3 06A5         
(1)   95/   B165F : 0580 0D80 3080 8080 	dc.b	$05, nRst, $0D, nRst, $30, nRst, nRst, nRst
(1)   96/   B1667 : (MACRO)             	smpsAlterPitch      $F4
(1)   96/   B1667 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   96/   B1667 : FBF4                                dc.b    $FB,$F4
(1)   97/   B1669 : (MACRO)             	smpsSetvoice        $00
(1)   97/   B1669 :  (MACRO-2)                  smpsFMvoice $00
(1)   97/   B1669 : EF00                                dc.b    $EF,$00
(1)   98/   B166B : (MACRO)             	smpsAlterVol        $05
(1)   98/   B166B : E605                        dc.b    $E6,$05
(1)   99/   B166D : C40A 8002 C406 80   	dc.b	nG5, $0A, nRst, $02, nG5, $06, nRst
(1)  100/   B1674 : (MACRO)             	smpsAlterVol        $FB
(1)  100/   B1674 : E6FB                        dc.b    $E6,$FB
(1)  101/   B1676 : (MACRO)             	smpsAlterPitch      $0C
(1)  101/   B1676 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  101/   B1676 : FB0C                                dc.b    $FB,$0C
(1)  102/   B1678 : (MACRO)             	smpsSetvoice        $03
(1)  102/   B1678 :  (MACRO-2)                  smpsFMvoice $03
(1)  102/   B1678 : EF03                                dc.b    $EF,$03
(1)  103/   B167A : A006 A3A5 A812 A506 	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2, $06, nC3
            B1682 : 80A3 06A5         
(1)  104/   B1686 : 0580 0D             	dc.b	$05, nRst, $0D
(1)  105/   B1689 : (MACRO)             	smpsAlterVol        $FB
(1)  105/   B1689 : E6FB                        dc.b    $E6,$FB
(1)  106/   B168B : (MACRO)             	smpsSetvoice        $03
(1)  106/   B168B :  (MACRO-2)                  smpsFMvoice $03
(1)  106/   B168B : EF03                                dc.b    $EF,$03
(1)  107/   B168D : (MACRO)             	smpsModSet          $01, $04, $F4, $78
(1)  107/   B168D : F0                          dc.b    $F0
(1)  107/   B168E : 0204 F4E4                           dc.b    $01+1,$04,$F4,(($78+1) * $04) & $FF
(1)  107/   B1692 :                             ;dc.b   $04,$F4,$78
(1)  108/   B1692 : B830                	dc.b	nG4, $30
(1)  109/   B1694 : (MACRO)             	smpsAlterVol        $04
(1)  109/   B1694 : E604                        dc.b    $E6,$04
(1)  110/   B1696 : E70C                	dc.b	smpsNoAttack, $0C
(1)  111/   B1698 : (MACRO)             	smpsAlterVol        $04
(1)  111/   B1698 : E604                        dc.b    $E6,$04
(1)  112/   B169A : E70C                	dc.b	smpsNoAttack, $0C
(1)  113/   B169C : (MACRO)             	smpsAlterVol        $04
(1)  113/   B169C : E604                        dc.b    $E6,$04
(1)  114/   B169E : E70C                	dc.b	smpsNoAttack, $0C
(1)  115/   B16A0 : (MACRO)             	smpsAlterVol        $04
(1)  115/   B16A0 : E604                        dc.b    $E6,$04
(1)  116/   B16A2 : E70C                	dc.b	smpsNoAttack, $0C
(1)  117/   B16A4 : (MACRO)             	smpsAlterVol        $F0
(1)  117/   B16A4 : E6F0                        dc.b    $E6,$F0
(1)  118/   B16A6 : (MACRO)             	smpsModOff
(1)  118/   B16A6 : FA                                  dc.b    $FA
(1)  119/   B16A7 : (MACRO)             	smpsAlterPitch      $F4
(1)  119/   B16A7 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  119/   B16A7 : FBF4                                dc.b    $FB,$F4
(1)  120/   B16A9 : (MACRO)             	smpsJump            MTZ_Loop09
(1)  120/   B16A9 : F6                          dc.b    $F6
(1)  120/   B16AA : 8B95                                dc.w    z80_ptr(MTZ_LOOP09)
(1)  121/   B16AC :                     
(1)  122/   B16AC :                     MTZ_Jump02:
(1)  123/   B16AC : (MACRO)             	smpsModSet          $06, $01, $02, $04
(1)  123/   B16AC : F0                          dc.b    $F0
(1)  123/   B16AD : 0701 0205                           dc.b    $06+1,$01,$02,(($04+1) * $01) & $FF
(1)  123/   B16B1 :                             ;dc.b   $01,$02,$04
(1)  124/   B16B1 :                     
(1)  125/   B16B1 :                     MTZ_Loop0B:
(1)  126/   B16B1 : 8030 80             	dc.b	nRst, $30, nRst
(1)  127/   B16B4 : (MACRO)             	smpsLoop            $00, $04, MTZ_Loop0B
(1)  127/   B16B4 : F7                          dc.b    $F7
(1)  127/   B16B5 : 0004                        dc.b    $00,$04
(1)  127/   B16B7 : B196                                dc.w    z80_ptr(MTZ_LOOP0B)
(1)  128/   B16B9 :                     
(1)  129/   B16B9 :                     MTZ_Loop0C:
(1)  130/   B16B9 : 8030 80             	dc.b	nRst, $30, nRst
(1)  131/   B16BC : (MACRO)             	smpsLoop            $00, $07, MTZ_Loop0C
(1)  131/   B16BC : F7                          dc.b    $F7
(1)  131/   B16BD : 0007                        dc.b    $00,$07
(1)  131/   B16BF : B996                                dc.w    z80_ptr(MTZ_LOOP0C)
(1)  132/   B16C1 :                     
(1)  133/   B16C1 :                     MTZ_Loop0D:
(1)  134/   B16C1 : 8030 800C A918 A70C 	dc.b	nRst, $30, nRst, $0C, nE3, $18, nD3, $0C, nC3, $18, nE3, $0C
            B16C9 : A518 A90C         
(1)  135/   B16CD : 8030 800C 8030 800C 	dc.b	nRst, $30, nRst, $0C, nRst, $30, nRst, $0C, nE3, nF3, nE3, nG3
            B16D5 : A9AA A9AC         
(1)  136/   B16D9 : 18A9 18A5 1880 18   	dc.b	$18, nE3, $18, nC3, $18, nRst, $18
(1)  137/   B16E0 : (MACRO)             	smpsLoop            $00, $02, MTZ_Loop0D
(1)  137/   B16E0 : F7                          dc.b    $F7
(1)  137/   B16E1 : 0002                        dc.b    $00,$02
(1)  137/   B16E3 : C196                                dc.w    z80_ptr(MTZ_LOOP0D)
(1)  138/   B16E5 :                     
(1)  139/   B16E5 :                     MTZ_Loop0E:
(1)  140/   B16E5 : 8030 80             	dc.b	nRst, $30, nRst
(1)  141/   B16E8 : (MACRO)             	smpsLoop            $00, $09, MTZ_Loop0E
(1)  141/   B16E8 : F7                          dc.b    $F7
(1)  141/   B16E9 : 0009                        dc.b    $00,$09
(1)  141/   B16EB : E596                                dc.w    z80_ptr(MTZ_LOOP0E)
(1)  142/   B16ED : (MACRO)             	smpsJump            MTZ_Loop0C
(1)  142/   B16ED : F6                          dc.b    $F6
(1)  142/   B16EE : B996                                dc.w    z80_ptr(MTZ_LOOP0C)
(1)  143/   B16F0 :                     
(1)  144/   B16F0 :                     ; FM3 Data
(1)  145/   B16F0 :                     MTZ_FM3:
(1)  146/   B16F0 : (MACRO)             	smpsSetvoice        $01
(1)  146/   B16F0 :  (MACRO-2)                  smpsFMvoice $01
(1)  146/   B16F0 : EF01                                dc.b    $EF,$01
(1)  147/   B16F2 : (MACRO)             	smpsAlterPitch      $F4
(1)  147/   B16F2 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  147/   B16F2 : FBF4                                dc.b    $FB,$F4
(1)  148/   B16F4 : 8030 8080 80AA 0CE7 	dc.b	nRst, $30, nRst, nRst, nRst, nF3, $0C, smpsNoAttack
(1)  149/   B16FC :                     
(1)  150/   B16FC :                     MTZ_Loop05:
(1)  151/   B16FC : (MACRO)             	smpsModSet          $01, $01, $06, $08
(1)  151/   B16FC : F0                          dc.b    $F0
(1)  151/   B16FD : 0201 0609                           dc.b    $01+1,$01,$06,(($08+1) * $01) & $FF
(1)  151/   B1701 :                             ;dc.b   $01,$06,$08
(1)  152/   B1701 : AB04                	dc.b	nFs3, $04
(1)  153/   B1703 : (MACRO)             	smpsModOff
(1)  153/   B1703 : FA                                  dc.b    $FA
(1)  154/   B1704 : E7AC 08E7           	dc.b	smpsNoAttack, nG3, $08, smpsNoAttack
(1)  155/   B1708 : (MACRO)             	smpsModSet          $01, $01, $FA, $08
(1)  155/   B1708 : F0                          dc.b    $F0
(1)  155/   B1709 : 0201 FA09                           dc.b    $01+1,$01,$FA,(($08+1) * $01) & $FF
(1)  155/   B170D :                             ;dc.b   $01,$FA,$08
(1)  156/   B170D : AB04                	dc.b	nFs3, $04
(1)  157/   B170F : (MACRO)             	smpsModOff
(1)  157/   B170F : FA                                  dc.b    $FA
(1)  158/   B1710 : E7AA 08             	dc.b	smpsNoAttack, nF3, $08
(1)  159/   B1713 : (MACRO)             	smpsLoop            $00, $06, MTZ_Loop05
(1)  159/   B1713 : F7                          dc.b    $F7
(1)  159/   B1714 : 0006                        dc.b    $00,$06
(1)  159/   B1716 : FC96                                dc.w    z80_ptr(MTZ_LOOP05)
(1)  160/   B1718 : 8024                	dc.b	nRst, $24
(1)  161/   B171A : (MACRO)             	smpsSetvoice        $00
(1)  161/   B171A :  (MACRO-2)                  smpsFMvoice $00
(1)  161/   B171A : EF00                                dc.b    $EF,$00
(1)  162/   B171C : (MACRO)             	smpsAlterPitch      $0C
(1)  162/   B171C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  162/   B171C : FB0C                                dc.b    $FB,$0C
(1)  163/   B171E :                     
(1)  164/   B171E :                     MTZ_Loop06:
(1)  165/   B171E : 8018 B80B 800D BA0C 	dc.b	nRst, $18, nG4, $0B, nRst, $0D, nA4, $0C, $0B, nRst, $19, nC5
            B1726 : 0B80 19BD         
(1)  166/   B172A : 0C0B 800D B830 E70C 	dc.b	$0C, $0B, nRst, $0D, nG4, $30, smpsNoAttack, $0C, nRst, $18, nG4, $0B
            B1732 : 8018 B80B         
(1)  167/   B1736 : 800D BA0C 0B80 19BD 	dc.b	nRst, $0D, nA4, $0C, $0B, nRst, $19, nC5, $0C, $0B, nRst, $0D
            B173E : 0C0B 800D         
(1)  168/   B1742 : BD30 E70C           	dc.b	nC5, $30, smpsNoAttack, $0C
(1)  169/   B1746 : (MACRO)             	smpsLoop            $00, $04, MTZ_Loop06
(1)  169/   B1746 : F7                          dc.b    $F7
(1)  169/   B1747 : 0004                        dc.b    $00,$04
(1)  169/   B1749 : 1E97                                dc.w    z80_ptr(MTZ_LOOP06)
(1)  170/   B174B :                     
(1)  171/   B174B :                     MTZ_Loop07:
(1)  172/   B174B : CB06 C9C7 C6        	dc.b	nD6, $06, nC6, nBb5, nA5
(1)  173/   B1750 : (MACRO)             	smpsLoop            $00, $08, MTZ_Loop07
(1)  173/   B1750 : F7                          dc.b    $F7
(1)  173/   B1751 : 0008                        dc.b    $00,$08
(1)  173/   B1753 : 4B97                                dc.w    z80_ptr(MTZ_LOOP07)
(1)  174/   B1755 : BD0C 0680 3080 12BB 	dc.b	nC5, $0C, $06, nRst, $30, nRst, $12, nBb4, $0C, nC6, nC6, $06
            B175D : 0CC9 C906         
(1)  175/   B1761 : 8030 801E           	dc.b	nRst, $30, nRst, $1E
(1)  176/   B1765 :                     
(1)  177/   B1765 :                     MTZ_Loop08:
(1)  178/   B1765 : CB06 C9C7 C6        	dc.b	nD6, $06, nC6, nBb5, nA5
(1)  179/   B176A : (MACRO)             	smpsLoop            $00, $08, MTZ_Loop08
(1)  179/   B176A : F7                          dc.b    $F7
(1)  179/   B176B : 0008                        dc.b    $00,$08
(1)  179/   B176D : 6597                                dc.w    z80_ptr(MTZ_LOOP08)
(1)  180/   B176F : C90C 0680 3080 1EBF 	dc.b	nC6, $0C, $06, nRst, $30, nRst, $1E, nD5, $06, nFs5, nCs5, nF5
            B1777 : 06C3 BEC2         
(1)  181/   B177B : BDC1 BCC0 BCBF BBBF 	dc.b	nC5, nE5, nB4, nEb5, nB4, nD5, nBb4, nD5, nA4, nCs5, nAb4, nC5
            B1783 : BABE B9BD         
(1)  182/   B1787 : (MACRO)             	smpsJump            MTZ_Loop06
(1)  182/   B1787 : F6                          dc.b    $F6
(1)  182/   B1788 : 1E97                                dc.w    z80_ptr(MTZ_LOOP06)
(1)  183/   B178A :                     
(1)  184/   B178A :                     ; FM4 Data
(1)  185/   B178A :                     MTZ_FM4:
(1)  186/   B178A : (MACRO)             	smpsSetvoice        $01
(1)  186/   B178A :  (MACRO-2)                  smpsFMvoice $01
(1)  186/   B178A : EF01                                dc.b    $EF,$01
(1)  187/   B178C : (MACRO)             	smpsAlterPitch      $F4
(1)  187/   B178C :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  187/   B178C : FBF4                                dc.b    $FB,$F4
(1)  188/   B178E : 8030 8080 80AF 0CE7 	dc.b	nRst, $30, nRst, nRst, nRst, nBb3, $0C, smpsNoAttack
(1)  189/   B1796 :                     
(1)  190/   B1796 :                     MTZ_Loop03:
(1)  191/   B1796 : (MACRO)             	smpsModSet          $01, $01, $06, $08
(1)  191/   B1796 : F0                          dc.b    $F0
(1)  191/   B1797 : 0201 0609                           dc.b    $01+1,$01,$06,(($08+1) * $01) & $FF
(1)  191/   B179B :                             ;dc.b   $01,$06,$08
(1)  192/   B179B : B004                	dc.b	nB3, $04
(1)  193/   B179D : (MACRO)             	smpsModOff
(1)  193/   B179D : FA                                  dc.b    $FA
(1)  194/   B179E : E7B1 08E7           	dc.b	smpsNoAttack, nC4, $08, smpsNoAttack
(1)  195/   B17A2 : (MACRO)             	smpsModSet          $01, $01, $FA, $08
(1)  195/   B17A2 : F0                          dc.b    $F0
(1)  195/   B17A3 : 0201 FA09                           dc.b    $01+1,$01,$FA,(($08+1) * $01) & $FF
(1)  195/   B17A7 :                             ;dc.b   $01,$FA,$08
(1)  196/   B17A7 : B004                	dc.b	nB3, $04
(1)  197/   B17A9 : (MACRO)             	smpsModOff
(1)  197/   B17A9 : FA                                  dc.b    $FA
(1)  198/   B17AA : E7AF 08             	dc.b	smpsNoAttack, nBb3, $08
(1)  199/   B17AD : (MACRO)             	smpsLoop            $00, $06, MTZ_Loop03
(1)  199/   B17AD : F7                          dc.b    $F7
(1)  199/   B17AE : 0006                        dc.b    $00,$06
(1)  199/   B17B0 : 9697                                dc.w    z80_ptr(MTZ_LOOP03)
(1)  200/   B17B2 : 8024                	dc.b	nRst, $24
(1)  201/   B17B4 : (MACRO)             	smpsAlterPitch      $0C
(1)  201/   B17B4 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  201/   B17B4 : FB0C                                dc.b    $FB,$0C
(1)  202/   B17B6 : (MACRO)             	smpsSetvoice        $00
(1)  202/   B17B6 :  (MACRO-2)                  smpsFMvoice $00
(1)  202/   B17B6 : EF00                                dc.b    $EF,$00
(1)  203/   B17B8 :                     
(1)  204/   B17B8 :                     MTZ_Loop04:
(1)  205/   B17B8 : 8018 B50B 800D B70C 	dc.b	nRst, $18, nE4, $0B, nRst, $0D, nFs4, $0C, $0B, nRst, $19, nA4
            B17C0 : 0B80 19BA         
(1)  206/   B17C4 : 0C0B 800D B530 E70C 	dc.b	$0C, $0B, nRst, $0D, nE4, $30, smpsNoAttack, $0C, nRst, $18, nE4, $0B
            B17CC : 8018 B50B         
(1)  207/   B17D0 : 800D B70C 0B80 19BA 	dc.b	nRst, $0D, nFs4, $0C, $0B, nRst, $19, nA4, $0C, $0B, nRst, $0D
            B17D8 : 0C0B 800D         
(1)  208/   B17DC : B830 E70C           	dc.b	nG4, $30, smpsNoAttack, $0C
(1)  209/   B17E0 : (MACRO)             	smpsLoop            $00, $04, MTZ_Loop04
(1)  209/   B17E0 : F7                          dc.b    $F7
(1)  209/   B17E1 : 0004                        dc.b    $00,$04
(1)  209/   B17E3 : B897                                dc.w    z80_ptr(MTZ_LOOP04)
(1)  210/   B17E5 : (MACRO)             	smpsPan             panLeft, $00
(1)  210/   B17E5 : =$0                 panNone set $00
(1)  210/   B17E5 : =$40                panRight set $40
(1)  210/   B17E5 : =$80                panLeft set $80
(1)  210/   B17E5 : =$C0                panCentre set $C0
(1)  210/   B17E5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  210/   B17E5 : E080                        dc.b $E0,PANLEFT+$00
(1)  211/   B17E7 : (MACRO)             	smpsAlterPitch      $F4
(1)  211/   B17E7 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  211/   B17E7 : FBF4                                dc.b    $FB,$F4
(1)  212/   B17E9 : (MACRO)             	smpsSetvoice        $02
(1)  212/   B17E9 :  (MACRO-2)                  smpsFMvoice $02
(1)  212/   B17E9 : EF02                                dc.b    $EF,$02
(1)  213/   B17EB : AA30 E730 AEAA      	dc.b	nF3, $30, smpsNoAttack, $30, nA3, nF3
(1)  214/   B17F1 : (MACRO)             	smpsAlterPitch      $0C
(1)  214/   B17F1 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  214/   B17F1 : FB0C                                dc.b    $FB,$0C
(1)  215/   B17F3 : (MACRO)             	smpsSetvoice        $00
(1)  215/   B17F3 :  (MACRO-2)                  smpsFMvoice $00
(1)  215/   B17F3 : EF00                                dc.b    $EF,$00
(1)  216/   B17F5 : BD0A 8002 BD06 8080 	dc.b	nC5, $0A, nRst, $02, nC5, $06, nRst, nRst, $30, nRst, $0C, nBb3
            B17FD : 3080 0CAF         
(1)  217/   B1801 : BD0A 8002 BD06 8080 	dc.b	nC5, $0A, nRst, $02, nC5, $06, nRst, nRst, $30, nRst, $18
            B1809 : 3080 18            
(1)  218/   B180C : (MACRO)             	smpsAlterPitch      $F4
(1)  218/   B180C :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  218/   B180C : FBF4                                dc.b    $FB,$F4
(1)  219/   B180E : (MACRO)             	smpsSetvoice        $02
(1)  219/   B180E :  (MACRO-2)                  smpsFMvoice $02
(1)  219/   B180E : EF02                                dc.b    $EF,$02
(1)  220/   B1810 : AA30 E730 AEAA      	dc.b	nF3, $30, smpsNoAttack, $30, nA3, nF3
(1)  221/   B1816 : (MACRO)             	smpsAlterPitch      $0C
(1)  221/   B1816 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  221/   B1816 : FB0C                                dc.b    $FB,$0C
(1)  222/   B1818 : (MACRO)             	smpsPan             panCenter, $00
(1)  222/   B1818 : =$0                 panNone set $00
(1)  222/   B1818 : =$40                panRight set $40
(1)  222/   B1818 : =$80                panLeft set $80
(1)  222/   B1818 : =$C0                panCentre set $C0
(1)  222/   B1818 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  222/   B1818 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  223/   B181A : (MACRO)             	smpsSetvoice        $00
(1)  223/   B181A :  (MACRO-2)                  smpsFMvoice $00
(1)  223/   B181A : EF00                                dc.b    $EF,$00
(1)  224/   B181C : BD0A 8002 BD06 8080 	dc.b	nC5, $0A, nRst, $02, nC5, $06, nRst, nRst, $30, nRst, nRst, nRst
            B1824 : 3080 8080         
(1)  225/   B1828 : 18                  	dc.b	$18
(1)  226/   B1829 : (MACRO)             	smpsJump            MTZ_Loop04
(1)  226/   B1829 : F6                          dc.b    $F6
(1)  226/   B182A : B897                                dc.w    z80_ptr(MTZ_LOOP04)
(1)  227/   B182C :                     
(1)  228/   B182C :                     ; FM5 Data
(1)  229/   B182C :                     MTZ_FM5:
(1)  230/   B182C : (MACRO)             	smpsSetvoice        $00
(1)  230/   B182C :  (MACRO-2)                  smpsFMvoice $00
(1)  230/   B182C : EF00                                dc.b    $EF,$00
(1)  231/   B182E : (MACRO)             	smpsModSet          $0C, $01, $FC, $04
(1)  231/   B182E : F0                          dc.b    $F0
(1)  231/   B182F : 0D01 FC05                           dc.b    $0C+1,$01,$FC,(($04+1) * $01) & $FF
(1)  231/   B1833 :                             ;dc.b   $01,$FC,$04
(1)  232/   B1833 :                     
(1)  233/   B1833 :                     MTZ_Loop01:
(1)  234/   B1833 : 8060                	dc.b	nRst, $60
(1)  235/   B1835 : (MACRO)             	smpsLoop            $00, $04, MTZ_Loop01
(1)  235/   B1835 : F7                          dc.b    $F7
(1)  235/   B1836 : 0004                        dc.b    $00,$04
(1)  235/   B1838 : 3398                                dc.w    z80_ptr(MTZ_LOOP01)
(1)  236/   B183A :                     
(1)  237/   B183A :                     MTZ_Loop02:
(1)  238/   B183A : 8018 B10B 800D B30C 	dc.b	nRst, $18, nC4, $0B, nRst, $0D, nD4, $0C, $0B, nRst, $19, nF4
            B1842 : 0B80 19B6         
(1)  239/   B1846 : 0C0B 800D B130 E70C 	dc.b	$0C, $0B, nRst, $0D, nC4, $30, smpsNoAttack, $0C, nRst, $18, nC4, $0B
            B184E : 8018 B10B         
(1)  240/   B1852 : 800D B30C 0B80 19B6 	dc.b	nRst, $0D, nD4, $0C, $0B, nRst, $19, nF4, $0C, $0B, nRst, $0D
            B185A : 0C0B 800D         
(1)  241/   B185E : B530 E70C           	dc.b	nE4, $30, smpsNoAttack, $0C
(1)  242/   B1862 : (MACRO)             	smpsLoop            $00, $04, MTZ_Loop02
(1)  242/   B1862 : F7                          dc.b    $F7
(1)  242/   B1863 : 0004                        dc.b    $00,$04
(1)  242/   B1865 : 3A98                                dc.w    z80_ptr(MTZ_LOOP02)
(1)  243/   B1867 : (MACRO)             	smpsPan             panRight, $00
(1)  243/   B1867 : =$0                 panNone set $00
(1)  243/   B1867 : =$40                panRight set $40
(1)  243/   B1867 : =$80                panLeft set $80
(1)  243/   B1867 : =$C0                panCentre set $C0
(1)  243/   B1867 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  243/   B1867 : E040                        dc.b $E0,PANRIGHT+$00
(1)  244/   B1869 : (MACRO)             	smpsAlterPitch      $F4
(1)  244/   B1869 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  244/   B1869 : FBF4                                dc.b    $FB,$F4
(1)  245/   B186B : (MACRO)             	smpsSetvoice        $02
(1)  245/   B186B :  (MACRO-2)                  smpsFMvoice $02
(1)  245/   B186B : EF02                                dc.b    $EF,$02
(1)  246/   B186D : AF30 E730 B3AF      	dc.b	nBb3, $30, smpsNoAttack, $30, nD4, nBb3
(1)  247/   B1873 : (MACRO)             	smpsAlterPitch      $0C
(1)  247/   B1873 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  247/   B1873 : FB0C                                dc.b    $FB,$0C
(1)  248/   B1875 : (MACRO)             	smpsSetvoice        $00
(1)  248/   B1875 :  (MACRO-2)                  smpsFMvoice $00
(1)  248/   B1875 : EF00                                dc.b    $EF,$00
(1)  249/   B1877 : B10A 8002 B106 8080 	dc.b	nC4, $0A, nRst, $02, nC4, $06, nRst, nRst, $30, nRst, $0C, nBb3
            B187F : 3080 0CAF         
(1)  250/   B1883 : B10A 8002 B106 8080 	dc.b	nC4, $0A, nRst, $02, nC4, $06, nRst, nRst, $30, nRst, $18
            B188B : 3080 18            
(1)  251/   B188E : (MACRO)             	smpsAlterPitch      $F4
(1)  251/   B188E :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  251/   B188E : FBF4                                dc.b    $FB,$F4
(1)  252/   B1890 : (MACRO)             	smpsSetvoice        $02
(1)  252/   B1890 :  (MACRO-2)                  smpsFMvoice $02
(1)  252/   B1890 : EF02                                dc.b    $EF,$02
(1)  253/   B1892 : AF30 E730 B3AF      	dc.b	nBb3, $30, smpsNoAttack, $30, nD4, nBb3
(1)  254/   B1898 : (MACRO)             	smpsAlterPitch      $0C
(1)  254/   B1898 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  254/   B1898 : FB0C                                dc.b    $FB,$0C
(1)  255/   B189A : (MACRO)             	smpsPan             panCenter, $00
(1)  255/   B189A : =$0                 panNone set $00
(1)  255/   B189A : =$40                panRight set $40
(1)  255/   B189A : =$80                panLeft set $80
(1)  255/   B189A : =$C0                panCentre set $C0
(1)  255/   B189A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  255/   B189A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  256/   B189C : (MACRO)             	smpsSetvoice        $00
(1)  256/   B189C :  (MACRO-2)                  smpsFMvoice $00
(1)  256/   B189C : EF00                                dc.b    $EF,$00
(1)  257/   B189E : B10A 8002 B106 8080 	dc.b	nC4, $0A, nRst, $02, nC4, $06, nRst, nRst, $30, nRst, $18, nRst
            B18A6 : 3080 1880         
(1)  258/   B18AA : 3080                	dc.b	$30, nRst
(1)  259/   B18AC : (MACRO)             	smpsJump            MTZ_Loop02
(1)  259/   B18AC : F6                          dc.b    $F6
(1)  259/   B18AD : 3A98                                dc.w    z80_ptr(MTZ_LOOP02)
(1)  260/   B18AF :                     
(1)  261/   B18AF :                     ; FM2 Data
(1)  262/   B18AF :                     MTZ_FM2:
(1)  263/   B18AF : (MACRO)             	smpsSetvoice        $04
(1)  263/   B18AF :  (MACRO-2)                  smpsFMvoice $04
(1)  263/   B18AF : EF04                                dc.b    $EF,$04
(1)  264/   B18B1 : 8030 8080 8080 80   	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
(1)  265/   B18B8 : (MACRO)             	smpsAlterVol        $FC
(1)  265/   B18B8 : E6FC                        dc.b    $E6,$FC
(1)  266/   B18BA : 8080 0C8A 8B8C      	dc.b	nRst, nRst, $0C, nA0, nBb0, nB0
(1)  267/   B18C0 : (MACRO)             	smpsAlterVol        $04
(1)  267/   B18C0 : E604                        dc.b    $E6,$04
(1)  268/   B18C2 :                     
(1)  269/   B18C2 :                     MTZ_Jump00:
(1)  270/   B18C2 : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  270/   B18C2 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  270/   B18C2 : E809                                dc.b    $E8,$09
(1)  271/   B18C4 : 8D0C 8D8D 8D8D 8D8D 	dc.b	nC1, $0C, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
            B18CC : 8D8D 8D8D         
(1)  272/   B18D0 : 8D                  	dc.b	nC1
(1)  273/   B18D1 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  273/   B18D1 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  273/   B18D1 : E800                                dc.b    $E8,$00
(1)  274/   B18D3 : 8D8A 8B8C           	dc.b	nC1, nA0, nBb0, nB0
(1)  275/   B18D7 : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  275/   B18D7 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  275/   B18D7 : E809                                dc.b    $E8,$09
(1)  276/   B18D9 : 8D8D 8D8D 8D8D 8D8D 	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
            B18E1 : 8D8D 8D8D         
(1)  277/   B18E5 : 8D06 99             	dc.b	nC1, $06, nC2
(1)  278/   B18E8 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  278/   B18E8 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  278/   B18E8 : E800                                dc.b    $E8,$00
(1)  279/   B18EA : 8A0C 8B8C           	dc.b	nA0, $0C, nBb0, nB0
(1)  280/   B18EE : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  280/   B18EE :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  280/   B18EE : E809                                dc.b    $E8,$09
(1)  281/   B18F0 : 8D8D 8D8D 8D8D 8D8D 	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
            B18F8 : 8D8D 8D8D         
(1)  282/   B18FC : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  282/   B18FC :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  282/   B18FC : E800                                dc.b    $E8,$00
(1)  283/   B18FE : 8D8A 8B8C           	dc.b	nC1, nA0, nBb0, nB0
(1)  284/   B1902 : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  284/   B1902 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  284/   B1902 : E809                                dc.b    $E8,$09
(1)  285/   B1904 : 8D8D 8D8D 8D8D 8D8D 	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
            B190C : 8D8D 8D8D         
(1)  286/   B1910 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  286/   B1910 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  286/   B1910 : E800                                dc.b    $E8,$00
(1)  287/   B1912 : 8D90 8F8E           	dc.b	nC1, nEb1, nD1, nCs1
(1)  288/   B1916 : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  288/   B1916 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  288/   B1916 : E809                                dc.b    $E8,$09
(1)  289/   B1918 : 8D8D 8D8D 8D8D 8D0C 	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, $0C, nC1, $06, nC1, $06
            B1920 : 8D06 8D06         
(1)  290/   B1924 : 0C8D 8D8D           	dc.b	$0C, nC1, nC1, nC1
(1)  291/   B1928 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  291/   B1928 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  291/   B1928 : E800                                dc.b    $E8,$00
(1)  292/   B192A : 8D8A 8B8C           	dc.b	nC1, nA0, nBb0, nB0
(1)  293/   B192E : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  293/   B192E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  293/   B192E : E809                                dc.b    $E8,$09
(1)  294/   B1930 : 8D8D 8D8D 8D8D 8D8D 	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
            B1938 : 8D8D 8D8D         
(1)  295/   B193C : 8D06 99             	dc.b	nC1, $06, nC2
(1)  296/   B193F : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  296/   B193F :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  296/   B193F : E800                                dc.b    $E8,$00
(1)  297/   B1941 : 8A0C 8B8C           	dc.b	nA0, $0C, nBb0, nB0
(1)  298/   B1945 : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  298/   B1945 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  298/   B1945 : E809                                dc.b    $E8,$09
(1)  299/   B1947 : 8D8D 8D8D 8D8D 8D8D 	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
            B194F : 8D8D 8D8D         
(1)  300/   B1953 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  300/   B1953 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  300/   B1953 : E800                                dc.b    $E8,$00
(1)  301/   B1955 : 8D8A 8B8C           	dc.b	nC1, nA0, nBb0, nB0
(1)  302/   B1959 : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  302/   B1959 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  302/   B1959 : E809                                dc.b    $E8,$09
(1)  303/   B195B : 8D8D 8D8D 8D8D 8D8D 	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
            B1963 : 8D8D 8D8D         
(1)  304/   B1967 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  304/   B1967 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  304/   B1967 : E800                                dc.b    $E8,$00
(1)  305/   B1969 : 8D90 8F8E 8B8B 8B8B 	dc.b	nC1, nEb1, nD1, nCs1, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0
            B1971 : 8B8B 8B8B         
(1)  306/   B1975 : 8F8F 8F8F 8B8B 8B8B 	dc.b	nD1, nD1, nD1, nD1, nBb0, nBb0, nBb0, nBb0, nC1, nC1, $06
            B197D : 8D8D 06            
(1)  307/   B1980 : (MACRO)             	smpsSetvoice        $05
(1)  307/   B1980 :  (MACRO-2)                  smpsFMvoice $05
(1)  307/   B1980 : EF05                                dc.b    $EF,$05
(1)  308/   B1982 : 8006 A006 A3A5 A812 	dc.b	nRst, $06, nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2
            B198A : A506 80A3         
(1)  309/   B198E : 06A5 0580 01        	dc.b	$06, nC3, $05, nRst, $01
(1)  310/   B1993 : (MACRO)             	smpsSetvoice        $04
(1)  310/   B1993 :  (MACRO-2)                  smpsFMvoice $04
(1)  310/   B1993 : EF04                                dc.b    $EF,$04
(1)  311/   B1995 : 8B06 8C8D 808D 80   	dc.b	nBb0, $06, nB0, nC1, nRst, nC1, nRst
(1)  312/   B199C : (MACRO)             	smpsSetvoice        $05
(1)  312/   B199C :  (MACRO-2)                  smpsFMvoice $05
(1)  312/   B199C : EF05                                dc.b    $EF,$05
(1)  313/   B199E : A006 A3A5 A812 A506 	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2, $06, nC3
            B19A6 : 80A3 06A5         
(1)  314/   B19AA : 0580 01             	dc.b	$05, nRst, $01
(1)  315/   B19AD : (MACRO)             	smpsSetvoice        $04
(1)  315/   B19AD :  (MACRO-2)                  smpsFMvoice $04
(1)  315/   B19AD : EF04                                dc.b    $EF,$04
(1)  316/   B19AF : 8C0C 8B8B 8B8B 8B8B 	dc.b	nB0, $0C, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nD1, nD1
            B19B7 : 8B8B 8F8F         
(1)  317/   B19BB : 8F8F 8B8B 8B8B 8D8D 	dc.b	nD1, nD1, nBb0, nBb0, nBb0, nBb0, nC1, nC1, $06
            B19C3 : 06               
(1)  318/   B19C4 : (MACRO)             	smpsSetvoice        $05
(1)  318/   B19C4 :  (MACRO-2)                  smpsFMvoice $05
(1)  318/   B19C4 : EF05                                dc.b    $EF,$05
(1)  319/   B19C6 : 8006 A006 A3A5 A812 	dc.b	nRst, $06, nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2
            B19CE : A506 80A3         
(1)  320/   B19D2 : 06A5 0580 01        	dc.b	$06, nC3, $05, nRst, $01
(1)  321/   B19D7 : (MACRO)             	smpsSetvoice        $04
(1)  321/   B19D7 :  (MACRO-2)                  smpsFMvoice $04
(1)  321/   B19D7 : EF04                                dc.b    $EF,$04
(1)  322/   B19D9 : 8B06 8C8D 0680 3080 	dc.b	nBb0, $06, nB0, nC1, $06, nRst, $30, nRst, $2A
            B19E1 : 2A               
(1)  323/   B19E2 : (MACRO)             	smpsJump            MTZ_Jump00
(1)  323/   B19E2 : F6                          dc.b    $F6
(1)  323/   B19E3 : C298                                dc.w    z80_ptr(MTZ_JUMP00)
(1)  324/   B19E5 :                     
(1)  325/   B19E5 :                     MTZ_Call00:
(1)  326/   B19E5 : 810C 8D82 8181 8E82 	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
            B19ED : 8404 0602         
(1)  327/   B19F1 : 810C 8D82 8181 8E82 	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dClap
            B19F9 : 83               
(1)  328/   B19FA : (MACRO)             	smpsReturn
(1)  328/   B19FA : F9                                  dc.b    $F9
(1)  329/   B19FB :                     
(1)  330/   B19FB :                     ; DAC Data
(1)  331/   B19FB :                     MTZ_DAC:
(1)  332/   B19FB : (MACRO)             	smpsCall            MTZ_Call00
(1)  332/   B19FB : F8                          dc.b    $F8
(1)  332/   B19FC : E599                                dc.w    z80_ptr(MTZ_CALL00)
(1)  333/   B19FE : (MACRO)             	smpsLoop            $00, $02, MTZ_DAC
(1)  333/   B19FE : F7                          dc.b    $F7
(1)  333/   B19FF : 0002                        dc.b    $00,$02
(1)  333/   B1A01 : FB99                                dc.w    z80_ptr(MTZ_DAC)
(1)  334/   B1A03 :                     
(1)  335/   B1A03 :                     MTZ_Loop00:
(1)  336/   B1A03 : (MACRO)             	smpsCall            MTZ_Call00
(1)  336/   B1A03 : F8                          dc.b    $F8
(1)  336/   B1A04 : E599                                dc.w    z80_ptr(MTZ_CALL00)
(1)  337/   B1A06 : (MACRO)             	smpsLoop            $00, $0B, MTZ_Loop00
(1)  337/   B1A06 : F7                          dc.b    $F7
(1)  337/   B1A07 : 000B                        dc.b    $00,$0B
(1)  337/   B1A09 : 039A                                dc.w    z80_ptr(MTZ_LOOP00)
(1)  338/   B1A0B : 810C 8D82 8181 8E82 	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
            B1A13 : 8404 0602         
(1)  339/   B1A17 : 810C 8080 8080 8080 	dc.b	dKick, $0C, nRst, nRst, nRst, nRst, nRst, nRst, dClap
            B1A1F : 83               
(1)  340/   B1A20 : (MACRO)             	smpsJump            MTZ_Loop00
(1)  340/   B1A20 : F6                          dc.b    $F6
(1)  340/   B1A21 : 039A                                dc.w    z80_ptr(MTZ_LOOP00)
(1)  341/   B1A23 :                     
(1)  342/   B1A23 :                     ; PSG3 Data
(1)  343/   B1A23 :                     MTZ_PSG3:
(1)  344/   B1A23 : (MACRO)             	smpsPSGform         $E7
(1)  344/   B1A23 : F3E7                        dc.b    $F3,$E7
(1)  345/   B1A25 :                     
(1)  346/   B1A25 :                     MTZ_Jump01:
(1)  347/   B1A25 : 8030 8080 8024 C50C 	dc.b	nRst, $30, nRst, nRst, nRst, $24, nAb5, $0C
(1)  348/   B1A2D : (MACRO)             	smpsJump            MTZ_Jump01
(1)  348/   B1A2D : F6                          dc.b    $F6
(1)  348/   B1A2E : 259A                                dc.w    z80_ptr(MTZ_JUMP01)
(1)  349/   B1A30 :                     
(1)  350/   B1A30 :                     MTZ_Voices:
(1)  351/   B1A30 :                     ;	Voice $00
(1)  352/   B1A30 :                     ;	$3C
(1)  353/   B1A30 :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1)  354/   B1A30 :                     ;	$04, $00, $04, $00, 	$10, $0B, $10, $0D, 	$19, $80, $0B, $80
(1)  355/   B1A30 : (MACRO)             	smpsVcAlgorithm     $04
(1)  355/   B1A30 : =$4                 vcAlgorithm set $04
(1)  356/   B1A30 : (MACRO)             	smpsVcFeedback      $07
(1)  356/   B1A30 : =$7                 vcFeedback set $07
(1)  357/   B1A30 : (MACRO)             	smpsVcUnusedBits    $00
(1)  357/   B1A30 : =$0                 vcUnusedBits set $00
(1)  357/   B1A30 : =$0                 vcD1R1Unk set 0
(1)  357/   B1A30 : =$0                 vcD1R2Unk set 0
(1)  357/   B1A30 : =$0                 vcD1R3Unk set 0
(1)  357/   B1A30 : =$0                 vcD1R4Unk set 0
(1)  358/   B1A30 : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1)  358/   B1A30 : =$3                 vcDT1 set $03
(1)  358/   B1A30 : =$5                 vcDT2 set $05
(1)  358/   B1A30 : =$5                 vcDT3 set $05
(1)  358/   B1A30 : =$3                 vcDT4 set $03
(1)  359/   B1A30 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1)  359/   B1A30 : =$0                 vcCF1 set $00
(1)  359/   B1A30 : =$0                 vcCF2 set $00
(1)  359/   B1A30 : =$2                 vcCF3 set $02
(1)  359/   B1A30 : =$1                 vcCF4 set $01
(1)  360/   B1A30 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  360/   B1A30 : =$1                 vcRS1 set $01
(1)  360/   B1A30 : =$1                 vcRS2 set $01
(1)  360/   B1A30 : =$1                 vcRS3 set $01
(1)  360/   B1A30 : =$1                 vcRS4 set $01
(1)  361/   B1A30 : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1)  361/   B1A30 : =$13                vcAR1 set $13
(1)  361/   B1A30 : =$12                vcAR2 set $12
(1)  361/   B1A30 : =$13                vcAR3 set $13
(1)  361/   B1A30 : =$12                vcAR4 set $12
(1)  362/   B1A30 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  362/   B1A30 : =$0                 vcAM1 set $00<<5
(1)  362/   B1A30 : =$0                 vcAM2 set $00<<5
(1)  362/   B1A30 : =$0                 vcAM3 set $00<<5
(1)  362/   B1A30 : =$0                 vcAM4 set $00<<5
(1)  363/   B1A30 : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1)  363/   B1A30 : =$0                 vcD1R1 set $00
(1)  363/   B1A30 : =$8                 vcD1R2 set $08
(1)  363/   B1A30 : =$0                 vcD1R3 set $00
(1)  363/   B1A30 : =$8                 vcD1R4 set $08
(1)  364/   B1A30 : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1)  364/   B1A30 : =$0                 vcD2R1 set $00
(1)  364/   B1A30 : =$4                 vcD2R2 set $04
(1)  364/   B1A30 : =$0                 vcD2R3 set $00
(1)  364/   B1A30 : =$4                 vcD2R4 set $04
(1)  365/   B1A30 : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)  365/   B1A30 : =$0                 vcDL1 set $00
(1)  365/   B1A30 : =$1                 vcDL2 set $01
(1)  365/   B1A30 : =$0                 vcDL3 set $00
(1)  365/   B1A30 : =$1                 vcDL4 set $01
(1)  366/   B1A30 : (MACRO)             	smpsVcReleaseRate   $0D, $00, $0B, $00
(1)  366/   B1A30 : =$D                 vcRR1 set $0D
(1)  366/   B1A30 : =$0                 vcRR2 set $00
(1)  366/   B1A30 : =$B                 vcRR3 set $0B
(1)  366/   B1A30 : =$0                 vcRR4 set $00
(1)  367/   B1A30 : (MACRO)             	smpsVcTotalLevel    $80, $0B, $80, $19
(1)  367/   B1A30 : =$80                vcTL1 set $80
(1)  367/   B1A30 : =$B                 vcTL2 set $0B
(1)  367/   B1A30 : =$80                vcTL3 set $80
(1)  367/   B1A30 : =$19                vcTL4 set $19
(1)  367/   B1A30 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  367/   B1A31 :                     ;   0     1     2     3     4     5     6     7
(1)  367/   B1A31 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  367/   B1A31 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  367/   B1A31 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  367/   B1A31 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  367/   B1A31 : =$80                vcTLMask1 set $80
(1)  367/   B1A31 :                     
(1)  367/   B1A31 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  367/   B1A31 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  367/   B1A31 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  367/   B1A31 : =$80                vcTLMask1 set $80
(1)  367/   B1A31 : =$0                 vcTL1 set vcTL1&$7F
(1)  367/   B1A31 : =$B                 vcTL2 set vcTL2&$7F
(1)  367/   B1A31 : =$0                 vcTL3 set vcTL3&$7F
(1)  367/   B1A31 : =$19                vcTL4 set vcTL4&$7F
(1)  367/   B1A31 :                     
(1)  367/   B1A31 : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  367/   B1A35 : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  367/   B1A39 : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  367/   B1A3D : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  367/   B1A41 : 100B 100D                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  367/   B1A45 : 1980 0B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  368/   B1A49 :                     
(1)  369/   B1A49 :                     ;	Voice $01
(1)  370/   B1A49 :                     ;	$3A
(1)  371/   B1A49 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  372/   B1A49 :                     ;	$00, $00, $00, $01, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1)  373/   B1A49 : (MACRO)             	smpsVcAlgorithm     $02
(1)  373/   B1A49 : =$2                 vcAlgorithm set $02
(1)  374/   B1A49 : (MACRO)             	smpsVcFeedback      $07
(1)  374/   B1A49 : =$7                 vcFeedback set $07
(1)  375/   B1A49 : (MACRO)             	smpsVcUnusedBits    $00
(1)  375/   B1A49 : =$0                 vcUnusedBits set $00
(1)  375/   B1A49 : =$0                 vcD1R1Unk set 0
(1)  375/   B1A49 : =$0                 vcD1R2Unk set 0
(1)  375/   B1A49 : =$0                 vcD1R3Unk set 0
(1)  375/   B1A49 : =$0                 vcD1R4Unk set 0
(1)  376/   B1A49 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  376/   B1A49 : =$0                 vcDT1 set $00
(1)  376/   B1A49 : =$0                 vcDT2 set $00
(1)  376/   B1A49 : =$0                 vcDT3 set $00
(1)  376/   B1A49 : =$0                 vcDT4 set $00
(1)  377/   B1A49 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  377/   B1A49 : =$1                 vcCF1 set $01
(1)  377/   B1A49 : =$1                 vcCF2 set $01
(1)  377/   B1A49 : =$7                 vcCF3 set $07
(1)  377/   B1A49 : =$1                 vcCF4 set $01
(1)  378/   B1A49 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  378/   B1A49 : =$1                 vcRS1 set $01
(1)  378/   B1A49 : =$2                 vcRS2 set $02
(1)  378/   B1A49 : =$2                 vcRS3 set $02
(1)  378/   B1A49 : =$2                 vcRS4 set $02
(1)  379/   B1A49 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  379/   B1A49 : =$13                vcAR1 set $13
(1)  379/   B1A49 : =$D                 vcAR2 set $0D
(1)  379/   B1A49 : =$E                 vcAR3 set $0E
(1)  379/   B1A49 : =$E                 vcAR4 set $0E
(1)  380/   B1A49 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  380/   B1A49 : =$0                 vcAM1 set $00<<5
(1)  380/   B1A49 : =$0                 vcAM2 set $00<<5
(1)  380/   B1A49 : =$0                 vcAM3 set $00<<5
(1)  380/   B1A49 : =$0                 vcAM4 set $00<<5
(1)  381/   B1A49 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  381/   B1A49 : =$3                 vcD1R1 set $03
(1)  381/   B1A49 : =$E                 vcD1R2 set $0E
(1)  381/   B1A49 : =$E                 vcD1R3 set $0E
(1)  381/   B1A49 : =$E                 vcD1R4 set $0E
(1)  382/   B1A49 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1)  382/   B1A49 : =$1                 vcD2R1 set $01
(1)  382/   B1A49 : =$0                 vcD2R2 set $00
(1)  382/   B1A49 : =$0                 vcD2R3 set $00
(1)  382/   B1A49 : =$0                 vcD2R4 set $00
(1)  383/   B1A49 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  383/   B1A49 : =$0                 vcDL1 set $00
(1)  383/   B1A49 : =$1                 vcDL2 set $01
(1)  383/   B1A49 : =$F                 vcDL3 set $0F
(1)  383/   B1A49 : =$1                 vcDL4 set $01
(1)  384/   B1A49 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  384/   B1A49 : =$F                 vcRR1 set $0F
(1)  384/   B1A49 : =$F                 vcRR2 set $0F
(1)  384/   B1A49 : =$F                 vcRR3 set $0F
(1)  384/   B1A49 : =$F                 vcRR4 set $0F
(1)  385/   B1A49 : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $17
(1)  385/   B1A49 : =$80                vcTL1 set $80
(1)  385/   B1A49 : =$27                vcTL2 set $27
(1)  385/   B1A49 : =$28                vcTL3 set $28
(1)  385/   B1A49 : =$17                vcTL4 set $17
(1)  385/   B1A49 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  385/   B1A4A :                     ;   0     1     2     3     4     5     6     7
(1)  385/   B1A4A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  385/   B1A4A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  385/   B1A4A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  385/   B1A4A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  385/   B1A4A : =$80                vcTLMask1 set $80
(1)  385/   B1A4A :                     
(1)  385/   B1A4A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  385/   B1A4A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  385/   B1A4A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  385/   B1A4A : =$80                vcTLMask1 set $80
(1)  385/   B1A4A : =$0                 vcTL1 set vcTL1&$7F
(1)  385/   B1A4A : =$27                vcTL2 set vcTL2&$7F
(1)  385/   B1A4A : =$28                vcTL3 set vcTL3&$7F
(1)  385/   B1A4A : =$17                vcTL4 set vcTL4&$7F
(1)  385/   B1A4A :                     
(1)  385/   B1A4A : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  385/   B1A4E : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  385/   B1A52 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  385/   B1A56 : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  385/   B1A5A : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  385/   B1A5E : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  386/   B1A62 :                     
(1)  387/   B1A62 :                     ;	Voice $02
(1)  388/   B1A62 :                     ;	$3A
(1)  389/   B1A62 :                     ;	$01, $40, $01, $31, 	$1F, $1F, $1F, $1F, 	$0B, $04, $04, $04
(1)  390/   B1A62 :                     ;	$02, $04, $03, $02, 	$5F, $1F, $5F, $2F, 	$18, $05, $11, $80
(1)  391/   B1A62 : (MACRO)             	smpsVcAlgorithm     $02
(1)  391/   B1A62 : =$2                 vcAlgorithm set $02
(1)  392/   B1A62 : (MACRO)             	smpsVcFeedback      $07
(1)  392/   B1A62 : =$7                 vcFeedback set $07
(1)  393/   B1A62 : (MACRO)             	smpsVcUnusedBits    $00
(1)  393/   B1A62 : =$0                 vcUnusedBits set $00
(1)  393/   B1A62 : =$0                 vcD1R1Unk set 0
(1)  393/   B1A62 : =$0                 vcD1R2Unk set 0
(1)  393/   B1A62 : =$0                 vcD1R3Unk set 0
(1)  393/   B1A62 : =$0                 vcD1R4Unk set 0
(1)  394/   B1A62 : (MACRO)             	smpsVcDetune        $03, $00, $04, $00
(1)  394/   B1A62 : =$3                 vcDT1 set $03
(1)  394/   B1A62 : =$0                 vcDT2 set $00
(1)  394/   B1A62 : =$4                 vcDT3 set $04
(1)  394/   B1A62 : =$0                 vcDT4 set $00
(1)  395/   B1A62 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $00, $01
(1)  395/   B1A62 : =$1                 vcCF1 set $01
(1)  395/   B1A62 : =$1                 vcCF2 set $01
(1)  395/   B1A62 : =$0                 vcCF3 set $00
(1)  395/   B1A62 : =$1                 vcCF4 set $01
(1)  396/   B1A62 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  396/   B1A62 : =$0                 vcRS1 set $00
(1)  396/   B1A62 : =$0                 vcRS2 set $00
(1)  396/   B1A62 : =$0                 vcRS3 set $00
(1)  396/   B1A62 : =$0                 vcRS4 set $00
(1)  397/   B1A62 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  397/   B1A62 : =$1F                vcAR1 set $1F
(1)  397/   B1A62 : =$1F                vcAR2 set $1F
(1)  397/   B1A62 : =$1F                vcAR3 set $1F
(1)  397/   B1A62 : =$1F                vcAR4 set $1F
(1)  398/   B1A62 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  398/   B1A62 : =$0                 vcAM1 set $00<<5
(1)  398/   B1A62 : =$0                 vcAM2 set $00<<5
(1)  398/   B1A62 : =$0                 vcAM3 set $00<<5
(1)  398/   B1A62 : =$0                 vcAM4 set $00<<5
(1)  399/   B1A62 : (MACRO)             	smpsVcDecayRate1    $04, $04, $04, $0B
(1)  399/   B1A62 : =$4                 vcD1R1 set $04
(1)  399/   B1A62 : =$4                 vcD1R2 set $04
(1)  399/   B1A62 : =$4                 vcD1R3 set $04
(1)  399/   B1A62 : =$B                 vcD1R4 set $0B
(1)  400/   B1A62 : (MACRO)             	smpsVcDecayRate2    $02, $03, $04, $02
(1)  400/   B1A62 : =$2                 vcD2R1 set $02
(1)  400/   B1A62 : =$3                 vcD2R2 set $03
(1)  400/   B1A62 : =$4                 vcD2R3 set $04
(1)  400/   B1A62 : =$2                 vcD2R4 set $02
(1)  401/   B1A62 : (MACRO)             	smpsVcDecayLevel    $02, $05, $01, $05
(1)  401/   B1A62 : =$2                 vcDL1 set $02
(1)  401/   B1A62 : =$5                 vcDL2 set $05
(1)  401/   B1A62 : =$1                 vcDL3 set $01
(1)  401/   B1A62 : =$5                 vcDL4 set $05
(1)  402/   B1A62 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  402/   B1A62 : =$F                 vcRR1 set $0F
(1)  402/   B1A62 : =$F                 vcRR2 set $0F
(1)  402/   B1A62 : =$F                 vcRR3 set $0F
(1)  402/   B1A62 : =$F                 vcRR4 set $0F
(1)  403/   B1A62 : (MACRO)             	smpsVcTotalLevel    $80, $11, $05, $18
(1)  403/   B1A62 : =$80                vcTL1 set $80
(1)  403/   B1A62 : =$11                vcTL2 set $11
(1)  403/   B1A62 : =$5                 vcTL3 set $05
(1)  403/   B1A62 : =$18                vcTL4 set $18
(1)  403/   B1A62 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  403/   B1A63 :                     ;   0     1     2     3     4     5     6     7
(1)  403/   B1A63 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  403/   B1A63 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  403/   B1A63 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  403/   B1A63 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  403/   B1A63 : =$80                vcTLMask1 set $80
(1)  403/   B1A63 :                     
(1)  403/   B1A63 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  403/   B1A63 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  403/   B1A63 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  403/   B1A63 : =$80                vcTLMask1 set $80
(1)  403/   B1A63 : =$0                 vcTL1 set vcTL1&$7F
(1)  403/   B1A63 : =$11                vcTL2 set vcTL2&$7F
(1)  403/   B1A63 : =$5                 vcTL3 set vcTL3&$7F
(1)  403/   B1A63 : =$18                vcTL4 set vcTL4&$7F
(1)  403/   B1A63 :                     
(1)  403/   B1A63 : 0140 0131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  403/   B1A67 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  403/   B1A6B : 0B04 0404                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  403/   B1A6F : 0204 0302                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  403/   B1A73 : 5F1F 5F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  403/   B1A77 : 1805 1180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  404/   B1A7B :                     
(1)  405/   B1A7B :                     ;	Voice $03
(1)  406/   B1A7B :                     ;	$29
(1)  407/   B1A7B :                     ;	$16, $14, $58, $54, 	$1F, $1F, $DF, $1F, 	$00, $00, $01, $00
(1)  408/   B1A7B :                     ;	$00, $00, $03, $00, 	$06, $06, $06, $0A, 	$1B, $1C, $16, $00
(1)  409/   B1A7B : (MACRO)             	smpsVcAlgorithm     $01
(1)  409/   B1A7B : =$1                 vcAlgorithm set $01
(1)  410/   B1A7B : (MACRO)             	smpsVcFeedback      $05
(1)  410/   B1A7B : =$5                 vcFeedback set $05
(1)  411/   B1A7B : (MACRO)             	smpsVcUnusedBits    $00
(1)  411/   B1A7B : =$0                 vcUnusedBits set $00
(1)  411/   B1A7B : =$0                 vcD1R1Unk set 0
(1)  411/   B1A7B : =$0                 vcD1R2Unk set 0
(1)  411/   B1A7B : =$0                 vcD1R3Unk set 0
(1)  411/   B1A7B : =$0                 vcD1R4Unk set 0
(1)  412/   B1A7B : (MACRO)             	smpsVcDetune        $05, $05, $01, $01
(1)  412/   B1A7B : =$5                 vcDT1 set $05
(1)  412/   B1A7B : =$5                 vcDT2 set $05
(1)  412/   B1A7B : =$1                 vcDT3 set $01
(1)  412/   B1A7B : =$1                 vcDT4 set $01
(1)  413/   B1A7B : (MACRO)             	smpsVcCoarseFreq    $04, $08, $04, $06
(1)  413/   B1A7B : =$4                 vcCF1 set $04
(1)  413/   B1A7B : =$8                 vcCF2 set $08
(1)  413/   B1A7B : =$4                 vcCF3 set $04
(1)  413/   B1A7B : =$6                 vcCF4 set $06
(1)  414/   B1A7B : (MACRO)             	smpsVcRateScale     $00, $03, $00, $00
(1)  414/   B1A7B : =$0                 vcRS1 set $00
(1)  414/   B1A7B : =$3                 vcRS2 set $03
(1)  414/   B1A7B : =$0                 vcRS3 set $00
(1)  414/   B1A7B : =$0                 vcRS4 set $00
(1)  415/   B1A7B : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  415/   B1A7B : =$1F                vcAR1 set $1F
(1)  415/   B1A7B : =$1F                vcAR2 set $1F
(1)  415/   B1A7B : =$1F                vcAR3 set $1F
(1)  415/   B1A7B : =$1F                vcAR4 set $1F
(1)  416/   B1A7B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  416/   B1A7B : =$0                 vcAM1 set $00<<5
(1)  416/   B1A7B : =$0                 vcAM2 set $00<<5
(1)  416/   B1A7B : =$0                 vcAM3 set $00<<5
(1)  416/   B1A7B : =$0                 vcAM4 set $00<<5
(1)  417/   B1A7B : (MACRO)             	smpsVcDecayRate1    $00, $01, $00, $00
(1)  417/   B1A7B : =$0                 vcD1R1 set $00
(1)  417/   B1A7B : =$1                 vcD1R2 set $01
(1)  417/   B1A7B : =$0                 vcD1R3 set $00
(1)  417/   B1A7B : =$0                 vcD1R4 set $00
(1)  418/   B1A7B : (MACRO)             	smpsVcDecayRate2    $00, $03, $00, $00
(1)  418/   B1A7B : =$0                 vcD2R1 set $00
(1)  418/   B1A7B : =$3                 vcD2R2 set $03
(1)  418/   B1A7B : =$0                 vcD2R3 set $00
(1)  418/   B1A7B : =$0                 vcD2R4 set $00
(1)  419/   B1A7B : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  419/   B1A7B : =$0                 vcDL1 set $00
(1)  419/   B1A7B : =$0                 vcDL2 set $00
(1)  419/   B1A7B : =$0                 vcDL3 set $00
(1)  419/   B1A7B : =$0                 vcDL4 set $00
(1)  420/   B1A7B : (MACRO)             	smpsVcReleaseRate   $0A, $06, $06, $06
(1)  420/   B1A7B : =$A                 vcRR1 set $0A
(1)  420/   B1A7B : =$6                 vcRR2 set $06
(1)  420/   B1A7B : =$6                 vcRR3 set $06
(1)  420/   B1A7B : =$6                 vcRR4 set $06
(1)  421/   B1A7B : (MACRO)             	smpsVcTotalLevel    $00, $16, $1C, $1B
(1)  421/   B1A7B : =$0                 vcTL1 set $00
(1)  421/   B1A7B : =$16                vcTL2 set $16
(1)  421/   B1A7B : =$1C                vcTL3 set $1C
(1)  421/   B1A7B : =$1B                vcTL4 set $1B
(1)  421/   B1A7B : 29                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  421/   B1A7C :                     ;   0     1     2     3     4     5     6     7
(1)  421/   B1A7C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  421/   B1A7C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  421/   B1A7C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  421/   B1A7C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  421/   B1A7C : =$80                vcTLMask1 set $80
(1)  421/   B1A7C :                     
(1)  421/   B1A7C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  421/   B1A7C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  421/   B1A7C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  421/   B1A7C : =$80                vcTLMask1 set $80
(1)  421/   B1A7C : =$0                 vcTL1 set vcTL1&$7F
(1)  421/   B1A7C : =$16                vcTL2 set vcTL2&$7F
(1)  421/   B1A7C : =$1C                vcTL3 set vcTL3&$7F
(1)  421/   B1A7C : =$1B                vcTL4 set vcTL4&$7F
(1)  421/   B1A7C :                     
(1)  421/   B1A7C : 1614 5854                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  421/   B1A80 : 1F1F DF1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  421/   B1A84 : 0000 0100                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  421/   B1A88 : 0000 0300                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  421/   B1A8C : 0606 060A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  421/   B1A90 : 1B1C 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  422/   B1A94 :                     
(1)  423/   B1A94 :                     ;	Voice $04
(1)  424/   B1A94 :                     ;	$08
(1)  425/   B1A94 :                     ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  426/   B1A94 :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $0E, $84
(1)  427/   B1A94 : (MACRO)             	smpsVcAlgorithm     $00
(1)  427/   B1A94 : =$0                 vcAlgorithm set $00
(1)  428/   B1A94 : (MACRO)             	smpsVcFeedback      $01
(1)  428/   B1A94 : =$1                 vcFeedback set $01
(1)  429/   B1A94 : (MACRO)             	smpsVcUnusedBits    $00
(1)  429/   B1A94 : =$0                 vcUnusedBits set $00
(1)  429/   B1A94 : =$0                 vcD1R1Unk set 0
(1)  429/   B1A94 : =$0                 vcD1R2Unk set 0
(1)  429/   B1A94 : =$0                 vcD1R3Unk set 0
(1)  429/   B1A94 : =$0                 vcD1R4Unk set 0
(1)  430/   B1A94 : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  430/   B1A94 : =$0                 vcDT1 set $00
(1)  430/   B1A94 : =$3                 vcDT2 set $03
(1)  430/   B1A94 : =$7                 vcDT3 set $07
(1)  430/   B1A94 : =$0                 vcDT4 set $00
(1)  431/   B1A94 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)  431/   B1A94 : =$0                 vcCF1 set $00
(1)  431/   B1A94 : =$0                 vcCF2 set $00
(1)  431/   B1A94 : =$0                 vcCF3 set $00
(1)  431/   B1A94 : =$9                 vcCF4 set $09
(1)  432/   B1A94 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  432/   B1A94 : =$1                 vcRS1 set $01
(1)  432/   B1A94 : =$1                 vcRS2 set $01
(1)  432/   B1A94 : =$0                 vcRS3 set $00
(1)  432/   B1A94 : =$0                 vcRS4 set $00
(1)  433/   B1A94 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  433/   B1A94 : =$1F                vcAR1 set $1F
(1)  433/   B1A94 : =$1F                vcAR2 set $1F
(1)  433/   B1A94 : =$1F                vcAR3 set $1F
(1)  433/   B1A94 : =$1F                vcAR4 set $1F
(1)  434/   B1A94 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  434/   B1A94 : =$0                 vcAM1 set $00<<5
(1)  434/   B1A94 : =$0                 vcAM2 set $00<<5
(1)  434/   B1A94 : =$0                 vcAM3 set $00<<5
(1)  434/   B1A94 : =$0                 vcAM4 set $00<<5
(1)  435/   B1A94 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  435/   B1A94 : =$A                 vcD1R1 set $0A
(1)  435/   B1A94 : =$A                 vcD1R2 set $0A
(1)  435/   B1A94 : =$E                 vcD1R3 set $0E
(1)  435/   B1A94 : =$12                vcD1R4 set $12
(1)  436/   B1A94 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  436/   B1A94 : =$3                 vcD2R1 set $03
(1)  436/   B1A94 : =$4                 vcD2R2 set $04
(1)  436/   B1A94 : =$4                 vcD2R3 set $04
(1)  436/   B1A94 : =$0                 vcD2R4 set $00
(1)  437/   B1A94 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  437/   B1A94 : =$2                 vcDL1 set $02
(1)  437/   B1A94 : =$2                 vcDL2 set $02
(1)  437/   B1A94 : =$2                 vcDL3 set $02
(1)  437/   B1A94 : =$2                 vcDL4 set $02
(1)  438/   B1A94 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  438/   B1A94 : =$F                 vcRR1 set $0F
(1)  438/   B1A94 : =$F                 vcRR2 set $0F
(1)  438/   B1A94 : =$F                 vcRR3 set $0F
(1)  438/   B1A94 : =$F                 vcRR4 set $0F
(1)  439/   B1A94 : (MACRO)             	smpsVcTotalLevel    $84, $0E, $30, $25
(1)  439/   B1A94 : =$84                vcTL1 set $84
(1)  439/   B1A94 : =$E                 vcTL2 set $0E
(1)  439/   B1A94 : =$30                vcTL3 set $30
(1)  439/   B1A94 : =$25                vcTL4 set $25
(1)  439/   B1A94 : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  439/   B1A95 :                     ;   0     1     2     3     4     5     6     7
(1)  439/   B1A95 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  439/   B1A95 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  439/   B1A95 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  439/   B1A95 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  439/   B1A95 : =$80                vcTLMask1 set $80
(1)  439/   B1A95 :                     
(1)  439/   B1A95 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  439/   B1A95 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  439/   B1A95 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  439/   B1A95 : =$80                vcTLMask1 set $80
(1)  439/   B1A95 : =$4                 vcTL1 set vcTL1&$7F
(1)  439/   B1A95 : =$E                 vcTL2 set vcTL2&$7F
(1)  439/   B1A95 : =$30                vcTL3 set vcTL3&$7F
(1)  439/   B1A95 : =$25                vcTL4 set vcTL4&$7F
(1)  439/   B1A95 :                     
(1)  439/   B1A95 : 0970 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  439/   B1A99 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  439/   B1A9D : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  439/   B1AA1 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  439/   B1AA5 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  439/   B1AA9 : 2530 0E84                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  440/   B1AAD :                     
(1)  441/   B1AAD :                     ;	Voice $05
(1)  442/   B1AAD :                     ;	$08
(1)  443/   B1AAD :                     ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  444/   B1AAD :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $84
(1)  445/   B1AAD : (MACRO)             	smpsVcAlgorithm     $00
(1)  445/   B1AAD : =$0                 vcAlgorithm set $00
(1)  446/   B1AAD : (MACRO)             	smpsVcFeedback      $01
(1)  446/   B1AAD : =$1                 vcFeedback set $01
(1)  447/   B1AAD : (MACRO)             	smpsVcUnusedBits    $00
(1)  447/   B1AAD : =$0                 vcUnusedBits set $00
(1)  447/   B1AAD : =$0                 vcD1R1Unk set 0
(1)  447/   B1AAD : =$0                 vcD1R2Unk set 0
(1)  447/   B1AAD : =$0                 vcD1R3Unk set 0
(1)  447/   B1AAD : =$0                 vcD1R4Unk set 0
(1)  448/   B1AAD : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  448/   B1AAD : =$0                 vcDT1 set $00
(1)  448/   B1AAD : =$3                 vcDT2 set $03
(1)  448/   B1AAD : =$7                 vcDT3 set $07
(1)  448/   B1AAD : =$0                 vcDT4 set $00
(1)  449/   B1AAD : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)  449/   B1AAD : =$0                 vcCF1 set $00
(1)  449/   B1AAD : =$0                 vcCF2 set $00
(1)  449/   B1AAD : =$0                 vcCF3 set $00
(1)  449/   B1AAD : =$9                 vcCF4 set $09
(1)  450/   B1AAD : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  450/   B1AAD : =$1                 vcRS1 set $01
(1)  450/   B1AAD : =$1                 vcRS2 set $01
(1)  450/   B1AAD : =$0                 vcRS3 set $00
(1)  450/   B1AAD : =$0                 vcRS4 set $00
(1)  451/   B1AAD : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  451/   B1AAD : =$1F                vcAR1 set $1F
(1)  451/   B1AAD : =$1F                vcAR2 set $1F
(1)  451/   B1AAD : =$1F                vcAR3 set $1F
(1)  451/   B1AAD : =$1F                vcAR4 set $1F
(1)  452/   B1AAD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  452/   B1AAD : =$0                 vcAM1 set $00<<5
(1)  452/   B1AAD : =$0                 vcAM2 set $00<<5
(1)  452/   B1AAD : =$0                 vcAM3 set $00<<5
(1)  452/   B1AAD : =$0                 vcAM4 set $00<<5
(1)  453/   B1AAD : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  453/   B1AAD : =$A                 vcD1R1 set $0A
(1)  453/   B1AAD : =$A                 vcD1R2 set $0A
(1)  453/   B1AAD : =$E                 vcD1R3 set $0E
(1)  453/   B1AAD : =$12                vcD1R4 set $12
(1)  454/   B1AAD : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  454/   B1AAD : =$3                 vcD2R1 set $03
(1)  454/   B1AAD : =$4                 vcD2R2 set $04
(1)  454/   B1AAD : =$4                 vcD2R3 set $04
(1)  454/   B1AAD : =$0                 vcD2R4 set $00
(1)  455/   B1AAD : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  455/   B1AAD : =$2                 vcDL1 set $02
(1)  455/   B1AAD : =$2                 vcDL2 set $02
(1)  455/   B1AAD : =$2                 vcDL3 set $02
(1)  455/   B1AAD : =$2                 vcDL4 set $02
(1)  456/   B1AAD : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  456/   B1AAD : =$F                 vcRR1 set $0F
(1)  456/   B1AAD : =$F                 vcRR2 set $0F
(1)  456/   B1AAD : =$F                 vcRR3 set $0F
(1)  456/   B1AAD : =$F                 vcRR4 set $0F
(1)  457/   B1AAD : (MACRO)             	smpsVcTotalLevel    $84, $13, $30, $25
(1)  457/   B1AAD : =$84                vcTL1 set $84
(1)  457/   B1AAD : =$13                vcTL2 set $13
(1)  457/   B1AAD : =$30                vcTL3 set $30
(1)  457/   B1AAD : =$25                vcTL4 set $25
(1)  457/   B1AAD : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  457/   B1AAE :                     ;   0     1     2     3     4     5     6     7
(1)  457/   B1AAE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  457/   B1AAE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  457/   B1AAE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  457/   B1AAE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  457/   B1AAE : =$80                vcTLMask1 set $80
(1)  457/   B1AAE :                     
(1)  457/   B1AAE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  457/   B1AAE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  457/   B1AAE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  457/   B1AAE : =$80                vcTLMask1 set $80
(1)  457/   B1AAE : =$4                 vcTL1 set vcTL1&$7F
(1)  457/   B1AAE : =$13                vcTL2 set vcTL2&$7F
(1)  457/   B1AAE : =$30                vcTL3 set vcTL3&$7F
(1)  457/   B1AAE : =$25                vcTL4 set vcTL4&$7F
(1)  457/   B1AAE :                     
(1)  457/   B1AAE : 0970 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  457/   B1AB2 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  457/   B1AB6 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  457/   B1ABA : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  457/   B1ABE : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  457/   B1AC2 : 2530 1384                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  458/   B1AC6 :                     
(1)  459/   B1AC6 :                     
   34/   B1AC6 :                        Music_06:		include		"music-improved/86 - HTZ.asm"
(1)    1/   B1AC6 :                     HTZ_Header:
(1)    2/   B1AC6 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B1AC6 :                     
(1)    2/   B1AC6 : =$2                 SourceDriver set 2
(1)    2/   B1AC6 :                     
(1)    2/   B1AC6 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B1AC6 :                     
(1)    2/   B1AC6 : =$B1AC6             songStart set *
(1)    2/   B1AC6 :                     
(1)    2/   B1AC6 :                     
(1)    3/   B1AC6 : (MACRO)             	smpsHeaderVoice     HTZ_Voices
(1)    3/   B1AC6 : EA9E                                dc.w    z80_ptr(HTZ_VOICES)
(1)    4/   B1AC8 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B1AC8 : 0603                        dc.b    $06,$03
(1)    5/   B1ACA : (MACRO)             	smpsHeaderTempo     $01, $BE
(1)    5/   B1ACA : 01                          dc.b    $01
(1)    5/   B1ACB :  (MACRO-2)                  convertMainTempoMod $BE
(1)    5/   B1ACB : 42                                          dc.b    s2TempotoS3($BE)
(1)    6/   B1ACC :                     
(1)    7/   B1ACC : (MACRO)             	smpsHeaderDAC       HTZ_DAC
(1)    7/   B1ACC :  (MACRO-2)                  CheckedChannelPointer HTZ_DAC
(1)    7/   B1ACC : 519E                                dc.w    z80_ptr(HTZ_DAC)
(1)    7/   B1ACE : 0000                                dc.w    $00
(1)    8/   B1AD0 : (MACRO)             	smpsHeaderFM        HTZ_FM1,	$0C, $07
(1)    8/   B1AD0 :  (MACRO-2)                  CheckedChannelPointer HTZ_FM1
(1)    8/   B1AD0 : F79A                                dc.w    z80_ptr(HTZ_FM1)
(1)    8/   B1AD2 : 0C07                        dc.b    $0C,$07
(1)    9/   B1AD4 : (MACRO)             	smpsHeaderFM        HTZ_FM2,	$0C, $07
(1)    9/   B1AD4 :  (MACRO-2)                  CheckedChannelPointer HTZ_FM2
(1)    9/   B1AD4 : 7C9D                                dc.w    z80_ptr(HTZ_FM2)
(1)    9/   B1AD6 : 0C07                        dc.b    $0C,$07
(1)   10/   B1AD8 : (MACRO)             	smpsHeaderFM        HTZ_FM3,	$0C, $07
(1)   10/   B1AD8 :  (MACRO-2)                  CheckedChannelPointer HTZ_FM3
(1)   10/   B1AD8 : E89B                                dc.w    z80_ptr(HTZ_FM3)
(1)   10/   B1ADA : 0C07                        dc.b    $0C,$07
(1)   11/   B1ADC : (MACRO)             	smpsHeaderFM        HTZ_FM4,	$00, $07
(1)   11/   B1ADC :  (MACRO-2)                  CheckedChannelPointer HTZ_FM4
(1)   11/   B1ADC : 2E9D                                dc.w    z80_ptr(HTZ_FM4)
(1)   11/   B1ADE : 0007                        dc.b    $00,$07
(1)   12/   B1AE0 : (MACRO)             	smpsHeaderFM        HTZ_FM5,	$00, $07
(1)   12/   B1AE0 :  (MACRO-2)                  CheckedChannelPointer HTZ_FM5
(1)   12/   B1AE0 : DE9C                                dc.w    z80_ptr(HTZ_FM5)
(1)   12/   B1AE2 : 0007                        dc.b    $00,$07
(1)   13/   B1AE4 : (MACRO)             	smpsHeaderPSG       HTZ_PSG1,	$00, $06, $00, $00
(1)   13/   B1AE4 :  (MACRO-2)                  CheckedChannelPointer HTZ_PSG1
(1)   13/   B1AE4 : F69A                                dc.w    z80_ptr(HTZ_PSG1)
(1)   13/   B1AE6 :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/   B1AE6 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   13/   B1AE7 : 0600 00                     dc.b    $06,$00,$00
(1)   14/   B1AEA : (MACRO)             	smpsHeaderPSG       HTZ_PSG2,	$00, $05, $00, $00
(1)   14/   B1AEA :  (MACRO-2)                  CheckedChannelPointer HTZ_PSG2
(1)   14/   B1AEA : F69A                                dc.w    z80_ptr(HTZ_PSG2)
(1)   14/   B1AEC :  (MACRO-2)                  PSGPitchConvert $00
(1)   14/   B1AEC : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   14/   B1AED : 0500 00                     dc.b    $05,$00,$00
(1)   15/   B1AF0 : (MACRO)             	smpsHeaderPSG       HTZ_PSG3,	$00, $00, $00, $00
(1)   15/   B1AF0 :  (MACRO-2)                  CheckedChannelPointer HTZ_PSG3
(1)   15/   B1AF0 : F69A                                dc.w    z80_ptr(HTZ_PSG3)
(1)   15/   B1AF2 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B1AF2 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B1AF3 : 0000 00                     dc.b    $00,$00,$00
(1)   16/   B1AF6 :                     
(1)   17/   B1AF6 :                     ; PSG1 Data
(1)   18/   B1AF6 :                     HTZ_PSG1:
(1)   19/   B1AF6 :                     ; PSG2 Data
(1)   20/   B1AF6 :                     HTZ_PSG2:
(1)   21/   B1AF6 :                     ; PSG3 Data
(1)   22/   B1AF6 :                     HTZ_PSG3:
(1)   23/   B1AF6 : (MACRO)             	smpsStop
(1)   23/   B1AF6 : F2                          dc.b    $F2
(1)   24/   B1AF7 :                     
(1)   25/   B1AF7 :                     ; FM1 Data
(1)   26/   B1AF7 :                     HTZ_FM1:
(1)   27/   B1AF7 : (MACRO)             	smpsSetvoice        $01
(1)   27/   B1AF7 :  (MACRO-2)                  smpsFMvoice $01
(1)   27/   B1AF7 : EF01                                dc.b    $EF,$01
(1)   28/   B1AF9 : (MACRO)             	smpsAlterNote       $06
(1)   28/   B1AF9 :  (MACRO-2)                  smpsDetune      $06
(1)   28/   B1AF9 : E106                        dc.b    $E1,$06
(1)   29/   B1AFB : 8060                	dc.b	nRst, $60
(1)   30/   B1AFD : (MACRO)             	smpsModSet          $08, $01, $02, $40
(1)   30/   B1AFD : F0                          dc.b    $F0
(1)   30/   B1AFE : 0901 0241                           dc.b    $08+1,$01,$02,(($40+1) * $01) & $FF
(1)   30/   B1B02 :                             ;dc.b   $01,$02,$40
(1)   31/   B1B02 : B330                	dc.b	nD4, $30
(1)   32/   B1B04 : (MACRO)             	smpsModSet          $08, $01, $03, $20
(1)   32/   B1B04 : F0                          dc.b    $F0
(1)   32/   B1B05 : 0901 0321                           dc.b    $08+1,$01,$03,(($20+1) * $01) & $FF
(1)   32/   B1B09 :                             ;dc.b   $01,$03,$20
(1)   33/   B1B09 : E7B3 18             	dc.b	smpsNoAttack, nD4, $18
(1)   34/   B1B0C : (MACRO)             	smpsModSet          $08, $01, $03, $20
(1)   34/   B1B0C : F0                          dc.b    $F0
(1)   34/   B1B0D : 0901 0321                           dc.b    $08+1,$01,$03,(($20+1) * $01) & $FF
(1)   34/   B1B11 :                             ;dc.b   $01,$03,$20
(1)   35/   B1B11 : E7B3 18             	dc.b	smpsNoAttack, nD4, $18
(1)   36/   B1B14 : (MACRO)             	smpsModOff
(1)   36/   B1B14 : FA                                  dc.b    $FA
(1)   37/   B1B15 : B10C 8054           	dc.b	nC4, $0C, nRst, $54
(1)   38/   B1B19 : (MACRO)             	smpsCall            HTZ_Call0C
(1)   38/   B1B19 : F8                          dc.b    $F8
(1)   38/   B1B1A : 469C                                dc.w    z80_ptr(HTZ_CALL0C)
(1)   39/   B1B1C : (MACRO)             	smpsSetvoice        $01
(1)   39/   B1B1C :  (MACRO-2)                  smpsFMvoice $01
(1)   39/   B1B1C : EF01                                dc.b    $EF,$01
(1)   40/   B1B1E : (MACRO)             	smpsCall            HTZ_Call0D
(1)   40/   B1B1E : F8                          dc.b    $F8
(1)   40/   B1B1F : C39B                                dc.w    z80_ptr(HTZ_CALL0D)
(1)   41/   B1B21 : (MACRO)             	smpsAlterPitch      $F4
(1)   41/   B1B21 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   41/   B1B21 : FBF4                                dc.b    $FB,$F4
(1)   42/   B1B23 : (MACRO)             	smpsCall            HTZ_Call08
(1)   42/   B1B23 : F8                          dc.b    $F8
(1)   42/   B1B24 : A19C                                dc.w    z80_ptr(HTZ_CALL08)
(1)   43/   B1B26 : (MACRO)             	smpsAlterPitch      $0C
(1)   43/   B1B26 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   43/   B1B26 : FB0C                                dc.b    $FB,$0C
(1)   44/   B1B28 : (MACRO)             	smpsSetvoice        $01
(1)   44/   B1B28 :  (MACRO-2)                  smpsFMvoice $01
(1)   44/   B1B28 : EF01                                dc.b    $EF,$01
(1)   45/   B1B2A : (MACRO)             	smpsCall            HTZ_Call0E
(1)   45/   B1B2A : F8                          dc.b    $F8
(1)   45/   B1B2B : D69B                                dc.w    z80_ptr(HTZ_CALL0E)
(1)   46/   B1B2D : (MACRO)             	smpsAlterPitch      $F4
(1)   46/   B1B2D :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   46/   B1B2D : FBF4                                dc.b    $FB,$F4
(1)   47/   B1B2F : (MACRO)             	smpsCall            HTZ_Call09
(1)   47/   B1B2F : F8                          dc.b    $F8
(1)   47/   B1B30 : B59C                                dc.w    z80_ptr(HTZ_CALL09)
(1)   48/   B1B32 : (MACRO)             	smpsAlterPitch      $0C
(1)   48/   B1B32 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   48/   B1B32 : FB0C                                dc.b    $FB,$0C
(1)   49/   B1B34 : (MACRO)             	smpsSetvoice        $01
(1)   49/   B1B34 :  (MACRO-2)                  smpsFMvoice $01
(1)   49/   B1B34 : EF01                                dc.b    $EF,$01
(1)   50/   B1B36 : (MACRO)             	smpsCall            HTZ_Call0D
(1)   50/   B1B36 : F8                          dc.b    $F8
(1)   50/   B1B37 : C39B                                dc.w    z80_ptr(HTZ_CALL0D)
(1)   51/   B1B39 : (MACRO)             	smpsAlterPitch      $F4
(1)   51/   B1B39 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   51/   B1B39 : FBF4                                dc.b    $FB,$F4
(1)   52/   B1B3B : (MACRO)             	smpsCall            HTZ_Call08
(1)   52/   B1B3B : F8                          dc.b    $F8
(1)   52/   B1B3C : A19C                                dc.w    z80_ptr(HTZ_CALL08)
(1)   53/   B1B3E : (MACRO)             	smpsAlterPitch      $0C
(1)   53/   B1B3E :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   53/   B1B3E : FB0C                                dc.b    $FB,$0C
(1)   54/   B1B40 : (MACRO)             	smpsSetvoice        $01
(1)   54/   B1B40 :  (MACRO-2)                  smpsFMvoice $01
(1)   54/   B1B40 : EF01                                dc.b    $EF,$01
(1)   55/   B1B42 : (MACRO)             	smpsCall            HTZ_Call0E
(1)   55/   B1B42 : F8                          dc.b    $F8
(1)   55/   B1B43 : D69B                                dc.w    z80_ptr(HTZ_CALL0E)
(1)   56/   B1B45 : (MACRO)             	smpsAlterPitch      $F4
(1)   56/   B1B45 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   56/   B1B45 : FBF4                                dc.b    $FB,$F4
(1)   57/   B1B47 : (MACRO)             	smpsCall            HTZ_Call0A
(1)   57/   B1B47 : F8                          dc.b    $F8
(1)   57/   B1B48 : C99C                                dc.w    z80_ptr(HTZ_CALL0A)
(1)   58/   B1B4A : (MACRO)             	smpsAlterPitch      $0C
(1)   58/   B1B4A :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   58/   B1B4A : FB0C                                dc.b    $FB,$0C
(1)   59/   B1B4C : (MACRO)             	smpsAlterNote       $FE
(1)   59/   B1B4C :  (MACRO-2)                  smpsDetune      $FE
(1)   59/   B1B4C : E1FE                        dc.b    $E1,$FE
(1)   60/   B1B4E : 800C                	dc.b	nRst, $0C
(1)   61/   B1B50 : (MACRO)             	smpsSetvoice        $03
(1)   61/   B1B50 :  (MACRO-2)                  smpsFMvoice $03
(1)   61/   B1B50 : EF03                                dc.b    $EF,$03
(1)   62/   B1B52 : A306 A2A3 A580 0CA3 	dc.b	nBb2, $06, nA2, nBb2, nC3, nRst, $0C, nBb2, $06, nA2, nBb2, nC3
            B1B5A : 06A2 A3A5         
(1)   63/   B1B5E : 8024 A206 A0A2 A580 	dc.b	nRst, $24, nA2, $06, nG2, nA2, nC3, nRst, $0C, nF2, $06, nE2
            B1B66 : 0C9E 069D         
(1)   64/   B1B6A : 9EA0 8018           	dc.b	nF2, nG2, nRst, $18
(1)   65/   B1B6E : (MACRO)             	smpsCall            HTZ_Call0F
(1)   65/   B1B6E : F8                          dc.b    $F8
(1)   65/   B1B6F : AE9B                                dc.w    z80_ptr(HTZ_CALL0F)
(1)   66/   B1B71 : A903 80A9 12AA 0380 	dc.b	nE3, $03, nRst, nE3, $12, nF3, $03, nRst, $09, nF3, $0C, nFs3
            B1B79 : 09AA 0CAB         
(1)   67/   B1B7D : 0380 09AB 0CAC 8018 	dc.b	$03, nRst, $09, nFs3, $0C, nG3, nRst, $18, nBb2, $06, nA2, nBb2
            B1B85 : A306 A2A3         
(1)   68/   B1B89 : A580 0CA3 06A2 A3A5 	dc.b	nC3, nRst, $0C, nBb2, $06, nA2, nBb2, nC3, nRst, $24, nA2, $06
            B1B91 : 8024 A206         
(1)   69/   B1B95 : A0A2 A580 0C9E 069D 	dc.b	nG2, nA2, nC3, nRst, $0C, nF2, $06, nE2, nF2, nG2, nRst, $18
            B1B9D : 9EA0 8018         
(1)   70/   B1BA1 : (MACRO)             	smpsCall            HTZ_Call0F
(1)   70/   B1BA1 : F8                          dc.b    $F8
(1)   70/   B1BA2 : AE9B                                dc.w    z80_ptr(HTZ_CALL0F)
(1)   71/   B1BA4 : A903 80A9 0680 54   	dc.b	nE3, $03, nRst, nE3, $06, nRst, $54
(1)   72/   B1BAB : (MACRO)             	smpsJump            HTZ_FM1
(1)   72/   B1BAB : F6                          dc.b    $F6
(1)   72/   B1BAC : F79A                                dc.w    z80_ptr(HTZ_FM1)
(1)   73/   B1BAE :                     
(1)   74/   B1BAE :                     HTZ_Call0F:
(1)   75/   B1BAE : A903 8009 A90C AA03 	dc.b	nE3, $03, nRst, $09, nE3, $0C, nF3, $03, nRst, $09, nF3, $0C
            B1BB6 : 8009 AA0C         
(1)   76/   B1BBA : AB03 8009 AB0C AC18 	dc.b	nFs3, $03, nRst, $09, nFs3, $0C, nG3, $18
(1)   77/   B1BC2 : (MACRO)             	smpsReturn
(1)   77/   B1BC2 : F9                                  dc.b    $F9
(1)   78/   B1BC3 :                     
(1)   79/   B1BC3 :                     HTZ_Call0D:
(1)   80/   B1BC3 : 8006 AC06 AE80 B180 	dc.b	nRst, $06, nG3, $06, nA3, nRst, nC4, nRst, nD4, nRst, nEb4, nRst
            B1BCB : B380 B480         
(1)   81/   B1BCF : B380 B1B3 80B1      	dc.b	nD4, nRst, nC4, nD4, nRst, nC4
(1)   82/   B1BD5 : (MACRO)             	smpsReturn
(1)   82/   B1BD5 : F9                                  dc.b    $F9
(1)   83/   B1BD6 :                     
(1)   84/   B1BD6 :                     HTZ_Call0E:
(1)   85/   B1BD6 : 8006 B812 B406 80B3 	dc.b	nRst, $06, nG4, $12, nEb4, $06, nRst, nD4, nRst, nEb4, nRst, nD4
            B1BDE : 80B4 80B3         
(1)   86/   B1BE2 : 80B1 AE80 B1        	dc.b	nRst, nC4, nA3, nRst, nC4
(1)   87/   B1BE7 : (MACRO)             	smpsReturn
(1)   87/   B1BE7 : F9                                  dc.b    $F9
(1)   88/   B1BE8 :                     
(1)   89/   B1BE8 :                     ; FM3 Data
(1)   90/   B1BE8 :                     HTZ_FM3:
(1)   91/   B1BE8 : (MACRO)             	smpsSetvoice        $01
(1)   91/   B1BE8 :  (MACRO-2)                  smpsFMvoice $01
(1)   91/   B1BE8 : EF01                                dc.b    $EF,$01
(1)   92/   B1BEA : 8060 8080 8080 60   	dc.b	nRst, $60, nRst, nRst, nRst, nRst, $60
(1)   93/   B1BF1 : (MACRO)             	smpsCall            HTZ_Call08
(1)   93/   B1BF1 : F8                          dc.b    $F8
(1)   93/   B1BF2 : A19C                                dc.w    z80_ptr(HTZ_CALL08)
(1)   94/   B1BF4 : 8060                	dc.b	nRst, $60
(1)   95/   B1BF6 : (MACRO)             	smpsCall            HTZ_Call09
(1)   95/   B1BF6 : F8                          dc.b    $F8
(1)   95/   B1BF7 : B59C                                dc.w    z80_ptr(HTZ_CALL09)
(1)   96/   B1BF9 : 8060                	dc.b	nRst, $60
(1)   97/   B1BFB : (MACRO)             	smpsCall            HTZ_Call08
(1)   97/   B1BFB : F8                          dc.b    $F8
(1)   97/   B1BFC : A19C                                dc.w    z80_ptr(HTZ_CALL08)
(1)   98/   B1BFE : 8060                	dc.b	nRst, $60
(1)   99/   B1C00 : (MACRO)             	smpsCall            HTZ_Call0A
(1)   99/   B1C00 : F8                          dc.b    $F8
(1)   99/   B1C01 : C99C                                dc.w    z80_ptr(HTZ_CALL0A)
(1)  100/   B1C03 : (MACRO)             	smpsSetvoice        $01
(1)  100/   B1C03 :  (MACRO-2)                  smpsFMvoice $01
(1)  100/   B1C03 : EF01                                dc.b    $EF,$01
(1)  101/   B1C05 : (MACRO)             	smpsCall            HTZ_Call0B
(1)  101/   B1C05 : F8                          dc.b    $F8
(1)  101/   B1C06 : 279C                                dc.w    z80_ptr(HTZ_CALL0B)
(1)  102/   B1C08 : B130 E7B1 30E7 B10C 	dc.b	nC4, $30, smpsNoAttack, nC4, $30, smpsNoAttack, nC4, $0C, nRst, $60
            B1C10 : 8060               
(1)  103/   B1C12 : (MACRO)             	smpsCall            HTZ_Call0B
(1)  103/   B1C12 : F8                          dc.b    $F8
(1)  103/   B1C13 : 279C                                dc.w    z80_ptr(HTZ_CALL0B)
(1)  104/   B1C15 : B130 E7B1 30E7 B10C 	dc.b	nC4, $30, smpsNoAttack, nC4, $30, smpsNoAttack, nC4, $0C, nG4, $03, nRst, nG4
            B1C1D : B803 80B8         
(1)  105/   B1C21 : 0680 54             	dc.b	$06, nRst, $54
(1)  106/   B1C24 : (MACRO)             	smpsJump            HTZ_FM3
(1)  106/   B1C24 : F6                          dc.b    $F6
(1)  106/   B1C25 : E89B                                dc.w    z80_ptr(HTZ_FM3)
(1)  107/   B1C27 :                     
(1)  108/   B1C27 :                     HTZ_Call0B:
(1)  109/   B1C27 : 800C AF12 8006 B180 	dc.b	nRst, $0C, nBb3, $12, nRst, $06, nC4, nRst, nD4, $12, nRst, $06
            B1C2F : B312 8006         
(1)  110/   B1C33 : B512 8006 B612 8006 	dc.b	nE4, $12, nRst, $06, nF4, $12, nRst, $06, nE4, $12, nRst, $06
            B1C3B : B512 8006         
(1)  111/   B1C3F : B380 AF12 8006      	dc.b	nD4, nRst, nBb3, $12, nRst, $06
(1)  112/   B1C45 : (MACRO)             	smpsReturn
(1)  112/   B1C45 : F9                                  dc.b    $F9
(1)  113/   B1C46 :                     
(1)  114/   B1C46 :                     HTZ_Call0C:
(1)  115/   B1C46 : 8006                	dc.b	nRst, $06
(1)  116/   B1C48 : (MACRO)             	smpsAlterVol        $17
(1)  116/   B1C48 : E617                        dc.b    $E6,$17
(1)  117/   B1C4A : B405 E7B3 05        	dc.b	nEb4, $05, smpsNoAttack, nD4, $05
(1)  118/   B1C4F : (MACRO)             	smpsAlterVol        $FE
(1)  118/   B1C4F : E6FE                        dc.b    $E6,$FE
(1)  119/   B1C51 : B404 E7B3 04        	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
(1)  120/   B1C56 : (MACRO)             	smpsAlterVol        $FE
(1)  120/   B1C56 : E6FE                        dc.b    $E6,$FE
(1)  121/   B1C58 : B404 E7B3 04        	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
(1)  122/   B1C5D : (MACRO)             	smpsAlterVol        $FE
(1)  122/   B1C5D : E6FE                        dc.b    $E6,$FE
(1)  123/   B1C5F : B404 E7B3 04        	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
(1)  124/   B1C64 : (MACRO)             	smpsAlterVol        $FE
(1)  124/   B1C64 : E6FE                        dc.b    $E6,$FE
(1)  125/   B1C66 : B404 E7B3 04        	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
(1)  126/   B1C6B : (MACRO)             	smpsAlterVol        $FE
(1)  126/   B1C6B : E6FE                        dc.b    $E6,$FE
(1)  127/   B1C6D : B404 E7B3 04        	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
(1)  128/   B1C72 : (MACRO)             	smpsAlterVol        $FE
(1)  128/   B1C72 : E6FE                        dc.b    $E6,$FE
(1)  129/   B1C74 : B403 E7B3 04        	dc.b	nEb4, $03, smpsNoAttack, nD4, $04
(1)  130/   B1C79 : (MACRO)             	smpsAlterVol        $FE
(1)  130/   B1C79 : E6FE                        dc.b    $E6,$FE
(1)  131/   B1C7B : B403 E7B3 03        	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
(1)  132/   B1C80 : (MACRO)             	smpsAlterVol        $FE
(1)  132/   B1C80 : E6FE                        dc.b    $E6,$FE
(1)  133/   B1C82 : B403 E7B3 03        	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
(1)  134/   B1C87 : (MACRO)             	smpsAlterVol        $FE
(1)  134/   B1C87 : E6FE                        dc.b    $E6,$FE
(1)  135/   B1C89 : B403 E7B3 03        	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
(1)  136/   B1C8E : (MACRO)             	smpsAlterVol        $FE
(1)  136/   B1C8E : E6FE                        dc.b    $E6,$FE
(1)  137/   B1C90 : B403 E7B3 03        	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
(1)  138/   B1C95 : (MACRO)             	smpsAlterVol        $FE
(1)  138/   B1C95 : E6FE                        dc.b    $E6,$FE
(1)  139/   B1C97 : B403 E7B3 03        	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
(1)  140/   B1C9C : (MACRO)             	smpsAlterVol        $FF
(1)  140/   B1C9C : E6FF                        dc.b    $E6,$FF
(1)  141/   B1C9E : B403                	dc.b	nEb4, $03
(1)  142/   B1CA0 : (MACRO)             	smpsReturn
(1)  142/   B1CA0 : F9                                  dc.b    $F9
(1)  143/   B1CA1 :                     
(1)  144/   B1CA1 :                     HTZ_Call08:
(1)  145/   B1CA1 : 800C                	dc.b	nRst, $0C
(1)  146/   B1CA3 : (MACRO)             	smpsSetvoice        $03
(1)  146/   B1CA3 :  (MACRO-2)                  smpsFMvoice $03
(1)  146/   B1CA3 : EF03                                dc.b    $EF,$03
(1)  147/   B1CA5 : AC06 AEB1 8012 AC06 	dc.b	nG3, $06, nA3, nC4, nRst, $12, nG3, $06, nA3, nC4, nRst, nEb4
            B1CAD : AEB1 80B4         
(1)  148/   B1CB1 : B180 B1             	dc.b	nC4, nRst, nC4
(1)  149/   B1CB4 : (MACRO)             	smpsReturn
(1)  149/   B1CB4 : F9                                  dc.b    $F9
(1)  150/   B1CB5 :                     
(1)  151/   B1CB5 :                     HTZ_Call09:
(1)  152/   B1CB5 : 8006                	dc.b	nRst, $06
(1)  153/   B1CB7 : (MACRO)             	smpsSetvoice        $03
(1)  153/   B1CB7 :  (MACRO-2)                  smpsFMvoice $03
(1)  153/   B1CB7 : EF03                                dc.b    $EF,$03
(1)  154/   B1CB9 : AF12 AE06 8012 AF06 	dc.b	nBb3, $12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3, nRst, nBb3
            B1CC1 : 80AE 80AF         
(1)  155/   B1CC5 : B180 B1             	dc.b	nC4, nRst, nC4
(1)  156/   B1CC8 : (MACRO)             	smpsReturn
(1)  156/   B1CC8 : F9                                  dc.b    $F9
(1)  157/   B1CC9 :                     
(1)  158/   B1CC9 :                     HTZ_Call0A:
(1)  159/   B1CC9 : 8006                	dc.b	nRst, $06
(1)  160/   B1CCB : (MACRO)             	smpsSetvoice        $03
(1)  160/   B1CCB :  (MACRO-2)                  smpsFMvoice $03
(1)  160/   B1CCB : EF03                                dc.b    $EF,$03
(1)  161/   B1CCD : AF12 AE06 8012 AF06 	dc.b	nBb3, $12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3, nRst, nBb3
            B1CD5 : 80AE 80AF         
(1)  162/   B1CD9 : 0380 B112           	dc.b	$03, nRst, nC4, $12
(1)  163/   B1CDD : (MACRO)             	smpsReturn
(1)  163/   B1CDD : F9                                  dc.b    $F9
(1)  164/   B1CDE :                     
(1)  165/   B1CDE :                     ; FM5 Data
(1)  166/   B1CDE :                     HTZ_FM5:
(1)  167/   B1CDE : (MACRO)             	smpsSetvoice        $02
(1)  167/   B1CDE :  (MACRO-2)                  smpsFMvoice $02
(1)  167/   B1CDE : EF02                                dc.b    $EF,$02
(1)  168/   B1CE0 : (MACRO)             	smpsAlterNote       $04
(1)  168/   B1CE0 :  (MACRO-2)                  smpsDetune      $04
(1)  168/   B1CE0 : E104                        dc.b    $E1,$04
(1)  169/   B1CE2 :                     
(1)  170/   B1CE2 :                     HTZ_Jump02:
(1)  171/   B1CE2 : 8060 8080 80        	dc.b	nRst, $60, nRst, nRst, nRst
(1)  172/   B1CE7 :                     
(1)  173/   B1CE7 :                     HTZ_Loop02:
(1)  174/   B1CE7 : B803 E7BA 5DB6 03E7 	dc.b	nG4, $03, smpsNoAttack, nA4, $5D, nF4, $03, smpsNoAttack, nG4, $5D, nEb4, $03
            B1CEF : B85D B403         
(1)  175/   B1CF3 : E7B6 5DB6 03E7 B85D 	dc.b	smpsNoAttack, nF4, $5D, nF4, $03, smpsNoAttack, nG4, $5D
(1)  176/   B1CFB : (MACRO)             	smpsLoop            $00, $02, HTZ_Loop02
(1)  176/   B1CFB : F7                          dc.b    $F7
(1)  176/   B1CFC : 0002                        dc.b    $00,$02
(1)  176/   B1CFE : E79C                                dc.w    z80_ptr(HTZ_LOOP02)
(1)  177/   B1D00 : (MACRO)             	smpsCall            HTZ_Call07
(1)  177/   B1D00 : F8                          dc.b    $F8
(1)  177/   B1D01 : 1D9D                                dc.w    z80_ptr(HTZ_CALL07)
(1)  178/   B1D03 : (MACRO)             	smpsCall            HTZ_Call07
(1)  178/   B1D03 : F8                          dc.b    $F8
(1)  178/   B1D04 : 1D9D                                dc.w    z80_ptr(HTZ_CALL07)
(1)  179/   B1D06 : 8060 80             	dc.b	nRst, $60, nRst
(1)  180/   B1D09 : (MACRO)             	smpsCall            HTZ_Call07
(1)  180/   B1D09 : F8                          dc.b    $F8
(1)  180/   B1D0A : 1D9D                                dc.w    z80_ptr(HTZ_CALL07)
(1)  181/   B1D0C : (MACRO)             	smpsCall            HTZ_Call07
(1)  181/   B1D0C : F8                          dc.b    $F8
(1)  181/   B1D0D : 1D9D                                dc.w    z80_ptr(HTZ_CALL07)
(1)  182/   B1D0F : 8060                	dc.b	nRst, $60
(1)  183/   B1D11 :                     
(1)  184/   B1D11 :                     HTZ_Loop03:
(1)  185/   B1D11 : BD06                	dc.b	nC5, $06
(1)  186/   B1D13 : (MACRO)             	smpsLoop            $00, $0F, HTZ_Loop03
(1)  186/   B1D13 : F7                          dc.b    $F7
(1)  186/   B1D14 : 000F                        dc.b    $00,$0F
(1)  186/   B1D16 : 119D                                dc.w    z80_ptr(HTZ_LOOP03)
(1)  187/   B1D18 : 8006                	dc.b	nRst, $06
(1)  188/   B1D1A : (MACRO)             	smpsJump            HTZ_Jump02
(1)  188/   B1D1A : F6                          dc.b    $F6
(1)  188/   B1D1B : E29C                                dc.w    z80_ptr(HTZ_JUMP02)
(1)  189/   B1D1D :                     
(1)  190/   B1D1D :                     HTZ_Call07:
(1)  191/   B1D1D : BA06 80BA 80B8 8012 	dc.b	nA4, $06, nRst, nA4, nRst, nG4, nRst, $12, nA4, $06, nRst, nA4
            B1D25 : BA06 80BA         
(1)  192/   B1D29 : 80B8 8012           	dc.b	nRst, nG4, nRst, $12
(1)  193/   B1D2D : (MACRO)             	smpsReturn
(1)  193/   B1D2D : F9                                  dc.b    $F9
(1)  194/   B1D2E :                     
(1)  195/   B1D2E :                     ; FM4 Data
(1)  196/   B1D2E :                     HTZ_FM4:
(1)  197/   B1D2E : (MACRO)             	smpsSetvoice        $02
(1)  197/   B1D2E :  (MACRO-2)                  smpsFMvoice $02
(1)  197/   B1D2E : EF02                                dc.b    $EF,$02
(1)  198/   B1D30 :                     
(1)  199/   B1D30 :                     HTZ_Jump01:
(1)  200/   B1D30 : 8060 8080 80        	dc.b	nRst, $60, nRst, nRst, nRst
(1)  201/   B1D35 :                     
(1)  202/   B1D35 :                     HTZ_Loop00:
(1)  203/   B1D35 : B403 E7B6 5DB3 03E7 	dc.b	nEb4, $03, smpsNoAttack, nF4, $5D, nD4, $03, smpsNoAttack, nE4, $5D, nC4, $03
            B1D3D : B55D B103         
(1)  204/   B1D41 : E7B3 5DB3 03E7 B55D 	dc.b	smpsNoAttack, nD4, $5D, nD4, $03, smpsNoAttack, nE4, $5D
(1)  205/   B1D49 : (MACRO)             	smpsLoop            $00, $02, HTZ_Loop00
(1)  205/   B1D49 : F7                          dc.b    $F7
(1)  205/   B1D4A : 0002                        dc.b    $00,$02
(1)  205/   B1D4C : 359D                                dc.w    z80_ptr(HTZ_LOOP00)
(1)  206/   B1D4E : (MACRO)             	smpsCall            HTZ_Call06
(1)  206/   B1D4E : F8                          dc.b    $F8
(1)  206/   B1D4F : 6B9D                                dc.w    z80_ptr(HTZ_CALL06)
(1)  207/   B1D51 : (MACRO)             	smpsCall            HTZ_Call06
(1)  207/   B1D51 : F8                          dc.b    $F8
(1)  207/   B1D52 : 6B9D                                dc.w    z80_ptr(HTZ_CALL06)
(1)  208/   B1D54 : 8060 80             	dc.b	nRst, $60, nRst
(1)  209/   B1D57 : (MACRO)             	smpsCall            HTZ_Call06
(1)  209/   B1D57 : F8                          dc.b    $F8
(1)  209/   B1D58 : 6B9D                                dc.w    z80_ptr(HTZ_CALL06)
(1)  210/   B1D5A : (MACRO)             	smpsCall            HTZ_Call06
(1)  210/   B1D5A : F8                          dc.b    $F8
(1)  210/   B1D5B : 6B9D                                dc.w    z80_ptr(HTZ_CALL06)
(1)  211/   B1D5D : 8060                	dc.b	nRst, $60
(1)  212/   B1D5F :                     
(1)  213/   B1D5F :                     HTZ_Loop01:
(1)  214/   B1D5F : BB06                	dc.b	nBb4, $06
(1)  215/   B1D61 : (MACRO)             	smpsLoop            $00, $0F, HTZ_Loop01
(1)  215/   B1D61 : F7                          dc.b    $F7
(1)  215/   B1D62 : 000F                        dc.b    $00,$0F
(1)  215/   B1D64 : 5F9D                                dc.w    z80_ptr(HTZ_LOOP01)
(1)  216/   B1D66 : 8006                	dc.b	nRst, $06
(1)  217/   B1D68 : (MACRO)             	smpsJump            HTZ_Jump01
(1)  217/   B1D68 : F6                          dc.b    $F6
(1)  217/   B1D69 : 309D                                dc.w    z80_ptr(HTZ_JUMP01)
(1)  218/   B1D6B :                     
(1)  219/   B1D6B :                     HTZ_Call06:
(1)  220/   B1D6B : B606 80B6 80B5 8012 	dc.b	nF4, $06, nRst, nF4, nRst, nE4, nRst, $12, nF4, $06, nRst, nF4
            B1D73 : B606 80B6         
(1)  221/   B1D77 : 80B5 8012           	dc.b	nRst, nE4, nRst, $12
(1)  222/   B1D7B : (MACRO)             	smpsReturn
(1)  222/   B1D7B : F9                                  dc.b    $F9
(1)  223/   B1D7C :                     
(1)  224/   B1D7C :                     ; FM2 Data
(1)  225/   B1D7C :                     HTZ_FM2:
(1)  226/   B1D7C : (MACRO)             	smpsSetvoice        $00
(1)  226/   B1D7C :  (MACRO-2)                  smpsFMvoice $00
(1)  226/   B1D7C : EF00                                dc.b    $EF,$00
(1)  227/   B1D7E :                     
(1)  228/   B1D7E :                     HTZ_Jump00:
(1)  229/   B1D7E : (MACRO)             	smpsCall            HTZ_Call02
(1)  229/   B1D7E : F8                          dc.b    $F8
(1)  229/   B1D7F : E39D                                dc.w    z80_ptr(HTZ_CALL02)
(1)  230/   B1D81 : A806 A9A4 A580 1E96 	dc.b	nEb3, $06, nE3, nB2, nC3, nRst, $1E, nA1, $06, nA1, $0C, nBb1
            B1D89 : 0696 0C97         
(1)  231/   B1D8D : 98                  	dc.b	nB1
(1)  232/   B1D8E : (MACRO)             	smpsCall            HTZ_Call02
(1)  232/   B1D8E : F8                          dc.b    $F8
(1)  232/   B1D8F : E39D                                dc.w    z80_ptr(HTZ_CALL02)
(1)  233/   B1D91 : A806 A980 54        	dc.b	nEb3, $06, nE3, nRst, $54
(1)  234/   B1D96 : (MACRO)             	smpsCall            HTZ_Call03
(1)  234/   B1D96 : F8                          dc.b    $F8
(1)  234/   B1D97 : F49D                                dc.w    z80_ptr(HTZ_CALL03)
(1)  235/   B1D99 : (MACRO)             	smpsCall            HTZ_Call04
(1)  235/   B1D99 : F8                          dc.b    $F8
(1)  235/   B1D9A : 099E                                dc.w    z80_ptr(HTZ_CALL04)
(1)  236/   B1D9C : 980C A406 80        	dc.b	nB1, $0C, nB2, $06, nRst
(1)  237/   B1DA1 : (MACRO)             	smpsCall            HTZ_Call03
(1)  237/   B1DA1 : F8                          dc.b    $F8
(1)  237/   B1DA2 : F49D                                dc.w    z80_ptr(HTZ_CALL03)
(1)  238/   B1DA4 : (MACRO)             	smpsCall            HTZ_Call04
(1)  238/   B1DA4 : F8                          dc.b    $F8
(1)  238/   B1DA5 : 099E                                dc.w    z80_ptr(HTZ_CALL04)
(1)  239/   B1DA7 : 980C A406 80        	dc.b	nB1, $0C, nB2, $06, nRst
(1)  240/   B1DAC : (MACRO)             	smpsCall            HTZ_Call03
(1)  240/   B1DAC : F8                          dc.b    $F8
(1)  240/   B1DAD : F49D                                dc.w    z80_ptr(HTZ_CALL03)
(1)  241/   B1DAF : (MACRO)             	smpsCall            HTZ_Call04
(1)  241/   B1DAF : F8                          dc.b    $F8
(1)  241/   B1DB0 : 099E                                dc.w    z80_ptr(HTZ_CALL04)
(1)  242/   B1DB2 : 980C A406 80        	dc.b	nB1, $0C, nB2, $06, nRst
(1)  243/   B1DB7 : (MACRO)             	smpsCall            HTZ_Call03
(1)  243/   B1DB7 : F8                          dc.b    $F8
(1)  243/   B1DB8 : F49D                                dc.w    z80_ptr(HTZ_CALL03)
(1)  244/   B1DBA : (MACRO)             	smpsCall            HTZ_Call04
(1)  244/   B1DBA : F8                          dc.b    $F8
(1)  244/   B1DBB : 099E                                dc.w    z80_ptr(HTZ_CALL04)
(1)  245/   B1DBD : 990C A506 80        	dc.b	nC2, $0C, nC3, $06, nRst
(1)  246/   B1DC2 : (MACRO)             	smpsCall            HTZ_Call05
(1)  246/   B1DC2 : F8                          dc.b    $F8
(1)  246/   B1DC3 : 189E                                dc.w    z80_ptr(HTZ_CALL05)
(1)  247/   B1DC5 : 9906 9912 9B06 809B 	dc.b	nC2, $06, nC2, $12, nD2, $06, nRst, nD2, $0C, nEb2, $06, nRst
            B1DCD : 0C9C 0680         
(1)  248/   B1DD1 : 9C0C 9D06 809D 0C   	dc.b	nEb2, $0C, nE2, $06, nRst, nE2, $0C
(1)  249/   B1DD8 : (MACRO)             	smpsCall            HTZ_Call05
(1)  249/   B1DD8 : F8                          dc.b    $F8
(1)  249/   B1DD9 : 189E                                dc.w    z80_ptr(HTZ_CALL05)
(1)  250/   B1DDB : 9906 9980 54        	dc.b	nC2, $06, nC2, nRst, $54
(1)  251/   B1DE0 : (MACRO)             	smpsJump            HTZ_Jump00
(1)  251/   B1DE0 : F6                          dc.b    $F6
(1)  251/   B1DE1 : 7E9D                                dc.w    z80_ptr(HTZ_JUMP00)
(1)  252/   B1DE3 :                     
(1)  253/   B1DE3 :                     HTZ_Call02:
(1)  254/   B1DE3 : 9906 A0A2 80A5 80A5 	dc.b	nC2, $06, nG2, nA2, nRst, nC3, nRst, nC3, nRst, nC3, nRst, nC3
            B1DEB : 80A5 80A5         
(1)  255/   B1DEF : 80A7 A512           	dc.b	nRst, nD3, nC3, $12
(1)  256/   B1DF3 : (MACRO)             	smpsReturn
(1)  256/   B1DF3 : F9                                  dc.b    $F9
(1)  257/   B1DF4 :                     
(1)  258/   B1DF4 :                     HTZ_Call03:
(1)  259/   B1DF4 : 990C A506 8096 0CA2 	dc.b	nC2, $0C, nC3, $06, nRst, nA1, $0C, nA2, $06, nRst, nBb1, $0C
            B1DFC : 0680 970C         
(1)  260/   B1E00 : A306 8098 0CA8 06A7 	dc.b	nBb2, $06, nRst, nB1, $0C, nEb3, $06, nD3
(1)  261/   B1E08 : (MACRO)             	smpsReturn
(1)  261/   B1E08 : F9                                  dc.b    $F9
(1)  262/   B1E09 :                     
(1)  263/   B1E09 :                     HTZ_Call04:
(1)  264/   B1E09 : 9906 9912 960C A206 	dc.b	nC2, $06, nC2, $12, nA1, $0C, nA2, $06, nRst, nBb1, $0C, nBb2
            B1E11 : 8097 0CA3         
(1)  265/   B1E15 : 0680                	dc.b	$06, nRst
(1)  266/   B1E17 : (MACRO)             	smpsReturn
(1)  266/   B1E17 : F9                                  dc.b    $F9
(1)  267/   B1E18 :                     
(1)  268/   B1E18 :                     HTZ_Call05:
(1)  269/   B1E18 : 970C A306 A397 0CA3 	dc.b	nBb1, $0C, nBb2, $06, nBb2, nBb1, $0C, nBb2, $06, nBb2, nBb1, $0C
            B1E20 : 06A3 970C         
(1)  270/   B1E24 : A306 A397 0CA3 06A3 	dc.b	nBb2, $06, nBb2, nBb1, $0C, nBb2, $06, nBb2, nA1, nA1, $12, nA1
            B1E2C : 9696 1296         
(1)  271/   B1E30 : 0CA2 06A2 940C A006 	dc.b	$0C, nA2, $06, nA2, nG1, $0C, nG2, $06, nG2, nG1, $0C, nG2
            B1E38 : A094 0CA0         
(1)  272/   B1E3C : 06A0 9980 990C 9B06 	dc.b	$06, nG2, nC2, nRst, nC2, $0C, nD2, $06, nRst, nD2, $0C, nEb2
            B1E44 : 809B 0C9C         
(1)  273/   B1E48 : 0680 9C0C 9D94 0696 	dc.b	$06, nRst, nEb2, $0C, nE2, nG1, $06, nA1
(1)  274/   B1E50 : (MACRO)             	smpsReturn
(1)  274/   B1E50 : F9                                  dc.b    $F9
(1)  275/   B1E51 :                     
(1)  276/   B1E51 :                     ; DAC Data
(1)  277/   B1E51 :                     HTZ_DAC:
(1)  278/   B1E51 : 8124 810C 8130 8106 	dc.b	dKick, $24, dKick, $0C, dKick, $30, dKick, $06, dKick, $1E, dKick, $0C
            B1E59 : 811E 810C         
(1)  279/   B1E5D : 8118 8281 2481 0C81 	dc.b	dKick, $18, dSnare, dKick, $24, dKick, $0C, dKick, $30, dKick, $06, dKick
            B1E65 : 3081 0681         
(1)  280/   B1E69 : 1E81 0C81 1882 0C82 	dc.b	$1E, dKick, $0C, dKick, $18, dSnare, $0C, dSnare, $06, dSnare
            B1E71 : 0682               
(1)  281/   B1E73 : (MACRO)             	smpsCall            HTZ_Call00
(1)  281/   B1E73 : F8                          dc.b    $F8
(1)  281/   B1E74 : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  282/   B1E76 : (MACRO)             	smpsCall            HTZ_Call01
(1)  282/   B1E76 : F8                          dc.b    $F8
(1)  282/   B1E77 : E09E                                dc.w    z80_ptr(HTZ_CALL01)
(1)  283/   B1E79 : 82                  	dc.b	dSnare
(1)  284/   B1E7A : (MACRO)             	smpsCall            HTZ_Call00
(1)  284/   B1E7A : F8                          dc.b    $F8
(1)  284/   B1E7B : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  285/   B1E7D : (MACRO)             	smpsCall            HTZ_Call01
(1)  285/   B1E7D : F8                          dc.b    $F8
(1)  285/   B1E7E : E09E                                dc.w    z80_ptr(HTZ_CALL01)
(1)  286/   B1E80 : 820C 8206 82        	dc.b	dSnare, $0C, dSnare, $06, dSnare
(1)  287/   B1E85 : (MACRO)             	smpsCall            HTZ_Call00
(1)  287/   B1E85 : F8                          dc.b    $F8
(1)  287/   B1E86 : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  288/   B1E88 : (MACRO)             	smpsCall            HTZ_Call01
(1)  288/   B1E88 : F8                          dc.b    $F8
(1)  288/   B1E89 : E09E                                dc.w    z80_ptr(HTZ_CALL01)
(1)  289/   B1E8B : 820C 8206 82        	dc.b	dSnare, $0C, dSnare, $06, dSnare
(1)  290/   B1E90 : (MACRO)             	smpsCall            HTZ_Call00
(1)  290/   B1E90 : F8                          dc.b    $F8
(1)  290/   B1E91 : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  291/   B1E93 : 8106 8112 820C 8181 	dc.b	dKick, $06, dKick, $12, dSnare, $0C, dKick, dKick, dSnare, dSnare, dSnare, $06
            B1E9B : 8282 8206         
(1)  292/   B1E9F : 82                  	dc.b	dSnare
(1)  293/   B1EA0 : (MACRO)             	smpsCall            HTZ_Call00
(1)  293/   B1EA0 : F8                          dc.b    $F8
(1)  293/   B1EA1 : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  294/   B1EA3 : (MACRO)             	smpsCall            HTZ_Call01
(1)  294/   B1EA3 : F8                          dc.b    $F8
(1)  294/   B1EA4 : E09E                                dc.w    z80_ptr(HTZ_CALL01)
(1)  295/   B1EA6 : 820C 8206 82        	dc.b	dSnare, $0C, dSnare, $06, dSnare
(1)  296/   B1EAB : (MACRO)             	smpsCall            HTZ_Call00
(1)  296/   B1EAB : F8                          dc.b    $F8
(1)  296/   B1EAC : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  297/   B1EAE : (MACRO)             	smpsCall            HTZ_Call01
(1)  297/   B1EAE : F8                          dc.b    $F8
(1)  297/   B1EAF : E09E                                dc.w    z80_ptr(HTZ_CALL01)
(1)  298/   B1EB1 : 82                  	dc.b	dSnare
(1)  299/   B1EB2 : (MACRO)             	smpsCall            HTZ_Call00
(1)  299/   B1EB2 : F8                          dc.b    $F8
(1)  299/   B1EB3 : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  300/   B1EB5 : (MACRO)             	smpsCall            HTZ_Call01
(1)  300/   B1EB5 : F8                          dc.b    $F8
(1)  300/   B1EB6 : E09E                                dc.w    z80_ptr(HTZ_CALL01)
(1)  301/   B1EB8 : 820C 8206 82        	dc.b	dSnare, $0C, dSnare, $06, dSnare
(1)  302/   B1EBD : (MACRO)             	smpsCall            HTZ_Call00
(1)  302/   B1EBD : F8                          dc.b    $F8
(1)  302/   B1EBE : D79E                                dc.w    z80_ptr(HTZ_CALL00)
(1)  303/   B1EC0 : 8206 810C 8106 810C 	dc.b	dSnare, $06, dKick, $0C, dKick, $06, dKick, $0C, dSnare, $06, dSnare, $0C
            B1EC8 : 8206 820C         
(1)  304/   B1ECC : 8181 0681 0C82 0682 	dc.b	dKick, dKick, $06, dKick, $0C, dSnare, $06, dSnare
(1)  305/   B1ED4 : (MACRO)             	smpsJump            HTZ_DAC
(1)  305/   B1ED4 : F6                          dc.b    $F6
(1)  305/   B1ED5 : 519E                                dc.w    z80_ptr(HTZ_DAC)
(1)  306/   B1ED7 :                     
(1)  307/   B1ED7 :                     HTZ_Call00:
(1)  308/   B1ED7 : 8118 820C 8181 1882 	dc.b	dKick, $18, dSnare, $0C, dKick, dKick, $18, dSnare
(1)  309/   B1EDF : (MACRO)             	smpsReturn
(1)  309/   B1EDF : F9                                  dc.b    $F9
(1)  310/   B1EE0 :                     
(1)  311/   B1EE0 :                     HTZ_Call01:
(1)  312/   B1EE0 : 8106 8112 820C 8181 	dc.b	dKick, $06, dKick, $12, dSnare, $0C, dKick, dKick, $18
            B1EE8 : 18               
(1)  313/   B1EE9 : (MACRO)             	smpsReturn
(1)  313/   B1EE9 : F9                                  dc.b    $F9
(1)  314/   B1EEA :                     
(1)  315/   B1EEA :                     HTZ_Voices:
(1)  316/   B1EEA :                     ;	Voice $00
(1)  317/   B1EEA :                     ;	$08
(1)  318/   B1EEA :                     ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  319/   B1EEA :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $84
(1)  320/   B1EEA : (MACRO)             	smpsVcAlgorithm     $00
(1)  320/   B1EEA : =$0                 vcAlgorithm set $00
(1)  321/   B1EEA : (MACRO)             	smpsVcFeedback      $01
(1)  321/   B1EEA : =$1                 vcFeedback set $01
(1)  322/   B1EEA : (MACRO)             	smpsVcUnusedBits    $00
(1)  322/   B1EEA : =$0                 vcUnusedBits set $00
(1)  322/   B1EEA : =$0                 vcD1R1Unk set 0
(1)  322/   B1EEA : =$0                 vcD1R2Unk set 0
(1)  322/   B1EEA : =$0                 vcD1R3Unk set 0
(1)  322/   B1EEA : =$0                 vcD1R4Unk set 0
(1)  323/   B1EEA : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  323/   B1EEA : =$0                 vcDT1 set $00
(1)  323/   B1EEA : =$3                 vcDT2 set $03
(1)  323/   B1EEA : =$7                 vcDT3 set $07
(1)  323/   B1EEA : =$0                 vcDT4 set $00
(1)  324/   B1EEA : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)  324/   B1EEA : =$0                 vcCF1 set $00
(1)  324/   B1EEA : =$0                 vcCF2 set $00
(1)  324/   B1EEA : =$0                 vcCF3 set $00
(1)  324/   B1EEA : =$9                 vcCF4 set $09
(1)  325/   B1EEA : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  325/   B1EEA : =$1                 vcRS1 set $01
(1)  325/   B1EEA : =$1                 vcRS2 set $01
(1)  325/   B1EEA : =$0                 vcRS3 set $00
(1)  325/   B1EEA : =$0                 vcRS4 set $00
(1)  326/   B1EEA : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  326/   B1EEA : =$1F                vcAR1 set $1F
(1)  326/   B1EEA : =$1F                vcAR2 set $1F
(1)  326/   B1EEA : =$1F                vcAR3 set $1F
(1)  326/   B1EEA : =$1F                vcAR4 set $1F
(1)  327/   B1EEA : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  327/   B1EEA : =$0                 vcAM1 set $00<<5
(1)  327/   B1EEA : =$0                 vcAM2 set $00<<5
(1)  327/   B1EEA : =$0                 vcAM3 set $00<<5
(1)  327/   B1EEA : =$0                 vcAM4 set $00<<5
(1)  328/   B1EEA : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  328/   B1EEA : =$A                 vcD1R1 set $0A
(1)  328/   B1EEA : =$A                 vcD1R2 set $0A
(1)  328/   B1EEA : =$E                 vcD1R3 set $0E
(1)  328/   B1EEA : =$12                vcD1R4 set $12
(1)  329/   B1EEA : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  329/   B1EEA : =$3                 vcD2R1 set $03
(1)  329/   B1EEA : =$4                 vcD2R2 set $04
(1)  329/   B1EEA : =$4                 vcD2R3 set $04
(1)  329/   B1EEA : =$0                 vcD2R4 set $00
(1)  330/   B1EEA : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  330/   B1EEA : =$2                 vcDL1 set $02
(1)  330/   B1EEA : =$2                 vcDL2 set $02
(1)  330/   B1EEA : =$2                 vcDL3 set $02
(1)  330/   B1EEA : =$2                 vcDL4 set $02
(1)  331/   B1EEA : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  331/   B1EEA : =$F                 vcRR1 set $0F
(1)  331/   B1EEA : =$F                 vcRR2 set $0F
(1)  331/   B1EEA : =$F                 vcRR3 set $0F
(1)  331/   B1EEA : =$F                 vcRR4 set $0F
(1)  332/   B1EEA : (MACRO)             	smpsVcTotalLevel    $84, $13, $30, $25
(1)  332/   B1EEA : =$84                vcTL1 set $84
(1)  332/   B1EEA : =$13                vcTL2 set $13
(1)  332/   B1EEA : =$30                vcTL3 set $30
(1)  332/   B1EEA : =$25                vcTL4 set $25
(1)  332/   B1EEA : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  332/   B1EEB :                     ;   0     1     2     3     4     5     6     7
(1)  332/   B1EEB :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  332/   B1EEB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  332/   B1EEB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  332/   B1EEB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  332/   B1EEB : =$80                vcTLMask1 set $80
(1)  332/   B1EEB :                     
(1)  332/   B1EEB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  332/   B1EEB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  332/   B1EEB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  332/   B1EEB : =$80                vcTLMask1 set $80
(1)  332/   B1EEB : =$4                 vcTL1 set vcTL1&$7F
(1)  332/   B1EEB : =$13                vcTL2 set vcTL2&$7F
(1)  332/   B1EEB : =$30                vcTL3 set vcTL3&$7F
(1)  332/   B1EEB : =$25                vcTL4 set vcTL4&$7F
(1)  332/   B1EEB :                     
(1)  332/   B1EEB : 0970 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  332/   B1EEF : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  332/   B1EF3 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  332/   B1EF7 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  332/   B1EFB : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  332/   B1EFF : 2530 1384                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  333/   B1F03 :                     
(1)  334/   B1F03 :                     ;	Voice $01
(1)  335/   B1F03 :                     ;	$38
(1)  336/   B1F03 :                     ;	$3A, $0A, $11, $02, 	$D4, $14, $50, $0E, 	$05, $08, $02, $88
(1)  337/   B1F03 :                     ;	$00, $00, $00, $00, 	$99, $09, $09, $1A, 	$2D, $2C, $19, $86
(1)  338/   B1F03 : (MACRO)             	smpsVcAlgorithm     $00
(1)  338/   B1F03 : =$0                 vcAlgorithm set $00
(1)  339/   B1F03 : (MACRO)             	smpsVcFeedback      $07
(1)  339/   B1F03 : =$7                 vcFeedback set $07
(1)  340/   B1F03 : (MACRO)             	smpsVcUnusedBits    $00
(1)  340/   B1F03 : =$0                 vcUnusedBits set $00
(1)  340/   B1F03 : =$0                 vcD1R1Unk set 0
(1)  340/   B1F03 : =$0                 vcD1R2Unk set 0
(1)  340/   B1F03 : =$0                 vcD1R3Unk set 0
(1)  340/   B1F03 : =$0                 vcD1R4Unk set 0
(1)  341/   B1F03 : (MACRO)             	smpsVcDetune        $00, $01, $00, $03
(1)  341/   B1F03 : =$0                 vcDT1 set $00
(1)  341/   B1F03 : =$1                 vcDT2 set $01
(1)  341/   B1F03 : =$0                 vcDT3 set $00
(1)  341/   B1F03 : =$3                 vcDT4 set $03
(1)  342/   B1F03 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $0A, $0A
(1)  342/   B1F03 : =$2                 vcCF1 set $02
(1)  342/   B1F03 : =$1                 vcCF2 set $01
(1)  342/   B1F03 : =$A                 vcCF3 set $0A
(1)  342/   B1F03 : =$A                 vcCF4 set $0A
(1)  343/   B1F03 : (MACRO)             	smpsVcRateScale     $00, $01, $00, $03
(1)  343/   B1F03 : =$0                 vcRS1 set $00
(1)  343/   B1F03 : =$1                 vcRS2 set $01
(1)  343/   B1F03 : =$0                 vcRS3 set $00
(1)  343/   B1F03 : =$3                 vcRS4 set $03
(1)  344/   B1F03 : (MACRO)             	smpsVcAttackRate    $0E, $10, $14, $14
(1)  344/   B1F03 : =$E                 vcAR1 set $0E
(1)  344/   B1F03 : =$10                vcAR2 set $10
(1)  344/   B1F03 : =$14                vcAR3 set $14
(1)  344/   B1F03 : =$14                vcAR4 set $14
(1)  345/   B1F03 : (MACRO)             	smpsVcAmpMod        $01, $00, $00, $00
(1)  345/   B1F03 : =$20                vcAM1 set $01<<5
(1)  345/   B1F03 : =$0                 vcAM2 set $00<<5
(1)  345/   B1F03 : =$0                 vcAM3 set $00<<5
(1)  345/   B1F03 : =$0                 vcAM4 set $00<<5
(1)  346/   B1F03 : (MACRO)             	smpsVcDecayRate1    $08, $02, $08, $05
(1)  346/   B1F03 : =$8                 vcD1R1 set $08
(1)  346/   B1F03 : =$2                 vcD1R2 set $02
(1)  346/   B1F03 : =$8                 vcD1R3 set $08
(1)  346/   B1F03 : =$5                 vcD1R4 set $05
(1)  347/   B1F03 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  347/   B1F03 : =$0                 vcD2R1 set $00
(1)  347/   B1F03 : =$0                 vcD2R2 set $00
(1)  347/   B1F03 : =$0                 vcD2R3 set $00
(1)  347/   B1F03 : =$0                 vcD2R4 set $00
(1)  348/   B1F03 : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $09
(1)  348/   B1F03 : =$1                 vcDL1 set $01
(1)  348/   B1F03 : =$0                 vcDL2 set $00
(1)  348/   B1F03 : =$0                 vcDL3 set $00
(1)  348/   B1F03 : =$9                 vcDL4 set $09
(1)  349/   B1F03 : (MACRO)             	smpsVcReleaseRate   $0A, $09, $09, $09
(1)  349/   B1F03 : =$A                 vcRR1 set $0A
(1)  349/   B1F03 : =$9                 vcRR2 set $09
(1)  349/   B1F03 : =$9                 vcRR3 set $09
(1)  349/   B1F03 : =$9                 vcRR4 set $09
(1)  350/   B1F03 : (MACRO)             	smpsVcTotalLevel    $86, $19, $2C, $2D
(1)  350/   B1F03 : =$86                vcTL1 set $86
(1)  350/   B1F03 : =$19                vcTL2 set $19
(1)  350/   B1F03 : =$2C                vcTL3 set $2C
(1)  350/   B1F03 : =$2D                vcTL4 set $2D
(1)  350/   B1F03 : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  350/   B1F04 :                     ;   0     1     2     3     4     5     6     7
(1)  350/   B1F04 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  350/   B1F04 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  350/   B1F04 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  350/   B1F04 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  350/   B1F04 : =$80                vcTLMask1 set $80
(1)  350/   B1F04 :                     
(1)  350/   B1F04 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  350/   B1F04 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  350/   B1F04 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  350/   B1F04 : =$80                vcTLMask1 set $80
(1)  350/   B1F04 : =$6                 vcTL1 set vcTL1&$7F
(1)  350/   B1F04 : =$19                vcTL2 set vcTL2&$7F
(1)  350/   B1F04 : =$2C                vcTL3 set vcTL3&$7F
(1)  350/   B1F04 : =$2D                vcTL4 set vcTL4&$7F
(1)  350/   B1F04 :                     
(1)  350/   B1F04 : 3A0A 1102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  350/   B1F08 : D414 500E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  350/   B1F0C : 0508 0228                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  350/   B1F10 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  350/   B1F14 : 9909 091A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  350/   B1F18 : 2D2C 1986                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  351/   B1F1C :                     
(1)  352/   B1F1C :                     ;	Voice $02
(1)  353/   B1F1C :                     ;	$0D
(1)  354/   B1F1C :                     ;	$32, $04, $02, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
(1)  355/   B1F1C :                     ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $86, $8B, $93
(1)  356/   B1F1C : (MACRO)             	smpsVcAlgorithm     $05
(1)  356/   B1F1C : =$5                 vcAlgorithm set $05
(1)  357/   B1F1C : (MACRO)             	smpsVcFeedback      $01
(1)  357/   B1F1C : =$1                 vcFeedback set $01
(1)  358/   B1F1C : (MACRO)             	smpsVcUnusedBits    $00
(1)  358/   B1F1C : =$0                 vcUnusedBits set $00
(1)  358/   B1F1C : =$0                 vcD1R1Unk set 0
(1)  358/   B1F1C : =$0                 vcD1R2Unk set 0
(1)  358/   B1F1C : =$0                 vcD1R3Unk set 0
(1)  358/   B1F1C : =$0                 vcD1R4Unk set 0
(1)  359/   B1F1C : (MACRO)             	smpsVcDetune        $00, $00, $00, $03
(1)  359/   B1F1C : =$0                 vcDT1 set $00
(1)  359/   B1F1C : =$0                 vcDT2 set $00
(1)  359/   B1F1C : =$0                 vcDT3 set $00
(1)  359/   B1F1C : =$3                 vcDT4 set $03
(1)  360/   B1F1C : (MACRO)             	smpsVcCoarseFreq    $01, $02, $04, $02
(1)  360/   B1F1C : =$1                 vcCF1 set $01
(1)  360/   B1F1C : =$2                 vcCF2 set $02
(1)  360/   B1F1C : =$4                 vcCF3 set $04
(1)  360/   B1F1C : =$2                 vcCF4 set $02
(1)  361/   B1F1C : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  361/   B1F1C : =$0                 vcRS1 set $00
(1)  361/   B1F1C : =$0                 vcRS2 set $00
(1)  361/   B1F1C : =$0                 vcRS3 set $00
(1)  361/   B1F1C : =$0                 vcRS4 set $00
(1)  362/   B1F1C : (MACRO)             	smpsVcAttackRate    $19, $19, $19, $1F
(1)  362/   B1F1C : =$19                vcAR1 set $19
(1)  362/   B1F1C : =$19                vcAR2 set $19
(1)  362/   B1F1C : =$19                vcAR3 set $19
(1)  362/   B1F1C : =$1F                vcAR4 set $1F
(1)  363/   B1F1C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  363/   B1F1C : =$0                 vcAM1 set $00<<5
(1)  363/   B1F1C : =$0                 vcAM2 set $00<<5
(1)  363/   B1F1C : =$0                 vcAM3 set $00<<5
(1)  363/   B1F1C : =$0                 vcAM4 set $00<<5
(1)  364/   B1F1C : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1)  364/   B1F1C : =$5                 vcD1R1 set $05
(1)  364/   B1F1C : =$5                 vcD1R2 set $05
(1)  364/   B1F1C : =$5                 vcD1R3 set $05
(1)  364/   B1F1C : =$A                 vcD1R4 set $0A
(1)  365/   B1F1C : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $00
(1)  365/   B1F1C : =$2                 vcD2R1 set $02
(1)  365/   B1F1C : =$2                 vcD2R2 set $02
(1)  365/   B1F1C : =$2                 vcD2R3 set $02
(1)  365/   B1F1C : =$0                 vcD2R4 set $00
(1)  366/   B1F1C : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $03
(1)  366/   B1F1C : =$2                 vcDL1 set $02
(1)  366/   B1F1C : =$2                 vcDL2 set $02
(1)  366/   B1F1C : =$2                 vcDL3 set $02
(1)  366/   B1F1C : =$3                 vcDL4 set $03
(1)  367/   B1F1C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  367/   B1F1C : =$F                 vcRR1 set $0F
(1)  367/   B1F1C : =$F                 vcRR2 set $0F
(1)  367/   B1F1C : =$F                 vcRR3 set $0F
(1)  367/   B1F1C : =$F                 vcRR4 set $0F
(1)  368/   B1F1C : (MACRO)             	smpsVcTotalLevel    $93, $8B, $86, $28
(1)  368/   B1F1C : =$93                vcTL1 set $93
(1)  368/   B1F1C : =$8B                vcTL2 set $8B
(1)  368/   B1F1C : =$86                vcTL3 set $86
(1)  368/   B1F1C : =$28                vcTL4 set $28
(1)  368/   B1F1C : 0D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  368/   B1F1D :                     ;   0     1     2     3     4     5     6     7
(1)  368/   B1F1D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  368/   B1F1D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  368/   B1F1D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  368/   B1F1D : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  368/   B1F1D : =$80                vcTLMask1 set $80
(1)  368/   B1F1D :                     
(1)  368/   B1F1D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  368/   B1F1D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  368/   B1F1D : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  368/   B1F1D : =$80                vcTLMask1 set $80
(1)  368/   B1F1D : =$13                vcTL1 set vcTL1&$7F
(1)  368/   B1F1D : =$B                 vcTL2 set vcTL2&$7F
(1)  368/   B1F1D : =$6                 vcTL3 set vcTL3&$7F
(1)  368/   B1F1D : =$28                vcTL4 set vcTL4&$7F
(1)  368/   B1F1D :                     
(1)  368/   B1F1D : 3204 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  368/   B1F21 : 1F19 1919                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  368/   B1F25 : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  368/   B1F29 : 0002 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  368/   B1F2D : 3F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  368/   B1F31 : 2886 8B93                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  369/   B1F35 :                     
(1)  370/   B1F35 :                     ;	Voice $03
(1)  371/   B1F35 :                     ;	$3A
(1)  372/   B1F35 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  373/   B1F35 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $86
(1)  374/   B1F35 : (MACRO)             	smpsVcAlgorithm     $02
(1)  374/   B1F35 : =$2                 vcAlgorithm set $02
(1)  375/   B1F35 : (MACRO)             	smpsVcFeedback      $07
(1)  375/   B1F35 : =$7                 vcFeedback set $07
(1)  376/   B1F35 : (MACRO)             	smpsVcUnusedBits    $00
(1)  376/   B1F35 : =$0                 vcUnusedBits set $00
(1)  376/   B1F35 : =$0                 vcD1R1Unk set 0
(1)  376/   B1F35 : =$0                 vcD1R2Unk set 0
(1)  376/   B1F35 : =$0                 vcD1R3Unk set 0
(1)  376/   B1F35 : =$0                 vcD1R4Unk set 0
(1)  377/   B1F35 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  377/   B1F35 : =$0                 vcDT1 set $00
(1)  377/   B1F35 : =$0                 vcDT2 set $00
(1)  377/   B1F35 : =$0                 vcDT3 set $00
(1)  377/   B1F35 : =$0                 vcDT4 set $00
(1)  378/   B1F35 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  378/   B1F35 : =$1                 vcCF1 set $01
(1)  378/   B1F35 : =$1                 vcCF2 set $01
(1)  378/   B1F35 : =$7                 vcCF3 set $07
(1)  378/   B1F35 : =$1                 vcCF4 set $01
(1)  379/   B1F35 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  379/   B1F35 : =$1                 vcRS1 set $01
(1)  379/   B1F35 : =$2                 vcRS2 set $02
(1)  379/   B1F35 : =$2                 vcRS3 set $02
(1)  379/   B1F35 : =$2                 vcRS4 set $02
(1)  380/   B1F35 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  380/   B1F35 : =$13                vcAR1 set $13
(1)  380/   B1F35 : =$D                 vcAR2 set $0D
(1)  380/   B1F35 : =$E                 vcAR3 set $0E
(1)  380/   B1F35 : =$E                 vcAR4 set $0E
(1)  381/   B1F35 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  381/   B1F35 : =$0                 vcAM1 set $00<<5
(1)  381/   B1F35 : =$0                 vcAM2 set $00<<5
(1)  381/   B1F35 : =$0                 vcAM3 set $00<<5
(1)  381/   B1F35 : =$0                 vcAM4 set $00<<5
(1)  382/   B1F35 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  382/   B1F35 : =$3                 vcD1R1 set $03
(1)  382/   B1F35 : =$E                 vcD1R2 set $0E
(1)  382/   B1F35 : =$E                 vcD1R3 set $0E
(1)  382/   B1F35 : =$E                 vcD1R4 set $0E
(1)  383/   B1F35 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  383/   B1F35 : =$0                 vcD2R1 set $00
(1)  383/   B1F35 : =$0                 vcD2R2 set $00
(1)  383/   B1F35 : =$0                 vcD2R3 set $00
(1)  383/   B1F35 : =$0                 vcD2R4 set $00
(1)  384/   B1F35 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  384/   B1F35 : =$0                 vcDL1 set $00
(1)  384/   B1F35 : =$1                 vcDL2 set $01
(1)  384/   B1F35 : =$F                 vcDL3 set $0F
(1)  384/   B1F35 : =$1                 vcDL4 set $01
(1)  385/   B1F35 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  385/   B1F35 : =$F                 vcRR1 set $0F
(1)  385/   B1F35 : =$F                 vcRR2 set $0F
(1)  385/   B1F35 : =$F                 vcRR3 set $0F
(1)  385/   B1F35 : =$F                 vcRR4 set $0F
(1)  386/   B1F35 : (MACRO)             	smpsVcTotalLevel    $86, $27, $28, $17
(1)  386/   B1F35 : =$86                vcTL1 set $86
(1)  386/   B1F35 : =$27                vcTL2 set $27
(1)  386/   B1F35 : =$28                vcTL3 set $28
(1)  386/   B1F35 : =$17                vcTL4 set $17
(1)  386/   B1F35 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  386/   B1F36 :                     ;   0     1     2     3     4     5     6     7
(1)  386/   B1F36 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  386/   B1F36 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  386/   B1F36 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  386/   B1F36 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  386/   B1F36 : =$80                vcTLMask1 set $80
(1)  386/   B1F36 :                     
(1)  386/   B1F36 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  386/   B1F36 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  386/   B1F36 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  386/   B1F36 : =$80                vcTLMask1 set $80
(1)  386/   B1F36 : =$6                 vcTL1 set vcTL1&$7F
(1)  386/   B1F36 : =$27                vcTL2 set vcTL2&$7F
(1)  386/   B1F36 : =$28                vcTL3 set vcTL3&$7F
(1)  386/   B1F36 : =$17                vcTL4 set vcTL4&$7F
(1)  386/   B1F36 :                     
(1)  386/   B1F36 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  386/   B1F3A : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  386/   B1F3E : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  386/   B1F42 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  386/   B1F46 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  386/   B1F4A : 1728 2786                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  387/   B1F4E :                     
(1)  388/   B1F4E :                     
   35/   B1F4E :                        ;-------------------------------------------------------------------------------
   36/   B1F4E :                        
   37/   B1F4E :                        ;-------------------------------------------------------------------------------                
   38/   B1F4E :                        ; Z80 Bank $18
   39/   B1F4E : (MACRO)                                align   $8000
   39/   B1F4E :  (MACRO-2)                     cnop 0,$8000
   39/   B1F4E :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   39/   B8000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   40/   B8000 :                        Music_07:	include		"music-improved/87 - ARZ.asm"
(1)    1/   B8000 :                     ARZ_Header:
(1)    2/   B8000 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B8000 :                     
(1)    2/   B8000 : =$2                 SourceDriver set 2
(1)    2/   B8000 :                     
(1)    2/   B8000 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B8000 :                     
(1)    2/   B8000 : =$B8000             songStart set *
(1)    2/   B8000 :                     
(1)    2/   B8000 :                     
(1)    3/   B8000 : (MACRO)             	smpsHeaderVoice     ARZ_Voices
(1)    3/   B8000 : F986                                dc.w    z80_ptr(ARZ_VOICES)
(1)    4/   B8002 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B8002 : 0603                        dc.b    $06,$03
(1)    5/   B8004 : (MACRO)             	smpsHeaderTempo     $01, $E0
(1)    5/   B8004 : 01                          dc.b    $01
(1)    5/   B8005 :  (MACRO-2)                  convertMainTempoMod $E0
(1)    5/   B8005 : 20                                          dc.b    s2TempotoS3($E0)
(1)    6/   B8006 :                     
(1)    7/   B8006 : (MACRO)             	smpsHeaderDAC       ARZ_DAC
(1)    7/   B8006 :  (MACRO-2)                  CheckedChannelPointer ARZ_DAC
(1)    7/   B8006 : 5184                                dc.w    z80_ptr(ARZ_DAC)
(1)    7/   B8008 : 0000                                dc.w    $00
(1)    8/   B800A : (MACRO)             	smpsHeaderFM        ARZ_FM1,	$00, $0C
(1)    8/   B800A :  (MACRO-2)                  CheckedChannelPointer ARZ_FM1
(1)    8/   B800A : B480                                dc.w    z80_ptr(ARZ_FM1)
(1)    8/   B800C : 000C                        dc.b    $00,$0C
(1)    9/   B800E : (MACRO)             	smpsHeaderFM        ARZ_FM2,	$00, $0F
(1)    9/   B800E :  (MACRO-2)                  CheckedChannelPointer ARZ_FM2
(1)    9/   B800E : BB81                                dc.w    z80_ptr(ARZ_FM2)
(1)    9/   B8010 : 000F                        dc.b    $00,$0F
(1)   10/   B8012 : (MACRO)             	smpsHeaderFM        ARZ_FM3,	$00, $13
(1)   10/   B8012 :  (MACRO-2)                  CheckedChannelPointer ARZ_FM3
(1)   10/   B8012 : 4282                                dc.w    z80_ptr(ARZ_FM3)
(1)   10/   B8014 : 0013                        dc.b    $00,$13
(1)   11/   B8016 : (MACRO)             	smpsHeaderFM        ARZ_FM4,	$00, $0F
(1)   11/   B8016 :  (MACRO-2)                  CheckedChannelPointer ARZ_FM4
(1)   11/   B8016 : F382                                dc.w    z80_ptr(ARZ_FM4)
(1)   11/   B8018 : 000F                        dc.b    $00,$0F
(1)   12/   B801A : (MACRO)             	smpsHeaderFM        ARZ_FM5,	$00, $0C
(1)   12/   B801A :  (MACRO-2)                  CheckedChannelPointer ARZ_FM5
(1)   12/   B801A : 9683                                dc.w    z80_ptr(ARZ_FM5)
(1)   12/   B801C : 000C                        dc.b    $00,$0C
(1)   13/   B801E : (MACRO)             	smpsHeaderPSG       ARZ_PSG1,	$D0, $04, $00, fTone_01
(1)   13/   B801E :  (MACRO-2)                  CheckedChannelPointer ARZ_PSG1
(1)   13/   B801E : E184                                dc.w    z80_ptr(ARZ_PSG1)
(1)   13/   B8020 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   B8020 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   B8021 : 0400 01                     dc.b    $04,$00,FTONE_01
(1)   14/   B8024 : (MACRO)             	smpsHeaderPSG       ARZ_PSG2,	$D0, $06, $00, fTone_01
(1)   14/   B8024 :  (MACRO-2)                  CheckedChannelPointer ARZ_PSG2
(1)   14/   B8024 : D885                                dc.w    z80_ptr(ARZ_PSG2)
(1)   14/   B8026 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   14/   B8026 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   14/   B8027 : 0600 01                     dc.b    $06,$00,FTONE_01
(1)   15/   B802A : (MACRO)             	smpsHeaderPSG       ARZ_PSG3,	$00, $01, $00, fTone_02
(1)   15/   B802A :  (MACRO-2)                  CheckedChannelPointer ARZ_PSG3
(1)   15/   B802A : CB86                                dc.w    z80_ptr(ARZ_PSG3)
(1)   15/   B802C :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B802C : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B802D : 0100 02                     dc.b    $01,$00,FTONE_02
(1)   16/   B8030 :                     
(1)   17/   B8030 :                     ARZ_Call04:
(1)   18/   B8030 : BF06 BDBF 12C2 BF0C 	dc.b	nD5, $06, nC5, nD5, $12, nF5, nD5, $0C, nE5, nRst, $06, nRst
            B8038 : C180 0680         
(1)   19/   B803C : 12C4 0CC2 0680 C9C6 	dc.b	$12, nG5, $0C, nF5, $06, nRst, nC6, nA5, $30, smpsNoAttack, $0C
            B8044 : 30E7 0C            
(1)   20/   B8047 : (MACRO)             	smpsReturn
(1)   20/   B8047 : F9                                  dc.b    $F9
(1)   21/   B8048 :                     
(1)   22/   B8048 :                     ARZ_Call05:
(1)   23/   B8048 : BD12 BBB8 BD06 80BB 	dc.b	nC5, $12, nBb4, nG4, nC5, $06, nRst, nBb4, nC5, nRst, nBb4, nRst
            B8050 : BD80 BB80         
(1)   24/   B8054 : BB12 BAB6 BB06 80BA 	dc.b	nBb4, $12, nA4, nF4, nBb4, $06, nRst, nA4, nBb4, nRst, nA4, nRst
            B805C : BB80 BA80         
(1)   25/   B8060 : BA12 B8B5 BA06 80B8 	dc.b	nA4, $12, nG4, nE4, nA4, $06, nRst, nG4, nA4, nRst, nG4, nRst
            B8068 : BA80 B880         
(1)   26/   B806C : (MACRO)             	smpsReturn
(1)   26/   B806C : F9                                  dc.b    $F9
(1)   27/   B806D :                     
(1)   28/   B806D :                     ARZ_Call03:
(1)   29/   B806D : C712 C9CB CB06 80CB 	dc.b	nBb5, $12, nC6, nD6, nD6, $06, nRst, nD6, nC6, nRst, nBb5, nRst
            B8075 : C980 C780         
(1)   30/   B8079 : C630 8006 C980 C9C7 	dc.b	nA5, $30, nRst, $06, nC6, nRst, nC6, nBb5, nRst, nA5, nRst, nG5
            B8081 : 80C6 80C4         
(1)   31/   B8085 : 3080 06C7 80C7 C680 	dc.b	$30, nRst, $06, nBb5, nRst, nBb5, nA5, nRst, nG5, nRst
            B808D : C480               
(1)   32/   B808F : (MACRO)             	smpsReturn
(1)   32/   B808F : F9                                  dc.b    $F9
(1)   33/   B8090 :                     
(1)   34/   B8090 :                     ARZ_Call02:
(1)   35/   B8090 : C212 C4C6 C406 80C4 	dc.b	nF5, $12, nG5, nA5, nG5, $06, nRst, nG5, nF5, nRst, nG5, nRst
            B8098 : C280 C480         
(1)   36/   B809C : C230 8006 C680 C6C4 	dc.b	nF5, $30, nRst, $06, nA5, nRst, nA5, nG5, nRst, nF5, nRst, nE5
            B80A4 : 80C2 80C1         
(1)   37/   B80A8 : 3080 06C4 80C4 C180 	dc.b	$30, nRst, $06, nG5, nRst, nG5, nE5, nRst, nE5, nRst, $06
            B80B0 : C180 06            
(1)   38/   B80B3 : (MACRO)             	smpsReturn
(1)   38/   B80B3 : F9                                  dc.b    $F9
(1)   39/   B80B4 :                     
(1)   40/   B80B4 :                     ; FM1 Data
(1)   41/   B80B4 :                     ARZ_FM1:
(1)   42/   B80B4 : (MACRO)             	smpsSetvoice        $00
(1)   42/   B80B4 :  (MACRO-2)                  smpsFMvoice $00
(1)   42/   B80B4 : EF00                                dc.b    $EF,$00
(1)   43/   B80B6 : (MACRO)             	smpsModSet          $06, $02, $02, $02
(1)   43/   B80B6 : F0                          dc.b    $F0
(1)   43/   B80B7 : 0702 0206                           dc.b    $06+1,$02,$02,(($02+1) * $02) & $FF
(1)   43/   B80BB :                             ;dc.b   $02,$02,$02
(1)   44/   B80BB : 9906 9B             	dc.b	nC2, $06, nD2
(1)   45/   B80BE :                     
(1)   46/   B80BE :                     ARZ_Jump04:
(1)   47/   B80BE : 8F30 E730 E78F 8012 	dc.b	nD1, $30, smpsNoAttack, $30, smpsNoAttack, nD1, nRst, $12, nA1, $06, nA1, nRst
            B80C6 : 9606 9680         
(1)   48/   B80CA : 999B 8F30 E730 E78F 	dc.b	nC2, nD2, nD1, $30, smpsNoAttack, $30, smpsNoAttack, nD1, nRst, $12, nA1, $06
            B80D2 : 8012 9606         
(1)   49/   B80D6 : 9680 1280 9497 0680 	dc.b	nA1, nRst, $12, nRst, nG1, nBb1, $06, nRst, $18, nC2, $12, nG1
            B80DE : 1899 1294         
(1)   50/   B80E2 : 0680 8012 9296 0680 	dc.b	$06, nRst, nRst, $12, nF1, nA1, $06, nRst, $18, nBb1, $12, nF1
            B80EA : 1897 1292         
(1)   51/   B80EE : 0680 8012 9194 0680 	dc.b	$06, nRst, nRst, $12, nE1, nG1, $06, nRst, $18, nA1, $12, nCs2
            B80F6 : 1896 129A         
(1)   52/   B80FA : 0680 8012 8F93 0880 	dc.b	$06, nRst, nRst, $12, nD1, nFs1, $08, nRst, $16, nA1, $06, nE1
            B8102 : 1696 0691         
(1)   53/   B8106 : 9294 9680 1294 9708 	dc.b	nF1, nG1, nA1, nRst, $12, nG1, nBb1, $08, nRst, $16, nC2, $12
            B810E : 8016 9912         
(1)   54/   B8112 : 9409 8003 8012 9296 	dc.b	nG1, $09, nRst, $03, nRst, $12, nF1, nA1, $06, nRst, $18, nBb1
            B811A : 0680 1897         
(1)   55/   B811E : 1292 0780 0580 129D 	dc.b	$12, nF1, $07, nRst, $05, nRst, $12, nE2, nCs2, $08, nRst, $16
            B8126 : 9A08 8016         
(1)   56/   B812A : 9612 9D08 8004 8012 	dc.b	nA1, $12, nE2, $08, nRst, $04, nRst, $12, nD2, $06, $0C, nA1
            B8132 : 9B06 0C96         
(1)   57/   B8136 : 0680 9696 0C06 9B96 	dc.b	$06, nRst, nA1, nA1, $0C, $06, nD2, nA1, $12, nG1, $0C, nRst
            B813E : 1294 0C80         
(1)   58/   B8142 : 069B 1294 0C94 8006 	dc.b	$06, nD2, $12, nG1, $0C, nG1, nRst, $06, nD2, $12, nG1, $0C
            B814A : 9B12 940C         
(1)   59/   B814E : 9280 0699 1292 0C92 	dc.b	nF1, nRst, $06, nC2, $12, nF1, $0C, nF1, nRst, $06, nC2, $12
            B8156 : 8006 9912         
(1)   60/   B815A : 920C 9180 069D 129A 	dc.b	nF1, $0C, nE1, nRst, $06, nE2, $12, nCs2, $0C, nA1, nRst, $06
            B8162 : 0C96 8006         
(1)   61/   B8166 : 9112 960C 9B80 0696 	dc.b	nE1, $12, nA1, $0C, nD2, nRst, $06, nA1, $12, nFs1, $0C, nRst
            B816E : 1293 0C80         
(1)   62/   B8172 : 088F 9193 9496 940C 	dc.b	$08, nD1, nE1, nFs1, nG1, nA1, nG1, $0C, nRst, $06, nD2, $12
            B817A : 8006 9B12         
(1)   63/   B817E : A00C 8006 A080 9B12 	dc.b	nG2, $0C, nRst, $06, nG2, nRst, nD2, $12, nG1, $0C, nF1, nRst
            B8186 : 940C 9280         
(1)   64/   B818A : 0699 129E 0C9E 8006 	dc.b	$06, nC2, $12, nF2, $0C, nF2, nRst, $06, nC2, $12, nA1, $0C
            B8192 : 9912 960C         
(1)   65/   B8196 : 9180 0696 129A 0C9D 	dc.b	nE1, nRst, $06, nA1, $12, nCs2, $0C, nE2, $12, nCs2, nA1, $0C
            B819E : 129A 960C         
(1)   66/   B81A2 : 9B03 809B 809B 0680 	dc.b	nD2, $03, nRst, nD2, nRst, nD2, $06, nRst, $12, nD2, $03, nRst
            B81AA : 129B 0380         
(1)   67/   B81AE : 039B 809B 0680 1E99 	dc.b	$03, nD2, nRst, nD2, $06, nRst, $1E, nC2, $06, nD2
            B81B6 : 069B               
(1)   68/   B81B8 : (MACRO)             	smpsJump            ARZ_Jump04
(1)   68/   B81B8 : F6                          dc.b    $F6
(1)   68/   B81B9 : BE80                                dc.w    z80_ptr(ARZ_JUMP04)
(1)   69/   B81BB :                     
(1)   70/   B81BB :                     ; FM2 Data
(1)   71/   B81BB :                     ARZ_FM2:
(1)   72/   B81BB : 800C                	dc.b	nRst, $0C
(1)   73/   B81BD :                     
(1)   74/   B81BD :                     ARZ_Jump03:
(1)   75/   B81BD : (MACRO)             	smpsSetvoice        $01
(1)   75/   B81BD :  (MACRO-2)                  smpsFMvoice $01
(1)   75/   B81BD : EF01                                dc.b    $EF,$01
(1)   76/   B81BF : (MACRO)             	smpsModSet          $04, $02, $03, $02
(1)   76/   B81BF : F0                          dc.b    $F0
(1)   76/   B81C0 : 0502 0306                           dc.b    $04+1,$02,$03,(($02+1) * $02) & $FF
(1)   76/   B81C4 :                             ;dc.b   $02,$03,$02
(1)   77/   B81C4 : BF12 C1C2 0CC6 30E7 	dc.b	nD5, $12, nE5, nF5, $0C, nA5, $30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst
            B81CC : 30E7 0C80         
(1)   78/   B81D0 : 06BE BE80 12BF C1C2 	dc.b	$06, nCs5, nCs5, nRst, $12, nD5, nE5, nF5, $06, nD5, nA5, $30
            B81D8 : 06BF C630         
(1)   79/   B81DC : E730 E70C 8006 BEBE 	dc.b	smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $06, nCs5, nCs5, nRst
            B81E4 : 80               
(1)   80/   B81E5 : (MACRO)             	smpsSetvoice        $02
(1)   80/   B81E5 :  (MACRO-2)                  smpsFMvoice $02
(1)   80/   B81E5 : EF02                                dc.b    $EF,$02
(1)   81/   B81E7 : (MACRO)             	smpsAlterVol        $06
(1)   81/   B81E7 : E606                        dc.b    $E6,$06
(1)   82/   B81E9 : (MACRO)             	smpsCall            ARZ_Call04
(1)   82/   B81E9 : F8                          dc.b    $F8
(1)   82/   B81EA : 3080                                dc.w    z80_ptr(ARZ_CALL04)
(1)   83/   B81EC : 8006 C680 C712 C6C4 	dc.b	nRst, $06, nA5, nRst, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
            B81F4 : 06C2 C118         
(1)   84/   B81F8 : C4C3 30E7 1880 0C   	dc.b	nG5, nFs5, $30, smpsNoAttack, $18, nRst, $0C
(1)   85/   B81FF : (MACRO)             	smpsCall            ARZ_Call04
(1)   85/   B81FF : F8                          dc.b    $F8
(1)   85/   B8200 : 3080                                dc.w    z80_ptr(ARZ_CALL04)
(1)   86/   B8202 : 8006 800C C712 C6C4 	dc.b	nRst, $06, nRst, $0C, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
            B820A : 06C2 C118         
(1)   87/   B820E : BEBF 30E7 1880 18   	dc.b	nCs5, nD5, $30, smpsNoAttack, $18, nRst, $18
(1)   88/   B8215 : (MACRO)             	smpsSetvoice        $01
(1)   88/   B8215 :  (MACRO-2)                  smpsFMvoice $01
(1)   88/   B8215 : EF01                                dc.b    $EF,$01
(1)   89/   B8217 : (MACRO)             	smpsAlterVol        $F8
(1)   89/   B8217 : E6F8                        dc.b    $E6,$F8
(1)   90/   B8219 : (MACRO)             	smpsCall            ARZ_Call05
(1)   90/   B8219 : F8                          dc.b    $F8
(1)   90/   B821A : 4880                                dc.w    z80_ptr(ARZ_CALL05)
(1)   91/   B821C : B780 B780 B8B8 80BA 	dc.b	nFs4, nRst, nFs4, nRst, nG4, nG4, nRst, nA4, $30, nRst, $06
            B8224 : 3080 06            
(1)   92/   B8227 : (MACRO)             	smpsCall            ARZ_Call05
(1)   92/   B8227 : F8                          dc.b    $F8
(1)   92/   B8228 : 4880                                dc.w    z80_ptr(ARZ_CALL05)
(1)   93/   B822A : B303 80B3 80B3 0680 	dc.b	nD4, $03, nRst, nD4, nRst, nD4, $06, nRst, $12, nD4, $03, nRst
            B8232 : 12B3 0380         
(1)   94/   B8236 : 03B3 80B3 0680 2A   	dc.b	$03, nD4, nRst, nD4, $06, nRst, $2A
(1)   95/   B823D : (MACRO)             	smpsAlterVol        $02
(1)   95/   B823D : E602                        dc.b    $E6,$02
(1)   96/   B823F : (MACRO)             	smpsJump            ARZ_Jump03
(1)   96/   B823F : F6                          dc.b    $F6
(1)   96/   B8240 : BD81                                dc.w    z80_ptr(ARZ_JUMP03)
(1)   97/   B8242 :                     
(1)   98/   B8242 :                     ; FM3 Data
(1)   99/   B8242 :                     ARZ_FM3:
(1)  100/   B8242 : (MACRO)             	smpsSetvoice        $01
(1)  100/   B8242 :  (MACRO-2)                  smpsFMvoice $01
(1)  100/   B8242 : EF01                                dc.b    $EF,$01
(1)  101/   B8244 : (MACRO)             	smpsModSet          $04, $02, $03, $02
(1)  101/   B8244 : F0                          dc.b    $F0
(1)  101/   B8245 : 0502 0306                           dc.b    $04+1,$02,$03,(($02+1) * $02) & $FF
(1)  101/   B8249 :                             ;dc.b   $02,$03,$02
(1)  102/   B8249 : 800C                	dc.b	nRst, $0C
(1)  103/   B824B : (MACRO)             	smpsPan             panLeft, $00
(1)  103/   B824B : =$0                 panNone set $00
(1)  103/   B824B : =$40                panRight set $40
(1)  103/   B824B : =$80                panLeft set $80
(1)  103/   B824B : =$C0                panCentre set $C0
(1)  103/   B824B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  103/   B824B : E080                        dc.b $E0,PANLEFT+$00
(1)  104/   B824D :                     
(1)  105/   B824D :                     ARZ_Jump02:
(1)  106/   B824D : 8007 BF12 C1C2 0CC6 	dc.b	nRst, $07, nD5, $12, nE5, nF5, $0C, nA5, $30, smpsNoAttack, $30, smpsNoAttack
            B8255 : 30E7 30E7         
(1)  107/   B8259 : 0BC4 06C4 8012 8007 	dc.b	$0B, nG5, $06, nG5, nRst, $12, nRst, $07, nD5, $12, nE5, nF5
            B8261 : BF12 C1C2         
(1)  108/   B8265 : 06BF C630 E730 E70B 	dc.b	$06, nD5, nA5, $30, smpsNoAttack, $30, smpsNoAttack, $0B, nG5, $06, nG5, nRst
            B826D : C406 C480         
(1)  109/   B8271 : 8007                	dc.b	nRst, $07
(1)  110/   B8273 : (MACRO)             	smpsSetvoice        $02
(1)  110/   B8273 :  (MACRO-2)                  smpsFMvoice $02
(1)  110/   B8273 : EF02                                dc.b    $EF,$02
(1)  111/   B8275 : (MACRO)             	smpsAlterVol        $06
(1)  111/   B8275 : E606                        dc.b    $E6,$06
(1)  112/   B8277 : (MACRO)             	smpsCall            ARZ_Call04
(1)  112/   B8277 : F8                          dc.b    $F8
(1)  112/   B8278 : 3080                                dc.w    z80_ptr(ARZ_CALL04)
(1)  113/   B827A : 8006 C680 C712 C6C4 	dc.b	nRst, $06, nA5, nRst, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
            B8282 : 06C2 C118         
(1)  114/   B8286 : C4C3 30E7 1880 0C   	dc.b	nG5, nFs5, $30, smpsNoAttack, $18, nRst, $0C
(1)  115/   B828D : (MACRO)             	smpsCall            ARZ_Call04
(1)  115/   B828D : F8                          dc.b    $F8
(1)  115/   B828E : 3080                                dc.w    z80_ptr(ARZ_CALL04)
(1)  116/   B8290 : 8006 800C C712 C6C4 	dc.b	nRst, $06, nRst, $0C, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
            B8298 : 06C2 C118         
(1)  117/   B829C : BEBF 30E7 1880 18   	dc.b	nCs5, nD5, $30, smpsNoAttack, $18, nRst, $18
(1)  118/   B82A3 : (MACRO)             	smpsSetvoice        $01
(1)  118/   B82A3 :  (MACRO-2)                  smpsFMvoice $01
(1)  118/   B82A3 : EF01                                dc.b    $EF,$01
(1)  119/   B82A5 : (MACRO)             	smpsAlterVol        $F8
(1)  119/   B82A5 : E6F8                        dc.b    $E6,$F8
(1)  120/   B82A7 : (MACRO)             	smpsCall            ARZ_Call05
(1)  120/   B82A7 : F8                          dc.b    $F8
(1)  120/   B82A8 : 4880                                dc.w    z80_ptr(ARZ_CALL05)
(1)  121/   B82AA : B780 B780 B8B8 80BA 	dc.b	nFs4, nRst, nFs4, nRst, nG4, nG4, nRst, nA4, $30, nRst, $06, nC5
            B82B2 : 3080 06BD         
(1)  122/   B82B6 : 12BB B8BD 0680 BBBD 	dc.b	$12, nBb4, nG4, nC5, $06, nRst, nBb4, nC5, nRst, nBb4, nRst, nBb4
            B82BE : 80BB 80BB         
(1)  123/   B82C2 : 12BA B6BB 0680 BABB 	dc.b	$12, nA4, nF4, nBb4, $06, nRst, nA4, nBb4, nRst, nA4, nRst, nA4
            B82CA : 80BA 80BA         
(1)  124/   B82CE : 12B8 B5BA 0680 B8BA 	dc.b	$12, nG4, nE4, nA4, $06, nRst, nG4, nA4, nRst, nG4, $05
            B82D6 : 80B8 05            
(1)  125/   B82D9 : (MACRO)             	smpsAlterVol        $FC
(1)  125/   B82D9 : E6FC                        dc.b    $E6,$FC
(1)  126/   B82DB : C203 80C2 80C2 0680 	dc.b	nF5, $03, nRst, nF5, nRst, nF5, $06, nRst, $12, nF5, $03, nRst
            B82E3 : 12C2 0380         
(1)  127/   B82E7 : 03C2 80C2 0680 2A   	dc.b	$03, nF5, nRst, nF5, $06, nRst, $2A
(1)  128/   B82EE : (MACRO)             	smpsAlterVol        $06
(1)  128/   B82EE : E606                        dc.b    $E6,$06
(1)  129/   B82F0 : (MACRO)             	smpsJump            ARZ_Jump02
(1)  129/   B82F0 : F6                          dc.b    $F6
(1)  129/   B82F1 : 4D82                                dc.w    z80_ptr(ARZ_JUMP02)
(1)  130/   B82F3 :                     
(1)  131/   B82F3 :                     ; FM4 Data
(1)  132/   B82F3 :                     ARZ_FM4:
(1)  133/   B82F3 : 800C                	dc.b	nRst, $0C
(1)  134/   B82F5 :                     
(1)  135/   B82F5 :                     ARZ_Loop05:
(1)  136/   B82F5 : (MACRO)             	smpsSetvoice        $03
(1)  136/   B82F5 :  (MACRO-2)                  smpsFMvoice $03
(1)  136/   B82F5 : EF03                                dc.b    $EF,$03
(1)  137/   B82F7 : (MACRO)             	smpsPan             panRight, $00
(1)  137/   B82F7 : =$0                 panNone set $00
(1)  137/   B82F7 : =$40                panRight set $40
(1)  137/   B82F7 : =$80                panLeft set $80
(1)  137/   B82F7 : =$C0                panCentre set $C0
(1)  137/   B82F7 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  137/   B82F7 : E040                        dc.b $E0,PANRIGHT+$00
(1)  138/   B82F9 : B30C B606 B180 B580 	dc.b	nD4, $0C, nF4, $06, nC4, nRst, nE4, nRst, nD4, $0C, nD4, $06
            B8301 : B30C B306         
(1)  139/   B8305 : 80B6 B10C B5B3 B606 	dc.b	nRst, nF4, nC4, $0C, nE4, nD4, nF4, $06, nC4, $0C, nE4, $06
            B830D : B10C B506         
(1)  140/   B8311 : 80B3 18             	dc.b	nRst, nD4, $18
(1)  141/   B8314 : (MACRO)             	smpsSetvoice        $05
(1)  141/   B8314 :  (MACRO-2)                  smpsFMvoice $05
(1)  141/   B8314 : EF05                                dc.b    $EF,$05
(1)  142/   B8316 : AE06 AE80 12        	dc.b	nA3, $06, nA3, nRst, $12
(1)  143/   B831B : (MACRO)             	smpsSetvoice        $03
(1)  143/   B831B :  (MACRO-2)                  smpsFMvoice $03
(1)  143/   B831B : EF03                                dc.b    $EF,$03
(1)  144/   B831D : (MACRO)             	smpsLoop            $00, $02, ARZ_Loop05
(1)  144/   B831D : F7                          dc.b    $F7
(1)  144/   B831E : 0002                        dc.b    $00,$02
(1)  144/   B8320 : F582                                dc.w    z80_ptr(ARZ_LOOP05)
(1)  145/   B8322 :                     
(1)  146/   B8322 :                     ARZ_Loop06:
(1)  147/   B8322 : AF0C B306 B60C AFB1 	dc.b	nBb3, $0C, nD4, $06, nF4, $0C, nBb3, nC4, $06, nRst, nC4, $0C
            B832A : 0680 B10C         
(1)  148/   B832E : B506 B80C B106 80B6 	dc.b	nE4, $06, nG4, $0C, nC4, $06, nRst, nF4, $0C, nA4, $06, nC4
            B8336 : 0CBA 06B1         
(1)  149/   B833A : 0CB5 B6BA 0680 BAAF 	dc.b	$0C, nE4, nF4, nA4, $06, nRst, nA4, nBb3, $0C, nD4, nE4, nG4
            B8342 : 0CB3 B5B8         
(1)  150/   B8346 : 06B2 0CB3 B5B8 0680 	dc.b	$06, nCs4, $0C, nD4, nE4, nG4, $06, nRst, nG4, nCs4, $0C, nE4
            B834E : B8B2 0CB5         
(1)  151/   B8352 : B3B7 06AE 0CB1 B3B7 	dc.b	nD4, nFs4, $06, nA3, $0C, nC4, nD4, nFs4, $06, nRst, nFs4, nA3
            B835A : 0680 B7AE         
(1)  152/   B835E : 0CB1                	dc.b	$0C, nC4
(1)  153/   B8360 : (MACRO)             	smpsLoop            $00, $02, ARZ_Loop06
(1)  153/   B8360 : F7                          dc.b    $F7
(1)  153/   B8361 : 0002                        dc.b    $00,$02
(1)  153/   B8363 : 2283                                dc.w    z80_ptr(ARZ_LOOP06)
(1)  154/   B8365 : (MACRO)             	smpsSetvoice        $01
(1)  154/   B8365 :  (MACRO-2)                  smpsFMvoice $01
(1)  154/   B8365 : EF01                                dc.b    $EF,$01
(1)  155/   B8367 : (MACRO)             	smpsAlterVol        $04
(1)  155/   B8367 : E604                        dc.b    $E6,$04
(1)  156/   B8369 : (MACRO)             	smpsModSet          $02, $02, $01, $02
(1)  156/   B8369 : F0                          dc.b    $F0
(1)  156/   B836A : 0302 0106                           dc.b    $02+1,$02,$01,(($02+1) * $02) & $FF
(1)  156/   B836E :                             ;dc.b   $02,$01,$02
(1)  157/   B836E : (MACRO)             	smpsCall            ARZ_Call03
(1)  157/   B836E : F8                          dc.b    $F8
(1)  157/   B836F : 6D80                                dc.w    z80_ptr(ARZ_CALL03)
(1)  158/   B8371 : C606 80C6 80C7 C780 	dc.b	nA5, $06, nRst, nA5, nRst, nBb5, nBb5, nRst, nC6, nRst, nRst, $02
            B8379 : C980 8002         
(1)  159/   B837D : C308 C4C6 C7C9      	dc.b	nFs5, $08, nG5, nA5, nBb5, nC6
(1)  160/   B8383 : (MACRO)             	smpsCall            ARZ_Call03
(1)  160/   B8383 : F8                          dc.b    $F8
(1)  160/   B8384 : 6D80                                dc.w    z80_ptr(ARZ_CALL03)
(1)  161/   B8386 : C2C2 C280 12C2 06C2 	dc.b	nF5, nF5, nF5, nRst, $12, nF5, $06, nF5, nF5, nRst, $2A
            B838E : C280 2A            
(1)  162/   B8391 : (MACRO)             	smpsAlterVol        $FC
(1)  162/   B8391 : E6FC                        dc.b    $E6,$FC
(1)  163/   B8393 : (MACRO)             	smpsJump            ARZ_Loop05
(1)  163/   B8393 : F6                          dc.b    $F6
(1)  163/   B8394 : F582                                dc.w    z80_ptr(ARZ_LOOP05)
(1)  164/   B8396 :                     
(1)  165/   B8396 :                     ; FM5 Data
(1)  166/   B8396 :                     ARZ_FM5:
(1)  167/   B8396 : 800C                	dc.b	nRst, $0C
(1)  168/   B8398 :                     
(1)  169/   B8398 :                     ARZ_Jump01:
(1)  170/   B8398 : (MACRO)             	smpsModSet          $06, $01, $06, $05
(1)  170/   B8398 : F0                          dc.b    $F0
(1)  170/   B8399 : 0701 0606                           dc.b    $06+1,$01,$06,(($05+1) * $01) & $FF
(1)  170/   B839D :                             ;dc.b   $01,$06,$05
(1)  171/   B839D : (MACRO)             	smpsAlterPitch      $F4
(1)  171/   B839D :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  171/   B839D : FBF4                                dc.b    $FB,$F4
(1)  172/   B839F : (MACRO)             	smpsPan             panCenter, $00
(1)  172/   B839F : =$0                 panNone set $00
(1)  172/   B839F : =$40                panRight set $40
(1)  172/   B839F : =$80                panLeft set $80
(1)  172/   B839F : =$C0                panCentre set $C0
(1)  172/   B839F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  172/   B839F : E0C0                        dc.b $E0,PANCENTER+$00
(1)  173/   B83A1 :                     
(1)  174/   B83A1 :                     ARZ_Loop04:
(1)  175/   B83A1 : 8030 80             	dc.b	nRst, $30, nRst
(1)  176/   B83A4 : (MACRO)             	smpsSetvoice        $04
(1)  176/   B83A4 :  (MACRO-2)                  smpsFMvoice $04
(1)  176/   B83A4 : EF04                                dc.b    $EF,$04
(1)  177/   B83A6 : CB06 D2CB D2CB 1880 	dc.b	nD6, $06, nA6, nD6, nA6, nD6, $18, nRst, $12, nCs6, $06, nCs6
            B83AE : 12CA 06CA         
(1)  178/   B83B2 : 8012                	dc.b	nRst, $12
(1)  179/   B83B4 : (MACRO)             	smpsLoop            $00, $02, ARZ_Loop04
(1)  179/   B83B4 : F7                          dc.b    $F7
(1)  179/   B83B5 : 0002                        dc.b    $00,$02
(1)  179/   B83B7 : A183                                dc.w    z80_ptr(ARZ_LOOP04)
(1)  180/   B83B9 : 8030 8080 C206 C2C9 	dc.b	nRst, $30, nRst, nRst, nF5, $06, nF5, nC6, nA5, $1E, nRst, $30
            B83C1 : C61E 8030         
(1)  181/   B83C5 : 8080 06CB 80CB C980 	dc.b	nRst, nRst, $06, nD6, nRst, nD6, nC6, nRst, nC6, nRst, nBb5, nRst
            B83CD : C980 C780         
(1)  182/   B83D1 : C780 C603 80C6 8009 	dc.b	nBb5, nRst, nA5, $03, nRst, nA5, nRst, $09, nRst, $06, nRst, $30
            B83D9 : 8006 8030         
(1)  183/   B83DD : 8080 C206 C2C9 C61E 	dc.b	nRst, nRst, nF5, $06, nF5, nC6, nA5, $1E, nRst, $30, nRst, nRst
            B83E5 : 8030 8080         
(1)  184/   B83E9 : 06CB 80CB CB80 C980 	dc.b	$06, nD6, nRst, nD6, nD6, nRst, nC6, nRst, nD6, $0C, nC6, $06
            B83F1 : CB0C C906         
(1)  185/   B83F5 : CB12 C902 C8C6 C4C2 	dc.b	nD6, $12, nC6, $02, nB5, nA5, nG5, nF5, nE5
            B83FD : C1               
(1)  186/   B83FE : (MACRO)             	smpsAlterVol        $04
(1)  186/   B83FE : E604                        dc.b    $E6,$04
(1)  187/   B8400 : (MACRO)             	smpsAlterPitch      $0C
(1)  187/   B8400 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  187/   B8400 : FB0C                                dc.b    $FB,$0C
(1)  188/   B8402 : (MACRO)             	smpsSetvoice        $01
(1)  188/   B8402 :  (MACRO-2)                  smpsFMvoice $01
(1)  188/   B8402 : EF01                                dc.b    $EF,$01
(1)  189/   B8404 : (MACRO)             	smpsModSet          $02, $02, $01, $02
(1)  189/   B8404 : F0                          dc.b    $F0
(1)  189/   B8405 : 0302 0106                           dc.b    $02+1,$02,$01,(($02+1) * $02) & $FF
(1)  189/   B8409 :                             ;dc.b   $02,$01,$02
(1)  190/   B8409 : (MACRO)             	smpsPan             panLeft, $00
(1)  190/   B8409 : =$0                 panNone set $00
(1)  190/   B8409 : =$40                panRight set $40
(1)  190/   B8409 : =$80                panLeft set $80
(1)  190/   B8409 : =$C0                panCentre set $C0
(1)  190/   B8409 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  190/   B8409 : E080                        dc.b $E0,PANLEFT+$00
(1)  191/   B840B : (MACRO)             	smpsCall            ARZ_Call02
(1)  191/   B840B : F8                          dc.b    $F8
(1)  191/   B840C : 9080                                dc.w    z80_ptr(ARZ_CALL02)
(1)  192/   B840E : C306 80C3 80C4 C480 	dc.b	nFs5, $06, nRst, nFs5, nRst, nG5, nG5, nRst, nA5, nRst, nRst, $02
            B8416 : C680 8002         
(1)  193/   B841A : BF08 C1C3 C4C6      	dc.b	nD5, $08, nE5, nFs5, nG5, nA5
(1)  194/   B8420 : (MACRO)             	smpsCall            ARZ_Call02
(1)  194/   B8420 : F8                          dc.b    $F8
(1)  194/   B8421 : 9080                                dc.w    z80_ptr(ARZ_CALL02)
(1)  195/   B8423 : C606 C6C6 8012 C606 	dc.b	nA5, $06, nA5, nA5, nRst, $12, nA5, $06, nA5, nA5, nRst, $2A
            B842B : C6C6 802A         
(1)  196/   B842F : (MACRO)             	smpsAlterVol        $FC
(1)  196/   B842F : E6FC                        dc.b    $E6,$FC
(1)  197/   B8431 : (MACRO)             	smpsJump            ARZ_Jump01
(1)  197/   B8431 : F6                          dc.b    $F6
(1)  197/   B8432 : 9883                                dc.w    z80_ptr(ARZ_JUMP01)
(1)  198/   B8434 :                     
(1)  199/   B8434 :                     ARZ_Call00:
(1)  200/   B8434 : 810C 8206 8112 8106 	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dKick, $06, dKick, $12, dMidTom, $06
            B843C : 8112 8C06         
(1)  201/   B8440 : 820C 8306 8180      	dc.b	dSnare, $0C, dClap, $06, dKick, nRst
(1)  202/   B8446 : (MACRO)             	smpsReturn
(1)  202/   B8446 : F9                                  dc.b    $F9
(1)  203/   B8447 :                     
(1)  204/   B8447 :                     ARZ_Call01:
(1)  205/   B8447 : 810C 8206 8112 8C06 	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dMidTom, $06, dMidTom
            B844F : 8C               
(1)  206/   B8450 : (MACRO)             	smpsReturn
(1)  206/   B8450 : F9                                  dc.b    $F9
(1)  207/   B8451 :                     
(1)  208/   B8451 :                     ; DAC Data
(1)  209/   B8451 :                     ARZ_DAC:
(1)  210/   B8451 : 8306 83             	dc.b	dClap, $06, dClap
(1)  211/   B8454 :                     
(1)  212/   B8454 :                     ARZ_Jump00:
(1)  213/   B8454 : 8112 1E12 1E12 1E12 	dc.b	dKick, $12, $1E, $12, $1E, $12, $1E, $12, dClap, $06, dSnare, nRst
            B845C : 8306 8280         
(1)  214/   B8460 : 800C 8112 818C 068D 	dc.b	nRst, $0C, dKick, $12, dKick, dMidTom, $06, dLowTom, dKick, $12, dKick, dLowTom
            B8468 : 8112 818D         
(1)  215/   B846C : 068E 8112 068C 8C8D 	dc.b	$06, dFloorTom, dKick, $12, $06, dMidTom, dMidTom, dLowTom, dLowTom, dFloorTom, dFloorTom, nRst
            B8474 : 8D8E 8E80         
(1)  216/   B8478 : 8206 0C81           	dc.b	dSnare, $06, $0C, dKick
(1)  217/   B847C :                     
(1)  218/   B847C :                     ARZ_Loop00:
(1)  219/   B847C : (MACRO)             	smpsCall            ARZ_Call00
(1)  219/   B847C : F8                          dc.b    $F8
(1)  219/   B847D : 3484                                dc.w    z80_ptr(ARZ_CALL00)
(1)  220/   B847F : (MACRO)             	smpsLoop            $00, $03, ARZ_Loop00
(1)  220/   B847F : F7                          dc.b    $F7
(1)  220/   B8480 : 0003                        dc.b    $00,$03
(1)  220/   B8482 : 7C84                                dc.w    z80_ptr(ARZ_LOOP00)
(1)  221/   B8484 : 8306 8281 8282 8082 	dc.b	dClap, $06, dSnare, dKick, dSnare, dSnare, nRst, dSnare, nRst, dSnare, nRst, dSnare
            B848C : 8082 8082         
(1)  222/   B8490 : 8082 8283 83        	dc.b	nRst, dSnare, dSnare, dClap, dClap
(1)  223/   B8495 :                     
(1)  224/   B8495 :                     ARZ_Loop01:
(1)  225/   B8495 : (MACRO)             	smpsCall            ARZ_Call00
(1)  225/   B8495 : F8                          dc.b    $F8
(1)  225/   B8496 : 3484                                dc.w    z80_ptr(ARZ_CALL00)
(1)  226/   B8498 : (MACRO)             	smpsLoop            $00, $03, ARZ_Loop01
(1)  226/   B8498 : F7                          dc.b    $F7
(1)  226/   B8499 : 0003                        dc.b    $00,$03
(1)  226/   B849B : 9584                                dc.w    z80_ptr(ARZ_LOOP01)
(1)  227/   B849D : 8204 8383 8383 8383 	dc.b	dSnare, $04, dClap, dClap, dClap, dClap, dClap, dClap, $0C, $06, dClap, dClap
            B84A5 : 0C06 8383         
(1)  228/   B84A9 : 8383 8383 8383 0C   	dc.b	dClap, dClap, dClap, dClap, dClap, dClap, $0C
(1)  229/   B84B0 :                     
(1)  230/   B84B0 :                     ARZ_Loop02:
(1)  231/   B84B0 : (MACRO)             	smpsCall            ARZ_Call01
(1)  231/   B84B0 : F8                          dc.b    $F8
(1)  231/   B84B1 : 4784                                dc.w    z80_ptr(ARZ_CALL01)
(1)  232/   B84B3 : (MACRO)             	smpsLoop            $00, $06, ARZ_Loop02
(1)  232/   B84B3 : F7                          dc.b    $F7
(1)  232/   B84B4 : 0006                        dc.b    $00,$06
(1)  232/   B84B6 : B084                                dc.w    z80_ptr(ARZ_LOOP02)
(1)  233/   B84B8 : 810C 8281 0683 0C06 	dc.b	dKick, $0C, dSnare, dKick, $06, dClap, $0C, $06, dKick, $08, dSnare, dSnare
            B84C0 : 8108 8282         
(1)  234/   B84C4 : 8282 82             	dc.b	dSnare, dSnare, dSnare
(1)  235/   B84C7 :                     
(1)  236/   B84C7 :                     ARZ_Loop03:
(1)  237/   B84C7 : (MACRO)             	smpsCall            ARZ_Call01
(1)  237/   B84C7 : F8                          dc.b    $F8
(1)  237/   B84C8 : 4784                                dc.w    z80_ptr(ARZ_CALL01)
(1)  238/   B84CA : (MACRO)             	smpsLoop            $00, $06, ARZ_Loop03
(1)  238/   B84CA : F7                          dc.b    $F7
(1)  238/   B84CB : 0006                        dc.b    $00,$06
(1)  238/   B84CD : C784                                dc.w    z80_ptr(ARZ_LOOP03)
(1)  239/   B84CF : 8306 8282 1882 0682 	dc.b	dClap, $06, dSnare, dSnare, $18, dSnare, $06, dSnare, dSnare, $18, dKick, $0C
            B84D7 : 8218 810C         
(1)  240/   B84DB : 8306 83             	dc.b	dClap, $06, dClap
(1)  241/   B84DE : (MACRO)             	smpsJump            ARZ_Jump00
(1)  241/   B84DE : F6                          dc.b    $F6
(1)  241/   B84DF : 5484                                dc.w    z80_ptr(ARZ_JUMP00)
(1)  242/   B84E1 :                     
(1)  243/   B84E1 :                     ; PSG1 Data
(1)  244/   B84E1 :                     ARZ_PSG1:
(1)  245/   B84E1 : 800C                	dc.b	nRst, $0C
(1)  246/   B84E3 :                     
(1)  247/   B84E3 :                     ARZ_Jump05:
(1)  248/   B84E3 : (MACRO)             	smpsAlterPitch      $0C
(1)  248/   B84E3 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  248/   B84E3 : FB0C                                dc.b    $FB,$0C
(1)  249/   B84E5 :                     
(1)  250/   B84E5 :                     ARZ_Loop09:
(1)  251/   B84E5 : AE0C B306 AC80 B180 	dc.b	nA3, $0C, nD4, $06, nG3, nRst, nC4, nRst, nA3, $0C, nA3, $06
            B84ED : AE0C AE06         
(1)  252/   B84F1 : 80B3 AC0C B1AE B306 	dc.b	nRst, nD4, nG3, $0C, nC4, nA3, nD4, $06, nG3, nRst, nC4, nRst
            B84F9 : AC80 B180         
(1)  253/   B84FD : AE18 AA06 AA80 12   	dc.b	nA3, $18, nF3, $06, nF3, nRst, $12
(1)  254/   B8504 : (MACRO)             	smpsLoop            $00, $02, ARZ_Loop09
(1)  254/   B8504 : F7                          dc.b    $F7
(1)  254/   B8505 : 0002                        dc.b    $00,$02
(1)  254/   B8507 : E584                                dc.w    z80_ptr(ARZ_LOOP09)
(1)  255/   B8509 :                     
(1)  256/   B8509 :                     ARZ_Loop0A:
(1)  257/   B8509 : AC0C AF06 B30C ACAC 	dc.b	nG3, $0C, nBb3, $06, nD4, $0C, nG3, nG3, $06, nRst, nG3, $0C
            B8511 : 0680 AC0C         
(1)  258/   B8515 : AF06 B50C AC06 8006 	dc.b	nBb3, $06, nE4, $0C, nG3, $06, nRst, $06, nC4, $0C, nF4, $06
            B851D : B10C B606         
(1)  259/   B8521 : AE0C B1B3 B606 80B6 	dc.b	nA3, $0C, nC4, nD4, nF4, $06, nRst, nF4, nF3, $0C, nBb3, nBb3
            B8529 : AA0C AFAF         
(1)  260/   B852D : B506 AC0C AFB2 B506 	dc.b	nE4, $06, nG3, $0C, nBb3, nCs4, nE4, $06, nRst, nE4, nA3, $0C
            B8535 : 80B5 AE0C         
(1)  261/   B8539 : B2AE B306 AC0C AEAE 	dc.b	nCs4, nA3, nD4, $06, nG3, $0C, nA3, nA3, nD4, $06, nRst, nD4
            B8541 : B306 80B3         
(1)  262/   B8545 : AB0C AE             	dc.b	nFs3, $0C, nA3
(1)  263/   B8548 : (MACRO)             	smpsLoop            $00, $02, ARZ_Loop0A
(1)  263/   B8548 : F7                          dc.b    $F7
(1)  263/   B8549 : 0002                        dc.b    $00,$02
(1)  263/   B854B : 0985                                dc.w    z80_ptr(ARZ_LOOP0A)
(1)  264/   B854D : (MACRO)             	smpsAlterPitch      $F4
(1)  264/   B854D :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  264/   B854D : FBF4                                dc.b    $FB,$F4
(1)  265/   B854F : C40C C706 BF0C C2C4 	dc.b	nG5, $0C, nBb5, $06, nD5, $0C, nF5, nG5, $06, nRst, nBb5, nRst
            B8557 : 0680 C780         
(1)  266/   B855B : BFC2 0CC4 0680 C20C 	dc.b	nD5, nF5, $0C, nG5, $06, nRst, nF5, $0C, nA5, $06, nC5, $0C
            B8563 : C606 BD0C         
(1)  267/   B8567 : C1C2 0680 C680 BDC1 	dc.b	nE5, nF5, $06, nRst, nA5, nRst, nC5, nE5, $0C, nF5, $06, nRst
            B856F : 0CC2 0680         
(1)  268/   B8573 : C10C C406 BE0C BFC1 	dc.b	nE5, $0C, nG5, $06, nCs5, $0C, nD5, nE5, $06, nRst, nG5, nRst
            B857B : 0680 C480         
(1)  269/   B857F : BEBF 0CC1 0680 C30C 	dc.b	nCs5, nD5, $0C, nE5, $06, nRst, nFs5, $0C, nA5, $06, nD5, $0C
            B8587 : C606 BF0C         
(1)  270/   B858B : C1C3 0680 C680 BFC1 	dc.b	nE5, nFs5, $06, nRst, nA5, nRst, nD5, nE5, $0C, nFs5, $06, nRst
            B8593 : 0CC3 0680         
(1)  271/   B8597 : C40C C706 BF0C C2C4 	dc.b	nG5, $0C, nBb5, $06, nD5, $0C, nF5, nG5, nBb5, $06, nRst, nD5
            B859F : C706 80BF         
(1)  272/   B85A3 : C20C C406 80C2 0CC6 	dc.b	nF5, $0C, nG5, $06, nRst, nF5, $0C, nA5, $06, nC5, $0C, nE5
            B85AB : 06BD 0CC1         
(1)  273/   B85AF : C2C6 0680 BDC1 0CC2 	dc.b	nF5, nA5, $06, nRst, nC5, nE5, $0C, nF5, $06, nRst, nE5, $0C
            B85B7 : 0680 C10C         
(1)  274/   B85BB : C406 BE0C BFC1 C406 	dc.b	nG5, $06, nCs5, $0C, nD5, nE5, nG5, $06, nRst, nCs5, nD5, $0C
            B85C3 : 80BE BF0C         
(1)  275/   B85C7 : C106 80C6 C6C6 8012 	dc.b	nE5, $06, nRst, nA5, nA5, nA5, nRst, $12, nA5, $06, nA5, nA5
            B85CF : C606 C6C6         
(1)  276/   B85D3 : 802A                	dc.b	nRst, $2A
(1)  277/   B85D5 : (MACRO)             	smpsJump            ARZ_Jump05
(1)  277/   B85D5 : F6                          dc.b    $F6
(1)  277/   B85D6 : E384                                dc.w    z80_ptr(ARZ_JUMP05)
(1)  278/   B85D8 :                     
(1)  279/   B85D8 :                     ; PSG2 Data
(1)  280/   B85D8 :                     ARZ_PSG2:
(1)  281/   B85D8 : 800C                	dc.b	nRst, $0C
(1)  282/   B85DA : (MACRO)             	smpsModSet          $03, $02, $01, $05
(1)  282/   B85DA : F0                          dc.b    $F0
(1)  282/   B85DB : 0402 010C                           dc.b    $03+1,$02,$01,(($05+1) * $02) & $FF
(1)  282/   B85DF :                             ;dc.b   $02,$01,$05
(1)  283/   B85DF :                     
(1)  284/   B85DF :                     ARZ_Loop08:
(1)  285/   B85DF : 8030 80             	dc.b	nRst, $30, nRst
(1)  286/   B85E2 : (MACRO)             	smpsPSGvoice        fTone_0A
(1)  286/   B85E2 : F50A                        dc.b    $F5,FTONE_0A
(1)  287/   B85E4 : C606 CDC6 CDC6 1880 	dc.b	nA5, $06, nE6, nA5, nE6, nA5, $18, nRst, $12, nF5, $06, nF5
            B85EC : 12C2 06C2         
(1)  288/   B85F0 : 8012                	dc.b	nRst, $12
(1)  289/   B85F2 : (MACRO)             	smpsLoop            $00, $02, ARZ_Loop08
(1)  289/   B85F2 : F7                          dc.b    $F7
(1)  289/   B85F3 : 0002                        dc.b    $00,$02
(1)  289/   B85F5 : DF85                                dc.w    z80_ptr(ARZ_LOOP08)
(1)  290/   B85F7 : 8030 8080 BD06 BFC6 	dc.b	nRst, $30, nRst, nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $30
            B85FF : C21E 8030         
(1)  291/   B8603 : 8080 06C6 80C6 C480 	dc.b	nRst, nRst, $06, nA5, nRst, nA5, nG5, nRst, nG5, nRst, nFs5, nRst
            B860B : C480 C380         
(1)  292/   B860F : C380 BF03 80BF 8009 	dc.b	nFs5, nRst, nD5, $03, nRst, nD5, nRst, $09, nRst, $06, nRst, $30
            B8617 : 8006 8030         
(1)  293/   B861B : 8080 BD06 BFC6 C21E 	dc.b	nRst, nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $30, nRst, nRst
            B8623 : 8030 8080         
(1)  294/   B8627 : 06C6 80C4 C680 C480 	dc.b	$06, nA5, nRst, nG5, nA5, nRst, nG5, nRst, nA5, $0C, nG5, $06
            B862F : C60C C406         
(1)  295/   B8633 : C612 C402 C2C1 BFBD 	dc.b	nA5, $12, nG5, $02, nF5, nE5, nD5, nC5, nB4
            B863B : BC               
(1)  296/   B863C : (MACRO)             	smpsPSGvoice        fTone_01
(1)  296/   B863C : F501                        dc.b    $F5,FTONE_01
(1)  297/   B863E : (MACRO)             	smpsPSGAlterVol     $FE
(1)  297/   B863E : ECFE                        dc.b    $EC,$FE
(1)  298/   B8640 : BF0C C406 BB0C BFBF 	dc.b	nD5, $0C, nG5, $06, nBb4, $0C, nD5, nD5, $06, nRst, nF5, nRst
            B8648 : 0680 C280         
(1)  299/   B864C : B8BF 0CBF 0680 BD0C 	dc.b	nG4, nD5, $0C, nD5, $06, nRst, nC5, $0C, nF5, $06, nA4, $0C
            B8654 : C206 BA0C         
(1)  300/   B8658 : BDBD 0680 C280 BABD 	dc.b	nC5, nC5, $06, nRst, nF5, nRst, nA4, nC5, $0C, nC5, $06, nRst
            B8660 : 0CBD 0680         
(1)  301/   B8664 : BE0C C106 BA0C BBBE 	dc.b	nCs5, $0C, nE5, $06, nA4, $0C, nBb4, nCs5, $06, nRst, nE5, nRst
            B866C : 0680 C180         
(1)  302/   B8670 : BABA 0CBA 0680 BF0C 	dc.b	nA4, nA4, $0C, nA4, $06, nRst, nD5, $0C, nFs5, $06, nA4, $0C
            B8678 : C306 BA0C         
(1)  303/   B867C : BDBF 0680 C380 BABD 	dc.b	nC5, nD5, $06, nRst, nFs5, nRst, nA4, nC5, $0C, nD5, $06, nRst
            B8684 : 0CBF 0680         
(1)  304/   B8688 : BF0C C406 BB0C BFBF 	dc.b	nD5, $0C, nG5, $06, nBb4, $0C, nD5, nD5, nF5, $06, nRst, nG4
            B8690 : C206 80B8         
(1)  305/   B8694 : BF0C BF06 80BD 0CC2 	dc.b	nD5, $0C, nD5, $06, nRst, nC5, $0C, nF5, $06, nA4, $0C, nC5
            B869C : 06BA 0CBD         
(1)  306/   B86A0 : BDC2 0680 BABD 0CBD 	dc.b	nC5, nF5, $06, nRst, nA4, nC5, $0C, nC5, $06, nRst, nCs5, $0C
            B86A8 : 0680 BE0C         
(1)  307/   B86AC : C106 BA0C BBBE C106 	dc.b	nE5, $06, nA4, $0C, nBb4, nCs5, nE5, $06, nRst, nA4, nA4, $0C
            B86B4 : 80BA BA0C         
(1)  308/   B86B8 : BA06 80C1 C1C1 8012 	dc.b	nA4, $06, nRst, nE5, nE5, nE5, nRst, $12, nE5, $06, nE5, nE5
            B86C0 : C106 C1C1         
(1)  309/   B86C4 : 802A                	dc.b	nRst, $2A
(1)  310/   B86C6 : (MACRO)             	smpsPSGAlterVol     $02
(1)  310/   B86C6 : EC02                        dc.b    $EC,$02
(1)  311/   B86C8 : (MACRO)             	smpsJump            ARZ_Loop08
(1)  311/   B86C8 : F6                          dc.b    $F6
(1)  311/   B86C9 : DF85                                dc.w    z80_ptr(ARZ_LOOP08)
(1)  312/   B86CB :                     
(1)  313/   B86CB :                     ; PSG3 Data
(1)  314/   B86CB :                     ARZ_PSG3:
(1)  315/   B86CB : (MACRO)             	smpsPSGform         $E7
(1)  315/   B86CB : F3E7                        dc.b    $F3,$E7
(1)  316/   B86CD : 800C                	dc.b	nRst, $0C
(1)  317/   B86CF : (MACRO)             	smpsPSGvoice        fTone_02
(1)  317/   B86CF : F502                        dc.b    $F5,FTONE_02
(1)  318/   B86D1 :                     
(1)  319/   B86D1 :                     ARZ_Loop07:
(1)  320/   B86D1 : 800C C706 8007 C706 	dc.b	nRst, $0C, nMaxPSG, $06, nRst, $07, nMaxPSG, $06, nRst, $11, nMaxPSG, $0C
            B86D9 : 8011 C70C         
(1)  321/   B86DD : 8006 C70C 8006 C780 	dc.b	nRst, $06, nMaxPSG, $0C, nRst, $06, nMaxPSG, nRst
(1)  322/   B86E5 : (MACRO)             	smpsLoop            $00, $13, ARZ_Loop07
(1)  322/   B86E5 : F7                          dc.b    $F7
(1)  322/   B86E6 : 0013                        dc.b    $00,$13
(1)  322/   B86E8 : D186                                dc.w    z80_ptr(ARZ_LOOP07)
(1)  323/   B86EA : C706 C7C7 8012 C706 	dc.b	nMaxPSG, $06, nMaxPSG, nMaxPSG, nRst, $12, nMaxPSG, $06, nMaxPSG, nMaxPSG, nRst, $2A
            B86F2 : C7C7 802A         
(1)  324/   B86F6 : (MACRO)             	smpsJump            ARZ_Loop07
(1)  324/   B86F6 : F6                          dc.b    $F6
(1)  324/   B86F7 : D186                                dc.w    z80_ptr(ARZ_LOOP07)
(1)  325/   B86F9 :                     
(1)  326/   B86F9 :                     ARZ_Voices:
(1)  327/   B86F9 :                     ;	Voice $00
(1)  328/   B86F9 :                     ;	$18
(1)  329/   B86F9 :                     ;	$37, $32, $31, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
(1)  330/   B86F9 :                     ;	$08, $0A, $03, $05, 	$B6, $B6, $36, $28, 	$2C, $22, $14, $00
(1)  331/   B86F9 : (MACRO)             	smpsVcAlgorithm     $00
(1)  331/   B86F9 : =$0                 vcAlgorithm set $00
(1)  332/   B86F9 : (MACRO)             	smpsVcFeedback      $03
(1)  332/   B86F9 : =$3                 vcFeedback set $03
(1)  333/   B86F9 : (MACRO)             	smpsVcUnusedBits    $00
(1)  333/   B86F9 : =$0                 vcUnusedBits set $00
(1)  333/   B86F9 : =$0                 vcD1R1Unk set 0
(1)  333/   B86F9 : =$0                 vcD1R2Unk set 0
(1)  333/   B86F9 : =$0                 vcD1R3Unk set 0
(1)  333/   B86F9 : =$0                 vcD1R4Unk set 0
(1)  334/   B86F9 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)  334/   B86F9 : =$3                 vcDT1 set $03
(1)  334/   B86F9 : =$3                 vcDT2 set $03
(1)  334/   B86F9 : =$3                 vcDT3 set $03
(1)  334/   B86F9 : =$3                 vcDT4 set $03
(1)  335/   B86F9 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $02, $07
(1)  335/   B86F9 : =$1                 vcCF1 set $01
(1)  335/   B86F9 : =$1                 vcCF2 set $01
(1)  335/   B86F9 : =$2                 vcCF3 set $02
(1)  335/   B86F9 : =$7                 vcCF4 set $07
(1)  336/   B86F9 : (MACRO)             	smpsVcRateScale     $02, $00, $03, $02
(1)  336/   B86F9 : =$2                 vcRS1 set $02
(1)  336/   B86F9 : =$0                 vcRS2 set $00
(1)  336/   B86F9 : =$3                 vcRS3 set $03
(1)  336/   B86F9 : =$2                 vcRS4 set $02
(1)  337/   B86F9 : (MACRO)             	smpsVcAttackRate    $1C, $1C, $1C, $1E
(1)  337/   B86F9 : =$1C                vcAR1 set $1C
(1)  337/   B86F9 : =$1C                vcAR2 set $1C
(1)  337/   B86F9 : =$1C                vcAR3 set $1C
(1)  337/   B86F9 : =$1E                vcAR4 set $1E
(1)  338/   B86F9 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  338/   B86F9 : =$0                 vcAM1 set $00<<5
(1)  338/   B86F9 : =$0                 vcAM2 set $00<<5
(1)  338/   B86F9 : =$0                 vcAM3 set $00<<5
(1)  338/   B86F9 : =$0                 vcAM4 set $00<<5
(1)  339/   B86F9 : (MACRO)             	smpsVcDecayRate1    $01, $04, $06, $0D
(1)  339/   B86F9 : =$1                 vcD1R1 set $01
(1)  339/   B86F9 : =$4                 vcD1R2 set $04
(1)  339/   B86F9 : =$6                 vcD1R3 set $06
(1)  339/   B86F9 : =$D                 vcD1R4 set $0D
(1)  340/   B86F9 : (MACRO)             	smpsVcDecayRate2    $05, $03, $0A, $08
(1)  340/   B86F9 : =$5                 vcD2R1 set $05
(1)  340/   B86F9 : =$3                 vcD2R2 set $03
(1)  340/   B86F9 : =$A                 vcD2R3 set $0A
(1)  340/   B86F9 : =$8                 vcD2R4 set $08
(1)  341/   B86F9 : (MACRO)             	smpsVcDecayLevel    $02, $03, $0B, $0B
(1)  341/   B86F9 : =$2                 vcDL1 set $02
(1)  341/   B86F9 : =$3                 vcDL2 set $03
(1)  341/   B86F9 : =$B                 vcDL3 set $0B
(1)  341/   B86F9 : =$B                 vcDL4 set $0B
(1)  342/   B86F9 : (MACRO)             	smpsVcReleaseRate   $08, $06, $06, $06
(1)  342/   B86F9 : =$8                 vcRR1 set $08
(1)  342/   B86F9 : =$6                 vcRR2 set $06
(1)  342/   B86F9 : =$6                 vcRR3 set $06
(1)  342/   B86F9 : =$6                 vcRR4 set $06
(1)  343/   B86F9 : (MACRO)             	smpsVcTotalLevel    $00, $14, $22, $2C
(1)  343/   B86F9 : =$0                 vcTL1 set $00
(1)  343/   B86F9 : =$14                vcTL2 set $14
(1)  343/   B86F9 : =$22                vcTL3 set $22
(1)  343/   B86F9 : =$2C                vcTL4 set $2C
(1)  343/   B86F9 : 18                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  343/   B86FA :                     ;   0     1     2     3     4     5     6     7
(1)  343/   B86FA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  343/   B86FA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  343/   B86FA : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  343/   B86FA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  343/   B86FA : =$80                vcTLMask1 set $80
(1)  343/   B86FA :                     
(1)  343/   B86FA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  343/   B86FA : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  343/   B86FA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  343/   B86FA : =$80                vcTLMask1 set $80
(1)  343/   B86FA : =$0                 vcTL1 set vcTL1&$7F
(1)  343/   B86FA : =$14                vcTL2 set vcTL2&$7F
(1)  343/   B86FA : =$22                vcTL3 set vcTL3&$7F
(1)  343/   B86FA : =$2C                vcTL4 set vcTL4&$7F
(1)  343/   B86FA :                     
(1)  343/   B86FA : 3732 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  343/   B86FE : 9EDC 1C9C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  343/   B8702 : 0D06 0401                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  343/   B8706 : 080A 0305                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  343/   B870A : B6B6 3628                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  343/   B870E : 2C22 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  344/   B8712 :                     
(1)  345/   B8712 :                     ;	Voice $01
(1)  346/   B8712 :                     ;	$3A
(1)  347/   B8712 :                     ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
(1)  348/   B8712 :                     ;	$01, $02, $02, $00, 	$52, $02, $02, $28, 	$18, $22, $18, $80
(1)  349/   B8712 : (MACRO)             	smpsVcAlgorithm     $02
(1)  349/   B8712 : =$2                 vcAlgorithm set $02
(1)  350/   B8712 : (MACRO)             	smpsVcFeedback      $07
(1)  350/   B8712 : =$7                 vcFeedback set $07
(1)  351/   B8712 : (MACRO)             	smpsVcUnusedBits    $00
(1)  351/   B8712 : =$0                 vcUnusedBits set $00
(1)  351/   B8712 : =$0                 vcD1R1Unk set 0
(1)  351/   B8712 : =$0                 vcD1R2Unk set 0
(1)  351/   B8712 : =$0                 vcD1R3Unk set 0
(1)  351/   B8712 : =$0                 vcD1R4Unk set 0
(1)  352/   B8712 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  352/   B8712 : =$0                 vcDT1 set $00
(1)  352/   B8712 : =$0                 vcDT2 set $00
(1)  352/   B8712 : =$0                 vcDT3 set $00
(1)  352/   B8712 : =$0                 vcDT4 set $00
(1)  353/   B8712 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $01, $01
(1)  353/   B8712 : =$2                 vcCF1 set $02
(1)  353/   B8712 : =$1                 vcCF2 set $01
(1)  353/   B8712 : =$1                 vcCF3 set $01
(1)  353/   B8712 : =$1                 vcCF4 set $01
(1)  354/   B8712 : (MACRO)             	smpsVcRateScale     $01, $00, $00, $02
(1)  354/   B8712 : =$1                 vcRS1 set $01
(1)  354/   B8712 : =$0                 vcRS2 set $00
(1)  354/   B8712 : =$0                 vcRS3 set $00
(1)  354/   B8712 : =$2                 vcRS4 set $02
(1)  355/   B8712 : (MACRO)             	smpsVcAttackRate    $12, $07, $07, $0D
(1)  355/   B8712 : =$12                vcAR1 set $12
(1)  355/   B8712 : =$7                 vcAR2 set $07
(1)  355/   B8712 : =$7                 vcAR3 set $07
(1)  355/   B8712 : =$D                 vcAR4 set $0D
(1)  356/   B8712 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  356/   B8712 : =$0                 vcAM1 set $00<<5
(1)  356/   B8712 : =$0                 vcAM2 set $00<<5
(1)  356/   B8712 : =$0                 vcAM3 set $00<<5
(1)  356/   B8712 : =$0                 vcAM4 set $00<<5
(1)  357/   B8712 : (MACRO)             	smpsVcDecayRate1    $03, $00, $00, $09
(1)  357/   B8712 : =$3                 vcD1R1 set $03
(1)  357/   B8712 : =$0                 vcD1R2 set $00
(1)  357/   B8712 : =$0                 vcD1R3 set $00
(1)  357/   B8712 : =$9                 vcD1R4 set $09
(1)  358/   B8712 : (MACRO)             	smpsVcDecayRate2    $00, $02, $02, $01
(1)  358/   B8712 : =$0                 vcD2R1 set $00
(1)  358/   B8712 : =$2                 vcD2R2 set $02
(1)  358/   B8712 : =$2                 vcD2R3 set $02
(1)  358/   B8712 : =$1                 vcD2R4 set $01
(1)  359/   B8712 : (MACRO)             	smpsVcDecayLevel    $02, $00, $00, $05
(1)  359/   B8712 : =$2                 vcDL1 set $02
(1)  359/   B8712 : =$0                 vcDL2 set $00
(1)  359/   B8712 : =$0                 vcDL3 set $00
(1)  359/   B8712 : =$5                 vcDL4 set $05
(1)  360/   B8712 : (MACRO)             	smpsVcReleaseRate   $08, $02, $02, $02
(1)  360/   B8712 : =$8                 vcRR1 set $08
(1)  360/   B8712 : =$2                 vcRR2 set $02
(1)  360/   B8712 : =$2                 vcRR3 set $02
(1)  360/   B8712 : =$2                 vcRR4 set $02
(1)  361/   B8712 : (MACRO)             	smpsVcTotalLevel    $80, $18, $22, $18
(1)  361/   B8712 : =$80                vcTL1 set $80
(1)  361/   B8712 : =$18                vcTL2 set $18
(1)  361/   B8712 : =$22                vcTL3 set $22
(1)  361/   B8712 : =$18                vcTL4 set $18
(1)  361/   B8712 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  361/   B8713 :                     ;   0     1     2     3     4     5     6     7
(1)  361/   B8713 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  361/   B8713 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  361/   B8713 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  361/   B8713 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  361/   B8713 : =$80                vcTLMask1 set $80
(1)  361/   B8713 :                     
(1)  361/   B8713 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  361/   B8713 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  361/   B8713 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  361/   B8713 : =$80                vcTLMask1 set $80
(1)  361/   B8713 : =$0                 vcTL1 set vcTL1&$7F
(1)  361/   B8713 : =$18                vcTL2 set vcTL2&$7F
(1)  361/   B8713 : =$22                vcTL3 set vcTL3&$7F
(1)  361/   B8713 : =$18                vcTL4 set vcTL4&$7F
(1)  361/   B8713 :                     
(1)  361/   B8713 : 0101 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  361/   B8717 : 8D07 0752                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  361/   B871B : 0900 0003                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  361/   B871F : 0102 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  361/   B8723 : 5202 0228                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  361/   B8727 : 1822 1880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  362/   B872B :                     
(1)  363/   B872B :                     ;	Voice $02
(1)  364/   B872B :                     ;	$3D
(1)  365/   B872B :                     ;	$01, $02, $02, $02, 	$10, $50, $50, $50, 	$07, $08, $08, $08
(1)  366/   B872B :                     ;	$01, $00, $00, $00, 	$24, $18, $18, $18, 	$1C, $82, $82, $82
(1)  367/   B872B : (MACRO)             	smpsVcAlgorithm     $05
(1)  367/   B872B : =$5                 vcAlgorithm set $05
(1)  368/   B872B : (MACRO)             	smpsVcFeedback      $07
(1)  368/   B872B : =$7                 vcFeedback set $07
(1)  369/   B872B : (MACRO)             	smpsVcUnusedBits    $00
(1)  369/   B872B : =$0                 vcUnusedBits set $00
(1)  369/   B872B : =$0                 vcD1R1Unk set 0
(1)  369/   B872B : =$0                 vcD1R2Unk set 0
(1)  369/   B872B : =$0                 vcD1R3Unk set 0
(1)  369/   B872B : =$0                 vcD1R4Unk set 0
(1)  370/   B872B : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  370/   B872B : =$0                 vcDT1 set $00
(1)  370/   B872B : =$0                 vcDT2 set $00
(1)  370/   B872B : =$0                 vcDT3 set $00
(1)  370/   B872B : =$0                 vcDT4 set $00
(1)  371/   B872B : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $01
(1)  371/   B872B : =$2                 vcCF1 set $02
(1)  371/   B872B : =$2                 vcCF2 set $02
(1)  371/   B872B : =$2                 vcCF3 set $02
(1)  371/   B872B : =$1                 vcCF4 set $01
(1)  372/   B872B : (MACRO)             	smpsVcRateScale     $01, $01, $01, $00
(1)  372/   B872B : =$1                 vcRS1 set $01
(1)  372/   B872B : =$1                 vcRS2 set $01
(1)  372/   B872B : =$1                 vcRS3 set $01
(1)  372/   B872B : =$0                 vcRS4 set $00
(1)  373/   B872B : (MACRO)             	smpsVcAttackRate    $10, $10, $10, $10
(1)  373/   B872B : =$10                vcAR1 set $10
(1)  373/   B872B : =$10                vcAR2 set $10
(1)  373/   B872B : =$10                vcAR3 set $10
(1)  373/   B872B : =$10                vcAR4 set $10
(1)  374/   B872B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  374/   B872B : =$0                 vcAM1 set $00<<5
(1)  374/   B872B : =$0                 vcAM2 set $00<<5
(1)  374/   B872B : =$0                 vcAM3 set $00<<5
(1)  374/   B872B : =$0                 vcAM4 set $00<<5
(1)  375/   B872B : (MACRO)             	smpsVcDecayRate1    $08, $08, $08, $07
(1)  375/   B872B : =$8                 vcD1R1 set $08
(1)  375/   B872B : =$8                 vcD1R2 set $08
(1)  375/   B872B : =$8                 vcD1R3 set $08
(1)  375/   B872B : =$7                 vcD1R4 set $07
(1)  376/   B872B : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1)  376/   B872B : =$0                 vcD2R1 set $00
(1)  376/   B872B : =$0                 vcD2R2 set $00
(1)  376/   B872B : =$0                 vcD2R3 set $00
(1)  376/   B872B : =$1                 vcD2R4 set $01
(1)  377/   B872B : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $02
(1)  377/   B872B : =$1                 vcDL1 set $01
(1)  377/   B872B : =$1                 vcDL2 set $01
(1)  377/   B872B : =$1                 vcDL3 set $01
(1)  377/   B872B : =$2                 vcDL4 set $02
(1)  378/   B872B : (MACRO)             	smpsVcReleaseRate   $08, $08, $08, $04
(1)  378/   B872B : =$8                 vcRR1 set $08
(1)  378/   B872B : =$8                 vcRR2 set $08
(1)  378/   B872B : =$8                 vcRR3 set $08
(1)  378/   B872B : =$4                 vcRR4 set $04
(1)  379/   B872B : (MACRO)             	smpsVcTotalLevel    $82, $82, $82, $1C
(1)  379/   B872B : =$82                vcTL1 set $82
(1)  379/   B872B : =$82                vcTL2 set $82
(1)  379/   B872B : =$82                vcTL3 set $82
(1)  379/   B872B : =$1C                vcTL4 set $1C
(1)  379/   B872B : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  379/   B872C :                     ;   0     1     2     3     4     5     6     7
(1)  379/   B872C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  379/   B872C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  379/   B872C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  379/   B872C : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  379/   B872C : =$80                vcTLMask1 set $80
(1)  379/   B872C :                     
(1)  379/   B872C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  379/   B872C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  379/   B872C : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  379/   B872C : =$80                vcTLMask1 set $80
(1)  379/   B872C : =$2                 vcTL1 set vcTL1&$7F
(1)  379/   B872C : =$2                 vcTL2 set vcTL2&$7F
(1)  379/   B872C : =$2                 vcTL3 set vcTL3&$7F
(1)  379/   B872C : =$1C                vcTL4 set vcTL4&$7F
(1)  379/   B872C :                     
(1)  379/   B872C : 0102 0202                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  379/   B8730 : 1050 5050                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  379/   B8734 : 0708 0808                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  379/   B8738 : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  379/   B873C : 2418 1818                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  379/   B8740 : 1C82 8282                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  380/   B8744 :                     
(1)  381/   B8744 :                     ;	Voice $03
(1)  382/   B8744 :                     ;	$32
(1)  383/   B8744 :                     ;	$71, $0D, $33, $01, 	$5F, $99, $5F, $94, 	$05, $05, $05, $07
(1)  384/   B8744 :                     ;	$02, $02, $02, $02, 	$11, $11, $11, $72, 	$23, $2D, $26, $80
(1)  385/   B8744 : (MACRO)             	smpsVcAlgorithm     $02
(1)  385/   B8744 : =$2                 vcAlgorithm set $02
(1)  386/   B8744 : (MACRO)             	smpsVcFeedback      $06
(1)  386/   B8744 : =$6                 vcFeedback set $06
(1)  387/   B8744 : (MACRO)             	smpsVcUnusedBits    $00
(1)  387/   B8744 : =$0                 vcUnusedBits set $00
(1)  387/   B8744 : =$0                 vcD1R1Unk set 0
(1)  387/   B8744 : =$0                 vcD1R2Unk set 0
(1)  387/   B8744 : =$0                 vcD1R3Unk set 0
(1)  387/   B8744 : =$0                 vcD1R4Unk set 0
(1)  388/   B8744 : (MACRO)             	smpsVcDetune        $00, $03, $00, $07
(1)  388/   B8744 : =$0                 vcDT1 set $00
(1)  388/   B8744 : =$3                 vcDT2 set $03
(1)  388/   B8744 : =$0                 vcDT3 set $00
(1)  388/   B8744 : =$7                 vcDT4 set $07
(1)  389/   B8744 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $0D, $01
(1)  389/   B8744 : =$1                 vcCF1 set $01
(1)  389/   B8744 : =$3                 vcCF2 set $03
(1)  389/   B8744 : =$D                 vcCF3 set $0D
(1)  389/   B8744 : =$1                 vcCF4 set $01
(1)  390/   B8744 : (MACRO)             	smpsVcRateScale     $02, $01, $02, $01
(1)  390/   B8744 : =$2                 vcRS1 set $02
(1)  390/   B8744 : =$1                 vcRS2 set $01
(1)  390/   B8744 : =$2                 vcRS3 set $02
(1)  390/   B8744 : =$1                 vcRS4 set $01
(1)  391/   B8744 : (MACRO)             	smpsVcAttackRate    $14, $1F, $19, $1F
(1)  391/   B8744 : =$14                vcAR1 set $14
(1)  391/   B8744 : =$1F                vcAR2 set $1F
(1)  391/   B8744 : =$19                vcAR3 set $19
(1)  391/   B8744 : =$1F                vcAR4 set $1F
(1)  392/   B8744 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  392/   B8744 : =$0                 vcAM1 set $00<<5
(1)  392/   B8744 : =$0                 vcAM2 set $00<<5
(1)  392/   B8744 : =$0                 vcAM3 set $00<<5
(1)  392/   B8744 : =$0                 vcAM4 set $00<<5
(1)  393/   B8744 : (MACRO)             	smpsVcDecayRate1    $07, $05, $05, $05
(1)  393/   B8744 : =$7                 vcD1R1 set $07
(1)  393/   B8744 : =$5                 vcD1R2 set $05
(1)  393/   B8744 : =$5                 vcD1R3 set $05
(1)  393/   B8744 : =$5                 vcD1R4 set $05
(1)  394/   B8744 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)  394/   B8744 : =$2                 vcD2R1 set $02
(1)  394/   B8744 : =$2                 vcD2R2 set $02
(1)  394/   B8744 : =$2                 vcD2R3 set $02
(1)  394/   B8744 : =$2                 vcD2R4 set $02
(1)  395/   B8744 : (MACRO)             	smpsVcDecayLevel    $07, $01, $01, $01
(1)  395/   B8744 : =$7                 vcDL1 set $07
(1)  395/   B8744 : =$1                 vcDL2 set $01
(1)  395/   B8744 : =$1                 vcDL3 set $01
(1)  395/   B8744 : =$1                 vcDL4 set $01
(1)  396/   B8744 : (MACRO)             	smpsVcReleaseRate   $02, $01, $01, $01
(1)  396/   B8744 : =$2                 vcRR1 set $02
(1)  396/   B8744 : =$1                 vcRR2 set $01
(1)  396/   B8744 : =$1                 vcRR3 set $01
(1)  396/   B8744 : =$1                 vcRR4 set $01
(1)  397/   B8744 : (MACRO)             	smpsVcTotalLevel    $80, $26, $2D, $23
(1)  397/   B8744 : =$80                vcTL1 set $80
(1)  397/   B8744 : =$26                vcTL2 set $26
(1)  397/   B8744 : =$2D                vcTL3 set $2D
(1)  397/   B8744 : =$23                vcTL4 set $23
(1)  397/   B8744 : 32                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  397/   B8745 :                     ;   0     1     2     3     4     5     6     7
(1)  397/   B8745 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  397/   B8745 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  397/   B8745 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  397/   B8745 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  397/   B8745 : =$80                vcTLMask1 set $80
(1)  397/   B8745 :                     
(1)  397/   B8745 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  397/   B8745 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  397/   B8745 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  397/   B8745 : =$80                vcTLMask1 set $80
(1)  397/   B8745 : =$0                 vcTL1 set vcTL1&$7F
(1)  397/   B8745 : =$26                vcTL2 set vcTL2&$7F
(1)  397/   B8745 : =$2D                vcTL3 set vcTL3&$7F
(1)  397/   B8745 : =$23                vcTL4 set vcTL4&$7F
(1)  397/   B8745 :                     
(1)  397/   B8745 : 710D 3301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  397/   B8749 : 5F99 5F94                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  397/   B874D : 0505 0507                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  397/   B8751 : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  397/   B8755 : 1111 1172                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  397/   B8759 : 232D 2680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  398/   B875D :                     
(1)  399/   B875D :                     ;	Voice $04
(1)  400/   B875D :                     ;	$3A
(1)  401/   B875D :                     ;	$32, $01, $52, $31, 	$1F, $1F, $1F, $18, 	$01, $1F, $00, $00
(1)  402/   B875D :                     ;	$00, $0F, $00, $00, 	$5A, $0F, $03, $1A, 	$3B, $30, $4F, $00
(1)  403/   B875D : (MACRO)             	smpsVcAlgorithm     $02
(1)  403/   B875D : =$2                 vcAlgorithm set $02
(1)  404/   B875D : (MACRO)             	smpsVcFeedback      $07
(1)  404/   B875D : =$7                 vcFeedback set $07
(1)  405/   B875D : (MACRO)             	smpsVcUnusedBits    $00
(1)  405/   B875D : =$0                 vcUnusedBits set $00
(1)  405/   B875D : =$0                 vcD1R1Unk set 0
(1)  405/   B875D : =$0                 vcD1R2Unk set 0
(1)  405/   B875D : =$0                 vcD1R3Unk set 0
(1)  405/   B875D : =$0                 vcD1R4Unk set 0
(1)  406/   B875D : (MACRO)             	smpsVcDetune        $03, $05, $00, $03
(1)  406/   B875D : =$3                 vcDT1 set $03
(1)  406/   B875D : =$5                 vcDT2 set $05
(1)  406/   B875D : =$0                 vcDT3 set $00
(1)  406/   B875D : =$3                 vcDT4 set $03
(1)  407/   B875D : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $02
(1)  407/   B875D : =$1                 vcCF1 set $01
(1)  407/   B875D : =$2                 vcCF2 set $02
(1)  407/   B875D : =$1                 vcCF3 set $01
(1)  407/   B875D : =$2                 vcCF4 set $02
(1)  408/   B875D : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  408/   B875D : =$0                 vcRS1 set $00
(1)  408/   B875D : =$0                 vcRS2 set $00
(1)  408/   B875D : =$0                 vcRS3 set $00
(1)  408/   B875D : =$0                 vcRS4 set $00
(1)  409/   B875D : (MACRO)             	smpsVcAttackRate    $18, $1F, $1F, $1F
(1)  409/   B875D : =$18                vcAR1 set $18
(1)  409/   B875D : =$1F                vcAR2 set $1F
(1)  409/   B875D : =$1F                vcAR3 set $1F
(1)  409/   B875D : =$1F                vcAR4 set $1F
(1)  410/   B875D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  410/   B875D : =$0                 vcAM1 set $00<<5
(1)  410/   B875D : =$0                 vcAM2 set $00<<5
(1)  410/   B875D : =$0                 vcAM3 set $00<<5
(1)  410/   B875D : =$0                 vcAM4 set $00<<5
(1)  411/   B875D : (MACRO)             	smpsVcDecayRate1    $00, $00, $1F, $01
(1)  411/   B875D : =$0                 vcD1R1 set $00
(1)  411/   B875D : =$0                 vcD1R2 set $00
(1)  411/   B875D : =$1F                vcD1R3 set $1F
(1)  411/   B875D : =$1                 vcD1R4 set $01
(1)  412/   B875D : (MACRO)             	smpsVcDecayRate2    $00, $00, $0F, $00
(1)  412/   B875D : =$0                 vcD2R1 set $00
(1)  412/   B875D : =$0                 vcD2R2 set $00
(1)  412/   B875D : =$F                 vcD2R3 set $0F
(1)  412/   B875D : =$0                 vcD2R4 set $00
(1)  413/   B875D : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $05
(1)  413/   B875D : =$1                 vcDL1 set $01
(1)  413/   B875D : =$0                 vcDL2 set $00
(1)  413/   B875D : =$0                 vcDL3 set $00
(1)  413/   B875D : =$5                 vcDL4 set $05
(1)  414/   B875D : (MACRO)             	smpsVcReleaseRate   $0A, $03, $0F, $0A
(1)  414/   B875D : =$A                 vcRR1 set $0A
(1)  414/   B875D : =$3                 vcRR2 set $03
(1)  414/   B875D : =$F                 vcRR3 set $0F
(1)  414/   B875D : =$A                 vcRR4 set $0A
(1)  415/   B875D : (MACRO)             	smpsVcTotalLevel    $00, $4F, $30, $3B
(1)  415/   B875D : =$0                 vcTL1 set $00
(1)  415/   B875D : =$4F                vcTL2 set $4F
(1)  415/   B875D : =$30                vcTL3 set $30
(1)  415/   B875D : =$3B                vcTL4 set $3B
(1)  415/   B875D : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  415/   B875E :                     ;   0     1     2     3     4     5     6     7
(1)  415/   B875E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  415/   B875E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  415/   B875E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  415/   B875E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  415/   B875E : =$80                vcTLMask1 set $80
(1)  415/   B875E :                     
(1)  415/   B875E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  415/   B875E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  415/   B875E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  415/   B875E : =$80                vcTLMask1 set $80
(1)  415/   B875E : =$0                 vcTL1 set vcTL1&$7F
(1)  415/   B875E : =$4F                vcTL2 set vcTL2&$7F
(1)  415/   B875E : =$30                vcTL3 set vcTL3&$7F
(1)  415/   B875E : =$3B                vcTL4 set vcTL4&$7F
(1)  415/   B875E :                     
(1)  415/   B875E : 3201 5231                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  415/   B8762 : 1F1F 1F18                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  415/   B8766 : 011F 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  415/   B876A : 000F 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  415/   B876E : 5A0F 031A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  415/   B8772 : 3B30 4F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  416/   B8776 :                     
(1)  417/   B8776 :                     ;	Voice $05
(1)  418/   B8776 :                     ;	$32
(1)  419/   B8776 :                     ;	$71, $0D, $33, $01, 	$5F, $99, $5F, $94, 	$05, $05, $05, $07
(1)  420/   B8776 :                     ;	$02, $02, $02, $02, 	$11, $11, $11, $77, 	$23, $2D, $26, $80
(1)  421/   B8776 : (MACRO)             	smpsVcAlgorithm     $02
(1)  421/   B8776 : =$2                 vcAlgorithm set $02
(1)  422/   B8776 : (MACRO)             	smpsVcFeedback      $06
(1)  422/   B8776 : =$6                 vcFeedback set $06
(1)  423/   B8776 : (MACRO)             	smpsVcUnusedBits    $00
(1)  423/   B8776 : =$0                 vcUnusedBits set $00
(1)  423/   B8776 : =$0                 vcD1R1Unk set 0
(1)  423/   B8776 : =$0                 vcD1R2Unk set 0
(1)  423/   B8776 : =$0                 vcD1R3Unk set 0
(1)  423/   B8776 : =$0                 vcD1R4Unk set 0
(1)  424/   B8776 : (MACRO)             	smpsVcDetune        $00, $03, $00, $07
(1)  424/   B8776 : =$0                 vcDT1 set $00
(1)  424/   B8776 : =$3                 vcDT2 set $03
(1)  424/   B8776 : =$0                 vcDT3 set $00
(1)  424/   B8776 : =$7                 vcDT4 set $07
(1)  425/   B8776 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $0D, $01
(1)  425/   B8776 : =$1                 vcCF1 set $01
(1)  425/   B8776 : =$3                 vcCF2 set $03
(1)  425/   B8776 : =$D                 vcCF3 set $0D
(1)  425/   B8776 : =$1                 vcCF4 set $01
(1)  426/   B8776 : (MACRO)             	smpsVcRateScale     $02, $01, $02, $01
(1)  426/   B8776 : =$2                 vcRS1 set $02
(1)  426/   B8776 : =$1                 vcRS2 set $01
(1)  426/   B8776 : =$2                 vcRS3 set $02
(1)  426/   B8776 : =$1                 vcRS4 set $01
(1)  427/   B8776 : (MACRO)             	smpsVcAttackRate    $14, $1F, $19, $1F
(1)  427/   B8776 : =$14                vcAR1 set $14
(1)  427/   B8776 : =$1F                vcAR2 set $1F
(1)  427/   B8776 : =$19                vcAR3 set $19
(1)  427/   B8776 : =$1F                vcAR4 set $1F
(1)  428/   B8776 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  428/   B8776 : =$0                 vcAM1 set $00<<5
(1)  428/   B8776 : =$0                 vcAM2 set $00<<5
(1)  428/   B8776 : =$0                 vcAM3 set $00<<5
(1)  428/   B8776 : =$0                 vcAM4 set $00<<5
(1)  429/   B8776 : (MACRO)             	smpsVcDecayRate1    $07, $05, $05, $05
(1)  429/   B8776 : =$7                 vcD1R1 set $07
(1)  429/   B8776 : =$5                 vcD1R2 set $05
(1)  429/   B8776 : =$5                 vcD1R3 set $05
(1)  429/   B8776 : =$5                 vcD1R4 set $05
(1)  430/   B8776 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)  430/   B8776 : =$2                 vcD2R1 set $02
(1)  430/   B8776 : =$2                 vcD2R2 set $02
(1)  430/   B8776 : =$2                 vcD2R3 set $02
(1)  430/   B8776 : =$2                 vcD2R4 set $02
(1)  431/   B8776 : (MACRO)             	smpsVcDecayLevel    $07, $01, $01, $01
(1)  431/   B8776 : =$7                 vcDL1 set $07
(1)  431/   B8776 : =$1                 vcDL2 set $01
(1)  431/   B8776 : =$1                 vcDL3 set $01
(1)  431/   B8776 : =$1                 vcDL4 set $01
(1)  432/   B8776 : (MACRO)             	smpsVcReleaseRate   $07, $01, $01, $01
(1)  432/   B8776 : =$7                 vcRR1 set $07
(1)  432/   B8776 : =$1                 vcRR2 set $01
(1)  432/   B8776 : =$1                 vcRR3 set $01
(1)  432/   B8776 : =$1                 vcRR4 set $01
(1)  433/   B8776 : (MACRO)             	smpsVcTotalLevel    $80, $26, $2D, $23
(1)  433/   B8776 : =$80                vcTL1 set $80
(1)  433/   B8776 : =$26                vcTL2 set $26
(1)  433/   B8776 : =$2D                vcTL3 set $2D
(1)  433/   B8776 : =$23                vcTL4 set $23
(1)  433/   B8776 : 32                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  433/   B8777 :                     ;   0     1     2     3     4     5     6     7
(1)  433/   B8777 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  433/   B8777 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  433/   B8777 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  433/   B8777 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  433/   B8777 : =$80                vcTLMask1 set $80
(1)  433/   B8777 :                     
(1)  433/   B8777 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  433/   B8777 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  433/   B8777 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  433/   B8777 : =$80                vcTLMask1 set $80
(1)  433/   B8777 : =$0                 vcTL1 set vcTL1&$7F
(1)  433/   B8777 : =$26                vcTL2 set vcTL2&$7F
(1)  433/   B8777 : =$2D                vcTL3 set vcTL3&$7F
(1)  433/   B8777 : =$23                vcTL4 set vcTL4&$7F
(1)  433/   B8777 :                     
(1)  433/   B8777 : 710D 3301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  433/   B877B : 5F99 5F94                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  433/   B877F : 0505 0507                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  433/   B8783 : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  433/   B8787 : 1111 1177                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  433/   B878B : 232D 2680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  434/   B878F :                     
(1)  435/   B878F :                     
   41/   B878F :                        Music_08:	include		"music-improved/88 - CNZ 2P.asm"
(1)    1/   B878F :                     CNZ_2p_Header:
(1)    2/   B878F : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B878F :                     
(1)    2/   B878F : =$2                 SourceDriver set 2
(1)    2/   B878F :                     
(1)    2/   B878F : =$0                 SourceSMPS2ASM set 0
(1)    2/   B878F :                     
(1)    2/   B878F : =$B878F             songStart set *
(1)    2/   B878F :                     
(1)    2/   B878F :                     
(1)    3/   B878F : (MACRO)             	smpsHeaderVoice     CNZ_2p_Voices
(1)    3/   B878F : 978C                                dc.w    z80_ptr(CNZ_2P_VOICES)
(1)    4/   B8791 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B8791 : 0603                        dc.b    $06,$03
(1)    5/   B8793 : (MACRO)             	smpsHeaderTempo     $01, $BD
(1)    5/   B8793 : 01                          dc.b    $01
(1)    5/   B8794 :  (MACRO-2)                  convertMainTempoMod $BD
(1)    5/   B8794 : 43                                          dc.b    s2TempotoS3($BD)
(1)    6/   B8795 :                     
(1)    7/   B8795 : (MACRO)             	smpsHeaderDAC       CNZ_2p_DAC
(1)    7/   B8795 :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_DAC
(1)    7/   B8795 : 578C                                dc.w    z80_ptr(CNZ_2P_DAC)
(1)    7/   B8797 : 0000                                dc.w    $00
(1)    8/   B8799 : (MACRO)             	smpsHeaderFM        CNZ_2p_FM1,	$F4, $06
(1)    8/   B8799 :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_FM1
(1)    8/   B8799 : BF87                                dc.w    z80_ptr(CNZ_2P_FM1)
(1)    8/   B879B : F406                        dc.b    $F4,$06
(1)    9/   B879D : (MACRO)             	smpsHeaderFM        CNZ_2p_FM2,	$F4, $0D
(1)    9/   B879D :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_FM2
(1)    9/   B879D : B488                                dc.w    z80_ptr(CNZ_2P_FM2)
(1)    9/   B879F : F40D                        dc.b    $F4,$0D
(1)   10/   B87A1 : (MACRO)             	smpsHeaderFM        CNZ_2p_FM3,	$F4, $10
(1)   10/   B87A1 :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_FM3
(1)   10/   B87A1 : 6F89                                dc.w    z80_ptr(CNZ_2P_FM3)
(1)   10/   B87A3 : F410                        dc.b    $F4,$10
(1)   11/   B87A5 : (MACRO)             	smpsHeaderFM        CNZ_2p_FM4,	$E8, $0E
(1)   11/   B87A5 :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_FM4
(1)   11/   B87A5 : CB89                                dc.w    z80_ptr(CNZ_2P_FM4)
(1)   11/   B87A7 : E80E                        dc.b    $E8,$0E
(1)   12/   B87A9 : (MACRO)             	smpsHeaderFM        CNZ_2p_FM5,	$F4, $10
(1)   12/   B87A9 :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_FM5
(1)   12/   B87A9 : 908A                                dc.w    z80_ptr(CNZ_2P_FM5)
(1)   12/   B87AB : F410                        dc.b    $F4,$10
(1)   13/   B87AD : (MACRO)             	smpsHeaderPSG       CNZ_2p_PSG1,	$D0, $04, $00, $00
(1)   13/   B87AD :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_PSG1
(1)   13/   B87AD : 848B                                dc.w    z80_ptr(CNZ_2P_PSG1)
(1)   13/   B87AF :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   B87AF : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   B87B0 : 0400 00                     dc.b    $04,$00,$00
(1)   14/   B87B3 : (MACRO)             	smpsHeaderPSG       CNZ_2p_PSG2,	$D0, $04, $00, $00
(1)   14/   B87B3 :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_PSG2
(1)   14/   B87B3 : EC8B                                dc.w    z80_ptr(CNZ_2P_PSG2)
(1)   14/   B87B5 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   14/   B87B5 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   14/   B87B6 : 0400 00                     dc.b    $04,$00,$00
(1)   15/   B87B9 : (MACRO)             	smpsHeaderPSG       CNZ_2p_PSG3,	$C4, $05, $00, $00
(1)   15/   B87B9 :  (MACRO-2)                  CheckedChannelPointer CNZ_2P_PSG3
(1)   15/   B87B9 : 548C                                dc.w    z80_ptr(CNZ_2P_PSG3)
(1)   15/   B87BB :  (MACRO-2)                  PSGPitchConvert $C4
(1)   15/   B87BB : D0                                  dc.b    ($C4+psgdelta)&$FF
(1)   15/   B87BC : 0500 00                     dc.b    $05,$00,$00
(1)   16/   B87BF :                     
(1)   17/   B87BF :                     ; FM1 Data
(1)   18/   B87BF :                     CNZ_2p_FM1:
(1)   19/   B87BF : (MACRO)             	smpsSetvoice        $00
(1)   19/   B87BF :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   B87BF : EF00                                dc.b    $EF,$00
(1)   20/   B87C1 : AE06 80AE 80B0 80B0 	dc.b	nA3, $06, nRst, nA3, nRst, nB3, nRst, nB3, nRst, nC4, nRst, nC4
            B87C9 : 80B1 80B1         
(1)   21/   B87CD : 80B2 80B2 80        	dc.b	nRst, nCs4, nRst, nCs4, nRst
(1)   22/   B87D2 :                     
(1)   23/   B87D2 :                     CNZ_2p_Loop0B:
(1)   24/   B87D2 : A709 AE03 B306 80B1 	dc.b	nD3, $09, nA3, $03, nD4, $06, nRst, nC4, nRst, nB3, $0C, nC4
            B87DA : 80B0 0CB1         
(1)   25/   B87DE : 0680 2AAC 0680 AC80 	dc.b	$06, nRst, $2A, nG3, $06, nRst, nG3, nRst, nA3, nRst, nA3, nRst
            B87E6 : AE80 AE80         
(1)   26/   B87EA : AF80 2A             	dc.b	nBb3, nRst, $2A
(1)   27/   B87ED : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop0B
(1)   27/   B87ED : F7                          dc.b    $F7
(1)   27/   B87EE : 0002                        dc.b    $00,$02
(1)   27/   B87F0 : D287                                dc.w    z80_ptr(CNZ_2P_LOOP0B)
(1)   28/   B87F2 : (MACRO)             	smpsCall            CNZ_2p_Call0C
(1)   28/   B87F2 : F8                          dc.b    $F8
(1)   28/   B87F3 : 8D88                                dc.w    z80_ptr(CNZ_2P_CALL0C)
(1)   29/   B87F5 : A70C B306 80B1 80B3 	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
            B87FD : 0CA7 0380         
(1)   30/   B8801 : 06A7 03B3 0CB1 B3AC 	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, nG3, $06, nRst, nG3, $0C
            B8809 : 0680 AC0C         
(1)   31/   B880D : AE06 80AE 0CAF 0680 	dc.b	nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $2A
            B8815 : 2A               
(1)   32/   B8816 : (MACRO)             	smpsCall            CNZ_2p_Call0C
(1)   32/   B8816 : F8                          dc.b    $F8
(1)   32/   B8817 : 8D88                                dc.w    z80_ptr(CNZ_2P_CALL0C)
(1)   33/   B8819 : A70C B306 80B1 80B3 	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
            B8821 : 0CA7 0380         
(1)   34/   B8825 : 06A7 03B3 0CB1 B309 	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, $09, nA4, $03, nG3, $06
            B882D : BA03 AC06         
(1)   35/   B8831 : 80AC 0CAE 0680 AE0C 	dc.b	nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $2A
            B8839 : AF06 802A         
(1)   36/   B883D : (MACRO)             	smpsAlterVol        $FE
(1)   36/   B883D : E6FE                        dc.b    $E6,$FE
(1)   37/   B883F :                     
(1)   38/   B883F :                     CNZ_2p_Loop0C:
(1)   39/   B883F : B106 80B1 80B0 80AF 	dc.b	nC4, $06, nRst, nC4, nRst, nB3, nRst, nBb3, nRst, nA3, nRst, nA3
            B8847 : 80AE 80AE         
(1)   40/   B884B : 80B5 80AE 80B3 80AE 	dc.b	nRst, nE4, nRst, nA3, nRst, nD4, nRst, nA3, nRst, nC4, nRst, nCs4
            B8853 : 80B1 80B2         
(1)   41/   B8857 : 80B3 09B3 03AE 0680 	dc.b	nRst, nD4, $09, nD4, $03, nA3, $06, nRst, nC4, nRst, nD4, nRst
            B885F : B180 B380         
(1)   42/   B8863 : (MACRO)             	smpsLoop            $00, $03, CNZ_2p_Loop0C
(1)   42/   B8863 : F7                          dc.b    $F7
(1)   42/   B8864 : 0003                        dc.b    $00,$03
(1)   42/   B8866 : 3F88                                dc.w    z80_ptr(CNZ_2P_LOOP0C)
(1)   43/   B8868 : B106 80B1 80B0 80AF 	dc.b	nC4, $06, nRst, nC4, nRst, nB3, nRst, nBb3, nRst, nA3, nRst, nA3
            B8870 : 80AE 80AE         
(1)   44/   B8874 : 80B5 80AE 8080 09A7 	dc.b	nRst, nE4, nRst, nA3, nRst, nRst, $09, nD3, $03, nD4, $0C, nD3
            B887C : 03B3 0CA7         
(1)   45/   B8880 : B306 8003 A706 802D 	dc.b	nD4, $06, nRst, $03, nD3, $06, nRst, $2D
(1)   46/   B8888 : (MACRO)             	smpsAlterVol        $02
(1)   46/   B8888 : E602                        dc.b    $E6,$02
(1)   47/   B888A : (MACRO)             	smpsJump            CNZ_2p_Loop0B
(1)   47/   B888A : F6                          dc.b    $F6
(1)   47/   B888B : D287                                dc.w    z80_ptr(CNZ_2P_LOOP0B)
(1)   48/   B888D :                     
(1)   49/   B888D :                     CNZ_2p_Call0C:
(1)   50/   B888D : A70C B306 80B1 80B3 	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
            B8895 : 0CA7 0380         
(1)   51/   B8899 : 06A7 03B3 0CB1 B309 	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, $09, nA3, $03, nG3, $06
            B88A1 : AE03 AC06         
(1)   52/   B88A5 : 80AC 0CAE 0680 AE0C 	dc.b	nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $27
            B88AD : AF06 8027         
(1)   53/   B88B1 : B103                	dc.b	nC4, $03
(1)   54/   B88B3 : (MACRO)             	smpsReturn
(1)   54/   B88B3 : F9                                  dc.b    $F9
(1)   55/   B88B4 :                     
(1)   56/   B88B4 :                     ; FM2 Data
(1)   57/   B88B4 :                     CNZ_2p_FM2:
(1)   58/   B88B4 : (MACRO)             	smpsSetvoice        $01
(1)   58/   B88B4 :  (MACRO-2)                  smpsFMvoice $01
(1)   58/   B88B4 : EF01                                dc.b    $EF,$01
(1)   59/   B88B6 : (MACRO)             	smpsCall            CNZ_2p_Call05
(1)   59/   B88B6 : F8                          dc.b    $F8
(1)   59/   B88B7 : 4A89                                dc.w    z80_ptr(CNZ_2P_CALL05)
(1)   60/   B88B9 :                     
(1)   61/   B88B9 :                     CNZ_2p_Loop08:
(1)   62/   B88B9 : (MACRO)             	smpsCall            CNZ_2p_Call06
(1)   62/   B88B9 : F8                          dc.b    $F8
(1)   62/   B88BA : 5C89                                dc.w    z80_ptr(CNZ_2P_CALL06)
(1)   63/   B88BC : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop08
(1)   63/   B88BC : F7                          dc.b    $F7
(1)   63/   B88BD : 0002                        dc.b    $00,$02
(1)   63/   B88BF : B988                                dc.w    z80_ptr(CNZ_2P_LOOP08)
(1)   64/   B88C1 : (MACRO)             	smpsSetvoice        $03
(1)   64/   B88C1 :  (MACRO-2)                  smpsFMvoice $03
(1)   64/   B88C1 : EF03                                dc.b    $EF,$03
(1)   65/   B88C3 : (MACRO)             	smpsAlterNote       $02
(1)   65/   B88C3 :  (MACRO-2)                  smpsDetune      $02
(1)   65/   B88C3 : E102                        dc.b    $E1,$02
(1)   66/   B88C5 : (MACRO)             	smpsAlterVol        $07
(1)   66/   B88C5 : E607                        dc.b    $E6,$07
(1)   67/   B88C7 :                     
(1)   68/   B88C7 :                     CNZ_2p_Loop09:
(1)   69/   B88C7 : (MACRO)             	smpsCall            CNZ_2p_Call07
(1)   69/   B88C7 : F8                          dc.b    $F8
(1)   69/   B88C8 : 668A                                dc.w    z80_ptr(CNZ_2P_CALL07)
(1)   70/   B88CA : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop09
(1)   70/   B88CA : F7                          dc.b    $F7
(1)   70/   B88CB : 0002                        dc.b    $00,$02
(1)   70/   B88CD : C788                                dc.w    z80_ptr(CNZ_2P_LOOP09)
(1)   71/   B88CF :                     
(1)   72/   B88CF :                     CNZ_2p_Loop0A:
(1)   73/   B88CF : (MACRO)             	smpsCall            CNZ_2p_Call08
(1)   73/   B88CF : F8                          dc.b    $F8
(1)   73/   B88D0 : 7B8A                                dc.w    z80_ptr(CNZ_2P_CALL08)
(1)   74/   B88D2 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop0A
(1)   74/   B88D2 : F7                          dc.b    $F7
(1)   74/   B88D3 : 0002                        dc.b    $00,$02
(1)   74/   B88D5 : CF88                                dc.w    z80_ptr(CNZ_2P_LOOP0A)
(1)   75/   B88D7 : (MACRO)             	smpsSetvoice        $01
(1)   75/   B88D7 :  (MACRO-2)                  smpsFMvoice $01
(1)   75/   B88D7 : EF01                                dc.b    $EF,$01
(1)   76/   B88D9 : (MACRO)             	smpsAlterNote       $00
(1)   76/   B88D9 :  (MACRO-2)                  smpsDetune      $00
(1)   76/   B88D9 : E100                        dc.b    $E1,$00
(1)   77/   B88DB : (MACRO)             	smpsAlterVol        $F9
(1)   77/   B88DB : E6F9                        dc.b    $E6,$F9
(1)   78/   B88DD : (MACRO)             	smpsCall            CNZ_2p_Call0A
(1)   78/   B88DD : F8                          dc.b    $F8
(1)   78/   B88DE : E688                                dc.w    z80_ptr(CNZ_2P_CALL0A)
(1)   79/   B88E0 : (MACRO)             	smpsCall            CNZ_2p_Call0B
(1)   79/   B88E0 : F8                          dc.b    $F8
(1)   79/   B88E1 : 1789                                dc.w    z80_ptr(CNZ_2P_CALL0B)
(1)   80/   B88E3 : (MACRO)             	smpsJump            CNZ_2p_Loop08
(1)   80/   B88E3 : F6                          dc.b    $F6
(1)   80/   B88E4 : B988                                dc.w    z80_ptr(CNZ_2P_LOOP08)
(1)   81/   B88E6 :                     
(1)   82/   B88E6 :                     CNZ_2p_Call0A:
(1)   83/   B88E6 : 8009 D00F CD06 80C9 	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
            B88EE : 80CE 18CD         
(1)   84/   B88F2 : CB06 80CB 80C9 09CB 	dc.b	nD6, $06, nRst, nD6, nRst, nC6, $09, nD6, $06, nRst, nA5, $33
            B88FA : 0680 C633         
(1)   85/   B88FE : 8009 D00F CD06 80C9 	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
            B8906 : 80CE 18CD         
(1)   86/   B890A : 800C CB06 80CD 09CB 	dc.b	nRst, $0C, nD6, $06, nRst, nE6, $09, nD6, $06, nRst, nF6, $33
            B8912 : 0680 CE33         
(1)   87/   B8916 : (MACRO)             	smpsReturn
(1)   87/   B8916 : F9                                  dc.b    $F9
(1)   88/   B8917 :                     
(1)   89/   B8917 :                     CNZ_2p_Call0B:
(1)   90/   B8917 : 8009 D00F CD06 80C9 	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
            B891F : 80CE 18CD         
(1)   91/   B8923 : CB06 80CB 80C9 09CB 	dc.b	nD6, $06, nRst, nD6, nRst, nC6, $09, nD6, $06, nRst, nA5, $33
            B892B : 0680 C633         
(1)   92/   B892F : 8009 D00F CD06 80C9 	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
            B8937 : 80CE 18CD         
(1)   93/   B893B : 8009 CB0F CE06 80CD 	dc.b	nRst, $09, nD6, $0F, nF6, $06, nRst, nE6, nRst, $03, nD6, $06
            B8943 : 8003 CB06         
(1)   94/   B8947 : 802D                	dc.b	nRst, $2D
(1)   95/   B8949 : (MACRO)             	smpsReturn
(1)   95/   B8949 : F9                                  dc.b    $F9
(1)   96/   B894A :                     
(1)   97/   B894A :                     CNZ_2p_Call05:
(1)   98/   B894A : D206 8012 D215 CD03 	dc.b	nA6, $06, nRst, $12, nA6, $15, nE6, $03, nA6, $06, nRst, nG6
            B8952 : D206 80D0         
(1)   99/   B8956 : 80CE 80CD 80        	dc.b	nRst, nF6, nRst, nE6, nRst
(1)  100/   B895B : (MACRO)             	smpsReturn
(1)  100/   B895B : F9                                  dc.b    $F9
(1)  101/   B895C :                     
(1)  102/   B895C :                     CNZ_2p_Call06:
(1)  103/   B895C : C909 CB06 80CB 80CB 	dc.b	nC6, $09, nD6, $06, nRst, nD6, nRst, nD6, $03, nC6, $0C, nF6
            B8964 : 03C9 0CCE         
(1)  104/   B8968 : 0680 CB24 8060      	dc.b	$06, nRst, nD6, $24, nRst, $60
(1)  105/   B896E : (MACRO)             	smpsReturn
(1)  105/   B896E : F9                                  dc.b    $F9
(1)  106/   B896F :                     
(1)  107/   B896F :                     ; FM3 Data
(1)  108/   B896F :                     CNZ_2p_FM3:
(1)  109/   B896F : (MACRO)             	smpsSetvoice        $02
(1)  109/   B896F :  (MACRO-2)                  smpsFMvoice $02
(1)  109/   B896F : EF02                                dc.b    $EF,$02
(1)  110/   B8971 : 8060                	dc.b	nRst, $60
(1)  111/   B8973 :                     
(1)  112/   B8973 :                     CNZ_2p_Loop06:
(1)  113/   B8973 : 8060 803C CE09 CD03 	dc.b	nRst, $60, nRst, $3C, nF6, $09, nE6, $03, nF6, $09, nE6, $03
            B897B : CE09 CD03         
(1)  114/   B897F : CE06 80             	dc.b	nF6, $06, nRst
(1)  115/   B8982 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop06
(1)  115/   B8982 : F7                          dc.b    $F7
(1)  115/   B8983 : 0002                        dc.b    $00,$02
(1)  115/   B8985 : 7389                                dc.w    z80_ptr(CNZ_2P_LOOP06)
(1)  116/   B8987 : (MACRO)             	smpsAlterVol        $04
(1)  116/   B8987 : E604                        dc.b    $E6,$04
(1)  117/   B8989 : (MACRO)             	smpsPan             panRight, $00
(1)  117/   B8989 : =$0                 panNone set $00
(1)  117/   B8989 : =$40                panRight set $40
(1)  117/   B8989 : =$80                panLeft set $80
(1)  117/   B8989 : =$C0                panCentre set $C0
(1)  117/   B8989 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  117/   B8989 : E040                        dc.b $E0,PANRIGHT+$00
(1)  118/   B898B :                     
(1)  119/   B898B :                     CNZ_2p_Loop07:
(1)  120/   B898B : 8060 8030 C606 80C2 	dc.b	nRst, $60, nRst, $30, nA5, $06, nRst, nF5, $0C, nG5, $09, nF5
            B8993 : 0CC4 09C2         
(1)  121/   B8997 : 03BF 0C80 6080 30C6 	dc.b	$03, nD5, $0C, nRst, $60, nRst, $30, nA5, $06, nRst, nF5, $0C
            B899F : 0680 C20C         
(1)  122/   B89A3 : C409 C603 800C      	dc.b	nG5, $09, nA5, $03, nRst, $0C
(1)  123/   B89A9 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop07
(1)  123/   B89A9 : F7                          dc.b    $F7
(1)  123/   B89AA : 0002                        dc.b    $00,$02
(1)  123/   B89AC : 8B89                                dc.w    z80_ptr(CNZ_2P_LOOP07)
(1)  124/   B89AE : (MACRO)             	smpsAlterVol        $FC
(1)  124/   B89AE : E6FC                        dc.b    $E6,$FC
(1)  125/   B89B0 : (MACRO)             	smpsPan             panCenter, $00
(1)  125/   B89B0 : =$0                 panNone set $00
(1)  125/   B89B0 : =$40                panRight set $40
(1)  125/   B89B0 : =$80                panLeft set $80
(1)  125/   B89B0 : =$C0                panCentre set $C0
(1)  125/   B89B0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  125/   B89B0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  126/   B89B2 : (MACRO)             	smpsSetvoice        $01
(1)  126/   B89B2 :  (MACRO-2)                  smpsFMvoice $01
(1)  126/   B89B2 : EF01                                dc.b    $EF,$01
(1)  127/   B89B4 : (MACRO)             	smpsAlterNote       $02
(1)  127/   B89B4 :  (MACRO-2)                  smpsDetune      $02
(1)  127/   B89B4 : E102                        dc.b    $E1,$02
(1)  128/   B89B6 : (MACRO)             	smpsAlterPitch      $F4
(1)  128/   B89B6 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  128/   B89B6 : FBF4                                dc.b    $FB,$F4
(1)  129/   B89B8 : (MACRO)             	smpsAlterVol        $FF
(1)  129/   B89B8 : E6FF                        dc.b    $E6,$FF
(1)  130/   B89BA : (MACRO)             	smpsCall            CNZ_2p_Call0A
(1)  130/   B89BA : F8                          dc.b    $F8
(1)  130/   B89BB : E688                                dc.w    z80_ptr(CNZ_2P_CALL0A)
(1)  131/   B89BD : (MACRO)             	smpsCall            CNZ_2p_Call0B
(1)  131/   B89BD : F8                          dc.b    $F8
(1)  131/   B89BE : 1789                                dc.w    z80_ptr(CNZ_2P_CALL0B)
(1)  132/   B89C0 : (MACRO)             	smpsSetvoice        $02
(1)  132/   B89C0 :  (MACRO-2)                  smpsFMvoice $02
(1)  132/   B89C0 : EF02                                dc.b    $EF,$02
(1)  133/   B89C2 : (MACRO)             	smpsAlterNote       $00
(1)  133/   B89C2 :  (MACRO-2)                  smpsDetune      $00
(1)  133/   B89C2 : E100                        dc.b    $E1,$00
(1)  134/   B89C4 : (MACRO)             	smpsAlterPitch      $0C
(1)  134/   B89C4 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  134/   B89C4 : FB0C                                dc.b    $FB,$0C
(1)  135/   B89C6 : (MACRO)             	smpsAlterVol        $01
(1)  135/   B89C6 : E601                        dc.b    $E6,$01
(1)  136/   B89C8 : (MACRO)             	smpsJump            CNZ_2p_Loop06
(1)  136/   B89C8 : F6                          dc.b    $F6
(1)  136/   B89C9 : 7389                                dc.w    z80_ptr(CNZ_2P_LOOP06)
(1)  137/   B89CB :                     
(1)  138/   B89CB :                     ; FM4 Data
(1)  139/   B89CB :                     CNZ_2p_FM4:
(1)  140/   B89CB : (MACRO)             	smpsSetvoice        $01
(1)  140/   B89CB :  (MACRO-2)                  smpsFMvoice $01
(1)  140/   B89CB : EF01                                dc.b    $EF,$01
(1)  141/   B89CD : (MACRO)             	smpsAlterNote       $02
(1)  141/   B89CD :  (MACRO-2)                  smpsDetune      $02
(1)  141/   B89CD : E102                        dc.b    $E1,$02
(1)  142/   B89CF : (MACRO)             	smpsCall            CNZ_2p_Call05
(1)  142/   B89CF : F8                          dc.b    $F8
(1)  142/   B89D0 : 4A89                                dc.w    z80_ptr(CNZ_2P_CALL05)
(1)  143/   B89D2 :                     
(1)  144/   B89D2 :                     CNZ_2p_Loop03:
(1)  145/   B89D2 : (MACRO)             	smpsCall            CNZ_2p_Call06
(1)  145/   B89D2 : F8                          dc.b    $F8
(1)  145/   B89D3 : 5C89                                dc.w    z80_ptr(CNZ_2P_CALL06)
(1)  146/   B89D5 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop03
(1)  146/   B89D5 : F7                          dc.b    $F7
(1)  146/   B89D6 : 0002                        dc.b    $00,$02
(1)  146/   B89D8 : D289                                dc.w    z80_ptr(CNZ_2P_LOOP03)
(1)  147/   B89DA : (MACRO)             	smpsSetvoice        $03
(1)  147/   B89DA :  (MACRO-2)                  smpsFMvoice $03
(1)  147/   B89DA : EF03                                dc.b    $EF,$03
(1)  148/   B89DC : (MACRO)             	smpsAlterNote       $00
(1)  148/   B89DC :  (MACRO-2)                  smpsDetune      $00
(1)  148/   B89DC : E100                        dc.b    $E1,$00
(1)  149/   B89DE : (MACRO)             	smpsAlterPitch      $0C
(1)  149/   B89DE :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  149/   B89DE : FB0C                                dc.b    $FB,$0C
(1)  150/   B89E0 : (MACRO)             	smpsAlterVol        $04
(1)  150/   B89E0 : E604                        dc.b    $E6,$04
(1)  151/   B89E2 : (MACRO)             	smpsModSet          $01, $01, $03, $03
(1)  151/   B89E2 : F0                          dc.b    $F0
(1)  151/   B89E3 : 0201 0304                           dc.b    $01+1,$01,$03,(($03+1) * $01) & $FF
(1)  151/   B89E7 :                             ;dc.b   $01,$03,$03
(1)  152/   B89E7 :                     
(1)  153/   B89E7 :                     CNZ_2p_Loop04:
(1)  154/   B89E7 : (MACRO)             	smpsCall            CNZ_2p_Call07
(1)  154/   B89E7 : F8                          dc.b    $F8
(1)  154/   B89E8 : 668A                                dc.w    z80_ptr(CNZ_2P_CALL07)
(1)  155/   B89EA : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop04
(1)  155/   B89EA : F7                          dc.b    $F7
(1)  155/   B89EB : 0002                        dc.b    $00,$02
(1)  155/   B89ED : E789                                dc.w    z80_ptr(CNZ_2P_LOOP04)
(1)  156/   B89EF :                     
(1)  157/   B89EF :                     CNZ_2p_Loop05:
(1)  158/   B89EF : (MACRO)             	smpsCall            CNZ_2p_Call08
(1)  158/   B89EF : F8                          dc.b    $F8
(1)  158/   B89F0 : 7B8A                                dc.w    z80_ptr(CNZ_2P_CALL08)
(1)  159/   B89F2 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop05
(1)  159/   B89F2 : F7                          dc.b    $F7
(1)  159/   B89F3 : 0002                        dc.b    $00,$02
(1)  159/   B89F5 : EF89                                dc.w    z80_ptr(CNZ_2P_LOOP05)
(1)  160/   B89F7 : (MACRO)             	smpsSetvoice        $01
(1)  160/   B89F7 :  (MACRO-2)                  smpsFMvoice $01
(1)  160/   B89F7 : EF01                                dc.b    $EF,$01
(1)  161/   B89F9 : (MACRO)             	smpsCall            CNZ_2p_Call09
(1)  161/   B89F9 : F8                          dc.b    $F8
(1)  161/   B89FA : 3E8A                                dc.w    z80_ptr(CNZ_2P_CALL09)
(1)  162/   B89FC : C003 E7C1 2DC0 03E7 	dc.b	nEb5, $03, smpsNoAttack, nE5, $2D, nEb5, $03, smpsNoAttack, nE5, $2D
            B8A04 : C12D               
(1)  163/   B8A06 : (MACRO)             	smpsPan             panLeft, $00
(1)  163/   B8A06 : =$0                 panNone set $00
(1)  163/   B8A06 : =$40                panRight set $40
(1)  163/   B8A06 : =$80                panLeft set $80
(1)  163/   B8A06 : =$C0                panCentre set $C0
(1)  163/   B8A06 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  163/   B8A06 : E080                        dc.b $E0,PANLEFT+$00
(1)  164/   B8A08 : 800C C206 80C4 09C2 	dc.b	nRst, $0C, nF5, $06, nRst, nG5, $09, nF5, $06, nRst, nA5, $2D
            B8A10 : 0680 C62D         
(1)  165/   B8A14 : 8006                	dc.b	nRst, $06
(1)  166/   B8A16 : (MACRO)             	smpsCall            CNZ_2p_Call09
(1)  166/   B8A16 : F8                          dc.b    $F8
(1)  166/   B8A17 : 3E8A                                dc.w    z80_ptr(CNZ_2P_CALL09)
(1)  167/   B8A19 : C003 E7C1 2DC0 03E7 	dc.b	nEb5, $03, smpsNoAttack, nE5, $2D, nEb5, $03, smpsNoAttack, nE5, $2D
            B8A21 : C12D               
(1)  168/   B8A23 : (MACRO)             	smpsPan             panLeft, $00
(1)  168/   B8A23 : =$0                 panNone set $00
(1)  168/   B8A23 : =$40                panRight set $40
(1)  168/   B8A23 : =$80                panLeft set $80
(1)  168/   B8A23 : =$C0                panCentre set $C0
(1)  168/   B8A23 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  168/   B8A23 : E080                        dc.b $E0,PANLEFT+$00
(1)  169/   B8A25 : 8009 C280 06C2 0980 	dc.b	nRst, $09, nF5, nRst, $06, nF5, $09, nRst, $0C, nF5, $06, nRst
            B8A2D : 0CC2 0680         
(1)  170/   B8A31 : 2D                  	dc.b	$2D
(1)  171/   B8A32 : (MACRO)             	smpsAlterNote       $02
(1)  171/   B8A32 :  (MACRO-2)                  smpsDetune      $02
(1)  171/   B8A32 : E102                        dc.b    $E1,$02
(1)  172/   B8A34 : (MACRO)             	smpsAlterPitch      $F4
(1)  172/   B8A34 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  172/   B8A34 : FBF4                                dc.b    $FB,$F4
(1)  173/   B8A36 : (MACRO)             	smpsAlterVol        $FC
(1)  173/   B8A36 : E6FC                        dc.b    $E6,$FC
(1)  174/   B8A38 : (MACRO)             	smpsPan             panCenter, $00
(1)  174/   B8A38 : =$0                 panNone set $00
(1)  174/   B8A38 : =$40                panRight set $40
(1)  174/   B8A38 : =$80                panLeft set $80
(1)  174/   B8A38 : =$C0                panCentre set $C0
(1)  174/   B8A38 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  174/   B8A38 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  175/   B8A3A : (MACRO)             	smpsModOff
(1)  175/   B8A3A : FA                                  dc.b    $FA
(1)  176/   B8A3B : (MACRO)             	smpsJump            CNZ_2p_Loop03
(1)  176/   B8A3B : F6                          dc.b    $F6
(1)  176/   B8A3C : D289                                dc.w    z80_ptr(CNZ_2P_LOOP03)
(1)  177/   B8A3E :                     
(1)  178/   B8A3E :                     CNZ_2p_Call09:
(1)  179/   B8A3E : (MACRO)             	smpsPan             panCenter, $00
(1)  179/   B8A3E : =$0                 panNone set $00
(1)  179/   B8A3E : =$40                panRight set $40
(1)  179/   B8A3E : =$80                panLeft set $80
(1)  179/   B8A3E : =$C0                panCentre set $C0
(1)  179/   B8A3E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  179/   B8A3E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  180/   B8A40 : C003 E7C1 2DC0 03E7 	dc.b	nEb5, $03, smpsNoAttack, nE5, $2D, nEb5, $03, smpsNoAttack, nE5, $2D
            B8A48 : C12D               
(1)  181/   B8A4A : (MACRO)             	smpsPan             panLeft, $00
(1)  181/   B8A4A : =$0                 panNone set $00
(1)  181/   B8A4A : =$40                panRight set $40
(1)  181/   B8A4A : =$80                panLeft set $80
(1)  181/   B8A4A : =$C0                panCentre set $C0
(1)  181/   B8A4A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  181/   B8A4A : E080                        dc.b $E0,PANLEFT+$00
(1)  182/   B8A4C : C206 80C2 80C1 09C2 	dc.b	nF5, $06, nRst, nF5, nRst, nE5, $09, nF5, $06, nRst, nF5, $0C
            B8A54 : 0680 C20C         
(1)  183/   B8A58 : C103 C206 80C1 09C2 	dc.b	nE5, $03, nF5, $06, nRst, nE5, $09, nF5, $06, nRst, $09
            B8A60 : 0680 09            
(1)  184/   B8A63 : (MACRO)             	smpsPan             panCenter, $00
(1)  184/   B8A63 : =$0                 panNone set $00
(1)  184/   B8A63 : =$40                panRight set $40
(1)  184/   B8A63 : =$80                panLeft set $80
(1)  184/   B8A63 : =$C0                panCentre set $C0
(1)  184/   B8A63 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  184/   B8A63 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  185/   B8A65 : (MACRO)             	smpsReturn
(1)  185/   B8A65 : F9                                  dc.b    $F9
(1)  186/   B8A66 :                     
(1)  187/   B8A66 :                     CNZ_2p_Call07:
(1)  188/   B8A66 : CE15 CD03 CB06 80C9 	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
            B8A6E : 0CCD 0680         
(1)  189/   B8A72 : C90C CB06 8012 8060 	dc.b	nC6, $0C, nD6, $06, nRst, $12, nRst, $60
(1)  190/   B8A7A : (MACRO)             	smpsReturn
(1)  190/   B8A7A : F9                                  dc.b    $F9
(1)  191/   B8A7B :                     
(1)  192/   B8A7B :                     CNZ_2p_Call08:
(1)  193/   B8A7B : D215 D003 CE06 80CD 	dc.b	nA6, $15, nG6, $03, nF6, $06, nRst, nE6, $0C, nG6, $06, nRst
            B8A83 : 0CD0 0680         
(1)  194/   B8A87 : CD0C CE06 8012 8060 	dc.b	nE6, $0C, nF6, $06, nRst, $12, nRst, $60
(1)  195/   B8A8F : (MACRO)             	smpsReturn
(1)  195/   B8A8F : F9                                  dc.b    $F9
(1)  196/   B8A90 :                     
(1)  197/   B8A90 :                     ; FM5 Data
(1)  198/   B8A90 :                     CNZ_2p_FM5:
(1)  199/   B8A90 : (MACRO)             	smpsSetvoice        $02
(1)  199/   B8A90 :  (MACRO-2)                  smpsFMvoice $02
(1)  199/   B8A90 : EF02                                dc.b    $EF,$02
(1)  200/   B8A92 : 8060                	dc.b	nRst, $60
(1)  201/   B8A94 : (MACRO)             	smpsPan             panRight, $00
(1)  201/   B8A94 : =$0                 panNone set $00
(1)  201/   B8A94 : =$40                panRight set $40
(1)  201/   B8A94 : =$80                panLeft set $80
(1)  201/   B8A94 : =$C0                panCentre set $C0
(1)  201/   B8A94 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  201/   B8A94 : E040                        dc.b $E0,PANRIGHT+$00
(1)  202/   B8A96 :                     
(1)  203/   B8A96 :                     CNZ_2p_Loop02:
(1)  204/   B8A96 : 8060 803C CB09 C903 	dc.b	nRst, $60, nRst, $3C, nD6, $09, nC6, $03, nD6, $09, nC6, $03
            B8A9E : CB09 C903         
(1)  205/   B8AA2 : CB06 80             	dc.b	nD6, $06, nRst
(1)  206/   B8AA5 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop02
(1)  206/   B8AA5 : F7                          dc.b    $F7
(1)  206/   B8AA6 : 0002                        dc.b    $00,$02
(1)  206/   B8AA8 : 968A                                dc.w    z80_ptr(CNZ_2P_LOOP02)
(1)  207/   B8AAA : (MACRO)             	smpsSetvoice        $04
(1)  207/   B8AAA :  (MACRO-2)                  smpsFMvoice $04
(1)  207/   B8AAA : EF04                                dc.b    $EF,$04
(1)  208/   B8AAC : (MACRO)             	smpsPan             panCenter, $00
(1)  208/   B8AAC : =$0                 panNone set $00
(1)  208/   B8AAC : =$40                panRight set $40
(1)  208/   B8AAC : =$80                panLeft set $80
(1)  208/   B8AAC : =$C0                panCentre set $C0
(1)  208/   B8AAC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  208/   B8AAC : E0C0                        dc.b $E0,PANCENTER+$00
(1)  209/   B8AAE : 8060                	dc.b	nRst, $60
(1)  210/   B8AB0 : (MACRO)             	smpsCall            CNZ_2p_Call01
(1)  210/   B8AB0 : F8                          dc.b    $F8
(1)  210/   B8AB1 : 518B                                dc.w    z80_ptr(CNZ_2P_CALL01)
(1)  211/   B8AB3 : 8060                	dc.b	nRst, $60
(1)  212/   B8AB5 : (MACRO)             	smpsCall            CNZ_2p_Call02
(1)  212/   B8AB5 : F8                          dc.b    $F8
(1)  212/   B8AB6 : 758B                                dc.w    z80_ptr(CNZ_2P_CALL02)
(1)  213/   B8AB8 : (MACRO)             	smpsSetvoice        $03
(1)  213/   B8AB8 :  (MACRO-2)                  smpsFMvoice $03
(1)  213/   B8AB8 : EF03                                dc.b    $EF,$03
(1)  214/   B8ABA : (MACRO)             	smpsAlterVol        $02
(1)  214/   B8ABA : E602                        dc.b    $E6,$02
(1)  215/   B8ABC : (MACRO)             	smpsPan             panLeft, $00
(1)  215/   B8ABC : =$0                 panNone set $00
(1)  215/   B8ABC : =$40                panRight set $40
(1)  215/   B8ABC : =$80                panLeft set $80
(1)  215/   B8ABC : =$C0                panCentre set $C0
(1)  215/   B8ABC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  215/   B8ABC : E080                        dc.b $E0,PANLEFT+$00
(1)  216/   B8ABE : (MACRO)             	smpsModSet          $01, $01, $03, $03
(1)  216/   B8ABE : F0                          dc.b    $F0
(1)  216/   B8ABF : 0201 0304                           dc.b    $01+1,$01,$03,(($03+1) * $01) & $FF
(1)  216/   B8AC3 :                             ;dc.b   $01,$03,$03
(1)  217/   B8AC3 : (MACRO)             	smpsCall            CNZ_2p_Call03
(1)  217/   B8AC3 : F8                          dc.b    $F8
(1)  217/   B8AC4 : 628B                                dc.w    z80_ptr(CNZ_2P_CALL03)
(1)  218/   B8AC6 : (MACRO)             	smpsSetvoice        $04
(1)  218/   B8AC6 :  (MACRO-2)                  smpsFMvoice $04
(1)  218/   B8AC6 : EF04                                dc.b    $EF,$04
(1)  219/   B8AC8 : (MACRO)             	smpsAlterVol        $FC
(1)  219/   B8AC8 : E6FC                        dc.b    $E6,$FC
(1)  220/   B8ACA : (MACRO)             	smpsPan             panCenter, $00
(1)  220/   B8ACA : =$0                 panNone set $00
(1)  220/   B8ACA : =$40                panRight set $40
(1)  220/   B8ACA : =$80                panLeft set $80
(1)  220/   B8ACA : =$C0                panCentre set $C0
(1)  220/   B8ACA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  220/   B8ACA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  221/   B8ACC : (MACRO)             	smpsCall            CNZ_2p_Call01
(1)  221/   B8ACC : F8                          dc.b    $F8
(1)  221/   B8ACD : 518B                                dc.w    z80_ptr(CNZ_2P_CALL01)
(1)  222/   B8ACF : (MACRO)             	smpsSetvoice        $03
(1)  222/   B8ACF :  (MACRO-2)                  smpsFMvoice $03
(1)  222/   B8ACF : EF03                                dc.b    $EF,$03
(1)  223/   B8AD1 : (MACRO)             	smpsPan             panLeft, $00
(1)  223/   B8AD1 : =$0                 panNone set $00
(1)  223/   B8AD1 : =$40                panRight set $40
(1)  223/   B8AD1 : =$80                panLeft set $80
(1)  223/   B8AD1 : =$C0                panCentre set $C0
(1)  223/   B8AD1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  223/   B8AD1 : E080                        dc.b $E0,PANLEFT+$00
(1)  224/   B8AD3 : (MACRO)             	smpsAlterVol        $04
(1)  224/   B8AD3 : E604                        dc.b    $E6,$04
(1)  225/   B8AD5 : (MACRO)             	smpsCall            CNZ_2p_Call03
(1)  225/   B8AD5 : F8                          dc.b    $F8
(1)  225/   B8AD6 : 628B                                dc.w    z80_ptr(CNZ_2P_CALL03)
(1)  226/   B8AD8 : (MACRO)             	smpsSetvoice        $04
(1)  226/   B8AD8 :  (MACRO-2)                  smpsFMvoice $04
(1)  226/   B8AD8 : EF04                                dc.b    $EF,$04
(1)  227/   B8ADA : (MACRO)             	smpsAlterVol        $FC
(1)  227/   B8ADA : E6FC                        dc.b    $E6,$FC
(1)  228/   B8ADC : (MACRO)             	smpsPan             panCenter, $00
(1)  228/   B8ADC : =$0                 panNone set $00
(1)  228/   B8ADC : =$40                panRight set $40
(1)  228/   B8ADC : =$80                panLeft set $80
(1)  228/   B8ADC : =$C0                panCentre set $C0
(1)  228/   B8ADC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  228/   B8ADC : E0C0                        dc.b $E0,PANCENTER+$00
(1)  229/   B8ADE : (MACRO)             	smpsCall            CNZ_2p_Call02
(1)  229/   B8ADE : F8                          dc.b    $F8
(1)  229/   B8ADF : 758B                                dc.w    z80_ptr(CNZ_2P_CALL02)
(1)  230/   B8AE1 : (MACRO)             	smpsAlterVol        $04
(1)  230/   B8AE1 : E604                        dc.b    $E6,$04
(1)  231/   B8AE3 : (MACRO)             	smpsSetvoice        $01
(1)  231/   B8AE3 :  (MACRO-2)                  smpsFMvoice $01
(1)  231/   B8AE3 : EF01                                dc.b    $EF,$01
(1)  232/   B8AE5 : (MACRO)             	smpsCall            CNZ_2p_Call04
(1)  232/   B8AE5 : F8                          dc.b    $F8
(1)  232/   B8AE6 : 298B                                dc.w    z80_ptr(CNZ_2P_CALL04)
(1)  233/   B8AE8 : BC03 E7BD 2DBD 03E7 	dc.b	nB4, $03, smpsNoAttack, nC5, $2D, nC5, $03, smpsNoAttack, nCs5, $2D
            B8AF0 : BE2D               
(1)  234/   B8AF2 : (MACRO)             	smpsPan             panRight, $00
(1)  234/   B8AF2 : =$0                 panNone set $00
(1)  234/   B8AF2 : =$40                panRight set $40
(1)  234/   B8AF2 : =$80                panLeft set $80
(1)  234/   B8AF2 : =$C0                panCentre set $C0
(1)  234/   B8AF2 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  234/   B8AF2 : E040                        dc.b $E0,PANRIGHT+$00
(1)  235/   B8AF4 : 800C BF06 80C1 09BF 	dc.b	nRst, $0C, nD5, $06, nRst, nE5, $09, nD5, $03, nRst, $09, nF5
            B8AFC : 0380 09C2         
(1)  236/   B8B00 : 2D80 06             	dc.b	$2D, nRst, $06
(1)  237/   B8B03 : (MACRO)             	smpsCall            CNZ_2p_Call04
(1)  237/   B8B03 : F8                          dc.b    $F8
(1)  237/   B8B04 : 298B                                dc.w    z80_ptr(CNZ_2P_CALL04)
(1)  238/   B8B06 : BC03 E7BD 2DBD 03E7 	dc.b	nB4, $03, smpsNoAttack, nC5, $2D, nC5, $03, smpsNoAttack, nCs5, $2D
            B8B0E : BE2D               
(1)  239/   B8B10 : (MACRO)             	smpsPan             panRight, $00
(1)  239/   B8B10 : =$0                 panNone set $00
(1)  239/   B8B10 : =$40                panRight set $40
(1)  239/   B8B10 : =$80                panLeft set $80
(1)  239/   B8B10 : =$C0                panCentre set $C0
(1)  239/   B8B10 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  239/   B8B10 : E040                        dc.b $E0,PANRIGHT+$00
(1)  240/   B8B12 : 8009 BF80 06BF 0980 	dc.b	nRst, $09, nD5, nRst, $06, nD5, $09, nRst, $0C, nD5, $06, nRst
            B8B1A : 0CBF 0680         
(1)  241/   B8B1E : 2D                  	dc.b	$2D
(1)  242/   B8B1F : (MACRO)             	smpsSetvoice        $02
(1)  242/   B8B1F :  (MACRO-2)                  smpsFMvoice $02
(1)  242/   B8B1F : EF02                                dc.b    $EF,$02
(1)  243/   B8B21 : (MACRO)             	smpsPan             panRight, $00
(1)  243/   B8B21 : =$0                 panNone set $00
(1)  243/   B8B21 : =$40                panRight set $40
(1)  243/   B8B21 : =$80                panLeft set $80
(1)  243/   B8B21 : =$C0                panCentre set $C0
(1)  243/   B8B21 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  243/   B8B21 : E040                        dc.b $E0,PANRIGHT+$00
(1)  244/   B8B23 : (MACRO)             	smpsAlterVol        $FE
(1)  244/   B8B23 : E6FE                        dc.b    $E6,$FE
(1)  245/   B8B25 : (MACRO)             	smpsModOff
(1)  245/   B8B25 : FA                                  dc.b    $FA
(1)  246/   B8B26 : (MACRO)             	smpsJump            CNZ_2p_Loop02
(1)  246/   B8B26 : F6                          dc.b    $F6
(1)  246/   B8B27 : 968A                                dc.w    z80_ptr(CNZ_2P_LOOP02)
(1)  247/   B8B29 :                     
(1)  248/   B8B29 :                     CNZ_2p_Call04:
(1)  249/   B8B29 : (MACRO)             	smpsPan             panCenter, $00
(1)  249/   B8B29 : =$0                 panNone set $00
(1)  249/   B8B29 : =$40                panRight set $40
(1)  249/   B8B29 : =$80                panLeft set $80
(1)  249/   B8B29 : =$C0                panCentre set $C0
(1)  249/   B8B29 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  249/   B8B29 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  250/   B8B2B : BC03 E7BD 2DBD 03E7 	dc.b	nB4, $03, smpsNoAttack, nC5, $2D, nC5, $03, smpsNoAttack, nCs5, $2D
            B8B33 : BE2D               
(1)  251/   B8B35 : (MACRO)             	smpsPan             panRight, $00
(1)  251/   B8B35 : =$0                 panNone set $00
(1)  251/   B8B35 : =$40                panRight set $40
(1)  251/   B8B35 : =$80                panLeft set $80
(1)  251/   B8B35 : =$C0                panCentre set $C0
(1)  251/   B8B35 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  251/   B8B35 : E040                        dc.b $E0,PANRIGHT+$00
(1)  252/   B8B37 : BF06 80BF 80BD 09BF 	dc.b	nD5, $06, nRst, nD5, nRst, nC5, $09, nD5, $06, nRst, nD5, $0C
            B8B3F : 0680 BF0C         
(1)  253/   B8B43 : BD03 BF06 80BD 09BF 	dc.b	nC5, $03, nD5, $06, nRst, nC5, $09, nD5, $06, nRst, $09
            B8B4B : 0680 09            
(1)  254/   B8B4E : (MACRO)             	smpsPan             panCenter, $00
(1)  254/   B8B4E : =$0                 panNone set $00
(1)  254/   B8B4E : =$40                panRight set $40
(1)  254/   B8B4E : =$80                panLeft set $80
(1)  254/   B8B4E : =$C0                panCentre set $C0
(1)  254/   B8B4E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  254/   B8B4E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  255/   B8B50 : (MACRO)             	smpsReturn
(1)  255/   B8B50 : F9                                  dc.b    $F9
(1)  256/   B8B51 :                     
(1)  257/   B8B51 :                     CNZ_2p_Call01:
(1)  258/   B8B51 : AC06 80AC 0CAE 0680 	dc.b	nG3, $06, nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06
            B8B59 : AE0C AF06         
(1)  259/   B8B5D : 8027 B103           	dc.b	nRst, $27, nC4, $03
(1)  260/   B8B61 : (MACRO)             	smpsReturn
(1)  260/   B8B61 : F9                                  dc.b    $F9
(1)  261/   B8B62 :                     
(1)  262/   B8B62 :                     CNZ_2p_Call03:
(1)  263/   B8B62 : CE15 CD03 CB06 80C9 	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
            B8B6A : 0CCD 0680         
(1)  264/   B8B6E : C90C CB06 8012      	dc.b	nC6, $0C, nD6, $06, nRst, $12
(1)  265/   B8B74 : (MACRO)             	smpsReturn
(1)  265/   B8B74 : F9                                  dc.b    $F9
(1)  266/   B8B75 :                     
(1)  267/   B8B75 :                     CNZ_2p_Call02:
(1)  268/   B8B75 : AC06 80AC 0CAE 0680 	dc.b	nG3, $06, nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06
            B8B7D : AE0C AF06         
(1)  269/   B8B81 : 802A                	dc.b	nRst, $2A
(1)  270/   B8B83 : (MACRO)             	smpsReturn
(1)  270/   B8B83 : F9                                  dc.b    $F9
(1)  271/   B8B84 :                     
(1)  272/   B8B84 :                     ; PSG1 Data
(1)  273/   B8B84 :                     CNZ_2p_PSG1:
(1)  274/   B8B84 : 8060                	dc.b	nRst, $60
(1)  275/   B8B86 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  275/   B8B86 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  275/   B8B86 : E806                                dc.b    $E8,$06
(1)  276/   B8B88 :                     
(1)  277/   B8B88 :                     CNZ_2p_Loop10:
(1)  278/   B8B88 : 800C C280 C280 C280 	dc.b	nRst, $0C, nF5, nRst, nF5, nRst, nF5, nRst, nF5, nRst, nD5, nRst
            B8B90 : C280 BF80         
(1)  279/   B8B94 : BF80 BF80 BF        	dc.b	nD5, nRst, nD5, nRst, nD5
(1)  280/   B8B99 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop10
(1)  280/   B8B99 : F7                          dc.b    $F7
(1)  280/   B8B9A : 0002                        dc.b    $00,$02
(1)  280/   B8B9C : 888B                                dc.w    z80_ptr(CNZ_2P_LOOP10)
(1)  281/   B8B9E : 8060 800C C280 C280 	dc.b	nRst, $60, nRst, $0C, nF5, nRst, nF5, nRst, nF5, nRst, nF5, nRst
            B8BA6 : C280 C280         
(1)  282/   B8BAA : 6080 0CC2 80C2 80C2 	dc.b	$60, nRst, $0C, nF5, nRst, nF5, nRst, nF5, $04, nRst, nF5, nRst
            B8BB2 : 0480 C280         
(1)  283/   B8BB6 : 0CC2                	dc.b	$0C, nF5
(1)  284/   B8BB8 :                     
(1)  285/   B8BB8 :                     CNZ_2p_Loop11:
(1)  286/   B8BB8 : 8060 800C C280 C280 	dc.b	nRst, $60, nRst, $0C, nF5, nRst, nF5, nRst, nF5, nRst, nF5
            B8BC0 : C280 C2            
(1)  287/   B8BC3 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop11
(1)  287/   B8BC3 : F7                          dc.b    $F7
(1)  287/   B8BC4 : 0002                        dc.b    $00,$02
(1)  287/   B8BC6 : B88B                                dc.w    z80_ptr(CNZ_2P_LOOP11)
(1)  288/   B8BC8 :                     
(1)  289/   B8BC8 :                     CNZ_2p_Loop12:
(1)  290/   B8BC8 : 800C C980 C980 CA80 	dc.b	nRst, $0C, nC6, nRst, nC6, nRst, nCs6, nRst, nCs6, nRst, nD6, nRst
            B8BD0 : CA80 CB80         
(1)  291/   B8BD4 : CB80 CB80 CB        	dc.b	nD6, nRst, nD6, nRst, nD6
(1)  292/   B8BD9 : (MACRO)             	smpsLoop            $00, $03, CNZ_2p_Loop12
(1)  292/   B8BD9 : F7                          dc.b    $F7
(1)  292/   B8BDA : 0003                        dc.b    $00,$03
(1)  292/   B8BDC : C88B                                dc.w    z80_ptr(CNZ_2P_LOOP12)
(1)  293/   B8BDE : 800C C980 C980 CA80 	dc.b	nRst, $0C, nC6, nRst, nC6, nRst, nCs6, nRst, nCs6, nRst, $60
            B8BE6 : CA80 60            
(1)  294/   B8BE9 : (MACRO)             	smpsJump            CNZ_2p_Loop10
(1)  294/   B8BE9 : F6                          dc.b    $F6
(1)  294/   B8BEA : 888B                                dc.w    z80_ptr(CNZ_2P_LOOP10)
(1)  295/   B8BEC :                     
(1)  296/   B8BEC :                     ; PSG2 Data
(1)  297/   B8BEC :                     CNZ_2p_PSG2:
(1)  298/   B8BEC : 8060                	dc.b	nRst, $60
(1)  299/   B8BEE : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  299/   B8BEE :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  299/   B8BEE : E806                                dc.b    $E8,$06
(1)  300/   B8BF0 :                     
(1)  301/   B8BF0 :                     CNZ_2p_Loop0D:
(1)  302/   B8BF0 : 800C BF80 BF80 BF80 	dc.b	nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5, nRst, nBb4, nRst
            B8BF8 : BF80 BB80         
(1)  303/   B8BFC : BB80 BB80 BB        	dc.b	nBb4, nRst, nBb4, nRst, nBb4
(1)  304/   B8C01 : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop0D
(1)  304/   B8C01 : F7                          dc.b    $F7
(1)  304/   B8C02 : 0002                        dc.b    $00,$02
(1)  304/   B8C04 : F08B                                dc.w    z80_ptr(CNZ_2P_LOOP0D)
(1)  305/   B8C06 : 8060 800C BF80 BF80 	dc.b	nRst, $60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5, nRst
            B8C0E : BF80 BF80         
(1)  306/   B8C12 : 6080 0CBF 80BF 80BF 	dc.b	$60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, $04, nRst, nD5, nRst
            B8C1A : 0480 BF80         
(1)  307/   B8C1E : 0CBF                	dc.b	$0C, nD5
(1)  308/   B8C20 :                     
(1)  309/   B8C20 :                     CNZ_2p_Loop0E:
(1)  310/   B8C20 : 8060 800C BF80 BF80 	dc.b	nRst, $60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5
            B8C28 : BF80 BF            
(1)  311/   B8C2B : (MACRO)             	smpsLoop            $00, $02, CNZ_2p_Loop0E
(1)  311/   B8C2B : F7                          dc.b    $F7
(1)  311/   B8C2C : 0002                        dc.b    $00,$02
(1)  311/   B8C2E : 208C                                dc.w    z80_ptr(CNZ_2P_LOOP0E)
(1)  312/   B8C30 :                     
(1)  313/   B8C30 :                     CNZ_2p_Loop0F:
(1)  314/   B8C30 : 800C C680 C680 C680 	dc.b	nRst, $0C, nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst
            B8C38 : C680 C680         
(1)  315/   B8C3C : C680 C680 C6        	dc.b	nA5, nRst, nA5, nRst, nA5
(1)  316/   B8C41 : (MACRO)             	smpsLoop            $00, $03, CNZ_2p_Loop0F
(1)  316/   B8C41 : F7                          dc.b    $F7
(1)  316/   B8C42 : 0003                        dc.b    $00,$03
(1)  316/   B8C44 : 308C                                dc.w    z80_ptr(CNZ_2P_LOOP0F)
(1)  317/   B8C46 : 800C C680 C680 C680 	dc.b	nRst, $0C, nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst, $60
            B8C4E : C680 60            
(1)  318/   B8C51 : (MACRO)             	smpsJump            CNZ_2p_Loop0D
(1)  318/   B8C51 : F6                          dc.b    $F6
(1)  318/   B8C52 : F08B                                dc.w    z80_ptr(CNZ_2P_LOOP0D)
(1)  319/   B8C54 :                     
(1)  320/   B8C54 :                     ; PSG3 Data
(1)  321/   B8C54 :                     CNZ_2p_PSG3:
(1)  322/   B8C54 : (MACRO)             	smpsJump            CNZ_2p_PSG1
(1)  322/   B8C54 : F6                          dc.b    $F6
(1)  322/   B8C55 : 848B                                dc.w    z80_ptr(CNZ_2P_PSG1)
(1)  323/   B8C57 :                     
(1)  324/   B8C57 :                     ; DAC Data
(1)  325/   B8C57 :                     CNZ_2p_DAC:
(1)  326/   B8C57 : 800C 8281 8282 8282 	dc.b	nRst, $0C, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare
            B8C5F : 82               
(1)  327/   B8C60 :                     
(1)  328/   B8C60 :                     CNZ_2p_Loop00:
(1)  329/   B8C60 : (MACRO)             	smpsCall            CNZ_2p_Call00
(1)  329/   B8C60 : F8                          dc.b    $F8
(1)  329/   B8C61 : 8C8C                                dc.w    z80_ptr(CNZ_2P_CALL00)
(1)  330/   B8C63 : (MACRO)             	smpsLoop            $00, $03, CNZ_2p_Loop00
(1)  330/   B8C63 : F7                          dc.b    $F7
(1)  330/   B8C64 : 0003                        dc.b    $00,$03
(1)  330/   B8C66 : 608C                                dc.w    z80_ptr(CNZ_2P_LOOP00)
(1)  331/   B8C68 : 8109 8103 0C82 8181 	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $15, dSnare, $03, $18
            B8C70 : 1582 0318         
(1)  332/   B8C74 :                     
(1)  333/   B8C74 :                     CNZ_2p_Loop01:
(1)  334/   B8C74 : (MACRO)             	smpsCall            CNZ_2p_Call00
(1)  334/   B8C74 : F8                          dc.b    $F8
(1)  334/   B8C75 : 8C8C                                dc.w    z80_ptr(CNZ_2P_CALL00)
(1)  335/   B8C77 : (MACRO)             	smpsLoop            $00, $0F, CNZ_2p_Loop01
(1)  335/   B8C77 : F7                          dc.b    $F7
(1)  335/   B8C78 : 000F                        dc.b    $00,$0F
(1)  335/   B8C7A : 748C                                dc.w    z80_ptr(CNZ_2P_LOOP01)
(1)  336/   B8C7C : 8009 810F 820C 8109 	dc.b	nRst, $09, dKick, $0F, dSnare, $0C, dKick, $09, dSnare, $1B, $0C, $09
            B8C84 : 821B 0C09         
(1)  337/   B8C88 : 03                  	dc.b	$03
(1)  338/   B8C89 : (MACRO)             	smpsJump            CNZ_2p_Loop00
(1)  338/   B8C89 : F6                          dc.b    $F6
(1)  338/   B8C8A : 608C                                dc.w    z80_ptr(CNZ_2P_LOOP00)
(1)  339/   B8C8C :                     
(1)  340/   B8C8C :                     CNZ_2p_Call00:
(1)  341/   B8C8C : 8109 8103 0C82 8181 	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $18, dSnare
            B8C94 : 1882               
(1)  342/   B8C96 : (MACRO)             	smpsReturn
(1)  342/   B8C96 : F9                                  dc.b    $F9
(1)  343/   B8C97 :                     
(1)  344/   B8C97 :                     CNZ_2p_Voices:
(1)  345/   B8C97 :                     ;	Voice $00
(1)  346/   B8C97 :                     ;	$08
(1)  347/   B8C97 :                     ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  348/   B8C97 :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $80
(1)  349/   B8C97 : (MACRO)             	smpsVcAlgorithm     $00
(1)  349/   B8C97 : =$0                 vcAlgorithm set $00
(1)  350/   B8C97 : (MACRO)             	smpsVcFeedback      $01
(1)  350/   B8C97 : =$1                 vcFeedback set $01
(1)  351/   B8C97 : (MACRO)             	smpsVcUnusedBits    $00
(1)  351/   B8C97 : =$0                 vcUnusedBits set $00
(1)  351/   B8C97 : =$0                 vcD1R1Unk set 0
(1)  351/   B8C97 : =$0                 vcD1R2Unk set 0
(1)  351/   B8C97 : =$0                 vcD1R3Unk set 0
(1)  351/   B8C97 : =$0                 vcD1R4Unk set 0
(1)  352/   B8C97 : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  352/   B8C97 : =$0                 vcDT1 set $00
(1)  352/   B8C97 : =$3                 vcDT2 set $03
(1)  352/   B8C97 : =$7                 vcDT3 set $07
(1)  352/   B8C97 : =$0                 vcDT4 set $00
(1)  353/   B8C97 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)  353/   B8C97 : =$0                 vcCF1 set $00
(1)  353/   B8C97 : =$0                 vcCF2 set $00
(1)  353/   B8C97 : =$0                 vcCF3 set $00
(1)  353/   B8C97 : =$9                 vcCF4 set $09
(1)  354/   B8C97 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  354/   B8C97 : =$1                 vcRS1 set $01
(1)  354/   B8C97 : =$1                 vcRS2 set $01
(1)  354/   B8C97 : =$0                 vcRS3 set $00
(1)  354/   B8C97 : =$0                 vcRS4 set $00
(1)  355/   B8C97 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  355/   B8C97 : =$1F                vcAR1 set $1F
(1)  355/   B8C97 : =$1F                vcAR2 set $1F
(1)  355/   B8C97 : =$1F                vcAR3 set $1F
(1)  355/   B8C97 : =$1F                vcAR4 set $1F
(1)  356/   B8C97 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  356/   B8C97 : =$0                 vcAM1 set $00<<5
(1)  356/   B8C97 : =$0                 vcAM2 set $00<<5
(1)  356/   B8C97 : =$0                 vcAM3 set $00<<5
(1)  356/   B8C97 : =$0                 vcAM4 set $00<<5
(1)  357/   B8C97 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  357/   B8C97 : =$A                 vcD1R1 set $0A
(1)  357/   B8C97 : =$A                 vcD1R2 set $0A
(1)  357/   B8C97 : =$E                 vcD1R3 set $0E
(1)  357/   B8C97 : =$12                vcD1R4 set $12
(1)  358/   B8C97 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  358/   B8C97 : =$3                 vcD2R1 set $03
(1)  358/   B8C97 : =$4                 vcD2R2 set $04
(1)  358/   B8C97 : =$4                 vcD2R3 set $04
(1)  358/   B8C97 : =$0                 vcD2R4 set $00
(1)  359/   B8C97 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  359/   B8C97 : =$2                 vcDL1 set $02
(1)  359/   B8C97 : =$2                 vcDL2 set $02
(1)  359/   B8C97 : =$2                 vcDL3 set $02
(1)  359/   B8C97 : =$2                 vcDL4 set $02
(1)  360/   B8C97 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  360/   B8C97 : =$F                 vcRR1 set $0F
(1)  360/   B8C97 : =$F                 vcRR2 set $0F
(1)  360/   B8C97 : =$F                 vcRR3 set $0F
(1)  360/   B8C97 : =$F                 vcRR4 set $0F
(1)  361/   B8C97 : (MACRO)             	smpsVcTotalLevel    $00, $13, $30, $25
(1)  361/   B8C97 : =$0                 vcTL1 set $00
(1)  361/   B8C97 : =$13                vcTL2 set $13
(1)  361/   B8C97 : =$30                vcTL3 set $30
(1)  361/   B8C97 : =$25                vcTL4 set $25
(1)  361/   B8C97 : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  361/   B8C98 :                     ;   0     1     2     3     4     5     6     7
(1)  361/   B8C98 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  361/   B8C98 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  361/   B8C98 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  361/   B8C98 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  361/   B8C98 : =$80                vcTLMask1 set $80
(1)  361/   B8C98 :                     
(1)  361/   B8C98 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  361/   B8C98 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  361/   B8C98 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  361/   B8C98 : =$80                vcTLMask1 set $80
(1)  361/   B8C98 : =$0                 vcTL1 set vcTL1&$7F
(1)  361/   B8C98 : =$13                vcTL2 set vcTL2&$7F
(1)  361/   B8C98 : =$30                vcTL3 set vcTL3&$7F
(1)  361/   B8C98 : =$25                vcTL4 set vcTL4&$7F
(1)  361/   B8C98 :                     
(1)  361/   B8C98 : 0970 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  361/   B8C9C : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  361/   B8CA0 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  361/   B8CA4 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  361/   B8CA8 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  361/   B8CAC : 2530 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  362/   B8CB0 :                     
(1)  363/   B8CB0 :                     ;	Voice $01
(1)  364/   B8CB0 :                     ;	$3A
(1)  365/   B8CB0 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  366/   B8CB0 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1)  367/   B8CB0 : (MACRO)             	smpsVcAlgorithm     $02
(1)  367/   B8CB0 : =$2                 vcAlgorithm set $02
(1)  368/   B8CB0 : (MACRO)             	smpsVcFeedback      $07
(1)  368/   B8CB0 : =$7                 vcFeedback set $07
(1)  369/   B8CB0 : (MACRO)             	smpsVcUnusedBits    $00
(1)  369/   B8CB0 : =$0                 vcUnusedBits set $00
(1)  369/   B8CB0 : =$0                 vcD1R1Unk set 0
(1)  369/   B8CB0 : =$0                 vcD1R2Unk set 0
(1)  369/   B8CB0 : =$0                 vcD1R3Unk set 0
(1)  369/   B8CB0 : =$0                 vcD1R4Unk set 0
(1)  370/   B8CB0 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  370/   B8CB0 : =$0                 vcDT1 set $00
(1)  370/   B8CB0 : =$0                 vcDT2 set $00
(1)  370/   B8CB0 : =$0                 vcDT3 set $00
(1)  370/   B8CB0 : =$0                 vcDT4 set $00
(1)  371/   B8CB0 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  371/   B8CB0 : =$1                 vcCF1 set $01
(1)  371/   B8CB0 : =$1                 vcCF2 set $01
(1)  371/   B8CB0 : =$7                 vcCF3 set $07
(1)  371/   B8CB0 : =$1                 vcCF4 set $01
(1)  372/   B8CB0 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  372/   B8CB0 : =$1                 vcRS1 set $01
(1)  372/   B8CB0 : =$2                 vcRS2 set $02
(1)  372/   B8CB0 : =$2                 vcRS3 set $02
(1)  372/   B8CB0 : =$2                 vcRS4 set $02
(1)  373/   B8CB0 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  373/   B8CB0 : =$13                vcAR1 set $13
(1)  373/   B8CB0 : =$D                 vcAR2 set $0D
(1)  373/   B8CB0 : =$E                 vcAR3 set $0E
(1)  373/   B8CB0 : =$E                 vcAR4 set $0E
(1)  374/   B8CB0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  374/   B8CB0 : =$0                 vcAM1 set $00<<5
(1)  374/   B8CB0 : =$0                 vcAM2 set $00<<5
(1)  374/   B8CB0 : =$0                 vcAM3 set $00<<5
(1)  374/   B8CB0 : =$0                 vcAM4 set $00<<5
(1)  375/   B8CB0 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  375/   B8CB0 : =$3                 vcD1R1 set $03
(1)  375/   B8CB0 : =$E                 vcD1R2 set $0E
(1)  375/   B8CB0 : =$E                 vcD1R3 set $0E
(1)  375/   B8CB0 : =$E                 vcD1R4 set $0E
(1)  376/   B8CB0 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  376/   B8CB0 : =$0                 vcD2R1 set $00
(1)  376/   B8CB0 : =$0                 vcD2R2 set $00
(1)  376/   B8CB0 : =$0                 vcD2R3 set $00
(1)  376/   B8CB0 : =$0                 vcD2R4 set $00
(1)  377/   B8CB0 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  377/   B8CB0 : =$0                 vcDL1 set $00
(1)  377/   B8CB0 : =$1                 vcDL2 set $01
(1)  377/   B8CB0 : =$F                 vcDL3 set $0F
(1)  377/   B8CB0 : =$1                 vcDL4 set $01
(1)  378/   B8CB0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  378/   B8CB0 : =$F                 vcRR1 set $0F
(1)  378/   B8CB0 : =$F                 vcRR2 set $0F
(1)  378/   B8CB0 : =$F                 vcRR3 set $0F
(1)  378/   B8CB0 : =$F                 vcRR4 set $0F
(1)  379/   B8CB0 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $17
(1)  379/   B8CB0 : =$0                 vcTL1 set $00
(1)  379/   B8CB0 : =$27                vcTL2 set $27
(1)  379/   B8CB0 : =$28                vcTL3 set $28
(1)  379/   B8CB0 : =$17                vcTL4 set $17
(1)  379/   B8CB0 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  379/   B8CB1 :                     ;   0     1     2     3     4     5     6     7
(1)  379/   B8CB1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  379/   B8CB1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  379/   B8CB1 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  379/   B8CB1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  379/   B8CB1 : =$80                vcTLMask1 set $80
(1)  379/   B8CB1 :                     
(1)  379/   B8CB1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  379/   B8CB1 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  379/   B8CB1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  379/   B8CB1 : =$80                vcTLMask1 set $80
(1)  379/   B8CB1 : =$0                 vcTL1 set vcTL1&$7F
(1)  379/   B8CB1 : =$27                vcTL2 set vcTL2&$7F
(1)  379/   B8CB1 : =$28                vcTL3 set vcTL3&$7F
(1)  379/   B8CB1 : =$17                vcTL4 set vcTL4&$7F
(1)  379/   B8CB1 :                     
(1)  379/   B8CB1 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  379/   B8CB5 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  379/   B8CB9 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  379/   B8CBD : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  379/   B8CC1 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  379/   B8CC5 : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  380/   B8CC9 :                     
(1)  381/   B8CC9 :                     ;	Voice $02
(1)  382/   B8CC9 :                     ;	$3A
(1)  383/   B8CC9 :                     ;	$03, $08, $03, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  384/   B8CC9 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $20, $80
(1)  385/   B8CC9 : (MACRO)             	smpsVcAlgorithm     $02
(1)  385/   B8CC9 : =$2                 vcAlgorithm set $02
(1)  386/   B8CC9 : (MACRO)             	smpsVcFeedback      $07
(1)  386/   B8CC9 : =$7                 vcFeedback set $07
(1)  387/   B8CC9 : (MACRO)             	smpsVcUnusedBits    $00
(1)  387/   B8CC9 : =$0                 vcUnusedBits set $00
(1)  387/   B8CC9 : =$0                 vcD1R1Unk set 0
(1)  387/   B8CC9 : =$0                 vcD1R2Unk set 0
(1)  387/   B8CC9 : =$0                 vcD1R3Unk set 0
(1)  387/   B8CC9 : =$0                 vcD1R4Unk set 0
(1)  388/   B8CC9 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  388/   B8CC9 : =$0                 vcDT1 set $00
(1)  388/   B8CC9 : =$0                 vcDT2 set $00
(1)  388/   B8CC9 : =$0                 vcDT3 set $00
(1)  388/   B8CC9 : =$0                 vcDT4 set $00
(1)  389/   B8CC9 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $08, $03
(1)  389/   B8CC9 : =$1                 vcCF1 set $01
(1)  389/   B8CC9 : =$3                 vcCF2 set $03
(1)  389/   B8CC9 : =$8                 vcCF3 set $08
(1)  389/   B8CC9 : =$3                 vcCF4 set $03
(1)  390/   B8CC9 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  390/   B8CC9 : =$1                 vcRS1 set $01
(1)  390/   B8CC9 : =$2                 vcRS2 set $02
(1)  390/   B8CC9 : =$2                 vcRS3 set $02
(1)  390/   B8CC9 : =$2                 vcRS4 set $02
(1)  391/   B8CC9 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  391/   B8CC9 : =$13                vcAR1 set $13
(1)  391/   B8CC9 : =$D                 vcAR2 set $0D
(1)  391/   B8CC9 : =$E                 vcAR3 set $0E
(1)  391/   B8CC9 : =$E                 vcAR4 set $0E
(1)  392/   B8CC9 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  392/   B8CC9 : =$0                 vcAM1 set $00<<5
(1)  392/   B8CC9 : =$0                 vcAM2 set $00<<5
(1)  392/   B8CC9 : =$0                 vcAM3 set $00<<5
(1)  392/   B8CC9 : =$0                 vcAM4 set $00<<5
(1)  393/   B8CC9 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  393/   B8CC9 : =$3                 vcD1R1 set $03
(1)  393/   B8CC9 : =$E                 vcD1R2 set $0E
(1)  393/   B8CC9 : =$E                 vcD1R3 set $0E
(1)  393/   B8CC9 : =$E                 vcD1R4 set $0E
(1)  394/   B8CC9 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  394/   B8CC9 : =$0                 vcD2R1 set $00
(1)  394/   B8CC9 : =$0                 vcD2R2 set $00
(1)  394/   B8CC9 : =$0                 vcD2R3 set $00
(1)  394/   B8CC9 : =$0                 vcD2R4 set $00
(1)  395/   B8CC9 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  395/   B8CC9 : =$0                 vcDL1 set $00
(1)  395/   B8CC9 : =$1                 vcDL2 set $01
(1)  395/   B8CC9 : =$F                 vcDL3 set $0F
(1)  395/   B8CC9 : =$1                 vcDL4 set $01
(1)  396/   B8CC9 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  396/   B8CC9 : =$F                 vcRR1 set $0F
(1)  396/   B8CC9 : =$F                 vcRR2 set $0F
(1)  396/   B8CC9 : =$F                 vcRR3 set $0F
(1)  396/   B8CC9 : =$F                 vcRR4 set $0F
(1)  397/   B8CC9 : (MACRO)             	smpsVcTotalLevel    $00, $20, $28, $17
(1)  397/   B8CC9 : =$0                 vcTL1 set $00
(1)  397/   B8CC9 : =$20                vcTL2 set $20
(1)  397/   B8CC9 : =$28                vcTL3 set $28
(1)  397/   B8CC9 : =$17                vcTL4 set $17
(1)  397/   B8CC9 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  397/   B8CCA :                     ;   0     1     2     3     4     5     6     7
(1)  397/   B8CCA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  397/   B8CCA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  397/   B8CCA : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  397/   B8CCA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  397/   B8CCA : =$80                vcTLMask1 set $80
(1)  397/   B8CCA :                     
(1)  397/   B8CCA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  397/   B8CCA : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  397/   B8CCA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  397/   B8CCA : =$80                vcTLMask1 set $80
(1)  397/   B8CCA : =$0                 vcTL1 set vcTL1&$7F
(1)  397/   B8CCA : =$20                vcTL2 set vcTL2&$7F
(1)  397/   B8CCA : =$28                vcTL3 set vcTL3&$7F
(1)  397/   B8CCA : =$17                vcTL4 set vcTL4&$7F
(1)  397/   B8CCA :                     
(1)  397/   B8CCA : 0308 0301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  397/   B8CCE : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  397/   B8CD2 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  397/   B8CD6 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  397/   B8CDA : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  397/   B8CDE : 1728 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  398/   B8CE2 :                     
(1)  399/   B8CE2 :                     ;	Voice $03
(1)  400/   B8CE2 :                     ;	$3A
(1)  401/   B8CE2 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  402/   B8CE2 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $4E, $16, $80
(1)  403/   B8CE2 : (MACRO)             	smpsVcAlgorithm     $02
(1)  403/   B8CE2 : =$2                 vcAlgorithm set $02
(1)  404/   B8CE2 : (MACRO)             	smpsVcFeedback      $07
(1)  404/   B8CE2 : =$7                 vcFeedback set $07
(1)  405/   B8CE2 : (MACRO)             	smpsVcUnusedBits    $00
(1)  405/   B8CE2 : =$0                 vcUnusedBits set $00
(1)  405/   B8CE2 : =$0                 vcD1R1Unk set 0
(1)  405/   B8CE2 : =$0                 vcD1R2Unk set 0
(1)  405/   B8CE2 : =$0                 vcD1R3Unk set 0
(1)  405/   B8CE2 : =$0                 vcD1R4Unk set 0
(1)  406/   B8CE2 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  406/   B8CE2 : =$0                 vcDT1 set $00
(1)  406/   B8CE2 : =$0                 vcDT2 set $00
(1)  406/   B8CE2 : =$0                 vcDT3 set $00
(1)  406/   B8CE2 : =$0                 vcDT4 set $00
(1)  407/   B8CE2 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  407/   B8CE2 : =$1                 vcCF1 set $01
(1)  407/   B8CE2 : =$1                 vcCF2 set $01
(1)  407/   B8CE2 : =$7                 vcCF3 set $07
(1)  407/   B8CE2 : =$1                 vcCF4 set $01
(1)  408/   B8CE2 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  408/   B8CE2 : =$1                 vcRS1 set $01
(1)  408/   B8CE2 : =$2                 vcRS2 set $02
(1)  408/   B8CE2 : =$2                 vcRS3 set $02
(1)  408/   B8CE2 : =$2                 vcRS4 set $02
(1)  409/   B8CE2 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  409/   B8CE2 : =$13                vcAR1 set $13
(1)  409/   B8CE2 : =$D                 vcAR2 set $0D
(1)  409/   B8CE2 : =$E                 vcAR3 set $0E
(1)  409/   B8CE2 : =$E                 vcAR4 set $0E
(1)  410/   B8CE2 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  410/   B8CE2 : =$0                 vcAM1 set $00<<5
(1)  410/   B8CE2 : =$0                 vcAM2 set $00<<5
(1)  410/   B8CE2 : =$0                 vcAM3 set $00<<5
(1)  410/   B8CE2 : =$0                 vcAM4 set $00<<5
(1)  411/   B8CE2 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  411/   B8CE2 : =$3                 vcD1R1 set $03
(1)  411/   B8CE2 : =$E                 vcD1R2 set $0E
(1)  411/   B8CE2 : =$E                 vcD1R3 set $0E
(1)  411/   B8CE2 : =$E                 vcD1R4 set $0E
(1)  412/   B8CE2 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  412/   B8CE2 : =$0                 vcD2R1 set $00
(1)  412/   B8CE2 : =$0                 vcD2R2 set $00
(1)  412/   B8CE2 : =$0                 vcD2R3 set $00
(1)  412/   B8CE2 : =$0                 vcD2R4 set $00
(1)  413/   B8CE2 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  413/   B8CE2 : =$0                 vcDL1 set $00
(1)  413/   B8CE2 : =$1                 vcDL2 set $01
(1)  413/   B8CE2 : =$F                 vcDL3 set $0F
(1)  413/   B8CE2 : =$1                 vcDL4 set $01
(1)  414/   B8CE2 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  414/   B8CE2 : =$F                 vcRR1 set $0F
(1)  414/   B8CE2 : =$F                 vcRR2 set $0F
(1)  414/   B8CE2 : =$F                 vcRR3 set $0F
(1)  414/   B8CE2 : =$F                 vcRR4 set $0F
(1)  415/   B8CE2 : (MACRO)             	smpsVcTotalLevel    $00, $16, $4E, $18
(1)  415/   B8CE2 : =$0                 vcTL1 set $00
(1)  415/   B8CE2 : =$16                vcTL2 set $16
(1)  415/   B8CE2 : =$4E                vcTL3 set $4E
(1)  415/   B8CE2 : =$18                vcTL4 set $18
(1)  415/   B8CE2 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  415/   B8CE3 :                     ;   0     1     2     3     4     5     6     7
(1)  415/   B8CE3 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  415/   B8CE3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  415/   B8CE3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  415/   B8CE3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  415/   B8CE3 : =$80                vcTLMask1 set $80
(1)  415/   B8CE3 :                     
(1)  415/   B8CE3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  415/   B8CE3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  415/   B8CE3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  415/   B8CE3 : =$80                vcTLMask1 set $80
(1)  415/   B8CE3 : =$0                 vcTL1 set vcTL1&$7F
(1)  415/   B8CE3 : =$16                vcTL2 set vcTL2&$7F
(1)  415/   B8CE3 : =$4E                vcTL3 set vcTL3&$7F
(1)  415/   B8CE3 : =$18                vcTL4 set vcTL4&$7F
(1)  415/   B8CE3 :                     
(1)  415/   B8CE3 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  415/   B8CE7 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  415/   B8CEB : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  415/   B8CEF : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  415/   B8CF3 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  415/   B8CF7 : 184E 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  416/   B8CFB :                     
(1)  417/   B8CFB :                     ;	Voice $04
(1)  418/   B8CFB :                     ;	$20
(1)  419/   B8CFB :                     ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
(1)  420/   B8CFB :                     ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
(1)  421/   B8CFB : (MACRO)             	smpsVcAlgorithm     $00
(1)  421/   B8CFB : =$0                 vcAlgorithm set $00
(1)  422/   B8CFB : (MACRO)             	smpsVcFeedback      $04
(1)  422/   B8CFB : =$4                 vcFeedback set $04
(1)  423/   B8CFB : (MACRO)             	smpsVcUnusedBits    $00
(1)  423/   B8CFB : =$0                 vcUnusedBits set $00
(1)  423/   B8CFB : =$0                 vcD1R1Unk set 0
(1)  423/   B8CFB : =$0                 vcD1R2Unk set 0
(1)  423/   B8CFB : =$0                 vcD1R3Unk set 0
(1)  423/   B8CFB : =$0                 vcD1R4Unk set 0
(1)  424/   B8CFB : (MACRO)             	smpsVcDetune        $00, $00, $03, $07
(1)  424/   B8CFB : =$0                 vcDT1 set $00
(1)  424/   B8CFB : =$0                 vcDT2 set $00
(1)  424/   B8CFB : =$3                 vcDT3 set $03
(1)  424/   B8CFB : =$7                 vcDT4 set $07
(1)  425/   B8CFB : (MACRO)             	smpsVcCoarseFreq    $00, $00, $01, $0A
(1)  425/   B8CFB : =$0                 vcCF1 set $00
(1)  425/   B8CFB : =$0                 vcCF2 set $00
(1)  425/   B8CFB : =$1                 vcCF3 set $01
(1)  425/   B8CFB : =$A                 vcCF4 set $0A
(1)  426/   B8CFB : (MACRO)             	smpsVcRateScale     $03, $03, $03, $02
(1)  426/   B8CFB : =$3                 vcRS1 set $03
(1)  426/   B8CFB : =$3                 vcRS2 set $03
(1)  426/   B8CFB : =$3                 vcRS3 set $03
(1)  426/   B8CFB : =$2                 vcRS4 set $02
(1)  427/   B8CFB : (MACRO)             	smpsVcAttackRate    $1F, $1C, $18, $1F
(1)  427/   B8CFB : =$1F                vcAR1 set $1F
(1)  427/   B8CFB : =$1C                vcAR2 set $1C
(1)  427/   B8CFB : =$18                vcAR3 set $18
(1)  427/   B8CFB : =$1F                vcAR4 set $1F
(1)  428/   B8CFB : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  428/   B8CFB : =$0                 vcAM1 set $00<<5
(1)  428/   B8CFB : =$0                 vcAM2 set $00<<5
(1)  428/   B8CFB : =$0                 vcAM3 set $00<<5
(1)  428/   B8CFB : =$0                 vcAM4 set $00<<5
(1)  429/   B8CFB : (MACRO)             	smpsVcDecayRate1    $04, $04, $0A, $10
(1)  429/   B8CFB : =$4                 vcD1R1 set $04
(1)  429/   B8CFB : =$4                 vcD1R2 set $04
(1)  429/   B8CFB : =$A                 vcD1R3 set $0A
(1)  429/   B8CFB : =$10                vcD1R4 set $10
(1)  430/   B8CFB : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $0F
(1)  430/   B8CFB : =$8                 vcD2R1 set $08
(1)  430/   B8CFB : =$8                 vcD2R2 set $08
(1)  430/   B8CFB : =$8                 vcD2R3 set $08
(1)  430/   B8CFB : =$F                 vcD2R4 set $0F
(1)  431/   B8CFB : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $05, $05
(1)  431/   B8CFB : =$B                 vcDL1 set $0B
(1)  431/   B8CFB : =$B                 vcDL2 set $0B
(1)  431/   B8CFB : =$5                 vcDL3 set $05
(1)  431/   B8CFB : =$5                 vcDL4 set $05
(1)  432/   B8CFB : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  432/   B8CFB : =$F                 vcRR1 set $0F
(1)  432/   B8CFB : =$F                 vcRR2 set $0F
(1)  432/   B8CFB : =$F                 vcRR3 set $0F
(1)  432/   B8CFB : =$F                 vcRR4 set $0F
(1)  433/   B8CFB : (MACRO)             	smpsVcTotalLevel    $00, $17, $2B, $14
(1)  433/   B8CFB : =$0                 vcTL1 set $00
(1)  433/   B8CFB : =$17                vcTL2 set $17
(1)  433/   B8CFB : =$2B                vcTL3 set $2B
(1)  433/   B8CFB : =$14                vcTL4 set $14
(1)  433/   B8CFB : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  433/   B8CFC :                     ;   0     1     2     3     4     5     6     7
(1)  433/   B8CFC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  433/   B8CFC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  433/   B8CFC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  433/   B8CFC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  433/   B8CFC : =$80                vcTLMask1 set $80
(1)  433/   B8CFC :                     
(1)  433/   B8CFC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  433/   B8CFC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  433/   B8CFC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  433/   B8CFC : =$80                vcTLMask1 set $80
(1)  433/   B8CFC : =$0                 vcTL1 set vcTL1&$7F
(1)  433/   B8CFC : =$17                vcTL2 set vcTL2&$7F
(1)  433/   B8CFC : =$2B                vcTL3 set vcTL3&$7F
(1)  433/   B8CFC : =$14                vcTL4 set vcTL4&$7F
(1)  433/   B8CFC :                     
(1)  433/   B8CFC : 7A31 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  433/   B8D00 : 9FD8 DCDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  433/   B8D04 : 100A 0404                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  433/   B8D08 : 0F08 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  433/   B8D0C : 5F5F BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  433/   B8D10 : 142B 1780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  434/   B8D14 :                     
(1)  435/   B8D14 :                     
   42/   B8D14 :                        Music_09:	include		"music-improved/89 - CNZ.asm"
(1)    1/   B8D14 :                     CNZ_Header:
(1)    2/   B8D14 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B8D14 :                     
(1)    2/   B8D14 : =$2                 SourceDriver set 2
(1)    2/   B8D14 :                     
(1)    2/   B8D14 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B8D14 :                     
(1)    2/   B8D14 : =$B8D14             songStart set *
(1)    2/   B8D14 :                     
(1)    2/   B8D14 :                     
(1)    3/   B8D14 : (MACRO)             	smpsHeaderVoice     CNZ_Voices
(1)    3/   B8D14 : E593                                dc.w    z80_ptr(CNZ_VOICES)
(1)    4/   B8D16 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B8D16 : 0603                        dc.b    $06,$03
(1)    5/   B8D18 : (MACRO)             	smpsHeaderTempo     $01, $48
(1)    5/   B8D18 : 01                          dc.b    $01
(1)    5/   B8D19 :  (MACRO-2)                  convertMainTempoMod $48
(1)    5/   B8D19 : B8                                          dc.b    s2TempotoS3($48)
(1)    6/   B8D1A :                     
(1)    7/   B8D1A : (MACRO)             	smpsHeaderDAC       CNZ_DAC
(1)    7/   B8D1A :  (MACRO-2)                  CheckedChannelPointer CNZ_DAC
(1)    7/   B8D1A : 9E93                                dc.w    z80_ptr(CNZ_DAC)
(1)    7/   B8D1C : 0000                                dc.w    $00
(1)    8/   B8D1E : (MACRO)             	smpsHeaderFM        CNZ_FM1,	$0C, $08
(1)    8/   B8D1E :  (MACRO-2)                  CheckedChannelPointer CNZ_FM1
(1)    8/   B8D1E : 448D                                dc.w    z80_ptr(CNZ_FM1)
(1)    8/   B8D20 : 0C08                        dc.b    $0C,$08
(1)    9/   B8D22 : (MACRO)             	smpsHeaderFM        CNZ_FM2,	$F4, $0A
(1)    9/   B8D22 :  (MACRO-2)                  CheckedChannelPointer CNZ_FM2
(1)    9/   B8D22 : 5D90                                dc.w    z80_ptr(CNZ_FM2)
(1)    9/   B8D24 : F40A                        dc.b    $F4,$0A
(1)   10/   B8D26 : (MACRO)             	smpsHeaderFM        CNZ_FM3,	$F4, $12
(1)   10/   B8D26 :  (MACRO-2)                  CheckedChannelPointer CNZ_FM3
(1)   10/   B8D26 : 168E                                dc.w    z80_ptr(CNZ_FM3)
(1)   10/   B8D28 : F412                        dc.b    $F4,$12
(1)   11/   B8D2A : (MACRO)             	smpsHeaderFM        CNZ_FM4,	$F4, $12
(1)   11/   B8D2A :  (MACRO-2)                  CheckedChannelPointer CNZ_FM4
(1)   11/   B8D2A : 4C8F                                dc.w    z80_ptr(CNZ_FM4)
(1)   11/   B8D2C : F412                        dc.b    $F4,$12
(1)   12/   B8D2E : (MACRO)             	smpsHeaderFM        CNZ_FM5,	$F4, $0F
(1)   12/   B8D2E :  (MACRO-2)                  CheckedChannelPointer CNZ_FM5
(1)   12/   B8D2E : 7591                                dc.w    z80_ptr(CNZ_FM5)
(1)   12/   B8D30 : F40F                        dc.b    $F4,$0F
(1)   13/   B8D32 : (MACRO)             	smpsHeaderPSG       CNZ_PSG1,	$DC, $05, $00, $00
(1)   13/   B8D32 :  (MACRO-2)                  CheckedChannelPointer CNZ_PSG1
(1)   13/   B8D32 : 9392                                dc.w    z80_ptr(CNZ_PSG1)
(1)   13/   B8D34 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   13/   B8D34 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   13/   B8D35 : 0500 00                     dc.b    $05,$00,$00
(1)   14/   B8D38 : (MACRO)             	smpsHeaderPSG       CNZ_PSG2,	$DC, $05, $00, $00
(1)   14/   B8D38 :  (MACRO-2)                  CheckedChannelPointer CNZ_PSG2
(1)   14/   B8D38 : FC92                                dc.w    z80_ptr(CNZ_PSG2)
(1)   14/   B8D3A :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   B8D3A : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   B8D3B : 0500 00                     dc.b    $05,$00,$00
(1)   15/   B8D3E : (MACRO)             	smpsHeaderPSG       CNZ_PSG3,	$00, $04, $00, $00
(1)   15/   B8D3E :  (MACRO-2)                  CheckedChannelPointer CNZ_PSG3
(1)   15/   B8D3E : 6693                                dc.w    z80_ptr(CNZ_PSG3)
(1)   15/   B8D40 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B8D40 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B8D41 : 0400 00                     dc.b    $04,$00,$00
(1)   16/   B8D44 :                     
(1)   17/   B8D44 :                     ; FM1 Data
(1)   18/   B8D44 :                     CNZ_FM1:
(1)   19/   B8D44 : (MACRO)             	smpsSetvoice        $00
(1)   19/   B8D44 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   B8D44 : EF00                                dc.b    $EF,$00
(1)   20/   B8D46 : 8018                	dc.b	nRst, $18
(1)   21/   B8D48 :                     
(1)   22/   B8D48 :                     CNZ_Jump04:
(1)   23/   B8D48 : A506 99A5 99A5 99A5 	dc.b	nC3, $06, nC2, nC3, nC2, nC3, nC2, nC3, nC2, nRst, nG1, $04
            B8D50 : 9980 9404         
(1)   24/   B8D54 : 8002 9704 9506 9404 	dc.b	nRst, $02, nBb1, $04, nAb1, $06, nG1, $04, nRst, $02, nG2, $02
            B8D5C : 8002 A002         
(1)   25/   B8D60 : 9406 9698 9906 9896 	dc.b	nG1, $06, nA1, nB1, nC2, $06, nB1, nA1, nG1, nC2, nG1, nC2
            B8D68 : 9499 9499         
(1)   26/   B8D6C : 9B9D 9B99 9891 9395 	dc.b	nD2, nE2, nD2, nC2, nB1, nE1, nFs1, nAb1, nE1, nA1, nA1, nE2
            B8D74 : 9196 969D         
(1)   27/   B8D78 : 9D96 9899 9695 9799 	dc.b	nE2, nA1, nB1, nC2, nA1, nAb1, nBb1, nC2, nD2, nEb2, $04, $02
            B8D80 : 9B9C 0402         
(1)   28/   B8D84 : 9506 9995 9999 9B9C 	dc.b	nAb1, $06, nC2, nAb1, nC2, nC2, nD2, nEb2, nE2, $04, $02, nE1
            B8D8C : 9D04 0291         
(1)   29/   B8D90 : 0693 9596 9694 9492 	dc.b	$06, nFs1, nAb1, nA1, nA1, nG1, nG1, nF1, nC2, nF1, nA1, nRst
            B8D98 : 9992 9680         
(1)   30/   B8D9C : 9980 9980 9E80 9E95 	dc.b	nC2, nRst, nC2, nRst, nF2, nRst, nF2, nAb1, $0C, $06, nRst, $04
            B8DA4 : 0C06 8004         
(1)   31/   B8DA8 : 9404 8002 A09E 069D 	dc.b	nG1, $04, nRst, $02, nG2, nF2, $06, nE2, nD2, nC2, $04, $02
            B8DB0 : 9B99 0402         
(1)   32/   B8DB4 : 9106 9293 9498 999B 	dc.b	nE1, $06, nF1, nFs1, nG1, nB1, nC2, nD2, nE2, nB1, nAb1, nFs1
            B8DBC : 9D98 9593         
(1)   33/   B8DC0 : 9198 9D91 9698 9998 	dc.b	nE1, nB1, nE2, nE1, nA1, nB1, nC2, nB1, nA1, nC2, nE2, nA1
            B8DC8 : 9699 9D96         
(1)   34/   B8DCC : 9597 9997 9596 9798 	dc.b	nAb1, nBb1, nC2, nBb1, nAb1, nA1, nBb1, nB1, nC2, nB1, nC2, nD2
            B8DD4 : 9998 999B         
(1)   35/   B8DD8 : 9D04 0298 0691 9596 	dc.b	nE2, $04, $02, nB1, $06, nE1, nAb1, nA1, nB1, nC2, nE2, nF2
            B8DE0 : 9899 9D9E         
(1)   36/   B8DE4 : 0496 0897 0698 8099 	dc.b	$04, nA1, $08, nBb1, $06, nB1, nRst, nC2, nRst, nC2, nRst, nF2
            B8DEC : 8099 809E         
(1)   37/   B8DF0 : 809E                	dc.b	nRst, nF2
(1)   38/   B8DF2 : (MACRO)             	smpsAlterVol        $04
(1)   38/   B8DF2 : E604                        dc.b    $E6,$04
(1)   39/   B8DF4 : 8099 8099 809E 809E 	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst, nF2
(1)   40/   B8DFC : (MACRO)             	smpsAlterVol        $FC
(1)   40/   B8DFC : E6FC                        dc.b    $E6,$FC
(1)   41/   B8DFE : 8099 8099 809E 809E 	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst, nF2, $04, nC2, $02, nRst
            B8E06 : 0499 0280         
(1)   42/   B8E0A : 1899 0280 9998 0696 	dc.b	$18, nC2, $02, nRst, nC2, nB1, $06, nA1, nG1
            B8E12 : 94               
(1)   43/   B8E13 : (MACRO)             	smpsJump            CNZ_Jump04
(1)   43/   B8E13 : F6                          dc.b    $F6
(1)   43/   B8E14 : 488D                                dc.w    z80_ptr(CNZ_JUMP04)
(1)   44/   B8E16 :                     
(1)   45/   B8E16 :                     ; FM3 Data
(1)   46/   B8E16 :                     CNZ_FM3:
(1)   47/   B8E16 : (MACRO)             	smpsSetvoice        $02
(1)   47/   B8E16 :  (MACRO-2)                  smpsFMvoice $02
(1)   47/   B8E16 : EF02                                dc.b    $EF,$02
(1)   48/   B8E18 : (MACRO)             	smpsPan             panLeft, $00
(1)   48/   B8E18 : =$0                 panNone set $00
(1)   48/   B8E18 : =$40                panRight set $40
(1)   48/   B8E18 : =$80                panLeft set $80
(1)   48/   B8E18 : =$C0                panCentre set $C0
(1)   48/   B8E18 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   48/   B8E18 : E080                        dc.b $E0,PANLEFT+$00
(1)   49/   B8E1A : 8018                	dc.b	nRst, $18
(1)   50/   B8E1C :                     
(1)   51/   B8E1C :                     CNZ_Jump03:
(1)   52/   B8E1C : (MACRO)             	smpsSetvoice        $02
(1)   52/   B8E1C :  (MACRO-2)                  smpsFMvoice $02
(1)   52/   B8E1C : EF02                                dc.b    $EF,$02
(1)   53/   B8E1E : 8006 C480 C480 C480 	dc.b	nRst, $06, nG5, nRst, nG5, nRst, nG5, nRst, nG5, nRst, nF5, $02
            B8E26 : C480 C202         
(1)   54/   B8E2A : 8004 C204 0280 04C2 	dc.b	nRst, $04, nF5, $04, $02, nRst, $04, nF5, $02, nRst, $18
            B8E32 : 0280 18            
(1)   55/   B8E35 : (MACRO)             	smpsCall            CNZ_Call02
(1)   55/   B8E35 : F8                          dc.b    $F8
(1)   55/   B8E36 : 738E                                dc.w    z80_ptr(CNZ_CALL02)
(1)   56/   B8E38 : (MACRO)             	smpsSetvoice        $01
(1)   56/   B8E38 :  (MACRO-2)                  smpsFMvoice $01
(1)   56/   B8E38 : EF01                                dc.b    $EF,$01
(1)   57/   B8E3A : (MACRO)             	smpsAlterPitch      $F4
(1)   57/   B8E3A :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   57/   B8E3A : FBF4                                dc.b    $FB,$F4
(1)   58/   B8E3C : (MACRO)             	smpsAlterVol        $FC
(1)   58/   B8E3C : E6FC                        dc.b    $E6,$FC
(1)   59/   B8E3E : (MACRO)             	smpsCall            CNZ_Call03
(1)   59/   B8E3E : F8                          dc.b    $F8
(1)   59/   B8E3F : 038F                                dc.w    z80_ptr(CNZ_CALL03)
(1)   60/   B8E41 : CD18 CB0C CD06 CBC9 	dc.b	nE6, $18, nD6, $0C, nE6, $06, nD6, nC6, $18, nF6, nRst, $06
            B8E49 : 18CE 8006         
(1)   61/   B8E4D : C480 C480 C680 C6   	dc.b	nG5, nRst, nG5, nRst, nA5, nRst, nA5
(1)   62/   B8E54 : (MACRO)             	smpsAlterVol        $04
(1)   62/   B8E54 : E604                        dc.b    $E6,$04
(1)   63/   B8E56 : 80C4 80C4 80C6 80C6 	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, nRst, nA5
(1)   64/   B8E5E : (MACRO)             	smpsAlterVol        $FC
(1)   64/   B8E5E : E6FC                        dc.b    $E6,$FC
(1)   65/   B8E60 : 80C4 80C4 80C6 0C04 	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, $0C, $04, nG5, $02, nRst, $30
            B8E68 : C402 8030         
(1)   66/   B8E6C : (MACRO)             	smpsAlterPitch      $0C
(1)   66/   B8E6C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   66/   B8E6C : FB0C                                dc.b    $FB,$0C
(1)   67/   B8E6E : (MACRO)             	smpsAlterVol        $04
(1)   67/   B8E6E : E604                        dc.b    $E6,$04
(1)   68/   B8E70 : (MACRO)             	smpsJump            CNZ_Jump03
(1)   68/   B8E70 : F6                          dc.b    $F6
(1)   68/   B8E71 : 1C8E                                dc.w    z80_ptr(CNZ_JUMP03)
(1)   69/   B8E73 :                     
(1)   70/   B8E73 :                     CNZ_Call02:
(1)   71/   B8E73 : 8006 B802 8008 B802 	dc.b	nRst, $06, nG4, $02, nRst, $08, nG4, $02, nRst, $06, nG4, $08
            B8E7B : 8006 B808         
(1)   72/   B8E7F : 8002 B806 8002 B804 	dc.b	nRst, $02, nG4, $06, nRst, $02, nG4, $04, $02, nRst, $06, nAb4
            B8E87 : 0280 06B9         
(1)   73/   B8E8B : 0280 08B9 0280 06B9 	dc.b	$02, nRst, $08, nAb4, $02, nRst, $06, nAb4, $08, nRst, $02, nAb4
            B8E93 : 0880 02B9         
(1)   74/   B8E97 : 0680 02B9 0402 8006 	dc.b	$06, nRst, $02, nAb4, $04, $02, nRst, $06, nA4, $02, nRst, $08
            B8E9F : BA02 8008         
(1)   75/   B8EA3 : BA02 8006 BA08 8002 	dc.b	nA4, $02, nRst, $06, nA4, $08, nRst, $02, nA4, $06, nRst, $02
            B8EAB : BA06 8002         
(1)   76/   B8EAF : BA04 0280 06B9 0280 	dc.b	nA4, $04, $02, nRst, $06, nAb4, $02, nRst, $08, nAb4, $02, nRst
            B8EB7 : 08B9 0280         
(1)   77/   B8EBB : 06B9 0880 02B9 0680 	dc.b	$06, nAb4, $08, nRst, $02, nAb4, $06, nRst, $02, nAb4, $04, $02
            B8EC3 : 02B9 0402         
(1)   78/   B8EC7 : 8006 B802 8008 B802 	dc.b	nRst, $06, nG4, $02, nRst, $08, nG4, $02, nRst, $06, nAb4, $08
            B8ECF : 8006 B908         
(1)   79/   B8ED3 : 8002 B906 8002 B904 	dc.b	nRst, $02, nAb4, $06, nRst, $02, nAb4, $04, $02, nRst, $06, nA4
            B8EDB : 0280 06BA         
(1)   80/   B8EDF : 0280 08BA 0280 06BA 	dc.b	$02, nRst, $08, nA4, $02, nRst, $06, nA4, $08, nRst, $02, nA4
            B8EE7 : 0880 02BA         
(1)   81/   B8EEB : 0680 02BA 0402 8006 	dc.b	$06, nRst, $02, nA4, $04, $02, nRst, $06, nG4, nRst, nG4, nRst
            B8EF3 : B880 B880         
(1)   82/   B8EF7 : BA80 BABD 0C06 04BC 	dc.b	nA4, nRst, nA4, nC5, $0C, $06, $04, nB4, $02, nRst, $18
            B8EFF : 0280 18            
(1)   83/   B8F02 : (MACRO)             	smpsReturn
(1)   83/   B8F02 : F9                                  dc.b    $F9
(1)   84/   B8F03 :                     
(1)   85/   B8F03 :                     CNZ_Call03:
(1)   86/   B8F03 : 8006 CD02 8008 CD02 	dc.b	nRst, $06, nE6, $02, nRst, $08, nE6, $02, nRst, $06, nE6, $06
            B8F0B : 8006 CD06         
(1)   87/   B8F0F : CE04 CD02 800C 8006 	dc.b	nF6, $04, nE6, $02, nRst, $0C, nRst, $06, nD6, $02, nRst, $08
            B8F17 : CB02 8008         
(1)   88/   B8F1B : CB02 8006 CB06 CD04 	dc.b	nD6, $02, nRst, $06, nD6, $06, nE6, $04, nD6, $02, nRst, $0C
            B8F23 : CB02 800C         
(1)   89/   B8F27 : 8006 C902 8008 C902 	dc.b	nRst, $06, nC6, $02, nRst, $08, nC6, $02, nRst, $06, nC6, $06
            B8F2F : 8006 C906         
(1)   90/   B8F33 : CB04 C902 800C 8006 	dc.b	nD6, $04, nC6, $02, nRst, $0C, nRst, $06, nC6, $02, nRst, $08
            B8F3B : C902 8008         
(1)   91/   B8F3F : C902 8006 C906 CB04 	dc.b	nC6, $02, nRst, $06, nC6, $06, nD6, $04, nC6, $02, nRst, $0C
            B8F47 : C902 800C         
(1)   92/   B8F4B : (MACRO)             	smpsReturn
(1)   92/   B8F4B : F9                                  dc.b    $F9
(1)   93/   B8F4C :                     
(1)   94/   B8F4C :                     ; FM4 Data
(1)   95/   B8F4C :                     CNZ_FM4:
(1)   96/   B8F4C : (MACRO)             	smpsSetvoice        $02
(1)   96/   B8F4C :  (MACRO-2)                  smpsFMvoice $02
(1)   96/   B8F4C : EF02                                dc.b    $EF,$02
(1)   97/   B8F4E : (MACRO)             	smpsPan             panRight, $00
(1)   97/   B8F4E : =$0                 panNone set $00
(1)   97/   B8F4E : =$40                panRight set $40
(1)   97/   B8F4E : =$80                panLeft set $80
(1)   97/   B8F4E : =$C0                panCentre set $C0
(1)   97/   B8F4E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   97/   B8F4E : E040                        dc.b $E0,PANRIGHT+$00
(1)   98/   B8F50 : 8018                	dc.b	nRst, $18
(1)   99/   B8F52 :                     
(1)  100/   B8F52 :                     CNZ_Jump02:
(1)  101/   B8F52 : (MACRO)             	smpsSetvoice        $02
(1)  101/   B8F52 :  (MACRO-2)                  smpsFMvoice $02
(1)  101/   B8F52 : EF02                                dc.b    $EF,$02
(1)  102/   B8F54 : 8006 C080 C080 C080 	dc.b	nRst, $06, nEb5, nRst, nEb5, nRst, nEb5, nRst, nEb5, nRst, nD5, $02
            B8F5C : C080 BF02         
(1)  103/   B8F60 : 8004 BF04 0280 04BF 	dc.b	nRst, $04, nD5, $04, $02, nRst, $04, nD5, $02, nRst, $18
            B8F68 : 0280 18            
(1)  104/   B8F6B : (MACRO)             	smpsCall            CNZ_Call00
(1)  104/   B8F6B : F8                          dc.b    $F8
(1)  104/   B8F6C : A98F                                dc.w    z80_ptr(CNZ_CALL00)
(1)  105/   B8F6E : (MACRO)             	smpsSetvoice        $01
(1)  105/   B8F6E :  (MACRO-2)                  smpsFMvoice $01
(1)  105/   B8F6E : EF01                                dc.b    $EF,$01
(1)  106/   B8F70 : (MACRO)             	smpsAlterPitch      $F4
(1)  106/   B8F70 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  106/   B8F70 : FBF4                                dc.b    $FB,$F4
(1)  107/   B8F72 : (MACRO)             	smpsAlterVol        $FC
(1)  107/   B8F72 : E6FC                        dc.b    $E6,$FC
(1)  108/   B8F74 : (MACRO)             	smpsCall            CNZ_Call01
(1)  108/   B8F74 : F8                          dc.b    $F8
(1)  108/   B8F75 : 1490                                dc.w    z80_ptr(CNZ_CALL01)
(1)  109/   B8F77 : C918 C80C C906 C8C6 	dc.b	nC6, $18, nB5, $0C, nC6, $06, nB5, nA5, $18, nC6, nRst, $06
            B8F7F : 18C9 8006         
(1)  110/   B8F83 : C180 C180 C280 C2   	dc.b	nE5, nRst, nE5, nRst, nF5, nRst, nF5
(1)  111/   B8F8A : (MACRO)             	smpsAlterVol        $04
(1)  111/   B8F8A : E604                        dc.b    $E6,$04
(1)  112/   B8F8C : 80C1 80C1 80C2 80C2 	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, nRst, nF5
(1)  113/   B8F94 : (MACRO)             	smpsAlterVol        $FC
(1)  113/   B8F94 : E6FC                        dc.b    $E6,$FC
(1)  114/   B8F96 : 80C1 80C1 80C2 0C04 	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, $0C, $04, nE5, $02, nRst, $30
            B8F9E : C102 8030         
(1)  115/   B8FA2 : (MACRO)             	smpsAlterPitch      $0C
(1)  115/   B8FA2 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  115/   B8FA2 : FB0C                                dc.b    $FB,$0C
(1)  116/   B8FA4 : (MACRO)             	smpsAlterVol        $04
(1)  116/   B8FA4 : E604                        dc.b    $E6,$04
(1)  117/   B8FA6 : (MACRO)             	smpsJump            CNZ_Jump02
(1)  117/   B8FA6 : F6                          dc.b    $F6
(1)  117/   B8FA7 : 528F                                dc.w    z80_ptr(CNZ_JUMP02)
(1)  118/   B8FA9 :                     
(1)  119/   B8FA9 :                     CNZ_Call00:
(1)  120/   B8FA9 : 8006 B502 8008 B502 	dc.b	nRst, $06, nE4, $02, nRst, $08, nE4, $02, nRst, $06, nE4, $08
            B8FB1 : 8006 B508         
(1)  121/   B8FB5 : 8002 B506 8002 B504 	dc.b	nRst, $02, nE4, $06, nRst, $02, nE4, $04, $02
            B8FBD : 02               
(1)  122/   B8FBE : (MACRO)             	smpsLoop            $00, $03, CNZ_Call00
(1)  122/   B8FBE : F7                          dc.b    $F7
(1)  122/   B8FBF : 0003                        dc.b    $00,$03
(1)  122/   B8FC1 : A98F                                dc.w    z80_ptr(CNZ_CALL00)
(1)  123/   B8FC3 : 8006 B402 8008 B402 	dc.b	nRst, $06, nEb4, $02, nRst, $08, nEb4, $02, nRst, $06, nEb4, $08
            B8FCB : 8006 B408         
(1)  124/   B8FCF : 8002 B406 8002 B404 	dc.b	nRst, $02, nEb4, $06, nRst, $02, nEb4, $04, $02, nRst, $06, nE4
            B8FD7 : 0280 06B5         
(1)  125/   B8FDB : 0280 08B5 0280 06B5 	dc.b	$02, nRst, $08, nE4, $02, nRst, $06, nE4, $08, nRst, $02, nE4
            B8FE3 : 0880 02B5         
(1)  126/   B8FE7 : 0680 02B5 0402 8006 	dc.b	$06, nRst, $02, nE4, $04, $02, nRst, $06, nE4, $02, nRst, $08
            B8FEF : B502 8008         
(1)  127/   B8FF3 : B502 8006 B608 8002 	dc.b	nE4, $02, nRst, $06, nF4, $08, nRst, $02, nF4, $06, nRst, $02
            B8FFB : B606 8002         
(1)  128/   B8FFF : B604 0280 06B5 80B5 	dc.b	nF4, $04, $02, nRst, $06, nE4, nRst, nE4, nRst, nF4, nRst, nF4
            B9007 : 80B6 80B6         
(1)  129/   B900B : B90C 0604 B802 8018 	dc.b	nAb4, $0C, $06, $04, nG4, $02, nRst, $18
(1)  130/   B9013 : (MACRO)             	smpsReturn
(1)  130/   B9013 : F9                                  dc.b    $F9
(1)  131/   B9014 :                     
(1)  132/   B9014 :                     CNZ_Call01:
(1)  133/   B9014 : 8006 C902 8008 C902 	dc.b	nRst, $06, nC6, $02, nRst, $08, nC6, $02, nRst, $06, nC6, $06
            B901C : 8006 C906         
(1)  134/   B9020 : CB04 C902 800C 8006 	dc.b	nD6, $04, nC6, $02, nRst, $0C, nRst, $06, nB5, $02, nRst, $08
            B9028 : C802 8008         
(1)  135/   B902C : C802 8006 C806 C904 	dc.b	nB5, $02, nRst, $06, nB5, $06, nC6, $04, nB5, $02, nRst, $0C
            B9034 : C802 800C         
(1)  136/   B9038 : 8006 C602 8008 C602 	dc.b	nRst, $06, nA5, $02, nRst, $08, nA5, $02, nRst, $06, nA5, $06
            B9040 : 8006 C606         
(1)  137/   B9044 : C804 C602 800C 8006 	dc.b	nB5, $04, nA5, $02, nRst, $0C, nRst, $06, nAb5, $02, nRst, $08
            B904C : C502 8008         
(1)  138/   B9050 : C502 8006 C506 C704 	dc.b	nAb5, $02, nRst, $06, nAb5, $06, nBb5, $04, nAb5, $02, nRst, $0C
            B9058 : C502 800C         
(1)  139/   B905C : (MACRO)             	smpsReturn
(1)  139/   B905C : F9                                  dc.b    $F9
(1)  140/   B905D :                     
(1)  141/   B905D :                     ; FM2 Data
(1)  142/   B905D :                     CNZ_FM2:
(1)  143/   B905D : (MACRO)             	smpsSetvoice        $01
(1)  143/   B905D :  (MACRO-2)                  smpsFMvoice $01
(1)  143/   B905D : EF01                                dc.b    $EF,$01
(1)  144/   B905F : (MACRO)             	smpsModSet          $1C, $01, $06, $04
(1)  144/   B905F : F0                          dc.b    $F0
(1)  144/   B9060 : 1D01 0605                           dc.b    $1C+1,$01,$06,(($04+1) * $01) & $FF
(1)  144/   B9064 :                             ;dc.b   $01,$06,$04
(1)  145/   B9064 : 8018                	dc.b	nRst, $18
(1)  146/   B9066 :                     
(1)  147/   B9066 :                     CNZ_Jump01:
(1)  148/   B9066 : (MACRO)             	smpsSetvoice        $01
(1)  148/   B9066 :  (MACRO-2)                  smpsFMvoice $01
(1)  148/   B9066 : EF01                                dc.b    $EF,$01
(1)  149/   B9068 : 8006 C00C BD02 8004 	dc.b	nRst, $06, nEb5, $0C, nC5, $02, nRst, $04, nFs5, nF5, $02, nRst
            B9070 : C3C2 0280         
(1)  150/   B9074 : 04C0 0280 04BD 0880 	dc.b	$04, nEb5, $02, nRst, $04, nC5, $08, nRst, $06, nG4, $02, nRst
            B907C : 06B8 0280         
(1)  151/   B9080 : 04BB B902 8004 B802 	dc.b	$04, nBb4, nAb4, $02, nRst, $04, nG4, $02, nRst, $0C, nE4, $04
            B9088 : 800C B504         
(1)  152/   B908C : 8002 B504 8002 B518 	dc.b	nRst, $02, nE4, $04, nRst, $02, nE4, $18, nRst, $06, nE4, $04
            B9094 : 8006 B504         
(1)  153/   B9098 : 8002 B604 B508 B904 	dc.b	nRst, $02, nF4, $04, nE4, $08, nAb4, $04, $02, nRst, $04, nE4
            B90A0 : 0280 04B5         
(1)  154/   B90A4 : 1A80 06B5 BA04 0280 	dc.b	$1A, nRst, $06, nE4, nA4, $04, $02, nRst, $04, nE4, $02, nC4
            B90AC : 04B5 02B1         
(1)  155/   B90B0 : 1280 06B1 0480 02B3 	dc.b	$12, nRst, $06, nC4, $04, nRst, $02, nD4, $04, nC4, $02, nEb4
            B90B8 : 04B1 02B4         
(1)  156/   B90BC : 06B3 04B1 2680 06B5 	dc.b	$06, nD4, $04, nC4, $26, nRst, $06, nE4, $04, nRst, $02, nF4
            B90C4 : 0480 02B6         
(1)  157/   B90C8 : 0480 02B5 0480 02B9 	dc.b	$04, nRst, $02, nE4, $04, nRst, $02, nAb4, $04, $02, nRst, $04
            B90D0 : 0402 8004         
(1)  158/   B90D4 : B50E 8006 BA0C BC04 	dc.b	nE4, $0E, nRst, $06, nA4, $0C, nB4, $04, nA4, $02, nC5, $0C
            B90DC : BA02 BD0C         
(1)  159/   B90E0 : 8006 BA02 8004 B80C 	dc.b	nRst, $06, nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, nEb4
            B90E8 : B5B1 B3B4         
(1)  160/   B90EC : B604 B402 B604 B802 	dc.b	nF4, $04, nEb4, $02, nF4, $04, nG4, $02, nRst, $10, nG3, $02
            B90F4 : 8010 AC02         
(1)  161/   B90F8 : AE04 B102 B518 8006 	dc.b	nA3, $04, nC4, $02, nE4, $18, nRst, $06, nE4, $04, nRst, $02
            B9100 : B504 8002         
(1)  162/   B9104 : B604 B508 B904 0280 	dc.b	nF4, $04, nE4, $08, nAb4, $04, $02, nRst, $04, nE4, $1A, nRst
            B910C : 04B5 1A80         
(1)  163/   B9110 : 06B5 BA04 0280 04B5 	dc.b	$06, nE4, nA4, $04, $02, nRst, $04, nE4, $02, nC4, $12, nRst
            B9118 : 02B1 1280         
(1)  164/   B911C : 06B1 0480 02B3 04B1 	dc.b	$06, nC4, $04, nRst, $02, nD4, $04, nC4, $02, nEb4, $06, nD4
            B9124 : 02B4 06B3         
(1)  165/   B9128 : 04B1 2680 06B5 0480 	dc.b	$04, nC4, $26, nRst, $06, nE4, $04, nRst, $02, nF4, $04, nRst
            B9130 : 02B6 0480         
(1)  166/   B9134 : 02B5 0480 02B9 0402 	dc.b	$02, nE4, $04, nRst, $02, nAb4, $04, $02, nRst, $04, nE4, $0E
            B913C : 8004 B50E         
(1)  167/   B9140 : 8006 BA0C BC04 BA02 	dc.b	nRst, $06, nA4, $0C, nB4, $04, nA4, $02, nC5, $0C, nRst, $06
            B9148 : BD0C 8006         
(1)  168/   B914C : BA02 8004 B80C B5B1 	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $06
            B9154 : B306               
(1)  169/   B9156 : (MACRO)             	smpsAlterVol        $04
(1)  169/   B9156 : E604                        dc.b    $E6,$04
(1)  170/   B9158 : BA02 8004 B80C B5B1 	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $06
            B9160 : B306               
(1)  171/   B9162 : (MACRO)             	smpsAlterVol        $FC
(1)  171/   B9162 : E6FC                        dc.b    $E6,$FC
(1)  172/   B9164 : BA02 8004 B80C B5B1 	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $0A, nC4, $02
            B916C : B30A B102         
(1)  173/   B9170 : 8030                	dc.b	nRst, $30
(1)  174/   B9172 : (MACRO)             	smpsJump            CNZ_Jump01
(1)  174/   B9172 : F6                          dc.b    $F6
(1)  174/   B9173 : 6690                                dc.w    z80_ptr(CNZ_JUMP01)
(1)  175/   B9175 :                     
(1)  176/   B9175 :                     ; FM5 Data
(1)  177/   B9175 :                     CNZ_FM5:
(1)  178/   B9175 : (MACRO)             	smpsSetvoice        $01
(1)  178/   B9175 :  (MACRO-2)                  smpsFMvoice $01
(1)  178/   B9175 : EF01                                dc.b    $EF,$01
(1)  179/   B9177 : 8018                	dc.b	nRst, $18
(1)  180/   B9179 : (MACRO)             	smpsModSet          $1C, $01, $06, $04
(1)  180/   B9179 : F0                          dc.b    $F0
(1)  180/   B917A : 1D01 0605                           dc.b    $1C+1,$01,$06,(($04+1) * $01) & $FF
(1)  180/   B917E :                             ;dc.b   $01,$06,$04
(1)  181/   B917E :                     
(1)  182/   B917E :                     CNZ_Jump00:
(1)  183/   B917E : (MACRO)             	smpsSetvoice        $01
(1)  183/   B917E :  (MACRO-2)                  smpsFMvoice $01
(1)  183/   B917E : EF01                                dc.b    $EF,$01
(1)  184/   B9180 : 8006 BD0C B802 8004 	dc.b	nRst, $06, nC5, $0C, nG4, $02, nRst, $04, nEb5, nD5, $02, nRst
            B9188 : C0BF 0280         
(1)  185/   B918C : 04BD 0280 04B8 0880 	dc.b	$04, nC5, $02, nRst, $04, nG4, $08, nRst, $06, nD4, $02, nRst
            B9194 : 06B3 0280         
(1)  186/   B9198 : 04B6 B402 8004 B302 	dc.b	$04, nF4, nEb4, $02, nRst, $04, nD4, $02, nRst, $0C, nA3, $04
            B91A0 : 800C AE04         
(1)  187/   B91A4 : 8002 B004 8002 B118 	dc.b	nRst, $02, nB3, $04, nRst, $02, nC4, $18, nRst, $06, nC4, $04
            B91AC : 8006 B104         
(1)  188/   B91B0 : 8002 B304 B108 B504 	dc.b	nRst, $02, nD4, $04, nC4, $08, nE4, $04, nE4, $02, nRst, $04
            B91B8 : B502 8004         
(1)  189/   B91BC : B01A 8006 B0B5 0402 	dc.b	nB3, $1A, nRst, $06, nB3, nE4, $04, $02, nRst, $04, nC4, $02
            B91C4 : 8004 B102         
(1)  190/   B91C8 : AE12 8006 AE04 8002 	dc.b	nA3, $12, nRst, $06, nA3, $04, nRst, $02, nB3, $04, nA3, $02
            B91D0 : B004 AE02         
(1)  191/   B91D4 : B106 AF04 AD26 8006 	dc.b	nC4, $06, nBb3, $04, nAb3, $26, nRst, $06, nC4, $04, nRst, $02
            B91DC : B104 8002         
(1)  192/   B91E0 : B304 8002 B104 8002 	dc.b	nD4, $04, nRst, $02, nC4, $04, nRst, $02, nE4, $04, nE4, $02
            B91E8 : B504 B502         
(1)  193/   B91EC : 8004 B00E 8006 B50C 	dc.b	nRst, $04, nB3, $0E, nRst, $06, nE4, $0C, nG4, $04, nE4, $02
            B91F4 : B804 B502         
(1)  194/   B91F8 : BA0C 8006 B602 8004 	dc.b	nA4, $0C, nRst, $06, nF4, $02, nRst, $04, nE4, $0C, nC4, nA3
            B9200 : B50C B1AE         
(1)  195/   B9204 : B0B1 B304 B102 B304 	dc.b	nB3, nC4, nD4, $04, nC4, $02, nD4, $04, nD4, $02, nRst, $10
            B920C : B302 8010         
(1)  196/   B9210 : A702 A904 AC02 B118 	dc.b	nD3, $02, nE3, $04, nG3, $02, nC4, $18, nRst, $06, nC4, $04
            B9218 : 8006 B104         
(1)  197/   B921C : 8002 B304 B108 B504 	dc.b	nRst, $02, nD4, $04, nC4, $08, nE4, $04, nE4, $02, nRst, $04
            B9224 : B502 8004         
(1)  198/   B9228 : B01A 8006 B0B5 0402 	dc.b	nB3, $1A, nRst, $06, nB3, nE4, $04, $02, nRst, $04, nC4, $02
            B9230 : 8004 B102         
(1)  199/   B9234 : AE12 8006 AE04 8002 	dc.b	nA3, $12, nRst, $06, nA3, $04, nRst, $02, nB3, $04, nA3, $02
            B923C : B004 AE02         
(1)  200/   B9240 : B106 AF04 AD26 8006 	dc.b	nC4, $06, nBb3, $04, nAb3, $26, nRst, $06, nC4, $04, nRst, $02
            B9248 : B104 8002         
(1)  201/   B924C : B304 8002 B104 8002 	dc.b	nD4, $04, nRst, $02, nC4, $04, nRst, $02, nE4, $04, nE4, $02
            B9254 : B504 B502         
(1)  202/   B9258 : 8004 B00E 8006 B50C 	dc.b	nRst, $04, nB3, $0E, nRst, $06, nE4, $0C, nG4, $04, nE4, $02
            B9260 : B804 B502         
(1)  203/   B9264 : BA0C 8006 B602 8004 	dc.b	nA4, $0C, nRst, $06, nF4, $02, nRst, $04, nE4, $0C, nC4, nA3
            B926C : B50C B1AE         
(1)  204/   B9270 : B006                	dc.b	nB3, $06
(1)  205/   B9272 : (MACRO)             	smpsAlterVol        $04
(1)  205/   B9272 : E604                        dc.b    $E6,$04
(1)  206/   B9274 : B602 8004 B50C B1AE 	dc.b	nF4, $02, nRst, $04, nE4, $0C, nC4, nA3, nB3, $06
            B927C : B006               
(1)  207/   B927E : (MACRO)             	smpsAlterVol        $F8
(1)  207/   B927E : E6F8                        dc.b    $E6,$F8
(1)  208/   B9280 : B602 8004 B50C B1AE 	dc.b	nF4, $02, nRst, $04, nE4, $0C, nC4, nA3, nF3, $0A, nE3, $02
            B9288 : AA0A A902         
(1)  209/   B928C : 8030                	dc.b	nRst, $30
(1)  210/   B928E : (MACRO)             	smpsAlterVol        $04
(1)  210/   B928E : E604                        dc.b    $E6,$04
(1)  211/   B9290 : (MACRO)             	smpsJump            CNZ_Jump00
(1)  211/   B9290 : F6                          dc.b    $F6
(1)  211/   B9291 : 7E91                                dc.w    z80_ptr(CNZ_JUMP00)
(1)  212/   B9293 :                     
(1)  213/   B9293 :                     ; PSG1 Data
(1)  214/   B9293 :                     CNZ_PSG1:
(1)  215/   B9293 : 8018                	dc.b	nRst, $18
(1)  216/   B9295 :                     
(1)  217/   B9295 :                     CNZ_Jump06:
(1)  218/   B9295 : 8006 B80C B402 8004 	dc.b	nRst, $06, nG4, $0C, nEb4, $02, nRst, $04, nA4, nAb4, $02, nRst
            B929D : BAB9 0280         
(1)  219/   B92A1 : 04B8 0280 04B4 0880 	dc.b	$04, nG4, $02, nRst, $04, nEb4, $08, nRst, $06, nB3, $02, nRst
            B92A9 : 06B0 0280         
(1)  220/   B92AD : 04B3 B102 8004 B002 	dc.b	$04, nD4, nC4, $02, nRst, $04, nB3, $02, nRst, $18
            B92B5 : 8018               
(1)  221/   B92B7 : (MACRO)             	smpsPSGvoice        fTone_01
(1)  221/   B92B7 : F501                        dc.b    $F5,FTONE_01
(1)  222/   B92B9 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  222/   B92B9 : ECFF                        dc.b    $EC,$FF
(1)  223/   B92BB : (MACRO)             	smpsCall            CNZ_Call02
(1)  223/   B92BB : F8                          dc.b    $F8
(1)  223/   B92BC : 738E                                dc.w    z80_ptr(CNZ_CALL02)
(1)  224/   B92BE : (MACRO)             	smpsPSGAlterVol     $01
(1)  224/   B92BE : EC01                        dc.b    $EC,$01
(1)  225/   B92C0 : (MACRO)             	smpsPSGvoice        $00
(1)  225/   B92C0 : F500                        dc.b    $F5,$00
(1)  226/   B92C2 : (MACRO)             	smpsAlterPitch      $E8
(1)  226/   B92C2 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  226/   B92C2 : FBE8                                dc.b    $FB,$E8
(1)  227/   B92C4 : (MACRO)             	smpsCall            CNZ_Call03
(1)  227/   B92C4 : F8                          dc.b    $F8
(1)  227/   B92C5 : 038F                                dc.w    z80_ptr(CNZ_CALL03)
(1)  228/   B92C7 : (MACRO)             	smpsAlterPitch      $18
(1)  228/   B92C7 :  (MACRO-2)                  smpsChangeTransposition $18
(1)  228/   B92C7 : FB18                                dc.b    $FB,$18
(1)  229/   B92C9 : (MACRO)             	smpsPSGAlterVol     $02
(1)  229/   B92C9 : EC02                        dc.b    $EC,$02
(1)  230/   B92CB : B518 B30C B506 B3B1 	dc.b	nE4, $18, nD4, $0C, nE4, $06, nD4, nC4, $18, nF4
            B92D3 : 18B6               
(1)  231/   B92D5 : (MACRO)             	smpsPSGAlterVol     $FE
(1)  231/   B92D5 : ECFE                        dc.b    $EC,$FE
(1)  232/   B92D7 : 8006 B880 B880 BA80 	dc.b	nRst, $06, nG4, nRst, nG4, nRst, nA4, nRst, nA4
            B92DF : BA               
(1)  233/   B92E0 : (MACRO)             	smpsPSGAlterVol     $03
(1)  233/   B92E0 : EC03                        dc.b    $EC,$03
(1)  234/   B92E2 : C40C C1BD BF06 80   	dc.b	nG5, $0C, nE5, nC5, nD5, $06, nRst
(1)  235/   B92E9 : (MACRO)             	smpsPSGAlterVol     $FC
(1)  235/   B92E9 : ECFC                        dc.b    $EC,$FC
(1)  236/   B92EB : 80B8 80B8 80BA 0C04 	dc.b	nRst, nG4, nRst, nG4, nRst, nA4, $0C, $04, nG4, $02, nRst, $30
            B92F3 : B802 8030         
(1)  237/   B92F7 : (MACRO)             	smpsPSGAlterVol     $01
(1)  237/   B92F7 : EC01                        dc.b    $EC,$01
(1)  238/   B92F9 : (MACRO)             	smpsJump            CNZ_Jump06
(1)  238/   B92F9 : F6                          dc.b    $F6
(1)  238/   B92FA : 9592                                dc.w    z80_ptr(CNZ_JUMP06)
(1)  239/   B92FC :                     
(1)  240/   B92FC :                     ; PSG2 Data
(1)  241/   B92FC :                     CNZ_PSG2:
(1)  242/   B92FC : 8018                	dc.b	nRst, $18
(1)  243/   B92FE :                     
(1)  244/   B92FE :                     CNZ_Jump05:
(1)  245/   B92FE : 8006 C00C BD02 8004 	dc.b	nRst, $06, nEb5, $0C, nC5, $02, nRst, $04, nFs5, nF5, $02, nRst
            B9306 : C3C2 0280         
(1)  246/   B930A : 04C0 0280 04BD 0880 	dc.b	$04, nEb5, $02, nRst, $04, nC5, $08, nRst, $06, nG4, $02, nRst
            B9312 : 06B8 0280         
(1)  247/   B9316 : 04BB B902 8004 B802 	dc.b	$04, nBb4, nAb4, $02, nRst, $04, nG4, $02, nRst, $18
            B931E : 8018               
(1)  248/   B9320 : (MACRO)             	smpsPSGvoice        fTone_01
(1)  248/   B9320 : F501                        dc.b    $F5,FTONE_01
(1)  249/   B9322 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  249/   B9322 : ECFF                        dc.b    $EC,$FF
(1)  250/   B9324 : (MACRO)             	smpsCall            CNZ_Call00
(1)  250/   B9324 : F8                          dc.b    $F8
(1)  250/   B9325 : A98F                                dc.w    z80_ptr(CNZ_CALL00)
(1)  251/   B9327 : (MACRO)             	smpsPSGAlterVol     $01
(1)  251/   B9327 : EC01                        dc.b    $EC,$01
(1)  252/   B9329 : (MACRO)             	smpsPSGvoice        $00
(1)  252/   B9329 : F500                        dc.b    $F5,$00
(1)  253/   B932B : (MACRO)             	smpsAlterPitch      $E8
(1)  253/   B932B :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  253/   B932B : FBE8                                dc.b    $FB,$E8
(1)  254/   B932D : (MACRO)             	smpsCall            CNZ_Call01
(1)  254/   B932D : F8                          dc.b    $F8
(1)  254/   B932E : 1490                                dc.w    z80_ptr(CNZ_CALL01)
(1)  255/   B9330 : (MACRO)             	smpsAlterPitch      $18
(1)  255/   B9330 :  (MACRO-2)                  smpsChangeTransposition $18
(1)  255/   B9330 : FB18                                dc.b    $FB,$18
(1)  256/   B9332 : (MACRO)             	smpsPSGAlterVol     $02
(1)  256/   B9332 : EC02                        dc.b    $EC,$02
(1)  257/   B9334 : B118 B00C B106 B0AE 	dc.b	nC4, $18, nB3, $0C, nC4, $06, nB3, nA3, $18, nC4
            B933C : 18B1               
(1)  258/   B933E : (MACRO)             	smpsPSGAlterVol     $FE
(1)  258/   B933E : ECFE                        dc.b    $EC,$FE
(1)  259/   B9340 : 8006 B580 B580 B680 	dc.b	nRst, $06, nE4, nRst, nE4, nRst, nF4, nRst, nF4
            B9348 : B6               
(1)  260/   B9349 : (MACRO)             	smpsPSGAlterVol     $03
(1)  260/   B9349 : EC03                        dc.b    $EC,$03
(1)  261/   B934B : 80B1 80B1 80B1 80B1 	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, nRst, nC4
(1)  262/   B9353 : (MACRO)             	smpsPSGAlterVol     $FC
(1)  262/   B9353 : ECFC                        dc.b    $EC,$FC
(1)  263/   B9355 : 80B1 80B1 80B1 0C04 	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, $0C, $04, nC4, $02
            B935D : B102               
(1)  264/   B935F : (MACRO)             	smpsPSGAlterVol     $01
(1)  264/   B935F : EC01                        dc.b    $EC,$01
(1)  265/   B9361 : 8030                	dc.b	nRst, $30
(1)  266/   B9363 : (MACRO)             	smpsJump            CNZ_Jump05
(1)  266/   B9363 : F6                          dc.b    $F6
(1)  266/   B9364 : FE92                                dc.w    z80_ptr(CNZ_JUMP05)
(1)  267/   B9366 :                     
(1)  268/   B9366 :                     ; PSG3 Data
(1)  269/   B9366 :                     CNZ_PSG3:
(1)  270/   B9366 : (MACRO)             	smpsPSGform         $E7
(1)  270/   B9366 : F3E7                        dc.b    $F3,$E7
(1)  271/   B9368 : 8018                	dc.b	nRst, $18
(1)  272/   B936A :                     
(1)  273/   B936A :                     CNZ_Loop03:
(1)  274/   B936A : (MACRO)             	smpsCall            CNZ_Call04
(1)  274/   B936A : F8                          dc.b    $F8
(1)  274/   B936B : 8F93                                dc.w    z80_ptr(CNZ_CALL04)
(1)  275/   B936D : (MACRO)             	smpsLoop            $01, $07, CNZ_Loop03
(1)  275/   B936D : F7                          dc.b    $F7
(1)  275/   B936E : 0107                        dc.b    $01,$07
(1)  275/   B9370 : 6A93                                dc.w    z80_ptr(CNZ_LOOP03)
(1)  276/   B9372 : 0402 0402           	dc.b	$04, $02, $04, $02
(1)  277/   B9376 :                     
(1)  278/   B9376 :                     CNZ_Loop04:
(1)  279/   B9376 : (MACRO)             	smpsCall            CNZ_Call04
(1)  279/   B9376 : F8                          dc.b    $F8
(1)  279/   B9377 : 8F93                                dc.w    z80_ptr(CNZ_CALL04)
(1)  280/   B9379 : (MACRO)             	smpsLoop            $01, $1F, CNZ_Loop04
(1)  280/   B9379 : F7                          dc.b    $F7
(1)  280/   B937A : 011F                        dc.b    $01,$1F
(1)  280/   B937C : 7693                                dc.w    z80_ptr(CNZ_LOOP04)
(1)  281/   B937E : 0402 0402           	dc.b	$04, $02, $04, $02
(1)  282/   B9382 :                     
(1)  283/   B9382 :                     CNZ_Loop05:
(1)  284/   B9382 : (MACRO)             	smpsCall            CNZ_Call04
(1)  284/   B9382 : F8                          dc.b    $F8
(1)  284/   B9383 : 8F93                                dc.w    z80_ptr(CNZ_CALL04)
(1)  285/   B9385 : (MACRO)             	smpsLoop            $01, $24, CNZ_Loop05
(1)  285/   B9385 : F7                          dc.b    $F7
(1)  285/   B9386 : 0124                        dc.b    $01,$24
(1)  285/   B9388 : 8293                                dc.w    z80_ptr(CNZ_LOOP05)
(1)  286/   B938A : 8030                	dc.b	nRst, $30
(1)  287/   B938C : (MACRO)             	smpsJump            CNZ_Loop03
(1)  287/   B938C : F6                          dc.b    $F6
(1)  287/   B938D : 6A93                                dc.w    z80_ptr(CNZ_LOOP03)
(1)  288/   B938F :                     
(1)  289/   B938F :                     CNZ_Call04:
(1)  290/   B938F : (MACRO)             	smpsPSGvoice        fTone_01
(1)  290/   B938F : F501                        dc.b    $F5,FTONE_01
(1)  291/   B9391 : C706                	dc.b	nMaxPSG, $06
(1)  292/   B9393 : (MACRO)             	smpsPSGvoice        fTone_02
(1)  292/   B9393 : F502                        dc.b    $F5,FTONE_02
(1)  293/   B9395 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  293/   B9395 : ECFF                        dc.b    $EC,$FF
(1)  294/   B9397 : 04                  	dc.b	$04
(1)  295/   B9398 : (MACRO)             	smpsPSGvoice        fTone_01
(1)  295/   B9398 : F501                        dc.b    $F5,FTONE_01
(1)  296/   B939A : (MACRO)             	smpsPSGAlterVol     $01
(1)  296/   B939A : EC01                        dc.b    $EC,$01
(1)  297/   B939C : 02                  	dc.b	$02
(1)  298/   B939D : (MACRO)             	smpsReturn
(1)  298/   B939D : F9                                  dc.b    $F9
(1)  299/   B939E :                     
(1)  300/   B939E :                     ; DAC Data
(1)  301/   B939E :                     CNZ_DAC:
(1)  302/   B939E : 8106 8181 0482 0206 	dc.b	dKick, $06, dKick, dKick, $04, dSnare, $02, $06
(1)  303/   B93A6 :                     
(1)  304/   B93A6 :                     CNZ_Loop00:
(1)  305/   B93A6 : 8106 82             	dc.b	dKick, $06, dSnare
(1)  306/   B93A9 : (MACRO)             	smpsLoop            $00, $04, CNZ_Loop00
(1)  306/   B93A9 : F7                          dc.b    $F7
(1)  306/   B93AA : 0004                        dc.b    $00,$04
(1)  306/   B93AC : A693                                dc.w    z80_ptr(CNZ_LOOP00)
(1)  307/   B93AE : 8106 8282 0406 0681 	dc.b	dKick, $06, dSnare, dSnare, $04, $06, $06, dKick, $02, $06, $06, dSnare
            B93B6 : 0206 0682         
(1)  308/   B93BA :                     
(1)  309/   B93BA :                     CNZ_Loop01:
(1)  310/   B93BA : 8182                	dc.b	dKick, dSnare
(1)  311/   B93BC : (MACRO)             	smpsLoop            $00, $1C, CNZ_Loop01
(1)  311/   B93BC : F7                          dc.b    $F7
(1)  311/   B93BD : 001C                        dc.b    $00,$1C
(1)  311/   B93BF : BA93                                dc.w    z80_ptr(CNZ_LOOP01)
(1)  312/   B93C1 : 8182 8204 0606 8102 	dc.b	dKick, dSnare, dSnare, $04, $06, $06, dKick, $02, $06, $06, dSnare
            B93C9 : 0606 82            
(1)  313/   B93CC :                     
(1)  314/   B93CC :                     CNZ_Loop02:
(1)  315/   B93CC : 8182                	dc.b	dKick, dSnare
(1)  316/   B93CE : (MACRO)             	smpsLoop            $00, $20, CNZ_Loop02
(1)  316/   B93CE : F7                          dc.b    $F7
(1)  316/   B93CF : 0020                        dc.b    $00,$20
(1)  316/   B93D1 : CC93                                dc.w    z80_ptr(CNZ_LOOP02)
(1)  317/   B93D3 : 8182 8182 8182 8204 	dc.b	dKick, dSnare, dKick, dSnare, dKick, dSnare, dSnare, $04, $06, $02, nRst, $28
            B93DB : 0602 8028         
(1)  318/   B93DF : 8202 06             	dc.b	dSnare, $02, $06
(1)  319/   B93E2 : (MACRO)             	smpsJump            CNZ_Loop00
(1)  319/   B93E2 : F6                          dc.b    $F6
(1)  319/   B93E3 : A693                                dc.w    z80_ptr(CNZ_LOOP00)
(1)  320/   B93E5 :                     
(1)  321/   B93E5 :                     CNZ_Voices:
(1)  322/   B93E5 :                     ;	Voice $00
(1)  323/   B93E5 :                     ;	$3A
(1)  324/   B93E5 :                     ;	$20, $23, $60, $01, 	$1E, $1F, $1F, $1F, 	$0A, $0A, $0B, $0A
(1)  325/   B93E5 :                     ;	$05, $07, $0A, $08, 	$A4, $85, $96, $78, 	$21, $25, $28, $00
(1)  326/   B93E5 : (MACRO)             	smpsVcAlgorithm     $02
(1)  326/   B93E5 : =$2                 vcAlgorithm set $02
(1)  327/   B93E5 : (MACRO)             	smpsVcFeedback      $07
(1)  327/   B93E5 : =$7                 vcFeedback set $07
(1)  328/   B93E5 : (MACRO)             	smpsVcUnusedBits    $00
(1)  328/   B93E5 : =$0                 vcUnusedBits set $00
(1)  328/   B93E5 : =$0                 vcD1R1Unk set 0
(1)  328/   B93E5 : =$0                 vcD1R2Unk set 0
(1)  328/   B93E5 : =$0                 vcD1R3Unk set 0
(1)  328/   B93E5 : =$0                 vcD1R4Unk set 0
(1)  329/   B93E5 : (MACRO)             	smpsVcDetune        $00, $06, $02, $02
(1)  329/   B93E5 : =$0                 vcDT1 set $00
(1)  329/   B93E5 : =$6                 vcDT2 set $06
(1)  329/   B93E5 : =$2                 vcDT3 set $02
(1)  329/   B93E5 : =$2                 vcDT4 set $02
(1)  330/   B93E5 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $03, $00
(1)  330/   B93E5 : =$1                 vcCF1 set $01
(1)  330/   B93E5 : =$0                 vcCF2 set $00
(1)  330/   B93E5 : =$3                 vcCF3 set $03
(1)  330/   B93E5 : =$0                 vcCF4 set $00
(1)  331/   B93E5 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  331/   B93E5 : =$0                 vcRS1 set $00
(1)  331/   B93E5 : =$0                 vcRS2 set $00
(1)  331/   B93E5 : =$0                 vcRS3 set $00
(1)  331/   B93E5 : =$0                 vcRS4 set $00
(1)  332/   B93E5 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1E
(1)  332/   B93E5 : =$1F                vcAR1 set $1F
(1)  332/   B93E5 : =$1F                vcAR2 set $1F
(1)  332/   B93E5 : =$1F                vcAR3 set $1F
(1)  332/   B93E5 : =$1E                vcAR4 set $1E
(1)  333/   B93E5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  333/   B93E5 : =$0                 vcAM1 set $00<<5
(1)  333/   B93E5 : =$0                 vcAM2 set $00<<5
(1)  333/   B93E5 : =$0                 vcAM3 set $00<<5
(1)  333/   B93E5 : =$0                 vcAM4 set $00<<5
(1)  334/   B93E5 : (MACRO)             	smpsVcDecayRate1    $0A, $0B, $0A, $0A
(1)  334/   B93E5 : =$A                 vcD1R1 set $0A
(1)  334/   B93E5 : =$B                 vcD1R2 set $0B
(1)  334/   B93E5 : =$A                 vcD1R3 set $0A
(1)  334/   B93E5 : =$A                 vcD1R4 set $0A
(1)  335/   B93E5 : (MACRO)             	smpsVcDecayRate2    $08, $0A, $07, $05
(1)  335/   B93E5 : =$8                 vcD2R1 set $08
(1)  335/   B93E5 : =$A                 vcD2R2 set $0A
(1)  335/   B93E5 : =$7                 vcD2R3 set $07
(1)  335/   B93E5 : =$5                 vcD2R4 set $05
(1)  336/   B93E5 : (MACRO)             	smpsVcDecayLevel    $07, $09, $08, $0A
(1)  336/   B93E5 : =$7                 vcDL1 set $07
(1)  336/   B93E5 : =$9                 vcDL2 set $09
(1)  336/   B93E5 : =$8                 vcDL3 set $08
(1)  336/   B93E5 : =$A                 vcDL4 set $0A
(1)  337/   B93E5 : (MACRO)             	smpsVcReleaseRate   $08, $06, $05, $04
(1)  337/   B93E5 : =$8                 vcRR1 set $08
(1)  337/   B93E5 : =$6                 vcRR2 set $06
(1)  337/   B93E5 : =$5                 vcRR3 set $05
(1)  337/   B93E5 : =$4                 vcRR4 set $04
(1)  338/   B93E5 : (MACRO)             	smpsVcTotalLevel    $00, $28, $25, $21
(1)  338/   B93E5 : =$0                 vcTL1 set $00
(1)  338/   B93E5 : =$28                vcTL2 set $28
(1)  338/   B93E5 : =$25                vcTL3 set $25
(1)  338/   B93E5 : =$21                vcTL4 set $21
(1)  338/   B93E5 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  338/   B93E6 :                     ;   0     1     2     3     4     5     6     7
(1)  338/   B93E6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  338/   B93E6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  338/   B93E6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  338/   B93E6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  338/   B93E6 : =$80                vcTLMask1 set $80
(1)  338/   B93E6 :                     
(1)  338/   B93E6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  338/   B93E6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  338/   B93E6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  338/   B93E6 : =$80                vcTLMask1 set $80
(1)  338/   B93E6 : =$0                 vcTL1 set vcTL1&$7F
(1)  338/   B93E6 : =$28                vcTL2 set vcTL2&$7F
(1)  338/   B93E6 : =$25                vcTL3 set vcTL3&$7F
(1)  338/   B93E6 : =$21                vcTL4 set vcTL4&$7F
(1)  338/   B93E6 :                     
(1)  338/   B93E6 : 2023 6001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  338/   B93EA : 1E1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  338/   B93EE : 0A0A 0B0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  338/   B93F2 : 0507 0A08                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  338/   B93F6 : A485 9678                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  338/   B93FA : 2125 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  339/   B93FE :                     
(1)  340/   B93FE :                     ;	Voice $01
(1)  341/   B93FE :                     ;	$3A
(1)  342/   B93FE :                     ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
(1)  343/   B93FE :                     ;	$02, $00, $00, $00, 	$18, $18, $28, $28, 	$19, $20, $2A, $00
(1)  344/   B93FE : (MACRO)             	smpsVcAlgorithm     $02
(1)  344/   B93FE : =$2                 vcAlgorithm set $02
(1)  345/   B93FE : (MACRO)             	smpsVcFeedback      $07
(1)  345/   B93FE : =$7                 vcFeedback set $07
(1)  346/   B93FE : (MACRO)             	smpsVcUnusedBits    $00
(1)  346/   B93FE : =$0                 vcUnusedBits set $00
(1)  346/   B93FE : =$0                 vcD1R1Unk set 0
(1)  346/   B93FE : =$0                 vcD1R2Unk set 0
(1)  346/   B93FE : =$0                 vcD1R3Unk set 0
(1)  346/   B93FE : =$0                 vcD1R4Unk set 0
(1)  347/   B93FE : (MACRO)             	smpsVcDetune        $04, $03, $05, $03
(1)  347/   B93FE : =$4                 vcDT1 set $04
(1)  347/   B93FE : =$3                 vcDT2 set $03
(1)  347/   B93FE : =$5                 vcDT3 set $05
(1)  347/   B93FE : =$3                 vcDT4 set $03
(1)  348/   B93FE : (MACRO)             	smpsVcCoarseFreq    $02, $02, $06, $02
(1)  348/   B93FE : =$2                 vcCF1 set $02
(1)  348/   B93FE : =$2                 vcCF2 set $02
(1)  348/   B93FE : =$6                 vcCF3 set $06
(1)  348/   B93FE : =$2                 vcCF4 set $02
(1)  349/   B93FE : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(1)  349/   B93FE : =$1                 vcRS1 set $01
(1)  349/   B93FE : =$0                 vcRS2 set $00
(1)  349/   B93FE : =$1                 vcRS3 set $01
(1)  349/   B93FE : =$2                 vcRS4 set $02
(1)  350/   B93FE : (MACRO)             	smpsVcAttackRate    $12, $15, $0F, $0D
(1)  350/   B93FE : =$12                vcAR1 set $12
(1)  350/   B93FE : =$15                vcAR2 set $15
(1)  350/   B93FE : =$F                 vcAR3 set $0F
(1)  350/   B93FE : =$D                 vcAR4 set $0D
(1)  351/   B93FE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  351/   B93FE : =$0                 vcAM1 set $00<<5
(1)  351/   B93FE : =$0                 vcAM2 set $00<<5
(1)  351/   B93FE : =$0                 vcAM3 set $00<<5
(1)  351/   B93FE : =$0                 vcAM4 set $00<<5
(1)  352/   B93FE : (MACRO)             	smpsVcDecayRate1    $04, $07, $08, $06
(1)  352/   B93FE : =$4                 vcD1R1 set $04
(1)  352/   B93FE : =$7                 vcD1R2 set $07
(1)  352/   B93FE : =$8                 vcD1R3 set $08
(1)  352/   B93FE : =$6                 vcD1R4 set $06
(1)  353/   B93FE : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $02
(1)  353/   B93FE : =$0                 vcD2R1 set $00
(1)  353/   B93FE : =$0                 vcD2R2 set $00
(1)  353/   B93FE : =$0                 vcD2R3 set $00
(1)  353/   B93FE : =$2                 vcD2R4 set $02
(1)  354/   B93FE : (MACRO)             	smpsVcDecayLevel    $02, $02, $01, $01
(1)  354/   B93FE : =$2                 vcDL1 set $02
(1)  354/   B93FE : =$2                 vcDL2 set $02
(1)  354/   B93FE : =$1                 vcDL3 set $01
(1)  354/   B93FE : =$1                 vcDL4 set $01
(1)  355/   B93FE : (MACRO)             	smpsVcReleaseRate   $08, $08, $08, $08
(1)  355/   B93FE : =$8                 vcRR1 set $08
(1)  355/   B93FE : =$8                 vcRR2 set $08
(1)  355/   B93FE : =$8                 vcRR3 set $08
(1)  355/   B93FE : =$8                 vcRR4 set $08
(1)  356/   B93FE : (MACRO)             	smpsVcTotalLevel    $00, $2A, $20, $19
(1)  356/   B93FE : =$0                 vcTL1 set $00
(1)  356/   B93FE : =$2A                vcTL2 set $2A
(1)  356/   B93FE : =$20                vcTL3 set $20
(1)  356/   B93FE : =$19                vcTL4 set $19
(1)  356/   B93FE : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  356/   B93FF :                     ;   0     1     2     3     4     5     6     7
(1)  356/   B93FF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  356/   B93FF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  356/   B93FF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  356/   B93FF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  356/   B93FF : =$80                vcTLMask1 set $80
(1)  356/   B93FF :                     
(1)  356/   B93FF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  356/   B93FF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  356/   B93FF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  356/   B93FF : =$80                vcTLMask1 set $80
(1)  356/   B93FF : =$0                 vcTL1 set vcTL1&$7F
(1)  356/   B93FF : =$2A                vcTL2 set vcTL2&$7F
(1)  356/   B93FF : =$20                vcTL3 set vcTL3&$7F
(1)  356/   B93FF : =$19                vcTL4 set vcTL4&$7F
(1)  356/   B93FF :                     
(1)  356/   B93FF : 3256 3242                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  356/   B9403 : 8D4F 1552                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  356/   B9407 : 0608 0704                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  356/   B940B : 0200 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  356/   B940F : 1818 2828                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  356/   B9413 : 1920 2A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  357/   B9417 :                     
(1)  358/   B9417 :                     ;	Voice $02
(1)  359/   B9417 :                     ;	$2C
(1)  360/   B9417 :                     ;	$61, $03, $01, $33, 	$5F, $94, $5F, $94, 	$05, $05, $05, $07
(1)  361/   B9417 :                     ;	$02, $02, $02, $02, 	$1F, $6F, $1F, $AF, 	$1E, $80, $1E, $80
(1)  362/   B9417 : (MACRO)             	smpsVcAlgorithm     $04
(1)  362/   B9417 : =$4                 vcAlgorithm set $04
(1)  363/   B9417 : (MACRO)             	smpsVcFeedback      $05
(1)  363/   B9417 : =$5                 vcFeedback set $05
(1)  364/   B9417 : (MACRO)             	smpsVcUnusedBits    $00
(1)  364/   B9417 : =$0                 vcUnusedBits set $00
(1)  364/   B9417 : =$0                 vcD1R1Unk set 0
(1)  364/   B9417 : =$0                 vcD1R2Unk set 0
(1)  364/   B9417 : =$0                 vcD1R3Unk set 0
(1)  364/   B9417 : =$0                 vcD1R4Unk set 0
(1)  365/   B9417 : (MACRO)             	smpsVcDetune        $03, $00, $00, $06
(1)  365/   B9417 : =$3                 vcDT1 set $03
(1)  365/   B9417 : =$0                 vcDT2 set $00
(1)  365/   B9417 : =$0                 vcDT3 set $00
(1)  365/   B9417 : =$6                 vcDT4 set $06
(1)  366/   B9417 : (MACRO)             	smpsVcCoarseFreq    $03, $01, $03, $01
(1)  366/   B9417 : =$3                 vcCF1 set $03
(1)  366/   B9417 : =$1                 vcCF2 set $01
(1)  366/   B9417 : =$3                 vcCF3 set $03
(1)  366/   B9417 : =$1                 vcCF4 set $01
(1)  367/   B9417 : (MACRO)             	smpsVcRateScale     $02, $01, $02, $01
(1)  367/   B9417 : =$2                 vcRS1 set $02
(1)  367/   B9417 : =$1                 vcRS2 set $01
(1)  367/   B9417 : =$2                 vcRS3 set $02
(1)  367/   B9417 : =$1                 vcRS4 set $01
(1)  368/   B9417 : (MACRO)             	smpsVcAttackRate    $14, $1F, $14, $1F
(1)  368/   B9417 : =$14                vcAR1 set $14
(1)  368/   B9417 : =$1F                vcAR2 set $1F
(1)  368/   B9417 : =$14                vcAR3 set $14
(1)  368/   B9417 : =$1F                vcAR4 set $1F
(1)  369/   B9417 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  369/   B9417 : =$0                 vcAM1 set $00<<5
(1)  369/   B9417 : =$0                 vcAM2 set $00<<5
(1)  369/   B9417 : =$0                 vcAM3 set $00<<5
(1)  369/   B9417 : =$0                 vcAM4 set $00<<5
(1)  370/   B9417 : (MACRO)             	smpsVcDecayRate1    $07, $05, $05, $05
(1)  370/   B9417 : =$7                 vcD1R1 set $07
(1)  370/   B9417 : =$5                 vcD1R2 set $05
(1)  370/   B9417 : =$5                 vcD1R3 set $05
(1)  370/   B9417 : =$5                 vcD1R4 set $05
(1)  371/   B9417 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)  371/   B9417 : =$2                 vcD2R1 set $02
(1)  371/   B9417 : =$2                 vcD2R2 set $02
(1)  371/   B9417 : =$2                 vcD2R3 set $02
(1)  371/   B9417 : =$2                 vcD2R4 set $02
(1)  372/   B9417 : (MACRO)             	smpsVcDecayLevel    $0A, $01, $06, $01
(1)  372/   B9417 : =$A                 vcDL1 set $0A
(1)  372/   B9417 : =$1                 vcDL2 set $01
(1)  372/   B9417 : =$6                 vcDL3 set $06
(1)  372/   B9417 : =$1                 vcDL4 set $01
(1)  373/   B9417 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  373/   B9417 : =$F                 vcRR1 set $0F
(1)  373/   B9417 : =$F                 vcRR2 set $0F
(1)  373/   B9417 : =$F                 vcRR3 set $0F
(1)  373/   B9417 : =$F                 vcRR4 set $0F
(1)  374/   B9417 : (MACRO)             	smpsVcTotalLevel    $80, $1E, $80, $1E
(1)  374/   B9417 : =$80                vcTL1 set $80
(1)  374/   B9417 : =$1E                vcTL2 set $1E
(1)  374/   B9417 : =$80                vcTL3 set $80
(1)  374/   B9417 : =$1E                vcTL4 set $1E
(1)  374/   B9417 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  374/   B9418 :                     ;   0     1     2     3     4     5     6     7
(1)  374/   B9418 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  374/   B9418 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  374/   B9418 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  374/   B9418 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  374/   B9418 : =$80                vcTLMask1 set $80
(1)  374/   B9418 :                     
(1)  374/   B9418 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  374/   B9418 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  374/   B9418 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  374/   B9418 : =$80                vcTLMask1 set $80
(1)  374/   B9418 : =$0                 vcTL1 set vcTL1&$7F
(1)  374/   B9418 : =$1E                vcTL2 set vcTL2&$7F
(1)  374/   B9418 : =$0                 vcTL3 set vcTL3&$7F
(1)  374/   B9418 : =$1E                vcTL4 set vcTL4&$7F
(1)  374/   B9418 :                     
(1)  374/   B9418 : 6103 0133                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  374/   B941C : 5F94 5F94                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  374/   B9420 : 0505 0507                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  374/   B9424 : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  374/   B9428 : 1F6F 1FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  374/   B942C : 1E80 1E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  375/   B9430 :                     
(1)  376/   B9430 :                     
   43/   B9430 :                        Music_0A:	include		"music-improved/8A - DEZ.asm"
(1)    1/   B9430 :                     DEZ_Header:
(1)    2/   B9430 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B9430 :                     
(1)    2/   B9430 : =$2                 SourceDriver set 2
(1)    2/   B9430 :                     
(1)    2/   B9430 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B9430 :                     
(1)    2/   B9430 : =$B9430             songStart set *
(1)    2/   B9430 :                     
(1)    2/   B9430 :                     
(1)    3/   B9430 : (MACRO)             	smpsHeaderVoice     DEZ_Voices
(1)    3/   B9430 : 8198                                dc.w    z80_ptr(DEZ_VOICES)
(1)    4/   B9432 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B9432 : 0603                        dc.b    $06,$03
(1)    5/   B9434 : (MACRO)             	smpsHeaderTempo     $01, $60
(1)    5/   B9434 : 01                          dc.b    $01
(1)    5/   B9435 :  (MACRO-2)                  convertMainTempoMod $60
(1)    5/   B9435 : A0                                          dc.b    s2TempotoS3($60)
(1)    6/   B9436 :                     
(1)    7/   B9436 : (MACRO)             	smpsHeaderDAC       DEZ_DAC
(1)    7/   B9436 :  (MACRO-2)                  CheckedChannelPointer DEZ_DAC
(1)    7/   B9436 : 8297                                dc.w    z80_ptr(DEZ_DAC)
(1)    7/   B9438 : 0000                                dc.w    $00
(1)    8/   B943A : (MACRO)             	smpsHeaderFM        DEZ_FM1,	$00, $16
(1)    8/   B943A :  (MACRO-2)                  CheckedChannelPointer DEZ_FM1
(1)    8/   B943A : 6094                                dc.w    z80_ptr(DEZ_FM1)
(1)    8/   B943C : 0016                        dc.b    $00,$16
(1)    9/   B943E : (MACRO)             	smpsHeaderFM        DEZ_FM2,	$00, $08
(1)    9/   B943E :  (MACRO-2)                  CheckedChannelPointer DEZ_FM2
(1)    9/   B943E : FD96                                dc.w    z80_ptr(DEZ_FM2)
(1)    9/   B9440 : 0008                        dc.b    $00,$08
(1)   10/   B9442 : (MACRO)             	smpsHeaderFM        DEZ_FM3,	$00, $10
(1)   10/   B9442 :  (MACRO-2)                  CheckedChannelPointer DEZ_FM3
(1)   10/   B9442 : 8695                                dc.w    z80_ptr(DEZ_FM3)
(1)   10/   B9444 : 0010                        dc.b    $00,$10
(1)   11/   B9446 : (MACRO)             	smpsHeaderFM        DEZ_FM4,	$00, $10
(1)   11/   B9446 :  (MACRO-2)                  CheckedChannelPointer DEZ_FM4
(1)   11/   B9446 : 2696                                dc.w    z80_ptr(DEZ_FM4)
(1)   11/   B9448 : 0010                        dc.b    $00,$10
(1)   12/   B944A : (MACRO)             	smpsHeaderFM        DEZ_FM5,	$00, $06
(1)   12/   B944A :  (MACRO-2)                  CheckedChannelPointer DEZ_FM5
(1)   12/   B944A : 9596                                dc.w    z80_ptr(DEZ_FM5)
(1)   12/   B944C : 0006                        dc.b    $00,$06
(1)   13/   B944E : (MACRO)             	smpsHeaderPSG       DEZ_PSG1,	$E8, $06, $00, $00
(1)   13/   B944E :  (MACRO-2)                  CheckedChannelPointer DEZ_PSG1
(1)   13/   B944E : 2897                                dc.w    z80_ptr(DEZ_PSG1)
(1)   13/   B9450 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   13/   B9450 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   13/   B9451 : 0600 00                     dc.b    $06,$00,$00
(1)   14/   B9454 : (MACRO)             	smpsHeaderPSG       DEZ_PSG2,	$E8, $06, $00, $00
(1)   14/   B9454 :  (MACRO-2)                  CheckedChannelPointer DEZ_PSG2
(1)   14/   B9454 : 2697                                dc.w    z80_ptr(DEZ_PSG2)
(1)   14/   B9456 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   14/   B9456 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   14/   B9457 : 0600 00                     dc.b    $06,$00,$00
(1)   15/   B945A : (MACRO)             	smpsHeaderPSG       DEZ_PSG3,	$00, $02, $00, fTone_01
(1)   15/   B945A :  (MACRO-2)                  CheckedChannelPointer DEZ_PSG3
(1)   15/   B945A : 6198                                dc.w    z80_ptr(DEZ_PSG3)
(1)   15/   B945C :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B945C : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B945D : 0200 01                     dc.b    $02,$00,FTONE_01
(1)   16/   B9460 :                     
(1)   17/   B9460 :                     ; FM1 Data
(1)   18/   B9460 :                     DEZ_FM1:
(1)   19/   B9460 : (MACRO)             	smpsSetvoice        $00
(1)   19/   B9460 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   B9460 : EF00                                dc.b    $EF,$00
(1)   20/   B9462 :                     
(1)   21/   B9462 :                     DEZ_Jump01:
(1)   22/   B9462 : C604 C4C7 C3C6 C2C5 	dc.b	nA5, $04, nG5, nBb5, nFs5, nA5, nF5, nAb5, nFs5, nB5, nF5, nA5
            B946A : C3C8 C2C6         
(1)   23/   B946E : C4C7 C3C5 C2C6 C4C8 	dc.b	nG5, nBb5, nFs5, nAb5, nF5, nA5, nG5, nB5, nF5, nBb5, nFs5, nC6
            B9476 : C2C7 C3C9         
(1)   24/   B947A : C2C7 C4C8 C3C6 C2C5 	dc.b	nF5, nBb5, nG5, nB5, nFs5, nA5, nF5, nAb5, nFs5, nBb5, nE5, nG5
            B9482 : C3C7 C1C4         
(1)   25/   B9486 : C0C6 C2C7 C3C8 C4C6 	dc.b	nEb5, nA5, nF5, nBb5, nFs5, nB5, nG5, nA5, nF5, nAb5, nFs5, nBb5
            B948E : C2C5 C3C7         
(1)   26/   B9492 : C4C8 C5C9 C6CA C4C9 	dc.b	nG5, nB5, nAb5, nC6, nA5, nCs6, nG5, nC6, nF5, nB5, nFs5, nBb5
            B949A : C2C8 C3C7         
(1)   27/   B949E : C4C6 C2C5 C1C4 C0C6 	dc.b	nG5, nA5, nF5, nAb5, nE5, nG5, nEb5, nA5, nF5, nBb5, nFs5, nB5
            B94A6 : C2C7 C3C8         
(1)   28/   B94AA : C4C9 C5CC C4CB C2C9 	dc.b	nG5, nC6, nAb5, nEb6, nG5, nD6, nF5, nC6, nG5, nB5, nFs5, nBb5
            B94B2 : C4C8 C3C7         
(1)   29/   B94B6 : C4C6 C2C5 C3C8 C2C6 	dc.b	nG5, nA5, nF5, nAb5, nFs5, nB5, nF5, nA5, nG5, nBb5, nFs5, nC6
            B94BE : C4C7 C3C9         
(1)   30/   B94C2 : C2C7 C3C8 C2C6 C1C5 	dc.b	nF5, nBb5, nFs5, nB5, nF5, nA5, nE5, nAb5, nEb5, nA5, nE5, nBb5
            B94CA : C0C6 C1C7         
(1)   31/   B94CE : C2C8 C3C9 C4CB C2C7 	dc.b	nF5, nB5, nFs5, nC6, nG5, nD6, nF5, nBb5, nFs5, nA5, nG5, nB5
            B94D6 : C3C6 C4C8         
(1)   32/   B94DA : C3C7 C2C8 C1C6 C2C7 	dc.b	nFs5, nBb5, nF5, nB5, nE5, nA5, nF5, nBb5, nG5, nB5, nFs5, nA5
            B94E2 : C4C8 C3C6         
(1)   33/   B94E6 : C2C7 C3C9 C1CB C0CA 	dc.b	nF5, nBb5, nFs5, nC6, nE5, nD6, nEb5, nCs6, nF5, nC6, nFs5, nB5
            B94EE : C2C9 C3C8         
(1)   34/   B94F2 : C2C7 C4C6 C3C5 C2C6 	dc.b	nF5, nBb5, nG5, nA5, nFs5, nAb5, nF5, nA5, nFs5, nBb5, nG5, nB5
            B94FA : C3C7 C4C8         
(1)   35/   B94FE : C5C9 C2C6 C3C7 C2C8 	dc.b	nAb5, nC6, nF5, nA5, nFs5, nBb5, nF5, nB5, nE5, nC6, nF5, nB5
            B9506 : C1C9 C2C8         
(1)   36/   B950A : C3C6 C4C7 C3C5 C2C6 	dc.b	nFs5, nA5, nG5, nBb5, nFs5, nAb5, nF5, nA5, nG5, nBb5, nFs5, nB5
            B9512 : C4C7 C3C8         
(1)   37/   B9516 : C2C9 C1C7 C2C6 C3C8 	dc.b	nF5, nC6, nE5, nBb5, nF5, nA5, nFs5, nB5, nG5, nAb5, nF5, nA5
            B951E : C4C5 C2C6         
(1)   38/   B9522 : C3C7 C2C8 C1C9 C0CA 	dc.b	nFs5, nBb5, nF5, nB5, nE5, nC6, nEb5, nCs6, nE5, nBb5, nF5, nA5
            B952A : C1C7 C2C6         
(1)   39/   B952E : C3C5 C4C8 C2C6 C3C7 	dc.b	nFs5, nAb5, nG5, nB5, nF5, nA5, nFs5, nBb5, nG5, nAb5, nF5, nB5
            B9536 : C4C5 C2C8         
(1)   40/   B953A : C1C9 C0C7 C2C6 C3C8 	dc.b	nE5, nC6, nEb5, nBb5, nF5, nA5, nFs5, nB5, nG5, nBb5, nF5, nA5
            B9542 : C4C7 C2C6         
(1)   41/   B9546 : C3C5 C4C8 C2C7 C3C9 	dc.b	nFs5, nAb5, nG5, nB5, nF5, nBb5, nFs5, nC6, nD5, nB5, nF5, nA5
            B954E : BFC8 C2C6         
(1)   42/   B9552 : C3C7 C4C5 C3C6 C2C7 	dc.b	nFs5, nBb5, nG5, nAb5, nFs5, nA5, nF5, nBb5, nE5, nB5, nEb5, nC6
            B955A : C1C8 C0C9         
(1)   43/   B955E : C2CA C3C8 C4C7 C3C6 	dc.b	nF5, nCs6, nFs5, nB5, nG5, nBb5, nFs5, nA5, nF5, nAb5, nEb5, nG5
            B9566 : C2C5 C0C4         
(1)   44/   B956A : C2C6 C3C7 C4C8 C5C9 	dc.b	nF5, nA5, nFs5, nBb5, nG5, nB5, nAb5, nC6, nG5, nBb5, nFs5, nA5
            B9572 : C4C7 C3C6         
(1)   45/   B9576 : C4C8 C2C7 C3C6 C4C8 	dc.b	nG5, nB5, nF5, nBb5, nFs5, nA5, nG5, nB5, nF5, nBb5, nFs5, nA5
            B957E : C2C7 C3C6         
(1)   46/   B9582 : C2                  	dc.b	nF5
(1)   47/   B9583 : (MACRO)             	smpsJump            DEZ_Jump01
(1)   47/   B9583 : F6                          dc.b    $F6
(1)   47/   B9584 : 6294                                dc.w    z80_ptr(DEZ_JUMP01)
(1)   48/   B9586 :                     
(1)   49/   B9586 :                     ; FM3 Data
(1)   50/   B9586 :                     DEZ_FM3:
(1)   51/   B9586 : (MACRO)             	smpsSetvoice        $02
(1)   51/   B9586 :  (MACRO-2)                  smpsFMvoice $02
(1)   51/   B9586 : EF02                                dc.b    $EF,$02
(1)   52/   B9588 : (MACRO)             	smpsModSet          $08, $01, $05, $04
(1)   52/   B9588 : F0                          dc.b    $F0
(1)   52/   B9589 : 0901 0505                           dc.b    $08+1,$01,$05,(($04+1) * $01) & $FF
(1)   52/   B958D :                             ;dc.b   $01,$05,$04
(1)   53/   B958D :                     
(1)   54/   B958D :                     DEZ_Loop06:
(1)   55/   B958D : 8030                	dc.b	nRst, $30
(1)   56/   B958F :                     
(1)   57/   B958F :                     DEZ_Loop05:
(1)   58/   B958F : 8008 CC02 CAC6 80CC 	dc.b	nRst, $08, nEb6, $02, nCs6, nA5, nRst, nEb6, nCs6, nA5, nRst
            B9597 : CAC6 80            
(1)   59/   B959A : (MACRO)             	smpsLoop            $01, $02, DEZ_Loop05
(1)   59/   B959A : F7                          dc.b    $F7
(1)   59/   B959B : 0102                        dc.b    $01,$02
(1)   59/   B959D : 8F95                                dc.w    z80_ptr(DEZ_LOOP05)
(1)   60/   B959F : (MACRO)             	smpsLoop            $00, $02, DEZ_Loop06
(1)   60/   B959F : F7                          dc.b    $F7
(1)   60/   B95A0 : 0002                        dc.b    $00,$02
(1)   60/   B95A2 : 8D95                                dc.w    z80_ptr(DEZ_LOOP06)
(1)   61/   B95A4 : (MACRO)             	smpsCall            DEZ_Call00
(1)   61/   B95A4 : F8                          dc.b    $F8
(1)   61/   B95A5 : F395                                dc.w    z80_ptr(DEZ_CALL00)
(1)   62/   B95A7 : BA10 BC08 BE10 BA08 	dc.b	nA4, $10, nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04
            B95AF : C10C C304         
(1)   63/   B95B3 : C108 BE10 BA08 C610 	dc.b	nE5, $08, nCs5, $10, nA4, $08, nA5, $10, nFs5, $04, nA5, nFs5
            B95BB : C304 C6C3         
(1)   64/   B95BF : 10C1 04C3 C118 C310 	dc.b	$10, nE5, $04, nFs5, nE5, $18, nFs5, $10, nCs5, $08, nA4, $10
            B95C7 : BE08 BA10         
(1)   65/   B95CB : BC08 BE10 BA08 C10C 	dc.b	nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04, nE5, $08
            B95D3 : C304 C108         
(1)   66/   B95D7 : BE10 BA08 C660      	dc.b	nCs5, $10, nA4, $08, nA5, $60
(1)   67/   B95DD :                     
(1)   68/   B95DD :                     DEZ_Loop07:
(1)   69/   B95DD : CD04 CBCA 10        	dc.b	nE6, $04, nD6, nCs6, $10
(1)   70/   B95E2 : (MACRO)             	smpsLoop            $00, $03, DEZ_Loop07
(1)   70/   B95E2 : F7                          dc.b    $F7
(1)   70/   B95E3 : 0003                        dc.b    $00,$03
(1)   70/   B95E5 : DD95                                dc.w    z80_ptr(DEZ_LOOP07)
(1)   71/   B95E7 : CD04 CBCA 08C6 CA30 	dc.b	nE6, $04, nD6, nCs6, $08, nA5, nCs6, $30, nRst
            B95EF : 80               
(1)   72/   B95F0 : (MACRO)             	smpsJump            DEZ_FM3
(1)   72/   B95F0 : F6                          dc.b    $F6
(1)   72/   B95F1 : 8695                                dc.w    z80_ptr(DEZ_FM3)
(1)   73/   B95F3 :                     
(1)   74/   B95F3 :                     DEZ_Call00:
(1)   75/   B95F3 : (MACRO)             	smpsSetvoice        $03
(1)   75/   B95F3 :  (MACRO-2)                  smpsFMvoice $03
(1)   75/   B95F3 : EF03                                dc.b    $EF,$03
(1)   76/   B95F5 : BA10 BC08 BE10 BA08 	dc.b	nA4, $10, nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04
            B95FD : C10C C304         
(1)   77/   B9601 : C108 BE10 BA08 C618 	dc.b	nE5, $08, nCs5, $10, nA4, $08, nA5, $18, nFs5, nE5, nCs5, nA4
            B9609 : C3C1 BEBA         
(1)   78/   B960D : 10BC 08BE 10BA 08C1 	dc.b	$10, nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04, nE5
            B9615 : 0CC3 04C1         
(1)   79/   B9619 : 08BE 10BA 08C6 20C3 	dc.b	$08, nCs5, $10, nA4, $08, nA5, $20, nFs5, $08, nAb5, nA5, $30
            B9621 : 08C5 C630         
(1)   80/   B9625 : (MACRO)             	smpsReturn
(1)   80/   B9625 : F9                                  dc.b    $F9
(1)   81/   B9626 :                     
(1)   82/   B9626 :                     ; FM4 Data
(1)   83/   B9626 :                     DEZ_FM4:
(1)   84/   B9626 : (MACRO)             	smpsSetvoice        $02
(1)   84/   B9626 :  (MACRO-2)                  smpsFMvoice $02
(1)   84/   B9626 : EF02                                dc.b    $EF,$02
(1)   85/   B9628 : (MACRO)             	smpsModSet          $08, $01, $05, $04
(1)   85/   B9628 : F0                          dc.b    $F0
(1)   85/   B9629 : 0901 0505                           dc.b    $08+1,$01,$05,(($04+1) * $01) & $FF
(1)   85/   B962D :                             ;dc.b   $01,$05,$04
(1)   86/   B962D :                     
(1)   87/   B962D :                     DEZ_Loop03:
(1)   88/   B962D : (MACRO)             	smpsAlterNote       $02
(1)   88/   B962D :  (MACRO-2)                  smpsDetune      $02
(1)   88/   B962D : E102                        dc.b    $E1,$02
(1)   89/   B962F : 8030                	dc.b	nRst, $30
(1)   90/   B9631 :                     
(1)   91/   B9631 :                     DEZ_Loop02:
(1)   92/   B9631 : 8008 CC02 CAC6 80CC 	dc.b	nRst, $08, nEb6, $02, nCs6, nA5, nRst, nEb6, nCs6, nA5, nRst
            B9639 : CAC6 80            
(1)   93/   B963C : (MACRO)             	smpsLoop            $01, $02, DEZ_Loop02
(1)   93/   B963C : F7                          dc.b    $F7
(1)   93/   B963D : 0102                        dc.b    $01,$02
(1)   93/   B963F : 3196                                dc.w    z80_ptr(DEZ_LOOP02)
(1)   94/   B9641 : (MACRO)             	smpsLoop            $00, $02, DEZ_Loop03
(1)   94/   B9641 : F7                          dc.b    $F7
(1)   94/   B9642 : 0002                        dc.b    $00,$02
(1)   94/   B9644 : 2D96                                dc.w    z80_ptr(DEZ_LOOP03)
(1)   95/   B9646 : (MACRO)             	smpsCall            DEZ_Call00
(1)   95/   B9646 : F8                          dc.b    $F8
(1)   95/   B9647 : F395                                dc.w    z80_ptr(DEZ_CALL00)
(1)   96/   B9649 : BE10 BF08 C110 BE08 	dc.b	nCs5, $10, nD5, $08, nE5, $10, nCs5, $08, nAb5, $0C, nA5, $04
            B9651 : C50C C604         
(1)   97/   B9655 : C508 C110 BE08 CA10 	dc.b	nAb5, $08, nE5, $10, nCs5, $08, nCs6, $10, nA5, $04, nCs6, nA5
            B965D : C604 CAC6         
(1)   98/   B9661 : 10C5 04C6 C518 C610 	dc.b	$10, nAb5, $04, nA5, nAb5, $18, nA5, $10, nE5, $08, nCs5, $10
            B9669 : C108 BE10         
(1)   99/   B966D : BF08 C110 BE08 C50C 	dc.b	nD5, $08, nE5, $10, nCs5, $08, nAb5, $0C, nA5, $04, nAb5, $08
            B9675 : C604 C508         
(1)  100/   B9679 : C110 BE08 CA60      	dc.b	nE5, $10, nCs5, $08, nCs6, $60
(1)  101/   B967F :                     
(1)  102/   B967F :                     DEZ_Loop04:
(1)  103/   B967F : CA04 C8C6 10        	dc.b	nCs6, $04, nB5, nA5, $10
(1)  104/   B9684 : (MACRO)             	smpsLoop            $00, $03, DEZ_Loop04
(1)  104/   B9684 : F7                          dc.b    $F7
(1)  104/   B9685 : 0003                        dc.b    $00,$03
(1)  104/   B9687 : 7F96                                dc.w    z80_ptr(DEZ_LOOP04)
(1)  105/   B9689 : CA04 C8C6 08C3 C630 	dc.b	nCs6, $04, nB5, nA5, $08, nFs5, nA5, $30, nRst
            B9691 : 80               
(1)  106/   B9692 : (MACRO)             	smpsJump            DEZ_Loop03
(1)  106/   B9692 : F6                          dc.b    $F6
(1)  106/   B9693 : 2D96                                dc.w    z80_ptr(DEZ_LOOP03)
(1)  107/   B9695 :                     
(1)  108/   B9695 :                     ; FM5 Data
(1)  109/   B9695 :                     DEZ_FM5:
(1)  110/   B9695 : (MACRO)             	smpsSetvoice        $05
(1)  110/   B9695 :  (MACRO-2)                  smpsFMvoice $05
(1)  110/   B9695 : EF05                                dc.b    $EF,$05
(1)  111/   B9697 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  111/   B9697 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  111/   B9697 : E800                                dc.b    $E8,$00
(1)  112/   B9699 : (MACRO)             	smpsAlterVol        $0C
(1)  112/   B9699 : E60C                        dc.b    $E6,$0C
(1)  113/   B969B : A230                	dc.b	nA2, $30
(1)  114/   B969D : (MACRO)             	smpsModSet          $10, $01, $FF, $FF
(1)  114/   B969D : F0                          dc.b    $F0
(1)  114/   B969E : 1101 FF00                           dc.b    $10+1,$01,$FF,(($FF+1) * $01) & $FF
(1)  114/   B96A2 :                             ;dc.b   $01,$FF,$FF
(1)  115/   B96A2 : E730 E7             	dc.b	smpsNoAttack, $30, smpsNoAttack
(1)  116/   B96A5 : (MACRO)             	smpsModSet          $00, $01, $10, $FF
(1)  116/   B96A5 : F0                          dc.b    $F0
(1)  116/   B96A6 : 0101 1000                           dc.b    $00+1,$01,$10,(($FF+1) * $01) & $FF
(1)  116/   B96AA :                             ;dc.b   $01,$10,$FF
(1)  117/   B96AA : A008                	dc.b	nG2, $08
(1)  118/   B96AC : (MACRO)             	smpsModOff
(1)  118/   B96AC : FA                                  dc.b    $FA
(1)  119/   B96AD : A540                	dc.b	nC3, $40
(1)  120/   B96AF : (MACRO)             	smpsModSet          $10, $01, $FE, $FF
(1)  120/   B96AF : F0                          dc.b    $F0
(1)  120/   B96B0 : 1101 FE00                           dc.b    $10+1,$01,$FE,(($FF+1) * $01) & $FF
(1)  120/   B96B4 :                             ;dc.b   $01,$FE,$FF
(1)  121/   B96B4 : E718                	dc.b	smpsNoAttack, $18
(1)  122/   B96B6 : (MACRO)             	smpsAlterVol        $F4
(1)  122/   B96B6 : E6F4                        dc.b    $E6,$F4
(1)  123/   B96B8 : (MACRO)             	smpsSetvoice        $04
(1)  123/   B96B8 :  (MACRO-2)                  smpsFMvoice $04
(1)  123/   B96B8 : EF04                                dc.b    $EF,$04
(1)  124/   B96BA : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  124/   B96BA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  124/   B96BA : E809                                dc.b    $E8,$09
(1)  125/   B96BC :                     
(1)  126/   B96BC :                     DEZ_Loop00:
(1)  127/   B96BC : A204 8028 A104 A2A2 	dc.b	nA2, $04, nRst, $28, nAb2, $04, nA2, nA2, $02, nRst, $2A, nA2
            B96C4 : 0280 2AA2         
(1)  128/   B96C8 : 0480 28A1 04A2 A280 	dc.b	$04, nRst, $28, nAb2, $04, nA2, nA2, nRst, $18, nA4, $04, nB4
            B96D0 : 18BA 04BC         
(1)  129/   B96D4 : BDBE                	dc.b	nC5, nCs5
(1)  130/   B96D6 : (MACRO)             	smpsLoop            $00, $04, DEZ_Loop00
(1)  130/   B96D6 : F7                          dc.b    $F7
(1)  130/   B96D7 : 0004                        dc.b    $00,$04
(1)  130/   B96D9 : BC96                                dc.w    z80_ptr(DEZ_LOOP00)
(1)  131/   B96DB :                     
(1)  132/   B96DB :                     DEZ_Loop01:
(1)  133/   B96DB : A204 80BA BAB7 BA   	dc.b	nA2, $04, nRst, nA4, nA4, nFs4, nA4
(1)  134/   B96E2 : (MACRO)             	smpsLoop            $00, $04, DEZ_Loop01
(1)  134/   B96E2 : F7                          dc.b    $F7
(1)  134/   B96E3 : 0004                        dc.b    $00,$04
(1)  134/   B96E5 : DB96                                dc.w    z80_ptr(DEZ_LOOP01)
(1)  135/   B96E7 : A204 8028 A104 A2A2 	dc.b	nA2, $04, nRst, $28, nAb2, $04, nA2, nA2, nA4, nB4, nC5, nCs5
            B96EF : BABC BDBE         
(1)  136/   B96F3 : 8008 BA04 BCBD BE   	dc.b	nRst, $08, nA4, $04, nB4, nC5, nCs5
(1)  137/   B96FA : (MACRO)             	smpsJump            DEZ_FM5
(1)  137/   B96FA : F6                          dc.b    $F6
(1)  137/   B96FB : 9596                                dc.w    z80_ptr(DEZ_FM5)
(1)  138/   B96FD :                     
(1)  139/   B96FD :                     ; FM2 Data
(1)  140/   B96FD :                     DEZ_FM2:
(1)  141/   B96FD : (MACRO)             	smpsSetvoice        $01
(1)  141/   B96FD :  (MACRO-2)                  smpsFMvoice $01
(1)  141/   B96FD : EF01                                dc.b    $EF,$01
(1)  142/   B96FF : (MACRO)             	smpsNoteFill        $0A
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  142/   B96FF :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  142/   B96FF : E80A                                dc.b    $E8,$0A
(1)  143/   B9701 :                     
(1)  144/   B9701 :                     DEZ_Jump00:
(1)  145/   B9701 : 9604 A2A2 96A0 969F 	dc.b	nA1, $04, nA2, nA2, nA1, nG2, nA1, nFs2, nA1, nF2, nF2, nA1
            B9709 : 969E 9E96         
(1)  146/   B970D : 9D96 0280 2E96 04A2 	dc.b	nE2, nA1, $02, nRst, $2E, nA1, $04, nA2, nA2, nA1, nG2, nA1
            B9715 : A296 A096         
(1)  147/   B9719 : 9F96 A5A5 96A5 9602 	dc.b	nFs2, nA1, nC3, nC3, nA1, nC3, nA1, $02, nRst, $2E
            B9721 : 802E               
(1)  148/   B9723 : (MACRO)             	smpsJump            DEZ_Jump00
(1)  148/   B9723 : F6                          dc.b    $F6
(1)  148/   B9724 : 0197                                dc.w    z80_ptr(DEZ_JUMP00)
(1)  149/   B9726 :                     
(1)  150/   B9726 :                     ; PSG2 Data
(1)  151/   B9726 :                     DEZ_PSG2:
(1)  152/   B9726 : (MACRO)             	smpsAlterNote       $FE
(1)  152/   B9726 :  (MACRO-2)                  smpsDetune      $FE
(1)  152/   B9726 : E1FE                        dc.b    $E1,$FE
(1)  153/   B9728 :                     
(1)  154/   B9728 :                     ; PSG1 Data
(1)  155/   B9728 :                     DEZ_PSG1:
(1)  156/   B9728 : 8018                	dc.b	nRst, $18
(1)  157/   B972A : (MACRO)             	smpsLoop            $00, $18, DEZ_PSG1
(1)  157/   B972A : F7                          dc.b    $F7
(1)  157/   B972B : 0018                        dc.b    $00,$18
(1)  157/   B972D : 2897                                dc.w    z80_ptr(DEZ_PSG1)
(1)  158/   B972F :                     
(1)  159/   B972F :                     DEZ_Loop09:
(1)  160/   B972F : (MACRO)             	smpsModSet          $06, $02, $FE, $FF
(1)  160/   B972F : F0                          dc.b    $F0
(1)  160/   B9730 : 0702 FE00                           dc.b    $06+1,$02,$FE,(($FF+1) * $02) & $FF
(1)  160/   B9734 :                             ;dc.b   $02,$FE,$FF
(1)  161/   B9734 : A018                	dc.b	nG2, $18
(1)  162/   B9736 : (MACRO)             	smpsModOff
(1)  162/   B9736 : FA                                  dc.b    $FA
(1)  163/   B9737 : A230                	dc.b	nA2, $30
(1)  164/   B9739 : (MACRO)             	smpsModSet          $06, $01, $01, $FF
(1)  164/   B9739 : F0                          dc.b    $F0
(1)  164/   B973A : 0701 0100                           dc.b    $06+1,$01,$01,(($FF+1) * $01) & $FF
(1)  164/   B973E :                             ;dc.b   $01,$01,$FF
(1)  165/   B973E : E718                	dc.b	smpsNoAttack, $18
(1)  166/   B9740 : (MACRO)             	smpsModSet          $00, $01, $FA, $FF
(1)  166/   B9740 : F0                          dc.b    $F0
(1)  166/   B9741 : 0101 FA00                           dc.b    $00+1,$01,$FA,(($FF+1) * $01) & $FF
(1)  166/   B9745 :                             ;dc.b   $01,$FA,$FF
(1)  167/   B9745 : A008                	dc.b	nG2, $08
(1)  168/   B9747 : (MACRO)             	smpsModOff
(1)  168/   B9747 : FA                                  dc.b    $FA
(1)  169/   B9748 : A540                	dc.b	nC3, $40
(1)  170/   B974A : (MACRO)             	smpsModSet          $00, $01, $01, $FF
(1)  170/   B974A : F0                          dc.b    $F0
(1)  170/   B974B : 0101 0100                           dc.b    $00+1,$01,$01,(($FF+1) * $01) & $FF
(1)  170/   B974F :                             ;dc.b   $01,$01,$FF
(1)  171/   B974F : E718                	dc.b	smpsNoAttack, $18
(1)  172/   B9751 : (MACRO)             	smpsLoop            $00, $02, DEZ_Loop09
(1)  172/   B9751 : F7                          dc.b    $F7
(1)  172/   B9752 : 0002                        dc.b    $00,$02
(1)  172/   B9754 : 2F97                                dc.w    z80_ptr(DEZ_LOOP09)
(1)  173/   B9756 :                     
(1)  174/   B9756 :                     DEZ_Loop0A:
(1)  175/   B9756 : (MACRO)             	smpsModSet          $00, $01, $FD, $FF
(1)  175/   B9756 : F0                          dc.b    $F0
(1)  175/   B9757 : 0101 FD00                           dc.b    $00+1,$01,$FD,(($FF+1) * $01) & $FF
(1)  175/   B975B :                             ;dc.b   $01,$FD,$FF
(1)  176/   B975B : A008                	dc.b	nG2, $08
(1)  177/   B975D : (MACRO)             	smpsModOff
(1)  177/   B975D : FA                                  dc.b    $FA
(1)  178/   B975E : A210                	dc.b	nA2, $10
(1)  179/   B9760 : (MACRO)             	smpsModSet          $00, $01, $FC, $FF
(1)  179/   B9760 : F0                          dc.b    $F0
(1)  179/   B9761 : 0101 FC00                           dc.b    $00+1,$01,$FC,(($FF+1) * $01) & $FF
(1)  179/   B9765 :                             ;dc.b   $01,$FC,$FF
(1)  180/   B9765 : 08                  	dc.b	$08
(1)  181/   B9766 : (MACRO)             	smpsModOff
(1)  181/   B9766 : FA                                  dc.b    $FA
(1)  182/   B9767 : A510                	dc.b	nC3, $10
(1)  183/   B9769 : (MACRO)             	smpsLoop            $00, $02, DEZ_Loop0A
(1)  183/   B9769 : F7                          dc.b    $F7
(1)  183/   B976A : 0002                        dc.b    $00,$02
(1)  183/   B976C : 5697                                dc.w    z80_ptr(DEZ_LOOP0A)
(1)  184/   B976E : (MACRO)             	smpsModSet          $00, $01, $FD, $FF
(1)  184/   B976E : F0                          dc.b    $F0
(1)  184/   B976F : 0101 FD00                           dc.b    $00+1,$01,$FD,(($FF+1) * $01) & $FF
(1)  184/   B9773 :                             ;dc.b   $01,$FD,$FF
(1)  185/   B9773 : A008                	dc.b	nG2, $08
(1)  186/   B9775 : (MACRO)             	smpsModOff
(1)  186/   B9775 : FA                                  dc.b    $FA
(1)  187/   B9776 : A240                	dc.b	nA2, $40
(1)  188/   B9778 : (MACRO)             	smpsModSet          $06, $01, $01, $FF
(1)  188/   B9778 : F0                          dc.b    $F0
(1)  188/   B9779 : 0701 0100                           dc.b    $06+1,$01,$01,(($FF+1) * $01) & $FF
(1)  188/   B977D :                             ;dc.b   $01,$01,$FF
(1)  189/   B977D : E718                	dc.b	smpsNoAttack, $18
(1)  190/   B977F : (MACRO)             	smpsJump            DEZ_PSG1
(1)  190/   B977F : F6                          dc.b    $F6
(1)  190/   B9780 : 2897                                dc.w    z80_ptr(DEZ_PSG1)
(1)  191/   B9782 :                     
(1)  192/   B9782 :                     ; DAC Data
(1)  193/   B9782 :                     DEZ_DAC:
(1)  194/   B9782 : 8030 8204 8181 1082 	dc.b	nRst, $30, dSnare, $04, dKick, dKick, $10, dSnare, $04, dKick, dKick, $10
            B978A : 0481 8110         
(1)  195/   B978E : 8030 8204 8180 8180 	dc.b	nRst, $30, dSnare, $04, dKick, nRst, dKick, nRst, dKick, dKick, dKick, dSnare
            B9796 : 8181 8182         
(1)  196/   B979A : 0882 8108 8204 0408 	dc.b	$08, dSnare, dKick, $08, dSnare, $04, $04, $08, dKick, dSnare, dSnare, dKick
            B97A2 : 8182 8281         
(1)  197/   B97A6 : 820C 0481 0882 8281 	dc.b	dSnare, $0C, $04, dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $08, $04
            B97AE : 8204 0804         
(1)  198/   B97B2 : 8108 8282 8182 0408 	dc.b	dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $08, $04, dKick, $08, dSnare
            B97BA : 0481 0882         
(1)  199/   B97BE : 0404 0881 8282 8182 	dc.b	$04, $04, $08, dKick, dSnare, dSnare, dKick, dSnare, $04, $08, $04, dKick
            B97C6 : 0408 0481         
(1)  200/   B97CA : 0882 8281 0882 0404 	dc.b	$08, dSnare, dSnare, dKick, $08, dSnare, $04, $04, $08, dKick, dSnare, dSnare
            B97D2 : 0881 8282         
(1)  201/   B97D6 : 8182 0408 0481 0882 	dc.b	dKick, dSnare, $04, $08, $04, dKick, $08, dSnare, dSnare, dKick, dSnare, $04
            B97DE : 8281 8204         
(1)  202/   B97E2 : 8281 8281 0882 8281 	dc.b	dSnare, dKick, dSnare, dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $08, $04
            B97EA : 8204 0804         
(1)  203/   B97EE : 8108 8282 8108 8204 	dc.b	dKick, $08, dSnare, dSnare, dKick, $08, dSnare, $04, $04, $08, dKick, dSnare
            B97F6 : 0408 8182         
(1)  204/   B97FA : 8281 8204 0804 8108 	dc.b	dSnare, dKick, dSnare, $04, $08, $04, dKick, $08, dSnare, dSnare, dKick, $04
            B9802 : 8282 8104         
(1)  205/   B9806 : 8182 8182 8181 0882 	dc.b	dKick, dSnare, dKick, dSnare, dKick, dKick, $08, dSnare, dSnare, dKick, dSnare, $04
            B980E : 8281 8204         
(1)  206/   B9812 : 0804 8108 8282 8182 	dc.b	$08, $04, dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $04, $08, dKick
            B981A : 0404 0881         
(1)  207/   B981E : 8282 8182 0408 0481 	dc.b	dSnare, dSnare, dKick, dSnare, $04, $08, $04, dKick, $08, dSnare, dSnare, dSnare
            B9826 : 0882 8282         
(1)  208/   B982A : 0481 0804 8281 8108 	dc.b	$04, dKick, $08, $04, dSnare, dKick, dKick, $08, dSnare, dSnare, dKick, $08
            B9832 : 8282 8108         
(1)  209/   B9836 : 8204 8282 8281 0882 	dc.b	dSnare, $04, dSnare, dSnare, dSnare, dKick, $08, dSnare, dSnare, dKick, $08, dSnare
            B983E : 8281 0882         
(1)  210/   B9842 : 0482 8282 8108 8282 	dc.b	$04, dSnare, dSnare, dSnare, dKick, $08, dSnare, dSnare, dKick, $08, dSnare, $04
            B984A : 8108 8204         
(1)  211/   B984E : 0804 8204 8108 0482 	dc.b	$08, $04, dSnare, $04, dKick, $08, $04, dSnare, dKick, dSnare, $04, dKick
            B9856 : 8182 0481         
(1)  212/   B985A : 0804 8281           	dc.b	$08, $04, dSnare, dKick
(1)  213/   B985E : (MACRO)             	smpsJump            DEZ_DAC
(1)  213/   B985E : F6                          dc.b    $F6
(1)  213/   B985F : 8297                                dc.w    z80_ptr(DEZ_DAC)
(1)  214/   B9861 :                     
(1)  215/   B9861 :                     ; PSG3 Data
(1)  216/   B9861 :                     DEZ_PSG3:
(1)  217/   B9861 : (MACRO)             	smpsPSGform         $E7
(1)  217/   B9861 : F3E7                        dc.b    $F3,$E7
(1)  218/   B9863 :                     
(1)  219/   B9863 :                     DEZ_Jump02:
(1)  220/   B9863 : 8008 C7C7 8008 C7C7 	dc.b	nRst, $08, nMaxPSG, nMaxPSG, nRst, $08, nMaxPSG, nMaxPSG, nRst, $30, nRst, $08
            B986B : 8030 8008         
(1)  221/   B986F : C7C7 8008 C7C7 8030 	dc.b	nMaxPSG, nMaxPSG, nRst, $08, nMaxPSG, nMaxPSG, nRst, $30
(1)  222/   B9877 :                     
(1)  223/   B9877 :                     DEZ_Loop08:
(1)  224/   B9877 : 8018                	dc.b	nRst, $18
(1)  225/   B9879 : (MACRO)             	smpsLoop            $00, $28, DEZ_Loop08
(1)  225/   B9879 : F7                          dc.b    $F7
(1)  225/   B987A : 0028                        dc.b    $00,$28
(1)  225/   B987C : 7798                                dc.w    z80_ptr(DEZ_LOOP08)
(1)  226/   B987E : (MACRO)             	smpsJump            DEZ_Jump02
(1)  226/   B987E : F6                          dc.b    $F6
(1)  226/   B987F : 6398                                dc.w    z80_ptr(DEZ_JUMP02)
(1)  227/   B9881 :                     
(1)  228/   B9881 :                     DEZ_Voices:
(1)  229/   B9881 :                     ;	Voice $00
(1)  230/   B9881 :                     ;	$30
(1)  231/   B9881 :                     ;	$75, $75, $71, $31, 	$D8, $58, $96, $94, 	$01, $1B, $03, $08
(1)  232/   B9881 :                     ;	$01, $04, $01, $01, 	$FF, $2F, $3F, $3F, 	$34, $29, $10, $80
(1)  233/   B9881 : (MACRO)             	smpsVcAlgorithm     $00
(1)  233/   B9881 : =$0                 vcAlgorithm set $00
(1)  234/   B9881 : (MACRO)             	smpsVcFeedback      $06
(1)  234/   B9881 : =$6                 vcFeedback set $06
(1)  235/   B9881 : (MACRO)             	smpsVcUnusedBits    $00
(1)  235/   B9881 : =$0                 vcUnusedBits set $00
(1)  235/   B9881 : =$0                 vcD1R1Unk set 0
(1)  235/   B9881 : =$0                 vcD1R2Unk set 0
(1)  235/   B9881 : =$0                 vcD1R3Unk set 0
(1)  235/   B9881 : =$0                 vcD1R4Unk set 0
(1)  236/   B9881 : (MACRO)             	smpsVcDetune        $03, $07, $07, $07
(1)  236/   B9881 : =$3                 vcDT1 set $03
(1)  236/   B9881 : =$7                 vcDT2 set $07
(1)  236/   B9881 : =$7                 vcDT3 set $07
(1)  236/   B9881 : =$7                 vcDT4 set $07
(1)  237/   B9881 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $05, $05
(1)  237/   B9881 : =$1                 vcCF1 set $01
(1)  237/   B9881 : =$1                 vcCF2 set $01
(1)  237/   B9881 : =$5                 vcCF3 set $05
(1)  237/   B9881 : =$5                 vcCF4 set $05
(1)  238/   B9881 : (MACRO)             	smpsVcRateScale     $02, $02, $01, $03
(1)  238/   B9881 : =$2                 vcRS1 set $02
(1)  238/   B9881 : =$2                 vcRS2 set $02
(1)  238/   B9881 : =$1                 vcRS3 set $01
(1)  238/   B9881 : =$3                 vcRS4 set $03
(1)  239/   B9881 : (MACRO)             	smpsVcAttackRate    $14, $16, $18, $18
(1)  239/   B9881 : =$14                vcAR1 set $14
(1)  239/   B9881 : =$16                vcAR2 set $16
(1)  239/   B9881 : =$18                vcAR3 set $18
(1)  239/   B9881 : =$18                vcAR4 set $18
(1)  240/   B9881 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  240/   B9881 : =$0                 vcAM1 set $00<<5
(1)  240/   B9881 : =$0                 vcAM2 set $00<<5
(1)  240/   B9881 : =$0                 vcAM3 set $00<<5
(1)  240/   B9881 : =$0                 vcAM4 set $00<<5
(1)  241/   B9881 : (MACRO)             	smpsVcDecayRate1    $08, $03, $1B, $01
(1)  241/   B9881 : =$8                 vcD1R1 set $08
(1)  241/   B9881 : =$3                 vcD1R2 set $03
(1)  241/   B9881 : =$1B                vcD1R3 set $1B
(1)  241/   B9881 : =$1                 vcD1R4 set $01
(1)  242/   B9881 : (MACRO)             	smpsVcDecayRate2    $01, $01, $04, $01
(1)  242/   B9881 : =$1                 vcD2R1 set $01
(1)  242/   B9881 : =$1                 vcD2R2 set $01
(1)  242/   B9881 : =$4                 vcD2R3 set $04
(1)  242/   B9881 : =$1                 vcD2R4 set $01
(1)  243/   B9881 : (MACRO)             	smpsVcDecayLevel    $03, $03, $02, $0F
(1)  243/   B9881 : =$3                 vcDL1 set $03
(1)  243/   B9881 : =$3                 vcDL2 set $03
(1)  243/   B9881 : =$2                 vcDL3 set $02
(1)  243/   B9881 : =$F                 vcDL4 set $0F
(1)  244/   B9881 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  244/   B9881 : =$F                 vcRR1 set $0F
(1)  244/   B9881 : =$F                 vcRR2 set $0F
(1)  244/   B9881 : =$F                 vcRR3 set $0F
(1)  244/   B9881 : =$F                 vcRR4 set $0F
(1)  245/   B9881 : (MACRO)             	smpsVcTotalLevel    $00, $10, $29, $34
(1)  245/   B9881 : =$0                 vcTL1 set $00
(1)  245/   B9881 : =$10                vcTL2 set $10
(1)  245/   B9881 : =$29                vcTL3 set $29
(1)  245/   B9881 : =$34                vcTL4 set $34
(1)  245/   B9881 : 30                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  245/   B9882 :                     ;   0     1     2     3     4     5     6     7
(1)  245/   B9882 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  245/   B9882 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  245/   B9882 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  245/   B9882 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  245/   B9882 : =$80                vcTLMask1 set $80
(1)  245/   B9882 :                     
(1)  245/   B9882 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  245/   B9882 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  245/   B9882 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  245/   B9882 : =$80                vcTLMask1 set $80
(1)  245/   B9882 : =$0                 vcTL1 set vcTL1&$7F
(1)  245/   B9882 : =$10                vcTL2 set vcTL2&$7F
(1)  245/   B9882 : =$29                vcTL3 set vcTL3&$7F
(1)  245/   B9882 : =$34                vcTL4 set vcTL4&$7F
(1)  245/   B9882 :                     
(1)  245/   B9882 : 7575 7131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  245/   B9886 : D858 9694                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  245/   B988A : 011B 0308                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  245/   B988E : 0104 0101                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  245/   B9892 : FF2F 3F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  245/   B9896 : 3429 1080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  246/   B989A :                     
(1)  247/   B989A :                     ;	Voice $01
(1)  248/   B989A :                     ;	$3A
(1)  249/   B989A :                     ;	$32, $11, $72, $11, 	$1F, $1F, $9F, $1F, 	$03, $0A, $03, $0A
(1)  250/   B989A :                     ;	$02, $02, $02, $02, 	$AF, $7F, $AF, $7F, 	$1E, $00, $28, $80
(1)  251/   B989A : (MACRO)             	smpsVcAlgorithm     $02
(1)  251/   B989A : =$2                 vcAlgorithm set $02
(1)  252/   B989A : (MACRO)             	smpsVcFeedback      $07
(1)  252/   B989A : =$7                 vcFeedback set $07
(1)  253/   B989A : (MACRO)             	smpsVcUnusedBits    $00
(1)  253/   B989A : =$0                 vcUnusedBits set $00
(1)  253/   B989A : =$0                 vcD1R1Unk set 0
(1)  253/   B989A : =$0                 vcD1R2Unk set 0
(1)  253/   B989A : =$0                 vcD1R3Unk set 0
(1)  253/   B989A : =$0                 vcD1R4Unk set 0
(1)  254/   B989A : (MACRO)             	smpsVcDetune        $01, $07, $01, $03
(1)  254/   B989A : =$1                 vcDT1 set $01
(1)  254/   B989A : =$7                 vcDT2 set $07
(1)  254/   B989A : =$1                 vcDT3 set $01
(1)  254/   B989A : =$3                 vcDT4 set $03
(1)  255/   B989A : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $02
(1)  255/   B989A : =$1                 vcCF1 set $01
(1)  255/   B989A : =$2                 vcCF2 set $02
(1)  255/   B989A : =$1                 vcCF3 set $01
(1)  255/   B989A : =$2                 vcCF4 set $02
(1)  256/   B989A : (MACRO)             	smpsVcRateScale     $00, $02, $00, $00
(1)  256/   B989A : =$0                 vcRS1 set $00
(1)  256/   B989A : =$2                 vcRS2 set $02
(1)  256/   B989A : =$0                 vcRS3 set $00
(1)  256/   B989A : =$0                 vcRS4 set $00
(1)  257/   B989A : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  257/   B989A : =$1F                vcAR1 set $1F
(1)  257/   B989A : =$1F                vcAR2 set $1F
(1)  257/   B989A : =$1F                vcAR3 set $1F
(1)  257/   B989A : =$1F                vcAR4 set $1F
(1)  258/   B989A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  258/   B989A : =$0                 vcAM1 set $00<<5
(1)  258/   B989A : =$0                 vcAM2 set $00<<5
(1)  258/   B989A : =$0                 vcAM3 set $00<<5
(1)  258/   B989A : =$0                 vcAM4 set $00<<5
(1)  259/   B989A : (MACRO)             	smpsVcDecayRate1    $0A, $03, $0A, $03
(1)  259/   B989A : =$A                 vcD1R1 set $0A
(1)  259/   B989A : =$3                 vcD1R2 set $03
(1)  259/   B989A : =$A                 vcD1R3 set $0A
(1)  259/   B989A : =$3                 vcD1R4 set $03
(1)  260/   B989A : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)  260/   B989A : =$2                 vcD2R1 set $02
(1)  260/   B989A : =$2                 vcD2R2 set $02
(1)  260/   B989A : =$2                 vcD2R3 set $02
(1)  260/   B989A : =$2                 vcD2R4 set $02
(1)  261/   B989A : (MACRO)             	smpsVcDecayLevel    $07, $0A, $07, $0A
(1)  261/   B989A : =$7                 vcDL1 set $07
(1)  261/   B989A : =$A                 vcDL2 set $0A
(1)  261/   B989A : =$7                 vcDL3 set $07
(1)  261/   B989A : =$A                 vcDL4 set $0A
(1)  262/   B989A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  262/   B989A : =$F                 vcRR1 set $0F
(1)  262/   B989A : =$F                 vcRR2 set $0F
(1)  262/   B989A : =$F                 vcRR3 set $0F
(1)  262/   B989A : =$F                 vcRR4 set $0F
(1)  263/   B989A : (MACRO)             	smpsVcTotalLevel    $00, $28, $00, $1E
(1)  263/   B989A : =$0                 vcTL1 set $00
(1)  263/   B989A : =$28                vcTL2 set $28
(1)  263/   B989A : =$0                 vcTL3 set $00
(1)  263/   B989A : =$1E                vcTL4 set $1E
(1)  263/   B989A : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  263/   B989B :                     ;   0     1     2     3     4     5     6     7
(1)  263/   B989B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  263/   B989B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  263/   B989B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  263/   B989B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  263/   B989B : =$80                vcTLMask1 set $80
(1)  263/   B989B :                     
(1)  263/   B989B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  263/   B989B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  263/   B989B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  263/   B989B : =$80                vcTLMask1 set $80
(1)  263/   B989B : =$0                 vcTL1 set vcTL1&$7F
(1)  263/   B989B : =$28                vcTL2 set vcTL2&$7F
(1)  263/   B989B : =$0                 vcTL3 set vcTL3&$7F
(1)  263/   B989B : =$1E                vcTL4 set vcTL4&$7F
(1)  263/   B989B :                     
(1)  263/   B989B : 3211 7211                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  263/   B989F : 1F1F 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  263/   B98A3 : 030A 030A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  263/   B98A7 : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  263/   B98AB : AF7F AF7F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  263/   B98AF : 1E00 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  264/   B98B3 :                     
(1)  265/   B98B3 :                     ;	Voice $02
(1)  266/   B98B3 :                     ;	$3A
(1)  267/   B98B3 :                     ;	$11, $15, $01, $11, 	$59, $59, $5C, $4E, 	$0A, $0B, $0D, $04
(1)  268/   B98B3 :                     ;	$00, $00, $00, $00, 	$1F, $5F, $2F, $0F, 	$1A, $0E, $2E, $80
(1)  269/   B98B3 : (MACRO)             	smpsVcAlgorithm     $02
(1)  269/   B98B3 : =$2                 vcAlgorithm set $02
(1)  270/   B98B3 : (MACRO)             	smpsVcFeedback      $07
(1)  270/   B98B3 : =$7                 vcFeedback set $07
(1)  271/   B98B3 : (MACRO)             	smpsVcUnusedBits    $00
(1)  271/   B98B3 : =$0                 vcUnusedBits set $00
(1)  271/   B98B3 : =$0                 vcD1R1Unk set 0
(1)  271/   B98B3 : =$0                 vcD1R2Unk set 0
(1)  271/   B98B3 : =$0                 vcD1R3Unk set 0
(1)  271/   B98B3 : =$0                 vcD1R4Unk set 0
(1)  272/   B98B3 : (MACRO)             	smpsVcDetune        $01, $00, $01, $01
(1)  272/   B98B3 : =$1                 vcDT1 set $01
(1)  272/   B98B3 : =$0                 vcDT2 set $00
(1)  272/   B98B3 : =$1                 vcDT3 set $01
(1)  272/   B98B3 : =$1                 vcDT4 set $01
(1)  273/   B98B3 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $05, $01
(1)  273/   B98B3 : =$1                 vcCF1 set $01
(1)  273/   B98B3 : =$1                 vcCF2 set $01
(1)  273/   B98B3 : =$5                 vcCF3 set $05
(1)  273/   B98B3 : =$1                 vcCF4 set $01
(1)  274/   B98B3 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  274/   B98B3 : =$1                 vcRS1 set $01
(1)  274/   B98B3 : =$1                 vcRS2 set $01
(1)  274/   B98B3 : =$1                 vcRS3 set $01
(1)  274/   B98B3 : =$1                 vcRS4 set $01
(1)  275/   B98B3 : (MACRO)             	smpsVcAttackRate    $0E, $1C, $19, $19
(1)  275/   B98B3 : =$E                 vcAR1 set $0E
(1)  275/   B98B3 : =$1C                vcAR2 set $1C
(1)  275/   B98B3 : =$19                vcAR3 set $19
(1)  275/   B98B3 : =$19                vcAR4 set $19
(1)  276/   B98B3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  276/   B98B3 : =$0                 vcAM1 set $00<<5
(1)  276/   B98B3 : =$0                 vcAM2 set $00<<5
(1)  276/   B98B3 : =$0                 vcAM3 set $00<<5
(1)  276/   B98B3 : =$0                 vcAM4 set $00<<5
(1)  277/   B98B3 : (MACRO)             	smpsVcDecayRate1    $04, $0D, $0B, $0A
(1)  277/   B98B3 : =$4                 vcD1R1 set $04
(1)  277/   B98B3 : =$D                 vcD1R2 set $0D
(1)  277/   B98B3 : =$B                 vcD1R3 set $0B
(1)  277/   B98B3 : =$A                 vcD1R4 set $0A
(1)  278/   B98B3 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  278/   B98B3 : =$0                 vcD2R1 set $00
(1)  278/   B98B3 : =$0                 vcD2R2 set $00
(1)  278/   B98B3 : =$0                 vcD2R3 set $00
(1)  278/   B98B3 : =$0                 vcD2R4 set $00
(1)  279/   B98B3 : (MACRO)             	smpsVcDecayLevel    $00, $02, $05, $01
(1)  279/   B98B3 : =$0                 vcDL1 set $00
(1)  279/   B98B3 : =$2                 vcDL2 set $02
(1)  279/   B98B3 : =$5                 vcDL3 set $05
(1)  279/   B98B3 : =$1                 vcDL4 set $01
(1)  280/   B98B3 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  280/   B98B3 : =$F                 vcRR1 set $0F
(1)  280/   B98B3 : =$F                 vcRR2 set $0F
(1)  280/   B98B3 : =$F                 vcRR3 set $0F
(1)  280/   B98B3 : =$F                 vcRR4 set $0F
(1)  281/   B98B3 : (MACRO)             	smpsVcTotalLevel    $00, $2E, $0E, $1A
(1)  281/   B98B3 : =$0                 vcTL1 set $00
(1)  281/   B98B3 : =$2E                vcTL2 set $2E
(1)  281/   B98B3 : =$E                 vcTL3 set $0E
(1)  281/   B98B3 : =$1A                vcTL4 set $1A
(1)  281/   B98B3 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  281/   B98B4 :                     ;   0     1     2     3     4     5     6     7
(1)  281/   B98B4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  281/   B98B4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  281/   B98B4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  281/   B98B4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  281/   B98B4 : =$80                vcTLMask1 set $80
(1)  281/   B98B4 :                     
(1)  281/   B98B4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  281/   B98B4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  281/   B98B4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  281/   B98B4 : =$80                vcTLMask1 set $80
(1)  281/   B98B4 : =$0                 vcTL1 set vcTL1&$7F
(1)  281/   B98B4 : =$2E                vcTL2 set vcTL2&$7F
(1)  281/   B98B4 : =$E                 vcTL3 set vcTL3&$7F
(1)  281/   B98B4 : =$1A                vcTL4 set vcTL4&$7F
(1)  281/   B98B4 :                     
(1)  281/   B98B4 : 1115 0111                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  281/   B98B8 : 5959 5C4E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  281/   B98BC : 0A0B 0D04                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  281/   B98C0 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  281/   B98C4 : 1F5F 2F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  281/   B98C8 : 1A0E 2E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  282/   B98CC :                     
(1)  283/   B98CC :                     ;	Voice $03
(1)  284/   B98CC :                     ;	$06
(1)  285/   B98CC :                     ;	$01, $33, $72, $31, 	$0A, $8C, $4C, $52, 	$00, $00, $00, $00
(1)  286/   B98CC :                     ;	$01, $00, $01, $00, 	$0F, $0F, $2F, $0F, 	$4D, $87, $80, $91
(1)  287/   B98CC : (MACRO)             	smpsVcAlgorithm     $06
(1)  287/   B98CC : =$6                 vcAlgorithm set $06
(1)  288/   B98CC : (MACRO)             	smpsVcFeedback      $00
(1)  288/   B98CC : =$0                 vcFeedback set $00
(1)  289/   B98CC : (MACRO)             	smpsVcUnusedBits    $00
(1)  289/   B98CC : =$0                 vcUnusedBits set $00
(1)  289/   B98CC : =$0                 vcD1R1Unk set 0
(1)  289/   B98CC : =$0                 vcD1R2Unk set 0
(1)  289/   B98CC : =$0                 vcD1R3Unk set 0
(1)  289/   B98CC : =$0                 vcD1R4Unk set 0
(1)  290/   B98CC : (MACRO)             	smpsVcDetune        $03, $07, $03, $00
(1)  290/   B98CC : =$3                 vcDT1 set $03
(1)  290/   B98CC : =$7                 vcDT2 set $07
(1)  290/   B98CC : =$3                 vcDT3 set $03
(1)  290/   B98CC : =$0                 vcDT4 set $00
(1)  291/   B98CC : (MACRO)             	smpsVcCoarseFreq    $01, $02, $03, $01
(1)  291/   B98CC : =$1                 vcCF1 set $01
(1)  291/   B98CC : =$2                 vcCF2 set $02
(1)  291/   B98CC : =$3                 vcCF3 set $03
(1)  291/   B98CC : =$1                 vcCF4 set $01
(1)  292/   B98CC : (MACRO)             	smpsVcRateScale     $01, $01, $02, $00
(1)  292/   B98CC : =$1                 vcRS1 set $01
(1)  292/   B98CC : =$1                 vcRS2 set $01
(1)  292/   B98CC : =$2                 vcRS3 set $02
(1)  292/   B98CC : =$0                 vcRS4 set $00
(1)  293/   B98CC : (MACRO)             	smpsVcAttackRate    $12, $0C, $0C, $0A
(1)  293/   B98CC : =$12                vcAR1 set $12
(1)  293/   B98CC : =$C                 vcAR2 set $0C
(1)  293/   B98CC : =$C                 vcAR3 set $0C
(1)  293/   B98CC : =$A                 vcAR4 set $0A
(1)  294/   B98CC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  294/   B98CC : =$0                 vcAM1 set $00<<5
(1)  294/   B98CC : =$0                 vcAM2 set $00<<5
(1)  294/   B98CC : =$0                 vcAM3 set $00<<5
(1)  294/   B98CC : =$0                 vcAM4 set $00<<5
(1)  295/   B98CC : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  295/   B98CC : =$0                 vcD1R1 set $00
(1)  295/   B98CC : =$0                 vcD1R2 set $00
(1)  295/   B98CC : =$0                 vcD1R3 set $00
(1)  295/   B98CC : =$0                 vcD1R4 set $00
(1)  296/   B98CC : (MACRO)             	smpsVcDecayRate2    $00, $01, $00, $01
(1)  296/   B98CC : =$0                 vcD2R1 set $00
(1)  296/   B98CC : =$1                 vcD2R2 set $01
(1)  296/   B98CC : =$0                 vcD2R3 set $00
(1)  296/   B98CC : =$1                 vcD2R4 set $01
(1)  297/   B98CC : (MACRO)             	smpsVcDecayLevel    $00, $02, $00, $00
(1)  297/   B98CC : =$0                 vcDL1 set $00
(1)  297/   B98CC : =$2                 vcDL2 set $02
(1)  297/   B98CC : =$0                 vcDL3 set $00
(1)  297/   B98CC : =$0                 vcDL4 set $00
(1)  298/   B98CC : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  298/   B98CC : =$F                 vcRR1 set $0F
(1)  298/   B98CC : =$F                 vcRR2 set $0F
(1)  298/   B98CC : =$F                 vcRR3 set $0F
(1)  298/   B98CC : =$F                 vcRR4 set $0F
(1)  299/   B98CC : (MACRO)             	smpsVcTotalLevel    $11, $00, $07, $4D
(1)  299/   B98CC : =$11                vcTL1 set $11
(1)  299/   B98CC : =$0                 vcTL2 set $00
(1)  299/   B98CC : =$7                 vcTL3 set $07
(1)  299/   B98CC : =$4D                vcTL4 set $4D
(1)  299/   B98CC : 06                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  299/   B98CD :                     ;   0     1     2     3     4     5     6     7
(1)  299/   B98CD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  299/   B98CD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  299/   B98CD : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  299/   B98CD : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  299/   B98CD : =$80                vcTLMask1 set $80
(1)  299/   B98CD :                     
(1)  299/   B98CD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  299/   B98CD : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  299/   B98CD : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  299/   B98CD : =$80                vcTLMask1 set $80
(1)  299/   B98CD : =$11                vcTL1 set vcTL1&$7F
(1)  299/   B98CD : =$0                 vcTL2 set vcTL2&$7F
(1)  299/   B98CD : =$7                 vcTL3 set vcTL3&$7F
(1)  299/   B98CD : =$4D                vcTL4 set vcTL4&$7F
(1)  299/   B98CD :                     
(1)  299/   B98CD : 0133 7231                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  299/   B98D1 : 0A8C 4C52                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  299/   B98D5 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  299/   B98D9 : 0100 0100                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  299/   B98DD : 0F0F 2F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  299/   B98E1 : 4D87 8091                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  300/   B98E5 :                     
(1)  301/   B98E5 :                     ;	Voice $04
(1)  302/   B98E5 :                     ;	$3A
(1)  303/   B98E5 :                     ;	$01, $02, $01, $01, 	$10, $0E, $14, $10, 	$0C, $0E, $0E, $0E
(1)  304/   B98E5 :                     ;	$00, $00, $00, $00, 	$0F, $FF, $7F, $1F, 	$1C, $28, $31, $80
(1)  305/   B98E5 : (MACRO)             	smpsVcAlgorithm     $02
(1)  305/   B98E5 : =$2                 vcAlgorithm set $02
(1)  306/   B98E5 : (MACRO)             	smpsVcFeedback      $07
(1)  306/   B98E5 : =$7                 vcFeedback set $07
(1)  307/   B98E5 : (MACRO)             	smpsVcUnusedBits    $00
(1)  307/   B98E5 : =$0                 vcUnusedBits set $00
(1)  307/   B98E5 : =$0                 vcD1R1Unk set 0
(1)  307/   B98E5 : =$0                 vcD1R2Unk set 0
(1)  307/   B98E5 : =$0                 vcD1R3Unk set 0
(1)  307/   B98E5 : =$0                 vcD1R4Unk set 0
(1)  308/   B98E5 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  308/   B98E5 : =$0                 vcDT1 set $00
(1)  308/   B98E5 : =$0                 vcDT2 set $00
(1)  308/   B98E5 : =$0                 vcDT3 set $00
(1)  308/   B98E5 : =$0                 vcDT4 set $00
(1)  309/   B98E5 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $02, $01
(1)  309/   B98E5 : =$1                 vcCF1 set $01
(1)  309/   B98E5 : =$1                 vcCF2 set $01
(1)  309/   B98E5 : =$2                 vcCF3 set $02
(1)  309/   B98E5 : =$1                 vcCF4 set $01
(1)  310/   B98E5 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  310/   B98E5 : =$0                 vcRS1 set $00
(1)  310/   B98E5 : =$0                 vcRS2 set $00
(1)  310/   B98E5 : =$0                 vcRS3 set $00
(1)  310/   B98E5 : =$0                 vcRS4 set $00
(1)  311/   B98E5 : (MACRO)             	smpsVcAttackRate    $10, $14, $0E, $10
(1)  311/   B98E5 : =$10                vcAR1 set $10
(1)  311/   B98E5 : =$14                vcAR2 set $14
(1)  311/   B98E5 : =$E                 vcAR3 set $0E
(1)  311/   B98E5 : =$10                vcAR4 set $10
(1)  312/   B98E5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  312/   B98E5 : =$0                 vcAM1 set $00<<5
(1)  312/   B98E5 : =$0                 vcAM2 set $00<<5
(1)  312/   B98E5 : =$0                 vcAM3 set $00<<5
(1)  312/   B98E5 : =$0                 vcAM4 set $00<<5
(1)  313/   B98E5 : (MACRO)             	smpsVcDecayRate1    $0E, $0E, $0E, $0C
(1)  313/   B98E5 : =$E                 vcD1R1 set $0E
(1)  313/   B98E5 : =$E                 vcD1R2 set $0E
(1)  313/   B98E5 : =$E                 vcD1R3 set $0E
(1)  313/   B98E5 : =$C                 vcD1R4 set $0C
(1)  314/   B98E5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  314/   B98E5 : =$0                 vcD2R1 set $00
(1)  314/   B98E5 : =$0                 vcD2R2 set $00
(1)  314/   B98E5 : =$0                 vcD2R3 set $00
(1)  314/   B98E5 : =$0                 vcD2R4 set $00
(1)  315/   B98E5 : (MACRO)             	smpsVcDecayLevel    $01, $07, $0F, $00
(1)  315/   B98E5 : =$1                 vcDL1 set $01
(1)  315/   B98E5 : =$7                 vcDL2 set $07
(1)  315/   B98E5 : =$F                 vcDL3 set $0F
(1)  315/   B98E5 : =$0                 vcDL4 set $00
(1)  316/   B98E5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  316/   B98E5 : =$F                 vcRR1 set $0F
(1)  316/   B98E5 : =$F                 vcRR2 set $0F
(1)  316/   B98E5 : =$F                 vcRR3 set $0F
(1)  316/   B98E5 : =$F                 vcRR4 set $0F
(1)  317/   B98E5 : (MACRO)             	smpsVcTotalLevel    $00, $31, $28, $1C
(1)  317/   B98E5 : =$0                 vcTL1 set $00
(1)  317/   B98E5 : =$31                vcTL2 set $31
(1)  317/   B98E5 : =$28                vcTL3 set $28
(1)  317/   B98E5 : =$1C                vcTL4 set $1C
(1)  317/   B98E5 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  317/   B98E6 :                     ;   0     1     2     3     4     5     6     7
(1)  317/   B98E6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  317/   B98E6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  317/   B98E6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  317/   B98E6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  317/   B98E6 : =$80                vcTLMask1 set $80
(1)  317/   B98E6 :                     
(1)  317/   B98E6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  317/   B98E6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  317/   B98E6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  317/   B98E6 : =$80                vcTLMask1 set $80
(1)  317/   B98E6 : =$0                 vcTL1 set vcTL1&$7F
(1)  317/   B98E6 : =$31                vcTL2 set vcTL2&$7F
(1)  317/   B98E6 : =$28                vcTL3 set vcTL3&$7F
(1)  317/   B98E6 : =$1C                vcTL4 set vcTL4&$7F
(1)  317/   B98E6 :                     
(1)  317/   B98E6 : 0102 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  317/   B98EA : 100E 1410                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  317/   B98EE : 0C0E 0E0E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  317/   B98F2 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  317/   B98F6 : 0FFF 7F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  317/   B98FA : 1C28 3180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  318/   B98FE :                     
(1)  319/   B98FE :                     ;	Voice $05
(1)  320/   B98FE :                     ;	$39
(1)  321/   B98FE :                     ;	$02, $01, $02, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)  322/   B98FE :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1B, $32, $28, $80
(1)  323/   B98FE : (MACRO)             	smpsVcAlgorithm     $01
(1)  323/   B98FE : =$1                 vcAlgorithm set $01
(1)  324/   B98FE : (MACRO)             	smpsVcFeedback      $07
(1)  324/   B98FE : =$7                 vcFeedback set $07
(1)  325/   B98FE : (MACRO)             	smpsVcUnusedBits    $00
(1)  325/   B98FE : =$0                 vcUnusedBits set $00
(1)  325/   B98FE : =$0                 vcD1R1Unk set 0
(1)  325/   B98FE : =$0                 vcD1R2Unk set 0
(1)  325/   B98FE : =$0                 vcD1R3Unk set 0
(1)  325/   B98FE : =$0                 vcD1R4Unk set 0
(1)  326/   B98FE : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  326/   B98FE : =$0                 vcDT1 set $00
(1)  326/   B98FE : =$0                 vcDT2 set $00
(1)  326/   B98FE : =$0                 vcDT3 set $00
(1)  326/   B98FE : =$0                 vcDT4 set $00
(1)  327/   B98FE : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $02
(1)  327/   B98FE : =$1                 vcCF1 set $01
(1)  327/   B98FE : =$2                 vcCF2 set $02
(1)  327/   B98FE : =$1                 vcCF3 set $01
(1)  327/   B98FE : =$2                 vcCF4 set $02
(1)  328/   B98FE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  328/   B98FE : =$0                 vcRS1 set $00
(1)  328/   B98FE : =$0                 vcRS2 set $00
(1)  328/   B98FE : =$0                 vcRS3 set $00
(1)  328/   B98FE : =$0                 vcRS4 set $00
(1)  329/   B98FE : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  329/   B98FE : =$1F                vcAR1 set $1F
(1)  329/   B98FE : =$1F                vcAR2 set $1F
(1)  329/   B98FE : =$1F                vcAR3 set $1F
(1)  329/   B98FE : =$1F                vcAR4 set $1F
(1)  330/   B98FE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  330/   B98FE : =$0                 vcAM1 set $00<<5
(1)  330/   B98FE : =$0                 vcAM2 set $00<<5
(1)  330/   B98FE : =$0                 vcAM3 set $00<<5
(1)  330/   B98FE : =$0                 vcAM4 set $00<<5
(1)  331/   B98FE : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  331/   B98FE : =$0                 vcD1R1 set $00
(1)  331/   B98FE : =$0                 vcD1R2 set $00
(1)  331/   B98FE : =$0                 vcD1R3 set $00
(1)  331/   B98FE : =$0                 vcD1R4 set $00
(1)  332/   B98FE : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  332/   B98FE : =$0                 vcD2R1 set $00
(1)  332/   B98FE : =$0                 vcD2R2 set $00
(1)  332/   B98FE : =$0                 vcD2R3 set $00
(1)  332/   B98FE : =$0                 vcD2R4 set $00
(1)  333/   B98FE : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  333/   B98FE : =$0                 vcDL1 set $00
(1)  333/   B98FE : =$0                 vcDL2 set $00
(1)  333/   B98FE : =$0                 vcDL3 set $00
(1)  333/   B98FE : =$0                 vcDL4 set $00
(1)  334/   B98FE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  334/   B98FE : =$F                 vcRR1 set $0F
(1)  334/   B98FE : =$F                 vcRR2 set $0F
(1)  334/   B98FE : =$F                 vcRR3 set $0F
(1)  334/   B98FE : =$F                 vcRR4 set $0F
(1)  335/   B98FE : (MACRO)             	smpsVcTotalLevel    $00, $28, $32, $1B
(1)  335/   B98FE : =$0                 vcTL1 set $00
(1)  335/   B98FE : =$28                vcTL2 set $28
(1)  335/   B98FE : =$32                vcTL3 set $32
(1)  335/   B98FE : =$1B                vcTL4 set $1B
(1)  335/   B98FE : 39                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  335/   B98FF :                     ;   0     1     2     3     4     5     6     7
(1)  335/   B98FF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  335/   B98FF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  335/   B98FF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  335/   B98FF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  335/   B98FF : =$80                vcTLMask1 set $80
(1)  335/   B98FF :                     
(1)  335/   B98FF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  335/   B98FF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  335/   B98FF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  335/   B98FF : =$80                vcTLMask1 set $80
(1)  335/   B98FF : =$0                 vcTL1 set vcTL1&$7F
(1)  335/   B98FF : =$28                vcTL2 set vcTL2&$7F
(1)  335/   B98FF : =$32                vcTL3 set vcTL3&$7F
(1)  335/   B98FF : =$1B                vcTL4 set vcTL4&$7F
(1)  335/   B98FF :                     
(1)  335/   B98FF : 0201 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  335/   B9903 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  335/   B9907 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  335/   B990B : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  335/   B990F : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  335/   B9913 : 1B32 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  336/   B9917 :                     
(1)  337/   B9917 :                     
   44/   B9917 :                        Music_0B:	include		"music-improved/8B - MCZ.asm"
(1)    1/   B9917 :                     MCZ_Header:
(1)    2/   B9917 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B9917 :                     
(1)    2/   B9917 : =$2                 SourceDriver set 2
(1)    2/   B9917 :                     
(1)    2/   B9917 : =$0                 SourceSMPS2ASM set 0
(1)    2/   B9917 :                     
(1)    2/   B9917 : =$B9917             songStart set *
(1)    2/   B9917 :                     
(1)    2/   B9917 :                     
(1)    3/   B9917 : (MACRO)             	smpsHeaderVoice     MCZ_Voices
(1)    3/   B9917 : 0C9F                                dc.w    z80_ptr(MCZ_VOICES)
(1)    4/   B9919 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B9919 : 0603                        dc.b    $06,$03
(1)    5/   B991B : (MACRO)             	smpsHeaderTempo     $01, $B6
(1)    5/   B991B : 01                          dc.b    $01
(1)    5/   B991C :  (MACRO-2)                  convertMainTempoMod $B6
(1)    5/   B991C : 4A                                          dc.b    s2TempotoS3($B6)
(1)    6/   B991D :                     
(1)    7/   B991D : (MACRO)             	smpsHeaderDAC       MCZ_DAC
(1)    7/   B991D :  (MACRO-2)                  CheckedChannelPointer MCZ_DAC
(1)    7/   B991D : E19E                                dc.w    z80_ptr(MCZ_DAC)
(1)    7/   B991F : 0000                                dc.w    $00
(1)    8/   B9921 : (MACRO)             	smpsHeaderFM        MCZ_FM1,	$00, $0C
(1)    8/   B9921 :  (MACRO-2)                  CheckedChannelPointer MCZ_FM1
(1)    8/   B9921 : FB9A                                dc.w    z80_ptr(MCZ_FM1)
(1)    8/   B9923 : 000C                        dc.b    $00,$0C
(1)    9/   B9925 : (MACRO)             	smpsHeaderFM        MCZ_FM2,	$00, $0A
(1)    9/   B9925 :  (MACRO-2)                  CheckedChannelPointer MCZ_FM2
(1)    9/   B9925 : 4D9D                                dc.w    z80_ptr(MCZ_FM2)
(1)    9/   B9927 : 000A                        dc.b    $00,$0A
(1)   10/   B9929 : (MACRO)             	smpsHeaderFM        MCZ_FM3,	$00, $0C
(1)   10/   B9929 :  (MACRO-2)                  CheckedChannelPointer MCZ_FM3
(1)   10/   B9929 : 799C                                dc.w    z80_ptr(MCZ_FM3)
(1)   10/   B992B : 000C                        dc.b    $00,$0C
(1)   11/   B992D : (MACRO)             	smpsHeaderFM        MCZ_FM4,	$00, $10
(1)   11/   B992D :  (MACRO-2)                  CheckedChannelPointer MCZ_FM4
(1)   11/   B992D : BB9D                                dc.w    z80_ptr(MCZ_FM4)
(1)   11/   B992F : 0010                        dc.b    $00,$10
(1)   12/   B9931 : (MACRO)             	smpsHeaderFM        MCZ_FM5,	$00, $10
(1)   12/   B9931 :  (MACRO-2)                  CheckedChannelPointer MCZ_FM5
(1)   12/   B9931 : D799                                dc.w    z80_ptr(MCZ_FM5)
(1)   12/   B9933 : 0010                        dc.b    $00,$10
(1)   13/   B9935 : (MACRO)             	smpsHeaderPSG       MCZ_PSG1,	$DC, $04, $00, fTone_0B
(1)   13/   B9935 :  (MACRO-2)                  CheckedChannelPointer MCZ_PSG1
(1)   13/   B9935 : 669B                                dc.w    z80_ptr(MCZ_PSG1)
(1)   13/   B9937 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   13/   B9937 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   13/   B9938 : 0400 0B                     dc.b    $04,$00,FTONE_0B
(1)   14/   B993B : (MACRO)             	smpsHeaderPSG       MCZ_PSG2,	$DC, $02, $00, fTone_01
(1)   14/   B993B :  (MACRO-2)                  CheckedChannelPointer MCZ_PSG2
(1)   14/   B993B : CC9B                                dc.w    z80_ptr(MCZ_PSG2)
(1)   14/   B993D :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   B993D : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   B993E : 0200 01                     dc.b    $02,$00,FTONE_01
(1)   15/   B9941 : (MACRO)             	smpsHeaderPSG       MCZ_PSG3,	$00, $03, $00, fTone_02
(1)   15/   B9941 :  (MACRO-2)                  CheckedChannelPointer MCZ_PSG3
(1)   15/   B9941 : D59E                                dc.w    z80_ptr(MCZ_PSG3)
(1)   15/   B9943 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B9943 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B9944 : 0300 02                     dc.b    $03,$00,FTONE_02
(1)   16/   B9947 :                     
(1)   17/   B9947 :                     MCZ_Call00:
(1)   18/   B9947 : (MACRO)             	smpsSetvoice        $04
(1)   18/   B9947 :  (MACRO-2)                  smpsFMvoice $04
(1)   18/   B9947 : EF04                                dc.b    $EF,$04
(1)   19/   B9949 : A214 A404 A504 8008 	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
            B9951 : A904 8008         
(1)   20/   B9955 : A804 8008 A904 8008 	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
            B995D : AC08 A910         
(1)   21/   B9961 : (MACRO)             	smpsSetvoice        $03
(1)   21/   B9961 :  (MACRO-2)                  smpsFMvoice $03
(1)   21/   B9961 : EF03                                dc.b    $EF,$03
(1)   22/   B9963 : (MACRO)             	smpsReturn
(1)   22/   B9963 : F9                                  dc.b    $F9
(1)   23/   B9964 :                     
(1)   24/   B9964 :                     MCZ_Call03:
(1)   25/   B9964 : (MACRO)             	smpsAlterPitch      $FE
(1)   25/   B9964 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)   25/   B9964 : FBFE                                dc.b    $FB,$FE
(1)   26/   B9966 : C604 E7C5 E7C6 04E7 	dc.b	nA5, $04, smpsNoAttack, nAb5, smpsNoAttack, nA5, $04, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack
            B996E : C5E7 C6E7         
(1)   27/   B9972 : C5E7 C6E7 C5        	dc.b	nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
(1)   28/   B9977 : (MACRO)             	smpsAlterPitch      $01
(1)   28/   B9977 :  (MACRO-2)                  smpsChangeTransposition $01
(1)   28/   B9977 : FB01                                dc.b    $FB,$01
(1)   29/   B9979 : E7C6 E7C5 E7C6 E7C5 	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
            B9981 : E7C6 E7C5         
(1)   30/   B9985 : (MACRO)             	smpsAlterPitch      $01
(1)   30/   B9985 :  (MACRO-2)                  smpsChangeTransposition $01
(1)   30/   B9985 : FB01                                dc.b    $FB,$01
(1)   31/   B9987 : E7C6 E7C5 E7C6 E7C5 	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $05, smpsNoAttack
            B998F : E7C6 05E7         
(1)   32/   B9993 : C5E7 C605 E7C5 8004 	dc.b	nAb5, smpsNoAttack, nA5, $05, smpsNoAttack, nAb5, nRst, $04
(1)   33/   B999B : (MACRO)             	smpsReturn
(1)   33/   B999B : F9                                  dc.b    $F9
(1)   34/   B999C :                     
(1)   35/   B999C :                     MCZ_Call04:
(1)   36/   B999C : (MACRO)             	smpsAlterPitch      $FD
(1)   36/   B999C :  (MACRO-2)                  smpsChangeTransposition $FD
(1)   36/   B999C : FBFD                                dc.b    $FB,$FD
(1)   37/   B999E : C604 E7C5 E7C6 E7C5 	dc.b	nA5, $04, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
            B99A6 : E7C6 E7C5         
(1)   38/   B99AA : E7C6 E7C5           	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5
(1)   39/   B99AE : (MACRO)             	smpsAlterPitch      $FF
(1)   39/   B99AE :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   39/   B99AE : FBFF                                dc.b    $FB,$FF
(1)   40/   B99B0 : E7C6 E7C5 E7C6 E7C5 	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
(1)   41/   B99B8 : (MACRO)             	smpsAlterPitch      $FF
(1)   41/   B99B8 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   41/   B99B8 : FBFF                                dc.b    $FB,$FF
(1)   42/   B99BA : E7C6 E7C5 E7C6 E7C5 	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
            B99C2 : E7C6 E7C5         
(1)   43/   B99C6 : (MACRO)             	smpsAlterPitch      $FF
(1)   43/   B99C6 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   43/   B99C6 : FBFF                                dc.b    $FB,$FF
(1)   44/   B99C8 : E7C6 05E7 C5E7 C605 	dc.b	smpsNoAttack, nA5, $05, smpsNoAttack, nAb5, smpsNoAttack, nA5, $05, smpsNoAttack, nAb5, nRst, $04
            B99D0 : E7C5 8004         
(1)   45/   B99D4 : (MACRO)             	smpsAlterPitch      $06
(1)   45/   B99D4 :  (MACRO-2)                  smpsChangeTransposition $06
(1)   45/   B99D4 : FB06                                dc.b    $FB,$06
(1)   46/   B99D6 : (MACRO)             	smpsReturn
(1)   46/   B99D6 : F9                                  dc.b    $F9
(1)   47/   B99D7 :                     
(1)   48/   B99D7 :                     ; FM5 Data
(1)   49/   B99D7 :                     MCZ_FM5:
(1)   50/   B99D7 : (MACRO)             	smpsSetvoice        $01
(1)   50/   B99D7 :  (MACRO-2)                  smpsFMvoice $01
(1)   50/   B99D7 : EF01                                dc.b    $EF,$01
(1)   51/   B99D9 : (MACRO)             	smpsPan             panLeft, $00
(1)   51/   B99D9 : =$0                 panNone set $00
(1)   51/   B99D9 : =$40                panRight set $40
(1)   51/   B99D9 : =$80                panLeft set $80
(1)   51/   B99D9 : =$C0                panCentre set $C0
(1)   51/   B99D9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   51/   B99D9 : E080                        dc.b $E0,PANLEFT+$00
(1)   52/   B99DB : 8001                	dc.b	nRst, $01
(1)   53/   B99DD : (MACRO)             	smpsCall            MCZ_Call00
(1)   53/   B99DD : F8                          dc.b    $F8
(1)   53/   B99DE : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)   54/   B99E0 :                     
(1)   55/   B99E0 :                     MCZ_Jump03:
(1)   56/   B99E0 : 802F 801E           	dc.b	nRst, $2F, nRst, $1E
(1)   57/   B99E4 : (MACRO)             	smpsSetvoice        $06
(1)   57/   B99E4 :  (MACRO-2)                  smpsFMvoice $06
(1)   57/   B99E4 : EF06                                dc.b    $EF,$06
(1)   58/   B99E6 : A412 A506           	dc.b	nB2, $12, nC3, $06
(1)   59/   B99EA : (MACRO)             	smpsSetvoice        $01
(1)   59/   B99EA :  (MACRO-2)                  smpsFMvoice $01
(1)   59/   B99EA : EF01                                dc.b    $EF,$01
(1)   60/   B99EC : 8030 8006 BD08 BC04 	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
            B99F4 : BB08 BA04         
(1)   61/   B99F8 : B908 B804 8030 801E 	dc.b	nAb4, $08, nG4, $04, nRst, $30, nRst, $1E
(1)   62/   B9A00 : (MACRO)             	smpsSetvoice        $06
(1)   62/   B9A00 :  (MACRO-2)                  smpsFMvoice $06
(1)   62/   B9A00 : EF06                                dc.b    $EF,$06
(1)   63/   B9A02 : A412 A506           	dc.b	nB2, $12, nC3, $06
(1)   64/   B9A06 : (MACRO)             	smpsSetvoice        $01
(1)   64/   B9A06 :  (MACRO-2)                  smpsFMvoice $01
(1)   64/   B9A06 : EF01                                dc.b    $EF,$01
(1)   65/   B9A08 : 8030 8006 BD08 BC04 	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
            B9A10 : BB08 BA04         
(1)   66/   B9A14 : B908 B804 8030 801E 	dc.b	nAb4, $08, nG4, $04, nRst, $30, nRst, $1E
(1)   67/   B9A1C : (MACRO)             	smpsSetvoice        $06
(1)   67/   B9A1C :  (MACRO-2)                  smpsFMvoice $06
(1)   67/   B9A1C : EF06                                dc.b    $EF,$06
(1)   68/   B9A1E : A412 A506           	dc.b	nB2, $12, nC3, $06
(1)   69/   B9A22 : (MACRO)             	smpsSetvoice        $01
(1)   69/   B9A22 :  (MACRO-2)                  smpsFMvoice $01
(1)   69/   B9A22 : EF01                                dc.b    $EF,$01
(1)   70/   B9A24 : 8030 8006 BD08 BC04 	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
            B9A2C : BB08 BA04         
(1)   71/   B9A30 : B908 B804 8030 801E 	dc.b	nAb4, $08, nG4, $04, nRst, $30, nRst, $1E
(1)   72/   B9A38 : (MACRO)             	smpsSetvoice        $06
(1)   72/   B9A38 :  (MACRO-2)                  smpsFMvoice $06
(1)   72/   B9A38 : EF06                                dc.b    $EF,$06
(1)   73/   B9A3A : A412 A506           	dc.b	nB2, $12, nC3, $06
(1)   74/   B9A3E : (MACRO)             	smpsSetvoice        $01
(1)   74/   B9A3E :  (MACRO-2)                  smpsFMvoice $01
(1)   74/   B9A3E : EF01                                dc.b    $EF,$01
(1)   75/   B9A40 : 8030 8006 BD08 BC04 	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
            B9A48 : BB08 BA04         
(1)   76/   B9A4C : B908 B804           	dc.b	nAb4, $08, nG4, $04
(1)   77/   B9A50 :                     
(1)   78/   B9A50 :                     MCZ_Loop05:
(1)   79/   B9A50 : 800C C106 8012 8006 	dc.b	nRst, $0C, nE5, $06, nRst, $12, nRst, $06, nRst, $12, nE5, $06
            B9A58 : 8012 C106         
(1)   80/   B9A5C : 800C                	dc.b	nRst, $0C
(1)   81/   B9A5E : (MACRO)             	smpsSetvoice        $06
(1)   81/   B9A5E :  (MACRO-2)                  smpsFMvoice $06
(1)   81/   B9A5E : EF06                                dc.b    $EF,$06
(1)   82/   B9A60 : A412 A506 80        	dc.b	nB2, $12, nC3, $06, nRst
(1)   83/   B9A65 : (MACRO)             	smpsSetvoice        $01
(1)   83/   B9A65 :  (MACRO-2)                  smpsFMvoice $01
(1)   83/   B9A65 : EF01                                dc.b    $EF,$01
(1)   84/   B9A67 : C106 8012 8006 8012 	dc.b	nE5, $06, nRst, $12, nRst, $06, nRst, $12, nE5, $08, nEb5, $04
            B9A6F : C108 C004         
(1)   85/   B9A73 : C108 C004 C10C      	dc.b	nE5, $08, nEb5, $04, nE5, $0C
(1)   86/   B9A79 : (MACRO)             	smpsLoop            $00, $04, MCZ_Loop05
(1)   86/   B9A79 : F7                          dc.b    $F7
(1)   86/   B9A7A : 0004                        dc.b    $00,$04
(1)   86/   B9A7C : 509A                                dc.w    z80_ptr(MCZ_LOOP05)
(1)   87/   B9A7E : 8001                	dc.b	nRst, $01
(1)   88/   B9A80 : (MACRO)             	smpsCall            MCZ_Call00
(1)   88/   B9A80 : F8                          dc.b    $F8
(1)   88/   B9A81 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)   89/   B9A83 : 800B AE08 B004 B108 	dc.b	nRst, $0B, nA3, $08, nB3, $04, nC4, $08, nB3, $04, nA3, $0C
            B9A8B : B004 AE0C         
(1)   90/   B9A8F : 08B0 04B1 08B0 04AE 	dc.b	$08, nB3, $04, nC4, $08, nB3, $04, nA3, $06, nRst, $12, nRst
            B9A97 : 0680 1280         
(1)   91/   B9A9B : 01                  	dc.b	$01
(1)   92/   B9A9C : (MACRO)             	smpsCall            MCZ_Call00
(1)   92/   B9A9C : F8                          dc.b    $F8
(1)   92/   B9A9D : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)   93/   B9A9F : A20C 80A0 809E 809D 	dc.b	nA2, $0C, nRst, nG2, nRst, nF2, nRst, nE2, nRst
            B9AA7 : 80               
(1)   94/   B9AA8 : (MACRO)             	smpsCall            MCZ_Call00
(1)   94/   B9AA8 : F8                          dc.b    $F8
(1)   94/   B9AA9 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)   95/   B9AAB : 800B B108 B304 B508 	dc.b	nRst, $0B, nC4, $08, nD4, $04, nE4, $08, nD4, $04, nC4, $0C
            B9AB3 : B304 B10C         
(1)   96/   B9AB7 : 08B3 04B5 08B3 04B1 	dc.b	$08, nD4, $04, nE4, $08, nD4, $04, nC4, $06, nRst, $12, nRst
            B9ABF : 0680 1280         
(1)   97/   B9AC3 : 01                  	dc.b	$01
(1)   98/   B9AC4 : (MACRO)             	smpsCall            MCZ_Call00
(1)   98/   B9AC4 : F8                          dc.b    $F8
(1)   98/   B9AC5 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)   99/   B9AC7 : A20C A29D 08A0 0CA2 	dc.b	nA2, $0C, nA2, nE2, $08, nG2, $0C, nA2, $06, nRst, $2E
            B9ACF : 0680 2E            
(1)  100/   B9AD2 : (MACRO)             	smpsJump            MCZ_Jump03
(1)  100/   B9AD2 : F6                          dc.b    $F6
(1)  100/   B9AD3 : E099                                dc.w    z80_ptr(MCZ_JUMP03)
(1)  101/   B9AD5 :                     
(1)  102/   B9AD5 :                     MCZ_Call01:
(1)  103/   B9AD5 : C301 E7C4 E7C5 E7C6 	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
            B9ADD : 2D               
(1)  104/   B9ADE : (MACRO)             	smpsReturn
(1)  104/   B9ADE : F9                                  dc.b    $F9
(1)  105/   B9ADF :                     
(1)  106/   B9ADF :                     MCZ_Call02:
(1)  107/   B9ADF : E724 E7C5 01E7 C4E7 	dc.b	smpsNoAttack, $24, smpsNoAttack, nAb5, $01, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack
            B9AE7 : C3E7 C2E7         
(1)  108/   B9AEB : C1E7 C0E7 BFE7 BEE7 	dc.b	nE5, smpsNoAttack, nEb5, smpsNoAttack, nD5, smpsNoAttack, nCs5, smpsNoAttack, nC5, smpsNoAttack, nB4, smpsNoAttack
            B9AF3 : BDE7 BCE7         
(1)  109/   B9AF7 : BBE7 BA             	dc.b	nBb4, smpsNoAttack, nA4
(1)  110/   B9AFA : (MACRO)             	smpsReturn
(1)  110/   B9AFA : F9                                  dc.b    $F9
(1)  111/   B9AFB :                     
(1)  112/   B9AFB :                     ; FM1 Data
(1)  113/   B9AFB :                     MCZ_FM1:
(1)  114/   B9AFB : (MACRO)             	smpsSetvoice        $02
(1)  114/   B9AFB :  (MACRO-2)                  smpsFMvoice $02
(1)  114/   B9AFB : EF02                                dc.b    $EF,$02
(1)  115/   B9AFD : (MACRO)             	smpsModSet          $18, $01, $0A, $04
(1)  115/   B9AFD : F0                          dc.b    $F0
(1)  115/   B9AFE : 1901 0A05                           dc.b    $18+1,$01,$0A,(($04+1) * $01) & $FF
(1)  115/   B9B02 :                             ;dc.b   $01,$0A,$04
(1)  116/   B9B02 : 8030 80             	dc.b	nRst, $30, nRst
(1)  117/   B9B05 :                     
(1)  118/   B9B05 :                     MCZ_Jump02:
(1)  119/   B9B05 : (MACRO)             	smpsCall            MCZ_Call01
(1)  119/   B9B05 : F8                          dc.b    $F8
(1)  119/   B9B06 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  120/   B9B08 : (MACRO)             	smpsAlterPitch      $02
(1)  120/   B9B08 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  120/   B9B08 : FB02                                dc.b    $FB,$02
(1)  121/   B9B0A : (MACRO)             	smpsCall            MCZ_Call01
(1)  121/   B9B0A : F8                          dc.b    $F8
(1)  121/   B9B0B : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  122/   B9B0D : (MACRO)             	smpsAlterPitch      $01
(1)  122/   B9B0D :  (MACRO-2)                  smpsChangeTransposition $01
(1)  122/   B9B0D : FB01                                dc.b    $FB,$01
(1)  123/   B9B0F : (MACRO)             	smpsCall            MCZ_Call01
(1)  123/   B9B0F : F8                          dc.b    $F8
(1)  123/   B9B10 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  124/   B9B12 : (MACRO)             	smpsAlterPitch      $FC
(1)  124/   B9B12 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  124/   B9B12 : FBFC                                dc.b    $FB,$FC
(1)  125/   B9B14 : (MACRO)             	smpsCall            MCZ_Call01
(1)  125/   B9B14 : F8                          dc.b    $F8
(1)  125/   B9B15 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  126/   B9B17 : (MACRO)             	smpsAlterPitch      $01
(1)  126/   B9B17 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  126/   B9B17 : FB01                                dc.b    $FB,$01
(1)  127/   B9B19 : (MACRO)             	smpsCall            MCZ_Call01
(1)  127/   B9B19 : F8                          dc.b    $F8
(1)  127/   B9B1A : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  128/   B9B1C : E730 E730           	dc.b	smpsNoAttack, $30, smpsNoAttack, $30
(1)  129/   B9B20 : (MACRO)             	smpsCall            MCZ_Call02
(1)  129/   B9B20 : F8                          dc.b    $F8
(1)  129/   B9B21 : DF9A                                dc.w    z80_ptr(MCZ_CALL02)
(1)  130/   B9B23 : (MACRO)             	smpsCall            MCZ_Call01
(1)  130/   B9B23 : F8                          dc.b    $F8
(1)  130/   B9B24 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  131/   B9B26 : (MACRO)             	smpsAlterPitch      $03
(1)  131/   B9B26 :  (MACRO-2)                  smpsChangeTransposition $03
(1)  131/   B9B26 : FB03                                dc.b    $FB,$03
(1)  132/   B9B28 : (MACRO)             	smpsCall            MCZ_Call01
(1)  132/   B9B28 : F8                          dc.b    $F8
(1)  132/   B9B29 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  133/   B9B2B : (MACRO)             	smpsAlterPitch      $FF
(1)  133/   B9B2B :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  133/   B9B2B : FBFF                                dc.b    $FB,$FF
(1)  134/   B9B2D : (MACRO)             	smpsCall            MCZ_Call01
(1)  134/   B9B2D : F8                          dc.b    $F8
(1)  134/   B9B2E : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  135/   B9B30 : (MACRO)             	smpsAlterPitch      $FF
(1)  135/   B9B30 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  135/   B9B30 : FBFF                                dc.b    $FB,$FF
(1)  136/   B9B32 : (MACRO)             	smpsCall            MCZ_Call01
(1)  136/   B9B32 : F8                          dc.b    $F8
(1)  136/   B9B33 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  137/   B9B35 : (MACRO)             	smpsAlterPitch      $FF
(1)  137/   B9B35 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  137/   B9B35 : FBFF                                dc.b    $FB,$FF
(1)  138/   B9B37 : (MACRO)             	smpsCall            MCZ_Call01
(1)  138/   B9B37 : F8                          dc.b    $F8
(1)  138/   B9B38 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  139/   B9B3A : E730 E724           	dc.b	smpsNoAttack, $30, smpsNoAttack, $24
(1)  140/   B9B3E : (MACRO)             	smpsCall            MCZ_Call02
(1)  140/   B9B3E : F8                          dc.b    $F8
(1)  140/   B9B3F : DF9A                                dc.w    z80_ptr(MCZ_CALL02)
(1)  141/   B9B41 : 800C                	dc.b	nRst, $0C
(1)  142/   B9B43 :                     
(1)  143/   B9B43 :                     MCZ_Loop04:
(1)  144/   B9B43 : 8030 80             	dc.b	nRst, $30, nRst
(1)  145/   B9B46 : (MACRO)             	smpsLoop            $00, $09, MCZ_Loop04
(1)  145/   B9B46 : F7                          dc.b    $F7
(1)  145/   B9B47 : 0009                        dc.b    $00,$09
(1)  145/   B9B49 : 439B                                dc.w    z80_ptr(MCZ_LOOP04)
(1)  146/   B9B4B : (MACRO)             	smpsCall            MCZ_Call03
(1)  146/   B9B4B : F8                          dc.b    $F8
(1)  146/   B9B4C : 6499                                dc.w    z80_ptr(MCZ_CALL03)
(1)  147/   B9B4E : 8030 80             	dc.b	nRst, $30, nRst
(1)  148/   B9B51 : (MACRO)             	smpsAlterPitch      $03
(1)  148/   B9B51 :  (MACRO-2)                  smpsChangeTransposition $03
(1)  148/   B9B51 : FB03                                dc.b    $FB,$03
(1)  149/   B9B53 : (MACRO)             	smpsCall            MCZ_Call04
(1)  149/   B9B53 : F8                          dc.b    $F8
(1)  149/   B9B54 : 9C99                                dc.w    z80_ptr(MCZ_CALL04)
(1)  150/   B9B56 : 8030 80             	dc.b	nRst, $30, nRst
(1)  151/   B9B59 : (MACRO)             	smpsAlterPitch      $FD
(1)  151/   B9B59 :  (MACRO-2)                  smpsChangeTransposition $FD
(1)  151/   B9B59 : FBFD                                dc.b    $FB,$FD
(1)  152/   B9B5B : (MACRO)             	smpsCall            MCZ_Call03
(1)  152/   B9B5B : F8                          dc.b    $F8
(1)  152/   B9B5C : 6499                                dc.w    z80_ptr(MCZ_CALL03)
(1)  153/   B9B5E : 8030 8080 80        	dc.b	nRst, $30, nRst, nRst, nRst
(1)  154/   B9B63 : (MACRO)             	smpsJump            MCZ_Jump02
(1)  154/   B9B63 : F6                          dc.b    $F6
(1)  154/   B9B64 : 059B                                dc.w    z80_ptr(MCZ_JUMP02)
(1)  155/   B9B66 :                     
(1)  156/   B9B66 :                     ; PSG1 Data
(1)  157/   B9B66 :                     MCZ_PSG1:
(1)  158/   B9B66 : 8004 8030 80        	dc.b	nRst, $04, nRst, $30, nRst
(1)  159/   B9B6B :                     
(1)  160/   B9B6B :                     MCZ_Jump05:
(1)  161/   B9B6B : (MACRO)             	smpsCall            MCZ_Call01
(1)  161/   B9B6B : F8                          dc.b    $F8
(1)  161/   B9B6C : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  162/   B9B6E : (MACRO)             	smpsAlterPitch      $02
(1)  162/   B9B6E :  (MACRO-2)                  smpsChangeTransposition $02
(1)  162/   B9B6E : FB02                                dc.b    $FB,$02
(1)  163/   B9B70 : (MACRO)             	smpsCall            MCZ_Call01
(1)  163/   B9B70 : F8                          dc.b    $F8
(1)  163/   B9B71 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  164/   B9B73 : (MACRO)             	smpsAlterPitch      $01
(1)  164/   B9B73 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  164/   B9B73 : FB01                                dc.b    $FB,$01
(1)  165/   B9B75 : (MACRO)             	smpsCall            MCZ_Call01
(1)  165/   B9B75 : F8                          dc.b    $F8
(1)  165/   B9B76 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  166/   B9B78 : (MACRO)             	smpsAlterPitch      $FC
(1)  166/   B9B78 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  166/   B9B78 : FBFC                                dc.b    $FB,$FC
(1)  167/   B9B7A : (MACRO)             	smpsCall            MCZ_Call01
(1)  167/   B9B7A : F8                          dc.b    $F8
(1)  167/   B9B7B : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  168/   B9B7D : (MACRO)             	smpsAlterPitch      $01
(1)  168/   B9B7D :  (MACRO-2)                  smpsChangeTransposition $01
(1)  168/   B9B7D : FB01                                dc.b    $FB,$01
(1)  169/   B9B7F : (MACRO)             	smpsCall            MCZ_Call01
(1)  169/   B9B7F : F8                          dc.b    $F8
(1)  169/   B9B80 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  170/   B9B82 : E730 E730           	dc.b	smpsNoAttack, $30, smpsNoAttack, $30
(1)  171/   B9B86 : (MACRO)             	smpsCall            MCZ_Call02
(1)  171/   B9B86 : F8                          dc.b    $F8
(1)  171/   B9B87 : DF9A                                dc.w    z80_ptr(MCZ_CALL02)
(1)  172/   B9B89 : (MACRO)             	smpsCall            MCZ_Call01
(1)  172/   B9B89 : F8                          dc.b    $F8
(1)  172/   B9B8A : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  173/   B9B8C : (MACRO)             	smpsAlterPitch      $03
(1)  173/   B9B8C :  (MACRO-2)                  smpsChangeTransposition $03
(1)  173/   B9B8C : FB03                                dc.b    $FB,$03
(1)  174/   B9B8E : (MACRO)             	smpsCall            MCZ_Call01
(1)  174/   B9B8E : F8                          dc.b    $F8
(1)  174/   B9B8F : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  175/   B9B91 : (MACRO)             	smpsAlterPitch      $FF
(1)  175/   B9B91 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  175/   B9B91 : FBFF                                dc.b    $FB,$FF
(1)  176/   B9B93 : (MACRO)             	smpsCall            MCZ_Call01
(1)  176/   B9B93 : F8                          dc.b    $F8
(1)  176/   B9B94 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  177/   B9B96 : (MACRO)             	smpsAlterPitch      $FF
(1)  177/   B9B96 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  177/   B9B96 : FBFF                                dc.b    $FB,$FF
(1)  178/   B9B98 : (MACRO)             	smpsCall            MCZ_Call01
(1)  178/   B9B98 : F8                          dc.b    $F8
(1)  178/   B9B99 : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  179/   B9B9B : (MACRO)             	smpsAlterPitch      $FF
(1)  179/   B9B9B :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  179/   B9B9B : FBFF                                dc.b    $FB,$FF
(1)  180/   B9B9D : (MACRO)             	smpsCall            MCZ_Call01
(1)  180/   B9B9D : F8                          dc.b    $F8
(1)  180/   B9B9E : D59A                                dc.w    z80_ptr(MCZ_CALL01)
(1)  181/   B9BA0 : E730 E724           	dc.b	smpsNoAttack, $30, smpsNoAttack, $24
(1)  182/   B9BA4 : (MACRO)             	smpsCall            MCZ_Call02
(1)  182/   B9BA4 : F8                          dc.b    $F8
(1)  182/   B9BA5 : DF9A                                dc.w    z80_ptr(MCZ_CALL02)
(1)  183/   B9BA7 : 800C                	dc.b	nRst, $0C
(1)  184/   B9BA9 :                     
(1)  185/   B9BA9 :                     MCZ_Loop08:
(1)  186/   B9BA9 : 8030 80             	dc.b	nRst, $30, nRst
(1)  187/   B9BAC : (MACRO)             	smpsLoop            $00, $09, MCZ_Loop08
(1)  187/   B9BAC : F7                          dc.b    $F7
(1)  187/   B9BAD : 0009                        dc.b    $00,$09
(1)  187/   B9BAF : A99B                                dc.w    z80_ptr(MCZ_LOOP08)
(1)  188/   B9BB1 : (MACRO)             	smpsCall            MCZ_Call03
(1)  188/   B9BB1 : F8                          dc.b    $F8
(1)  188/   B9BB2 : 6499                                dc.w    z80_ptr(MCZ_CALL03)
(1)  189/   B9BB4 : 8030 80             	dc.b	nRst, $30, nRst
(1)  190/   B9BB7 : (MACRO)             	smpsAlterPitch      $03
(1)  190/   B9BB7 :  (MACRO-2)                  smpsChangeTransposition $03
(1)  190/   B9BB7 : FB03                                dc.b    $FB,$03
(1)  191/   B9BB9 : (MACRO)             	smpsCall            MCZ_Call04
(1)  191/   B9BB9 : F8                          dc.b    $F8
(1)  191/   B9BBA : 9C99                                dc.w    z80_ptr(MCZ_CALL04)
(1)  192/   B9BBC : 8030 80             	dc.b	nRst, $30, nRst
(1)  193/   B9BBF : (MACRO)             	smpsAlterPitch      $FD
(1)  193/   B9BBF :  (MACRO-2)                  smpsChangeTransposition $FD
(1)  193/   B9BBF : FBFD                                dc.b    $FB,$FD
(1)  194/   B9BC1 : (MACRO)             	smpsCall            MCZ_Call03
(1)  194/   B9BC1 : F8                          dc.b    $F8
(1)  194/   B9BC2 : 6499                                dc.w    z80_ptr(MCZ_CALL03)
(1)  195/   B9BC4 : 8030 8080 80        	dc.b	nRst, $30, nRst, nRst, nRst
(1)  196/   B9BC9 : (MACRO)             	smpsJump            MCZ_Jump05
(1)  196/   B9BC9 : F6                          dc.b    $F6
(1)  196/   B9BCA : 6B9B                                dc.w    z80_ptr(MCZ_JUMP05)
(1)  197/   B9BCC :                     
(1)  198/   B9BCC :                     ; PSG2 Data
(1)  199/   B9BCC :                     MCZ_PSG2:
(1)  200/   B9BCC : 8030 80             	dc.b	nRst, $30, nRst
(1)  201/   B9BCF :                     
(1)  202/   B9BCF :                     MCZ_Loop06:
(1)  203/   B9BCF : 8030 80             	dc.b	nRst, $30, nRst
(1)  204/   B9BD2 : (MACRO)             	smpsLoop            $00, $08, MCZ_Loop06
(1)  204/   B9BD2 : F7                          dc.b    $F7
(1)  204/   B9BD3 : 0008                        dc.b    $00,$08
(1)  204/   B9BD5 : CF9B                                dc.w    z80_ptr(MCZ_LOOP06)
(1)  205/   B9BD7 : C60C C5C4 08C5 04C4 	dc.b	nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08, nFs5, $04, nF5
            B9BDF : 08C3 04C2         
(1)  206/   B9BE3 : 0804 C10C C008 BF10 	dc.b	$08, $04, nE5, $0C, nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4
            B9BEB : BD0C BDBC         
(1)  207/   B9BEF : 08BD 0CC1 0680 2EC6 	dc.b	$08, nC5, $0C, nE5, $06, nRst, $2E, nA5, $0C, nAb5, nG5, $08
            B9BF7 : 0CC5 C408         
(1)  208/   B9BFB : C504 C408 C304 C208 	dc.b	nAb5, $04, nG5, $08, nFs5, $04, nF5, $08, $04, nE5, $0C, nEb5
            B9C03 : 04C1 0CC0         
(1)  209/   B9C07 : 08BF 10BD 0CBD BC08 	dc.b	$08, nD5, $10, nC5, $0C, nC5, nB4, $08, nC5, $0C, nA4, $06
            B9C0F : BD0C BA06         
(1)  210/   B9C13 : 802E C90C C8C7 08C8 	dc.b	nRst, $2E, nC6, $0C, nB5, nBb5, $08, nB5, $04, nBb5, $08, nA5
            B9C1B : 04C7 08C6         
(1)  211/   B9C1F : 04C5 0804 C40C C308 	dc.b	$04, nAb5, $08, $04, nG5, $0C, nFs5, $08, nF5, $10, nE5, $0C
            B9C27 : C210 C10C         
(1)  212/   B9C2B : C1BF 08C1 0CC4 0680 	dc.b	nE5, nD5, $08, nE5, $0C, nG5, $06, nRst, $2E, nC6, $0C, nB5
            B9C33 : 2EC9 0CC8         
(1)  213/   B9C37 : C708 C804 C708 C604 	dc.b	nBb5, $08, nB5, $04, nBb5, $08, nA5, $04, nAb5, $08, $04, nG5
            B9C3F : C508 04C4         
(1)  214/   B9C43 : 0CC3 08C2 10C1 0CC1 	dc.b	$0C, nFs5, $08, nF5, $10, nE5, $0C, nE5, nD5, $08, nE5, $0C
            B9C4B : BF08 C10C         
(1)  215/   B9C4F : BD06 802E           	dc.b	nC5, $06, nRst, $2E
(1)  216/   B9C53 :                     
(1)  217/   B9C53 :                     MCZ_Loop07:
(1)  218/   B9C53 : C60C CD08 C60C CBC6 	dc.b	nA5, $0C, nE6, $08, nA5, $0C, nD6, nA5, $04, nC6, $0C, nA5
            B9C5B : 04C9 0CC6         
(1)  219/   B9C5F : 08C8 0CC6 04C9 0C   	dc.b	$08, nB5, $0C, nA5, $04, nC6, $0C
(1)  220/   B9C66 : (MACRO)             	smpsLoop            $00, $07, MCZ_Loop07
(1)  220/   B9C66 : F7                          dc.b    $F7
(1)  220/   B9C67 : 0007                        dc.b    $00,$07
(1)  220/   B9C69 : 539C                                dc.w    z80_ptr(MCZ_LOOP07)
(1)  221/   B9C6B : C60C CD08 C60C C9C6 	dc.b	nA5, $0C, nE6, $08, nA5, $0C, nC6, nA5, $06, nRst, $2E
            B9C73 : 0680 2E            
(1)  222/   B9C76 : (MACRO)             	smpsJump            MCZ_Loop06
(1)  222/   B9C76 : F6                          dc.b    $F6
(1)  222/   B9C77 : CF9B                                dc.w    z80_ptr(MCZ_LOOP06)
(1)  223/   B9C79 :                     
(1)  224/   B9C79 :                     ; FM3 Data
(1)  225/   B9C79 :                     MCZ_FM3:
(1)  226/   B9C79 : (MACRO)             	smpsModSet          $18, $01, $03, $04
(1)  226/   B9C79 : F0                          dc.b    $F0
(1)  226/   B9C7A : 1901 0305                           dc.b    $18+1,$01,$03,(($04+1) * $01) & $FF
(1)  226/   B9C7E :                             ;dc.b   $01,$03,$04
(1)  227/   B9C7E : (MACRO)             	smpsSetvoice        $06
(1)  227/   B9C7E :  (MACRO-2)                  smpsFMvoice $06
(1)  227/   B9C7E : EF06                                dc.b    $EF,$06
(1)  228/   B9C80 : A214 A404 A504 8008 	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
            B9C88 : A904 8008         
(1)  229/   B9C8C : A804 8008 A904 8008 	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
            B9C94 : AC08 A910         
(1)  230/   B9C98 : (MACRO)             	smpsPan             panRight, $00
(1)  230/   B9C98 : =$0                 panNone set $00
(1)  230/   B9C98 : =$40                panRight set $40
(1)  230/   B9C98 : =$80                panLeft set $80
(1)  230/   B9C98 : =$C0                panCentre set $C0
(1)  230/   B9C98 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  230/   B9C98 : E040                        dc.b $E0,PANRIGHT+$00
(1)  231/   B9C9A : (MACRO)             	smpsSetvoice        $00
(1)  231/   B9C9A :  (MACRO-2)                  smpsFMvoice $00
(1)  231/   B9C9A : EF00                                dc.b    $EF,$00
(1)  232/   B9C9C :                     
(1)  233/   B9C9C :                     MCZ_Loop02:
(1)  234/   B9C9C : 8030 80             	dc.b	nRst, $30, nRst
(1)  235/   B9C9F : (MACRO)             	smpsLoop            $00, $08, MCZ_Loop02
(1)  235/   B9C9F : F7                          dc.b    $F7
(1)  235/   B9CA0 : 0008                        dc.b    $00,$08
(1)  235/   B9CA2 : 9C9C                                dc.w    z80_ptr(MCZ_LOOP02)
(1)  236/   B9CA4 : C60C C5C4 08C5 04C4 	dc.b	nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08, nFs5, $04, nF5
            B9CAC : 08C3 04C2         
(1)  237/   B9CB0 : 0804 C10C C008 BF10 	dc.b	$08, $04, nE5, $0C, nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4
            B9CB8 : BD0C BDBC         
(1)  238/   B9CBC : 08BD 0CC1 06E7 2EC6 	dc.b	$08, nC5, $0C, nE5, $06, smpsNoAttack, $2E, nA5, $0C, nAb5, nG5, $08
            B9CC4 : 0CC5 C408         
(1)  239/   B9CC8 : C504 C408 C304 C208 	dc.b	nAb5, $04, nG5, $08, nFs5, $04, nF5, $08, $04, nE5, $0C, nEb5
            B9CD0 : 04C1 0CC0         
(1)  240/   B9CD4 : 08BF 10BD 0CBD BC08 	dc.b	$08, nD5, $10, nC5, $0C, nC5, nB4, $08, nC5, $0C, nA4, $06
            B9CDC : BD0C BA06         
(1)  241/   B9CE0 : E72E C60C C5C4 08C5 	dc.b	smpsNoAttack, $2E, nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08, nFs5
            B9CE8 : 04C4 08C3         
(1)  242/   B9CEC : 04C2 0804 C10C C008 	dc.b	$04, nF5, $08, $04, nE5, $0C, nEb5, $08, nD5, $10, nC5, $0C
            B9CF4 : BF10 BD0C         
(1)  243/   B9CF8 : BDBC 08BD 0CC1 06E7 	dc.b	nC5, nB4, $08, nC5, $0C, nE5, $06, smpsNoAttack, $2E, nA5, $0C, nAb5
            B9D00 : 2EC6 0CC5         
(1)  244/   B9D04 : C408 C504 C408 C304 	dc.b	nG5, $08, nAb5, $04, nG5, $08, nFs5, $04, nF5, $08, $04, nE5
            B9D0C : C208 04C1         
(1)  245/   B9D10 : 0CC0 08BF 10BD 0CBD 	dc.b	$0C, nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4, $08, nC5, $0C
            B9D18 : BC08 BD0C         
(1)  246/   B9D1C : BA06 E72E           	dc.b	nA4, $06, smpsNoAttack, $2E
(1)  247/   B9D20 : (MACRO)             	smpsPan             panCenter, $00
(1)  247/   B9D20 : =$0                 panNone set $00
(1)  247/   B9D20 : =$40                panRight set $40
(1)  247/   B9D20 : =$80                panLeft set $80
(1)  247/   B9D20 : =$C0                panCentre set $C0
(1)  247/   B9D20 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  247/   B9D20 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  248/   B9D22 : (MACRO)             	smpsAlterVol        $06
(1)  248/   B9D22 : E606                        dc.b    $E6,$06
(1)  249/   B9D24 :                     
(1)  250/   B9D24 :                     MCZ_Loop03:
(1)  251/   B9D24 : C60C CDC6 08CB 0CC6 	dc.b	nA5, $0C, nE6, nA5, $08, nD6, $0C, nA5, $04, nC6, $08, nA5
            B9D2C : 04C9 08C6         
(1)  252/   B9D30 : 0CC8 C604 C90C      	dc.b	$0C, nB5, nA5, $04, nC6, $0C
(1)  253/   B9D36 : (MACRO)             	smpsLoop            $00, $07, MCZ_Loop03
(1)  253/   B9D36 : F7                          dc.b    $F7
(1)  253/   B9D37 : 0007                        dc.b    $00,$07
(1)  253/   B9D39 : 249D                                dc.w    z80_ptr(MCZ_LOOP03)
(1)  254/   B9D3B : (MACRO)             	smpsAlterVol        $FA
(1)  254/   B9D3B : E6FA                        dc.b    $E6,$FA
(1)  255/   B9D3D : C60C CD08 C60C C9C6 	dc.b	nA5, $0C, nE6, $08, nA5, $0C, nC6, nA5, $06, nRst, $2E
            B9D45 : 0680 2E            
(1)  256/   B9D48 : (MACRO)             	smpsPan             panRight, $00
(1)  256/   B9D48 : =$0                 panNone set $00
(1)  256/   B9D48 : =$40                panRight set $40
(1)  256/   B9D48 : =$80                panLeft set $80
(1)  256/   B9D48 : =$C0                panCentre set $C0
(1)  256/   B9D48 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  256/   B9D48 : E040                        dc.b $E0,PANRIGHT+$00
(1)  257/   B9D4A : (MACRO)             	smpsJump            MCZ_Loop02
(1)  257/   B9D4A : F6                          dc.b    $F6
(1)  257/   B9D4B : 9C9C                                dc.w    z80_ptr(MCZ_LOOP02)
(1)  258/   B9D4D :                     
(1)  259/   B9D4D :                     ; FM2 Data
(1)  260/   B9D4D :                     MCZ_FM2:
(1)  261/   B9D4D : (MACRO)             	smpsSetvoice        $05
(1)  261/   B9D4D :  (MACRO-2)                  smpsFMvoice $05
(1)  261/   B9D4D : EF05                                dc.b    $EF,$05
(1)  262/   B9D4F : 8030 80             	dc.b	nRst, $30, nRst
(1)  263/   B9D52 :                     
(1)  264/   B9D52 :                     MCZ_Loop01:
(1)  265/   B9D52 : A20C AEAC 08AE 04AC 	dc.b	nA2, $0C, nA3, nG3, $08, nA3, $04, nG3, $08, nE3, $04, nD3
            B9D5A : 08A9 04A7         
(1)  266/   B9D5E : 0804 A80C A908 A110 	dc.b	$08, $04, nEb3, $0C, nE3, $08, nAb2, $10, nA2, $0C, nA3, nG3
            B9D66 : A20C AEAC         
(1)  267/   B9D6A : 08AE 04AC 08A9 04A7 	dc.b	$08, nA3, $04, nG3, $08, nE3, $04, nD3, $08, $04, nEb3, $08
            B9D72 : 0804 A808         
(1)  268/   B9D76 : A904 8018           	dc.b	nE3, $04, nRst, $18
(1)  269/   B9D7A : (MACRO)             	smpsLoop            $00, $08, MCZ_Loop01
(1)  269/   B9D7A : F7                          dc.b    $F7
(1)  269/   B9D7B : 0008                        dc.b    $00,$08
(1)  269/   B9D7D : 529D                                dc.w    z80_ptr(MCZ_LOOP01)
(1)  270/   B9D7F : 8030 80A2 0804 A40C 	dc.b	nRst, $30, nRst, nA2, $08, $04, nB2, $0C, nC3, nD3, nEb3, nD3
            B9D87 : A5A7 A8A7         
(1)  271/   B9D8B : A5A4 8030 80A2 0C80 	dc.b	nC3, nB2, nRst, $30, nRst, nA2, $0C, nRst, nG2, nRst, nF2, nRst
            B9D93 : A080 9E80         
(1)  272/   B9D97 : 9D80 8030 80A2 0804 	dc.b	nE2, nRst, nRst, $30, nRst, nA2, $08, $04, nB2, $0C, nC3, nD3
            B9D9F : A40C A5A7         
(1)  273/   B9DA3 : A8A7 A5A4 8030 80A2 	dc.b	nEb3, nD3, nC3, nB2, nRst, $30, nRst, nA2, $0C, nA2, nE2, $08
            B9DAB : 0CA2 9D08         
(1)  274/   B9DAF : A00C A2A2 049F 0CA0 	dc.b	nG2, $0C, nA2, nA2, $04, nFs2, $0C, nG2, nAb2
            B9DB7 : A1               
(1)  275/   B9DB8 : (MACRO)             	smpsJump            MCZ_Loop01
(1)  275/   B9DB8 : F6                          dc.b    $F6
(1)  275/   B9DB9 : 529D                                dc.w    z80_ptr(MCZ_LOOP01)
(1)  276/   B9DBB :                     
(1)  277/   B9DBB :                     ; FM4 Data
(1)  278/   B9DBB :                     MCZ_FM4:
(1)  279/   B9DBB : (MACRO)             	smpsSetvoice        $01
(1)  279/   B9DBB :  (MACRO-2)                  smpsFMvoice $01
(1)  279/   B9DBB : EF01                                dc.b    $EF,$01
(1)  280/   B9DBD : (MACRO)             	smpsPan             panRight, $00
(1)  280/   B9DBD : =$0                 panNone set $00
(1)  280/   B9DBD : =$40                panRight set $40
(1)  280/   B9DBD : =$80                panLeft set $80
(1)  280/   B9DBD : =$C0                panCentre set $C0
(1)  280/   B9DBD : =$C0                panCenter set $C0 ; silly Americans :U
(1)  280/   B9DBD : E040                        dc.b $E0,PANRIGHT+$00
(1)  281/   B9DBF : (MACRO)             	smpsCall            MCZ_Call00
(1)  281/   B9DBF : F8                          dc.b    $F8
(1)  281/   B9DC0 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)  282/   B9DC2 :                     
(1)  283/   B9DC2 :                     MCZ_Jump01:
(1)  284/   B9DC2 : 8030 801E           	dc.b	nRst, $30, nRst, $1E
(1)  285/   B9DC6 : (MACRO)             	smpsPan             panRight, $00
(1)  285/   B9DC6 : =$0                 panNone set $00
(1)  285/   B9DC6 : =$40                panRight set $40
(1)  285/   B9DC6 : =$80                panLeft set $80
(1)  285/   B9DC6 : =$C0                panCentre set $C0
(1)  285/   B9DC6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  285/   B9DC6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  286/   B9DC8 : (MACRO)             	smpsSetvoice        $06
(1)  286/   B9DC8 :  (MACRO-2)                  smpsFMvoice $06
(1)  286/   B9DC8 : EF06                                dc.b    $EF,$06
(1)  287/   B9DCA : A112 A206           	dc.b	nAb2, $12, nA2, $06
(1)  288/   B9DCE : (MACRO)             	smpsPan             panCenter, $00
(1)  288/   B9DCE : =$0                 panNone set $00
(1)  288/   B9DCE : =$40                panRight set $40
(1)  288/   B9DCE : =$80                panLeft set $80
(1)  288/   B9DCE : =$C0                panCentre set $C0
(1)  288/   B9DCE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  288/   B9DCE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  289/   B9DD0 : (MACRO)             	smpsSetvoice        $01
(1)  289/   B9DD0 :  (MACRO-2)                  smpsFMvoice $01
(1)  289/   B9DD0 : EF01                                dc.b    $EF,$01
(1)  290/   B9DD2 : 8030 8006 BA08 B904 	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
            B9DDA : B808 B704         
(1)  291/   B9DDE : B608 B504 8030 801E 	dc.b	nF4, $08, nE4, $04, nRst, $30, nRst, $1E
(1)  292/   B9DE6 : (MACRO)             	smpsPan             panRight, $00
(1)  292/   B9DE6 : =$0                 panNone set $00
(1)  292/   B9DE6 : =$40                panRight set $40
(1)  292/   B9DE6 : =$80                panLeft set $80
(1)  292/   B9DE6 : =$C0                panCentre set $C0
(1)  292/   B9DE6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  292/   B9DE6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  293/   B9DE8 : (MACRO)             	smpsSetvoice        $06
(1)  293/   B9DE8 :  (MACRO-2)                  smpsFMvoice $06
(1)  293/   B9DE8 : EF06                                dc.b    $EF,$06
(1)  294/   B9DEA : A112 A206           	dc.b	nAb2, $12, nA2, $06
(1)  295/   B9DEE : (MACRO)             	smpsPan             panCenter, $00
(1)  295/   B9DEE : =$0                 panNone set $00
(1)  295/   B9DEE : =$40                panRight set $40
(1)  295/   B9DEE : =$80                panLeft set $80
(1)  295/   B9DEE : =$C0                panCentre set $C0
(1)  295/   B9DEE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  295/   B9DEE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  296/   B9DF0 : (MACRO)             	smpsSetvoice        $01
(1)  296/   B9DF0 :  (MACRO-2)                  smpsFMvoice $01
(1)  296/   B9DF0 : EF01                                dc.b    $EF,$01
(1)  297/   B9DF2 : 8030 8006 BA08 B904 	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
            B9DFA : B808 B704         
(1)  298/   B9DFE : B608 B504 8030 801E 	dc.b	nF4, $08, nE4, $04, nRst, $30, nRst, $1E
(1)  299/   B9E06 : (MACRO)             	smpsPan             panRight, $00
(1)  299/   B9E06 : =$0                 panNone set $00
(1)  299/   B9E06 : =$40                panRight set $40
(1)  299/   B9E06 : =$80                panLeft set $80
(1)  299/   B9E06 : =$C0                panCentre set $C0
(1)  299/   B9E06 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  299/   B9E06 : E040                        dc.b $E0,PANRIGHT+$00
(1)  300/   B9E08 : (MACRO)             	smpsSetvoice        $06
(1)  300/   B9E08 :  (MACRO-2)                  smpsFMvoice $06
(1)  300/   B9E08 : EF06                                dc.b    $EF,$06
(1)  301/   B9E0A : A112 A206           	dc.b	nAb2, $12, nA2, $06
(1)  302/   B9E0E : (MACRO)             	smpsPan             panCenter, $00
(1)  302/   B9E0E : =$0                 panNone set $00
(1)  302/   B9E0E : =$40                panRight set $40
(1)  302/   B9E0E : =$80                panLeft set $80
(1)  302/   B9E0E : =$C0                panCentre set $C0
(1)  302/   B9E0E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  302/   B9E0E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  303/   B9E10 : (MACRO)             	smpsSetvoice        $01
(1)  303/   B9E10 :  (MACRO-2)                  smpsFMvoice $01
(1)  303/   B9E10 : EF01                                dc.b    $EF,$01
(1)  304/   B9E12 : 8030 8006 BA08 B904 	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
            B9E1A : B808 B704         
(1)  305/   B9E1E : B608 B504 8030 801E 	dc.b	nF4, $08, nE4, $04, nRst, $30, nRst, $1E
(1)  306/   B9E26 : (MACRO)             	smpsPan             panRight, $00
(1)  306/   B9E26 : =$0                 panNone set $00
(1)  306/   B9E26 : =$40                panRight set $40
(1)  306/   B9E26 : =$80                panLeft set $80
(1)  306/   B9E26 : =$C0                panCentre set $C0
(1)  306/   B9E26 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  306/   B9E26 : E040                        dc.b $E0,PANRIGHT+$00
(1)  307/   B9E28 : (MACRO)             	smpsSetvoice        $06
(1)  307/   B9E28 :  (MACRO-2)                  smpsFMvoice $06
(1)  307/   B9E28 : EF06                                dc.b    $EF,$06
(1)  308/   B9E2A : A112 A206           	dc.b	nAb2, $12, nA2, $06
(1)  309/   B9E2E : (MACRO)             	smpsPan             panCenter, $00
(1)  309/   B9E2E : =$0                 panNone set $00
(1)  309/   B9E2E : =$40                panRight set $40
(1)  309/   B9E2E : =$80                panLeft set $80
(1)  309/   B9E2E : =$C0                panCentre set $C0
(1)  309/   B9E2E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  309/   B9E2E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  310/   B9E30 : (MACRO)             	smpsSetvoice        $01
(1)  310/   B9E30 :  (MACRO-2)                  smpsFMvoice $01
(1)  310/   B9E30 : EF01                                dc.b    $EF,$01
(1)  311/   B9E32 : 8030 8006 BA08 B904 	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
            B9E3A : B808 B704         
(1)  312/   B9E3E : B608 B504           	dc.b	nF4, $08, nE4, $04
(1)  313/   B9E42 :                     
(1)  314/   B9E42 :                     MCZ_Loop00:
(1)  315/   B9E42 : 800C BD06 8012 8006 	dc.b	nRst, $0C, nC5, $06, nRst, $12, nRst, $06, nRst, $12, nC5, $06
            B9E4A : 8012 BD06         
(1)  316/   B9E4E : 800C                	dc.b	nRst, $0C
(1)  317/   B9E50 : (MACRO)             	smpsSetvoice        $06
(1)  317/   B9E50 :  (MACRO-2)                  smpsFMvoice $06
(1)  317/   B9E50 : EF06                                dc.b    $EF,$06
(1)  318/   B9E52 : A112 A206 80        	dc.b	nAb2, $12, nA2, $06, nRst
(1)  319/   B9E57 : (MACRO)             	smpsSetvoice        $01
(1)  319/   B9E57 :  (MACRO-2)                  smpsFMvoice $01
(1)  319/   B9E57 : EF01                                dc.b    $EF,$01
(1)  320/   B9E59 : BD06 8012 8006 8012 	dc.b	nC5, $06, nRst, $12, nRst, $06, nRst, $12, nC5, $08, nB4, $04
            B9E61 : BD08 BC04         
(1)  321/   B9E65 : BD08 BC04 BD0C      	dc.b	nC5, $08, nB4, $04, nC5, $0C
(1)  322/   B9E6B : (MACRO)             	smpsLoop            $00, $04, MCZ_Loop00
(1)  322/   B9E6B : F7                          dc.b    $F7
(1)  322/   B9E6C : 0004                        dc.b    $00,$04
(1)  322/   B9E6E : 429E                                dc.w    z80_ptr(MCZ_LOOP00)
(1)  323/   B9E70 : (MACRO)             	smpsCall            MCZ_Call00
(1)  323/   B9E70 : F8                          dc.b    $F8
(1)  323/   B9E71 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)  324/   B9E73 : (MACRO)             	smpsPan             panRight, $00
(1)  324/   B9E73 : =$0                 panNone set $00
(1)  324/   B9E73 : =$40                panRight set $40
(1)  324/   B9E73 : =$80                panLeft set $80
(1)  324/   B9E73 : =$C0                panCentre set $C0
(1)  324/   B9E73 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  324/   B9E73 : E040                        dc.b $E0,PANRIGHT+$00
(1)  325/   B9E75 : (MACRO)             	smpsAlterPitch      $F4
(1)  325/   B9E75 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  325/   B9E75 : FBF4                                dc.b    $FB,$F4
(1)  326/   B9E77 : 800C AE08 B004 B108 	dc.b	nRst, $0C, nA3, $08, nB3, $04, nC4, $08, nB3, $04, nA3, $0C
            B9E7F : B004 AE0C         
(1)  327/   B9E83 : 08B0 04B1 08B0 04AE 	dc.b	$08, nB3, $04, nC4, $08, nB3, $04, nA3, $06, nRst, $12
            B9E8B : 0680 12            
(1)  328/   B9E8E : (MACRO)             	smpsPan             panCenter, $00
(1)  328/   B9E8E : =$0                 panNone set $00
(1)  328/   B9E8E : =$40                panRight set $40
(1)  328/   B9E8E : =$80                panLeft set $80
(1)  328/   B9E8E : =$C0                panCentre set $C0
(1)  328/   B9E8E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  328/   B9E8E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  329/   B9E90 : (MACRO)             	smpsAlterPitch      $0C
(1)  329/   B9E90 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  329/   B9E90 : FB0C                                dc.b    $FB,$0C
(1)  330/   B9E92 : (MACRO)             	smpsCall            MCZ_Call00
(1)  330/   B9E92 : F8                          dc.b    $F8
(1)  330/   B9E93 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)  331/   B9E95 : (MACRO)             	smpsPan             panRight, $00
(1)  331/   B9E95 : =$0                 panNone set $00
(1)  331/   B9E95 : =$40                panRight set $40
(1)  331/   B9E95 : =$80                panLeft set $80
(1)  331/   B9E95 : =$C0                panCentre set $C0
(1)  331/   B9E95 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  331/   B9E95 : E040                        dc.b $E0,PANRIGHT+$00
(1)  332/   B9E97 : A20C 80A0 809E 809D 	dc.b	nA2, $0C, nRst, nG2, nRst, nF2, nRst, nE2, nRst
            B9E9F : 80               
(1)  333/   B9EA0 : (MACRO)             	smpsPan             panCenter, $00
(1)  333/   B9EA0 : =$0                 panNone set $00
(1)  333/   B9EA0 : =$40                panRight set $40
(1)  333/   B9EA0 : =$80                panLeft set $80
(1)  333/   B9EA0 : =$C0                panCentre set $C0
(1)  333/   B9EA0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  333/   B9EA0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  334/   B9EA2 : (MACRO)             	smpsCall            MCZ_Call00
(1)  334/   B9EA2 : F8                          dc.b    $F8
(1)  334/   B9EA3 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)  335/   B9EA5 : (MACRO)             	smpsPan             panRight, $00
(1)  335/   B9EA5 : =$0                 panNone set $00
(1)  335/   B9EA5 : =$40                panRight set $40
(1)  335/   B9EA5 : =$80                panLeft set $80
(1)  335/   B9EA5 : =$C0                panCentre set $C0
(1)  335/   B9EA5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  335/   B9EA5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  336/   B9EA7 : 800C AE08 B004 B108 	dc.b	nRst, $0C, nA3, $08, nB3, $04, nC4, $08, nB3, $04, nA3, $0C
            B9EAF : B004 AE0C         
(1)  337/   B9EB3 : 08B0 04B1 08B0 04AE 	dc.b	$08, nB3, $04, nC4, $08, nB3, $04, nA3, $06, nRst, $12
            B9EBB : 0680 12            
(1)  338/   B9EBE : (MACRO)             	smpsPan             panCenter, $00
(1)  338/   B9EBE : =$0                 panNone set $00
(1)  338/   B9EBE : =$40                panRight set $40
(1)  338/   B9EBE : =$80                panLeft set $80
(1)  338/   B9EBE : =$C0                panCentre set $C0
(1)  338/   B9EBE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  338/   B9EBE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  339/   B9EC0 : (MACRO)             	smpsCall            MCZ_Call00
(1)  339/   B9EC0 : F8                          dc.b    $F8
(1)  339/   B9EC1 : 4799                                dc.w    z80_ptr(MCZ_CALL00)
(1)  340/   B9EC3 : (MACRO)             	smpsPan             panRight, $00
(1)  340/   B9EC3 : =$0                 panNone set $00
(1)  340/   B9EC3 : =$40                panRight set $40
(1)  340/   B9EC3 : =$80                panLeft set $80
(1)  340/   B9EC3 : =$C0                panCentre set $C0
(1)  340/   B9EC3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  340/   B9EC3 : E040                        dc.b $E0,PANRIGHT+$00
(1)  341/   B9EC5 : A20C A29D 08A0 0CA2 	dc.b	nA2, $0C, nA2, nE2, $08, nG2, $0C, nA2, $06, nRst, $2E
            B9ECD : 0680 2E            
(1)  342/   B9ED0 : (MACRO)             	smpsPan             panCenter, $00
(1)  342/   B9ED0 : =$0                 panNone set $00
(1)  342/   B9ED0 : =$40                panRight set $40
(1)  342/   B9ED0 : =$80                panLeft set $80
(1)  342/   B9ED0 : =$C0                panCentre set $C0
(1)  342/   B9ED0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  342/   B9ED0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  343/   B9ED2 : (MACRO)             	smpsJump            MCZ_Jump01
(1)  343/   B9ED2 : F6                          dc.b    $F6
(1)  343/   B9ED3 : C29D                                dc.w    z80_ptr(MCZ_JUMP01)
(1)  344/   B9ED5 :                     
(1)  345/   B9ED5 :                     ; PSG3 Data
(1)  346/   B9ED5 :                     MCZ_PSG3:
(1)  347/   B9ED5 : (MACRO)             	smpsPSGform         $E7
(1)  347/   B9ED5 : F3E7                        dc.b    $F3,$E7
(1)  348/   B9ED7 : 8030 80             	dc.b	nRst, $30, nRst
(1)  349/   B9EDA :                     
(1)  350/   B9EDA :                     MCZ_Jump04:
(1)  351/   B9EDA : C70C 0804           	dc.b	nMaxPSG, $0C, $08, $04
(1)  352/   B9EDE : (MACRO)             	smpsJump            MCZ_Jump04
(1)  352/   B9EDE : F6                          dc.b    $F6
(1)  352/   B9EDF : DA9E                                dc.w    z80_ptr(MCZ_JUMP04)
(1)  353/   B9EE1 :                     
(1)  354/   B9EE1 :                     ; DAC Data
(1)  355/   B9EE1 :                     MCZ_DAC:
(1)  356/   B9EE1 : 8030 8018 810C 0804 	dc.b	nRst, $30, nRst, $18, dKick, $0C, $08, $04
(1)  357/   B9EE9 :                     
(1)  358/   B9EE9 :                     MCZ_Jump00:
(1)  359/   B9EE9 : 8108 0C04 820C 8108 	dc.b	dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C, dSnare, $04, dKick
            B9EF1 : 0C82 0481         
(1)  360/   B9EF5 : 0C82 8181 080C 0482 	dc.b	$0C, dSnare, dKick, dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C
            B9EFD : 0C81 080C         
(1)  361/   B9F01 : 8204 810C 8282 0804 	dc.b	dSnare, $04, dKick, $0C, dSnare, dSnare, $08, $04
(1)  362/   B9F09 : (MACRO)             	smpsJump            MCZ_Jump00
(1)  362/   B9F09 : F6                          dc.b    $F6
(1)  362/   B9F0A : E99E                                dc.w    z80_ptr(MCZ_JUMP00)
(1)  363/   B9F0C :                     
(1)  364/   B9F0C :                     MCZ_Voices:
(1)  365/   B9F0C :                     ;	Voice $00
(1)  366/   B9F0C :                     ;	$04
(1)  367/   B9F0C :                     ;	$35, $72, $54, $46, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
(1)  368/   B9F0C :                     ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $14, $1D, $80
(1)  369/   B9F0C : (MACRO)             	smpsVcAlgorithm     $04
(1)  369/   B9F0C : =$4                 vcAlgorithm set $04
(1)  370/   B9F0C : (MACRO)             	smpsVcFeedback      $00
(1)  370/   B9F0C : =$0                 vcFeedback set $00
(1)  371/   B9F0C : (MACRO)             	smpsVcUnusedBits    $00
(1)  371/   B9F0C : =$0                 vcUnusedBits set $00
(1)  371/   B9F0C : =$0                 vcD1R1Unk set 0
(1)  371/   B9F0C : =$0                 vcD1R2Unk set 0
(1)  371/   B9F0C : =$0                 vcD1R3Unk set 0
(1)  371/   B9F0C : =$0                 vcD1R4Unk set 0
(1)  372/   B9F0C : (MACRO)             	smpsVcDetune        $04, $05, $07, $03
(1)  372/   B9F0C : =$4                 vcDT1 set $04
(1)  372/   B9F0C : =$5                 vcDT2 set $05
(1)  372/   B9F0C : =$7                 vcDT3 set $07
(1)  372/   B9F0C : =$3                 vcDT4 set $03
(1)  373/   B9F0C : (MACRO)             	smpsVcCoarseFreq    $06, $04, $02, $05
(1)  373/   B9F0C : =$6                 vcCF1 set $06
(1)  373/   B9F0C : =$4                 vcCF2 set $04
(1)  373/   B9F0C : =$2                 vcCF3 set $02
(1)  373/   B9F0C : =$5                 vcCF4 set $05
(1)  374/   B9F0C : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  374/   B9F0C : =$0                 vcRS1 set $00
(1)  374/   B9F0C : =$0                 vcRS2 set $00
(1)  374/   B9F0C : =$0                 vcRS3 set $00
(1)  374/   B9F0C : =$0                 vcRS4 set $00
(1)  375/   B9F0C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  375/   B9F0C : =$1F                vcAR1 set $1F
(1)  375/   B9F0C : =$1F                vcAR2 set $1F
(1)  375/   B9F0C : =$1F                vcAR3 set $1F
(1)  375/   B9F0C : =$1F                vcAR4 set $1F
(1)  376/   B9F0C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  376/   B9F0C : =$0                 vcAM1 set $00<<5
(1)  376/   B9F0C : =$0                 vcAM2 set $00<<5
(1)  376/   B9F0C : =$0                 vcAM3 set $00<<5
(1)  376/   B9F0C : =$0                 vcAM4 set $00<<5
(1)  377/   B9F0C : (MACRO)             	smpsVcDecayRate1    $0D, $07, $0A, $07
(1)  377/   B9F0C : =$D                 vcD1R1 set $0D
(1)  377/   B9F0C : =$7                 vcD1R2 set $07
(1)  377/   B9F0C : =$A                 vcD1R3 set $0A
(1)  377/   B9F0C : =$7                 vcD1R4 set $07
(1)  378/   B9F0C : (MACRO)             	smpsVcDecayRate2    $0B, $00, $0B, $00
(1)  378/   B9F0C : =$B                 vcD2R1 set $0B
(1)  378/   B9F0C : =$0                 vcD2R2 set $00
(1)  378/   B9F0C : =$B                 vcD2R3 set $0B
(1)  378/   B9F0C : =$0                 vcD2R4 set $00
(1)  379/   B9F0C : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)  379/   B9F0C : =$0                 vcDL1 set $00
(1)  379/   B9F0C : =$1                 vcDL2 set $01
(1)  379/   B9F0C : =$0                 vcDL3 set $00
(1)  379/   B9F0C : =$1                 vcDL4 set $01
(1)  380/   B9F0C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  380/   B9F0C : =$F                 vcRR1 set $0F
(1)  380/   B9F0C : =$F                 vcRR2 set $0F
(1)  380/   B9F0C : =$F                 vcRR3 set $0F
(1)  380/   B9F0C : =$F                 vcRR4 set $0F
(1)  381/   B9F0C : (MACRO)             	smpsVcTotalLevel    $80, $1D, $14, $23
(1)  381/   B9F0C : =$80                vcTL1 set $80
(1)  381/   B9F0C : =$1D                vcTL2 set $1D
(1)  381/   B9F0C : =$14                vcTL3 set $14
(1)  381/   B9F0C : =$23                vcTL4 set $23
(1)  381/   B9F0C : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  381/   B9F0D :                     ;   0     1     2     3     4     5     6     7
(1)  381/   B9F0D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  381/   B9F0D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  381/   B9F0D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  381/   B9F0D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  381/   B9F0D : =$80                vcTLMask1 set $80
(1)  381/   B9F0D :                     
(1)  381/   B9F0D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  381/   B9F0D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  381/   B9F0D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  381/   B9F0D : =$80                vcTLMask1 set $80
(1)  381/   B9F0D : =$0                 vcTL1 set vcTL1&$7F
(1)  381/   B9F0D : =$1D                vcTL2 set vcTL2&$7F
(1)  381/   B9F0D : =$14                vcTL3 set vcTL3&$7F
(1)  381/   B9F0D : =$23                vcTL4 set vcTL4&$7F
(1)  381/   B9F0D :                     
(1)  381/   B9F0D : 3572 5446                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  381/   B9F11 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  381/   B9F15 : 070A 070D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  381/   B9F19 : 000B 000B                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  381/   B9F1D : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  381/   B9F21 : 2394 1D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  382/   B9F25 :                     
(1)  383/   B9F25 :                     ;	Voice $01
(1)  384/   B9F25 :                     ;	$3A
(1)  385/   B9F25 :                     ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
(1)  386/   B9F25 :                     ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
(1)  387/   B9F25 : (MACRO)             	smpsVcAlgorithm     $02
(1)  387/   B9F25 : =$2                 vcAlgorithm set $02
(1)  388/   B9F25 : (MACRO)             	smpsVcFeedback      $07
(1)  388/   B9F25 : =$7                 vcFeedback set $07
(1)  389/   B9F25 : (MACRO)             	smpsVcUnusedBits    $00
(1)  389/   B9F25 : =$0                 vcUnusedBits set $00
(1)  389/   B9F25 : =$0                 vcD1R1Unk set 0
(1)  389/   B9F25 : =$0                 vcD1R2Unk set 0
(1)  389/   B9F25 : =$0                 vcD1R3Unk set 0
(1)  389/   B9F25 : =$0                 vcD1R4Unk set 0
(1)  390/   B9F25 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  390/   B9F25 : =$0                 vcDT1 set $00
(1)  390/   B9F25 : =$0                 vcDT2 set $00
(1)  390/   B9F25 : =$0                 vcDT3 set $00
(1)  390/   B9F25 : =$0                 vcDT4 set $00
(1)  391/   B9F25 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $01, $01
(1)  391/   B9F25 : =$2                 vcCF1 set $02
(1)  391/   B9F25 : =$1                 vcCF2 set $01
(1)  391/   B9F25 : =$1                 vcCF3 set $01
(1)  391/   B9F25 : =$1                 vcCF4 set $01
(1)  392/   B9F25 : (MACRO)             	smpsVcRateScale     $01, $00, $00, $02
(1)  392/   B9F25 : =$1                 vcRS1 set $01
(1)  392/   B9F25 : =$0                 vcRS2 set $00
(1)  392/   B9F25 : =$0                 vcRS3 set $00
(1)  392/   B9F25 : =$2                 vcRS4 set $02
(1)  393/   B9F25 : (MACRO)             	smpsVcAttackRate    $12, $07, $07, $0D
(1)  393/   B9F25 : =$12                vcAR1 set $12
(1)  393/   B9F25 : =$7                 vcAR2 set $07
(1)  393/   B9F25 : =$7                 vcAR3 set $07
(1)  393/   B9F25 : =$D                 vcAR4 set $0D
(1)  394/   B9F25 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  394/   B9F25 : =$0                 vcAM1 set $00<<5
(1)  394/   B9F25 : =$0                 vcAM2 set $00<<5
(1)  394/   B9F25 : =$0                 vcAM3 set $00<<5
(1)  394/   B9F25 : =$0                 vcAM4 set $00<<5
(1)  395/   B9F25 : (MACRO)             	smpsVcDecayRate1    $03, $00, $00, $09
(1)  395/   B9F25 : =$3                 vcD1R1 set $03
(1)  395/   B9F25 : =$0                 vcD1R2 set $00
(1)  395/   B9F25 : =$0                 vcD1R3 set $00
(1)  395/   B9F25 : =$9                 vcD1R4 set $09
(1)  396/   B9F25 : (MACRO)             	smpsVcDecayRate2    $00, $02, $02, $01
(1)  396/   B9F25 : =$0                 vcD2R1 set $00
(1)  396/   B9F25 : =$2                 vcD2R2 set $02
(1)  396/   B9F25 : =$2                 vcD2R3 set $02
(1)  396/   B9F25 : =$1                 vcD2R4 set $01
(1)  397/   B9F25 : (MACRO)             	smpsVcDecayLevel    $02, $00, $00, $05
(1)  397/   B9F25 : =$2                 vcDL1 set $02
(1)  397/   B9F25 : =$0                 vcDL2 set $00
(1)  397/   B9F25 : =$0                 vcDL3 set $00
(1)  397/   B9F25 : =$5                 vcDL4 set $05
(1)  398/   B9F25 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  398/   B9F25 : =$F                 vcRR1 set $0F
(1)  398/   B9F25 : =$F                 vcRR2 set $0F
(1)  398/   B9F25 : =$F                 vcRR3 set $0F
(1)  398/   B9F25 : =$F                 vcRR4 set $0F
(1)  399/   B9F25 : (MACRO)             	smpsVcTotalLevel    $80, $18, $22, $18
(1)  399/   B9F25 : =$80                vcTL1 set $80
(1)  399/   B9F25 : =$18                vcTL2 set $18
(1)  399/   B9F25 : =$22                vcTL3 set $22
(1)  399/   B9F25 : =$18                vcTL4 set $18
(1)  399/   B9F25 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  399/   B9F26 :                     ;   0     1     2     3     4     5     6     7
(1)  399/   B9F26 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  399/   B9F26 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  399/   B9F26 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  399/   B9F26 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  399/   B9F26 : =$80                vcTLMask1 set $80
(1)  399/   B9F26 :                     
(1)  399/   B9F26 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  399/   B9F26 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  399/   B9F26 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  399/   B9F26 : =$80                vcTLMask1 set $80
(1)  399/   B9F26 : =$0                 vcTL1 set vcTL1&$7F
(1)  399/   B9F26 : =$18                vcTL2 set vcTL2&$7F
(1)  399/   B9F26 : =$22                vcTL3 set vcTL3&$7F
(1)  399/   B9F26 : =$18                vcTL4 set vcTL4&$7F
(1)  399/   B9F26 :                     
(1)  399/   B9F26 : 0101 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  399/   B9F2A : 8D07 0752                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  399/   B9F2E : 0900 0003                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  399/   B9F32 : 0102 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  399/   B9F36 : 5F0F 0F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  399/   B9F3A : 1822 1880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  400/   B9F3E :                     
(1)  401/   B9F3E :                     ;	Voice $02
(1)  402/   B9F3E :                     ;	$3C
(1)  403/   B9F3E :                     ;	$42, $41, $32, $41, 	$12, $12, $12, $12, 	$00, $00, $00, $00
(1)  404/   B9F3E :                     ;	$00, $00, $00, $00, 	$06, $08, $06, $08, 	$24, $08, $24, $08
(1)  405/   B9F3E : (MACRO)             	smpsVcAlgorithm     $04
(1)  405/   B9F3E : =$4                 vcAlgorithm set $04
(1)  406/   B9F3E : (MACRO)             	smpsVcFeedback      $07
(1)  406/   B9F3E : =$7                 vcFeedback set $07
(1)  407/   B9F3E : (MACRO)             	smpsVcUnusedBits    $00
(1)  407/   B9F3E : =$0                 vcUnusedBits set $00
(1)  407/   B9F3E : =$0                 vcD1R1Unk set 0
(1)  407/   B9F3E : =$0                 vcD1R2Unk set 0
(1)  407/   B9F3E : =$0                 vcD1R3Unk set 0
(1)  407/   B9F3E : =$0                 vcD1R4Unk set 0
(1)  408/   B9F3E : (MACRO)             	smpsVcDetune        $04, $03, $04, $04
(1)  408/   B9F3E : =$4                 vcDT1 set $04
(1)  408/   B9F3E : =$3                 vcDT2 set $03
(1)  408/   B9F3E : =$4                 vcDT3 set $04
(1)  408/   B9F3E : =$4                 vcDT4 set $04
(1)  409/   B9F3E : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $02
(1)  409/   B9F3E : =$1                 vcCF1 set $01
(1)  409/   B9F3E : =$2                 vcCF2 set $02
(1)  409/   B9F3E : =$1                 vcCF3 set $01
(1)  409/   B9F3E : =$2                 vcCF4 set $02
(1)  410/   B9F3E : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  410/   B9F3E : =$0                 vcRS1 set $00
(1)  410/   B9F3E : =$0                 vcRS2 set $00
(1)  410/   B9F3E : =$0                 vcRS3 set $00
(1)  410/   B9F3E : =$0                 vcRS4 set $00
(1)  411/   B9F3E : (MACRO)             	smpsVcAttackRate    $12, $12, $12, $12
(1)  411/   B9F3E : =$12                vcAR1 set $12
(1)  411/   B9F3E : =$12                vcAR2 set $12
(1)  411/   B9F3E : =$12                vcAR3 set $12
(1)  411/   B9F3E : =$12                vcAR4 set $12
(1)  412/   B9F3E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  412/   B9F3E : =$0                 vcAM1 set $00<<5
(1)  412/   B9F3E : =$0                 vcAM2 set $00<<5
(1)  412/   B9F3E : =$0                 vcAM3 set $00<<5
(1)  412/   B9F3E : =$0                 vcAM4 set $00<<5
(1)  413/   B9F3E : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  413/   B9F3E : =$0                 vcD1R1 set $00
(1)  413/   B9F3E : =$0                 vcD1R2 set $00
(1)  413/   B9F3E : =$0                 vcD1R3 set $00
(1)  413/   B9F3E : =$0                 vcD1R4 set $00
(1)  414/   B9F3E : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  414/   B9F3E : =$0                 vcD2R1 set $00
(1)  414/   B9F3E : =$0                 vcD2R2 set $00
(1)  414/   B9F3E : =$0                 vcD2R3 set $00
(1)  414/   B9F3E : =$0                 vcD2R4 set $00
(1)  415/   B9F3E : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  415/   B9F3E : =$0                 vcDL1 set $00
(1)  415/   B9F3E : =$0                 vcDL2 set $00
(1)  415/   B9F3E : =$0                 vcDL3 set $00
(1)  415/   B9F3E : =$0                 vcDL4 set $00
(1)  416/   B9F3E : (MACRO)             	smpsVcReleaseRate   $08, $06, $08, $06
(1)  416/   B9F3E : =$8                 vcRR1 set $08
(1)  416/   B9F3E : =$6                 vcRR2 set $06
(1)  416/   B9F3E : =$8                 vcRR3 set $08
(1)  416/   B9F3E : =$6                 vcRR4 set $06
(1)  417/   B9F3E : (MACRO)             	smpsVcTotalLevel    $08, $24, $08, $24
(1)  417/   B9F3E : =$8                 vcTL1 set $08
(1)  417/   B9F3E : =$24                vcTL2 set $24
(1)  417/   B9F3E : =$8                 vcTL3 set $08
(1)  417/   B9F3E : =$24                vcTL4 set $24
(1)  417/   B9F3E : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  417/   B9F3F :                     ;   0     1     2     3     4     5     6     7
(1)  417/   B9F3F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  417/   B9F3F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  417/   B9F3F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  417/   B9F3F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  417/   B9F3F : =$80                vcTLMask1 set $80
(1)  417/   B9F3F :                     
(1)  417/   B9F3F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  417/   B9F3F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  417/   B9F3F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  417/   B9F3F : =$80                vcTLMask1 set $80
(1)  417/   B9F3F : =$8                 vcTL1 set vcTL1&$7F
(1)  417/   B9F3F : =$24                vcTL2 set vcTL2&$7F
(1)  417/   B9F3F : =$8                 vcTL3 set vcTL3&$7F
(1)  417/   B9F3F : =$24                vcTL4 set vcTL4&$7F
(1)  417/   B9F3F :                     
(1)  417/   B9F3F : 4241 3241                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  417/   B9F43 : 1212 1212                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  417/   B9F47 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  417/   B9F4B : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  417/   B9F4F : 0608 0608                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  417/   B9F53 : 2488 2488                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  418/   B9F57 :                     
(1)  419/   B9F57 :                     ;	Voice $03
(1)  420/   B9F57 :                     ;	$3C
(1)  421/   B9F57 :                     ;	$51, $51, $11, $11, 	$12, $14, $11, $0F, 	$0A, $05, $05, $05
(1)  422/   B9F57 :                     ;	$00, $00, $00, $00, 	$A6, $1A, $56, $1A, 	$13, $00, $0D, $00
(1)  423/   B9F57 : (MACRO)             	smpsVcAlgorithm     $04
(1)  423/   B9F57 : =$4                 vcAlgorithm set $04
(1)  424/   B9F57 : (MACRO)             	smpsVcFeedback      $07
(1)  424/   B9F57 : =$7                 vcFeedback set $07
(1)  425/   B9F57 : (MACRO)             	smpsVcUnusedBits    $00
(1)  425/   B9F57 : =$0                 vcUnusedBits set $00
(1)  425/   B9F57 : =$0                 vcD1R1Unk set 0
(1)  425/   B9F57 : =$0                 vcD1R2Unk set 0
(1)  425/   B9F57 : =$0                 vcD1R3Unk set 0
(1)  425/   B9F57 : =$0                 vcD1R4Unk set 0
(1)  426/   B9F57 : (MACRO)             	smpsVcDetune        $01, $01, $05, $05
(1)  426/   B9F57 : =$1                 vcDT1 set $01
(1)  426/   B9F57 : =$1                 vcDT2 set $01
(1)  426/   B9F57 : =$5                 vcDT3 set $05
(1)  426/   B9F57 : =$5                 vcDT4 set $05
(1)  427/   B9F57 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  427/   B9F57 : =$1                 vcCF1 set $01
(1)  427/   B9F57 : =$1                 vcCF2 set $01
(1)  427/   B9F57 : =$1                 vcCF3 set $01
(1)  427/   B9F57 : =$1                 vcCF4 set $01
(1)  428/   B9F57 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  428/   B9F57 : =$0                 vcRS1 set $00
(1)  428/   B9F57 : =$0                 vcRS2 set $00
(1)  428/   B9F57 : =$0                 vcRS3 set $00
(1)  428/   B9F57 : =$0                 vcRS4 set $00
(1)  429/   B9F57 : (MACRO)             	smpsVcAttackRate    $0F, $11, $14, $12
(1)  429/   B9F57 : =$F                 vcAR1 set $0F
(1)  429/   B9F57 : =$11                vcAR2 set $11
(1)  429/   B9F57 : =$14                vcAR3 set $14
(1)  429/   B9F57 : =$12                vcAR4 set $12
(1)  430/   B9F57 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  430/   B9F57 : =$0                 vcAM1 set $00<<5
(1)  430/   B9F57 : =$0                 vcAM2 set $00<<5
(1)  430/   B9F57 : =$0                 vcAM3 set $00<<5
(1)  430/   B9F57 : =$0                 vcAM4 set $00<<5
(1)  431/   B9F57 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1)  431/   B9F57 : =$5                 vcD1R1 set $05
(1)  431/   B9F57 : =$5                 vcD1R2 set $05
(1)  431/   B9F57 : =$5                 vcD1R3 set $05
(1)  431/   B9F57 : =$A                 vcD1R4 set $0A
(1)  432/   B9F57 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  432/   B9F57 : =$0                 vcD2R1 set $00
(1)  432/   B9F57 : =$0                 vcD2R2 set $00
(1)  432/   B9F57 : =$0                 vcD2R3 set $00
(1)  432/   B9F57 : =$0                 vcD2R4 set $00
(1)  433/   B9F57 : (MACRO)             	smpsVcDecayLevel    $01, $05, $01, $0A
(1)  433/   B9F57 : =$1                 vcDL1 set $01
(1)  433/   B9F57 : =$5                 vcDL2 set $05
(1)  433/   B9F57 : =$1                 vcDL3 set $01
(1)  433/   B9F57 : =$A                 vcDL4 set $0A
(1)  434/   B9F57 : (MACRO)             	smpsVcReleaseRate   $0A, $06, $0A, $06
(1)  434/   B9F57 : =$A                 vcRR1 set $0A
(1)  434/   B9F57 : =$6                 vcRR2 set $06
(1)  434/   B9F57 : =$A                 vcRR3 set $0A
(1)  434/   B9F57 : =$6                 vcRR4 set $06
(1)  435/   B9F57 : (MACRO)             	smpsVcTotalLevel    $00, $0D, $00, $13
(1)  435/   B9F57 : =$0                 vcTL1 set $00
(1)  435/   B9F57 : =$D                 vcTL2 set $0D
(1)  435/   B9F57 : =$0                 vcTL3 set $00
(1)  435/   B9F57 : =$13                vcTL4 set $13
(1)  435/   B9F57 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  435/   B9F58 :                     ;   0     1     2     3     4     5     6     7
(1)  435/   B9F58 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  435/   B9F58 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  435/   B9F58 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  435/   B9F58 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  435/   B9F58 : =$80                vcTLMask1 set $80
(1)  435/   B9F58 :                     
(1)  435/   B9F58 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  435/   B9F58 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  435/   B9F58 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  435/   B9F58 : =$80                vcTLMask1 set $80
(1)  435/   B9F58 : =$0                 vcTL1 set vcTL1&$7F
(1)  435/   B9F58 : =$D                 vcTL2 set vcTL2&$7F
(1)  435/   B9F58 : =$0                 vcTL3 set vcTL3&$7F
(1)  435/   B9F58 : =$13                vcTL4 set vcTL4&$7F
(1)  435/   B9F58 :                     
(1)  435/   B9F58 : 5151 1111                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  435/   B9F5C : 1214 110F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  435/   B9F60 : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  435/   B9F64 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  435/   B9F68 : A61A 561A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  435/   B9F6C : 1380 0D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  436/   B9F70 :                     
(1)  437/   B9F70 :                     ;	Voice $04
(1)  438/   B9F70 :                     ;	$24
(1)  439/   B9F70 :                     ;	$70, $74, $30, $38, 	$12, $1F, $1F, $1F, 	$05, $03, $05, $03
(1)  440/   B9F70 :                     ;	$05, $03, $05, $03, 	$36, $2C, $26, $2C, 	$0A, $08, $06, $08
(1)  441/   B9F70 : (MACRO)             	smpsVcAlgorithm     $04
(1)  441/   B9F70 : =$4                 vcAlgorithm set $04
(1)  442/   B9F70 : (MACRO)             	smpsVcFeedback      $04
(1)  442/   B9F70 : =$4                 vcFeedback set $04
(1)  443/   B9F70 : (MACRO)             	smpsVcUnusedBits    $00
(1)  443/   B9F70 : =$0                 vcUnusedBits set $00
(1)  443/   B9F70 : =$0                 vcD1R1Unk set 0
(1)  443/   B9F70 : =$0                 vcD1R2Unk set 0
(1)  443/   B9F70 : =$0                 vcD1R3Unk set 0
(1)  443/   B9F70 : =$0                 vcD1R4Unk set 0
(1)  444/   B9F70 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(1)  444/   B9F70 : =$3                 vcDT1 set $03
(1)  444/   B9F70 : =$3                 vcDT2 set $03
(1)  444/   B9F70 : =$7                 vcDT3 set $07
(1)  444/   B9F70 : =$7                 vcDT4 set $07
(1)  445/   B9F70 : (MACRO)             	smpsVcCoarseFreq    $08, $00, $04, $00
(1)  445/   B9F70 : =$8                 vcCF1 set $08
(1)  445/   B9F70 : =$0                 vcCF2 set $00
(1)  445/   B9F70 : =$4                 vcCF3 set $04
(1)  445/   B9F70 : =$0                 vcCF4 set $00
(1)  446/   B9F70 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  446/   B9F70 : =$0                 vcRS1 set $00
(1)  446/   B9F70 : =$0                 vcRS2 set $00
(1)  446/   B9F70 : =$0                 vcRS3 set $00
(1)  446/   B9F70 : =$0                 vcRS4 set $00
(1)  447/   B9F70 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $12
(1)  447/   B9F70 : =$1F                vcAR1 set $1F
(1)  447/   B9F70 : =$1F                vcAR2 set $1F
(1)  447/   B9F70 : =$1F                vcAR3 set $1F
(1)  447/   B9F70 : =$12                vcAR4 set $12
(1)  448/   B9F70 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  448/   B9F70 : =$0                 vcAM1 set $00<<5
(1)  448/   B9F70 : =$0                 vcAM2 set $00<<5
(1)  448/   B9F70 : =$0                 vcAM3 set $00<<5
(1)  448/   B9F70 : =$0                 vcAM4 set $00<<5
(1)  449/   B9F70 : (MACRO)             	smpsVcDecayRate1    $03, $05, $03, $05
(1)  449/   B9F70 : =$3                 vcD1R1 set $03
(1)  449/   B9F70 : =$5                 vcD1R2 set $05
(1)  449/   B9F70 : =$3                 vcD1R3 set $03
(1)  449/   B9F70 : =$5                 vcD1R4 set $05
(1)  450/   B9F70 : (MACRO)             	smpsVcDecayRate2    $03, $05, $03, $05
(1)  450/   B9F70 : =$3                 vcD2R1 set $03
(1)  450/   B9F70 : =$5                 vcD2R2 set $05
(1)  450/   B9F70 : =$3                 vcD2R3 set $03
(1)  450/   B9F70 : =$5                 vcD2R4 set $05
(1)  451/   B9F70 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $03
(1)  451/   B9F70 : =$2                 vcDL1 set $02
(1)  451/   B9F70 : =$2                 vcDL2 set $02
(1)  451/   B9F70 : =$2                 vcDL3 set $02
(1)  451/   B9F70 : =$3                 vcDL4 set $03
(1)  452/   B9F70 : (MACRO)             	smpsVcReleaseRate   $0C, $06, $0C, $06
(1)  452/   B9F70 : =$C                 vcRR1 set $0C
(1)  452/   B9F70 : =$6                 vcRR2 set $06
(1)  452/   B9F70 : =$C                 vcRR3 set $0C
(1)  452/   B9F70 : =$6                 vcRR4 set $06
(1)  453/   B9F70 : (MACRO)             	smpsVcTotalLevel    $08, $06, $08, $0A
(1)  453/   B9F70 : =$8                 vcTL1 set $08
(1)  453/   B9F70 : =$6                 vcTL2 set $06
(1)  453/   B9F70 : =$8                 vcTL3 set $08
(1)  453/   B9F70 : =$A                 vcTL4 set $0A
(1)  453/   B9F70 : 24                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  453/   B9F71 :                     ;   0     1     2     3     4     5     6     7
(1)  453/   B9F71 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  453/   B9F71 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  453/   B9F71 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  453/   B9F71 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  453/   B9F71 : =$80                vcTLMask1 set $80
(1)  453/   B9F71 :                     
(1)  453/   B9F71 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  453/   B9F71 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  453/   B9F71 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  453/   B9F71 : =$80                vcTLMask1 set $80
(1)  453/   B9F71 : =$8                 vcTL1 set vcTL1&$7F
(1)  453/   B9F71 : =$6                 vcTL2 set vcTL2&$7F
(1)  453/   B9F71 : =$8                 vcTL3 set vcTL3&$7F
(1)  453/   B9F71 : =$A                 vcTL4 set vcTL4&$7F
(1)  453/   B9F71 :                     
(1)  453/   B9F71 : 7074 3038                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  453/   B9F75 : 121F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  453/   B9F79 : 0503 0503                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  453/   B9F7D : 0503 0503                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  453/   B9F81 : 362C 262C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  453/   B9F85 : 0A88 0688                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  454/   B9F89 :                     
(1)  455/   B9F89 :                     ;	Voice $05
(1)  456/   B9F89 :                     ;	$31
(1)  457/   B9F89 :                     ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
(1)  458/   B9F89 :                     ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
(1)  459/   B9F89 : (MACRO)             	smpsVcAlgorithm     $01
(1)  459/   B9F89 : =$1                 vcAlgorithm set $01
(1)  460/   B9F89 : (MACRO)             	smpsVcFeedback      $06
(1)  460/   B9F89 : =$6                 vcFeedback set $06
(1)  461/   B9F89 : (MACRO)             	smpsVcUnusedBits    $00
(1)  461/   B9F89 : =$0                 vcUnusedBits set $00
(1)  461/   B9F89 : =$0                 vcD1R1Unk set 0
(1)  461/   B9F89 : =$0                 vcD1R2Unk set 0
(1)  461/   B9F89 : =$0                 vcD1R3Unk set 0
(1)  461/   B9F89 : =$0                 vcD1R4Unk set 0
(1)  462/   B9F89 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)  462/   B9F89 : =$3                 vcDT1 set $03
(1)  462/   B9F89 : =$3                 vcDT2 set $03
(1)  462/   B9F89 : =$3                 vcDT3 set $03
(1)  462/   B9F89 : =$3                 vcDT4 set $03
(1)  463/   B9F89 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $04
(1)  463/   B9F89 : =$1                 vcCF1 set $01
(1)  463/   B9F89 : =$0                 vcCF2 set $00
(1)  463/   B9F89 : =$5                 vcCF3 set $05
(1)  463/   B9F89 : =$4                 vcCF4 set $04
(1)  464/   B9F89 : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1)  464/   B9F89 : =$2                 vcRS1 set $02
(1)  464/   B9F89 : =$2                 vcRS2 set $02
(1)  464/   B9F89 : =$3                 vcRS3 set $03
(1)  464/   B9F89 : =$3                 vcRS4 set $03
(1)  465/   B9F89 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  465/   B9F89 : =$1F                vcAR1 set $1F
(1)  465/   B9F89 : =$1F                vcAR2 set $1F
(1)  465/   B9F89 : =$1F                vcAR3 set $1F
(1)  465/   B9F89 : =$1F                vcAR4 set $1F
(1)  466/   B9F89 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  466/   B9F89 : =$0                 vcAM1 set $00<<5
(1)  466/   B9F89 : =$0                 vcAM2 set $00<<5
(1)  466/   B9F89 : =$0                 vcAM3 set $00<<5
(1)  466/   B9F89 : =$0                 vcAM4 set $00<<5
(1)  467/   B9F89 : (MACRO)             	smpsVcDecayRate1    $09, $0C, $07, $0C
(1)  467/   B9F89 : =$9                 vcD1R1 set $09
(1)  467/   B9F89 : =$C                 vcD1R2 set $0C
(1)  467/   B9F89 : =$7                 vcD1R3 set $07
(1)  467/   B9F89 : =$C                 vcD1R4 set $0C
(1)  468/   B9F89 : (MACRO)             	smpsVcDecayRate2    $08, $07, $07, $07
(1)  468/   B9F89 : =$8                 vcD2R1 set $08
(1)  468/   B9F89 : =$7                 vcD2R2 set $07
(1)  468/   B9F89 : =$7                 vcD2R3 set $07
(1)  468/   B9F89 : =$7                 vcD2R4 set $07
(1)  469/   B9F89 : (MACRO)             	smpsVcDecayLevel    $02, $01, $01, $02
(1)  469/   B9F89 : =$2                 vcDL1 set $02
(1)  469/   B9F89 : =$1                 vcDL2 set $01
(1)  469/   B9F89 : =$1                 vcDL3 set $01
(1)  469/   B9F89 : =$2                 vcDL4 set $02
(1)  470/   B9F89 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  470/   B9F89 : =$F                 vcRR1 set $0F
(1)  470/   B9F89 : =$F                 vcRR2 set $0F
(1)  470/   B9F89 : =$F                 vcRR3 set $0F
(1)  470/   B9F89 : =$F                 vcRR4 set $0F
(1)  471/   B9F89 : (MACRO)             	smpsVcTotalLevel    $80, $14, $32, $17
(1)  471/   B9F89 : =$80                vcTL1 set $80
(1)  471/   B9F89 : =$14                vcTL2 set $14
(1)  471/   B9F89 : =$32                vcTL3 set $32
(1)  471/   B9F89 : =$17                vcTL4 set $17
(1)  471/   B9F89 : 31                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  471/   B9F8A :                     ;   0     1     2     3     4     5     6     7
(1)  471/   B9F8A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  471/   B9F8A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  471/   B9F8A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  471/   B9F8A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  471/   B9F8A : =$80                vcTLMask1 set $80
(1)  471/   B9F8A :                     
(1)  471/   B9F8A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  471/   B9F8A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  471/   B9F8A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  471/   B9F8A : =$80                vcTLMask1 set $80
(1)  471/   B9F8A : =$0                 vcTL1 set vcTL1&$7F
(1)  471/   B9F8A : =$14                vcTL2 set vcTL2&$7F
(1)  471/   B9F8A : =$32                vcTL3 set vcTL3&$7F
(1)  471/   B9F8A : =$17                vcTL4 set vcTL4&$7F
(1)  471/   B9F8A :                     
(1)  471/   B9F8A : 3435 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  471/   B9F8E : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  471/   B9F92 : 0C07 0C09                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  471/   B9F96 : 0707 0708                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  471/   B9F9A : 2F1F 1F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  471/   B9F9E : 1732 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  472/   B9FA2 :                     
(1)  473/   B9FA2 :                     ;	Voice $06
(1)  474/   B9FA2 :                     ;	$3D
(1)  475/   B9FA2 :                     ;	$01, $01, $01, $01, 	$10, $50, $50, $50, 	$07, $08, $08, $08
(1)  476/   B9FA2 :                     ;	$01, $00, $00, $00, 	$20, $1A, $1A, $1A, 	$19, $84, $84, $84
(1)  477/   B9FA2 : (MACRO)             	smpsVcAlgorithm     $05
(1)  477/   B9FA2 : =$5                 vcAlgorithm set $05
(1)  478/   B9FA2 : (MACRO)             	smpsVcFeedback      $07
(1)  478/   B9FA2 : =$7                 vcFeedback set $07
(1)  479/   B9FA2 : (MACRO)             	smpsVcUnusedBits    $00
(1)  479/   B9FA2 : =$0                 vcUnusedBits set $00
(1)  479/   B9FA2 : =$0                 vcD1R1Unk set 0
(1)  479/   B9FA2 : =$0                 vcD1R2Unk set 0
(1)  479/   B9FA2 : =$0                 vcD1R3Unk set 0
(1)  479/   B9FA2 : =$0                 vcD1R4Unk set 0
(1)  480/   B9FA2 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  480/   B9FA2 : =$0                 vcDT1 set $00
(1)  480/   B9FA2 : =$0                 vcDT2 set $00
(1)  480/   B9FA2 : =$0                 vcDT3 set $00
(1)  480/   B9FA2 : =$0                 vcDT4 set $00
(1)  481/   B9FA2 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  481/   B9FA2 : =$1                 vcCF1 set $01
(1)  481/   B9FA2 : =$1                 vcCF2 set $01
(1)  481/   B9FA2 : =$1                 vcCF3 set $01
(1)  481/   B9FA2 : =$1                 vcCF4 set $01
(1)  482/   B9FA2 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $00
(1)  482/   B9FA2 : =$1                 vcRS1 set $01
(1)  482/   B9FA2 : =$1                 vcRS2 set $01
(1)  482/   B9FA2 : =$1                 vcRS3 set $01
(1)  482/   B9FA2 : =$0                 vcRS4 set $00
(1)  483/   B9FA2 : (MACRO)             	smpsVcAttackRate    $10, $10, $10, $10
(1)  483/   B9FA2 : =$10                vcAR1 set $10
(1)  483/   B9FA2 : =$10                vcAR2 set $10
(1)  483/   B9FA2 : =$10                vcAR3 set $10
(1)  483/   B9FA2 : =$10                vcAR4 set $10
(1)  484/   B9FA2 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  484/   B9FA2 : =$0                 vcAM1 set $00<<5
(1)  484/   B9FA2 : =$0                 vcAM2 set $00<<5
(1)  484/   B9FA2 : =$0                 vcAM3 set $00<<5
(1)  484/   B9FA2 : =$0                 vcAM4 set $00<<5
(1)  485/   B9FA2 : (MACRO)             	smpsVcDecayRate1    $08, $08, $08, $07
(1)  485/   B9FA2 : =$8                 vcD1R1 set $08
(1)  485/   B9FA2 : =$8                 vcD1R2 set $08
(1)  485/   B9FA2 : =$8                 vcD1R3 set $08
(1)  485/   B9FA2 : =$7                 vcD1R4 set $07
(1)  486/   B9FA2 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1)  486/   B9FA2 : =$0                 vcD2R1 set $00
(1)  486/   B9FA2 : =$0                 vcD2R2 set $00
(1)  486/   B9FA2 : =$0                 vcD2R3 set $00
(1)  486/   B9FA2 : =$1                 vcD2R4 set $01
(1)  487/   B9FA2 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $02
(1)  487/   B9FA2 : =$1                 vcDL1 set $01
(1)  487/   B9FA2 : =$1                 vcDL2 set $01
(1)  487/   B9FA2 : =$1                 vcDL3 set $01
(1)  487/   B9FA2 : =$2                 vcDL4 set $02
(1)  488/   B9FA2 : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $00
(1)  488/   B9FA2 : =$A                 vcRR1 set $0A
(1)  488/   B9FA2 : =$A                 vcRR2 set $0A
(1)  488/   B9FA2 : =$A                 vcRR3 set $0A
(1)  488/   B9FA2 : =$0                 vcRR4 set $00
(1)  489/   B9FA2 : (MACRO)             	smpsVcTotalLevel    $84, $84, $84, $19
(1)  489/   B9FA2 : =$84                vcTL1 set $84
(1)  489/   B9FA2 : =$84                vcTL2 set $84
(1)  489/   B9FA2 : =$84                vcTL3 set $84
(1)  489/   B9FA2 : =$19                vcTL4 set $19
(1)  489/   B9FA2 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  489/   B9FA3 :                     ;   0     1     2     3     4     5     6     7
(1)  489/   B9FA3 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  489/   B9FA3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  489/   B9FA3 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  489/   B9FA3 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  489/   B9FA3 : =$80                vcTLMask1 set $80
(1)  489/   B9FA3 :                     
(1)  489/   B9FA3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  489/   B9FA3 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  489/   B9FA3 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  489/   B9FA3 : =$80                vcTLMask1 set $80
(1)  489/   B9FA3 : =$4                 vcTL1 set vcTL1&$7F
(1)  489/   B9FA3 : =$4                 vcTL2 set vcTL2&$7F
(1)  489/   B9FA3 : =$4                 vcTL3 set vcTL3&$7F
(1)  489/   B9FA3 : =$19                vcTL4 set vcTL4&$7F
(1)  489/   B9FA3 :                     
(1)  489/   B9FA3 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  489/   B9FA7 : 1050 5050                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  489/   B9FAB : 0708 0808                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  489/   B9FAF : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  489/   B9FB3 : 201A 1A1A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  489/   B9FB7 : 1984 8484                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  490/   B9FBB :                     
(1)  491/   B9FBB :                     
   45/   B9FBB :                        Music_0C:	include		"music-improved/8C - EHZ 2P.asm"
(1)    1/   B9FBB :                     EHZ_2p_Header:
(1)    2/   B9FBB : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   B9FBB :                     
(1)    2/   B9FBB : =$2                 SourceDriver set 2
(1)    2/   B9FBB :                     
(1)    2/   B9FBB : =$0                 SourceSMPS2ASM set 0
(1)    2/   B9FBB :                     
(1)    2/   B9FBB : =$B9FBB             songStart set *
(1)    2/   B9FBB :                     
(1)    2/   B9FBB :                     
(1)    3/   B9FBB : (MACRO)             	smpsHeaderVoice     EHZ_2p_Voices
(1)    3/   B9FBB : 57A4                                dc.w    z80_ptr(EHZ_2P_VOICES)
(1)    4/   B9FBD : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   B9FBD : 0603                        dc.b    $06,$03
(1)    5/   B9FBF : (MACRO)             	smpsHeaderTempo     $01, $5B
(1)    5/   B9FBF : 01                          dc.b    $01
(1)    5/   B9FC0 :  (MACRO-2)                  convertMainTempoMod $5B
(1)    5/   B9FC0 : A5                                          dc.b    s2TempotoS3($5B)
(1)    6/   B9FC1 :                     
(1)    7/   B9FC1 : (MACRO)             	smpsHeaderDAC       EHZ_2p_DAC
(1)    7/   B9FC1 :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_DAC
(1)    7/   B9FC1 : AAA3                                dc.w    z80_ptr(EHZ_2P_DAC)
(1)    7/   B9FC3 : 0000                                dc.w    $00
(1)    8/   B9FC5 : (MACRO)             	smpsHeaderFM        EHZ_2p_FM1,	$F4, $0A
(1)    8/   B9FC5 :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_FM1
(1)    8/   B9FC5 : EB9F                                dc.w    z80_ptr(EHZ_2P_FM1)
(1)    8/   B9FC7 : F40A                        dc.b    $F4,$0A
(1)    9/   B9FC9 : (MACRO)             	smpsHeaderFM        EHZ_2p_FM2,	$F4, $0F
(1)    9/   B9FC9 :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_FM2
(1)    9/   B9FC9 : 0CA3                                dc.w    z80_ptr(EHZ_2P_FM2)
(1)    9/   B9FCB : F40F                        dc.b    $F4,$0F
(1)   10/   B9FCD : (MACRO)             	smpsHeaderFM        EHZ_2p_FM3,	$F4, $0A
(1)   10/   B9FCD :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_FM3
(1)   10/   B9FCD : B4A1                                dc.w    z80_ptr(EHZ_2P_FM3)
(1)   10/   B9FCF : F40A                        dc.b    $F4,$0A
(1)   11/   B9FD1 : (MACRO)             	smpsHeaderFM        EHZ_2p_FM4,	$F4, $10
(1)   11/   B9FD1 :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_FM4
(1)   11/   B9FD1 : C6A0                                dc.w    z80_ptr(EHZ_2P_FM4)
(1)   11/   B9FD3 : F410                        dc.b    $F4,$10
(1)   12/   B9FD5 : (MACRO)             	smpsHeaderFM        EHZ_2p_FM5,	$E8, $10
(1)   12/   B9FD5 :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_FM5
(1)   12/   B9FD5 : BCA2                                dc.w    z80_ptr(EHZ_2P_FM5)
(1)   12/   B9FD7 : E810                        dc.b    $E8,$10
(1)   13/   B9FD9 : (MACRO)             	smpsHeaderPSG       EHZ_2p_PSG1,	$D0, $06, $00, $00
(1)   13/   B9FD9 :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_PSG1
(1)   13/   B9FD9 : D6A3                                dc.w    z80_ptr(EHZ_2P_PSG1)
(1)   13/   B9FDB :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   B9FDB : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   B9FDC : 0600 00                     dc.b    $06,$00,$00
(1)   14/   B9FDF : (MACRO)             	smpsHeaderPSG       EHZ_2p_PSG2,	$D0, $06, $00, $00
(1)   14/   B9FDF :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_PSG2
(1)   14/   B9FDF : F5A3                                dc.w    z80_ptr(EHZ_2P_PSG2)
(1)   14/   B9FE1 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   14/   B9FE1 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   14/   B9FE2 : 0600 00                     dc.b    $06,$00,$00
(1)   15/   B9FE5 : (MACRO)             	smpsHeaderPSG       EHZ_2p_PSG3,	$00, $05, $00, $00
(1)   15/   B9FE5 :  (MACRO-2)                  CheckedChannelPointer EHZ_2P_PSG3
(1)   15/   B9FE5 : 44A4                                dc.w    z80_ptr(EHZ_2P_PSG3)
(1)   15/   B9FE7 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   B9FE7 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   B9FE8 : 0500 00                     dc.b    $05,$00,$00
(1)   16/   B9FEB :                     
(1)   17/   B9FEB :                     ; FM1 Data
(1)   18/   B9FEB :                     EHZ_2p_FM1:
(1)   19/   B9FEB : (MACRO)             	smpsSetvoice        $04
(1)   19/   B9FEB :  (MACRO-2)                  smpsFMvoice $04
(1)   19/   B9FEB : EF04                                dc.b    $EF,$04
(1)   20/   B9FED : (MACRO)             	smpsAlterNote       $01
(1)   20/   B9FED :  (MACRO-2)                  smpsDetune      $01
(1)   20/   B9FED : E101                        dc.b    $E1,$01
(1)   21/   B9FEF : D006 CDCE CBCD C9C9 	dc.b	nG6, $06, nE6, nF6, nD6, nE6, nC6, nC6, nA5
            B9FF7 : C6               
(1)   22/   B9FF8 :                     
(1)   23/   B9FF8 :                     EHZ_2p_Jump01:
(1)   24/   B9FF8 : (MACRO)             	smpsCall            EHZ_2p_Call02
(1)   24/   B9FF8 : F8                          dc.b    $F8
(1)   24/   B9FF9 : 64A0                                dc.w    z80_ptr(EHZ_2P_CALL02)
(1)   25/   B9FFB : (MACRO)             	smpsSetvoice        $03
(1)   25/   B9FFB :  (MACRO-2)                  smpsFMvoice $03
(1)   25/   B9FFB : EF03                                dc.b    $EF,$03
(1)   26/   B9FFD : (MACRO)             	smpsAlterVol        $06
(1)   26/   B9FFD : E606                        dc.b    $E6,$06
(1)   27/   B9FFF : B806                	dc.b	nG4, $06
(1)   28/   BA001 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   28/   BA001 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   28/   BA001 : E806                                dc.b    $E8,$06
(1)   29/   BA003 : BA03 BDBD BA        	dc.b	nA4, $03, nC5, nC5, nA4
(1)   30/   BA008 : (MACRO)             	smpsSetvoice        $04
(1)   30/   BA008 :  (MACRO-2)                  smpsFMvoice $04
(1)   30/   BA008 : EF04                                dc.b    $EF,$04
(1)   31/   BA00A : (MACRO)             	smpsAlterVol        $FA
(1)   31/   BA00A : E6FA                        dc.b    $E6,$FA
(1)   32/   BA00C : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   32/   BA00C :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   32/   BA00C : E800                                dc.b    $E8,$00
(1)   33/   BA00E : (MACRO)             	smpsCall            EHZ_2p_Call02
(1)   33/   BA00E : F8                          dc.b    $F8
(1)   33/   BA00F : 64A0                                dc.w    z80_ptr(EHZ_2P_CALL02)
(1)   34/   BA011 : 8012 C918 C60C C9C7 	dc.b	nRst, $12, nC6, $18, nA5, $0C, nC6, nBb5, nC6, $06, nD6, $0C
            BA019 : C906 CB0C         
(1)   35/   BA01D : C906 C70C C918 C60C 	dc.b	nC6, $06, nBb5, $0C, nC6, $18, nA5, $0C, nC6, nBb5, $06
            BA025 : C9C7 06            
(1)   36/   BA028 : (MACRO)             	smpsSetvoice        $02
(1)   36/   BA028 :  (MACRO-2)                  smpsFMvoice $02
(1)   36/   BA028 : EF02                                dc.b    $EF,$02
(1)   37/   BA02A : (MACRO)             	smpsAlterVol        $06
(1)   37/   BA02A : E606                        dc.b    $E6,$06
(1)   38/   BA02C : C006 C2C0 80C0 C2C0 	dc.b	nEb5, $06, nF5, nEb5, nRst, nEb5, nF5, nEb5
(1)   39/   BA034 : (MACRO)             	smpsSetvoice        $04
(1)   39/   BA034 :  (MACRO-2)                  smpsFMvoice $04
(1)   39/   BA034 : EF04                                dc.b    $EF,$04
(1)   40/   BA036 : (MACRO)             	smpsAlterVol        $FA
(1)   40/   BA036 : E6FA                        dc.b    $E6,$FA
(1)   41/   BA038 : C918 C60C C9C7 C906 	dc.b	nC6, $18, nA5, $0C, nC6, nBb5, nC6, $06, nD6, $0C, nC6, $06
            BA040 : CB0C C906         
(1)   42/   BA044 : C70C C618 C20C C6   	dc.b	nBb5, $0C, nA5, $18, nF5, $0C, nA5
(1)   43/   BA04B : (MACRO)             	smpsSetvoice        $02
(1)   43/   BA04B :  (MACRO-2)                  smpsFMvoice $02
(1)   43/   BA04B : EF02                                dc.b    $EF,$02
(1)   44/   BA04D : (MACRO)             	smpsAlterVol        $06
(1)   44/   BA04D : E606                        dc.b    $E6,$06
(1)   45/   BA04F : C403 80C4 06C6 03C4 	dc.b	nG5, $03, nRst, nG5, $06, nA5, $03, nG5, nA5, $06, nG5, $03
            BA057 : C606 C403         
(1)   46/   BA05B : 8015                	dc.b	nRst, $15
(1)   47/   BA05D : (MACRO)             	smpsSetvoice        $04
(1)   47/   BA05D :  (MACRO-2)                  smpsFMvoice $04
(1)   47/   BA05D : EF04                                dc.b    $EF,$04
(1)   48/   BA05F : (MACRO)             	smpsAlterVol        $FA
(1)   48/   BA05F : E6FA                        dc.b    $E6,$FA
(1)   49/   BA061 : (MACRO)             	smpsJump            EHZ_2p_Jump01
(1)   49/   BA061 : F6                          dc.b    $F6
(1)   49/   BA062 : F89F                                dc.w    z80_ptr(EHZ_2P_JUMP01)
(1)   50/   BA064 :                     
(1)   51/   BA064 :                     EHZ_2p_Call02:
(1)   52/   BA064 : (MACRO)             	smpsSetvoice        $03
(1)   52/   BA064 :  (MACRO-2)                  smpsFMvoice $03
(1)   52/   BA064 : EF03                                dc.b    $EF,$03
(1)   53/   BA066 : (MACRO)             	smpsAlterVol        $06
(1)   53/   BA066 : E606                        dc.b    $E6,$06
(1)   54/   BA068 : C106                	dc.b	nE5, $06
(1)   55/   BA06A : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   55/   BA06A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   55/   BA06A : E806                                dc.b    $E8,$06
(1)   56/   BA06C : BD03 BABD 0680 80   	dc.b	nC5, $03, nA4, nC5, $06, nRst, nRst
(1)   57/   BA073 : (MACRO)             	smpsSetvoice        $04
(1)   57/   BA073 :  (MACRO-2)                  smpsFMvoice $04
(1)   57/   BA073 : EF04                                dc.b    $EF,$04
(1)   58/   BA075 : (MACRO)             	smpsAlterVol        $FA
(1)   58/   BA075 : E6FA                        dc.b    $E6,$FA
(1)   59/   BA077 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   59/   BA077 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   59/   BA077 : E800                                dc.b    $E8,$00
(1)   60/   BA079 : BC06 0903           	dc.b	nB4, $06, $09, $03
(1)   61/   BA07D : (MACRO)             	smpsSetvoice        $03
(1)   61/   BA07D :  (MACRO-2)                  smpsFMvoice $03
(1)   61/   BA07D : EF03                                dc.b    $EF,$03
(1)   62/   BA07F : (MACRO)             	smpsAlterVol        $06
(1)   62/   BA07F : E606                        dc.b    $E6,$06
(1)   63/   BA081 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   63/   BA081 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   63/   BA081 : E806                                dc.b    $E8,$06
(1)   64/   BA083 : C203 C280 C280 C2   	dc.b	nF5, $03, nF5, nRst, nF5, nRst, nF5
(1)   65/   BA08A : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   65/   BA08A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   65/   BA08A : E800                                dc.b    $E8,$00
(1)   66/   BA08C : C306 C480           	dc.b	nFs5, $06, nG5, nRst
(1)   67/   BA090 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   67/   BA090 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   67/   BA090 : E806                                dc.b    $E8,$06
(1)   68/   BA092 : C403 03C6 C4        	dc.b	nG5, $03, $03, nA5, nG5
(1)   69/   BA097 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   69/   BA097 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   69/   BA097 : E800                                dc.b    $E8,$00
(1)   70/   BA099 : C106                	dc.b	nE5, $06
(1)   71/   BA09B : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   71/   BA09B :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   71/   BA09B : E806                                dc.b    $E8,$06
(1)   72/   BA09D : BD03 BABD 0680 80   	dc.b	nC5, $03, nA4, nC5, $06, nRst, nRst
(1)   73/   BA0A4 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   73/   BA0A4 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   73/   BA0A4 : E800                                dc.b    $E8,$00
(1)   74/   BA0A6 : (MACRO)             	smpsSetvoice        $04
(1)   74/   BA0A6 :  (MACRO-2)                  smpsFMvoice $04
(1)   74/   BA0A6 : EF04                                dc.b    $EF,$04
(1)   75/   BA0A8 : (MACRO)             	smpsAlterVol        $FA
(1)   75/   BA0A8 : E6FA                        dc.b    $E6,$FA
(1)   76/   BA0AA : C1C4 C1             	dc.b	nE5, nG5, nE5
(1)   77/   BA0AD : (MACRO)             	smpsSetvoice        $02
(1)   77/   BA0AD :  (MACRO-2)                  smpsFMvoice $02
(1)   77/   BA0AD : EF02                                dc.b    $EF,$02
(1)   78/   BA0AF : (MACRO)             	smpsAlterVol        $06
(1)   78/   BA0AF : E606                        dc.b    $E6,$06
(1)   79/   BA0B1 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   79/   BA0B1 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   79/   BA0B1 : E806                                dc.b    $E8,$06
(1)   80/   BA0B3 : C203 C280 C280 C2   	dc.b	nF5, $03, nF5, nRst, nF5, nRst, nF5
(1)   81/   BA0BA : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   81/   BA0BA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   81/   BA0BA : E800                                dc.b    $E8,$00
(1)   82/   BA0BC : C306 C403 80        	dc.b	nFs5, $06, nG5, $03, nRst
(1)   83/   BA0C1 : (MACRO)             	smpsSetvoice        $04
(1)   83/   BA0C1 :  (MACRO-2)                  smpsFMvoice $04
(1)   83/   BA0C1 : EF04                                dc.b    $EF,$04
(1)   84/   BA0C3 : (MACRO)             	smpsAlterVol        $FA
(1)   84/   BA0C3 : E6FA                        dc.b    $E6,$FA
(1)   85/   BA0C5 : (MACRO)             	smpsReturn
(1)   85/   BA0C5 : F9                                  dc.b    $F9
(1)   86/   BA0C6 :                     
(1)   87/   BA0C6 :                     ; FM4 Data
(1)   88/   BA0C6 :                     EHZ_2p_FM4:
(1)   89/   BA0C6 : (MACRO)             	smpsSetvoice        $04
(1)   89/   BA0C6 :  (MACRO-2)                  smpsFMvoice $04
(1)   89/   BA0C6 : EF04                                dc.b    $EF,$04
(1)   90/   BA0C8 : (MACRO)             	smpsAlterVol        $FA
(1)   90/   BA0C8 : E6FA                        dc.b    $E6,$FA
(1)   91/   BA0CA : 8003 CE06 CBCD C9CB 	dc.b	nRst, $03, nF6, $06, nD6, nE6, nC6, nD6, nB5, nB5, nG5, $03
            BA0D2 : C8C8 C403         
(1)   92/   BA0D6 : (MACRO)             	smpsAlterVol        $06
(1)   92/   BA0D6 : E606                        dc.b    $E6,$06
(1)   93/   BA0D8 :                     
(1)   94/   BA0D8 :                     EHZ_2p_Loop05:
(1)   95/   BA0D8 : (MACRO)             	smpsSetvoice        $01
(1)   95/   BA0D8 :  (MACRO-2)                  smpsFMvoice $01
(1)   95/   BA0D8 : EF01                                dc.b    $EF,$01
(1)   96/   BA0DA : (MACRO)             	smpsPan             panRight, $00
(1)   96/   BA0DA : =$0                 panNone set $00
(1)   96/   BA0DA : =$40                panRight set $40
(1)   96/   BA0DA : =$80                panLeft set $80
(1)   96/   BA0DA : =$C0                panCentre set $C0
(1)   96/   BA0DA : =$C0                panCenter set $C0 ; silly Americans :U
(1)   96/   BA0DA : E040                        dc.b $E0,PANRIGHT+$00
(1)   97/   BA0DC : (MACRO)             	smpsAlterPitch      $F4
(1)   97/   BA0DC :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   97/   BA0DC : FBF4                                dc.b    $FB,$F4
(1)   98/   BA0DE : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   98/   BA0DE :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   98/   BA0DE : E806                                dc.b    $E8,$06
(1)   99/   BA0E0 : 8006 C103 090C C403 	dc.b	nRst, $06, nE5, $03, $09, $0C, nG5, $03, $09, $06
            BA0E8 : 0906               
(1)  100/   BA0EA : (MACRO)             	smpsSetvoice        $04
(1)  100/   BA0EA :  (MACRO-2)                  smpsFMvoice $04
(1)  100/   BA0EA : EF04                                dc.b    $EF,$04
(1)  101/   BA0EC : (MACRO)             	smpsPan             panCenter, $00
(1)  101/   BA0EC : =$0                 panNone set $00
(1)  101/   BA0EC : =$40                panRight set $40
(1)  101/   BA0EC : =$80                panLeft set $80
(1)  101/   BA0EC : =$C0                panCentre set $C0
(1)  101/   BA0EC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  101/   BA0EC : E0C0                        dc.b $E0,PANCENTER+$00
(1)  102/   BA0EE : (MACRO)             	smpsAlterVol        $FA
(1)  102/   BA0EE : E6FA                        dc.b    $E6,$FA
(1)  103/   BA0F0 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  103/   BA0F0 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  103/   BA0F0 : E800                                dc.b    $E8,$00
(1)  104/   BA0F2 : C6                  	dc.b	nA5
(1)  105/   BA0F3 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  105/   BA0F3 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  105/   BA0F3 : E806                                dc.b    $E8,$06
(1)  106/   BA0F5 : (MACRO)             	smpsAlterVol        $06
(1)  106/   BA0F5 : E606                        dc.b    $E6,$06
(1)  107/   BA0F7 : (MACRO)             	smpsSetvoice        $01
(1)  107/   BA0F7 :  (MACRO-2)                  smpsFMvoice $01
(1)  107/   BA0F7 : EF01                                dc.b    $EF,$01
(1)  108/   BA0F9 : (MACRO)             	smpsPan             panRight, $00
(1)  108/   BA0F9 : =$0                 panNone set $00
(1)  108/   BA0F9 : =$40                panRight set $40
(1)  108/   BA0F9 : =$80                panLeft set $80
(1)  108/   BA0F9 : =$C0                panCentre set $C0
(1)  108/   BA0F9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  108/   BA0F9 : E040                        dc.b $E0,PANRIGHT+$00
(1)  109/   BA0FB : C203 090C C403 090C 	dc.b	nF5, $03, $09, $0C, nG5, $03, $09, $0C, nE5, $03, $09, $0C
            BA103 : C103 090C         
(1)  110/   BA107 : C403 0906           	dc.b	nG5, $03, $09, $06
(1)  111/   BA10B : (MACRO)             	smpsSetvoice        $02
(1)  111/   BA10B :  (MACRO-2)                  smpsFMvoice $02
(1)  111/   BA10B : EF02                                dc.b    $EF,$02
(1)  112/   BA10D : (MACRO)             	smpsPan             panCenter, $00
(1)  112/   BA10D : =$0                 panNone set $00
(1)  112/   BA10D : =$40                panRight set $40
(1)  112/   BA10D : =$80                panLeft set $80
(1)  112/   BA10D : =$C0                panCentre set $C0
(1)  112/   BA10D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  112/   BA10D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  113/   BA10F : (MACRO)             	smpsAlterPitch      $0C
(1)  113/   BA10F :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  113/   BA10F : FB0C                                dc.b    $FB,$0C
(1)  114/   BA111 : C603 C680 C680 C6   	dc.b	nA5, $03, nA5, nRst, nA5, nRst, nA5
(1)  115/   BA118 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  115/   BA118 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  115/   BA118 : E800                                dc.b    $E8,$00
(1)  116/   BA11A : C706 C803           	dc.b	nBb5, $06, nB5, $03
(1)  117/   BA11E : (MACRO)             	smpsSetvoice        $01
(1)  117/   BA11E :  (MACRO-2)                  smpsFMvoice $01
(1)  117/   BA11E : EF01                                dc.b    $EF,$01
(1)  118/   BA120 : (MACRO)             	smpsPan             panRight, $00
(1)  118/   BA120 : =$0                 panNone set $00
(1)  118/   BA120 : =$40                panRight set $40
(1)  118/   BA120 : =$80                panLeft set $80
(1)  118/   BA120 : =$C0                panCentre set $C0
(1)  118/   BA120 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  118/   BA120 : E040                        dc.b $E0,PANRIGHT+$00
(1)  119/   BA122 : (MACRO)             	smpsAlterPitch      $F4
(1)  119/   BA122 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  119/   BA122 : FBF4                                dc.b    $FB,$F4
(1)  120/   BA124 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  120/   BA124 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  120/   BA124 : E806                                dc.b    $E8,$06
(1)  121/   BA126 : 80C4 0309 06        	dc.b	nRst, nG5, $03, $09, $06
(1)  122/   BA12B : (MACRO)             	smpsSetvoice        $02
(1)  122/   BA12B :  (MACRO-2)                  smpsFMvoice $02
(1)  122/   BA12B : EF02                                dc.b    $EF,$02
(1)  123/   BA12D : (MACRO)             	smpsPan             panCenter, $00
(1)  123/   BA12D : =$0                 panNone set $00
(1)  123/   BA12D : =$40                panRight set $40
(1)  123/   BA12D : =$80                panLeft set $80
(1)  123/   BA12D : =$C0                panCentre set $C0
(1)  123/   BA12D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  123/   BA12D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  124/   BA12F : (MACRO)             	smpsAlterPitch      $0C
(1)  124/   BA12F :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  124/   BA12F : FB0C                                dc.b    $FB,$0C
(1)  125/   BA131 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  125/   BA131 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  125/   BA131 : E800                                dc.b    $E8,$00
(1)  126/   BA133 : (MACRO)             	smpsLoop            $00, $02, EHZ_2p_Loop05
(1)  126/   BA133 : F7                          dc.b    $F7
(1)  126/   BA134 : 0002                        dc.b    $00,$02
(1)  126/   BA136 : D8A0                                dc.w    z80_ptr(EHZ_2P_LOOP05)
(1)  127/   BA138 : (MACRO)             	smpsSetvoice        $01
(1)  127/   BA138 :  (MACRO-2)                  smpsFMvoice $01
(1)  127/   BA138 : EF01                                dc.b    $EF,$01
(1)  128/   BA13A : (MACRO)             	smpsPan             panRight, $00
(1)  128/   BA13A : =$0                 panNone set $00
(1)  128/   BA13A : =$40                panRight set $40
(1)  128/   BA13A : =$80                panLeft set $80
(1)  128/   BA13A : =$C0                panCentre set $C0
(1)  128/   BA13A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  128/   BA13A : E040                        dc.b $E0,PANRIGHT+$00
(1)  129/   BA13C : (MACRO)             	smpsAlterPitch      $F4
(1)  129/   BA13C :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  129/   BA13C : FBF4                                dc.b    $FB,$F4
(1)  130/   BA13E : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  130/   BA13E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  130/   BA13E : E806                                dc.b    $E8,$06
(1)  131/   BA140 : 8006 C603 0903 0903 	dc.b	nRst, $06, nA5, $03, $09, $03, $09, $03, $09, $03, $03, nRst
            BA148 : 0903 0380         
(1)  132/   BA14C : 06C4 0309 0309 0309 	dc.b	$06, nG5, $03, $09, $03, $09, $03, $09, $03, $03, nRst, $06
            BA154 : 0303 8006         
(1)  133/   BA158 : C603 0903 0903 0903 	dc.b	nA5, $03, $09, $03, $09, $03, $09, $03, $03
            BA160 : 03               
(1)  134/   BA161 : (MACRO)             	smpsSetvoice        $02
(1)  134/   BA161 :  (MACRO-2)                  smpsFMvoice $02
(1)  134/   BA161 : EF02                                dc.b    $EF,$02
(1)  135/   BA163 : (MACRO)             	smpsPan             panCenter, $00
(1)  135/   BA163 : =$0                 panNone set $00
(1)  135/   BA163 : =$40                panRight set $40
(1)  135/   BA163 : =$80                panLeft set $80
(1)  135/   BA163 : =$C0                panCentre set $C0
(1)  135/   BA163 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  135/   BA163 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  136/   BA165 : (MACRO)             	smpsAlterPitch      $0C
(1)  136/   BA165 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  136/   BA165 : FB0C                                dc.b    $FB,$0C
(1)  137/   BA167 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  137/   BA167 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  137/   BA167 : E800                                dc.b    $E8,$00
(1)  138/   BA169 : 8006 C4C6 C480 C4C6 	dc.b	nRst, $06, nG5, nA5, nG5, nRst, nG5, nA5, nG5
            BA171 : C4               
(1)  139/   BA172 : (MACRO)             	smpsSetvoice        $01
(1)  139/   BA172 :  (MACRO-2)                  smpsFMvoice $01
(1)  139/   BA172 : EF01                                dc.b    $EF,$01
(1)  140/   BA174 : (MACRO)             	smpsPan             panRight, $00
(1)  140/   BA174 : =$0                 panNone set $00
(1)  140/   BA174 : =$40                panRight set $40
(1)  140/   BA174 : =$80                panLeft set $80
(1)  140/   BA174 : =$C0                panCentre set $C0
(1)  140/   BA174 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  140/   BA174 : E040                        dc.b $E0,PANRIGHT+$00
(1)  141/   BA176 : (MACRO)             	smpsAlterPitch      $F4
(1)  141/   BA176 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  141/   BA176 : FBF4                                dc.b    $FB,$F4
(1)  142/   BA178 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  142/   BA178 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  142/   BA178 : E806                                dc.b    $E8,$06
(1)  143/   BA17A : 8006 C603 0903 0903 	dc.b	nRst, $06, nA5, $03, $09, $03, $09, $03, $09, $03, $03, nRst
            BA182 : 0903 0380         
(1)  144/   BA186 : 06C4 0309 0309 0309 	dc.b	$06, nG5, $03, $09, $03, $09, $03, $09, $03, $03, nRst, $06
            BA18E : 0303 8006         
(1)  145/   BA192 : C203 0903 0903 0903 	dc.b	nF5, $03, $09, $03, $09, $03, $09, $03, $03
            BA19A : 03               
(1)  146/   BA19B : (MACRO)             	smpsSetvoice        $02
(1)  146/   BA19B :  (MACRO-2)                  smpsFMvoice $02
(1)  146/   BA19B : EF02                                dc.b    $EF,$02
(1)  147/   BA19D : (MACRO)             	smpsPan             panCenter, $00
(1)  147/   BA19D : =$0                 panNone set $00
(1)  147/   BA19D : =$40                panRight set $40
(1)  147/   BA19D : =$80                panLeft set $80
(1)  147/   BA19D : =$C0                panCentre set $C0
(1)  147/   BA19D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  147/   BA19D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  148/   BA19F : (MACRO)             	smpsAlterPitch      $0C
(1)  148/   BA19F :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  148/   BA19F : FB0C                                dc.b    $FB,$0C
(1)  149/   BA1A1 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  149/   BA1A1 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  149/   BA1A1 : E800                                dc.b    $E8,$00
(1)  150/   BA1A3 : C803 80C8 06C9 03C8 	dc.b	nB5, $03, nRst, nB5, $06, nC6, $03, nB5, nC6, $06, nB5, $03
            BA1AB : C906 C803         
(1)  151/   BA1AF : 8015                	dc.b	nRst, $15
(1)  152/   BA1B1 : (MACRO)             	smpsJump            EHZ_2p_Loop05
(1)  152/   BA1B1 : F6                          dc.b    $F6
(1)  152/   BA1B2 : D8A0                                dc.w    z80_ptr(EHZ_2P_LOOP05)
(1)  153/   BA1B4 :                     
(1)  154/   BA1B4 :                     ; FM3 Data
(1)  155/   BA1B4 :                     EHZ_2p_FM3:
(1)  156/   BA1B4 : (MACRO)             	smpsSetvoice        $03
(1)  156/   BA1B4 :  (MACRO-2)                  smpsFMvoice $03
(1)  156/   BA1B4 : EF03                                dc.b    $EF,$03
(1)  157/   BA1B6 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  157/   BA1B6 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  157/   BA1B6 : E806                                dc.b    $E8,$06
(1)  158/   BA1B8 : 801E C403 03C6 C9C9 	dc.b	nRst, $1E, nG5, $03, $03, nA5, nC6, nC6, nA5
            BA1C0 : C6               
(1)  159/   BA1C1 :                     
(1)  160/   BA1C1 :                     EHZ_2p_Jump00:
(1)  161/   BA1C1 : (MACRO)             	smpsCall            EHZ_2p_Call00
(1)  161/   BA1C1 : F8                          dc.b    $F8
(1)  161/   BA1C2 : 78A2                                dc.w    z80_ptr(EHZ_2P_CALL00)
(1)  162/   BA1C4 : (MACRO)             	smpsSetvoice        $01
(1)  162/   BA1C4 :  (MACRO-2)                  smpsFMvoice $01
(1)  162/   BA1C4 : EF01                                dc.b    $EF,$01
(1)  163/   BA1C6 : (MACRO)             	smpsPan             panRight, $00
(1)  163/   BA1C6 : =$0                 panNone set $00
(1)  163/   BA1C6 : =$40                panRight set $40
(1)  163/   BA1C6 : =$80                panLeft set $80
(1)  163/   BA1C6 : =$C0                panCentre set $C0
(1)  163/   BA1C6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  163/   BA1C6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  164/   BA1C8 : (MACRO)             	smpsAlterPitch      $F4
(1)  164/   BA1C8 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  164/   BA1C8 : FBF4                                dc.b    $FB,$F4
(1)  165/   BA1CA : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  165/   BA1CA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  165/   BA1CA : E806                                dc.b    $E8,$06
(1)  166/   BA1CC : (MACRO)             	smpsAlterVol        $06
(1)  166/   BA1CC : E606                        dc.b    $E6,$06
(1)  167/   BA1CE : 8006 C203 0906      	dc.b	nRst, $06, nF5, $03, $09, $06
(1)  168/   BA1D4 : (MACRO)             	smpsSetvoice        $03
(1)  168/   BA1D4 :  (MACRO-2)                  smpsFMvoice $03
(1)  168/   BA1D4 : EF03                                dc.b    $EF,$03
(1)  169/   BA1D6 : (MACRO)             	smpsPan             panCenter, $00
(1)  169/   BA1D6 : =$0                 panNone set $00
(1)  169/   BA1D6 : =$40                panRight set $40
(1)  169/   BA1D6 : =$80                panLeft set $80
(1)  169/   BA1D6 : =$C0                panCentre set $C0
(1)  169/   BA1D6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  169/   BA1D6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  170/   BA1D8 : (MACRO)             	smpsAlterPitch      $0C
(1)  170/   BA1D8 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  170/   BA1D8 : FB0C                                dc.b    $FB,$0C
(1)  171/   BA1DA : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  171/   BA1DA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  171/   BA1DA : E800                                dc.b    $E8,$00
(1)  172/   BA1DC : (MACRO)             	smpsAlterVol        $FA
(1)  172/   BA1DC : E6FA                        dc.b    $E6,$FA
(1)  173/   BA1DE : 80C4                	dc.b	nRst, nG5
(1)  174/   BA1E0 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  174/   BA1E0 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  174/   BA1E0 : E806                                dc.b    $E8,$06
(1)  175/   BA1E2 : C603 C9C9 C6        	dc.b	nA5, $03, nC6, nC6, nA5
(1)  176/   BA1E7 : (MACRO)             	smpsCall            EHZ_2p_Call00
(1)  176/   BA1E7 : F8                          dc.b    $F8
(1)  176/   BA1E8 : 78A2                                dc.w    z80_ptr(EHZ_2P_CALL00)
(1)  177/   BA1EA : (MACRO)             	smpsSetvoice        $01
(1)  177/   BA1EA :  (MACRO-2)                  smpsFMvoice $01
(1)  177/   BA1EA : EF01                                dc.b    $EF,$01
(1)  178/   BA1EC : (MACRO)             	smpsPan             panRight, $00
(1)  178/   BA1EC : =$0                 panNone set $00
(1)  178/   BA1EC : =$40                panRight set $40
(1)  178/   BA1EC : =$80                panLeft set $80
(1)  178/   BA1EC : =$C0                panCentre set $C0
(1)  178/   BA1EC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  178/   BA1EC : E040                        dc.b $E0,PANRIGHT+$00
(1)  179/   BA1EE : (MACRO)             	smpsAlterPitch      $F4
(1)  179/   BA1EE :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  179/   BA1EE : FBF4                                dc.b    $FB,$F4
(1)  180/   BA1F0 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  180/   BA1F0 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  180/   BA1F0 : E806                                dc.b    $E8,$06
(1)  181/   BA1F2 : (MACRO)             	smpsAlterVol        $06
(1)  181/   BA1F2 : E606                        dc.b    $E6,$06
(1)  182/   BA1F4 : 8006 C203 0906 80C4 	dc.b	nRst, $06, nF5, $03, $09, $06, nRst, nG5, $03, $09, $06
            BA1FC : 0309 06            
(1)  183/   BA1FF : (MACRO)             	smpsSetvoice        $03
(1)  183/   BA1FF :  (MACRO-2)                  smpsFMvoice $03
(1)  183/   BA1FF : EF03                                dc.b    $EF,$03
(1)  184/   BA201 : (MACRO)             	smpsPan             panCenter, $00
(1)  184/   BA201 : =$0                 panNone set $00
(1)  184/   BA201 : =$40                panRight set $40
(1)  184/   BA201 : =$80                panLeft set $80
(1)  184/   BA201 : =$C0                panCentre set $C0
(1)  184/   BA201 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  184/   BA201 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  185/   BA203 : (MACRO)             	smpsAlterPitch      $0C
(1)  185/   BA203 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  185/   BA203 : FB0C                                dc.b    $FB,$0C
(1)  186/   BA205 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  186/   BA205 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  186/   BA205 : E800                                dc.b    $E8,$00
(1)  187/   BA207 : (MACRO)             	smpsAlterVol        $FA
(1)  187/   BA207 : E6FA                        dc.b    $E6,$FA
(1)  188/   BA209 : (MACRO)             	smpsCall            EHZ_2p_Call01
(1)  188/   BA209 : F8                          dc.b    $F8
(1)  188/   BA20A : 64A2                                dc.w    z80_ptr(EHZ_2P_CALL01)
(1)  189/   BA20C : 8030                	dc.b	nRst, $30
(1)  190/   BA20E : (MACRO)             	smpsCall            EHZ_2p_Call01
(1)  190/   BA20E : F8                          dc.b    $F8
(1)  190/   BA20F : 64A2                                dc.w    z80_ptr(EHZ_2P_CALL01)
(1)  191/   BA211 : (MACRO)             	smpsSetvoice        $01
(1)  191/   BA211 :  (MACRO-2)                  smpsFMvoice $01
(1)  191/   BA211 : EF01                                dc.b    $EF,$01
(1)  192/   BA213 : (MACRO)             	smpsPan             panRight, $00
(1)  192/   BA213 : =$0                 panNone set $00
(1)  192/   BA213 : =$40                panRight set $40
(1)  192/   BA213 : =$80                panLeft set $80
(1)  192/   BA213 : =$C0                panCentre set $C0
(1)  192/   BA213 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  192/   BA213 : E040                        dc.b $E0,PANRIGHT+$00
(1)  193/   BA215 : (MACRO)             	smpsAlterPitch      $F4
(1)  193/   BA215 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  193/   BA215 : FBF4                                dc.b    $FB,$F4
(1)  194/   BA217 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  194/   BA217 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  194/   BA217 : E806                                dc.b    $E8,$06
(1)  195/   BA219 : (MACRO)             	smpsAlterVol        $06
(1)  195/   BA219 : E606                        dc.b    $E6,$06
(1)  196/   BA21B : 8006 C403 0903 0903 	dc.b	nRst, $06, nG5, $03, $09, $03, $09, $03, $09, $03, $03
            BA223 : 0903 03            
(1)  197/   BA226 : (MACRO)             	smpsSetvoice        $03
(1)  197/   BA226 :  (MACRO-2)                  smpsFMvoice $03
(1)  197/   BA226 : EF03                                dc.b    $EF,$03
(1)  198/   BA228 : (MACRO)             	smpsPan             panCenter, $00
(1)  198/   BA228 : =$0                 panNone set $00
(1)  198/   BA228 : =$40                panRight set $40
(1)  198/   BA228 : =$80                panLeft set $80
(1)  198/   BA228 : =$C0                panCentre set $C0
(1)  198/   BA228 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  198/   BA228 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  199/   BA22A : (MACRO)             	smpsAlterPitch      $0C
(1)  199/   BA22A :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  199/   BA22A : FB0C                                dc.b    $FB,$0C
(1)  200/   BA22C : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  200/   BA22C :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  200/   BA22C : E800                                dc.b    $E8,$00
(1)  201/   BA22E : (MACRO)             	smpsAlterVol        $FA
(1)  201/   BA22E : E6FA                        dc.b    $E6,$FA
(1)  202/   BA230 : (MACRO)             	smpsCall            EHZ_2p_Call01
(1)  202/   BA230 : F8                          dc.b    $F8
(1)  202/   BA231 : 64A2                                dc.w    z80_ptr(EHZ_2P_CALL01)
(1)  203/   BA233 : 8030 CB0C CDCE CFD0 	dc.b	nRst, $30, nD6, $0C, nE6, nF6, nFs6, nG6, $06
            BA23B : 06               
(1)  204/   BA23C : (MACRO)             	smpsSetvoice        $01
(1)  204/   BA23C :  (MACRO-2)                  smpsFMvoice $01
(1)  204/   BA23C : EF01                                dc.b    $EF,$01
(1)  205/   BA23E : (MACRO)             	smpsPan             panRight, $00
(1)  205/   BA23E : =$0                 panNone set $00
(1)  205/   BA23E : =$40                panRight set $40
(1)  205/   BA23E : =$80                panLeft set $80
(1)  205/   BA23E : =$C0                panCentre set $C0
(1)  205/   BA23E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  205/   BA23E : E040                        dc.b $E0,PANRIGHT+$00
(1)  206/   BA240 : (MACRO)             	smpsAlterPitch      $F4
(1)  206/   BA240 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  206/   BA240 : FBF4                                dc.b    $FB,$F4
(1)  207/   BA242 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  207/   BA242 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  207/   BA242 : E806                                dc.b    $E8,$06
(1)  208/   BA244 : (MACRO)             	smpsAlterVol        $06
(1)  208/   BA244 : E606                        dc.b    $E6,$06
(1)  209/   BA246 : C803 0903 03        	dc.b	nB5, $03, $09, $03, $03
(1)  210/   BA24B : (MACRO)             	smpsSetvoice        $03
(1)  210/   BA24B :  (MACRO-2)                  smpsFMvoice $03
(1)  210/   BA24B : EF03                                dc.b    $EF,$03
(1)  211/   BA24D : (MACRO)             	smpsPan             panCenter, $00
(1)  211/   BA24D : =$0                 panNone set $00
(1)  211/   BA24D : =$40                panRight set $40
(1)  211/   BA24D : =$80                panLeft set $80
(1)  211/   BA24D : =$C0                panCentre set $C0
(1)  211/   BA24D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  211/   BA24D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  212/   BA24F : (MACRO)             	smpsAlterPitch      $0C
(1)  212/   BA24F :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  212/   BA24F : FB0C                                dc.b    $FB,$0C
(1)  213/   BA251 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  213/   BA251 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  213/   BA251 : E800                                dc.b    $E8,$00
(1)  214/   BA253 : (MACRO)             	smpsAlterVol        $FA
(1)  214/   BA253 : E6FA                        dc.b    $E6,$FA
(1)  215/   BA255 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  215/   BA255 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  215/   BA255 : E800                                dc.b    $E8,$00
(1)  216/   BA257 : 8006 C4             	dc.b	nRst, $06, nG5
(1)  217/   BA25A : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  217/   BA25A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  217/   BA25A : E806                                dc.b    $E8,$06
(1)  218/   BA25C : C603 C9C9 C6        	dc.b	nA5, $03, nC6, nC6, nA5
(1)  219/   BA261 : (MACRO)             	smpsJump            EHZ_2p_Jump00
(1)  219/   BA261 : F6                          dc.b    $F6
(1)  219/   BA262 : C1A1                                dc.w    z80_ptr(EHZ_2P_JUMP00)
(1)  220/   BA264 :                     
(1)  221/   BA264 :                     EHZ_2p_Call01:
(1)  222/   BA264 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  222/   BA264 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  222/   BA264 : E806                                dc.b    $E8,$06
(1)  223/   BA266 : 8006 C6C2 03BD 0603 	dc.b	nRst, $06, nA5, nF5, $03, nC5, $06, $03, nF5, $06, nA5, nBb5
            BA26E : C206 C6C7         
(1)  224/   BA272 : 03                  	dc.b	$03
(1)  225/   BA273 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  225/   BA273 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  225/   BA273 : E800                                dc.b    $E8,$00
(1)  226/   BA275 : C609                	dc.b	nA5, $09
(1)  227/   BA277 : (MACRO)             	smpsReturn
(1)  227/   BA277 : F9                                  dc.b    $F9
(1)  228/   BA278 :                     
(1)  229/   BA278 :                     EHZ_2p_Call00:
(1)  230/   BA278 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  230/   BA278 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  230/   BA278 : E800                                dc.b    $E8,$00
(1)  231/   BA27A : CD06                	dc.b	nE6, $06
(1)  232/   BA27C : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  232/   BA27C :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  232/   BA27C : E806                                dc.b    $E8,$06
(1)  233/   BA27E : C903 C6C9 0680 8009 	dc.b	nC6, $03, nA5, nC6, $06, nRst, nRst, $09
(1)  234/   BA286 : (MACRO)             	smpsSetvoice        $04
(1)  234/   BA286 :  (MACRO-2)                  smpsFMvoice $04
(1)  234/   BA286 : EF04                                dc.b    $EF,$04
(1)  235/   BA288 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  235/   BA288 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  235/   BA288 : E800                                dc.b    $E8,$00
(1)  236/   BA28A : BDBA 06             	dc.b	nC5, nA4, $06
(1)  237/   BA28D : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  237/   BA28D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  237/   BA28D : E806                                dc.b    $E8,$06
(1)  238/   BA28F : (MACRO)             	smpsSetvoice        $03
(1)  238/   BA28F :  (MACRO-2)                  smpsFMvoice $03
(1)  238/   BA28F : EF03                                dc.b    $EF,$03
(1)  239/   BA291 : CE03 CE80 CE80 CE   	dc.b	nF6, $03, nF6, nRst, nF6, nRst, nF6
(1)  240/   BA298 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  240/   BA298 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  240/   BA298 : E800                                dc.b    $E8,$00
(1)  241/   BA29A : CF06 D080           	dc.b	nFs6, $06, nG6, nRst
(1)  242/   BA29E : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  242/   BA29E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  242/   BA29E : E806                                dc.b    $E8,$06
(1)  243/   BA2A0 : D003 03D2 D0        	dc.b	nG6, $03, $03, nA6, nG6
(1)  244/   BA2A5 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  244/   BA2A5 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  244/   BA2A5 : E800                                dc.b    $E8,$00
(1)  245/   BA2A7 : CD06                	dc.b	nE6, $06
(1)  246/   BA2A9 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  246/   BA2A9 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  246/   BA2A9 : E806                                dc.b    $E8,$06
(1)  247/   BA2AB : C903 C6C9 06        	dc.b	nC6, $03, nA5, nC6, $06
(1)  248/   BA2B0 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  248/   BA2B0 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  248/   BA2B0 : E800                                dc.b    $E8,$00
(1)  249/   BA2B2 : (MACRO)             	smpsSetvoice        $04
(1)  249/   BA2B2 :  (MACRO-2)                  smpsFMvoice $04
(1)  249/   BA2B2 : EF04                                dc.b    $EF,$04
(1)  250/   BA2B4 : 800F C206 C2BD 03   	dc.b	nRst, $0F, nF5, $06, nF5, nC5, $03
(1)  251/   BA2BB : (MACRO)             	smpsReturn
(1)  251/   BA2BB : F9                                  dc.b    $F9
(1)  252/   BA2BC :                     
(1)  253/   BA2BC :                     ; FM5 Data
(1)  254/   BA2BC :                     EHZ_2p_FM5:
(1)  255/   BA2BC : (MACRO)             	smpsPan             panLeft, $01
(1)  255/   BA2BC : =$0                 panNone set $00
(1)  255/   BA2BC : =$40                panRight set $40
(1)  255/   BA2BC : =$80                panLeft set $80
(1)  255/   BA2BC : =$C0                panCentre set $C0
(1)  255/   BA2BC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  255/   BA2BC : E081                        dc.b $E0,PANLEFT+$01
(1)  256/   BA2BE : (MACRO)             	smpsSetvoice        $01
(1)  256/   BA2BE :  (MACRO-2)                  smpsFMvoice $01
(1)  256/   BA2BE : EF01                                dc.b    $EF,$01
(1)  257/   BA2C0 : 8030                	dc.b	nRst, $30
(1)  258/   BA2C2 :                     
(1)  259/   BA2C2 :                     EHZ_2p_Loop03:
(1)  260/   BA2C2 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  260/   BA2C2 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  260/   BA2C2 : E806                                dc.b    $E8,$06
(1)  261/   BA2C4 : 8006 C403 090C C803 	dc.b	nRst, $06, nG5, $03, $09, $0C, nB5, $03, $09, $06, nRst, nA5
            BA2CC : 0906 80C6         
(1)  262/   BA2D0 : 0309 0CC8 0309 06   	dc.b	$03, $09, $0C, nB5, $03, $09, $06
(1)  263/   BA2D7 : (MACRO)             	smpsLoop            $00, $04, EHZ_2p_Loop03
(1)  263/   BA2D7 : F7                          dc.b    $F7
(1)  263/   BA2D8 : 0004                        dc.b    $00,$04
(1)  263/   BA2DA : C2A2                                dc.w    z80_ptr(EHZ_2P_LOOP03)
(1)  264/   BA2DC :                     
(1)  265/   BA2DC :                     EHZ_2p_Loop04:
(1)  266/   BA2DC : 8006 C903 0903 0903 	dc.b	nRst, $06, nC6, $03, $09, $03, $09, $03, $09, $03, $03, nRst
            BA2E4 : 0903 0380         
(1)  267/   BA2E8 : 06C7 0309 0309 0309 	dc.b	$06, nBb5, $03, $09, $03, $09, $03, $09, $03, $03
            BA2F0 : 0303               
(1)  268/   BA2F2 : (MACRO)             	smpsLoop            $00, $03, EHZ_2p_Loop04
(1)  268/   BA2F2 : F7                          dc.b    $F7
(1)  268/   BA2F3 : 0003                        dc.b    $00,$03
(1)  268/   BA2F5 : DCA2                                dc.w    z80_ptr(EHZ_2P_LOOP04)
(1)  269/   BA2F7 : 8006 C603 0903 0903 	dc.b	nRst, $06, nA5, $03, $09, $03, $09, $03, $09, $03, $03, nRst
            BA2FF : 0903 0380         
(1)  270/   BA303 : 06CB 0309 031B      	dc.b	$06, nD6, $03, $09, $03, $1B
(1)  271/   BA309 : (MACRO)             	smpsJump            EHZ_2p_Loop03
(1)  271/   BA309 : F6                          dc.b    $F6
(1)  271/   BA30A : C2A2                                dc.w    z80_ptr(EHZ_2P_LOOP03)
(1)  272/   BA30C :                     
(1)  273/   BA30C :                     ; FM2 Data
(1)  274/   BA30C :                     EHZ_2p_FM2:
(1)  275/   BA30C : (MACRO)             	smpsSetvoice        $03
(1)  275/   BA30C :  (MACRO-2)                  smpsFMvoice $03
(1)  275/   BA30C : EF03                                dc.b    $EF,$03
(1)  276/   BA30E : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  276/   BA30E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  276/   BA30E : E806                                dc.b    $E8,$06
(1)  277/   BA310 : 801E B803 03BA BDBD 	dc.b	nRst, $1E, nG4, $03, $03, nA4, nC5, nC5, nA4
            BA318 : BA               
(1)  278/   BA319 : (MACRO)             	smpsSetvoice        $00
(1)  278/   BA319 :  (MACRO-2)                  smpsFMvoice $00
(1)  278/   BA319 : EF00                                dc.b    $EF,$00
(1)  279/   BA31B : (MACRO)             	smpsAlterVol        $FA
(1)  279/   BA31B : E6FA                        dc.b    $E6,$FA
(1)  280/   BA31D :                     
(1)  281/   BA31D :                     EHZ_2p_Loop01:
(1)  282/   BA31D : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  282/   BA31D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  282/   BA31D : E800                                dc.b    $E8,$00
(1)  283/   BA31F : 8006 B1AE 0303 AC06 	dc.b	nRst, $06, nC4, nA3, $03, $03, nG3, $06, nRst, nB3, nA3, $03
            BA327 : 80B0 AE03         
(1)  284/   BA32B : 03AC 0680 AEAC 0303 	dc.b	$03, nG3, $06, nRst, nA3, nG3, $03, $03, nF3, $06, nRst, nG3
            BA333 : AA06 80AC         
(1)  285/   BA337 : 0603 03AE AC80 06B1 	dc.b	$06, $03, $03, nA3, nG3, nRst, $06, nC4, nA3, $03, $03, nG3
            BA33F : AE03 03AC         
(1)  286/   BA343 : 0680 B0AE 0303 AC06 	dc.b	$06, nRst, nB3, nA3, $03, $03, nG3, $06
(1)  287/   BA34B : (MACRO)             	smpsSetvoice        $04
(1)  287/   BA34B :  (MACRO-2)                  smpsFMvoice $04
(1)  287/   BA34B : EF04                                dc.b    $EF,$04
(1)  288/   BA34D : BD                  	dc.b	nC5
(1)  289/   BA34E : (MACRO)             	smpsSetvoice        $00
(1)  289/   BA34E :  (MACRO-2)                  smpsFMvoice $00
(1)  289/   BA34E : EF00                                dc.b    $EF,$00
(1)  290/   BA350 : AEAC 0303 AA06 80AC 	dc.b	nA3, nG3, $03, $03, nF3, $06, nRst, nG3, $06, $03, $03, nA3
            BA358 : 0603 03AE         
(1)  291/   BA35C : AC                  	dc.b	nG3
(1)  292/   BA35D : (MACRO)             	smpsLoop            $00, $02, EHZ_2p_Loop01
(1)  292/   BA35D : F7                          dc.b    $F7
(1)  292/   BA35E : 0002                        dc.b    $00,$02
(1)  292/   BA360 : 1DA3                                dc.w    z80_ptr(EHZ_2P_LOOP01)
(1)  293/   BA362 :                     
(1)  294/   BA362 :                     EHZ_2p_Loop02:
(1)  295/   BA362 : 8006 B603 03B3 B3B1 	dc.b	nRst, $06, nF4, $03, $03, nD4, nD4, nC4, nC4, nRst, $06, nF4
            BA36A : B180 06B6         
(1)  296/   BA36E : 0303 B3B3 B1B1 8006 	dc.b	$03, $03, nD4, nD4, nC4, nC4, nRst, $06, nEb4, $03, $03, nC4
            BA376 : B403 03B1         
(1)  297/   BA37A : B1AF AF80 06B4 0303 	dc.b	nC4, nBb3, nBb3, nRst, $06, nEb4, $03, $03, nC4, nC4, nBb3, nBb3
            BA382 : B1B1 AFAF         
(1)  298/   BA386 : (MACRO)             	smpsLoop            $00, $03, EHZ_2p_Loop02
(1)  298/   BA386 : F7                          dc.b    $F7
(1)  298/   BA387 : 0003                        dc.b    $00,$03
(1)  298/   BA389 : 62A3                                dc.w    z80_ptr(EHZ_2P_LOOP02)
(1)  299/   BA38B : 8006 B303 03B1 B1AE 	dc.b	nRst, $06, nD4, $03, $03, nC4, nC4, nA3, nA3, nRst, $06, nD4
            BA393 : AE80 06B3         
(1)  300/   BA397 : 0303 B1B1 AEAE AC06 	dc.b	$03, $03, nC4, nC4, nA3, nA3, nG3, $06, $06, nA3, $03, nG3
            BA39F : 06AE 03AC         
(1)  301/   BA3A3 : AE06 AC18           	dc.b	nA3, $06, nG3, $18
(1)  302/   BA3A7 : (MACRO)             	smpsJump            EHZ_2p_Loop01
(1)  302/   BA3A7 : F6                          dc.b    $F6
(1)  302/   BA3A8 : 1DA3                                dc.w    z80_ptr(EHZ_2P_LOOP01)
(1)  303/   BA3AA :                     
(1)  304/   BA3AA :                     ; DAC Data
(1)  305/   BA3AA :                     EHZ_2p_DAC:
(1)  306/   BA3AA : 8C03 8C8C 068D 038D 	dc.b	dMidTom, $03, dMidTom, dMidTom, $06, dLowTom, $03, dLowTom, dLowTom, $06, dFloorTom, $03
            BA3B2 : 8D06 8E03         
(1)  307/   BA3B6 : 8E8E 068D 8E        	dc.b	dFloorTom, dFloorTom, $06, dLowTom, dFloorTom
(1)  308/   BA3BB :                     
(1)  309/   BA3BB :                     EHZ_2p_Loop00:
(1)  310/   BA3BB : 8181 8E80 8181 8E80 	dc.b	dKick, dKick, dFloorTom, nRst, dKick, dKick, dFloorTom, nRst
(1)  311/   BA3C3 : (MACRO)             	smpsLoop            $00, $0F, EHZ_2p_Loop00
(1)  311/   BA3C3 : F7                          dc.b    $F7
(1)  311/   BA3C4 : 000F                        dc.b    $00,$0F
(1)  311/   BA3C6 : BBA3                                dc.w    z80_ptr(EHZ_2P_LOOP00)
(1)  312/   BA3C8 : 8181 8E80 8C03 8C8C 	dc.b	dKick, dKick, dFloorTom, nRst, dMidTom, $03, dMidTom, dMidTom, $06, dLowTom, dFloorTom
            BA3D0 : 068D 8E            
(1)  313/   BA3D3 : (MACRO)             	smpsJump            EHZ_2p_Loop00
(1)  313/   BA3D3 : F6                          dc.b    $F6
(1)  313/   BA3D4 : BBA3                                dc.w    z80_ptr(EHZ_2P_LOOP00)
(1)  314/   BA3D6 :                     
(1)  315/   BA3D6 :                     ; PSG1 Data
(1)  316/   BA3D6 :                     EHZ_2p_PSG1:
(1)  317/   BA3D6 : 8002                	dc.b	nRst, $02
(1)  318/   BA3D8 : (MACRO)             	smpsPSGvoice        fTone_08
(1)  318/   BA3D8 : F508                        dc.b    $F5,FTONE_08
(1)  319/   BA3DA : (MACRO)             	smpsPSGAlterVol     $04
(1)  319/   BA3DA : EC04                        dc.b    $EC,$04
(1)  320/   BA3DC : D003 CECD CBCE CDCB 	dc.b	nG6, $03, nF6, nE6, nD6, nF6, nE6, nD6, nC6, nE6, nD6, nC6
            BA3E4 : C9CD CBC9         
(1)  321/   BA3E8 : C8C9 C8C6 C401      	dc.b	nB5, nC6, nB5, nA5, nG5, $01
(1)  322/   BA3EE : (MACRO)             	smpsPSGAlterVol     $FC
(1)  322/   BA3EE : ECFC                        dc.b    $EC,$FC
(1)  323/   BA3F0 : (MACRO)             	smpsAlterPitch      $04
(1)  323/   BA3F0 :  (MACRO-2)                  smpsChangeTransposition $04
(1)  323/   BA3F0 : FB04                                dc.b    $FB,$04
(1)  324/   BA3F2 : (MACRO)             	smpsJump            EHZ_2p_Loop06
(1)  324/   BA3F2 : F6                          dc.b    $F6
(1)  324/   BA3F3 : F7A3                                dc.w    z80_ptr(EHZ_2P_LOOP06)
(1)  325/   BA3F5 :                     
(1)  326/   BA3F5 :                     ; PSG2 Data
(1)  327/   BA3F5 :                     EHZ_2p_PSG2:
(1)  328/   BA3F5 : 8030                	dc.b	nRst, $30
(1)  329/   BA3F7 :                     
(1)  330/   BA3F7 :                     EHZ_2p_Loop06:
(1)  331/   BA3F7 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  331/   BA3F7 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  331/   BA3F7 : E806                                dc.b    $E8,$06
(1)  332/   BA3F9 : 8006 BD03 090C C403 	dc.b	nRst, $06, nC5, $03, $09, $0C, nG5, $03, $09, $06, nRst, nF5
            BA401 : 0906 80C2         
(1)  333/   BA405 : 0309 0CC4 0309 06   	dc.b	$03, $09, $0C, nG5, $03, $09, $06
(1)  334/   BA40C : (MACRO)             	smpsLoop            $00, $04, EHZ_2p_Loop06
(1)  334/   BA40C : F7                          dc.b    $F7
(1)  334/   BA40D : 0004                        dc.b    $00,$04
(1)  334/   BA40F : F7A3                                dc.w    z80_ptr(EHZ_2P_LOOP06)
(1)  335/   BA411 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  335/   BA411 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  335/   BA411 : E800                                dc.b    $E8,$00
(1)  336/   BA413 : (MACRO)             	smpsPSGvoice        fTone_0B
(1)  336/   BA413 : F50B                        dc.b    $F5,FTONE_0B
(1)  337/   BA415 : C218 C20C C2C0 C206 	dc.b	nF5, $18, nF5, $0C, nF5, nEb5, nF5, $06, nEb5, $0C, nF5, $06
            BA41D : C00C C206         
(1)  338/   BA421 : C00C C218 C20C C2C0 	dc.b	nEb5, $0C, nF5, $18, nF5, $0C, nF5, nEb5, $30, nF5, $18, nF5
            BA429 : 30C2 18C2         
(1)  339/   BA42D : 0CC2 C0C2 06C0 0CC2 	dc.b	$0C, nF5, nEb5, nF5, $06, nEb5, $0C, nF5, $06, nEb5, $0C, nF5
            BA435 : 06C0 0CC2         
(1)  340/   BA439 : 18C2 0CC2 C406 802A 	dc.b	$18, nF5, $0C, nF5, nG5, $06, nRst, $2A
(1)  341/   BA441 : (MACRO)             	smpsJump            EHZ_2p_Loop06
(1)  341/   BA441 : F6                          dc.b    $F6
(1)  341/   BA442 : F7A3                                dc.w    z80_ptr(EHZ_2P_LOOP06)
(1)  342/   BA444 :                     
(1)  343/   BA444 :                     ; PSG3 Data
(1)  344/   BA444 :                     EHZ_2p_PSG3:
(1)  345/   BA444 : 8030                	dc.b	nRst, $30
(1)  346/   BA446 :                     
(1)  347/   BA446 :                     EHZ_2p_Jump02:
(1)  348/   BA446 : (MACRO)             	smpsPSGvoice        fTone_04
(1)  348/   BA446 : F504                        dc.b    $F5,FTONE_04
(1)  349/   BA448 : (MACRO)             	smpsPSGform         $E7
(1)  349/   BA448 : F3E7                        dc.b    $F3,$E7
(1)  350/   BA44A : (MACRO)             	smpsModSet          $00, $01, $01, $01
(1)  350/   BA44A : F0                          dc.b    $F0
(1)  350/   BA44B : 0101 0102                           dc.b    $00+1,$01,$01,(($01+1) * $01) & $FF
(1)  350/   BA44F :                             ;dc.b   $01,$01,$01
(1)  351/   BA44F : C703 C7C7 06        	dc.b	nMaxPSG, $03, nMaxPSG, nMaxPSG, $06
(1)  352/   BA454 : (MACRO)             	smpsJump            EHZ_2p_Jump02
(1)  352/   BA454 : F6                          dc.b    $F6
(1)  352/   BA455 : 46A4                                dc.w    z80_ptr(EHZ_2P_JUMP02)
(1)  353/   BA457 :                     
(1)  354/   BA457 :                     EHZ_2p_Voices:
(1)  355/   BA457 :                     ;	Voice $00
(1)  356/   BA457 :                     ;	$20
(1)  357/   BA457 :                     ;	$66, $65, $60, $60, 	$DF, $DF, $9F, $1F, 	$00, $06, $09, $0C
(1)  358/   BA457 :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$1C, $3A, $16, $80
(1)  359/   BA457 : (MACRO)             	smpsVcAlgorithm     $00
(1)  359/   BA457 : =$0                 vcAlgorithm set $00
(1)  360/   BA457 : (MACRO)             	smpsVcFeedback      $04
(1)  360/   BA457 : =$4                 vcFeedback set $04
(1)  361/   BA457 : (MACRO)             	smpsVcUnusedBits    $00
(1)  361/   BA457 : =$0                 vcUnusedBits set $00
(1)  361/   BA457 : =$0                 vcD1R1Unk set 0
(1)  361/   BA457 : =$0                 vcD1R2Unk set 0
(1)  361/   BA457 : =$0                 vcD1R3Unk set 0
(1)  361/   BA457 : =$0                 vcD1R4Unk set 0
(1)  362/   BA457 : (MACRO)             	smpsVcDetune        $06, $06, $06, $06
(1)  362/   BA457 : =$6                 vcDT1 set $06
(1)  362/   BA457 : =$6                 vcDT2 set $06
(1)  362/   BA457 : =$6                 vcDT3 set $06
(1)  362/   BA457 : =$6                 vcDT4 set $06
(1)  363/   BA457 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $05, $06
(1)  363/   BA457 : =$0                 vcCF1 set $00
(1)  363/   BA457 : =$0                 vcCF2 set $00
(1)  363/   BA457 : =$5                 vcCF3 set $05
(1)  363/   BA457 : =$6                 vcCF4 set $06
(1)  364/   BA457 : (MACRO)             	smpsVcRateScale     $00, $02, $03, $03
(1)  364/   BA457 : =$0                 vcRS1 set $00
(1)  364/   BA457 : =$2                 vcRS2 set $02
(1)  364/   BA457 : =$3                 vcRS3 set $03
(1)  364/   BA457 : =$3                 vcRS4 set $03
(1)  365/   BA457 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  365/   BA457 : =$1F                vcAR1 set $1F
(1)  365/   BA457 : =$1F                vcAR2 set $1F
(1)  365/   BA457 : =$1F                vcAR3 set $1F
(1)  365/   BA457 : =$1F                vcAR4 set $1F
(1)  366/   BA457 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  366/   BA457 : =$0                 vcAM1 set $00<<5
(1)  366/   BA457 : =$0                 vcAM2 set $00<<5
(1)  366/   BA457 : =$0                 vcAM3 set $00<<5
(1)  366/   BA457 : =$0                 vcAM4 set $00<<5
(1)  367/   BA457 : (MACRO)             	smpsVcDecayRate1    $0C, $09, $06, $00
(1)  367/   BA457 : =$C                 vcD1R1 set $0C
(1)  367/   BA457 : =$9                 vcD1R2 set $09
(1)  367/   BA457 : =$6                 vcD1R3 set $06
(1)  367/   BA457 : =$0                 vcD1R4 set $00
(1)  368/   BA457 : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1)  368/   BA457 : =$8                 vcD2R1 set $08
(1)  368/   BA457 : =$6                 vcD2R2 set $06
(1)  368/   BA457 : =$6                 vcD2R3 set $06
(1)  368/   BA457 : =$7                 vcD2R4 set $07
(1)  369/   BA457 : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1)  369/   BA457 : =$F                 vcDL1 set $0F
(1)  369/   BA457 : =$1                 vcDL2 set $01
(1)  369/   BA457 : =$1                 vcDL3 set $01
(1)  369/   BA457 : =$2                 vcDL4 set $02
(1)  370/   BA457 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  370/   BA457 : =$F                 vcRR1 set $0F
(1)  370/   BA457 : =$F                 vcRR2 set $0F
(1)  370/   BA457 : =$F                 vcRR3 set $0F
(1)  370/   BA457 : =$F                 vcRR4 set $0F
(1)  371/   BA457 : (MACRO)             	smpsVcTotalLevel    $00, $16, $3A, $1C
(1)  371/   BA457 : =$0                 vcTL1 set $00
(1)  371/   BA457 : =$16                vcTL2 set $16
(1)  371/   BA457 : =$3A                vcTL3 set $3A
(1)  371/   BA457 : =$1C                vcTL4 set $1C
(1)  371/   BA457 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  371/   BA458 :                     ;   0     1     2     3     4     5     6     7
(1)  371/   BA458 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  371/   BA458 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  371/   BA458 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  371/   BA458 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  371/   BA458 : =$80                vcTLMask1 set $80
(1)  371/   BA458 :                     
(1)  371/   BA458 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  371/   BA458 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  371/   BA458 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  371/   BA458 : =$80                vcTLMask1 set $80
(1)  371/   BA458 : =$0                 vcTL1 set vcTL1&$7F
(1)  371/   BA458 : =$16                vcTL2 set vcTL2&$7F
(1)  371/   BA458 : =$3A                vcTL3 set vcTL3&$7F
(1)  371/   BA458 : =$1C                vcTL4 set vcTL4&$7F
(1)  371/   BA458 :                     
(1)  371/   BA458 : 6665 6060                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  371/   BA45C : DFDF 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  371/   BA460 : 0006 090C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  371/   BA464 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  371/   BA468 : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  371/   BA46C : 1C3A 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  372/   BA470 :                     
(1)  373/   BA470 :                     ;	Voice $01
(1)  374/   BA470 :                     ;	$0D
(1)  375/   BA470 :                     ;	$32, $08, $06, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
(1)  376/   BA470 :                     ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $80, $86, $8D
(1)  377/   BA470 : (MACRO)             	smpsVcAlgorithm     $05
(1)  377/   BA470 : =$5                 vcAlgorithm set $05
(1)  378/   BA470 : (MACRO)             	smpsVcFeedback      $01
(1)  378/   BA470 : =$1                 vcFeedback set $01
(1)  379/   BA470 : (MACRO)             	smpsVcUnusedBits    $00
(1)  379/   BA470 : =$0                 vcUnusedBits set $00
(1)  379/   BA470 : =$0                 vcD1R1Unk set 0
(1)  379/   BA470 : =$0                 vcD1R2Unk set 0
(1)  379/   BA470 : =$0                 vcD1R3Unk set 0
(1)  379/   BA470 : =$0                 vcD1R4Unk set 0
(1)  380/   BA470 : (MACRO)             	smpsVcDetune        $00, $00, $00, $03
(1)  380/   BA470 : =$0                 vcDT1 set $00
(1)  380/   BA470 : =$0                 vcDT2 set $00
(1)  380/   BA470 : =$0                 vcDT3 set $00
(1)  380/   BA470 : =$3                 vcDT4 set $03
(1)  381/   BA470 : (MACRO)             	smpsVcCoarseFreq    $01, $06, $08, $02
(1)  381/   BA470 : =$1                 vcCF1 set $01
(1)  381/   BA470 : =$6                 vcCF2 set $06
(1)  381/   BA470 : =$8                 vcCF3 set $08
(1)  381/   BA470 : =$2                 vcCF4 set $02
(1)  382/   BA470 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  382/   BA470 : =$0                 vcRS1 set $00
(1)  382/   BA470 : =$0                 vcRS2 set $00
(1)  382/   BA470 : =$0                 vcRS3 set $00
(1)  382/   BA470 : =$0                 vcRS4 set $00
(1)  383/   BA470 : (MACRO)             	smpsVcAttackRate    $19, $19, $19, $1F
(1)  383/   BA470 : =$19                vcAR1 set $19
(1)  383/   BA470 : =$19                vcAR2 set $19
(1)  383/   BA470 : =$19                vcAR3 set $19
(1)  383/   BA470 : =$1F                vcAR4 set $1F
(1)  384/   BA470 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  384/   BA470 : =$0                 vcAM1 set $00<<5
(1)  384/   BA470 : =$0                 vcAM2 set $00<<5
(1)  384/   BA470 : =$0                 vcAM3 set $00<<5
(1)  384/   BA470 : =$0                 vcAM4 set $00<<5
(1)  385/   BA470 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1)  385/   BA470 : =$5                 vcD1R1 set $05
(1)  385/   BA470 : =$5                 vcD1R2 set $05
(1)  385/   BA470 : =$5                 vcD1R3 set $05
(1)  385/   BA470 : =$A                 vcD1R4 set $0A
(1)  386/   BA470 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $00
(1)  386/   BA470 : =$2                 vcD2R1 set $02
(1)  386/   BA470 : =$2                 vcD2R2 set $02
(1)  386/   BA470 : =$2                 vcD2R3 set $02
(1)  386/   BA470 : =$0                 vcD2R4 set $00
(1)  387/   BA470 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $03
(1)  387/   BA470 : =$2                 vcDL1 set $02
(1)  387/   BA470 : =$2                 vcDL2 set $02
(1)  387/   BA470 : =$2                 vcDL3 set $02
(1)  387/   BA470 : =$3                 vcDL4 set $03
(1)  388/   BA470 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  388/   BA470 : =$F                 vcRR1 set $0F
(1)  388/   BA470 : =$F                 vcRR2 set $0F
(1)  388/   BA470 : =$F                 vcRR3 set $0F
(1)  388/   BA470 : =$F                 vcRR4 set $0F
(1)  389/   BA470 : (MACRO)             	smpsVcTotalLevel    $0D, $06, $00, $28
(1)  389/   BA470 : =$D                 vcTL1 set $0D
(1)  389/   BA470 : =$6                 vcTL2 set $06
(1)  389/   BA470 : =$0                 vcTL3 set $00
(1)  389/   BA470 : =$28                vcTL4 set $28
(1)  389/   BA470 : 0D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  389/   BA471 :                     ;   0     1     2     3     4     5     6     7
(1)  389/   BA471 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  389/   BA471 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  389/   BA471 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  389/   BA471 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  389/   BA471 : =$80                vcTLMask1 set $80
(1)  389/   BA471 :                     
(1)  389/   BA471 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  389/   BA471 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  389/   BA471 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  389/   BA471 : =$80                vcTLMask1 set $80
(1)  389/   BA471 : =$D                 vcTL1 set vcTL1&$7F
(1)  389/   BA471 : =$6                 vcTL2 set vcTL2&$7F
(1)  389/   BA471 : =$0                 vcTL3 set vcTL3&$7F
(1)  389/   BA471 : =$28                vcTL4 set vcTL4&$7F
(1)  389/   BA471 :                     
(1)  389/   BA471 : 3208 0601                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  389/   BA475 : 1F19 1919                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  389/   BA479 : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  389/   BA47D : 0002 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  389/   BA481 : 3F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  389/   BA485 : 2880 868D                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  390/   BA489 :                     
(1)  391/   BA489 :                     ;	Voice $02
(1)  392/   BA489 :                     ;	$3A
(1)  393/   BA489 :                     ;	$61, $08, $51, $02, 	$5D, $5D, $5D, $50, 	$04, $0F, $1F, $1F
(1)  394/   BA489 :                     ;	$00, $00, $00, $00, 	$1F, $5F, $0F, $0F, 	$22, $1E, $22, $80
(1)  395/   BA489 : (MACRO)             	smpsVcAlgorithm     $02
(1)  395/   BA489 : =$2                 vcAlgorithm set $02
(1)  396/   BA489 : (MACRO)             	smpsVcFeedback      $07
(1)  396/   BA489 : =$7                 vcFeedback set $07
(1)  397/   BA489 : (MACRO)             	smpsVcUnusedBits    $00
(1)  397/   BA489 : =$0                 vcUnusedBits set $00
(1)  397/   BA489 : =$0                 vcD1R1Unk set 0
(1)  397/   BA489 : =$0                 vcD1R2Unk set 0
(1)  397/   BA489 : =$0                 vcD1R3Unk set 0
(1)  397/   BA489 : =$0                 vcD1R4Unk set 0
(1)  398/   BA489 : (MACRO)             	smpsVcDetune        $00, $05, $00, $06
(1)  398/   BA489 : =$0                 vcDT1 set $00
(1)  398/   BA489 : =$5                 vcDT2 set $05
(1)  398/   BA489 : =$0                 vcDT3 set $00
(1)  398/   BA489 : =$6                 vcDT4 set $06
(1)  399/   BA489 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $01
(1)  399/   BA489 : =$2                 vcCF1 set $02
(1)  399/   BA489 : =$1                 vcCF2 set $01
(1)  399/   BA489 : =$8                 vcCF3 set $08
(1)  399/   BA489 : =$1                 vcCF4 set $01
(1)  400/   BA489 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  400/   BA489 : =$1                 vcRS1 set $01
(1)  400/   BA489 : =$1                 vcRS2 set $01
(1)  400/   BA489 : =$1                 vcRS3 set $01
(1)  400/   BA489 : =$1                 vcRS4 set $01
(1)  401/   BA489 : (MACRO)             	smpsVcAttackRate    $10, $1D, $1D, $1D
(1)  401/   BA489 : =$10                vcAR1 set $10
(1)  401/   BA489 : =$1D                vcAR2 set $1D
(1)  401/   BA489 : =$1D                vcAR3 set $1D
(1)  401/   BA489 : =$1D                vcAR4 set $1D
(1)  402/   BA489 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  402/   BA489 : =$0                 vcAM1 set $00<<5
(1)  402/   BA489 : =$0                 vcAM2 set $00<<5
(1)  402/   BA489 : =$0                 vcAM3 set $00<<5
(1)  402/   BA489 : =$0                 vcAM4 set $00<<5
(1)  403/   BA489 : (MACRO)             	smpsVcDecayRate1    $1F, $1F, $0F, $04
(1)  403/   BA489 : =$1F                vcD1R1 set $1F
(1)  403/   BA489 : =$1F                vcD1R2 set $1F
(1)  403/   BA489 : =$F                 vcD1R3 set $0F
(1)  403/   BA489 : =$4                 vcD1R4 set $04
(1)  404/   BA489 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  404/   BA489 : =$0                 vcD2R1 set $00
(1)  404/   BA489 : =$0                 vcD2R2 set $00
(1)  404/   BA489 : =$0                 vcD2R3 set $00
(1)  404/   BA489 : =$0                 vcD2R4 set $00
(1)  405/   BA489 : (MACRO)             	smpsVcDecayLevel    $00, $00, $05, $01
(1)  405/   BA489 : =$0                 vcDL1 set $00
(1)  405/   BA489 : =$0                 vcDL2 set $00
(1)  405/   BA489 : =$5                 vcDL3 set $05
(1)  405/   BA489 : =$1                 vcDL4 set $01
(1)  406/   BA489 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  406/   BA489 : =$F                 vcRR1 set $0F
(1)  406/   BA489 : =$F                 vcRR2 set $0F
(1)  406/   BA489 : =$F                 vcRR3 set $0F
(1)  406/   BA489 : =$F                 vcRR4 set $0F
(1)  407/   BA489 : (MACRO)             	smpsVcTotalLevel    $00, $22, $1E, $22
(1)  407/   BA489 : =$0                 vcTL1 set $00
(1)  407/   BA489 : =$22                vcTL2 set $22
(1)  407/   BA489 : =$1E                vcTL3 set $1E
(1)  407/   BA489 : =$22                vcTL4 set $22
(1)  407/   BA489 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  407/   BA48A :                     ;   0     1     2     3     4     5     6     7
(1)  407/   BA48A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  407/   BA48A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  407/   BA48A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  407/   BA48A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  407/   BA48A : =$80                vcTLMask1 set $80
(1)  407/   BA48A :                     
(1)  407/   BA48A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  407/   BA48A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  407/   BA48A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  407/   BA48A : =$80                vcTLMask1 set $80
(1)  407/   BA48A : =$0                 vcTL1 set vcTL1&$7F
(1)  407/   BA48A : =$22                vcTL2 set vcTL2&$7F
(1)  407/   BA48A : =$1E                vcTL3 set vcTL3&$7F
(1)  407/   BA48A : =$22                vcTL4 set vcTL4&$7F
(1)  407/   BA48A :                     
(1)  407/   BA48A : 6108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  407/   BA48E : 5D5D 5D50                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  407/   BA492 : 040F 1F1F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  407/   BA496 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  407/   BA49A : 1F5F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  407/   BA49E : 221E 2280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  408/   BA4A2 :                     
(1)  409/   BA4A2 :                     ;	Voice $03
(1)  410/   BA4A2 :                     ;	$02
(1)  411/   BA4A2 :                     ;	$01, $55, $02, $04, 	$92, $8D, $8E, $54, 	$0D, $0C, $00, $03
(1)  412/   BA4A2 :                     ;	$00, $00, $00, $00, 	$FF, $2F, $0F, $5F, 	$16, $2A, $1D, $80
(1)  413/   BA4A2 : (MACRO)             	smpsVcAlgorithm     $02
(1)  413/   BA4A2 : =$2                 vcAlgorithm set $02
(1)  414/   BA4A2 : (MACRO)             	smpsVcFeedback      $00
(1)  414/   BA4A2 : =$0                 vcFeedback set $00
(1)  415/   BA4A2 : (MACRO)             	smpsVcUnusedBits    $00
(1)  415/   BA4A2 : =$0                 vcUnusedBits set $00
(1)  415/   BA4A2 : =$0                 vcD1R1Unk set 0
(1)  415/   BA4A2 : =$0                 vcD1R2Unk set 0
(1)  415/   BA4A2 : =$0                 vcD1R3Unk set 0
(1)  415/   BA4A2 : =$0                 vcD1R4Unk set 0
(1)  416/   BA4A2 : (MACRO)             	smpsVcDetune        $00, $00, $05, $00
(1)  416/   BA4A2 : =$0                 vcDT1 set $00
(1)  416/   BA4A2 : =$0                 vcDT2 set $00
(1)  416/   BA4A2 : =$5                 vcDT3 set $05
(1)  416/   BA4A2 : =$0                 vcDT4 set $00
(1)  417/   BA4A2 : (MACRO)             	smpsVcCoarseFreq    $04, $02, $05, $01
(1)  417/   BA4A2 : =$4                 vcCF1 set $04
(1)  417/   BA4A2 : =$2                 vcCF2 set $02
(1)  417/   BA4A2 : =$5                 vcCF3 set $05
(1)  417/   BA4A2 : =$1                 vcCF4 set $01
(1)  418/   BA4A2 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  418/   BA4A2 : =$1                 vcRS1 set $01
(1)  418/   BA4A2 : =$2                 vcRS2 set $02
(1)  418/   BA4A2 : =$2                 vcRS3 set $02
(1)  418/   BA4A2 : =$2                 vcRS4 set $02
(1)  419/   BA4A2 : (MACRO)             	smpsVcAttackRate    $14, $0E, $0D, $12
(1)  419/   BA4A2 : =$14                vcAR1 set $14
(1)  419/   BA4A2 : =$E                 vcAR2 set $0E
(1)  419/   BA4A2 : =$D                 vcAR3 set $0D
(1)  419/   BA4A2 : =$12                vcAR4 set $12
(1)  420/   BA4A2 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  420/   BA4A2 : =$0                 vcAM1 set $00<<5
(1)  420/   BA4A2 : =$0                 vcAM2 set $00<<5
(1)  420/   BA4A2 : =$0                 vcAM3 set $00<<5
(1)  420/   BA4A2 : =$0                 vcAM4 set $00<<5
(1)  421/   BA4A2 : (MACRO)             	smpsVcDecayRate1    $03, $00, $0C, $0D
(1)  421/   BA4A2 : =$3                 vcD1R1 set $03
(1)  421/   BA4A2 : =$0                 vcD1R2 set $00
(1)  421/   BA4A2 : =$C                 vcD1R3 set $0C
(1)  421/   BA4A2 : =$D                 vcD1R4 set $0D
(1)  422/   BA4A2 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  422/   BA4A2 : =$0                 vcD2R1 set $00
(1)  422/   BA4A2 : =$0                 vcD2R2 set $00
(1)  422/   BA4A2 : =$0                 vcD2R3 set $00
(1)  422/   BA4A2 : =$0                 vcD2R4 set $00
(1)  423/   BA4A2 : (MACRO)             	smpsVcDecayLevel    $05, $00, $02, $0F
(1)  423/   BA4A2 : =$5                 vcDL1 set $05
(1)  423/   BA4A2 : =$0                 vcDL2 set $00
(1)  423/   BA4A2 : =$2                 vcDL3 set $02
(1)  423/   BA4A2 : =$F                 vcDL4 set $0F
(1)  424/   BA4A2 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  424/   BA4A2 : =$F                 vcRR1 set $0F
(1)  424/   BA4A2 : =$F                 vcRR2 set $0F
(1)  424/   BA4A2 : =$F                 vcRR3 set $0F
(1)  424/   BA4A2 : =$F                 vcRR4 set $0F
(1)  425/   BA4A2 : (MACRO)             	smpsVcTotalLevel    $00, $1D, $2A, $16
(1)  425/   BA4A2 : =$0                 vcTL1 set $00
(1)  425/   BA4A2 : =$1D                vcTL2 set $1D
(1)  425/   BA4A2 : =$2A                vcTL3 set $2A
(1)  425/   BA4A2 : =$16                vcTL4 set $16
(1)  425/   BA4A2 : 02                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  425/   BA4A3 :                     ;   0     1     2     3     4     5     6     7
(1)  425/   BA4A3 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  425/   BA4A3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  425/   BA4A3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  425/   BA4A3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  425/   BA4A3 : =$80                vcTLMask1 set $80
(1)  425/   BA4A3 :                     
(1)  425/   BA4A3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  425/   BA4A3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  425/   BA4A3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  425/   BA4A3 : =$80                vcTLMask1 set $80
(1)  425/   BA4A3 : =$0                 vcTL1 set vcTL1&$7F
(1)  425/   BA4A3 : =$1D                vcTL2 set vcTL2&$7F
(1)  425/   BA4A3 : =$2A                vcTL3 set vcTL3&$7F
(1)  425/   BA4A3 : =$16                vcTL4 set vcTL4&$7F
(1)  425/   BA4A3 :                     
(1)  425/   BA4A3 : 0155 0204                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  425/   BA4A7 : 928D 8E54                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  425/   BA4AB : 0D0C 0003                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  425/   BA4AF : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  425/   BA4B3 : FF2F 0F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  425/   BA4B7 : 162A 1D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  426/   BA4BB :                     
(1)  427/   BA4BB :                     ;	Voice $04
(1)  428/   BA4BB :                     ;	$02
(1)  429/   BA4BB :                     ;	$75, $71, $73, $31, 	$1F, $58, $96, $9F, 	$01, $1B, $03, $08
(1)  430/   BA4BB :                     ;	$01, $04, $01, $05, 	$FF, $2F, $3F, $2F, 	$24, $29, $30, $80
(1)  431/   BA4BB : (MACRO)             	smpsVcAlgorithm     $02
(1)  431/   BA4BB : =$2                 vcAlgorithm set $02
(1)  432/   BA4BB : (MACRO)             	smpsVcFeedback      $00
(1)  432/   BA4BB : =$0                 vcFeedback set $00
(1)  433/   BA4BB : (MACRO)             	smpsVcUnusedBits    $00
(1)  433/   BA4BB : =$0                 vcUnusedBits set $00
(1)  433/   BA4BB : =$0                 vcD1R1Unk set 0
(1)  433/   BA4BB : =$0                 vcD1R2Unk set 0
(1)  433/   BA4BB : =$0                 vcD1R3Unk set 0
(1)  433/   BA4BB : =$0                 vcD1R4Unk set 0
(1)  434/   BA4BB : (MACRO)             	smpsVcDetune        $03, $07, $07, $07
(1)  434/   BA4BB : =$3                 vcDT1 set $03
(1)  434/   BA4BB : =$7                 vcDT2 set $07
(1)  434/   BA4BB : =$7                 vcDT3 set $07
(1)  434/   BA4BB : =$7                 vcDT4 set $07
(1)  435/   BA4BB : (MACRO)             	smpsVcCoarseFreq    $01, $03, $01, $05
(1)  435/   BA4BB : =$1                 vcCF1 set $01
(1)  435/   BA4BB : =$3                 vcCF2 set $03
(1)  435/   BA4BB : =$1                 vcCF3 set $01
(1)  435/   BA4BB : =$5                 vcCF4 set $05
(1)  436/   BA4BB : (MACRO)             	smpsVcRateScale     $02, $02, $01, $00
(1)  436/   BA4BB : =$2                 vcRS1 set $02
(1)  436/   BA4BB : =$2                 vcRS2 set $02
(1)  436/   BA4BB : =$1                 vcRS3 set $01
(1)  436/   BA4BB : =$0                 vcRS4 set $00
(1)  437/   BA4BB : (MACRO)             	smpsVcAttackRate    $1F, $16, $18, $1F
(1)  437/   BA4BB : =$1F                vcAR1 set $1F
(1)  437/   BA4BB : =$16                vcAR2 set $16
(1)  437/   BA4BB : =$18                vcAR3 set $18
(1)  437/   BA4BB : =$1F                vcAR4 set $1F
(1)  438/   BA4BB : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  438/   BA4BB : =$0                 vcAM1 set $00<<5
(1)  438/   BA4BB : =$0                 vcAM2 set $00<<5
(1)  438/   BA4BB : =$0                 vcAM3 set $00<<5
(1)  438/   BA4BB : =$0                 vcAM4 set $00<<5
(1)  439/   BA4BB : (MACRO)             	smpsVcDecayRate1    $08, $03, $1B, $01
(1)  439/   BA4BB : =$8                 vcD1R1 set $08
(1)  439/   BA4BB : =$3                 vcD1R2 set $03
(1)  439/   BA4BB : =$1B                vcD1R3 set $1B
(1)  439/   BA4BB : =$1                 vcD1R4 set $01
(1)  440/   BA4BB : (MACRO)             	smpsVcDecayRate2    $05, $01, $04, $01
(1)  440/   BA4BB : =$5                 vcD2R1 set $05
(1)  440/   BA4BB : =$1                 vcD2R2 set $01
(1)  440/   BA4BB : =$4                 vcD2R3 set $04
(1)  440/   BA4BB : =$1                 vcD2R4 set $01
(1)  441/   BA4BB : (MACRO)             	smpsVcDecayLevel    $02, $03, $02, $0F
(1)  441/   BA4BB : =$2                 vcDL1 set $02
(1)  441/   BA4BB : =$3                 vcDL2 set $03
(1)  441/   BA4BB : =$2                 vcDL3 set $02
(1)  441/   BA4BB : =$F                 vcDL4 set $0F
(1)  442/   BA4BB : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  442/   BA4BB : =$F                 vcRR1 set $0F
(1)  442/   BA4BB : =$F                 vcRR2 set $0F
(1)  442/   BA4BB : =$F                 vcRR3 set $0F
(1)  442/   BA4BB : =$F                 vcRR4 set $0F
(1)  443/   BA4BB : (MACRO)             	smpsVcTotalLevel    $00, $30, $29, $24
(1)  443/   BA4BB : =$0                 vcTL1 set $00
(1)  443/   BA4BB : =$30                vcTL2 set $30
(1)  443/   BA4BB : =$29                vcTL3 set $29
(1)  443/   BA4BB : =$24                vcTL4 set $24
(1)  443/   BA4BB : 02                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  443/   BA4BC :                     ;   0     1     2     3     4     5     6     7
(1)  443/   BA4BC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  443/   BA4BC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  443/   BA4BC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  443/   BA4BC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  443/   BA4BC : =$80                vcTLMask1 set $80
(1)  443/   BA4BC :                     
(1)  443/   BA4BC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  443/   BA4BC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  443/   BA4BC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  443/   BA4BC : =$80                vcTLMask1 set $80
(1)  443/   BA4BC : =$0                 vcTL1 set vcTL1&$7F
(1)  443/   BA4BC : =$30                vcTL2 set vcTL2&$7F
(1)  443/   BA4BC : =$29                vcTL3 set vcTL3&$7F
(1)  443/   BA4BC : =$24                vcTL4 set vcTL4&$7F
(1)  443/   BA4BC :                     
(1)  443/   BA4BC : 7571 7331                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  443/   BA4C0 : 1F58 969F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  443/   BA4C4 : 011B 0308                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  443/   BA4C8 : 0104 0105                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  443/   BA4CC : FF2F 3F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  443/   BA4D0 : 2429 3080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  444/   BA4D4 :                     
(1)  445/   BA4D4 :                     
   46/   BA4D4 :                        Music_0D:	include		"music-improved/8D - SCZ.asm"
(1)    1/   BA4D4 :                     SCZ_Header:
(1)    2/   BA4D4 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   BA4D4 :                     
(1)    2/   BA4D4 : =$2                 SourceDriver set 2
(1)    2/   BA4D4 :                     
(1)    2/   BA4D4 : =$0                 SourceSMPS2ASM set 0
(1)    2/   BA4D4 :                     
(1)    2/   BA4D4 : =$BA4D4             songStart set *
(1)    2/   BA4D4 :                     
(1)    2/   BA4D4 :                     
(1)    3/   BA4D4 : (MACRO)             	smpsHeaderVoice     SCZ_Voices
(1)    3/   BA4D4 : 28A8                                dc.w    z80_ptr(SCZ_VOICES)
(1)    4/   BA4D6 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   BA4D6 : 0603                        dc.b    $06,$03
(1)    5/   BA4D8 : (MACRO)             	smpsHeaderTempo     $01, $5B
(1)    5/   BA4D8 : 01                          dc.b    $01
(1)    5/   BA4D9 :  (MACRO-2)                  convertMainTempoMod $5B
(1)    5/   BA4D9 : A5                                          dc.b    s2TempotoS3($5B)
(1)    6/   BA4DA :                     
(1)    7/   BA4DA : (MACRO)             	smpsHeaderDAC       SCZ_DAC
(1)    7/   BA4DA :  (MACRO-2)                  CheckedChannelPointer SCZ_DAC
(1)    7/   BA4DA : 25A7                                dc.w    z80_ptr(SCZ_DAC)
(1)    7/   BA4DC : 0000                                dc.w    $00
(1)    8/   BA4DE : (MACRO)             	smpsHeaderFM        SCZ_FM1,	$F4, $12
(1)    8/   BA4DE :  (MACRO-2)                  CheckedChannelPointer SCZ_FM1
(1)    8/   BA4DE : B5A5                                dc.w    z80_ptr(SCZ_FM1)
(1)    8/   BA4E0 : F412                        dc.b    $F4,$12
(1)    9/   BA4E2 : (MACRO)             	smpsHeaderFM        SCZ_FM2,	$E8, $0E
(1)    9/   BA4E2 :  (MACRO-2)                  CheckedChannelPointer SCZ_FM2
(1)    9/   BA4E2 : D6A6                                dc.w    z80_ptr(SCZ_FM2)
(1)    9/   BA4E4 : E80E                        dc.b    $E8,$0E
(1)   10/   BA4E6 : (MACRO)             	smpsHeaderFM        SCZ_FM3,	$F4, $09
(1)   10/   BA4E6 :  (MACRO-2)                  CheckedChannelPointer SCZ_FM3
(1)   10/   BA4E6 : 1FA6                                dc.w    z80_ptr(SCZ_FM3)
(1)   10/   BA4E8 : F409                        dc.b    $F4,$09
(1)   11/   BA4EA : (MACRO)             	smpsHeaderFM        SCZ_FM4,	$F4, $10
(1)   11/   BA4EA :  (MACRO-2)                  CheckedChannelPointer SCZ_FM4
(1)   11/   BA4EA : 04A5                                dc.w    z80_ptr(SCZ_FM4)
(1)   11/   BA4EC : F410                        dc.b    $F4,$10
(1)   12/   BA4EE : (MACRO)             	smpsHeaderFM        SCZ_FM5,	$DC, $24
(1)   12/   BA4EE :  (MACRO-2)                  CheckedChannelPointer SCZ_FM5
(1)   12/   BA4EE : 3AA5                                dc.w    z80_ptr(SCZ_FM5)
(1)   12/   BA4F0 : DC24                        dc.b    $DC,$24
(1)   13/   BA4F2 : (MACRO)             	smpsHeaderPSG       SCZ_PSG1,	$F4, $0C, $00, $00
(1)   13/   BA4F2 :  (MACRO-2)                  CheckedChannelPointer SCZ_PSG1
(1)   13/   BA4F2 : 6DA7                                dc.w    z80_ptr(SCZ_PSG1)
(1)   13/   BA4F4 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   13/   BA4F4 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)   13/   BA4F5 : 0C00 00                     dc.b    $0C,$00,$00
(1)   14/   BA4F8 : (MACRO)             	smpsHeaderPSG       SCZ_PSG2,	$F9, $09, $00, $00
(1)   14/   BA4F8 :  (MACRO-2)                  CheckedChannelPointer SCZ_PSG2
(1)   14/   BA4F8 : ADA7                                dc.w    z80_ptr(SCZ_PSG2)
(1)   14/   BA4FA :  (MACRO-2)                  PSGPitchConvert $F9
(1)   14/   BA4FA : 05                                  dc.b    ($F9+psgdelta)&$FF
(1)   14/   BA4FB : 0900 00                     dc.b    $09,$00,$00
(1)   15/   BA4FE : (MACRO)             	smpsHeaderPSG       SCZ_PSG3,	$00, $04, $00, fTone_04
(1)   15/   BA4FE :  (MACRO-2)                  CheckedChannelPointer SCZ_PSG3
(1)   15/   BA4FE : 1FA8                                dc.w    z80_ptr(SCZ_PSG3)
(1)   15/   BA500 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   BA500 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   BA501 : 0400 04                     dc.b    $04,$00,FTONE_04
(1)   16/   BA504 :                     
(1)   17/   BA504 :                     ; FM4 Data
(1)   18/   BA504 :                     SCZ_FM4:
(1)   19/   BA504 : (MACRO)             	smpsSetvoice        $03
(1)   19/   BA504 :  (MACRO-2)                  smpsFMvoice $03
(1)   19/   BA504 : EF03                                dc.b    $EF,$03
(1)   20/   BA506 :                     
(1)   21/   BA506 :                     SCZ_Loop03:
(1)   22/   BA506 : (MACRO)             	smpsCall            SCZ_Call07
(1)   22/   BA506 : F8                          dc.b    $F8
(1)   22/   BA507 : 30A5                                dc.w    z80_ptr(SCZ_CALL07)
(1)   23/   BA509 : (MACRO)             	smpsLoop            $00, $02, SCZ_Loop03
(1)   23/   BA509 : F7                          dc.b    $F7
(1)   23/   BA50A : 0002                        dc.b    $00,$02
(1)   23/   BA50C : 06A5                                dc.w    z80_ptr(SCZ_LOOP03)
(1)   24/   BA50E :                     
(1)   25/   BA50E :                     SCZ_Jump03:
(1)   26/   BA50E : (MACRO)             	smpsPan             panRight, $00
(1)   26/   BA50E : =$0                 panNone set $00
(1)   26/   BA50E : =$40                panRight set $40
(1)   26/   BA50E : =$80                panLeft set $80
(1)   26/   BA50E : =$C0                panCentre set $C0
(1)   26/   BA50E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   26/   BA50E : E040                        dc.b $E0,PANRIGHT+$00
(1)   27/   BA510 : (MACRO)             	smpsAlterNote       $FE
(1)   27/   BA510 :  (MACRO-2)                  smpsDetune      $FE
(1)   27/   BA510 : E1FE                        dc.b    $E1,$FE
(1)   28/   BA512 : (MACRO)             	smpsAlterVol        $14
(1)   28/   BA512 : E614                        dc.b    $E6,$14
(1)   29/   BA514 : (MACRO)             	smpsAlterPitch      $E8
(1)   29/   BA514 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)   29/   BA514 : FBE8                                dc.b    $FB,$E8
(1)   30/   BA516 : (MACRO)             	smpsSetvoice        $04
(1)   30/   BA516 :  (MACRO-2)                  smpsFMvoice $04
(1)   30/   BA516 : EF04                                dc.b    $EF,$04
(1)   31/   BA518 : (MACRO)             	smpsCall            SCZ_Call05
(1)   31/   BA518 : F8                          dc.b    $F8
(1)   31/   BA519 : 6FA5                                dc.w    z80_ptr(SCZ_CALL05)
(1)   32/   BA51B : (MACRO)             	smpsSetvoice        $03
(1)   32/   BA51B :  (MACRO-2)                  smpsFMvoice $03
(1)   32/   BA51B : EF03                                dc.b    $EF,$03
(1)   33/   BA51D : (MACRO)             	smpsAlterPitch      $18
(1)   33/   BA51D :  (MACRO-2)                  smpsChangeTransposition $18
(1)   33/   BA51D : FB18                                dc.b    $FB,$18
(1)   34/   BA51F : (MACRO)             	smpsAlterVol        $EC
(1)   34/   BA51F : E6EC                        dc.b    $E6,$EC
(1)   35/   BA521 : (MACRO)             	smpsAlterNote       $00
(1)   35/   BA521 :  (MACRO-2)                  smpsDetune      $00
(1)   35/   BA521 : E100                        dc.b    $E1,$00
(1)   36/   BA523 : (MACRO)             	smpsPan             panCenter, $00
(1)   36/   BA523 : =$0                 panNone set $00
(1)   36/   BA523 : =$40                panRight set $40
(1)   36/   BA523 : =$80                panLeft set $80
(1)   36/   BA523 : =$C0                panCentre set $C0
(1)   36/   BA523 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   36/   BA523 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   37/   BA525 :                     
(1)   38/   BA525 :                     SCZ_Loop04:
(1)   39/   BA525 : (MACRO)             	smpsCall            SCZ_Call07
(1)   39/   BA525 : F8                          dc.b    $F8
(1)   39/   BA526 : 30A5                                dc.w    z80_ptr(SCZ_CALL07)
(1)   40/   BA528 : (MACRO)             	smpsLoop            $00, $08, SCZ_Loop04
(1)   40/   BA528 : F7                          dc.b    $F7
(1)   40/   BA529 : 0008                        dc.b    $00,$08
(1)   40/   BA52B : 25A5                                dc.w    z80_ptr(SCZ_LOOP04)
(1)   41/   BA52D : (MACRO)             	smpsJump            SCZ_Jump03
(1)   41/   BA52D : F6                          dc.b    $F6
(1)   41/   BA52E : 0EA5                                dc.w    z80_ptr(SCZ_JUMP03)
(1)   42/   BA530 :                     
(1)   43/   BA530 :                     SCZ_Call07:
(1)   44/   BA530 : D406 D0D2 CBD4 D0D2 	dc.b	nB6, $06, nG6, nA6, nD6, nB6, nG6, nA6, nD6
            BA538 : CB               
(1)   45/   BA539 : (MACRO)             	smpsReturn
(1)   45/   BA539 : F9                                  dc.b    $F9
(1)   46/   BA53A :                     
(1)   47/   BA53A :                     ; FM5 Data
(1)   48/   BA53A :                     SCZ_FM5:
(1)   49/   BA53A : (MACRO)             	smpsSetvoice        $04
(1)   49/   BA53A :  (MACRO-2)                  smpsFMvoice $04
(1)   49/   BA53A : EF04                                dc.b    $EF,$04
(1)   50/   BA53C : 8060                	dc.b	nRst, $60
(1)   51/   BA53E :                     
(1)   52/   BA53E :                     SCZ_Jump02:
(1)   53/   BA53E : (MACRO)             	smpsPan             panLeft, $00
(1)   53/   BA53E : =$0                 panNone set $00
(1)   53/   BA53E : =$40                panRight set $40
(1)   53/   BA53E : =$80                panLeft set $80
(1)   53/   BA53E : =$C0                panCentre set $C0
(1)   53/   BA53E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   53/   BA53E : E080                        dc.b $E0,PANLEFT+$00
(1)   54/   BA540 : (MACRO)             	smpsAlterNote       $02
(1)   54/   BA540 :  (MACRO-2)                  smpsDetune      $02
(1)   54/   BA540 : E102                        dc.b    $E1,$02
(1)   55/   BA542 : (MACRO)             	smpsCall            SCZ_Call05
(1)   55/   BA542 : F8                          dc.b    $F8
(1)   55/   BA543 : 6FA5                                dc.w    z80_ptr(SCZ_CALL05)
(1)   56/   BA545 : (MACRO)             	smpsAlterNote       $00
(1)   56/   BA545 :  (MACRO-2)                  smpsDetune      $00
(1)   56/   BA545 : E100                        dc.b    $E1,$00
(1)   57/   BA547 : (MACRO)             	smpsPan             panCenter, $00
(1)   57/   BA547 : =$0                 panNone set $00
(1)   57/   BA547 : =$40                panRight set $40
(1)   57/   BA547 : =$80                panLeft set $80
(1)   57/   BA547 : =$C0                panCentre set $C0
(1)   57/   BA547 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   57/   BA547 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   58/   BA549 : (MACRO)             	smpsAlterVol        $FB
(1)   58/   BA549 : E6FB                        dc.b    $E6,$FB
(1)   59/   BA54B : (MACRO)             	smpsCall            SCZ_Call06
(1)   59/   BA54B : F8                          dc.b    $F8
(1)   59/   BA54C : 78A5                                dc.w    z80_ptr(SCZ_CALL06)
(1)   60/   BA54E : CB03 0306 E7        	dc.b	nD6, $03, $03, $06, smpsNoAttack
(1)   61/   BA553 : (MACRO)             	smpsAlterVol        $02
(1)   61/   BA553 : E602                        dc.b    $E6,$02
(1)   62/   BA555 : 02E7                	dc.b	$02, smpsNoAttack
(1)   63/   BA557 : (MACRO)             	smpsAlterVol        $02
(1)   63/   BA557 : E602                        dc.b    $E6,$02
(1)   64/   BA559 : 02E7                	dc.b	$02, smpsNoAttack
(1)   65/   BA55B : (MACRO)             	smpsAlterVol        $02
(1)   65/   BA55B : E602                        dc.b    $E6,$02
(1)   66/   BA55D : 0280 12C9 06CB      	dc.b	$02, nRst, $12, nC6, $06, nD6
(1)   67/   BA563 : (MACRO)             	smpsAlterVol        $FA
(1)   67/   BA563 : E6FA                        dc.b    $E6,$FA
(1)   68/   BA565 : (MACRO)             	smpsCall            SCZ_Call06
(1)   68/   BA565 : F8                          dc.b    $F8
(1)   68/   BA566 : 78A5                                dc.w    z80_ptr(SCZ_CALL06)
(1)   69/   BA568 : CB30                	dc.b	nD6, $30
(1)   70/   BA56A : (MACRO)             	smpsAlterVol        $05
(1)   70/   BA56A : E605                        dc.b    $E6,$05
(1)   71/   BA56C : (MACRO)             	smpsJump            SCZ_Jump02
(1)   71/   BA56C : F6                          dc.b    $F6
(1)   71/   BA56D : 3EA5                                dc.w    z80_ptr(SCZ_JUMP02)
(1)   72/   BA56F :                     
(1)   73/   BA56F :                     SCZ_Call05:
(1)   74/   BA56F : D030 CB             	dc.b	nG6, $30, nD6
(1)   75/   BA572 : (MACRO)             	smpsLoop            $00, $04, SCZ_Call05
(1)   75/   BA572 : F7                          dc.b    $F7
(1)   75/   BA573 : 0004                        dc.b    $00,$04
(1)   75/   BA575 : 6FA5                                dc.w    z80_ptr(SCZ_CALL05)
(1)   76/   BA577 : (MACRO)             	smpsReturn
(1)   76/   BA577 : F9                                  dc.b    $F9
(1)   77/   BA578 :                     
(1)   78/   BA578 :                     SCZ_Call06:
(1)   79/   BA578 : D003 0306 E7        	dc.b	nG6, $03, $03, $06, smpsNoAttack
(1)   80/   BA57D : (MACRO)             	smpsAlterVol        $02
(1)   80/   BA57D : E602                        dc.b    $E6,$02
(1)   81/   BA57F : 02E7                	dc.b	$02, smpsNoAttack
(1)   82/   BA581 : (MACRO)             	smpsAlterVol        $02
(1)   82/   BA581 : E602                        dc.b    $E6,$02
(1)   83/   BA583 : 02E7                	dc.b	$02, smpsNoAttack
(1)   84/   BA585 : (MACRO)             	smpsAlterVol        $02
(1)   84/   BA585 : E602                        dc.b    $E6,$02
(1)   85/   BA587 : 0280 1E             	dc.b	$02, nRst, $1E
(1)   86/   BA58A : (MACRO)             	smpsAlterVol        $FA
(1)   86/   BA58A : E6FA                        dc.b    $E6,$FA
(1)   87/   BA58C : CB03 0306 E7        	dc.b	nD6, $03, $03, $06, smpsNoAttack
(1)   88/   BA591 : (MACRO)             	smpsAlterVol        $02
(1)   88/   BA591 : E602                        dc.b    $E6,$02
(1)   89/   BA593 : 02E7                	dc.b	$02, smpsNoAttack
(1)   90/   BA595 : (MACRO)             	smpsAlterVol        $02
(1)   90/   BA595 : E602                        dc.b    $E6,$02
(1)   91/   BA597 : 02E7                	dc.b	$02, smpsNoAttack
(1)   92/   BA599 : (MACRO)             	smpsAlterVol        $02
(1)   92/   BA599 : E602                        dc.b    $E6,$02
(1)   93/   BA59B : 0280 1E             	dc.b	$02, nRst, $1E
(1)   94/   BA59E : (MACRO)             	smpsAlterVol        $FA
(1)   94/   BA59E : E6FA                        dc.b    $E6,$FA
(1)   95/   BA5A0 : C903 0306 E7        	dc.b	nC6, $03, $03, $06, smpsNoAttack
(1)   96/   BA5A5 : (MACRO)             	smpsAlterVol        $02
(1)   96/   BA5A5 : E602                        dc.b    $E6,$02
(1)   97/   BA5A7 : 02E7                	dc.b	$02, smpsNoAttack
(1)   98/   BA5A9 : (MACRO)             	smpsAlterVol        $02
(1)   98/   BA5A9 : E602                        dc.b    $E6,$02
(1)   99/   BA5AB : 02E7                	dc.b	$02, smpsNoAttack
(1)  100/   BA5AD : (MACRO)             	smpsAlterVol        $02
(1)  100/   BA5AD : E602                        dc.b    $E6,$02
(1)  101/   BA5AF : 0280 1E             	dc.b	$02, nRst, $1E
(1)  102/   BA5B2 : (MACRO)             	smpsAlterVol        $FA
(1)  102/   BA5B2 : E6FA                        dc.b    $E6,$FA
(1)  103/   BA5B4 : (MACRO)             	smpsReturn
(1)  103/   BA5B4 : F9                                  dc.b    $F9
(1)  104/   BA5B5 :                     
(1)  105/   BA5B5 :                     ; FM1 Data
(1)  106/   BA5B5 :                     SCZ_FM1:
(1)  107/   BA5B5 : (MACRO)             	smpsSetvoice        $06
(1)  107/   BA5B5 :  (MACRO-2)                  smpsFMvoice $06
(1)  107/   BA5B5 : EF06                                dc.b    $EF,$06
(1)  108/   BA5B7 : 8006 B803 BAB8 0CBC 	dc.b	nRst, $06, nG4, $03, nA4, nG4, $0C, nB4, $03, nC5, nB4, $0C
            BA5BF : 03BD BC0C         
(1)  109/   BA5C3 : BF03 C1BF 30        	dc.b	nD5, $03, nE5, nD5, $30
(1)  110/   BA5C8 :                     
(1)  111/   BA5C8 :                     SCZ_Jump01:
(1)  112/   BA5C8 : 8012 CD03 CFD0 06CF 	dc.b	nRst, $12, nE6, $03, nFs6, nG6, $06, nFs6, nE6, nD6, nB5, $30
            BA5D0 : CDCB C830         
(1)  113/   BA5D4 : 8012 CD03 D0D2 06D0 	dc.b	nRst, $12, nE6, $03, nG6, nA6, $06, nG6, nFs6, nE6, nD6, $03
            BA5DC : CFCD CB03         
(1)  114/   BA5E0 : CDCB C827 8012 CD03 	dc.b	nE6, nD6, nB5, $27, nRst, $12, nE6, $03, nG6, nFs6, $06, nD6
            BA5E8 : D0CF 06CB         
(1)  115/   BA5EC : C8CD CB30 8012 CD03 	dc.b	nB5, nE6, nD6, $30, nRst, $12, nE6, $03, nG6, nA6, $06, nG6
            BA5F4 : D0D2 06D0         
(1)  116/   BA5F8 : CFCD CB03 CDCB C827 	dc.b	nFs6, nE6, nD6, $03, nE6, nD6, nB5, $27
(1)  117/   BA600 : (MACRO)             	smpsSetvoice        $00
(1)  117/   BA600 :  (MACRO-2)                  smpsFMvoice $00
(1)  117/   BA600 : EF00                                dc.b    $EF,$00
(1)  118/   BA602 : (MACRO)             	smpsCall            SCZ_Call04
(1)  118/   BA602 : F8                          dc.b    $F8
(1)  118/   BA603 : 14A6                                dc.w    z80_ptr(SCZ_CALL04)
(1)  119/   BA605 : BC0C B8BA B806 BA   	dc.b	nB4, $0C, nG4, nA4, nG4, $06, nA4
(1)  120/   BA60C : (MACRO)             	smpsCall            SCZ_Call04
(1)  120/   BA60C : F8                          dc.b    $F8
(1)  120/   BA60D : 14A6                                dc.w    z80_ptr(SCZ_CALL04)
(1)  121/   BA60F : BC30                	dc.b	nB4, $30
(1)  122/   BA611 : (MACRO)             	smpsJump            SCZ_Jump01
(1)  122/   BA611 : F6                          dc.b    $F6
(1)  122/   BA612 : C8A5                                dc.w    z80_ptr(SCZ_JUMP01)
(1)  123/   BA614 :                     
(1)  124/   BA614 :                     SCZ_Call04:
(1)  125/   BA614 : BC0C B8BA B3        	dc.b	nB4, $0C, nG4, nA4, nD4
(1)  126/   BA619 : (MACRO)             	smpsLoop            $00, $03, SCZ_Call04
(1)  126/   BA619 : F7                          dc.b    $F7
(1)  126/   BA61A : 0003                        dc.b    $00,$03
(1)  126/   BA61C : 14A6                                dc.w    z80_ptr(SCZ_CALL04)
(1)  127/   BA61E : (MACRO)             	smpsReturn
(1)  127/   BA61E : F9                                  dc.b    $F9
(1)  128/   BA61F :                     
(1)  129/   BA61F :                     ; FM3 Data
(1)  130/   BA61F :                     SCZ_FM3:
(1)  131/   BA61F : (MACRO)             	smpsAlterNote       $02
(1)  131/   BA61F :  (MACRO-2)                  smpsDetune      $02
(1)  131/   BA61F : E102                        dc.b    $E1,$02
(1)  132/   BA621 : (MACRO)             	smpsSetvoice        $01
(1)  132/   BA621 :  (MACRO-2)                  smpsFMvoice $01
(1)  132/   BA621 : EF01                                dc.b    $EF,$01
(1)  133/   BA623 : 8006 BC03 BDBC 0CBF 	dc.b	nRst, $06, nB4, $03, nC5, nB4, $0C, nD5, $03, nE5, nD5, $0C
            BA62B : 03C1 BF0C         
(1)  134/   BA62F : C403 C6C4 30        	dc.b	nG5, $03, nA5, nG5, $30
(1)  135/   BA634 :                     
(1)  136/   BA634 :                     SCZ_Jump00:
(1)  137/   BA634 : (MACRO)             	smpsSetvoice        $05
(1)  137/   BA634 :  (MACRO-2)                  smpsFMvoice $05
(1)  137/   BA634 : EF05                                dc.b    $EF,$05
(1)  138/   BA636 : (MACRO)             	smpsAlterVol        $12
(1)  138/   BA636 : E612                        dc.b    $E6,$12
(1)  139/   BA638 : 8012 CD03 CFD0 06CF 	dc.b	nRst, $12, nE6, $03, nFs6, nG6, $06, nFs6, nE6, nD6, nB5, $18
            BA640 : CDCB C818         
(1)  140/   BA644 : (MACRO)             	smpsSetvoice        $01
(1)  140/   BA644 :  (MACRO-2)                  smpsFMvoice $01
(1)  140/   BA644 : EF01                                dc.b    $EF,$01
(1)  141/   BA646 : (MACRO)             	smpsAlterVol        $EE
(1)  141/   BA646 : E6EE                        dc.b    $E6,$EE
(1)  142/   BA648 : (MACRO)             	smpsNoteFill        $0B
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  142/   BA648 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  142/   BA648 : E80B                                dc.b    $E8,$0B
(1)  143/   BA64A : C406 BFC1 03C4 06   	dc.b	nG5, $06, nD5, nE5, $03, nG5, $06
(1)  144/   BA651 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  144/   BA651 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  144/   BA651 : E800                                dc.b    $E8,$00
(1)  145/   BA653 : 15                  	dc.b	$15
(1)  146/   BA654 : (MACRO)             	smpsSetvoice        $05
(1)  146/   BA654 :  (MACRO-2)                  smpsFMvoice $05
(1)  146/   BA654 : EF05                                dc.b    $EF,$05
(1)  147/   BA656 : (MACRO)             	smpsAlterVol        $12
(1)  147/   BA656 : E612                        dc.b    $E6,$12
(1)  148/   BA658 : CD03 D0D2 06D0 CFCD 	dc.b	nE6, $03, nG6, nA6, $06, nG6, nFs6, nE6, nD6, $03, nE6, nD6
            BA660 : CB03 CDCB         
(1)  149/   BA664 : C80F                	dc.b	nB5, $0F
(1)  150/   BA666 : (MACRO)             	smpsSetvoice        $01
(1)  150/   BA666 :  (MACRO-2)                  smpsFMvoice $01
(1)  150/   BA666 : EF01                                dc.b    $EF,$01
(1)  151/   BA668 : (MACRO)             	smpsAlterVol        $EE
(1)  151/   BA668 : E6EE                        dc.b    $E6,$EE
(1)  152/   BA66A : C60C C8C4 12        	dc.b	nA5, $0C, nB5, nG5, $12
(1)  153/   BA66F : (MACRO)             	smpsSetvoice        $05
(1)  153/   BA66F :  (MACRO-2)                  smpsFMvoice $05
(1)  153/   BA66F : EF05                                dc.b    $EF,$05
(1)  154/   BA671 : (MACRO)             	smpsAlterVol        $12
(1)  154/   BA671 : E612                        dc.b    $E6,$12
(1)  155/   BA673 : CD03 D0CF 06CB C8CD 	dc.b	nE6, $03, nG6, nFs6, $06, nD6, nB5, nE6, nD6, $18
            BA67B : CB18               
(1)  156/   BA67D : (MACRO)             	smpsSetvoice        $01
(1)  156/   BA67D :  (MACRO-2)                  smpsFMvoice $01
(1)  156/   BA67D : EF01                                dc.b    $EF,$01
(1)  157/   BA67F : (MACRO)             	smpsAlterVol        $EE
(1)  157/   BA67F : E6EE                        dc.b    $E6,$EE
(1)  158/   BA681 : (MACRO)             	smpsNoteFill        $0B
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  158/   BA681 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  158/   BA681 : E80B                                dc.b    $E8,$0B
(1)  159/   BA683 : C406 BFC1 03C4 06   	dc.b	nG5, $06, nD5, nE5, $03, nG5, $06
(1)  160/   BA68A : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  160/   BA68A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  160/   BA68A : E800                                dc.b    $E8,$00
(1)  161/   BA68C : 15                  	dc.b	$15
(1)  162/   BA68D : (MACRO)             	smpsSetvoice        $05
(1)  162/   BA68D :  (MACRO-2)                  smpsFMvoice $05
(1)  162/   BA68D : EF05                                dc.b    $EF,$05
(1)  163/   BA68F : (MACRO)             	smpsAlterVol        $12
(1)  163/   BA68F : E612                        dc.b    $E6,$12
(1)  164/   BA691 : CD03 D0D2 06D0 CFCD 	dc.b	nE6, $03, nG6, nA6, $06, nG6, nFs6, nE6, nD6, $03, nE6
            BA699 : CB03 CD            
(1)  165/   BA69C : (MACRO)             	smpsSetvoice        $01
(1)  165/   BA69C :  (MACRO-2)                  smpsFMvoice $01
(1)  165/   BA69C : EF01                                dc.b    $EF,$01
(1)  166/   BA69E : (MACRO)             	smpsAlterVol        $EE
(1)  166/   BA69E : E6EE                        dc.b    $E6,$EE
(1)  167/   BA6A0 : BC03 BDBC 0CBF 03C1 	dc.b	nB4, $03, nC5, nB4, $0C, nD5, $03, nE5, nD5, $0C, nG5, $03
            BA6A8 : BF0C C403         
(1)  168/   BA6AC : C6                  	dc.b	nA5
(1)  169/   BA6AD : (MACRO)             	smpsAlterVol        $FC
(1)  169/   BA6AD : E6FC                        dc.b    $E6,$FC
(1)  170/   BA6AF : (MACRO)             	smpsCall            SCZ_Call03
(1)  170/   BA6AF : F8                          dc.b    $F8
(1)  170/   BA6B0 : C6A6                                dc.w    z80_ptr(SCZ_CALL03)
(1)  171/   BA6B2 : C42A C603 C833      	dc.b	nG5, $2A, nA5, $03, nB5, $33
(1)  172/   BA6B8 : (MACRO)             	smpsCall            SCZ_Call03
(1)  172/   BA6B8 : F8                          dc.b    $F8
(1)  172/   BA6B9 : C6A6                                dc.w    z80_ptr(SCZ_CALL03)
(1)  173/   BA6BB : C424 C60C C430      	dc.b	nG5, $24, nA5, $0C, nG5, $30
(1)  174/   BA6C1 : (MACRO)             	smpsAlterVol        $04
(1)  174/   BA6C1 : E604                        dc.b    $E6,$04
(1)  175/   BA6C3 : (MACRO)             	smpsJump            SCZ_Jump00
(1)  175/   BA6C3 : F6                          dc.b    $F6
(1)  175/   BA6C4 : 34A6                                dc.w    z80_ptr(SCZ_JUMP00)
(1)  176/   BA6C6 :                     
(1)  177/   BA6C6 :                     SCZ_Call03:
(1)  178/   BA6C6 : 8012 C403 C6C8 0CC9 	dc.b	nRst, $12, nG5, $03, nA5, nB5, $0C, nC6, $03, nB5, nC6, nD6
            BA6CE : 03C8 C9CB         
(1)  179/   BA6D2 : 27CD 0C             	dc.b	$27, nE6, $0C
(1)  180/   BA6D5 : (MACRO)             	smpsReturn
(1)  180/   BA6D5 : F9                                  dc.b    $F9
(1)  181/   BA6D6 :                     
(1)  182/   BA6D6 :                     ; FM2 Data
(1)  183/   BA6D6 :                     SCZ_FM2:
(1)  184/   BA6D6 : (MACRO)             	smpsSetvoice        $02
(1)  184/   BA6D6 :  (MACRO-2)                  smpsFMvoice $02
(1)  184/   BA6D6 : EF02                                dc.b    $EF,$02
(1)  185/   BA6D8 : 8051 AC03 AE06 B0   	dc.b	nRst, $51, nG3, $03, nA3, $06, nB3
(1)  186/   BA6DF :                     
(1)  187/   BA6DF :                     SCZ_Loop02:
(1)  188/   BA6DF : B103 0F03 0CB8 03BA 	dc.b	nC4, $03, $0F, $03, $0C, nG4, $03, nA4, $06, nG4, nG3, $03
            BA6E7 : 06B8 AC03         
(1)  189/   BA6EB : 0F0F B303 B506 B3   	dc.b	$0F, $0F, nD4, $03, nE4, $06, nD4
(1)  190/   BA6F2 : (MACRO)             	smpsLoop            $00, $04, SCZ_Loop02
(1)  190/   BA6F2 : F7                          dc.b    $F7
(1)  190/   BA6F3 : 0004                        dc.b    $00,$04
(1)  190/   BA6F5 : DFA6                                dc.w    z80_ptr(SCZ_LOOP02)
(1)  191/   BA6F7 : (MACRO)             	smpsCall            SCZ_Call02
(1)  191/   BA6F7 : F8                          dc.b    $F8
(1)  191/   BA6F8 : 16A7                                dc.w    z80_ptr(SCZ_CALL02)
(1)  192/   BA6FA : AE03 0F0C 0909 AC03 	dc.b	nA3, $03, $0F, $0C, $09, $09, nG3, $03, $0F, $0C, $06, nA3
            BA702 : 0F0C 06AE         
(1)  193/   BA706 : B0                  	dc.b	nB3
(1)  194/   BA707 : (MACRO)             	smpsCall            SCZ_Call02
(1)  194/   BA707 : F8                          dc.b    $F8
(1)  194/   BA708 : 16A7                                dc.w    z80_ptr(SCZ_CALL02)
(1)  195/   BA70A : AE03 0F0C 06B0 AEAC 	dc.b	nA3, $03, $0F, $0C, $06, nB3, nA3, nG3, $30
            BA712 : 30               
(1)  196/   BA713 : (MACRO)             	smpsJump            SCZ_Loop02
(1)  196/   BA713 : F6                          dc.b    $F6
(1)  196/   BA714 : DFA6                                dc.w    z80_ptr(SCZ_LOOP02)
(1)  197/   BA716 :                     
(1)  198/   BA716 :                     SCZ_Call02:
(1)  199/   BA716 : B103 0F0C 0909 B003 	dc.b	nC4, $03, $0F, $0C, $09, $09, nB3, $03, nB3, $0F, $0C, $06
            BA71E : B00F 0C06         
(1)  200/   BA722 : B1B0                	dc.b	nC4, nB3
(1)  201/   BA724 : (MACRO)             	smpsReturn
(1)  201/   BA724 : F9                                  dc.b    $F9
(1)  202/   BA725 :                     
(1)  203/   BA725 :                     ; DAC Data
(1)  204/   BA725 :                     SCZ_DAC:
(1)  205/   BA725 : (MACRO)             	smpsCall            SCZ_Call00
(1)  205/   BA725 : F8                          dc.b    $F8
(1)  205/   BA726 : 51A7                                dc.w    z80_ptr(SCZ_CALL00)
(1)  206/   BA728 : (MACRO)             	smpsLoop            $00, $02, SCZ_DAC
(1)  206/   BA728 : F7                          dc.b    $F7
(1)  206/   BA729 : 0002                        dc.b    $00,$02
(1)  206/   BA72B : 25A7                                dc.w    z80_ptr(SCZ_DAC)
(1)  207/   BA72D :                     
(1)  208/   BA72D :                     SCZ_Loop00:
(1)  209/   BA72D : (MACRO)             	smpsCall            SCZ_Call00
(1)  209/   BA72D : F8                          dc.b    $F8
(1)  209/   BA72E : 51A7                                dc.w    z80_ptr(SCZ_CALL00)
(1)  210/   BA730 : (MACRO)             	smpsLoop            $00, $03, SCZ_Loop00
(1)  210/   BA730 : F7                          dc.b    $F7
(1)  210/   BA731 : 0003                        dc.b    $00,$03
(1)  210/   BA733 : 2DA7                                dc.w    z80_ptr(SCZ_LOOP00)
(1)  211/   BA735 : (MACRO)             	smpsCall            SCZ_Call01
(1)  211/   BA735 : F8                          dc.b    $F8
(1)  211/   BA736 : 5FA7                                dc.w    z80_ptr(SCZ_CALL01)
(1)  212/   BA738 : (MACRO)             	smpsLoop            $01, $03, SCZ_Loop00
(1)  212/   BA738 : F7                          dc.b    $F7
(1)  212/   BA739 : 0103                        dc.b    $01,$03
(1)  212/   BA73B : 2DA7                                dc.w    z80_ptr(SCZ_LOOP00)
(1)  213/   BA73D :                     
(1)  214/   BA73D :                     SCZ_Loop01:
(1)  215/   BA73D : (MACRO)             	smpsCall            SCZ_Call00
(1)  215/   BA73D : F8                          dc.b    $F8
(1)  215/   BA73E : 51A7                                dc.w    z80_ptr(SCZ_CALL00)
(1)  216/   BA740 : (MACRO)             	smpsLoop            $00, $03, SCZ_Loop01
(1)  216/   BA740 : F7                          dc.b    $F7
(1)  216/   BA741 : 0003                        dc.b    $00,$03
(1)  216/   BA743 : 3DA7                                dc.w    z80_ptr(SCZ_LOOP01)
(1)  217/   BA745 : 810C 8080 8206 8203 	dc.b	dKick, $0C, nRst, nRst, dSnare, $06, dSnare, $03, dSnare
            BA74D : 82               
(1)  218/   BA74E : (MACRO)             	smpsJump            SCZ_Loop00
(1)  218/   BA74E : F6                          dc.b    $F6
(1)  218/   BA74F : 2DA7                                dc.w    z80_ptr(SCZ_LOOP00)
(1)  219/   BA751 :                     
(1)  220/   BA751 :                     SCZ_Call00:
(1)  221/   BA751 : 8103 8180 0682 8180 	dc.b	dKick, $03, dKick, nRst, $06, dSnare, dKick, nRst, dKick, dSnare, $03, dKick
            BA759 : 8182 0381         
(1)  222/   BA75D : 09                  	dc.b	$09
(1)  223/   BA75E : (MACRO)             	smpsReturn
(1)  223/   BA75E : F9                                  dc.b    $F9
(1)  224/   BA75F :                     
(1)  225/   BA75F :                     SCZ_Call01:
(1)  226/   BA75F : 8103 8180 0682 8180 	dc.b	dKick, $03, dKick, nRst, $06, dSnare, dKick, nRst, dKick, dSnare, dSnare, $03
            BA767 : 8182 8203         
(1)  227/   BA76B : 82                  	dc.b	dSnare
(1)  228/   BA76C : (MACRO)             	smpsReturn
(1)  228/   BA76C : F9                                  dc.b    $F9
(1)  229/   BA76D :                     
(1)  230/   BA76D :                     ; PSG1 Data
(1)  231/   BA76D :                     SCZ_PSG1:
(1)  232/   BA76D : 8060                	dc.b	nRst, $60
(1)  233/   BA76F :                     
(1)  234/   BA76F :                     SCZ_Loop05:
(1)  235/   BA76F : B830 B7             	dc.b	nG4, $30, nFs4
(1)  236/   BA772 : (MACRO)             	smpsLoop            $00, $04, SCZ_Loop05
(1)  236/   BA772 : F7                          dc.b    $F7
(1)  236/   BA773 : 0004                        dc.b    $00,$04
(1)  236/   BA775 : 6FA7                                dc.w    z80_ptr(SCZ_LOOP05)
(1)  237/   BA777 : (MACRO)             	smpsPSGAlterVol     $FE
(1)  237/   BA777 : ECFE                        dc.b    $EC,$FE
(1)  238/   BA779 : B803 0306 8024 B703 	dc.b	nG4, $03, $03, $06, nRst, $24, nFs4, $03, $03, $06, nRst, $24
            BA781 : 0306 8024         
(1)  239/   BA785 : B503 0306 8024 B303 	dc.b	nE4, $03, $03, $06, nRst, $24, nD4, $03, $03, $06, nRst, $18
            BA78D : 0306 8018         
(1)  240/   BA791 : B506 B7B8 0303 0680 	dc.b	nE4, $06, nFs4, nG4, $03, $03, $06, nRst, $24, nFs4, $03, $03
            BA799 : 24B7 0303         
(1)  241/   BA79D : 0680 24B5 0303 0680 	dc.b	$06, nRst, $24, nE4, $03, $03, $06, nRst, $24, nFs4, $30
            BA7A5 : 24B7 30            
(1)  242/   BA7A8 : (MACRO)             	smpsPSGAlterVol     $02
(1)  242/   BA7A8 : EC02                        dc.b    $EC,$02
(1)  243/   BA7AA : (MACRO)             	smpsJump            SCZ_Loop05
(1)  243/   BA7AA : F6                          dc.b    $F6
(1)  243/   BA7AB : 6FA7                                dc.w    z80_ptr(SCZ_LOOP05)
(1)  244/   BA7AD :                     
(1)  245/   BA7AD :                     ; PSG2 Data
(1)  246/   BA7AD :                     SCZ_PSG2:
(1)  247/   BA7AD : 8060                	dc.b	nRst, $60
(1)  248/   BA7AF : (MACRO)             	smpsPSGvoice        fTone_08
(1)  248/   BA7AF : F508                        dc.b    $F5,FTONE_08
(1)  249/   BA7B1 :                     
(1)  250/   BA7B1 :                     SCZ_Jump05:
(1)  251/   BA7B1 : 8012 CB03 CBCB 06CB 	dc.b	nRst, $12, nD6, $03, nD6, nD6, $06, nD6, nD6, nD6, nD6, $30
            BA7B9 : CBCB CB30         
(1)  252/   BA7BD : 8012 CB03 CBCB 06CB 	dc.b	nRst, $12, nD6, $03, nD6, nD6, $06, nD6, nD6, nD6, nD6, $03
            BA7C5 : CBCB CB03         
(1)  253/   BA7C9 : CBCB CB27 8012 CB03 	dc.b	nD6, nD6, nD6, $27, nRst, $12, nD6, $03, nD6, nD6, $06, nD6
            BA7D1 : CBCB 06CB         
(1)  254/   BA7D5 : CBCB CB30 8012 CB03 	dc.b	nD6, nD6, nD6, $30, nRst, $12, nD6, $03, nD6, nD6, $06, nD6
            BA7DD : CBCB 06CB         
(1)  255/   BA7E1 : CBCB CB03 CBCB CB27 	dc.b	nD6, nD6, nD6, $03, nD6, nD6, nD6, $27
(1)  256/   BA7E9 : (MACRO)             	smpsPSGAlterVol     $01
(1)  256/   BA7E9 : EC01                        dc.b    $EC,$01
(1)  257/   BA7EB : BC03 0306 8024 BA03 	dc.b	nB4, $03, $03, $06, nRst, $24, nA4, $03, $03, $06, nRst, $24
            BA7F3 : 0306 8024         
(1)  258/   BA7F7 : B803 0306 8024 B703 	dc.b	nG4, $03, $03, $06, nRst, $24, nFs4, $03, $03, $06, nRst, $18
            BA7FF : 0306 8018         
(1)  259/   BA803 : B806 BABC 0303 0680 	dc.b	nG4, $06, nA4, nB4, $03, $03, $06, nRst, $24, nA4, $03, $03
            BA80B : 24BA 0303         
(1)  260/   BA80F : 0680 24B8 0303 0680 	dc.b	$06, nRst, $24, nG4, $03, $03, $06, nRst, $24, nD4, $30
            BA817 : 24B3 30            
(1)  261/   BA81A : (MACRO)             	smpsPSGAlterVol     $FF
(1)  261/   BA81A : ECFF                        dc.b    $EC,$FF
(1)  262/   BA81C : (MACRO)             	smpsJump            SCZ_Jump05
(1)  262/   BA81C : F6                          dc.b    $F6
(1)  262/   BA81D : B1A7                                dc.w    z80_ptr(SCZ_JUMP05)
(1)  263/   BA81F :                     
(1)  264/   BA81F :                     ; PSG3 Data
(1)  265/   BA81F :                     SCZ_PSG3:
(1)  266/   BA81F : (MACRO)             	smpsPSGform         $E7
(1)  266/   BA81F : F3E7                        dc.b    $F3,$E7
(1)  267/   BA821 : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  267/   BA821 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  267/   BA821 : E809                                dc.b    $E8,$09
(1)  268/   BA823 :                     
(1)  269/   BA823 :                     SCZ_Jump04:
(1)  270/   BA823 : C70C                	dc.b	nMaxPSG, $0C
(1)  271/   BA825 : (MACRO)             	smpsJump            SCZ_Jump04
(1)  271/   BA825 : F6                          dc.b    $F6
(1)  271/   BA826 : 23A8                                dc.w    z80_ptr(SCZ_JUMP04)
(1)  272/   BA828 :                     
(1)  273/   BA828 :                     SCZ_Voices:
(1)  274/   BA828 :                     ;	Voice $00
(1)  275/   BA828 :                     ;	$02
(1)  276/   BA828 :                     ;	$62, $01, $34, $01, 	$59, $59, $59, $51, 	$04, $04, $04, $07
(1)  277/   BA828 :                     ;	$01, $01, $01, $01, 	$12, $12, $12, $17, 	$1E, $19, $25, $80
(1)  278/   BA828 : (MACRO)             	smpsVcAlgorithm     $02
(1)  278/   BA828 : =$2                 vcAlgorithm set $02
(1)  279/   BA828 : (MACRO)             	smpsVcFeedback      $00
(1)  279/   BA828 : =$0                 vcFeedback set $00
(1)  280/   BA828 : (MACRO)             	smpsVcUnusedBits    $00
(1)  280/   BA828 : =$0                 vcUnusedBits set $00
(1)  280/   BA828 : =$0                 vcD1R1Unk set 0
(1)  280/   BA828 : =$0                 vcD1R2Unk set 0
(1)  280/   BA828 : =$0                 vcD1R3Unk set 0
(1)  280/   BA828 : =$0                 vcD1R4Unk set 0
(1)  281/   BA828 : (MACRO)             	smpsVcDetune        $00, $03, $00, $06
(1)  281/   BA828 : =$0                 vcDT1 set $00
(1)  281/   BA828 : =$3                 vcDT2 set $03
(1)  281/   BA828 : =$0                 vcDT3 set $00
(1)  281/   BA828 : =$6                 vcDT4 set $06
(1)  282/   BA828 : (MACRO)             	smpsVcCoarseFreq    $01, $04, $01, $02
(1)  282/   BA828 : =$1                 vcCF1 set $01
(1)  282/   BA828 : =$4                 vcCF2 set $04
(1)  282/   BA828 : =$1                 vcCF3 set $01
(1)  282/   BA828 : =$2                 vcCF4 set $02
(1)  283/   BA828 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  283/   BA828 : =$1                 vcRS1 set $01
(1)  283/   BA828 : =$1                 vcRS2 set $01
(1)  283/   BA828 : =$1                 vcRS3 set $01
(1)  283/   BA828 : =$1                 vcRS4 set $01
(1)  284/   BA828 : (MACRO)             	smpsVcAttackRate    $11, $19, $19, $19
(1)  284/   BA828 : =$11                vcAR1 set $11
(1)  284/   BA828 : =$19                vcAR2 set $19
(1)  284/   BA828 : =$19                vcAR3 set $19
(1)  284/   BA828 : =$19                vcAR4 set $19
(1)  285/   BA828 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  285/   BA828 : =$0                 vcAM1 set $00<<5
(1)  285/   BA828 : =$0                 vcAM2 set $00<<5
(1)  285/   BA828 : =$0                 vcAM3 set $00<<5
(1)  285/   BA828 : =$0                 vcAM4 set $00<<5
(1)  286/   BA828 : (MACRO)             	smpsVcDecayRate1    $07, $04, $04, $04
(1)  286/   BA828 : =$7                 vcD1R1 set $07
(1)  286/   BA828 : =$4                 vcD1R2 set $04
(1)  286/   BA828 : =$4                 vcD1R3 set $04
(1)  286/   BA828 : =$4                 vcD1R4 set $04
(1)  287/   BA828 : (MACRO)             	smpsVcDecayRate2    $01, $01, $01, $01
(1)  287/   BA828 : =$1                 vcD2R1 set $01
(1)  287/   BA828 : =$1                 vcD2R2 set $01
(1)  287/   BA828 : =$1                 vcD2R3 set $01
(1)  287/   BA828 : =$1                 vcD2R4 set $01
(1)  288/   BA828 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(1)  288/   BA828 : =$1                 vcDL1 set $01
(1)  288/   BA828 : =$1                 vcDL2 set $01
(1)  288/   BA828 : =$1                 vcDL3 set $01
(1)  288/   BA828 : =$1                 vcDL4 set $01
(1)  289/   BA828 : (MACRO)             	smpsVcReleaseRate   $07, $02, $02, $02
(1)  289/   BA828 : =$7                 vcRR1 set $07
(1)  289/   BA828 : =$2                 vcRR2 set $02
(1)  289/   BA828 : =$2                 vcRR3 set $02
(1)  289/   BA828 : =$2                 vcRR4 set $02
(1)  290/   BA828 : (MACRO)             	smpsVcTotalLevel    $00, $25, $19, $1E
(1)  290/   BA828 : =$0                 vcTL1 set $00
(1)  290/   BA828 : =$25                vcTL2 set $25
(1)  290/   BA828 : =$19                vcTL3 set $19
(1)  290/   BA828 : =$1E                vcTL4 set $1E
(1)  290/   BA828 : 02                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  290/   BA829 :                     ;   0     1     2     3     4     5     6     7
(1)  290/   BA829 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  290/   BA829 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  290/   BA829 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  290/   BA829 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  290/   BA829 : =$80                vcTLMask1 set $80
(1)  290/   BA829 :                     
(1)  290/   BA829 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  290/   BA829 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  290/   BA829 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  290/   BA829 : =$80                vcTLMask1 set $80
(1)  290/   BA829 : =$0                 vcTL1 set vcTL1&$7F
(1)  290/   BA829 : =$25                vcTL2 set vcTL2&$7F
(1)  290/   BA829 : =$19                vcTL3 set vcTL3&$7F
(1)  290/   BA829 : =$1E                vcTL4 set vcTL4&$7F
(1)  290/   BA829 :                     
(1)  290/   BA829 : 6201 3401                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  290/   BA82D : 5959 5951                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  290/   BA831 : 0404 0407                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  290/   BA835 : 0101 0101                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  290/   BA839 : 1212 1217                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  290/   BA83D : 1E19 2580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  291/   BA841 :                     
(1)  292/   BA841 :                     ;	Voice $01
(1)  293/   BA841 :                     ;	$3A
(1)  294/   BA841 :                     ;	$11, $1A, $00, $11, 	$89, $59, $4F, $4F, 	$0A, $0D, $06, $09
(1)  295/   BA841 :                     ;	$00, $00, $00, $01, 	$1F, $FF, $0F, $5F, 	$20, $2E, $3B, $80
(1)  296/   BA841 : (MACRO)             	smpsVcAlgorithm     $02
(1)  296/   BA841 : =$2                 vcAlgorithm set $02
(1)  297/   BA841 : (MACRO)             	smpsVcFeedback      $07
(1)  297/   BA841 : =$7                 vcFeedback set $07
(1)  298/   BA841 : (MACRO)             	smpsVcUnusedBits    $00
(1)  298/   BA841 : =$0                 vcUnusedBits set $00
(1)  298/   BA841 : =$0                 vcD1R1Unk set 0
(1)  298/   BA841 : =$0                 vcD1R2Unk set 0
(1)  298/   BA841 : =$0                 vcD1R3Unk set 0
(1)  298/   BA841 : =$0                 vcD1R4Unk set 0
(1)  299/   BA841 : (MACRO)             	smpsVcDetune        $01, $00, $01, $01
(1)  299/   BA841 : =$1                 vcDT1 set $01
(1)  299/   BA841 : =$0                 vcDT2 set $00
(1)  299/   BA841 : =$1                 vcDT3 set $01
(1)  299/   BA841 : =$1                 vcDT4 set $01
(1)  300/   BA841 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $0A, $01
(1)  300/   BA841 : =$1                 vcCF1 set $01
(1)  300/   BA841 : =$0                 vcCF2 set $00
(1)  300/   BA841 : =$A                 vcCF3 set $0A
(1)  300/   BA841 : =$1                 vcCF4 set $01
(1)  301/   BA841 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $02
(1)  301/   BA841 : =$1                 vcRS1 set $01
(1)  301/   BA841 : =$1                 vcRS2 set $01
(1)  301/   BA841 : =$1                 vcRS3 set $01
(1)  301/   BA841 : =$2                 vcRS4 set $02
(1)  302/   BA841 : (MACRO)             	smpsVcAttackRate    $0F, $0F, $19, $09
(1)  302/   BA841 : =$F                 vcAR1 set $0F
(1)  302/   BA841 : =$F                 vcAR2 set $0F
(1)  302/   BA841 : =$19                vcAR3 set $19
(1)  302/   BA841 : =$9                 vcAR4 set $09
(1)  303/   BA841 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  303/   BA841 : =$0                 vcAM1 set $00<<5
(1)  303/   BA841 : =$0                 vcAM2 set $00<<5
(1)  303/   BA841 : =$0                 vcAM3 set $00<<5
(1)  303/   BA841 : =$0                 vcAM4 set $00<<5
(1)  304/   BA841 : (MACRO)             	smpsVcDecayRate1    $09, $06, $0D, $0A
(1)  304/   BA841 : =$9                 vcD1R1 set $09
(1)  304/   BA841 : =$6                 vcD1R2 set $06
(1)  304/   BA841 : =$D                 vcD1R3 set $0D
(1)  304/   BA841 : =$A                 vcD1R4 set $0A
(1)  305/   BA841 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1)  305/   BA841 : =$1                 vcD2R1 set $01
(1)  305/   BA841 : =$0                 vcD2R2 set $00
(1)  305/   BA841 : =$0                 vcD2R3 set $00
(1)  305/   BA841 : =$0                 vcD2R4 set $00
(1)  306/   BA841 : (MACRO)             	smpsVcDecayLevel    $05, $00, $0F, $01
(1)  306/   BA841 : =$5                 vcDL1 set $05
(1)  306/   BA841 : =$0                 vcDL2 set $00
(1)  306/   BA841 : =$F                 vcDL3 set $0F
(1)  306/   BA841 : =$1                 vcDL4 set $01
(1)  307/   BA841 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  307/   BA841 : =$F                 vcRR1 set $0F
(1)  307/   BA841 : =$F                 vcRR2 set $0F
(1)  307/   BA841 : =$F                 vcRR3 set $0F
(1)  307/   BA841 : =$F                 vcRR4 set $0F
(1)  308/   BA841 : (MACRO)             	smpsVcTotalLevel    $00, $3B, $2E, $20
(1)  308/   BA841 : =$0                 vcTL1 set $00
(1)  308/   BA841 : =$3B                vcTL2 set $3B
(1)  308/   BA841 : =$2E                vcTL3 set $2E
(1)  308/   BA841 : =$20                vcTL4 set $20
(1)  308/   BA841 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  308/   BA842 :                     ;   0     1     2     3     4     5     6     7
(1)  308/   BA842 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  308/   BA842 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  308/   BA842 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  308/   BA842 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  308/   BA842 : =$80                vcTLMask1 set $80
(1)  308/   BA842 :                     
(1)  308/   BA842 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  308/   BA842 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  308/   BA842 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  308/   BA842 : =$80                vcTLMask1 set $80
(1)  308/   BA842 : =$0                 vcTL1 set vcTL1&$7F
(1)  308/   BA842 : =$3B                vcTL2 set vcTL2&$7F
(1)  308/   BA842 : =$2E                vcTL3 set vcTL3&$7F
(1)  308/   BA842 : =$20                vcTL4 set vcTL4&$7F
(1)  308/   BA842 :                     
(1)  308/   BA842 : 111A 0011                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  308/   BA846 : 8959 4F4F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  308/   BA84A : 0A0D 0609                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  308/   BA84E : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  308/   BA852 : 1FFF 0F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  308/   BA856 : 202E 3B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  309/   BA85A :                     
(1)  310/   BA85A :                     ;	Voice $02
(1)  311/   BA85A :                     ;	$3D
(1)  312/   BA85A :                     ;	$01, $42, $02, $22, 	$1F, $1F, $1F, $1F, 	$07, $00, $00, $00
(1)  313/   BA85A :                     ;	$00, $0E, $0E, $0E, 	$24, $0F, $0F, $0F, 	$1C, $89, $89, $89
(1)  314/   BA85A : (MACRO)             	smpsVcAlgorithm     $05
(1)  314/   BA85A : =$5                 vcAlgorithm set $05
(1)  315/   BA85A : (MACRO)             	smpsVcFeedback      $07
(1)  315/   BA85A : =$7                 vcFeedback set $07
(1)  316/   BA85A : (MACRO)             	smpsVcUnusedBits    $00
(1)  316/   BA85A : =$0                 vcUnusedBits set $00
(1)  316/   BA85A : =$0                 vcD1R1Unk set 0
(1)  316/   BA85A : =$0                 vcD1R2Unk set 0
(1)  316/   BA85A : =$0                 vcD1R3Unk set 0
(1)  316/   BA85A : =$0                 vcD1R4Unk set 0
(1)  317/   BA85A : (MACRO)             	smpsVcDetune        $02, $00, $04, $00
(1)  317/   BA85A : =$2                 vcDT1 set $02
(1)  317/   BA85A : =$0                 vcDT2 set $00
(1)  317/   BA85A : =$4                 vcDT3 set $04
(1)  317/   BA85A : =$0                 vcDT4 set $00
(1)  318/   BA85A : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $01
(1)  318/   BA85A : =$2                 vcCF1 set $02
(1)  318/   BA85A : =$2                 vcCF2 set $02
(1)  318/   BA85A : =$2                 vcCF3 set $02
(1)  318/   BA85A : =$1                 vcCF4 set $01
(1)  319/   BA85A : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  319/   BA85A : =$0                 vcRS1 set $00
(1)  319/   BA85A : =$0                 vcRS2 set $00
(1)  319/   BA85A : =$0                 vcRS3 set $00
(1)  319/   BA85A : =$0                 vcRS4 set $00
(1)  320/   BA85A : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  320/   BA85A : =$1F                vcAR1 set $1F
(1)  320/   BA85A : =$1F                vcAR2 set $1F
(1)  320/   BA85A : =$1F                vcAR3 set $1F
(1)  320/   BA85A : =$1F                vcAR4 set $1F
(1)  321/   BA85A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  321/   BA85A : =$0                 vcAM1 set $00<<5
(1)  321/   BA85A : =$0                 vcAM2 set $00<<5
(1)  321/   BA85A : =$0                 vcAM3 set $00<<5
(1)  321/   BA85A : =$0                 vcAM4 set $00<<5
(1)  322/   BA85A : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $07
(1)  322/   BA85A : =$0                 vcD1R1 set $00
(1)  322/   BA85A : =$0                 vcD1R2 set $00
(1)  322/   BA85A : =$0                 vcD1R3 set $00
(1)  322/   BA85A : =$7                 vcD1R4 set $07
(1)  323/   BA85A : (MACRO)             	smpsVcDecayRate2    $0E, $0E, $0E, $00
(1)  323/   BA85A : =$E                 vcD2R1 set $0E
(1)  323/   BA85A : =$E                 vcD2R2 set $0E
(1)  323/   BA85A : =$E                 vcD2R3 set $0E
(1)  323/   BA85A : =$0                 vcD2R4 set $00
(1)  324/   BA85A : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $02
(1)  324/   BA85A : =$0                 vcDL1 set $00
(1)  324/   BA85A : =$0                 vcDL2 set $00
(1)  324/   BA85A : =$0                 vcDL3 set $00
(1)  324/   BA85A : =$2                 vcDL4 set $02
(1)  325/   BA85A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $04
(1)  325/   BA85A : =$F                 vcRR1 set $0F
(1)  325/   BA85A : =$F                 vcRR2 set $0F
(1)  325/   BA85A : =$F                 vcRR3 set $0F
(1)  325/   BA85A : =$4                 vcRR4 set $04
(1)  326/   BA85A : (MACRO)             	smpsVcTotalLevel    $09, $09, $09, $1C
(1)  326/   BA85A : =$9                 vcTL1 set $09
(1)  326/   BA85A : =$9                 vcTL2 set $09
(1)  326/   BA85A : =$9                 vcTL3 set $09
(1)  326/   BA85A : =$1C                vcTL4 set $1C
(1)  326/   BA85A : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  326/   BA85B :                     ;   0     1     2     3     4     5     6     7
(1)  326/   BA85B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  326/   BA85B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  326/   BA85B : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  326/   BA85B : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  326/   BA85B : =$80                vcTLMask1 set $80
(1)  326/   BA85B :                     
(1)  326/   BA85B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  326/   BA85B : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  326/   BA85B : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  326/   BA85B : =$80                vcTLMask1 set $80
(1)  326/   BA85B : =$9                 vcTL1 set vcTL1&$7F
(1)  326/   BA85B : =$9                 vcTL2 set vcTL2&$7F
(1)  326/   BA85B : =$9                 vcTL3 set vcTL3&$7F
(1)  326/   BA85B : =$1C                vcTL4 set vcTL4&$7F
(1)  326/   BA85B :                     
(1)  326/   BA85B : 0142 0222                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  326/   BA85F : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  326/   BA863 : 0700 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  326/   BA867 : 000E 0E0E                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  326/   BA86B : 240F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  326/   BA86F : 1C89 8989                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  327/   BA873 :                     
(1)  328/   BA873 :                     ;	Voice $03
(1)  329/   BA873 :                     ;	$04
(1)  330/   BA873 :                     ;	$57, $07, $74, $54, 	$1F, $1B, $1F, $1F, 	$00, $00, $00, $00
(1)  331/   BA873 :                     ;	$06, $0A, $00, $0D, 	$00, $0F, $00, $0F, 	$1A, $98, $25, $8F
(1)  332/   BA873 : (MACRO)             	smpsVcAlgorithm     $04
(1)  332/   BA873 : =$4                 vcAlgorithm set $04
(1)  333/   BA873 : (MACRO)             	smpsVcFeedback      $00
(1)  333/   BA873 : =$0                 vcFeedback set $00
(1)  334/   BA873 : (MACRO)             	smpsVcUnusedBits    $00
(1)  334/   BA873 : =$0                 vcUnusedBits set $00
(1)  334/   BA873 : =$0                 vcD1R1Unk set 0
(1)  334/   BA873 : =$0                 vcD1R2Unk set 0
(1)  334/   BA873 : =$0                 vcD1R3Unk set 0
(1)  334/   BA873 : =$0                 vcD1R4Unk set 0
(1)  335/   BA873 : (MACRO)             	smpsVcDetune        $05, $07, $00, $05
(1)  335/   BA873 : =$5                 vcDT1 set $05
(1)  335/   BA873 : =$7                 vcDT2 set $07
(1)  335/   BA873 : =$0                 vcDT3 set $00
(1)  335/   BA873 : =$5                 vcDT4 set $05
(1)  336/   BA873 : (MACRO)             	smpsVcCoarseFreq    $04, $04, $07, $07
(1)  336/   BA873 : =$4                 vcCF1 set $04
(1)  336/   BA873 : =$4                 vcCF2 set $04
(1)  336/   BA873 : =$7                 vcCF3 set $07
(1)  336/   BA873 : =$7                 vcCF4 set $07
(1)  337/   BA873 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  337/   BA873 : =$0                 vcRS1 set $00
(1)  337/   BA873 : =$0                 vcRS2 set $00
(1)  337/   BA873 : =$0                 vcRS3 set $00
(1)  337/   BA873 : =$0                 vcRS4 set $00
(1)  338/   BA873 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1B, $1F
(1)  338/   BA873 : =$1F                vcAR1 set $1F
(1)  338/   BA873 : =$1F                vcAR2 set $1F
(1)  338/   BA873 : =$1B                vcAR3 set $1B
(1)  338/   BA873 : =$1F                vcAR4 set $1F
(1)  339/   BA873 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  339/   BA873 : =$0                 vcAM1 set $00<<5
(1)  339/   BA873 : =$0                 vcAM2 set $00<<5
(1)  339/   BA873 : =$0                 vcAM3 set $00<<5
(1)  339/   BA873 : =$0                 vcAM4 set $00<<5
(1)  340/   BA873 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  340/   BA873 : =$0                 vcD1R1 set $00
(1)  340/   BA873 : =$0                 vcD1R2 set $00
(1)  340/   BA873 : =$0                 vcD1R3 set $00
(1)  340/   BA873 : =$0                 vcD1R4 set $00
(1)  341/   BA873 : (MACRO)             	smpsVcDecayRate2    $0D, $00, $0A, $06
(1)  341/   BA873 : =$D                 vcD2R1 set $0D
(1)  341/   BA873 : =$0                 vcD2R2 set $00
(1)  341/   BA873 : =$A                 vcD2R3 set $0A
(1)  341/   BA873 : =$6                 vcD2R4 set $06
(1)  342/   BA873 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  342/   BA873 : =$0                 vcDL1 set $00
(1)  342/   BA873 : =$0                 vcDL2 set $00
(1)  342/   BA873 : =$0                 vcDL3 set $00
(1)  342/   BA873 : =$0                 vcDL4 set $00
(1)  343/   BA873 : (MACRO)             	smpsVcReleaseRate   $0F, $00, $0F, $00
(1)  343/   BA873 : =$F                 vcRR1 set $0F
(1)  343/   BA873 : =$0                 vcRR2 set $00
(1)  343/   BA873 : =$F                 vcRR3 set $0F
(1)  343/   BA873 : =$0                 vcRR4 set $00
(1)  344/   BA873 : (MACRO)             	smpsVcTotalLevel    $0F, $25, $18, $1A
(1)  344/   BA873 : =$F                 vcTL1 set $0F
(1)  344/   BA873 : =$25                vcTL2 set $25
(1)  344/   BA873 : =$18                vcTL3 set $18
(1)  344/   BA873 : =$1A                vcTL4 set $1A
(1)  344/   BA873 : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  344/   BA874 :                     ;   0     1     2     3     4     5     6     7
(1)  344/   BA874 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  344/   BA874 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  344/   BA874 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  344/   BA874 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  344/   BA874 : =$80                vcTLMask1 set $80
(1)  344/   BA874 :                     
(1)  344/   BA874 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  344/   BA874 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  344/   BA874 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  344/   BA874 : =$80                vcTLMask1 set $80
(1)  344/   BA874 : =$F                 vcTL1 set vcTL1&$7F
(1)  344/   BA874 : =$25                vcTL2 set vcTL2&$7F
(1)  344/   BA874 : =$18                vcTL3 set vcTL3&$7F
(1)  344/   BA874 : =$1A                vcTL4 set vcTL4&$7F
(1)  344/   BA874 :                     
(1)  344/   BA874 : 5707 7454                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  344/   BA878 : 1F1B 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  344/   BA87C : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  344/   BA880 : 060A 000D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  344/   BA884 : 000F 000F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  344/   BA888 : 1A98 258F                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  345/   BA88C :                     
(1)  346/   BA88C :                     ;	Voice $04
(1)  347/   BA88C :                     ;	$07
(1)  348/   BA88C :                     ;	$06, $7C, $75, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)  349/   BA88C :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$80, $80, $80, $80
(1)  350/   BA88C : (MACRO)             	smpsVcAlgorithm     $07
(1)  350/   BA88C : =$7                 vcAlgorithm set $07
(1)  351/   BA88C : (MACRO)             	smpsVcFeedback      $00
(1)  351/   BA88C : =$0                 vcFeedback set $00
(1)  352/   BA88C : (MACRO)             	smpsVcUnusedBits    $00
(1)  352/   BA88C : =$0                 vcUnusedBits set $00
(1)  352/   BA88C : =$0                 vcD1R1Unk set 0
(1)  352/   BA88C : =$0                 vcD1R2Unk set 0
(1)  352/   BA88C : =$0                 vcD1R3Unk set 0
(1)  352/   BA88C : =$0                 vcD1R4Unk set 0
(1)  353/   BA88C : (MACRO)             	smpsVcDetune        $00, $07, $07, $00
(1)  353/   BA88C : =$0                 vcDT1 set $00
(1)  353/   BA88C : =$7                 vcDT2 set $07
(1)  353/   BA88C : =$7                 vcDT3 set $07
(1)  353/   BA88C : =$0                 vcDT4 set $00
(1)  354/   BA88C : (MACRO)             	smpsVcCoarseFreq    $0A, $05, $0C, $06
(1)  354/   BA88C : =$A                 vcCF1 set $0A
(1)  354/   BA88C : =$5                 vcCF2 set $05
(1)  354/   BA88C : =$C                 vcCF3 set $0C
(1)  354/   BA88C : =$6                 vcCF4 set $06
(1)  355/   BA88C : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  355/   BA88C : =$0                 vcRS1 set $00
(1)  355/   BA88C : =$0                 vcRS2 set $00
(1)  355/   BA88C : =$0                 vcRS3 set $00
(1)  355/   BA88C : =$0                 vcRS4 set $00
(1)  356/   BA88C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  356/   BA88C : =$1F                vcAR1 set $1F
(1)  356/   BA88C : =$1F                vcAR2 set $1F
(1)  356/   BA88C : =$1F                vcAR3 set $1F
(1)  356/   BA88C : =$1F                vcAR4 set $1F
(1)  357/   BA88C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  357/   BA88C : =$0                 vcAM1 set $00<<5
(1)  357/   BA88C : =$0                 vcAM2 set $00<<5
(1)  357/   BA88C : =$0                 vcAM3 set $00<<5
(1)  357/   BA88C : =$0                 vcAM4 set $00<<5
(1)  358/   BA88C : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  358/   BA88C : =$0                 vcD1R1 set $00
(1)  358/   BA88C : =$0                 vcD1R2 set $00
(1)  358/   BA88C : =$0                 vcD1R3 set $00
(1)  358/   BA88C : =$0                 vcD1R4 set $00
(1)  359/   BA88C : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  359/   BA88C : =$0                 vcD2R1 set $00
(1)  359/   BA88C : =$0                 vcD2R2 set $00
(1)  359/   BA88C : =$0                 vcD2R3 set $00
(1)  359/   BA88C : =$0                 vcD2R4 set $00
(1)  360/   BA88C : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  360/   BA88C : =$0                 vcDL1 set $00
(1)  360/   BA88C : =$0                 vcDL2 set $00
(1)  360/   BA88C : =$0                 vcDL3 set $00
(1)  360/   BA88C : =$0                 vcDL4 set $00
(1)  361/   BA88C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  361/   BA88C : =$F                 vcRR1 set $0F
(1)  361/   BA88C : =$F                 vcRR2 set $0F
(1)  361/   BA88C : =$F                 vcRR3 set $0F
(1)  361/   BA88C : =$F                 vcRR4 set $0F
(1)  362/   BA88C : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $00
(1)  362/   BA88C : =$0                 vcTL1 set $00
(1)  362/   BA88C : =$0                 vcTL2 set $00
(1)  362/   BA88C : =$0                 vcTL3 set $00
(1)  362/   BA88C : =$0                 vcTL4 set $00
(1)  362/   BA88C : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  362/   BA88D :                     ;   0     1     2     3     4     5     6     7
(1)  362/   BA88D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  362/   BA88D : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  362/   BA88D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  362/   BA88D : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  362/   BA88D : =$80                vcTLMask1 set $80
(1)  362/   BA88D :                     
(1)  362/   BA88D : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  362/   BA88D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  362/   BA88D : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  362/   BA88D : =$80                vcTLMask1 set $80
(1)  362/   BA88D : =$0                 vcTL1 set vcTL1&$7F
(1)  362/   BA88D : =$0                 vcTL2 set vcTL2&$7F
(1)  362/   BA88D : =$0                 vcTL3 set vcTL3&$7F
(1)  362/   BA88D : =$0                 vcTL4 set vcTL4&$7F
(1)  362/   BA88D :                     
(1)  362/   BA88D : 067C 750A                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  362/   BA891 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  362/   BA895 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  362/   BA899 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  362/   BA89D : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  362/   BA8A1 : 8080 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  363/   BA8A5 :                     
(1)  364/   BA8A5 :                     ;	Voice $05
(1)  365/   BA8A5 :                     ;	$01
(1)  366/   BA8A5 :                     ;	$05, $03, $05, $01, 	$0F, $0E, $CE, $10, 	$05, $02, $0B, $09
(1)  367/   BA8A5 :                     ;	$08, $03, $00, $0A, 	$FF, $3F, $0F, $FF, 	$23, $1A, $21, $83
(1)  368/   BA8A5 : (MACRO)             	smpsVcAlgorithm     $01
(1)  368/   BA8A5 : =$1                 vcAlgorithm set $01
(1)  369/   BA8A5 : (MACRO)             	smpsVcFeedback      $00
(1)  369/   BA8A5 : =$0                 vcFeedback set $00
(1)  370/   BA8A5 : (MACRO)             	smpsVcUnusedBits    $00
(1)  370/   BA8A5 : =$0                 vcUnusedBits set $00
(1)  370/   BA8A5 : =$0                 vcD1R1Unk set 0
(1)  370/   BA8A5 : =$0                 vcD1R2Unk set 0
(1)  370/   BA8A5 : =$0                 vcD1R3Unk set 0
(1)  370/   BA8A5 : =$0                 vcD1R4Unk set 0
(1)  371/   BA8A5 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  371/   BA8A5 : =$0                 vcDT1 set $00
(1)  371/   BA8A5 : =$0                 vcDT2 set $00
(1)  371/   BA8A5 : =$0                 vcDT3 set $00
(1)  371/   BA8A5 : =$0                 vcDT4 set $00
(1)  372/   BA8A5 : (MACRO)             	smpsVcCoarseFreq    $01, $05, $03, $05
(1)  372/   BA8A5 : =$1                 vcCF1 set $01
(1)  372/   BA8A5 : =$5                 vcCF2 set $05
(1)  372/   BA8A5 : =$3                 vcCF3 set $03
(1)  372/   BA8A5 : =$5                 vcCF4 set $05
(1)  373/   BA8A5 : (MACRO)             	smpsVcRateScale     $00, $03, $00, $00
(1)  373/   BA8A5 : =$0                 vcRS1 set $00
(1)  373/   BA8A5 : =$3                 vcRS2 set $03
(1)  373/   BA8A5 : =$0                 vcRS3 set $00
(1)  373/   BA8A5 : =$0                 vcRS4 set $00
(1)  374/   BA8A5 : (MACRO)             	smpsVcAttackRate    $10, $0E, $0E, $0F
(1)  374/   BA8A5 : =$10                vcAR1 set $10
(1)  374/   BA8A5 : =$E                 vcAR2 set $0E
(1)  374/   BA8A5 : =$E                 vcAR3 set $0E
(1)  374/   BA8A5 : =$F                 vcAR4 set $0F
(1)  375/   BA8A5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  375/   BA8A5 : =$0                 vcAM1 set $00<<5
(1)  375/   BA8A5 : =$0                 vcAM2 set $00<<5
(1)  375/   BA8A5 : =$0                 vcAM3 set $00<<5
(1)  375/   BA8A5 : =$0                 vcAM4 set $00<<5
(1)  376/   BA8A5 : (MACRO)             	smpsVcDecayRate1    $09, $0B, $02, $05
(1)  376/   BA8A5 : =$9                 vcD1R1 set $09
(1)  376/   BA8A5 : =$B                 vcD1R2 set $0B
(1)  376/   BA8A5 : =$2                 vcD1R3 set $02
(1)  376/   BA8A5 : =$5                 vcD1R4 set $05
(1)  377/   BA8A5 : (MACRO)             	smpsVcDecayRate2    $0A, $00, $03, $08
(1)  377/   BA8A5 : =$A                 vcD2R1 set $0A
(1)  377/   BA8A5 : =$0                 vcD2R2 set $00
(1)  377/   BA8A5 : =$3                 vcD2R3 set $03
(1)  377/   BA8A5 : =$8                 vcD2R4 set $08
(1)  378/   BA8A5 : (MACRO)             	smpsVcDecayLevel    $0F, $00, $03, $0F
(1)  378/   BA8A5 : =$F                 vcDL1 set $0F
(1)  378/   BA8A5 : =$0                 vcDL2 set $00
(1)  378/   BA8A5 : =$3                 vcDL3 set $03
(1)  378/   BA8A5 : =$F                 vcDL4 set $0F
(1)  379/   BA8A5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  379/   BA8A5 : =$F                 vcRR1 set $0F
(1)  379/   BA8A5 : =$F                 vcRR2 set $0F
(1)  379/   BA8A5 : =$F                 vcRR3 set $0F
(1)  379/   BA8A5 : =$F                 vcRR4 set $0F
(1)  380/   BA8A5 : (MACRO)             	smpsVcTotalLevel    $03, $21, $1A, $23
(1)  380/   BA8A5 : =$3                 vcTL1 set $03
(1)  380/   BA8A5 : =$21                vcTL2 set $21
(1)  380/   BA8A5 : =$1A                vcTL3 set $1A
(1)  380/   BA8A5 : =$23                vcTL4 set $23
(1)  380/   BA8A5 : 01                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  380/   BA8A6 :                     ;   0     1     2     3     4     5     6     7
(1)  380/   BA8A6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  380/   BA8A6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  380/   BA8A6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  380/   BA8A6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  380/   BA8A6 : =$80                vcTLMask1 set $80
(1)  380/   BA8A6 :                     
(1)  380/   BA8A6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  380/   BA8A6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  380/   BA8A6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  380/   BA8A6 : =$80                vcTLMask1 set $80
(1)  380/   BA8A6 : =$3                 vcTL1 set vcTL1&$7F
(1)  380/   BA8A6 : =$21                vcTL2 set vcTL2&$7F
(1)  380/   BA8A6 : =$1A                vcTL3 set vcTL3&$7F
(1)  380/   BA8A6 : =$23                vcTL4 set vcTL4&$7F
(1)  380/   BA8A6 :                     
(1)  380/   BA8A6 : 0503 0501                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  380/   BA8AA : 0F0E CE10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  380/   BA8AE : 0502 0B09                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  380/   BA8B2 : 0803 000A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  380/   BA8B6 : FF3F 0FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  380/   BA8BA : 231A 2183                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  381/   BA8BE :                     
(1)  382/   BA8BE :                     ;	Voice $06
(1)  383/   BA8BE :                     ;	$3C
(1)  384/   BA8BE :                     ;	$01, $02, $01, $02, 	$CF, $0D, $CF, $0C, 	$00, $08, $00, $08
(1)  385/   BA8BE :                     ;	$00, $02, $00, $02, 	$02, $27, $02, $28, 	$1E, $80, $1F, $80
(1)  386/   BA8BE : (MACRO)             	smpsVcAlgorithm     $04
(1)  386/   BA8BE : =$4                 vcAlgorithm set $04
(1)  387/   BA8BE : (MACRO)             	smpsVcFeedback      $07
(1)  387/   BA8BE : =$7                 vcFeedback set $07
(1)  388/   BA8BE : (MACRO)             	smpsVcUnusedBits    $00
(1)  388/   BA8BE : =$0                 vcUnusedBits set $00
(1)  388/   BA8BE : =$0                 vcD1R1Unk set 0
(1)  388/   BA8BE : =$0                 vcD1R2Unk set 0
(1)  388/   BA8BE : =$0                 vcD1R3Unk set 0
(1)  388/   BA8BE : =$0                 vcD1R4Unk set 0
(1)  389/   BA8BE : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  389/   BA8BE : =$0                 vcDT1 set $00
(1)  389/   BA8BE : =$0                 vcDT2 set $00
(1)  389/   BA8BE : =$0                 vcDT3 set $00
(1)  389/   BA8BE : =$0                 vcDT4 set $00
(1)  390/   BA8BE : (MACRO)             	smpsVcCoarseFreq    $02, $01, $02, $01
(1)  390/   BA8BE : =$2                 vcCF1 set $02
(1)  390/   BA8BE : =$1                 vcCF2 set $01
(1)  390/   BA8BE : =$2                 vcCF3 set $02
(1)  390/   BA8BE : =$1                 vcCF4 set $01
(1)  391/   BA8BE : (MACRO)             	smpsVcRateScale     $00, $03, $00, $03
(1)  391/   BA8BE : =$0                 vcRS1 set $00
(1)  391/   BA8BE : =$3                 vcRS2 set $03
(1)  391/   BA8BE : =$0                 vcRS3 set $00
(1)  391/   BA8BE : =$3                 vcRS4 set $03
(1)  392/   BA8BE : (MACRO)             	smpsVcAttackRate    $0C, $0F, $0D, $0F
(1)  392/   BA8BE : =$C                 vcAR1 set $0C
(1)  392/   BA8BE : =$F                 vcAR2 set $0F
(1)  392/   BA8BE : =$D                 vcAR3 set $0D
(1)  392/   BA8BE : =$F                 vcAR4 set $0F
(1)  393/   BA8BE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  393/   BA8BE : =$0                 vcAM1 set $00<<5
(1)  393/   BA8BE : =$0                 vcAM2 set $00<<5
(1)  393/   BA8BE : =$0                 vcAM3 set $00<<5
(1)  393/   BA8BE : =$0                 vcAM4 set $00<<5
(1)  394/   BA8BE : (MACRO)             	smpsVcDecayRate1    $08, $00, $08, $00
(1)  394/   BA8BE : =$8                 vcD1R1 set $08
(1)  394/   BA8BE : =$0                 vcD1R2 set $00
(1)  394/   BA8BE : =$8                 vcD1R3 set $08
(1)  394/   BA8BE : =$0                 vcD1R4 set $00
(1)  395/   BA8BE : (MACRO)             	smpsVcDecayRate2    $02, $00, $02, $00
(1)  395/   BA8BE : =$2                 vcD2R1 set $02
(1)  395/   BA8BE : =$0                 vcD2R2 set $00
(1)  395/   BA8BE : =$2                 vcD2R3 set $02
(1)  395/   BA8BE : =$0                 vcD2R4 set $00
(1)  396/   BA8BE : (MACRO)             	smpsVcDecayLevel    $02, $00, $02, $00
(1)  396/   BA8BE : =$2                 vcDL1 set $02
(1)  396/   BA8BE : =$0                 vcDL2 set $00
(1)  396/   BA8BE : =$2                 vcDL3 set $02
(1)  396/   BA8BE : =$0                 vcDL4 set $00
(1)  397/   BA8BE : (MACRO)             	smpsVcReleaseRate   $08, $02, $07, $02
(1)  397/   BA8BE : =$8                 vcRR1 set $08
(1)  397/   BA8BE : =$2                 vcRR2 set $02
(1)  397/   BA8BE : =$7                 vcRR3 set $07
(1)  397/   BA8BE : =$2                 vcRR4 set $02
(1)  398/   BA8BE : (MACRO)             	smpsVcTotalLevel    $00, $1F, $00, $1E
(1)  398/   BA8BE : =$0                 vcTL1 set $00
(1)  398/   BA8BE : =$1F                vcTL2 set $1F
(1)  398/   BA8BE : =$0                 vcTL3 set $00
(1)  398/   BA8BE : =$1E                vcTL4 set $1E
(1)  398/   BA8BE : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  398/   BA8BF :                     ;   0     1     2     3     4     5     6     7
(1)  398/   BA8BF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  398/   BA8BF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  398/   BA8BF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  398/   BA8BF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  398/   BA8BF : =$80                vcTLMask1 set $80
(1)  398/   BA8BF :                     
(1)  398/   BA8BF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  398/   BA8BF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  398/   BA8BF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  398/   BA8BF : =$80                vcTLMask1 set $80
(1)  398/   BA8BF : =$0                 vcTL1 set vcTL1&$7F
(1)  398/   BA8BF : =$1F                vcTL2 set vcTL2&$7F
(1)  398/   BA8BF : =$0                 vcTL3 set vcTL3&$7F
(1)  398/   BA8BF : =$1E                vcTL4 set vcTL4&$7F
(1)  398/   BA8BF :                     
(1)  398/   BA8BF : 0102 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  398/   BA8C3 : CF0D CF0C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  398/   BA8C7 : 0008 0008                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  398/   BA8CB : 0002 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  398/   BA8CF : 0227 0228                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  398/   BA8D3 : 1E80 1F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  399/   BA8D7 :                     
(1)  400/   BA8D7 :                     
   47/   BA8D7 :                        ; Z80 Bank $19  
   48/   BA8D7 : (MACRO)                                align   $8000
   48/   BA8D7 :  (MACRO-2)                     cnop 0,$8000
   48/   BA8D7 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   48/   C0000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   49/   C0000 :                        
   50/   C0000 :                        Music_0E:	include		"music-improved/8E - CPZ.asm"
(1)    1/   C0000 :                     CPZ_Header:
(1)    2/   C0000 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C0000 :                     
(1)    2/   C0000 : =$2                 SourceDriver set 2
(1)    2/   C0000 :                     
(1)    2/   C0000 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C0000 :                     
(1)    2/   C0000 : =$C0000             songStart set *
(1)    2/   C0000 :                     
(1)    2/   C0000 :                     
(1)    3/   C0000 : (MACRO)             	smpsHeaderVoice     CPZ_Voices
(1)    3/   C0000 : B585                                dc.w    z80_ptr(CPZ_VOICES)
(1)    4/   C0002 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C0002 : 0603                        dc.b    $06,$03
(1)    5/   C0004 : (MACRO)             	smpsHeaderTempo     $01, $EE
(1)    5/   C0004 : 01                          dc.b    $01
(1)    5/   C0005 :  (MACRO-2)                  convertMainTempoMod $EE
(1)    5/   C0005 : 12                                          dc.b    s2TempotoS3($EE)
(1)    6/   C0006 :                     
(1)    7/   C0006 : (MACRO)             	smpsHeaderDAC       CPZ_DAC
(1)    7/   C0006 :  (MACRO-2)                  CheckedChannelPointer CPZ_DAC
(1)    7/   C0006 : 6F85                                dc.w    z80_ptr(CPZ_DAC)
(1)    7/   C0008 : 0000                                dc.w    $00
(1)    8/   C000A : (MACRO)             	smpsHeaderFM        CPZ_FM1,	$00, $08
(1)    8/   C000A :  (MACRO-2)                  CheckedChannelPointer CPZ_FM1
(1)    8/   C000A : E281                                dc.w    z80_ptr(CPZ_FM1)
(1)    8/   C000C : 0008                        dc.b    $00,$08
(1)    9/   C000E : (MACRO)             	smpsHeaderFM        CPZ_FM2,	$00, $0C
(1)    9/   C000E :  (MACRO-2)                  CheckedChannelPointer CPZ_FM2
(1)    9/   C000E : 5084                                dc.w    z80_ptr(CPZ_FM2)
(1)    9/   C0010 : 000C                        dc.b    $00,$0C
(1)   10/   C0012 : (MACRO)             	smpsHeaderFM        CPZ_FM3,	$00, $10
(1)   10/   C0012 :  (MACRO-2)                  CheckedChannelPointer CPZ_FM3
(1)   10/   C0012 : E083                                dc.w    z80_ptr(CPZ_FM3)
(1)   10/   C0014 : 0010                        dc.b    $00,$10
(1)   11/   C0016 : (MACRO)             	smpsHeaderFM        CPZ_FM4,	$00, $10
(1)   11/   C0016 :  (MACRO-2)                  CheckedChannelPointer CPZ_FM4
(1)   11/   C0016 : E682                                dc.w    z80_ptr(CPZ_FM4)
(1)   11/   C0018 : 0010                        dc.b    $00,$10
(1)   12/   C001A : (MACRO)             	smpsHeaderFM        CPZ_FM5,	$00, $10
(1)   12/   C001A :  (MACRO-2)                  CheckedChannelPointer CPZ_FM5
(1)   12/   C001A : 6283                                dc.w    z80_ptr(CPZ_FM5)
(1)   12/   C001C : 0010                        dc.b    $00,$10
(1)   13/   C001E : (MACRO)             	smpsHeaderPSG       CPZ_PSG1,	$00, $07, $00, $00
(1)   13/   C001E :  (MACRO-2)                  CheckedChannelPointer CPZ_PSG1
(1)   13/   C001E : 3080                                dc.w    z80_ptr(CPZ_PSG1)
(1)   13/   C0020 :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/   C0020 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   13/   C0021 : 0700 00                     dc.b    $07,$00,$00
(1)   14/   C0024 : (MACRO)             	smpsHeaderPSG       CPZ_PSG2,	$00, $07, $00, $00
(1)   14/   C0024 :  (MACRO-2)                  CheckedChannelPointer CPZ_PSG2
(1)   14/   C0024 : 3180                                dc.w    z80_ptr(CPZ_PSG2)
(1)   14/   C0026 :  (MACRO-2)                  PSGPitchConvert $00
(1)   14/   C0026 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   14/   C0027 : 0700 00                     dc.b    $07,$00,$00
(1)   15/   C002A : (MACRO)             	smpsHeaderPSG       CPZ_PSG3,	$00, $00, $00, fTone_02
(1)   15/   C002A :  (MACRO-2)                  CheckedChannelPointer CPZ_PSG3
(1)   15/   C002A : 9085                                dc.w    z80_ptr(CPZ_PSG3)
(1)   15/   C002C :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   C002C : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   C002D : 0000 02                     dc.b    $00,$00,FTONE_02
(1)   16/   C0030 :                     
(1)   17/   C0030 :                     ; PSG1 Data
(1)   18/   C0030 :                     CPZ_PSG1:
(1)   19/   C0030 : (MACRO)             	smpsStop
(1)   19/   C0030 : F2                          dc.b    $F2
(1)   20/   C0031 :                     
(1)   21/   C0031 :                     ; PSG2 Data
(1)   22/   C0031 :                     CPZ_PSG2:
(1)   23/   C0031 : (MACRO)             	smpsStop
(1)   23/   C0031 : F2                          dc.b    $F2
(1)   24/   C0032 :                     
(1)   25/   C0032 :                     CPZ_Call0B:
(1)   26/   C0032 : (MACRO)             	smpsSetvoice        $01
(1)   26/   C0032 :  (MACRO-2)                  smpsFMvoice $01
(1)   26/   C0032 : EF01                                dc.b    $EF,$01
(1)   27/   C0034 : B706 B2B5 B7        	dc.b	nFs4, $06, nCs4, nE4, nFs4
(1)   28/   C0039 : (MACRO)             	smpsReturn
(1)   28/   C0039 : F9                                  dc.b    $F9
(1)   29/   C003A :                     
(1)   30/   C003A :                     CPZ_Call06:
(1)   31/   C003A : (MACRO)             	smpsSetvoice        $01
(1)   31/   C003A :  (MACRO-2)                  smpsFMvoice $01
(1)   31/   C003A : EF01                                dc.b    $EF,$01
(1)   32/   C003C : BE06 BEBA 0480 08BC 	dc.b	nCs5, $06, nCs5, nA4, $04, nRst, $08, nB4, $06, nCs5
            C0044 : 06BE               
(1)   33/   C0046 : (MACRO)             	smpsReturn
(1)   33/   C0046 : F9                                  dc.b    $F9
(1)   34/   C0047 :                     
(1)   35/   C0047 :                     CPZ_Call05:
(1)   36/   C0047 : (MACRO)             	smpsSetvoice        $05
(1)   36/   C0047 :  (MACRO-2)                  smpsFMvoice $05
(1)   36/   C0047 : EF05                                dc.b    $EF,$05
(1)   37/   C0049 : C605 8013 C612 C605 	dc.b	nA5, $05, nRst, $13, nA5, $12, nA5, $05, nRst, $0D
            C0051 : 800D               
(1)   38/   C0053 : (MACRO)             	smpsCall            CPZ_Call0B
(1)   38/   C0053 : F8                          dc.b    $F8
(1)   38/   C0054 : 3280                                dc.w    z80_ptr(CPZ_CALL0B)
(1)   39/   C0056 : (MACRO)             	smpsSetvoice        $05
(1)   39/   C0056 :  (MACRO-2)                  smpsFMvoice $05
(1)   39/   C0056 : EF05                                dc.b    $EF,$05
(1)   40/   C0058 : C6C6 800C C606 C605 	dc.b	nA5, nA5, nRst, $0C, nA5, $06, nA5, $05, nRst, $0D, nA5, $06
            C0060 : 800D C606         
(1)   41/   C0064 : C830 E706 C605 8013 	dc.b	nB5, $30, smpsNoAttack, $06, nA5, $05, nRst, $13, nA5, $12, nA5, $05
            C006C : C612 C605         
(1)   42/   C0070 : 800D                	dc.b	nRst, $0D
(1)   43/   C0072 : (MACRO)             	smpsCall            CPZ_Call0B
(1)   43/   C0072 : F8                          dc.b    $F8
(1)   43/   C0073 : 3280                                dc.w    z80_ptr(CPZ_CALL0B)
(1)   44/   C0075 : 800C                	dc.b	nRst, $0C
(1)   45/   C0077 : (MACRO)             	smpsReturn
(1)   45/   C0077 : F9                                  dc.b    $F9
(1)   46/   C0078 :                     
(1)   47/   C0078 :                     CPZ_Call07:
(1)   48/   C0078 : BE0C BC06 BABC BA04 	dc.b	nCs5, $0C, nB4, $06, nA4, nB4, nA4, $04, smpsNoAttack, $08, nA4, $04
            C0080 : E708 BA04         
(1)   49/   C0084 : 800E                	dc.b	nRst, $0E
(1)   50/   C0086 : (MACRO)             	smpsCall            CPZ_Call0B
(1)   50/   C0086 : F8                          dc.b    $F8
(1)   50/   C0087 : 3280                                dc.w    z80_ptr(CPZ_CALL0B)
(1)   51/   C0089 : (MACRO)             	smpsSetvoice        $00
(1)   51/   C0089 :  (MACRO-2)                  smpsFMvoice $00
(1)   51/   C0089 : EF00                                dc.b    $EF,$00
(1)   52/   C008B : B7BA BE0C BC06 BABC 	dc.b	nFs4, nA4, nCs5, $0C, nB4, $06, nA4, nB4, nA4, $0C, nB4, $04
            C0093 : BA0C BC04         
(1)   53/   C0097 : 8008 BA04 8008 BC04 	dc.b	nRst, $08, nA4, $04, nRst, $08, nB4, $04, nRst, $08, nCs5, $12
            C009F : 8008 BE12         
(1)   54/   C00A3 : BA06 B780 B780 24   	dc.b	nA4, $06, nFs4, nRst, nFs4, nRst, $24
(1)   55/   C00AA : (MACRO)             	smpsCall            CPZ_Call0B
(1)   55/   C00AA : F8                          dc.b    $F8
(1)   55/   C00AB : 3280                                dc.w    z80_ptr(CPZ_CALL0B)
(1)   56/   C00AD : 800C 8030           	dc.b	nRst, $0C, nRst, $30
(1)   57/   C00B1 : (MACRO)             	smpsCall            CPZ_Call06
(1)   57/   C00B1 : F8                          dc.b    $F8
(1)   57/   C00B2 : 3A80                                dc.w    z80_ptr(CPZ_CALL06)
(1)   58/   C00B4 : (MACRO)             	smpsReturn
(1)   58/   C00B4 : F9                                  dc.b    $F9
(1)   59/   C00B5 :                     
(1)   60/   C00B5 :                     CPZ_Call08:
(1)   61/   C00B5 : (MACRO)             	smpsAlterVol        $04
(1)   61/   C00B5 : E604                        dc.b    $E6,$04
(1)   62/   C00B7 : (MACRO)             	smpsSetvoice        $01
(1)   62/   C00B7 :  (MACRO-2)                  smpsFMvoice $01
(1)   62/   C00B7 : EF01                                dc.b    $EF,$01
(1)   63/   C00B9 : B312 8006 B312 8006 	dc.b	nD4, $12, nRst, $06, nD4, $12, nRst, $06, nE4, $0C, nRst, $12
            C00C1 : B50C 8012         
(1)   64/   C00C5 : (MACRO)             	smpsAlterVol        $FC
(1)   64/   C00C5 : E6FC                        dc.b    $E6,$FC
(1)   65/   C00C7 : (MACRO)             	smpsReturn
(1)   65/   C00C7 : F9                                  dc.b    $F9
(1)   66/   C00C8 :                     
(1)   67/   C00C8 :                     CPZ_Call09:
(1)   68/   C00C8 : (MACRO)             	smpsSetvoice        $00
(1)   68/   C00C8 :  (MACRO-2)                  smpsFMvoice $00
(1)   68/   C00C8 : EF00                                dc.b    $EF,$00
(1)   69/   C00CA : B206 B5B7 B902 E7BA 	dc.b	nCs4, $06, nE4, nFs4, nAb4, $02, smpsNoAttack, nA4, $0A, nFs4, $06, nCs4
            C00D2 : 0AB7 06B2         
(1)   70/   C00D6 : B5B7 0480 08B9 02E7 	dc.b	nE4, nFs4, $04, nRst, $08, nAb4, $02, smpsNoAttack, nA4, $10, nFs4, $06
            C00DE : BA10 B706         
(1)   71/   C00E2 : B2B5 B704 800E      	dc.b	nCs4, nE4, nFs4, $04, nRst, $0E
(1)   72/   C00E8 : (MACRO)             	smpsReturn
(1)   72/   C00E8 : F9                                  dc.b    $F9
(1)   73/   C00E9 :                     
(1)   74/   C00E9 :                     CPZ_Call02:
(1)   75/   C00E9 : C305 8013 C312 C305 	dc.b	nFs5, $05, nRst, $13, nFs5, $12, nFs5, $05, nRst, $25, nFs5, $06
            C00F1 : 8025 C306         
(1)   76/   C00F5 : C380 0CC3 06C3 0580 	dc.b	nFs5, nRst, $0C, nFs5, $06, nFs5, $05, nRst, $0D, nFs5, $06, nAb5
            C00FD : 0DC3 06C5         
(1)   77/   C0101 : 30E7 06C3 0580 13C3 	dc.b	$30, smpsNoAttack, $06, nFs5, $05, nRst, $13, nFs5, $12, nFs5, $05, nRst
            C0109 : 12C3 0580         
(1)   78/   C010D : 3080 0180 3080      	dc.b	$30, nRst, $01, nRst, $30, nRst
(1)   79/   C0113 : (MACRO)             	smpsReturn
(1)   79/   C0113 : F9                                  dc.b    $F9
(1)   80/   C0114 :                     
(1)   81/   C0114 :                     CPZ_Call04:
(1)   82/   C0114 : C605 8013 C612 C605 	dc.b	nA5, $05, nRst, $13, nA5, $12, nA5, $05, nRst, $25, nA5, $06
            C011C : 8025 C606         
(1)   83/   C0120 : C680 0CC6 06C6 0580 	dc.b	nA5, nRst, $0C, nA5, $06, nA5, $05, nRst, $0D, nA5, $06, nB5
            C0128 : 0DC6 06C8         
(1)   84/   C012C : 30E7 06C6 0580 13C6 	dc.b	$30, smpsNoAttack, $06, nA5, $05, nRst, $13, nA5, $12, nA5, $05, nRst
            C0134 : 12C6 0580         
(1)   85/   C0138 : 3080 0180 3080      	dc.b	$30, nRst, $01, nRst, $30, nRst
(1)   86/   C013E : (MACRO)             	smpsReturn
(1)   86/   C013E : F9                                  dc.b    $F9
(1)   87/   C013F :                     
(1)   88/   C013F :                     CPZ_Call03:
(1)   89/   C013F : 9F0C AB06 80A9 80AB 	dc.b	nFs2, $0C, nFs3, $06, nRst, nE3, nRst, nFs3, nFs2, nRst, nFs2, nFs3
            C0147 : 9F80 9FAB         
(1)   90/   C014B : 80A9 80AB 0C        	dc.b	nRst, nE3, nRst, nFs3, $0C
(1)   91/   C0150 : (MACRO)             	smpsReturn
(1)   91/   C0150 : F9                                  dc.b    $F9
(1)   92/   C0151 :                     
(1)   93/   C0151 :                     CPZ_Call0A:
(1)   94/   C0151 : (MACRO)             	smpsAlterNote       $F8
(1)   94/   C0151 :  (MACRO-2)                  smpsDetune      $F8
(1)   94/   C0151 : E1F8                        dc.b    $E1,$F8
(1)   95/   C0153 : E703                	dc.b	smpsNoAttack, $03
(1)   96/   C0155 : (MACRO)             	smpsAlterNote       $F0
(1)   96/   C0155 :  (MACRO-2)                  smpsDetune      $F0
(1)   96/   C0155 : E1F0                        dc.b    $E1,$F0
(1)   97/   C0157 : E703                	dc.b	smpsNoAttack, $03
(1)   98/   C0159 : (MACRO)             	smpsAlterNote       $E8
(1)   98/   C0159 :  (MACRO-2)                  smpsDetune      $E8
(1)   98/   C0159 : E1E8                        dc.b    $E1,$E8
(1)   99/   C015B : E703                	dc.b	smpsNoAttack, $03
(1)  100/   C015D : (MACRO)             	smpsAlterNote       $E0
(1)  100/   C015D :  (MACRO-2)                  smpsDetune      $E0
(1)  100/   C015D : E1E0                        dc.b    $E1,$E0
(1)  101/   C015F : E703                	dc.b	smpsNoAttack, $03
(1)  102/   C0161 : (MACRO)             	smpsAlterNote       $D8
(1)  102/   C0161 :  (MACRO-2)                  smpsDetune      $D8
(1)  102/   C0161 : E1D8                        dc.b    $E1,$D8
(1)  103/   C0163 : E703                	dc.b	smpsNoAttack, $03
(1)  104/   C0165 : (MACRO)             	smpsAlterNote       $D0
(1)  104/   C0165 :  (MACRO-2)                  smpsDetune      $D0
(1)  104/   C0165 : E1D0                        dc.b    $E1,$D0
(1)  105/   C0167 : E703                	dc.b	smpsNoAttack, $03
(1)  106/   C0169 : (MACRO)             	smpsAlterNote       $C8
(1)  106/   C0169 :  (MACRO-2)                  smpsDetune      $C8
(1)  106/   C0169 : E1C8                        dc.b    $E1,$C8
(1)  107/   C016B : E703                	dc.b	smpsNoAttack, $03
(1)  108/   C016D : (MACRO)             	smpsAlterNote       $C0
(1)  108/   C016D :  (MACRO-2)                  smpsDetune      $C0
(1)  108/   C016D : E1C0                        dc.b    $E1,$C0
(1)  109/   C016F : E703                	dc.b	smpsNoAttack, $03
(1)  110/   C0171 : (MACRO)             	smpsAlterNote       $C8
(1)  110/   C0171 :  (MACRO-2)                  smpsDetune      $C8
(1)  110/   C0171 : E1C8                        dc.b    $E1,$C8
(1)  111/   C0173 : E703                	dc.b	smpsNoAttack, $03
(1)  112/   C0175 : (MACRO)             	smpsAlterNote       $D0
(1)  112/   C0175 :  (MACRO-2)                  smpsDetune      $D0
(1)  112/   C0175 : E1D0                        dc.b    $E1,$D0
(1)  113/   C0177 : E703                	dc.b	smpsNoAttack, $03
(1)  114/   C0179 : (MACRO)             	smpsAlterNote       $D8
(1)  114/   C0179 :  (MACRO-2)                  smpsDetune      $D8
(1)  114/   C0179 : E1D8                        dc.b    $E1,$D8
(1)  115/   C017B : E703                	dc.b	smpsNoAttack, $03
(1)  116/   C017D : (MACRO)             	smpsAlterNote       $E0
(1)  116/   C017D :  (MACRO-2)                  smpsDetune      $E0
(1)  116/   C017D : E1E0                        dc.b    $E1,$E0
(1)  117/   C017F : E703                	dc.b	smpsNoAttack, $03
(1)  118/   C0181 : (MACRO)             	smpsAlterNote       $E8
(1)  118/   C0181 :  (MACRO-2)                  smpsDetune      $E8
(1)  118/   C0181 : E1E8                        dc.b    $E1,$E8
(1)  119/   C0183 : E703                	dc.b	smpsNoAttack, $03
(1)  120/   C0185 : (MACRO)             	smpsAlterNote       $F0
(1)  120/   C0185 :  (MACRO-2)                  smpsDetune      $F0
(1)  120/   C0185 : E1F0                        dc.b    $E1,$F0
(1)  121/   C0187 : E703                	dc.b	smpsNoAttack, $03
(1)  122/   C0189 : (MACRO)             	smpsAlterNote       $F8
(1)  122/   C0189 :  (MACRO-2)                  smpsDetune      $F8
(1)  122/   C0189 : E1F8                        dc.b    $E1,$F8
(1)  123/   C018B : E703                	dc.b	smpsNoAttack, $03
(1)  124/   C018D : (MACRO)             	smpsAlterNote       $00
(1)  124/   C018D :  (MACRO-2)                  smpsDetune      $00
(1)  124/   C018D : E100                        dc.b    $E1,$00
(1)  125/   C018F : E703                	dc.b	smpsNoAttack, $03
(1)  126/   C0191 : (MACRO)             	smpsReturn
(1)  126/   C0191 : F9                                  dc.b    $F9
(1)  127/   C0192 :                     
(1)  128/   C0192 :                     CPZ_Call00:
(1)  129/   C0192 : 8118 820C 8118 0C82 	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, dKick, dKick, $18, dSnare
            C019A : 8181 1882         
(1)  130/   C019E : 0C81 1281 8218 8182 	dc.b	$0C, dKick, $12, dKick, dSnare, $18, dKick, dSnare, $0C, dKick, $18, $0C
            C01A6 : 0C81 180C         
(1)  131/   C01AA : 8281 8118 820C 8118 	dc.b	dSnare, dKick, dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
            C01B2 : 820C 8282         
(1)  132/   C01B6 : 0682                	dc.b	$06, dSnare
(1)  133/   C01B8 : (MACRO)             	smpsReturn
(1)  133/   C01B8 : F9                                  dc.b    $F9
(1)  134/   C01B9 :                     
(1)  135/   C01B9 :                     CPZ_Call01:
(1)  136/   C01B9 : 8118 820C 8118 0C82 	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, dKick, dKick, $18, dSnare
            C01C1 : 8181 1882         
(1)  137/   C01C5 : 0C81 1281 8218 8182 	dc.b	$0C, dKick, $12, dKick, dSnare, $18, dKick, dSnare, $0C, dKick, $18, $0C
            C01CD : 0C81 180C         
(1)  138/   C01D1 : 8281 8118 820C 8182 	dc.b	dSnare, dKick, dKick, $18, dSnare, $0C, dKick, dSnare, $06, dSnare, dSnare, dSnare
            C01D9 : 0682 8282         
(1)  139/   C01DD : 8282 8282           	dc.b	dSnare, dSnare, dSnare, dSnare
(1)  140/   C01E1 : (MACRO)             	smpsReturn
(1)  140/   C01E1 : F9                                  dc.b    $F9
(1)  141/   C01E2 :                     
(1)  142/   C01E2 :                     ; FM1 Data
(1)  143/   C01E2 :                     CPZ_FM1:
(1)  144/   C01E2 : (MACRO)             	smpsModSet          $06, $01, $FA, $04
(1)  144/   C01E2 : F0                          dc.b    $F0
(1)  144/   C01E3 : 0701 FA05                           dc.b    $06+1,$01,$FA,(($04+1) * $01) & $FF
(1)  144/   C01E7 :                             ;dc.b   $01,$FA,$04
(1)  145/   C01E7 : (MACRO)             	smpsCall            CPZ_Call05
(1)  145/   C01E7 : F8                          dc.b    $F8
(1)  145/   C01E8 : 4780                                dc.w    z80_ptr(CPZ_CALL05)
(1)  146/   C01EA : 8030 80             	dc.b	nRst, $30, nRst
(1)  147/   C01ED : (MACRO)             	smpsCall            CPZ_Call05
(1)  147/   C01ED : F8                          dc.b    $F8
(1)  147/   C01EE : 4780                                dc.w    z80_ptr(CPZ_CALL05)
(1)  148/   C01F0 : 8030                	dc.b	nRst, $30
(1)  149/   C01F2 : (MACRO)             	smpsCall            CPZ_Call06
(1)  149/   C01F2 : F8                          dc.b    $F8
(1)  149/   C01F3 : 3A80                                dc.w    z80_ptr(CPZ_CALL06)
(1)  150/   C01F5 : (MACRO)             	smpsSetvoice        $00
(1)  150/   C01F5 :  (MACRO-2)                  smpsFMvoice $00
(1)  150/   C01F5 : EF00                                dc.b    $EF,$00
(1)  151/   C01F7 : B7BA                	dc.b	nFs4, nA4
(1)  152/   C01F9 :                     
(1)  153/   C01F9 :                     CPZ_Jump01:
(1)  154/   C01F9 : (MACRO)             	smpsCall            CPZ_Call07
(1)  154/   C01F9 : F8                          dc.b    $F8
(1)  154/   C01FA : 7880                                dc.w    z80_ptr(CPZ_CALL07)
(1)  155/   C01FC : (MACRO)             	smpsSetvoice        $00
(1)  155/   C01FC :  (MACRO-2)                  smpsFMvoice $00
(1)  155/   C01FC : EF00                                dc.b    $EF,$00
(1)  156/   C01FE : B706 BA             	dc.b	nFs4, $06, nA4
(1)  157/   C0201 : (MACRO)             	smpsCall            CPZ_Call07
(1)  157/   C0201 : F8                          dc.b    $F8
(1)  157/   C0202 : 7880                                dc.w    z80_ptr(CPZ_CALL07)
(1)  158/   C0204 : 800C                	dc.b	nRst, $0C
(1)  159/   C0206 :                     
(1)  160/   C0206 :                     CPZ_Loop10:
(1)  161/   C0206 : 800C                	dc.b	nRst, $0C
(1)  162/   C0208 : (MACRO)             	smpsSetvoice        $00
(1)  162/   C0208 :  (MACRO-2)                  smpsFMvoice $00
(1)  162/   C0208 : EF00                                dc.b    $EF,$00
(1)  163/   C020A : BC04 8008 BC0C BA06 	dc.b	nB4, $04, nRst, $08, nB4, $0C, nA4, $06, nB4, nRst, nB4, nRst
            C0212 : BC80 BC80         
(1)  164/   C0216 : BABC 0CBA BE06 BA80 	dc.b	nA4, nB4, $0C, nA4, nCs5, $06, nA4, nRst, nFs4
            C021E : B7               
(1)  165/   C021F : (MACRO)             	smpsSetvoice        $01
(1)  165/   C021F :  (MACRO-2)                  smpsFMvoice $01
(1)  165/   C021F : EF01                                dc.b    $EF,$01
(1)  166/   C0221 : BA04 8008 BA04 8008 	dc.b	nA4, $04, nRst, $08, nA4, $04, nRst, $08, nA4, $04
            C0229 : BA04               
(1)  167/   C022B : (MACRO)             	smpsAlterVol        $FD
(1)  167/   C022B : E6FD                        dc.b    $E6,$FD
(1)  168/   C022D : 8008 BA04 8008 BA06 	dc.b	nRst, $08, nA4, $04, nRst, $08, nA4, $06, nA4, $12
            C0235 : BA12               
(1)  169/   C0237 : (MACRO)             	smpsAlterVol        $FD
(1)  169/   C0237 : E6FD                        dc.b    $E6,$FD
(1)  170/   C0239 : B704 8008           	dc.b	nFs4, $04, nRst, $08
(1)  171/   C023D : (MACRO)             	smpsAlterVol        $06
(1)  171/   C023D : E606                        dc.b    $E6,$06
(1)  172/   C023F : (MACRO)             	smpsSetvoice        $00
(1)  172/   C023F :  (MACRO-2)                  smpsFMvoice $00
(1)  172/   C023F : EF00                                dc.b    $EF,$00
(1)  173/   C0241 : BC04 8008 BC0C BA06 	dc.b	nB4, $04, nRst, $08, nB4, $0C, nA4, $06, nB4, nRst, nB4, nRst
            C0249 : BC80 BC80         
(1)  174/   C024D : BABC 0CBA           	dc.b	nA4, nB4, $0C, nA4
(1)  175/   C0251 : (MACRO)             	smpsAlterVol        $FD
(1)  175/   C0251 : E6FD                        dc.b    $E6,$FD
(1)  176/   C0253 : BE06                	dc.b	nCs5, $06
(1)  177/   C0255 : (MACRO)             	smpsAlterVol        $04
(1)  177/   C0255 : E604                        dc.b    $E6,$04
(1)  178/   C0257 : (MACRO)             	smpsSetvoice        $01
(1)  178/   C0257 :  (MACRO-2)                  smpsFMvoice $01
(1)  178/   C0257 : EF01                                dc.b    $EF,$01
(1)  179/   C0259 : B703 E7B8 E7B9 24B3 	dc.b	nFs4, $03, smpsNoAttack, nG4, smpsNoAttack, nAb4, $24, nD4, $03, smpsNoAttack, nEb4, smpsNoAttack
            C0261 : 03E7 B4E7         
(1)  180/   C0265 : B5E7 B6E7 B724      	dc.b	nE4, smpsNoAttack, nF4, smpsNoAttack, nFs4, $24
(1)  181/   C026B : (MACRO)             	smpsAlterVol        $FF
(1)  181/   C026B : E6FF                        dc.b    $E6,$FF
(1)  182/   C026D : (MACRO)             	smpsLoop            $00, $02, CPZ_Loop10
(1)  182/   C026D : F7                          dc.b    $F7
(1)  182/   C026E : 0002                        dc.b    $00,$02
(1)  182/   C0270 : 0682                                dc.w    z80_ptr(CPZ_LOOP10)
(1)  183/   C0272 : (MACRO)             	smpsCall            CPZ_Call08
(1)  183/   C0272 : F8                          dc.b    $F8
(1)  183/   C0273 : B580                                dc.w    z80_ptr(CPZ_CALL08)
(1)  184/   C0275 : (MACRO)             	smpsCall            CPZ_Call09
(1)  184/   C0275 : F8                          dc.b    $F8
(1)  184/   C0276 : C880                                dc.w    z80_ptr(CPZ_CALL09)
(1)  185/   C0278 : (MACRO)             	smpsCall            CPZ_Call08
(1)  185/   C0278 : F8                          dc.b    $F8
(1)  185/   C0279 : B580                                dc.w    z80_ptr(CPZ_CALL08)
(1)  186/   C027B : (MACRO)             	smpsSetvoice        $00
(1)  186/   C027B :  (MACRO-2)                  smpsFMvoice $00
(1)  186/   C027B : EF00                                dc.b    $EF,$00
(1)  187/   C027D : B206 B5B7 B902 E7BA 	dc.b	nCs4, $06, nE4, nFs4, nAb4, $02, smpsNoAttack, nA4, $0A, nFs4, $06, nCs4
            C0285 : 0AB7 06B2         
(1)  188/   C0289 : B5B7 0480 08BC 0CBA 	dc.b	nE4, nFs4, $04, nRst, $08, nB4, $0C, nA4, $06, nB4, nCs5, $04
            C0291 : 06BC BE04         
(1)  189/   C0295 : 801A                	dc.b	nRst, $1A
(1)  190/   C0297 : (MACRO)             	smpsCall            CPZ_Call08
(1)  190/   C0297 : F8                          dc.b    $F8
(1)  190/   C0298 : B580                                dc.w    z80_ptr(CPZ_CALL08)
(1)  191/   C029A : (MACRO)             	smpsCall            CPZ_Call09
(1)  191/   C029A : F8                          dc.b    $F8
(1)  191/   C029B : C880                                dc.w    z80_ptr(CPZ_CALL09)
(1)  192/   C029D : (MACRO)             	smpsCall            CPZ_Call08
(1)  192/   C029D : F8                          dc.b    $F8
(1)  192/   C029E : B580                                dc.w    z80_ptr(CPZ_CALL08)
(1)  193/   C02A0 : (MACRO)             	smpsSetvoice        $00
(1)  193/   C02A0 :  (MACRO-2)                  smpsFMvoice $00
(1)  193/   C02A0 : EF00                                dc.b    $EF,$00
(1)  194/   C02A2 : B206 B5B7 BA04 8008 	dc.b	nCs4, $06, nE4, nFs4, nA4, $04, nRst, $08, nB4, $04, nRst, $08
            C02AA : BC04 8008         
(1)  195/   C02AE : BE18 C1C3 E7C3 0C   	dc.b	nCs5, $18, nE5, nFs5, smpsNoAttack, nFs5, $0C
(1)  196/   C02B5 : (MACRO)             	smpsModSet          $18, $01, $05, $04
(1)  196/   C02B5 : F0                          dc.b    $F0
(1)  196/   C02B6 : 1901 0505                           dc.b    $18+1,$01,$05,(($04+1) * $01) & $FF
(1)  196/   C02BA :                             ;dc.b   $01,$05,$04
(1)  197/   C02BA : (MACRO)             	smpsCall            CPZ_Call0A
(1)  197/   C02BA : F8                          dc.b    $F8
(1)  197/   C02BB : 5181                                dc.w    z80_ptr(CPZ_CALL0A)
(1)  198/   C02BD : E7C3 30E7 0C80 18BE 	dc.b	smpsNoAttack, nFs5, $30, smpsNoAttack, $0C, nRst, $18, nCs5, $06, nCs5, nA4, $04
            C02C5 : 06BE BA04         
(1)  199/   C02C9 : 8008 B706 BA80 B7   	dc.b	nRst, $08, nFs4, $06, nA4, nRst, nFs4
(1)  200/   C02D0 : (MACRO)             	smpsCall            CPZ_Call0A
(1)  200/   C02D0 : F8                          dc.b    $F8
(1)  200/   C02D1 : 5181                                dc.w    z80_ptr(CPZ_CALL0A)
(1)  201/   C02D3 : E730 E730 E718 800C 	dc.b	smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $0C, nFs4, $06, nA4
            C02DB : B706 BA            
(1)  202/   C02DE : (MACRO)             	smpsModSet          $06, $01, $FA, $04
(1)  202/   C02DE : F0                          dc.b    $F0
(1)  202/   C02DF : 0701 FA05                           dc.b    $06+1,$01,$FA,(($04+1) * $01) & $FF
(1)  202/   C02E3 :                             ;dc.b   $01,$FA,$04
(1)  203/   C02E3 : (MACRO)             	smpsJump            CPZ_Jump01
(1)  203/   C02E3 : F6                          dc.b    $F6
(1)  203/   C02E4 : F981                                dc.w    z80_ptr(CPZ_JUMP01)
(1)  204/   C02E6 :                     
(1)  205/   C02E6 :                     ; FM4 Data
(1)  206/   C02E6 :                     CPZ_FM4:
(1)  207/   C02E6 : (MACRO)             	smpsModSet          $0C, $01, $FB, $04
(1)  207/   C02E6 : F0                          dc.b    $F0
(1)  207/   C02E7 : 0D01 FB05                           dc.b    $0C+1,$01,$FB,(($04+1) * $01) & $FF
(1)  207/   C02EB :                             ;dc.b   $01,$FB,$04
(1)  208/   C02EB : (MACRO)             	smpsSetvoice        $02
(1)  208/   C02EB :  (MACRO-2)                  smpsFMvoice $02
(1)  208/   C02EB : EF02                                dc.b    $EF,$02
(1)  209/   C02ED :                     
(1)  210/   C02ED :                     CPZ_Loop0C:
(1)  211/   C02ED : (MACRO)             	smpsCall            CPZ_Call02
(1)  211/   C02ED : F8                          dc.b    $F8
(1)  211/   C02EE : E980                                dc.w    z80_ptr(CPZ_CALL02)
(1)  212/   C02F0 : (MACRO)             	smpsLoop            $00, $02, CPZ_Loop0C
(1)  212/   C02F0 : F7                          dc.b    $F7
(1)  212/   C02F1 : 0002                        dc.b    $00,$02
(1)  212/   C02F3 : ED82                                dc.w    z80_ptr(CPZ_LOOP0C)
(1)  213/   C02F5 :                     
(1)  214/   C02F5 :                     CPZ_Loop0D:
(1)  215/   C02F5 : (MACRO)             	smpsCall            CPZ_Call02
(1)  215/   C02F5 : F8                          dc.b    $F8
(1)  215/   C02F6 : E980                                dc.w    z80_ptr(CPZ_CALL02)
(1)  216/   C02F8 : (MACRO)             	smpsLoop            $00, $04, CPZ_Loop0D
(1)  216/   C02F8 : F7                          dc.b    $F7
(1)  216/   C02F9 : 0004                        dc.b    $00,$04
(1)  216/   C02FB : F582                                dc.w    z80_ptr(CPZ_LOOP0D)
(1)  217/   C02FD : (MACRO)             	smpsModOff
(1)  217/   C02FD : FA                                  dc.b    $FA
(1)  218/   C02FE :                     
(1)  219/   C02FE :                     CPZ_Loop0E:
(1)  220/   C02FE : C512 8006 C512 8006 	dc.b	nAb5, $12, nRst, $06, nAb5, $12, nRst, $06, nA5, $0C, nRst, $24
            C0306 : C60C 8024         
(1)  221/   C030A : 8030 80             	dc.b	nRst, $30, nRst
(1)  222/   C030D : (MACRO)             	smpsLoop            $00, $04, CPZ_Loop0E
(1)  222/   C030D : F7                          dc.b    $F7
(1)  222/   C030E : 0004                        dc.b    $00,$04
(1)  222/   C0310 : FE82                                dc.w    z80_ptr(CPZ_LOOP0E)
(1)  223/   C0312 : (MACRO)             	smpsModSet          $0C, $01, $05, $04
(1)  223/   C0312 : F0                          dc.b    $F0
(1)  223/   C0313 : 0D01 0505                           dc.b    $0C+1,$01,$05,(($04+1) * $01) & $FF
(1)  223/   C0317 :                             ;dc.b   $01,$05,$04
(1)  224/   C0317 : 8030 80             	dc.b	nRst, $30, nRst
(1)  225/   C031A : (MACRO)             	smpsSetvoice        $05
(1)  225/   C031A :  (MACRO-2)                  smpsFMvoice $05
(1)  225/   C031A : EF05                                dc.b    $EF,$05
(1)  226/   C031C : (MACRO)             	smpsAlterVol        $F8
(1)  226/   C031C : E6F8                        dc.b    $E6,$F8
(1)  227/   C031E :                     
(1)  228/   C031E :                     CPZ_Loop0F:
(1)  229/   C031E : BE04 8008 BC04 8008 	dc.b	nCs5, $04, nRst, $08, nB4, $04, nRst, $08, nCs5, $0C, nB4, $06
            C0326 : BE0C BC06         
(1)  230/   C032A : BE04 8008 BE06 BC04 	dc.b	nCs5, $04, nRst, $08, nCs5, $06, nB4, $04, nRst, $08, nCs5, $0C
            C0332 : 8008 BE0C         
(1)  231/   C0336 : BC04 8008           	dc.b	nB4, $04, nRst, $08
(1)  232/   C033A : (MACRO)             	smpsLoop            $00, $02, CPZ_Loop0F
(1)  232/   C033A : F7                          dc.b    $F7
(1)  232/   C033B : 0002                        dc.b    $00,$02
(1)  232/   C033D : 1E83                                dc.w    z80_ptr(CPZ_LOOP0F)
(1)  233/   C033F : C304 8008 C104 8008 	dc.b	nFs5, $04, nRst, $08, nE5, $04, nRst, $08, nFs5, $0C, nE5, $06
            C0347 : C30C C106         
(1)  234/   C034B : C304 8008 C306 C104 	dc.b	nFs5, $04, nRst, $08, nFs5, $06, nE5, $04, nRst, $08, nFs5, $0C
            C0353 : 8008 C30C         
(1)  235/   C0357 : C104 8008           	dc.b	nE5, $04, nRst, $08
(1)  236/   C035B : (MACRO)             	smpsSetvoice        $02
(1)  236/   C035B :  (MACRO-2)                  smpsFMvoice $02
(1)  236/   C035B : EF02                                dc.b    $EF,$02
(1)  237/   C035D : (MACRO)             	smpsAlterVol        $08
(1)  237/   C035D : E608                        dc.b    $E6,$08
(1)  238/   C035F : (MACRO)             	smpsJump            CPZ_Loop0D
(1)  238/   C035F : F6                          dc.b    $F6
(1)  238/   C0360 : F582                                dc.w    z80_ptr(CPZ_LOOP0D)
(1)  239/   C0362 :                     
(1)  240/   C0362 :                     ; FM5 Data
(1)  241/   C0362 :                     CPZ_FM5:
(1)  242/   C0362 : (MACRO)             	smpsModSet          $0C, $01, $05, $04
(1)  242/   C0362 : F0                          dc.b    $F0
(1)  242/   C0363 : 0D01 0505                           dc.b    $0C+1,$01,$05,(($04+1) * $01) & $FF
(1)  242/   C0367 :                             ;dc.b   $01,$05,$04
(1)  243/   C0367 : (MACRO)             	smpsPan             panLeft, $00
(1)  243/   C0367 : =$0                 panNone set $00
(1)  243/   C0367 : =$40                panRight set $40
(1)  243/   C0367 : =$80                panLeft set $80
(1)  243/   C0367 : =$C0                panCentre set $C0
(1)  243/   C0367 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  243/   C0367 : E080                        dc.b $E0,PANLEFT+$00
(1)  244/   C0369 : (MACRO)             	smpsSetvoice        $02
(1)  244/   C0369 :  (MACRO-2)                  smpsFMvoice $02
(1)  244/   C0369 : EF02                                dc.b    $EF,$02
(1)  245/   C036B :                     
(1)  246/   C036B :                     CPZ_Loop08:
(1)  247/   C036B : (MACRO)             	smpsCall            CPZ_Call04
(1)  247/   C036B : F8                          dc.b    $F8
(1)  247/   C036C : 1481                                dc.w    z80_ptr(CPZ_CALL04)
(1)  248/   C036E : (MACRO)             	smpsLoop            $00, $02, CPZ_Loop08
(1)  248/   C036E : F7                          dc.b    $F7
(1)  248/   C036F : 0002                        dc.b    $00,$02
(1)  248/   C0371 : 6B83                                dc.w    z80_ptr(CPZ_LOOP08)
(1)  249/   C0373 :                     
(1)  250/   C0373 :                     CPZ_Loop09:
(1)  251/   C0373 : (MACRO)             	smpsCall            CPZ_Call04
(1)  251/   C0373 : F8                          dc.b    $F8
(1)  251/   C0374 : 1481                                dc.w    z80_ptr(CPZ_CALL04)
(1)  252/   C0376 : (MACRO)             	smpsLoop            $00, $04, CPZ_Loop09
(1)  252/   C0376 : F7                          dc.b    $F7
(1)  252/   C0377 : 0004                        dc.b    $00,$04
(1)  252/   C0379 : 7383                                dc.w    z80_ptr(CPZ_LOOP09)
(1)  253/   C037B : (MACRO)             	smpsModOff
(1)  253/   C037B : FA                                  dc.b    $FA
(1)  254/   C037C :                     
(1)  255/   C037C :                     CPZ_Loop0A:
(1)  256/   C037C : C812 8006 C812 8006 	dc.b	nB5, $12, nRst, $06, nB5, $12, nRst, $06, nCs6, $0C, nRst, $24
            C0384 : CA0C 8024         
(1)  257/   C0388 : 8030 80             	dc.b	nRst, $30, nRst
(1)  258/   C038B : (MACRO)             	smpsLoop            $00, $04, CPZ_Loop0A
(1)  258/   C038B : F7                          dc.b    $F7
(1)  258/   C038C : 0004                        dc.b    $00,$04
(1)  258/   C038E : 7C83                                dc.w    z80_ptr(CPZ_LOOP0A)
(1)  259/   C0390 : (MACRO)             	smpsModSet          $0C, $01, $05, $04
(1)  259/   C0390 : F0                          dc.b    $F0
(1)  259/   C0391 : 0D01 0505                           dc.b    $0C+1,$01,$05,(($04+1) * $01) & $FF
(1)  259/   C0395 :                             ;dc.b   $01,$05,$04
(1)  260/   C0395 :                     
(1)  261/   C0395 :                     CPZ_Loop0B:
(1)  262/   C0395 : 8030 80             	dc.b	nRst, $30, nRst
(1)  263/   C0398 : (MACRO)             	smpsLoop            $00, $02, CPZ_Loop0B
(1)  263/   C0398 : F7                          dc.b    $F7
(1)  263/   C0399 : 0002                        dc.b    $00,$02
(1)  263/   C039B : 9583                                dc.w    z80_ptr(CPZ_LOOP0B)
(1)  264/   C039D : (MACRO)             	smpsSetvoice        $05
(1)  264/   C039D :  (MACRO-2)                  smpsFMvoice $05
(1)  264/   C039D : EF05                                dc.b    $EF,$05
(1)  265/   C039F : (MACRO)             	smpsAlterVol        $F8
(1)  265/   C039F : E6F8                        dc.b    $E6,$F8
(1)  266/   C03A1 : C304 8008 C104 8008 	dc.b	nFs5, $04, nRst, $08, nE5, $04, nRst, $08, nFs5, $0C, nE5, $06
            C03A9 : C30C C106         
(1)  267/   C03AD : C304 8008 C306 C104 	dc.b	nFs5, $04, nRst, $08, nFs5, $06, nE5, $04, nRst, $08, nFs5, $0C
            C03B5 : 8008 C30C         
(1)  268/   C03B9 : C104 8008 CA04 8008 	dc.b	nE5, $04, nRst, $08, nCs6, $04, nRst, $08, nB5, $04, nRst, $08
            C03C1 : C804 8008         
(1)  269/   C03C5 : CA0C C806 CA04 8008 	dc.b	nCs6, $0C, nB5, $06, nCs6, $04, nRst, $08, nCs6, $06, nB5, $04
            C03CD : CA06 C804         
(1)  270/   C03D1 : 8008 CA0C C804 8008 	dc.b	nRst, $08, nCs6, $0C, nB5, $04, nRst, $08
(1)  271/   C03D9 : (MACRO)             	smpsSetvoice        $02
(1)  271/   C03D9 :  (MACRO-2)                  smpsFMvoice $02
(1)  271/   C03D9 : EF02                                dc.b    $EF,$02
(1)  272/   C03DB : (MACRO)             	smpsAlterVol        $08
(1)  272/   C03DB : E608                        dc.b    $E6,$08
(1)  273/   C03DD : (MACRO)             	smpsJump            CPZ_Loop09
(1)  273/   C03DD : F6                          dc.b    $F6
(1)  273/   C03DE : 7383                                dc.w    z80_ptr(CPZ_LOOP09)
(1)  274/   C03E0 :                     
(1)  275/   C03E0 :                     ; FM3 Data
(1)  276/   C03E0 :                     CPZ_FM3:
(1)  277/   C03E0 : (MACRO)             	smpsModSet          $06, $01, $05, $04
(1)  277/   C03E0 : F0                          dc.b    $F0
(1)  277/   C03E1 : 0701 0505                           dc.b    $06+1,$01,$05,(($04+1) * $01) & $FF
(1)  277/   C03E5 :                             ;dc.b   $01,$05,$04
(1)  278/   C03E5 : (MACRO)             	smpsPan             panRight, $00
(1)  278/   C03E5 : =$0                 panNone set $00
(1)  278/   C03E5 : =$40                panRight set $40
(1)  278/   C03E5 : =$80                panLeft set $80
(1)  278/   C03E5 : =$C0                panCentre set $C0
(1)  278/   C03E5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  278/   C03E5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  279/   C03E7 : (MACRO)             	smpsSetvoice        $05
(1)  279/   C03E7 :  (MACRO-2)                  smpsFMvoice $05
(1)  279/   C03E7 : EF05                                dc.b    $EF,$05
(1)  280/   C03E9 :                     
(1)  281/   C03E9 :                     CPZ_Loop04:
(1)  282/   C03E9 : (MACRO)             	smpsCall            CPZ_Call02
(1)  282/   C03E9 : F8                          dc.b    $F8
(1)  282/   C03EA : E980                                dc.w    z80_ptr(CPZ_CALL02)
(1)  283/   C03EC : (MACRO)             	smpsLoop            $00, $02, CPZ_Loop04
(1)  283/   C03EC : F7                          dc.b    $F7
(1)  283/   C03ED : 0002                        dc.b    $00,$02
(1)  283/   C03EF : E983                                dc.w    z80_ptr(CPZ_LOOP04)
(1)  284/   C03F1 :                     
(1)  285/   C03F1 :                     CPZ_Jump00:
(1)  286/   C03F1 : (MACRO)             	smpsSetvoice        $03
(1)  286/   C03F1 :  (MACRO-2)                  smpsFMvoice $03
(1)  286/   C03F1 : EF03                                dc.b    $EF,$03
(1)  287/   C03F3 :                     
(1)  288/   C03F3 :                     CPZ_Loop05:
(1)  289/   C03F3 : (MACRO)             	smpsCall            CPZ_Call03
(1)  289/   C03F3 : F8                          dc.b    $F8
(1)  289/   C03F4 : 3F81                                dc.w    z80_ptr(CPZ_CALL03)
(1)  290/   C03F6 : (MACRO)             	smpsLoop            $00, $03, CPZ_Loop05
(1)  290/   C03F6 : F7                          dc.b    $F7
(1)  290/   C03F7 : 0003                        dc.b    $00,$03
(1)  290/   C03F9 : F383                                dc.w    z80_ptr(CPZ_LOOP05)
(1)  291/   C03FB : 9D0C A906 80A8 80A9 	dc.b	nE2, $0C, nE3, $06, nRst, nEb3, nRst, nE3, nEb2, nRst, nEb2, nEb3
            C0403 : 9C80 9CA8         
(1)  292/   C0407 : 80A6 80A8 0C        	dc.b	nRst, nCs3, nRst, nEb3, $0C
(1)  293/   C040C : (MACRO)             	smpsLoop            $01, $04, CPZ_Loop05
(1)  293/   C040C : F7                          dc.b    $F7
(1)  293/   C040D : 0104                        dc.b    $01,$04
(1)  293/   C040F : F383                                dc.w    z80_ptr(CPZ_LOOP05)
(1)  294/   C0411 : 8030 80             	dc.b	nRst, $30, nRst
(1)  295/   C0414 : (MACRO)             	smpsPan             panCenter, $00
(1)  295/   C0414 : =$0                 panNone set $00
(1)  295/   C0414 : =$40                panRight set $40
(1)  295/   C0414 : =$80                panLeft set $80
(1)  295/   C0414 : =$C0                panCentre set $C0
(1)  295/   C0414 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  295/   C0414 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  296/   C0416 :                     
(1)  297/   C0416 :                     CPZ_Loop06:
(1)  298/   C0416 : (MACRO)             	smpsCall            CPZ_Call03
(1)  298/   C0416 : F8                          dc.b    $F8
(1)  298/   C0417 : 3F81                                dc.w    z80_ptr(CPZ_CALL03)
(1)  299/   C0419 : 8030 80             	dc.b	nRst, $30, nRst
(1)  300/   C041C : (MACRO)             	smpsLoop            $00, $03, CPZ_Loop06
(1)  300/   C041C : F7                          dc.b    $F7
(1)  300/   C041D : 0003                        dc.b    $00,$03
(1)  300/   C041F : 1684                                dc.w    z80_ptr(CPZ_LOOP06)
(1)  301/   C0421 : (MACRO)             	smpsPan             panRight, $00
(1)  301/   C0421 : =$0                 panNone set $00
(1)  301/   C0421 : =$40                panRight set $40
(1)  301/   C0421 : =$80                panLeft set $80
(1)  301/   C0421 : =$C0                panCentre set $C0
(1)  301/   C0421 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  301/   C0421 : E040                        dc.b $E0,PANRIGHT+$00
(1)  302/   C0423 : 8030 80             	dc.b	nRst, $30, nRst
(1)  303/   C0426 : (MACRO)             	smpsSetvoice        $05
(1)  303/   C0426 :  (MACRO-2)                  smpsFMvoice $05
(1)  303/   C0426 : EF05                                dc.b    $EF,$05
(1)  304/   C0428 : (MACRO)             	smpsAlterVol        $F8
(1)  304/   C0428 : E6F8                        dc.b    $E6,$F8
(1)  305/   C042A :                     
(1)  306/   C042A :                     CPZ_Loop07:
(1)  307/   C042A : BA04 8008 B904 8008 	dc.b	nA4, $04, nRst, $08, nAb4, $04, nRst, $08, nA4, $0C, nAb4, $06
            C0432 : BA0C B906         
(1)  308/   C0436 : BA04 8008 BA06 B904 	dc.b	nA4, $04, nRst, $08, nA4, $06, nAb4, $04, nRst, $08, nA4, $0C
            C043E : 8008 BA0C         
(1)  309/   C0442 : B904 8008           	dc.b	nAb4, $04, nRst, $08
(1)  310/   C0446 : (MACRO)             	smpsLoop            $00, $04, CPZ_Loop07
(1)  310/   C0446 : F7                          dc.b    $F7
(1)  310/   C0447 : 0004                        dc.b    $00,$04
(1)  310/   C0449 : 2A84                                dc.w    z80_ptr(CPZ_LOOP07)
(1)  311/   C044B : (MACRO)             	smpsAlterVol        $08
(1)  311/   C044B : E608                        dc.b    $E6,$08
(1)  312/   C044D : (MACRO)             	smpsJump            CPZ_Jump00
(1)  312/   C044D : F6                          dc.b    $F6
(1)  312/   C044E : F183                                dc.w    z80_ptr(CPZ_JUMP00)
(1)  313/   C0450 :                     
(1)  314/   C0450 :                     ; FM2 Data
(1)  315/   C0450 :                     CPZ_FM2:
(1)  316/   C0450 : (MACRO)             	smpsSetvoice        $04
(1)  316/   C0450 :  (MACRO-2)                  smpsFMvoice $04
(1)  316/   C0450 : EF04                                dc.b    $EF,$04
(1)  317/   C0452 :                     
(1)  318/   C0452 :                     CPZ_Loop02:
(1)  319/   C0452 : 8030 80             	dc.b	nRst, $30, nRst
(1)  320/   C0455 : (MACRO)             	smpsLoop            $00, $03, CPZ_Loop02
(1)  320/   C0455 : F7                          dc.b    $F7
(1)  320/   C0456 : 0003                        dc.b    $00,$03
(1)  320/   C0458 : 5284                                dc.w    z80_ptr(CPZ_LOOP02)
(1)  321/   C045A : 9F06 9C24 8006 9D04 	dc.b	nFs2, $06, nEb2, $24, nRst, $06, nE2, $04, nRst, $08, nE2, $0C
            C0462 : 8008 9D0C         
(1)  322/   C0466 : 9E04 8008 9E0C 9F04 	dc.b	nF2, $04, nRst, $08, nF2, $0C, nFs2, $04, nRst, $08, nFs2, $0C
            C046E : 8008 9F0C         
(1)  323/   C0472 : 9F04 8008 9F0C 9F04 	dc.b	nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C
            C047A : 8008 9F0C         
(1)  324/   C047E : 06AB 9F0C 9F04 8008 	dc.b	$06, nFs3, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04
            C0486 : 9F0C 9F04         
(1)  325/   C048A : 8008 9F0C 069C 129D 	dc.b	nRst, $08, nFs2, $0C, $06, nEb2, $12, nE2, $0C, nF2, nFs2, $04
            C0492 : 0C9E 9F04         
(1)  326/   C0496 : 8008 9F0C 9F04 8008 	dc.b	nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04
            C049E : 9F0C 9F04         
(1)  327/   C04A2 : 8008 9F0C 06AB 9F0C 	dc.b	nRst, $08, nFs2, $0C, $06, nFs3, nFs2, $0C, nE2, $04, nRst, $08
            C04AA : 9D04 8008         
(1)  328/   C04AE : 9D0C 9D04 8008 9D0C 	dc.b	nE2, $0C, nE2, $04, nRst, $08, nE2, $0C, nEb2, $04, nRst, $08
            C04B6 : 9C04 8008         
(1)  329/   C04BA : 9C0C 9C04 8008 9C0C 	dc.b	nEb2, $0C, nEb2, $04, nRst, $08, nEb2, $0C
(1)  330/   C04C2 :                     
(1)  331/   C04C2 :                     CPZ_Loop03:
(1)  332/   C04C2 : 9F04 8008 9F0C 9F04 	dc.b	nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C
            C04CA : 8008 9F0C         
(1)  333/   C04CE : 9F04 8008 9F0C 06AB 	dc.b	nFs2, $04, nRst, $08, nFs2, $0C, $06, nFs3, nFs2, $0C, nFs2, $04
            C04D6 : 9F0C 9F04         
(1)  334/   C04DA : 8008 9F0C 9F04 8008 	dc.b	nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, $06, nEb2
            C04E2 : 9F0C 069C         
(1)  335/   C04E6 : 129D 0C9E 9F04 8008 	dc.b	$12, nE2, $0C, nF2, nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04
            C04EE : 9F0C 9F04         
(1)  336/   C04F2 : 8008 9F0C 9F04 8008 	dc.b	nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, $06, nFs3
            C04FA : 9F0C 06AB         
(1)  337/   C04FE : 9F0C 9D04 8008 9D0C 	dc.b	nFs2, $0C, nE2, $04, nRst, $08, nE2, $0C, nE2, $04, nRst, $08
            C0506 : 9D04 8008         
(1)  338/   C050A : 9D0C 9C04 8008 9C0C 	dc.b	nE2, $0C, nEb2, $04, nRst, $08, nEb2, $0C, nEb2, $04, nRst, $08
            C0512 : 9C04 8008         
(1)  339/   C0516 : 9C0C                	dc.b	nEb2, $0C
(1)  340/   C0518 : (MACRO)             	smpsLoop            $00, $04, CPZ_Loop03
(1)  340/   C0518 : F7                          dc.b    $F7
(1)  340/   C0519 : 0004                        dc.b    $00,$04
(1)  340/   C051B : C284                                dc.w    z80_ptr(CPZ_LOOP03)
(1)  341/   C051D : 9D18 9E9F 0C80 2480 	dc.b	nE2, $18, nF2, nFs2, $0C, nRst, $24, nRst, $30, nRst, $24, nE3
            C0525 : 3080 24A9         
(1)  342/   C0529 : 06AB 9D18 9E9F 0C80 	dc.b	$06, nFs3, nE2, $18, nF2, nFs2, $0C, nRst, $24, nRst, $30, nRst
            C0531 : 2480 3080         
(1)  343/   C0535 : 18A9 06B5 A8B4 9D18 	dc.b	$18, nE3, $06, nE4, nEb3, nEb4, nE2, $18, nF2, nFs2, $0C, nRst
            C053D : 9E9F 0C80         
(1)  344/   C0541 : 2480 3080 18A9 0680 	dc.b	$24, nRst, $30, nRst, $18, nE3, $06, nRst, nE3, nFs3, nE2, $18
            C0549 : A9AB 9D18         
(1)  345/   C054D : 9E9F 0C80 249F 0C9C 	dc.b	nF2, nFs2, $0C, nRst, $24, nFs2, $0C, nEb2, $24, nE2, $18, nF2
            C0555 : 249D 189E         
(1)  346/   C0559 : 9F30 E730 8030 8080 	dc.b	nFs2, $30, smpsNoAttack, $30, nRst, $30, nRst, nRst, nRst, nRst, nA2, $06
            C0561 : 8080 A206         
(1)  347/   C0565 : AEA2 AEA1 ADA0 AC   	dc.b	nA3, nA2, nA3, nAb2, nAb3, nG2, nG3
(1)  348/   C056C : (MACRO)             	smpsJump            CPZ_Loop03
(1)  348/   C056C : F6                          dc.b    $F6
(1)  348/   C056D : C284                                dc.w    z80_ptr(CPZ_LOOP03)
(1)  349/   C056F :                     
(1)  350/   C056F :                     ; DAC Data
(1)  351/   C056F :                     CPZ_DAC:
(1)  352/   C056F : (MACRO)             	smpsCall            CPZ_Call00
(1)  352/   C056F : F8                          dc.b    $F8
(1)  352/   C0570 : 9281                                dc.w    z80_ptr(CPZ_CALL00)
(1)  353/   C0572 : (MACRO)             	smpsLoop            $00, $02, CPZ_DAC
(1)  353/   C0572 : F7                          dc.b    $F7
(1)  353/   C0573 : 0002                        dc.b    $00,$02
(1)  353/   C0575 : 6F85                                dc.w    z80_ptr(CPZ_DAC)
(1)  354/   C0577 :                     
(1)  355/   C0577 :                     CPZ_Loop00:
(1)  356/   C0577 : (MACRO)             	smpsCall            CPZ_Call00
(1)  356/   C0577 : F8                          dc.b    $F8
(1)  356/   C0578 : 9281                                dc.w    z80_ptr(CPZ_CALL00)
(1)  357/   C057A : (MACRO)             	smpsLoop            $00, $03, CPZ_Loop00
(1)  357/   C057A : F7                          dc.b    $F7
(1)  357/   C057B : 0003                        dc.b    $00,$03
(1)  357/   C057D : 7785                                dc.w    z80_ptr(CPZ_LOOP00)
(1)  358/   C057F : (MACRO)             	smpsCall            CPZ_Call01
(1)  358/   C057F : F8                          dc.b    $F8
(1)  358/   C0580 : B981                                dc.w    z80_ptr(CPZ_CALL01)
(1)  359/   C0582 :                     
(1)  360/   C0582 :                     CPZ_Loop01:
(1)  361/   C0582 : (MACRO)             	smpsCall            CPZ_Call00
(1)  361/   C0582 : F8                          dc.b    $F8
(1)  361/   C0583 : 9281                                dc.w    z80_ptr(CPZ_CALL00)
(1)  362/   C0585 : (MACRO)             	smpsLoop            $00, $02, CPZ_Loop01
(1)  362/   C0585 : F7                          dc.b    $F7
(1)  362/   C0586 : 0002                        dc.b    $00,$02
(1)  362/   C0588 : 8285                                dc.w    z80_ptr(CPZ_LOOP01)
(1)  363/   C058A : (MACRO)             	smpsCall            CPZ_Call01
(1)  363/   C058A : F8                          dc.b    $F8
(1)  363/   C058B : B981                                dc.w    z80_ptr(CPZ_CALL01)
(1)  364/   C058D : (MACRO)             	smpsJump            CPZ_Loop00
(1)  364/   C058D : F6                          dc.b    $F6
(1)  364/   C058E : 7785                                dc.w    z80_ptr(CPZ_LOOP00)
(1)  365/   C0590 :                     
(1)  366/   C0590 :                     ; PSG3 Data
(1)  367/   C0590 :                     CPZ_PSG3:
(1)  368/   C0590 : (MACRO)             	smpsPSGform         $E7
(1)  368/   C0590 : F3E7                        dc.b    $F3,$E7
(1)  369/   C0592 :                     
(1)  370/   C0592 :                     CPZ_Jump02:
(1)  371/   C0592 : C70C 06C7 C70C 06C7 	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG
            C059A : C70C 06C7         
(1)  372/   C059E : C70C 06C7 C70C 06C7 	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG
            C05A6 : C70C 06C7         
(1)  373/   C05AA : C70C 06C7 C7C7 C7C7 	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG
(1)  374/   C05B2 : (MACRO)             	smpsJump            CPZ_Jump02
(1)  374/   C05B2 : F6                          dc.b    $F6
(1)  374/   C05B3 : 9285                                dc.w    z80_ptr(CPZ_JUMP02)
(1)  375/   C05B5 :                     
(1)  376/   C05B5 :                     CPZ_Voices:
(1)  377/   C05B5 :                     ;	Voice $00
(1)  378/   C05B5 :                     ;	$3A
(1)  379/   C05B5 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  380/   C05B5 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1)  381/   C05B5 : (MACRO)             	smpsVcAlgorithm     $02
(1)  381/   C05B5 : =$2                 vcAlgorithm set $02
(1)  382/   C05B5 : (MACRO)             	smpsVcFeedback      $07
(1)  382/   C05B5 : =$7                 vcFeedback set $07
(1)  383/   C05B5 : (MACRO)             	smpsVcUnusedBits    $00
(1)  383/   C05B5 : =$0                 vcUnusedBits set $00
(1)  383/   C05B5 : =$0                 vcD1R1Unk set 0
(1)  383/   C05B5 : =$0                 vcD1R2Unk set 0
(1)  383/   C05B5 : =$0                 vcD1R3Unk set 0
(1)  383/   C05B5 : =$0                 vcD1R4Unk set 0
(1)  384/   C05B5 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  384/   C05B5 : =$0                 vcDT1 set $00
(1)  384/   C05B5 : =$0                 vcDT2 set $00
(1)  384/   C05B5 : =$0                 vcDT3 set $00
(1)  384/   C05B5 : =$0                 vcDT4 set $00
(1)  385/   C05B5 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  385/   C05B5 : =$1                 vcCF1 set $01
(1)  385/   C05B5 : =$1                 vcCF2 set $01
(1)  385/   C05B5 : =$7                 vcCF3 set $07
(1)  385/   C05B5 : =$1                 vcCF4 set $01
(1)  386/   C05B5 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  386/   C05B5 : =$1                 vcRS1 set $01
(1)  386/   C05B5 : =$2                 vcRS2 set $02
(1)  386/   C05B5 : =$2                 vcRS3 set $02
(1)  386/   C05B5 : =$2                 vcRS4 set $02
(1)  387/   C05B5 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  387/   C05B5 : =$13                vcAR1 set $13
(1)  387/   C05B5 : =$D                 vcAR2 set $0D
(1)  387/   C05B5 : =$E                 vcAR3 set $0E
(1)  387/   C05B5 : =$E                 vcAR4 set $0E
(1)  388/   C05B5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  388/   C05B5 : =$0                 vcAM1 set $00<<5
(1)  388/   C05B5 : =$0                 vcAM2 set $00<<5
(1)  388/   C05B5 : =$0                 vcAM3 set $00<<5
(1)  388/   C05B5 : =$0                 vcAM4 set $00<<5
(1)  389/   C05B5 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  389/   C05B5 : =$3                 vcD1R1 set $03
(1)  389/   C05B5 : =$E                 vcD1R2 set $0E
(1)  389/   C05B5 : =$E                 vcD1R3 set $0E
(1)  389/   C05B5 : =$E                 vcD1R4 set $0E
(1)  390/   C05B5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  390/   C05B5 : =$0                 vcD2R1 set $00
(1)  390/   C05B5 : =$0                 vcD2R2 set $00
(1)  390/   C05B5 : =$0                 vcD2R3 set $00
(1)  390/   C05B5 : =$0                 vcD2R4 set $00
(1)  391/   C05B5 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  391/   C05B5 : =$0                 vcDL1 set $00
(1)  391/   C05B5 : =$1                 vcDL2 set $01
(1)  391/   C05B5 : =$F                 vcDL3 set $0F
(1)  391/   C05B5 : =$1                 vcDL4 set $01
(1)  392/   C05B5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  392/   C05B5 : =$F                 vcRR1 set $0F
(1)  392/   C05B5 : =$F                 vcRR2 set $0F
(1)  392/   C05B5 : =$F                 vcRR3 set $0F
(1)  392/   C05B5 : =$F                 vcRR4 set $0F
(1)  393/   C05B5 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $17
(1)  393/   C05B5 : =$0                 vcTL1 set $00
(1)  393/   C05B5 : =$27                vcTL2 set $27
(1)  393/   C05B5 : =$28                vcTL3 set $28
(1)  393/   C05B5 : =$17                vcTL4 set $17
(1)  393/   C05B5 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  393/   C05B6 :                     ;   0     1     2     3     4     5     6     7
(1)  393/   C05B6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  393/   C05B6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  393/   C05B6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  393/   C05B6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  393/   C05B6 : =$80                vcTLMask1 set $80
(1)  393/   C05B6 :                     
(1)  393/   C05B6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  393/   C05B6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  393/   C05B6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  393/   C05B6 : =$80                vcTLMask1 set $80
(1)  393/   C05B6 : =$0                 vcTL1 set vcTL1&$7F
(1)  393/   C05B6 : =$27                vcTL2 set vcTL2&$7F
(1)  393/   C05B6 : =$28                vcTL3 set vcTL3&$7F
(1)  393/   C05B6 : =$17                vcTL4 set vcTL4&$7F
(1)  393/   C05B6 :                     
(1)  393/   C05B6 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  393/   C05BA : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  393/   C05BE : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  393/   C05C2 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  393/   C05C6 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  393/   C05CA : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  394/   C05CE :                     
(1)  395/   C05CE :                     ;	Voice $01
(1)  396/   C05CE :                     ;	$3C
(1)  397/   C05CE :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1)  398/   C05CE :                     ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $88, $16, $88
(1)  399/   C05CE : (MACRO)             	smpsVcAlgorithm     $04
(1)  399/   C05CE : =$4                 vcAlgorithm set $04
(1)  400/   C05CE : (MACRO)             	smpsVcFeedback      $07
(1)  400/   C05CE : =$7                 vcFeedback set $07
(1)  401/   C05CE : (MACRO)             	smpsVcUnusedBits    $00
(1)  401/   C05CE : =$0                 vcUnusedBits set $00
(1)  401/   C05CE : =$0                 vcD1R1Unk set 0
(1)  401/   C05CE : =$0                 vcD1R2Unk set 0
(1)  401/   C05CE : =$0                 vcD1R3Unk set 0
(1)  401/   C05CE : =$0                 vcD1R4Unk set 0
(1)  402/   C05CE : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1)  402/   C05CE : =$3                 vcDT1 set $03
(1)  402/   C05CE : =$5                 vcDT2 set $05
(1)  402/   C05CE : =$5                 vcDT3 set $05
(1)  402/   C05CE : =$3                 vcDT4 set $03
(1)  403/   C05CE : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1)  403/   C05CE : =$0                 vcCF1 set $00
(1)  403/   C05CE : =$0                 vcCF2 set $00
(1)  403/   C05CE : =$2                 vcCF3 set $02
(1)  403/   C05CE : =$1                 vcCF4 set $01
(1)  404/   C05CE : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  404/   C05CE : =$1                 vcRS1 set $01
(1)  404/   C05CE : =$1                 vcRS2 set $01
(1)  404/   C05CE : =$1                 vcRS3 set $01
(1)  404/   C05CE : =$1                 vcRS4 set $01
(1)  405/   C05CE : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1)  405/   C05CE : =$13                vcAR1 set $13
(1)  405/   C05CE : =$12                vcAR2 set $12
(1)  405/   C05CE : =$13                vcAR3 set $13
(1)  405/   C05CE : =$12                vcAR4 set $12
(1)  406/   C05CE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  406/   C05CE : =$0                 vcAM1 set $00<<5
(1)  406/   C05CE : =$0                 vcAM2 set $00<<5
(1)  406/   C05CE : =$0                 vcAM3 set $00<<5
(1)  406/   C05CE : =$0                 vcAM4 set $00<<5
(1)  407/   C05CE : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1)  407/   C05CE : =$0                 vcD1R1 set $00
(1)  407/   C05CE : =$8                 vcD1R2 set $08
(1)  407/   C05CE : =$0                 vcD1R3 set $00
(1)  407/   C05CE : =$8                 vcD1R4 set $08
(1)  408/   C05CE : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1)  408/   C05CE : =$0                 vcD2R1 set $00
(1)  408/   C05CE : =$4                 vcD2R2 set $04
(1)  408/   C05CE : =$0                 vcD2R3 set $00
(1)  408/   C05CE : =$4                 vcD2R4 set $04
(1)  409/   C05CE : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)  409/   C05CE : =$0                 vcDL1 set $00
(1)  409/   C05CE : =$1                 vcDL2 set $01
(1)  409/   C05CE : =$0                 vcDL3 set $00
(1)  409/   C05CE : =$1                 vcDL4 set $01
(1)  410/   C05CE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  410/   C05CE : =$F                 vcRR1 set $0F
(1)  410/   C05CE : =$F                 vcRR2 set $0F
(1)  410/   C05CE : =$F                 vcRR3 set $0F
(1)  410/   C05CE : =$F                 vcRR4 set $0F
(1)  411/   C05CE : (MACRO)             	smpsVcTotalLevel    $08, $16, $08, $1A
(1)  411/   C05CE : =$8                 vcTL1 set $08
(1)  411/   C05CE : =$16                vcTL2 set $16
(1)  411/   C05CE : =$8                 vcTL3 set $08
(1)  411/   C05CE : =$1A                vcTL4 set $1A
(1)  411/   C05CE : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  411/   C05CF :                     ;   0     1     2     3     4     5     6     7
(1)  411/   C05CF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  411/   C05CF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  411/   C05CF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  411/   C05CF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  411/   C05CF : =$80                vcTLMask1 set $80
(1)  411/   C05CF :                     
(1)  411/   C05CF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  411/   C05CF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  411/   C05CF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  411/   C05CF : =$80                vcTLMask1 set $80
(1)  411/   C05CF : =$8                 vcTL1 set vcTL1&$7F
(1)  411/   C05CF : =$16                vcTL2 set vcTL2&$7F
(1)  411/   C05CF : =$8                 vcTL3 set vcTL3&$7F
(1)  411/   C05CF : =$1A                vcTL4 set vcTL4&$7F
(1)  411/   C05CF :                     
(1)  411/   C05CF : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  411/   C05D3 : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  411/   C05D7 : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  411/   C05DB : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  411/   C05DF : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  411/   C05E3 : 1A88 1688                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  412/   C05E7 :                     
(1)  413/   C05E7 :                     ;	Voice $02
(1)  414/   C05E7 :                     ;	$3C
(1)  415/   C05E7 :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1)  416/   C05E7 :                     ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1C, $84, $14, $80
(1)  417/   C05E7 : (MACRO)             	smpsVcAlgorithm     $04
(1)  417/   C05E7 : =$4                 vcAlgorithm set $04
(1)  418/   C05E7 : (MACRO)             	smpsVcFeedback      $07
(1)  418/   C05E7 : =$7                 vcFeedback set $07
(1)  419/   C05E7 : (MACRO)             	smpsVcUnusedBits    $00
(1)  419/   C05E7 : =$0                 vcUnusedBits set $00
(1)  419/   C05E7 : =$0                 vcD1R1Unk set 0
(1)  419/   C05E7 : =$0                 vcD1R2Unk set 0
(1)  419/   C05E7 : =$0                 vcD1R3Unk set 0
(1)  419/   C05E7 : =$0                 vcD1R4Unk set 0
(1)  420/   C05E7 : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1)  420/   C05E7 : =$3                 vcDT1 set $03
(1)  420/   C05E7 : =$5                 vcDT2 set $05
(1)  420/   C05E7 : =$5                 vcDT3 set $05
(1)  420/   C05E7 : =$3                 vcDT4 set $03
(1)  421/   C05E7 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1)  421/   C05E7 : =$0                 vcCF1 set $00
(1)  421/   C05E7 : =$0                 vcCF2 set $00
(1)  421/   C05E7 : =$2                 vcCF3 set $02
(1)  421/   C05E7 : =$1                 vcCF4 set $01
(1)  422/   C05E7 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  422/   C05E7 : =$1                 vcRS1 set $01
(1)  422/   C05E7 : =$1                 vcRS2 set $01
(1)  422/   C05E7 : =$1                 vcRS3 set $01
(1)  422/   C05E7 : =$1                 vcRS4 set $01
(1)  423/   C05E7 : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1)  423/   C05E7 : =$13                vcAR1 set $13
(1)  423/   C05E7 : =$12                vcAR2 set $12
(1)  423/   C05E7 : =$13                vcAR3 set $13
(1)  423/   C05E7 : =$12                vcAR4 set $12
(1)  424/   C05E7 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  424/   C05E7 : =$0                 vcAM1 set $00<<5
(1)  424/   C05E7 : =$0                 vcAM2 set $00<<5
(1)  424/   C05E7 : =$0                 vcAM3 set $00<<5
(1)  424/   C05E7 : =$0                 vcAM4 set $00<<5
(1)  425/   C05E7 : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1)  425/   C05E7 : =$0                 vcD1R1 set $00
(1)  425/   C05E7 : =$8                 vcD1R2 set $08
(1)  425/   C05E7 : =$0                 vcD1R3 set $00
(1)  425/   C05E7 : =$8                 vcD1R4 set $08
(1)  426/   C05E7 : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1)  426/   C05E7 : =$0                 vcD2R1 set $00
(1)  426/   C05E7 : =$4                 vcD2R2 set $04
(1)  426/   C05E7 : =$0                 vcD2R3 set $00
(1)  426/   C05E7 : =$4                 vcD2R4 set $04
(1)  427/   C05E7 : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)  427/   C05E7 : =$0                 vcDL1 set $00
(1)  427/   C05E7 : =$1                 vcDL2 set $01
(1)  427/   C05E7 : =$0                 vcDL3 set $00
(1)  427/   C05E7 : =$1                 vcDL4 set $01
(1)  428/   C05E7 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  428/   C05E7 : =$F                 vcRR1 set $0F
(1)  428/   C05E7 : =$F                 vcRR2 set $0F
(1)  428/   C05E7 : =$F                 vcRR3 set $0F
(1)  428/   C05E7 : =$F                 vcRR4 set $0F
(1)  429/   C05E7 : (MACRO)             	smpsVcTotalLevel    $00, $14, $04, $1C
(1)  429/   C05E7 : =$0                 vcTL1 set $00
(1)  429/   C05E7 : =$14                vcTL2 set $14
(1)  429/   C05E7 : =$4                 vcTL3 set $04
(1)  429/   C05E7 : =$1C                vcTL4 set $1C
(1)  429/   C05E7 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  429/   C05E8 :                     ;   0     1     2     3     4     5     6     7
(1)  429/   C05E8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  429/   C05E8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  429/   C05E8 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  429/   C05E8 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  429/   C05E8 : =$80                vcTLMask1 set $80
(1)  429/   C05E8 :                     
(1)  429/   C05E8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  429/   C05E8 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  429/   C05E8 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  429/   C05E8 : =$80                vcTLMask1 set $80
(1)  429/   C05E8 : =$0                 vcTL1 set vcTL1&$7F
(1)  429/   C05E8 : =$14                vcTL2 set vcTL2&$7F
(1)  429/   C05E8 : =$4                 vcTL3 set vcTL3&$7F
(1)  429/   C05E8 : =$1C                vcTL4 set vcTL4&$7F
(1)  429/   C05E8 :                     
(1)  429/   C05E8 : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  429/   C05EC : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  429/   C05F0 : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  429/   C05F4 : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  429/   C05F8 : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  429/   C05FC : 1C84 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  430/   C0600 :                     
(1)  431/   C0600 :                     ;	Voice $03
(1)  432/   C0600 :                     ;	$3B
(1)  433/   C0600 :                     ;	$0F, $06, $01, $02, 	$DF, $1F, $1F, $DF, 	$0C, $00, $0A, $03
(1)  434/   C0600 :                     ;	$0F, $00, $00, $01, 	$F3, $05, $55, $5C, 	$22, $20, $22, $80
(1)  435/   C0600 : (MACRO)             	smpsVcAlgorithm     $03
(1)  435/   C0600 : =$3                 vcAlgorithm set $03
(1)  436/   C0600 : (MACRO)             	smpsVcFeedback      $07
(1)  436/   C0600 : =$7                 vcFeedback set $07
(1)  437/   C0600 : (MACRO)             	smpsVcUnusedBits    $00
(1)  437/   C0600 : =$0                 vcUnusedBits set $00
(1)  437/   C0600 : =$0                 vcD1R1Unk set 0
(1)  437/   C0600 : =$0                 vcD1R2Unk set 0
(1)  437/   C0600 : =$0                 vcD1R3Unk set 0
(1)  437/   C0600 : =$0                 vcD1R4Unk set 0
(1)  438/   C0600 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  438/   C0600 : =$0                 vcDT1 set $00
(1)  438/   C0600 : =$0                 vcDT2 set $00
(1)  438/   C0600 : =$0                 vcDT3 set $00
(1)  438/   C0600 : =$0                 vcDT4 set $00
(1)  439/   C0600 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $06, $0F
(1)  439/   C0600 : =$2                 vcCF1 set $02
(1)  439/   C0600 : =$1                 vcCF2 set $01
(1)  439/   C0600 : =$6                 vcCF3 set $06
(1)  439/   C0600 : =$F                 vcCF4 set $0F
(1)  440/   C0600 : (MACRO)             	smpsVcRateScale     $03, $00, $00, $03
(1)  440/   C0600 : =$3                 vcRS1 set $03
(1)  440/   C0600 : =$0                 vcRS2 set $00
(1)  440/   C0600 : =$0                 vcRS3 set $00
(1)  440/   C0600 : =$3                 vcRS4 set $03
(1)  441/   C0600 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  441/   C0600 : =$1F                vcAR1 set $1F
(1)  441/   C0600 : =$1F                vcAR2 set $1F
(1)  441/   C0600 : =$1F                vcAR3 set $1F
(1)  441/   C0600 : =$1F                vcAR4 set $1F
(1)  442/   C0600 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  442/   C0600 : =$0                 vcAM1 set $00<<5
(1)  442/   C0600 : =$0                 vcAM2 set $00<<5
(1)  442/   C0600 : =$0                 vcAM3 set $00<<5
(1)  442/   C0600 : =$0                 vcAM4 set $00<<5
(1)  443/   C0600 : (MACRO)             	smpsVcDecayRate1    $03, $0A, $00, $0C
(1)  443/   C0600 : =$3                 vcD1R1 set $03
(1)  443/   C0600 : =$A                 vcD1R2 set $0A
(1)  443/   C0600 : =$0                 vcD1R3 set $00
(1)  443/   C0600 : =$C                 vcD1R4 set $0C
(1)  444/   C0600 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $0F
(1)  444/   C0600 : =$1                 vcD2R1 set $01
(1)  444/   C0600 : =$0                 vcD2R2 set $00
(1)  444/   C0600 : =$0                 vcD2R3 set $00
(1)  444/   C0600 : =$F                 vcD2R4 set $0F
(1)  445/   C0600 : (MACRO)             	smpsVcDecayLevel    $05, $05, $00, $0F
(1)  445/   C0600 : =$5                 vcDL1 set $05
(1)  445/   C0600 : =$5                 vcDL2 set $05
(1)  445/   C0600 : =$0                 vcDL3 set $00
(1)  445/   C0600 : =$F                 vcDL4 set $0F
(1)  446/   C0600 : (MACRO)             	smpsVcReleaseRate   $0C, $05, $05, $03
(1)  446/   C0600 : =$C                 vcRR1 set $0C
(1)  446/   C0600 : =$5                 vcRR2 set $05
(1)  446/   C0600 : =$5                 vcRR3 set $05
(1)  446/   C0600 : =$3                 vcRR4 set $03
(1)  447/   C0600 : (MACRO)             	smpsVcTotalLevel    $00, $22, $20, $22
(1)  447/   C0600 : =$0                 vcTL1 set $00
(1)  447/   C0600 : =$22                vcTL2 set $22
(1)  447/   C0600 : =$20                vcTL3 set $20
(1)  447/   C0600 : =$22                vcTL4 set $22
(1)  447/   C0600 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  447/   C0601 :                     ;   0     1     2     3     4     5     6     7
(1)  447/   C0601 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  447/   C0601 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  447/   C0601 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  447/   C0601 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  447/   C0601 : =$80                vcTLMask1 set $80
(1)  447/   C0601 :                     
(1)  447/   C0601 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  447/   C0601 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  447/   C0601 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  447/   C0601 : =$80                vcTLMask1 set $80
(1)  447/   C0601 : =$0                 vcTL1 set vcTL1&$7F
(1)  447/   C0601 : =$22                vcTL2 set vcTL2&$7F
(1)  447/   C0601 : =$20                vcTL3 set vcTL3&$7F
(1)  447/   C0601 : =$22                vcTL4 set vcTL4&$7F
(1)  447/   C0601 :                     
(1)  447/   C0601 : 0F06 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  447/   C0605 : DF1F 1FDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  447/   C0609 : 0C00 0A03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  447/   C060D : 0F00 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  447/   C0611 : F305 555C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  447/   C0615 : 2220 2280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  448/   C0619 :                     
(1)  449/   C0619 :                     ;	Voice $04
(1)  450/   C0619 :                     ;	$20
(1)  451/   C0619 :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(1)  452/   C0619 :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$14, $37, $0F, $80
(1)  453/   C0619 : (MACRO)             	smpsVcAlgorithm     $00
(1)  453/   C0619 : =$0                 vcAlgorithm set $00
(1)  454/   C0619 : (MACRO)             	smpsVcFeedback      $04
(1)  454/   C0619 : =$4                 vcFeedback set $04
(1)  455/   C0619 : (MACRO)             	smpsVcUnusedBits    $00
(1)  455/   C0619 : =$0                 vcUnusedBits set $00
(1)  455/   C0619 : =$0                 vcD1R1Unk set 0
(1)  455/   C0619 : =$0                 vcD1R2Unk set 0
(1)  455/   C0619 : =$0                 vcD1R3Unk set 0
(1)  455/   C0619 : =$0                 vcD1R4Unk set 0
(1)  456/   C0619 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)  456/   C0619 : =$3                 vcDT1 set $03
(1)  456/   C0619 : =$3                 vcDT2 set $03
(1)  456/   C0619 : =$3                 vcDT3 set $03
(1)  456/   C0619 : =$3                 vcDT4 set $03
(1)  457/   C0619 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(1)  457/   C0619 : =$1                 vcCF1 set $01
(1)  457/   C0619 : =$0                 vcCF2 set $00
(1)  457/   C0619 : =$5                 vcCF3 set $05
(1)  457/   C0619 : =$6                 vcCF4 set $06
(1)  458/   C0619 : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1)  458/   C0619 : =$2                 vcRS1 set $02
(1)  458/   C0619 : =$2                 vcRS2 set $02
(1)  458/   C0619 : =$3                 vcRS3 set $03
(1)  458/   C0619 : =$3                 vcRS4 set $03
(1)  459/   C0619 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  459/   C0619 : =$1F                vcAR1 set $1F
(1)  459/   C0619 : =$1F                vcAR2 set $1F
(1)  459/   C0619 : =$1F                vcAR3 set $1F
(1)  459/   C0619 : =$1F                vcAR4 set $1F
(1)  460/   C0619 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  460/   C0619 : =$0                 vcAM1 set $00<<5
(1)  460/   C0619 : =$0                 vcAM2 set $00<<5
(1)  460/   C0619 : =$0                 vcAM3 set $00<<5
(1)  460/   C0619 : =$0                 vcAM4 set $00<<5
(1)  461/   C0619 : (MACRO)             	smpsVcDecayRate1    $06, $09, $06, $07
(1)  461/   C0619 : =$6                 vcD1R1 set $06
(1)  461/   C0619 : =$9                 vcD1R2 set $09
(1)  461/   C0619 : =$6                 vcD1R3 set $06
(1)  461/   C0619 : =$7                 vcD1R4 set $07
(1)  462/   C0619 : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1)  462/   C0619 : =$8                 vcD2R1 set $08
(1)  462/   C0619 : =$6                 vcD2R2 set $06
(1)  462/   C0619 : =$6                 vcD2R3 set $06
(1)  462/   C0619 : =$7                 vcD2R4 set $07
(1)  463/   C0619 : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1)  463/   C0619 : =$F                 vcDL1 set $0F
(1)  463/   C0619 : =$1                 vcDL2 set $01
(1)  463/   C0619 : =$1                 vcDL3 set $01
(1)  463/   C0619 : =$2                 vcDL4 set $02
(1)  464/   C0619 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  464/   C0619 : =$F                 vcRR1 set $0F
(1)  464/   C0619 : =$F                 vcRR2 set $0F
(1)  464/   C0619 : =$F                 vcRR3 set $0F
(1)  464/   C0619 : =$F                 vcRR4 set $0F
(1)  465/   C0619 : (MACRO)             	smpsVcTotalLevel    $00, $0F, $37, $14
(1)  465/   C0619 : =$0                 vcTL1 set $00
(1)  465/   C0619 : =$F                 vcTL2 set $0F
(1)  465/   C0619 : =$37                vcTL3 set $37
(1)  465/   C0619 : =$14                vcTL4 set $14
(1)  465/   C0619 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  465/   C061A :                     ;   0     1     2     3     4     5     6     7
(1)  465/   C061A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  465/   C061A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  465/   C061A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  465/   C061A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  465/   C061A : =$80                vcTLMask1 set $80
(1)  465/   C061A :                     
(1)  465/   C061A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  465/   C061A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  465/   C061A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  465/   C061A : =$80                vcTLMask1 set $80
(1)  465/   C061A : =$0                 vcTL1 set vcTL1&$7F
(1)  465/   C061A : =$F                 vcTL2 set vcTL2&$7F
(1)  465/   C061A : =$37                vcTL3 set vcTL3&$7F
(1)  465/   C061A : =$14                vcTL4 set vcTL4&$7F
(1)  465/   C061A :                     
(1)  465/   C061A : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  465/   C061E : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  465/   C0622 : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  465/   C0626 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  465/   C062A : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  465/   C062E : 1437 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  466/   C0632 :                     
(1)  467/   C0632 :                     ;	Voice $05
(1)  468/   C0632 :                     ;	$3A
(1)  469/   C0632 :                     ;	$00, $07, $00, $00, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  470/   C0632 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $32, $27, $80
(1)  471/   C0632 : (MACRO)             	smpsVcAlgorithm     $02
(1)  471/   C0632 : =$2                 vcAlgorithm set $02
(1)  472/   C0632 : (MACRO)             	smpsVcFeedback      $07
(1)  472/   C0632 : =$7                 vcFeedback set $07
(1)  473/   C0632 : (MACRO)             	smpsVcUnusedBits    $00
(1)  473/   C0632 : =$0                 vcUnusedBits set $00
(1)  473/   C0632 : =$0                 vcD1R1Unk set 0
(1)  473/   C0632 : =$0                 vcD1R2Unk set 0
(1)  473/   C0632 : =$0                 vcD1R3Unk set 0
(1)  473/   C0632 : =$0                 vcD1R4Unk set 0
(1)  474/   C0632 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  474/   C0632 : =$0                 vcDT1 set $00
(1)  474/   C0632 : =$0                 vcDT2 set $00
(1)  474/   C0632 : =$0                 vcDT3 set $00
(1)  474/   C0632 : =$0                 vcDT4 set $00
(1)  475/   C0632 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $07, $00
(1)  475/   C0632 : =$0                 vcCF1 set $00
(1)  475/   C0632 : =$0                 vcCF2 set $00
(1)  475/   C0632 : =$7                 vcCF3 set $07
(1)  475/   C0632 : =$0                 vcCF4 set $00
(1)  476/   C0632 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  476/   C0632 : =$1                 vcRS1 set $01
(1)  476/   C0632 : =$2                 vcRS2 set $02
(1)  476/   C0632 : =$2                 vcRS3 set $02
(1)  476/   C0632 : =$2                 vcRS4 set $02
(1)  477/   C0632 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  477/   C0632 : =$13                vcAR1 set $13
(1)  477/   C0632 : =$D                 vcAR2 set $0D
(1)  477/   C0632 : =$E                 vcAR3 set $0E
(1)  477/   C0632 : =$E                 vcAR4 set $0E
(1)  478/   C0632 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  478/   C0632 : =$0                 vcAM1 set $00<<5
(1)  478/   C0632 : =$0                 vcAM2 set $00<<5
(1)  478/   C0632 : =$0                 vcAM3 set $00<<5
(1)  478/   C0632 : =$0                 vcAM4 set $00<<5
(1)  479/   C0632 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  479/   C0632 : =$3                 vcD1R1 set $03
(1)  479/   C0632 : =$E                 vcD1R2 set $0E
(1)  479/   C0632 : =$E                 vcD1R3 set $0E
(1)  479/   C0632 : =$E                 vcD1R4 set $0E
(1)  480/   C0632 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  480/   C0632 : =$0                 vcD2R1 set $00
(1)  480/   C0632 : =$0                 vcD2R2 set $00
(1)  480/   C0632 : =$0                 vcD2R3 set $00
(1)  480/   C0632 : =$0                 vcD2R4 set $00
(1)  481/   C0632 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  481/   C0632 : =$0                 vcDL1 set $00
(1)  481/   C0632 : =$1                 vcDL2 set $01
(1)  481/   C0632 : =$F                 vcDL3 set $0F
(1)  481/   C0632 : =$1                 vcDL4 set $01
(1)  482/   C0632 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  482/   C0632 : =$F                 vcRR1 set $0F
(1)  482/   C0632 : =$F                 vcRR2 set $0F
(1)  482/   C0632 : =$F                 vcRR3 set $0F
(1)  482/   C0632 : =$F                 vcRR4 set $0F
(1)  483/   C0632 : (MACRO)             	smpsVcTotalLevel    $00, $27, $32, $18
(1)  483/   C0632 : =$0                 vcTL1 set $00
(1)  483/   C0632 : =$27                vcTL2 set $27
(1)  483/   C0632 : =$32                vcTL3 set $32
(1)  483/   C0632 : =$18                vcTL4 set $18
(1)  483/   C0632 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  483/   C0633 :                     ;   0     1     2     3     4     5     6     7
(1)  483/   C0633 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  483/   C0633 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  483/   C0633 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  483/   C0633 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  483/   C0633 : =$80                vcTLMask1 set $80
(1)  483/   C0633 :                     
(1)  483/   C0633 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  483/   C0633 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  483/   C0633 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  483/   C0633 : =$80                vcTLMask1 set $80
(1)  483/   C0633 : =$0                 vcTL1 set vcTL1&$7F
(1)  483/   C0633 : =$27                vcTL2 set vcTL2&$7F
(1)  483/   C0633 : =$32                vcTL3 set vcTL3&$7F
(1)  483/   C0633 : =$18                vcTL4 set vcTL4&$7F
(1)  483/   C0633 :                     
(1)  483/   C0633 : 0007 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  483/   C0637 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  483/   C063B : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  483/   C063F : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  483/   C0643 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  483/   C0647 : 1832 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  484/   C064B :                     
(1)  485/   C064B :                     
   51/   C064B :                        Music_0F:	include		"music-improved/8F - WFZ.asm"
(1)    1/   C064B :                     WFZ_Header:
(1)    2/   C064B : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C064B :                     
(1)    2/   C064B : =$2                 SourceDriver set 2
(1)    2/   C064B :                     
(1)    2/   C064B : =$0                 SourceSMPS2ASM set 0
(1)    2/   C064B :                     
(1)    2/   C064B : =$C064B             songStart set *
(1)    2/   C064B :                     
(1)    2/   C064B :                     
(1)    3/   C064B : (MACRO)             	smpsHeaderVoice     WFZ_Voices
(1)    3/   C064B : 148A                                dc.w    z80_ptr(WFZ_VOICES)
(1)    4/   C064D : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C064D : 0603                        dc.b    $06,$03
(1)    5/   C064F : (MACRO)             	smpsHeaderTempo     $01, $88
(1)    5/   C064F : 01                          dc.b    $01
(1)    5/   C0650 :  (MACRO-2)                  convertMainTempoMod $88
(1)    5/   C0650 : 78                                          dc.b    s2TempotoS3($88)
(1)    6/   C0651 :                     
(1)    7/   C0651 : (MACRO)             	smpsHeaderDAC       WFZ_DAC
(1)    7/   C0651 :  (MACRO-2)                  CheckedChannelPointer WFZ_DAC
(1)    7/   C0651 : 0B89                                dc.w    z80_ptr(WFZ_DAC)
(1)    7/   C0653 : 0000                                dc.w    $00
(1)    8/   C0655 : (MACRO)             	smpsHeaderFM        WFZ_FM1,	$00, $08
(1)    8/   C0655 :  (MACRO-2)                  CheckedChannelPointer WFZ_FM1
(1)    8/   C0655 : FC86                                dc.w    z80_ptr(WFZ_FM1)
(1)    8/   C0657 : 0008                        dc.b    $00,$08
(1)    9/   C0659 : (MACRO)             	smpsHeaderFM        WFZ_FM2,	$00, $06
(1)    9/   C0659 :  (MACRO-2)                  CheckedChannelPointer WFZ_FM2
(1)    9/   C0659 : 8387                                dc.w    z80_ptr(WFZ_FM2)
(1)    9/   C065B : 0006                        dc.b    $00,$06
(1)   10/   C065D : (MACRO)             	smpsHeaderFM        WFZ_FM3,	$0C, $06
(1)   10/   C065D :  (MACRO-2)                  CheckedChannelPointer WFZ_FM3
(1)   10/   C065D : 3588                                dc.w    z80_ptr(WFZ_FM3)
(1)   10/   C065F : 0C06                        dc.b    $0C,$06
(1)   11/   C0661 : (MACRO)             	smpsHeaderFM        WFZ_FM4,	$18, $08
(1)   11/   C0661 :  (MACRO-2)                  CheckedChannelPointer WFZ_FM4
(1)   11/   C0661 : 8189                                dc.w    z80_ptr(WFZ_FM4)
(1)   11/   C0663 : 1808                        dc.b    $18,$08
(1)   12/   C0665 : (MACRO)             	smpsHeaderFM        WFZ_FM5,	$00, $06
(1)   12/   C0665 :  (MACRO-2)                  CheckedChannelPointer WFZ_FM5
(1)   12/   C0665 : 7C86                                dc.w    z80_ptr(WFZ_FM5)
(1)   12/   C0667 : 0006                        dc.b    $00,$06
(1)   13/   C0669 : (MACRO)             	smpsHeaderPSG       WFZ_PSG1,	$00, $00, $00, $00
(1)   13/   C0669 :  (MACRO-2)                  CheckedChannelPointer WFZ_PSG1
(1)   13/   C0669 : 7B86                                dc.w    z80_ptr(WFZ_PSG1)
(1)   13/   C066B :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/   C066B : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   13/   C066C : 0000 00                     dc.b    $00,$00,$00
(1)   14/   C066F : (MACRO)             	smpsHeaderPSG       WFZ_PSG2,	$00, $00, $00, $00
(1)   14/   C066F :  (MACRO-2)                  CheckedChannelPointer WFZ_PSG2
(1)   14/   C066F : 7B86                                dc.w    z80_ptr(WFZ_PSG2)
(1)   14/   C0671 :  (MACRO-2)                  PSGPitchConvert $00
(1)   14/   C0671 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   14/   C0672 : 0000 00                     dc.b    $00,$00,$00
(1)   15/   C0675 : (MACRO)             	smpsHeaderPSG       WFZ_PSG3,	$00, $00, $00, $00
(1)   15/   C0675 :  (MACRO-2)                  CheckedChannelPointer WFZ_PSG3
(1)   15/   C0675 : 7B86                                dc.w    z80_ptr(WFZ_PSG3)
(1)   15/   C0677 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   C0677 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   C0678 : 0000 00                     dc.b    $00,$00,$00
(1)   16/   C067B :                     
(1)   17/   C067B :                     ; PSG1 Data
(1)   18/   C067B :                     WFZ_PSG1:
(1)   19/   C067B :                     ; PSG2 Data
(1)   20/   C067B :                     WFZ_PSG2:
(1)   21/   C067B :                     ; PSG3 Data
(1)   22/   C067B :                     WFZ_PSG3:
(1)   23/   C067B : (MACRO)             	smpsStop
(1)   23/   C067B : F2                          dc.b    $F2
(1)   24/   C067C :                     
(1)   25/   C067C :                     ; FM5 Data
(1)   26/   C067C :                     WFZ_FM5:
(1)   27/   C067C : (MACRO)             	smpsSetvoice        $00
(1)   27/   C067C :  (MACRO-2)                  smpsFMvoice $00
(1)   27/   C067C : EF00                                dc.b    $EF,$00
(1)   28/   C067E : (MACRO)             	smpsAlterNote       $01
(1)   28/   C067E :  (MACRO-2)                  smpsDetune      $01
(1)   28/   C067E : E101                        dc.b    $E1,$01
(1)   29/   C0680 : 8012                	dc.b	nRst, $12
(1)   30/   C0682 :                     
(1)   31/   C0682 :                     WFZ_Jump05:
(1)   32/   C0682 : (MACRO)             	smpsPan             panLeft, $00
(1)   32/   C0682 : =$0                 panNone set $00
(1)   32/   C0682 : =$40                panRight set $40
(1)   32/   C0682 : =$80                panLeft set $80
(1)   32/   C0682 : =$C0                panCentre set $C0
(1)   32/   C0682 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   32/   C0682 : E080                        dc.b $E0,PANLEFT+$00
(1)   33/   C0684 : (MACRO)             	smpsAlterVol        $06
(1)   33/   C0684 : E606                        dc.b    $E6,$06
(1)   34/   C0686 :                     
(1)   35/   C0686 :                     WFZ_Loop04:
(1)   36/   C0686 : C103 C1BE BEBA BABE 	dc.b	nE5, $03, nE5, nCs5, nCs5, nA4, nA4, nCs5, nCs5, nA4, nA4, nE4
            C068E : BEBA BAB5         
(1)   37/   C0692 : B5                  	dc.b	nE4
(1)   38/   C0693 : (MACRO)             	smpsLoop            $00, $07, WFZ_Loop04
(1)   38/   C0693 : F7                          dc.b    $F7
(1)   38/   C0694 : 0007                        dc.b    $00,$07
(1)   38/   C0696 : 8686                                dc.w    z80_ptr(WFZ_LOOP04)
(1)   39/   C0698 : C1C1 BEBE BABA      	dc.b	nE5, nE5, nCs5, nCs5, nA4, nA4
(1)   40/   C069E : (MACRO)             	smpsPan             panCenter, $00
(1)   40/   C069E : =$0                 panNone set $00
(1)   40/   C069E : =$40                panRight set $40
(1)   40/   C069E : =$80                panLeft set $80
(1)   40/   C069E : =$C0                panCentre set $C0
(1)   40/   C069E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   40/   C069E : E0C0                        dc.b $E0,PANCENTER+$00
(1)   41/   C06A0 : (MACRO)             	smpsAlterVol        $FA
(1)   41/   C06A0 : E6FA                        dc.b    $E6,$FA
(1)   42/   C06A2 : (MACRO)             	smpsAlterPitch      $F4
(1)   42/   C06A2 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   42/   C06A2 : FBF4                                dc.b    $FB,$F4
(1)   43/   C06A4 : B20C B306 B512 BA12 	dc.b	nCs4, $0C, nD4, $06, nE4, $12, nA4, $12, nAb4, $12, nFs4, $12
            C06AC : B912 B712         
(1)   44/   C06B0 : B512 B30C B206 B312 	dc.b	nE4, $12, nD4, $0C, nCs4, $06, nD4, $12, nD4, $0C, nE4, $06
            C06B8 : B30C B506         
(1)   45/   C06BC : B712 BCBA B7B7 12B9 	dc.b	nFs4, $12, nB4, nA4, nFs4, nFs4, $12, nAb4, $0C, nFs4, $06, nE4
            C06C4 : 0CB7 06B5         
(1)   46/   C06C8 : 24                  	dc.b	$24
(1)   47/   C06C9 : (MACRO)             	smpsAlterPitch      $0C
(1)   47/   C06C9 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   47/   C06C9 : FB0C                                dc.b    $FB,$0C
(1)   48/   C06CB : (MACRO)             	smpsPan             panLeft, $00
(1)   48/   C06CB : =$0                 panNone set $00
(1)   48/   C06CB : =$40                panRight set $40
(1)   48/   C06CB : =$80                panLeft set $80
(1)   48/   C06CB : =$C0                panCentre set $C0
(1)   48/   C06CB : =$C0                panCenter set $C0 ; silly Americans :U
(1)   48/   C06CB : E080                        dc.b $E0,PANLEFT+$00
(1)   49/   C06CD : (MACRO)             	smpsAlterVol        $06
(1)   49/   C06CD : E606                        dc.b    $E6,$06
(1)   50/   C06CF :                     
(1)   51/   C06CF :                     WFZ_Loop05:
(1)   52/   C06CF : BB03 BA             	dc.b	nBb4, $03, nA4
(1)   53/   C06D2 : (MACRO)             	smpsLoop            $00, $30, WFZ_Loop05
(1)   53/   C06D2 : F7                          dc.b    $F7
(1)   53/   C06D3 : 0030                        dc.b    $00,$30
(1)   53/   C06D5 : CF86                                dc.w    z80_ptr(WFZ_LOOP05)
(1)   54/   C06D7 : (MACRO)             	smpsAlterPitch      $F4
(1)   54/   C06D7 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   54/   C06D7 : FBF4                                dc.b    $FB,$F4
(1)   55/   C06D9 : (MACRO)             	smpsAlterVol        $FA
(1)   55/   C06D9 : E6FA                        dc.b    $E6,$FA
(1)   56/   C06DB : (MACRO)             	smpsPan             panCenter, $00
(1)   56/   C06DB : =$0                 panNone set $00
(1)   56/   C06DB : =$40                panRight set $40
(1)   56/   C06DB : =$80                panLeft set $80
(1)   56/   C06DB : =$C0                panCentre set $C0
(1)   56/   C06DB : =$C0                panCenter set $C0 ; silly Americans :U
(1)   56/   C06DB : E0C0                        dc.b $E0,PANCENTER+$00
(1)   57/   C06DD : B012 B2B3 B5B7 B9BA 	dc.b	nB3, $12, nCs4, nD4, nE4, nFs4, nAb4, nA4, nB4, nCs4, nD4, nE4
            C06E5 : BCB2 B3B5         
(1)   58/   C06E9 : B7B9 BABC BEBF 48C0 	dc.b	nFs4, nAb4, nA4, nB4, nCs5, nD5, $48, nEb5, nFs5, $24, nE5, nA5
            C06F1 : C324 C1C6         
(1)   59/   C06F5 : C524                	dc.b	nAb5, $24
(1)   60/   C06F7 : (MACRO)             	smpsAlterPitch      $0C
(1)   60/   C06F7 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   60/   C06F7 : FB0C                                dc.b    $FB,$0C
(1)   61/   C06F9 : (MACRO)             	smpsJump            WFZ_Jump05
(1)   61/   C06F9 : F6                          dc.b    $F6
(1)   61/   C06FA : 8286                                dc.w    z80_ptr(WFZ_JUMP05)
(1)   62/   C06FC :                     
(1)   63/   C06FC :                     ; FM1 Data
(1)   64/   C06FC :                     WFZ_FM1:
(1)   65/   C06FC : (MACRO)             	smpsSetvoice        $00
(1)   65/   C06FC :  (MACRO-2)                  smpsFMvoice $00
(1)   65/   C06FC : EF00                                dc.b    $EF,$00
(1)   66/   C06FE : (MACRO)             	smpsAlterNote       $FF
(1)   66/   C06FE :  (MACRO-2)                  smpsDetune      $FF
(1)   66/   C06FE : E1FF                        dc.b    $E1,$FF
(1)   67/   C0700 : 8012                	dc.b	nRst, $12
(1)   68/   C0702 :                     
(1)   69/   C0702 :                     WFZ_Jump04:
(1)   70/   C0702 : (MACRO)             	smpsPan             panRight, $00
(1)   70/   C0702 : =$0                 panNone set $00
(1)   70/   C0702 : =$40                panRight set $40
(1)   70/   C0702 : =$80                panLeft set $80
(1)   70/   C0702 : =$C0                panCentre set $C0
(1)   70/   C0702 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   70/   C0702 : E040                        dc.b $E0,PANRIGHT+$00
(1)   71/   C0704 : (MACRO)             	smpsAlterVol        $06
(1)   71/   C0704 : E606                        dc.b    $E6,$06
(1)   72/   C0706 :                     
(1)   73/   C0706 :                     WFZ_Loop02:
(1)   74/   C0706 : C103 C1BE BEBA BABE 	dc.b	nE5, $03, nE5, nCs5, nCs5, nA4, nA4, nCs5, nCs5, nA4, nA4, nE4
            C070E : BEBA BAB5         
(1)   75/   C0712 : B5                  	dc.b	nE4
(1)   76/   C0713 : (MACRO)             	smpsLoop            $00, $07, WFZ_Loop02
(1)   76/   C0713 : F7                          dc.b    $F7
(1)   76/   C0714 : 0007                        dc.b    $00,$07
(1)   76/   C0716 : 0687                                dc.w    z80_ptr(WFZ_LOOP02)
(1)   77/   C0718 : C1C1 BEBE BABA      	dc.b	nE5, nE5, nCs5, nCs5, nA4, nA4
(1)   78/   C071E : (MACRO)             	smpsPan             panCenter, $00
(1)   78/   C071E : =$0                 panNone set $00
(1)   78/   C071E : =$40                panRight set $40
(1)   78/   C071E : =$80                panLeft set $80
(1)   78/   C071E : =$C0                panCentre set $C0
(1)   78/   C071E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   78/   C071E : E0C0                        dc.b $E0,PANCENTER+$00
(1)   79/   C0720 : (MACRO)             	smpsAlterVol        $FA
(1)   79/   C0720 : E6FA                        dc.b    $E6,$FA
(1)   80/   C0722 : B20C B306 B50C 8006 	dc.b	nCs4, $0C, nD4, $06, nE4, $0C, nRst, $06, nA4, $0C, nRst, $06
            C072A : BA0C 8006         
(1)   81/   C072E : B909 80B7 0C80 06B5 	dc.b	nAb4, $09, nRst, nFs4, $0C, nRst, $06, nE4, $0C, nRst, $06, nD4
            C0736 : 0C80 06B3         
(1)   82/   C073A : 0CB2 06B3 0C80 06B3 	dc.b	$0C, nCs4, $06, nD4, $0C, nRst, $06, nD4, $0C, nE4, $06, nFs4
            C0742 : 0CB5 06B7         
(1)   83/   C0746 : 0980 BC80 BA80 B780 	dc.b	$09, nRst, nB4, nRst, nA4, nRst, nFs4, nRst, nFs4, $12, nAb4, $0C
            C074E : B712 B90C         
(1)   84/   C0752 : B706 B524           	dc.b	nFs4, $06, nE4, $24
(1)   85/   C0756 : (MACRO)             	smpsPan             panRight, $00
(1)   85/   C0756 : =$0                 panNone set $00
(1)   85/   C0756 : =$40                panRight set $40
(1)   85/   C0756 : =$80                panLeft set $80
(1)   85/   C0756 : =$C0                panCentre set $C0
(1)   85/   C0756 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   85/   C0756 : E040                        dc.b $E0,PANRIGHT+$00
(1)   86/   C0758 : (MACRO)             	smpsAlterVol        $06
(1)   86/   C0758 : E606                        dc.b    $E6,$06
(1)   87/   C075A :                     
(1)   88/   C075A :                     WFZ_Loop03:
(1)   89/   C075A : BB03 BA             	dc.b	nBb4, $03, nA4
(1)   90/   C075D : (MACRO)             	smpsLoop            $00, $30, WFZ_Loop03
(1)   90/   C075D : F7                          dc.b    $F7
(1)   90/   C075E : 0030                        dc.b    $00,$30
(1)   90/   C0760 : 5A87                                dc.w    z80_ptr(WFZ_LOOP03)
(1)   91/   C0762 : (MACRO)             	smpsPan             panCenter, $00
(1)   91/   C0762 : =$0                 panNone set $00
(1)   91/   C0762 : =$40                panRight set $40
(1)   91/   C0762 : =$80                panLeft set $80
(1)   91/   C0762 : =$C0                panCentre set $C0
(1)   91/   C0762 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   91/   C0762 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   92/   C0764 : (MACRO)             	smpsAlterVol        $FA
(1)   92/   C0764 : E6FA                        dc.b    $E6,$FA
(1)   93/   C0766 : B012 B2B3 B5B7 B9BA 	dc.b	nB3, $12, nCs4, nD4, nE4, nFs4, nAb4, nA4, nB4, nCs4, nD4, nE4
            C076E : BCB2 B3B5         
(1)   94/   C0772 : B7B9 BABC BEBF 48C0 	dc.b	nFs4, nAb4, nA4, nB4, nCs5, nD5, $48, nEb5, nFs5, $24, nE5, nA5
            C077A : C324 C1C6         
(1)   95/   C077E : C524                	dc.b	nAb5, $24
(1)   96/   C0780 : (MACRO)             	smpsJump            WFZ_Jump04
(1)   96/   C0780 : F6                          dc.b    $F6
(1)   96/   C0781 : 0287                                dc.w    z80_ptr(WFZ_JUMP04)
(1)   97/   C0783 :                     
(1)   98/   C0783 :                     ; FM2 Data
(1)   99/   C0783 :                     WFZ_FM2:
(1)  100/   C0783 : (MACRO)             	smpsSetvoice        $01
(1)  100/   C0783 :  (MACRO-2)                  smpsFMvoice $01
(1)  100/   C0783 : EF01                                dc.b    $EF,$01
(1)  101/   C0785 : 8012                	dc.b	nRst, $12
(1)  102/   C0787 :                     
(1)  103/   C0787 :                     WFZ_Jump03:
(1)  104/   C0787 : 805A                	dc.b	nRst, $5A
(1)  105/   C0789 : (MACRO)             	smpsCall            WFZ_Call03
(1)  105/   C0789 : F8                          dc.b    $F8
(1)  105/   C078A : 1E88                                dc.w    z80_ptr(WFZ_CALL03)
(1)  106/   C078C : 805A                	dc.b	nRst, $5A
(1)  107/   C078E : (MACRO)             	smpsCall            WFZ_Call03
(1)  107/   C078E : F8                          dc.b    $F8
(1)  107/   C078F : 1E88                                dc.w    z80_ptr(WFZ_CALL03)
(1)  108/   C0791 : 8012 A603 80A6 80A6 	dc.b	nRst, $12, nCs3, $03, nRst, nCs3, nRst, nCs3, nRst, nCs3, $0C, nRst
            C0799 : 80A6 0C80         
(1)  109/   C079D : 06A6 0F80 15        	dc.b	$06, nCs3, $0F, nRst, $15
(1)  110/   C07A2 : (MACRO)             	smpsCall            WFZ_Call04
(1)  110/   C07A2 : F8                          dc.b    $F8
(1)  110/   C07A3 : 2888                                dc.w    z80_ptr(WFZ_CALL04)
(1)  111/   C07A5 : 8012                	dc.b	nRst, $12
(1)  112/   C07A7 : (MACRO)             	smpsCall            WFZ_Call04
(1)  112/   C07A7 : F8                          dc.b    $F8
(1)  112/   C07A8 : 2888                                dc.w    z80_ptr(WFZ_CALL04)
(1)  113/   C07AA : 8012                	dc.b	nRst, $12
(1)  114/   C07AC : (MACRO)             	smpsCall            WFZ_Call04
(1)  114/   C07AC : F8                          dc.b    $F8
(1)  114/   C07AD : 2888                                dc.w    z80_ptr(WFZ_CALL04)
(1)  115/   C07AF :                     
(1)  116/   C07AF :                     WFZ_Loop01:
(1)  117/   C07AF : B006 AC0C AF06 AA0C 	dc.b	nB3, $06, nG3, $0C, nBb3, $06, nF3, $0C, nAb3, $06, nE3, $66
            C07B7 : AD06 A966         
(1)  118/   C07BB : (MACRO)             	smpsLoop            $00, $02, WFZ_Loop01
(1)  118/   C07BB : F7                          dc.b    $F7
(1)  118/   C07BC : 0002                        dc.b    $00,$02
(1)  118/   C07BE : AF87                                dc.w    z80_ptr(WFZ_LOOP01)
(1)  119/   C07C0 : 8012 A703 80A7 80A7 	dc.b	nRst, $12, nD3, $03, nRst, nD3, nRst, nD3, nRst, nD3, $24, nRst
            C07C8 : 80A7 2480         
(1)  120/   C07CC : 12A7 0380 A480 A780 	dc.b	$12, nD3, $03, nRst, nB2, nRst, nD3, nRst, nFs3, $24, nRst, $12
            C07D4 : AB24 8012         
(1)  121/   C07D8 : A903 80A9 80A9 80A9 	dc.b	nE3, $03, nRst, nE3, nRst, nE3, nRst, nE3, $24, nRst, $12, nE3
            C07E0 : 2480 12A9         
(1)  122/   C07E4 : 0380 A680 A980 AD24 	dc.b	$03, nRst, nCs3, nRst, nE3, nRst, nAb3, $24, nRst, $12, nFs3, $03
            C07EC : 8012 AB03         
(1)  123/   C07F0 : 80AB 80AB 80AB 2480 	dc.b	nRst, nFs3, nRst, nFs3, nRst, nFs3, $24, nRst, $12, nFs3, $03, nRst
            C07F8 : 12AB 0380         
(1)  124/   C07FC : AB80 AB80 AB24 8012 	dc.b	nFs3, nRst, nFs3, nRst, nFs3, $24, nRst, $12, nA3, $03, nRst, nA3
            C0804 : AE03 80AE         
(1)  125/   C0808 : 80AE 80AE 24B0 0C80 	dc.b	nRst, nA3, nRst, nA3, $24, nB3, $0C, nRst, $06, nB3, $0C, nRst
            C0810 : 06B0 0C80         
(1)  126/   C0814 : 06B0 0C80 06B0 12   	dc.b	$06, nB3, $0C, nRst, $06, nB3, $12
(1)  127/   C081B : (MACRO)             	smpsJump            WFZ_Jump03
(1)  127/   C081B : F6                          dc.b    $F6
(1)  127/   C081C : 8787                                dc.w    z80_ptr(WFZ_JUMP03)
(1)  128/   C081E :                     
(1)  129/   C081E :                     WFZ_Call03:
(1)  130/   C081E : A403 80A6 80A7 80A6 	dc.b	nB2, $03, nRst, nCs3, nRst, nD3, nRst, nCs3, $24
            C0826 : 24               
(1)  131/   C0827 : (MACRO)             	smpsReturn
(1)  131/   C0827 : F9                                  dc.b    $F9
(1)  132/   C0828 :                     
(1)  133/   C0828 :                     WFZ_Call04:
(1)  134/   C0828 : A703 80A7 80A7 80A7 	dc.b	nD3, $03, nRst, nD3, nRst, nD3, nRst, nD3, $09, nRst, nD3, $12
            C0830 : 0980 A712         
(1)  135/   C0834 : (MACRO)             	smpsReturn
(1)  135/   C0834 : F9                                  dc.b    $F9
(1)  136/   C0835 :                     
(1)  137/   C0835 :                     ; FM3 Data
(1)  138/   C0835 :                     WFZ_FM3:
(1)  139/   C0835 : (MACRO)             	smpsSetvoice        $02
(1)  139/   C0835 :  (MACRO-2)                  smpsFMvoice $02
(1)  139/   C0835 : EF02                                dc.b    $EF,$02
(1)  140/   C0837 : 8012                	dc.b	nRst, $12
(1)  141/   C0839 :                     
(1)  142/   C0839 :                     WFZ_Jump02:
(1)  143/   C0839 : (MACRO)             	smpsAlterVol        $FC
(1)  143/   C0839 : E6FC                        dc.b    $E6,$FC
(1)  144/   C083B :                     
(1)  145/   C083B :                     WFZ_Loop00:
(1)  146/   C083B : AE06 8003 AEAE 80AE 	dc.b	nA3, $06, nRst, $03, nA3, nA3, nRst, nA3, nRst, nE3, nRst, nA3
            C0843 : 80A9 80AE         
(1)  147/   C0847 : 80B2 80B0 80AE 80B0 	dc.b	nRst, nCs4, nRst, nB3, nRst, nA3, nRst, nB3, nRst, nCs4, nRst, nD4
            C084F : 80B2 80B3         
(1)  148/   C0853 : 80B2 48             	dc.b	nRst, nCs4, $48
(1)  149/   C0856 : (MACRO)             	smpsLoop            $00, $02, WFZ_Loop00
(1)  149/   C0856 : F7                          dc.b    $F7
(1)  149/   C0857 : 0002                        dc.b    $00,$02
(1)  149/   C0859 : 3B88                                dc.w    z80_ptr(WFZ_LOOP00)
(1)  150/   C085B : (MACRO)             	smpsAlterVol        $04
(1)  150/   C085B : E604                        dc.b    $E6,$04
(1)  151/   C085D : 8012 A903 80A9 80A9 	dc.b	nRst, $12, nE3, $03, nRst, nE3, nRst, nE3, nRst, nE3, $09, nRst
            C0865 : 80A9 0980         
(1)  152/   C0869 : A90F 8015 AB03 80AB 	dc.b	nE3, $0F, nRst, $15, nFs3, $03, nRst, nFs3, nRst, nFs3, nRst, nFs3
            C0871 : 80AB 80AB         
(1)  153/   C0875 : 0980 AB0F 8015 AB03 	dc.b	$09, nRst, nFs3, $0F, nRst, $15, nFs3, $03, nRst, nFs3, nRst, nFs3
            C087D : 80AB 80AB         
(1)  154/   C0881 : 80AB 0980 AB0F 8015 	dc.b	nRst, nFs3, $09, nRst, nFs3, $0F, nRst, $15, nAb3, $03, nRst, nAb3
            C0889 : AD03 80AD         
(1)  155/   C088D : 80AD 80AD 0980 AD0C 	dc.b	nRst, nAb3, nRst, nAb3, $09, nRst, nAb3, $0C, nRst, $60, nRst, nRst
            C0895 : 8060 8080         
(1)  156/   C0899 : 8018 B003 80B0 80B0 	dc.b	nRst, $18, nB3, $03, nRst, nB3, nRst, nB3, nRst, nB3, $24, nRst
            C08A1 : 80B0 2480         
(1)  157/   C08A5 : 12B0 0380 AB80 B080 	dc.b	$12, nB3, $03, nRst, nFs3, nRst, nB3, nRst, nD4, $24, nRst, $12
            C08AD : B324 8012         
(1)  158/   C08B1 : B203 80B2 80B2 80B2 	dc.b	nCs4, $03, nRst, nCs4, nRst, nCs4, nRst, nCs4, $24, nRst, $12, nCs4
            C08B9 : 2480 12B2         
(1)  159/   C08BD : 0380 AD80 B280 B524 	dc.b	$03, nRst, nAb3, nRst, nCs4, nRst, nE4, $24, nRst, $12, nD4, $03
            C08C5 : 8012 B303         
(1)  160/   C08C9 : 80B3 B3B3 80B3 80AE 	dc.b	nRst, nD4, nD4, nD4, nRst, nD4, nRst, nA3, nRst, nB3, nRst, nD4
            C08D1 : 80B0 80B3         
(1)  161/   C08D5 : 1580 0FB4 0380 B4B4 	dc.b	$15, nRst, $0F, nEb4, $03, nRst, nEb4, nEb4, nEb4, nRst, nEb4, nRst
            C08DD : B480 B480         
(1)  162/   C08E1 : AE80 B080 B415 800F 	dc.b	nA3, nRst, nB3, nRst, nEb4, $15, nRst, $0F, nE4, $03, nRst, nE4
            C08E9 : B503 80B5         
(1)  163/   C08ED : 0980 03B5 80B5 80B5 	dc.b	$09, nRst, $03, nE4, nRst, nE4, nRst, nE4, nRst, nE4, nRst, nE4
            C08F5 : 80B5 80B5         
(1)  164/   C08F9 : 80B5 80B5 12B5 0C80 	dc.b	nRst, nE4, nRst, nE4, $12, nE4, $0C, nRst, $06, nE4, $0C, nRst
            C0901 : 06B5 0C80         
(1)  165/   C0905 : 06B5 12             	dc.b	$06, nE4, $12
(1)  166/   C0908 : (MACRO)             	smpsJump            WFZ_Jump02
(1)  166/   C0908 : F6                          dc.b    $F6
(1)  166/   C0909 : 3988                                dc.w    z80_ptr(WFZ_JUMP02)
(1)  167/   C090B :                     
(1)  168/   C090B :                     ; DAC Data
(1)  169/   C090B :                     WFZ_DAC:
(1)  170/   C090B : 8B06 8B8B           	dc.b	dVLowTimpani, $06, dVLowTimpani, dVLowTimpani
(1)  171/   C090F :                     
(1)  172/   C090F :                     WFZ_Jump00:
(1)  173/   C090F : (MACRO)             	smpsCall            WFZ_Call00
(1)  173/   C090F : F8                          dc.b    $F8
(1)  173/   C0910 : 6A89                                dc.w    z80_ptr(WFZ_CALL00)
(1)  174/   C0912 : 8906                	dc.b	dMidTimpani, $06
(1)  175/   C0914 : (MACRO)             	smpsCall            WFZ_Call00
(1)  175/   C0914 : F8                          dc.b    $F8
(1)  175/   C0915 : 6A89                                dc.w    z80_ptr(WFZ_CALL00)
(1)  176/   C0917 : 8B06 8B36 8912 8B36 	dc.b	dVLowTimpani, $06, dVLowTimpani, $36, dMidTimpani, $12, dVLowTimpani, $36, dMidTimpani, $12, dVLowTimpani, $36
            C091F : 8912 8B36         
(1)  177/   C0923 : 8906 8989 8B36 8B06 	dc.b	dMidTimpani, $06, dMidTimpani, dMidTimpani, dVLowTimpani, $36, dVLowTimpani, $06, dVLowTimpani, dVLowTimpani, $60
            C092B : 8B8B 60            
(1)  178/   C092E : (MACRO)             	smpsCall            WFZ_Call01
(1)  178/   C092E : F8                          dc.b    $F8
(1)  178/   C092F : 7689                                dc.w    z80_ptr(WFZ_CALL01)
(1)  179/   C0931 : 8B5A                	dc.b	dVLowTimpani, $5A
(1)  180/   C0933 : (MACRO)             	smpsCall            WFZ_Call01
(1)  180/   C0933 : F8                          dc.b    $F8
(1)  180/   C0934 : 7689                                dc.w    z80_ptr(WFZ_CALL01)
(1)  181/   C0936 : 8B36 8B06 8B8B 8936 	dc.b	dVLowTimpani, $36, dVLowTimpani, $06, dVLowTimpani, dVLowTimpani, dMidTimpani, $36, dMidTimpani, $12, dVLowTimpani, $36
            C093E : 8912 8B36         
(1)  182/   C0942 : 8906 8989 8B36 8906 	dc.b	dMidTimpani, $06, dMidTimpani, dMidTimpani, dVLowTimpani, $36, dMidTimpani, $06, dVLowTimpani, dMidTimpani, dVLowTimpani, $36
            C094A : 8B89 8B36         
(1)  183/   C094E : 8B06 8B8B 8936 8906 	dc.b	dVLowTimpani, $06, dVLowTimpani, dVLowTimpani, dMidTimpani, $36, dMidTimpani, $06, dVLowTimpani, $0C, dMidTimpani, $12
            C0956 : 8B0C 8912         
(1)  184/   C095A : 8B89 8B89 098B 898B 	dc.b	dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, $09, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani
            C0962 : 898B 898B         
(1)  185/   C0966 : 09                  	dc.b	$09
(1)  186/   C0967 : (MACRO)             	smpsJump            WFZ_Jump00
(1)  186/   C0967 : F6                          dc.b    $F6
(1)  186/   C0968 : 0F89                                dc.w    z80_ptr(WFZ_JUMP00)
(1)  187/   C096A :                     
(1)  188/   C096A :                     WFZ_Call00:
(1)  189/   C096A : 895A 8906 8B89 8B89 	dc.b	dMidTimpani, $5A, dMidTimpani, $06, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani
            C0972 : 8B89 8B            
(1)  190/   C0975 : (MACRO)             	smpsReturn
(1)  190/   C0975 : F9                                  dc.b    $F9
(1)  191/   C0976 :                     
(1)  192/   C0976 :                     WFZ_Call01:
(1)  193/   C0976 : 8906 8B89 8B89 8B89 	dc.b	dMidTimpani, $06, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani
            C097E : 8B89               
(1)  194/   C0980 : (MACRO)             	smpsReturn
(1)  194/   C0980 : F9                                  dc.b    $F9
(1)  195/   C0981 :                     
(1)  196/   C0981 :                     ; FM4 Data
(1)  197/   C0981 :                     WFZ_FM4:
(1)  198/   C0981 : (MACRO)             	smpsSetvoice        $03
(1)  198/   C0981 :  (MACRO-2)                  smpsFMvoice $03
(1)  198/   C0981 : EF03                                dc.b    $EF,$03
(1)  199/   C0983 : (MACRO)             	smpsCall            WFZ_Call02
(1)  199/   C0983 : F8                          dc.b    $F8
(1)  199/   C0984 : 0F8A                                dc.w    z80_ptr(WFZ_CALL02)
(1)  200/   C0986 :                     
(1)  201/   C0986 :                     WFZ_Jump01:
(1)  202/   C0986 : 9678 8006           	dc.b	nA1, $78, nRst, $06
(1)  203/   C098A : (MACRO)             	smpsCall            WFZ_Call02
(1)  203/   C098A : F8                          dc.b    $F8
(1)  203/   C098B : 0F8A                                dc.w    z80_ptr(WFZ_CALL02)
(1)  204/   C098D : 9678 8006           	dc.b	nA1, $78, nRst, $06
(1)  205/   C0991 : (MACRO)             	smpsCall            WFZ_Call02
(1)  205/   C0991 : F8                          dc.b    $F8
(1)  205/   C0992 : 0F8A                                dc.w    z80_ptr(WFZ_CALL02)
(1)  206/   C0994 : 9636 9712 9836 9312 	dc.b	nA1, $36, nBb1, $12, nB1, $36, nFs1, $12, nB1, $36, nFs1, $12
            C099C : 9836 9312         
(1)  207/   C09A0 : 913C 800C 9106 9294 	dc.b	nE1, $3C, nRst, $0C, nE1, $06, nF1, nG1, nA1, nG1, nF1, nE1
            C09A8 : 9694 9291         
(1)  208/   C09AC : 368F 0691 9291 1E80 	dc.b	$36, nD1, $06, nE1, nF1, nE1, $1E, nRst, $06, nE1, nF1, nG1
            C09B4 : 0691 9294         
(1)  209/   C09B8 : 9694 9291 3698 0695 	dc.b	nA1, nG1, nF1, nE1, $36, nB1, $06, nAb1, nF1, nE1, $0C, nRst
            C09C0 : 9291 0C80         
(1)  210/   C09C4 : 06                  	dc.b	$06
(1)  211/   C09C5 : (MACRO)             	smpsCall            WFZ_Call02
(1)  211/   C09C5 : F8                          dc.b    $F8
(1)  211/   C09C6 : 0F8A                                dc.w    z80_ptr(WFZ_CALL02)
(1)  212/   C09C8 : 9836 9303 8093 8093 	dc.b	nB1, $36, nFs1, $03, nRst, nFs1, nRst, nFs1, nRst, nB1, $36, nB1
            C09D0 : 8098 3698         
(1)  213/   C09D4 : 0380 9380 9880 9A36 	dc.b	$03, nRst, nFs1, nRst, nB1, nRst, nCs2, $36, nAb1, $03, nRst, nAb1
            C09DC : 9503 8095         
(1)  214/   C09E0 : 8095 809A 369A 0380 	dc.b	nRst, nAb1, nRst, nCs2, $36, nCs2, $03, nRst, nAb1, nRst, nCs2, nRst
            C09E8 : 9580 9A80         
(1)  215/   C09EC : 8F36 8F03 808F 808F 	dc.b	nD1, $36, nD1, $03, nRst, nD1, nRst, nD1, nRst, nEb1, $36, nEb1
            C09F4 : 8090 3690         
(1)  216/   C09F8 : 0380 8F80 9080 9136 	dc.b	$03, nRst, nD1, nRst, nEb1, nRst, nE1, $36, nB1, $03, nRst, nAb1
            C0A00 : 9803 8095         
(1)  217/   C0A04 : 8093 8091 36        	dc.b	nRst, nFs1, nRst, nE1, $36
(1)  218/   C0A09 : (MACRO)             	smpsCall            WFZ_Call02
(1)  218/   C0A09 : F8                          dc.b    $F8
(1)  218/   C0A0A : 0F8A                                dc.w    z80_ptr(WFZ_CALL02)
(1)  219/   C0A0C : (MACRO)             	smpsJump            WFZ_Jump01
(1)  219/   C0A0C : F6                          dc.b    $F6
(1)  219/   C0A0D : 8689                                dc.w    z80_ptr(WFZ_JUMP01)
(1)  220/   C0A0F :                     
(1)  221/   C0A0F :                     WFZ_Call02:
(1)  222/   C0A0F : 9106 9191           	dc.b	nE1, $06, nE1, nE1
(1)  223/   C0A13 : (MACRO)             	smpsReturn
(1)  223/   C0A13 : F9                                  dc.b    $F9
(1)  224/   C0A14 :                     
(1)  225/   C0A14 :                     WFZ_Voices:
(1)  226/   C0A14 :                     ;	Voice $00
(1)  227/   C0A14 :                     ;	$3A
(1)  228/   C0A14 :                     ;	$01, $02, $01, $02, 	$8E, $8E, $8D, $89, 	$0E, $0E, $0E, $16
(1)  229/   C0A14 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1E, $20, $26, $88
(1)  230/   C0A14 : (MACRO)             	smpsVcAlgorithm     $02
(1)  230/   C0A14 : =$2                 vcAlgorithm set $02
(1)  231/   C0A14 : (MACRO)             	smpsVcFeedback      $07
(1)  231/   C0A14 : =$7                 vcFeedback set $07
(1)  232/   C0A14 : (MACRO)             	smpsVcUnusedBits    $00
(1)  232/   C0A14 : =$0                 vcUnusedBits set $00
(1)  232/   C0A14 : =$0                 vcD1R1Unk set 0
(1)  232/   C0A14 : =$0                 vcD1R2Unk set 0
(1)  232/   C0A14 : =$0                 vcD1R3Unk set 0
(1)  232/   C0A14 : =$0                 vcD1R4Unk set 0
(1)  233/   C0A14 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  233/   C0A14 : =$0                 vcDT1 set $00
(1)  233/   C0A14 : =$0                 vcDT2 set $00
(1)  233/   C0A14 : =$0                 vcDT3 set $00
(1)  233/   C0A14 : =$0                 vcDT4 set $00
(1)  234/   C0A14 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $02, $01
(1)  234/   C0A14 : =$2                 vcCF1 set $02
(1)  234/   C0A14 : =$1                 vcCF2 set $01
(1)  234/   C0A14 : =$2                 vcCF3 set $02
(1)  234/   C0A14 : =$1                 vcCF4 set $01
(1)  235/   C0A14 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(1)  235/   C0A14 : =$2                 vcRS1 set $02
(1)  235/   C0A14 : =$2                 vcRS2 set $02
(1)  235/   C0A14 : =$2                 vcRS3 set $02
(1)  235/   C0A14 : =$2                 vcRS4 set $02
(1)  236/   C0A14 : (MACRO)             	smpsVcAttackRate    $09, $0D, $0E, $0E
(1)  236/   C0A14 : =$9                 vcAR1 set $09
(1)  236/   C0A14 : =$D                 vcAR2 set $0D
(1)  236/   C0A14 : =$E                 vcAR3 set $0E
(1)  236/   C0A14 : =$E                 vcAR4 set $0E
(1)  237/   C0A14 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  237/   C0A14 : =$0                 vcAM1 set $00<<5
(1)  237/   C0A14 : =$0                 vcAM2 set $00<<5
(1)  237/   C0A14 : =$0                 vcAM3 set $00<<5
(1)  237/   C0A14 : =$0                 vcAM4 set $00<<5
(1)  238/   C0A14 : (MACRO)             	smpsVcDecayRate1    $16, $0E, $0E, $0E
(1)  238/   C0A14 : =$16                vcD1R1 set $16
(1)  238/   C0A14 : =$E                 vcD1R2 set $0E
(1)  238/   C0A14 : =$E                 vcD1R3 set $0E
(1)  238/   C0A14 : =$E                 vcD1R4 set $0E
(1)  239/   C0A14 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  239/   C0A14 : =$0                 vcD2R1 set $00
(1)  239/   C0A14 : =$0                 vcD2R2 set $00
(1)  239/   C0A14 : =$0                 vcD2R3 set $00
(1)  239/   C0A14 : =$0                 vcD2R4 set $00
(1)  240/   C0A14 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  240/   C0A14 : =$0                 vcDL1 set $00
(1)  240/   C0A14 : =$0                 vcDL2 set $00
(1)  240/   C0A14 : =$0                 vcDL3 set $00
(1)  240/   C0A14 : =$0                 vcDL4 set $00
(1)  241/   C0A14 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  241/   C0A14 : =$F                 vcRR1 set $0F
(1)  241/   C0A14 : =$F                 vcRR2 set $0F
(1)  241/   C0A14 : =$F                 vcRR3 set $0F
(1)  241/   C0A14 : =$F                 vcRR4 set $0F
(1)  242/   C0A14 : (MACRO)             	smpsVcTotalLevel    $08, $26, $20, $1E
(1)  242/   C0A14 : =$8                 vcTL1 set $08
(1)  242/   C0A14 : =$26                vcTL2 set $26
(1)  242/   C0A14 : =$20                vcTL3 set $20
(1)  242/   C0A14 : =$1E                vcTL4 set $1E
(1)  242/   C0A14 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  242/   C0A15 :                     ;   0     1     2     3     4     5     6     7
(1)  242/   C0A15 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  242/   C0A15 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  242/   C0A15 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  242/   C0A15 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  242/   C0A15 : =$80                vcTLMask1 set $80
(1)  242/   C0A15 :                     
(1)  242/   C0A15 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  242/   C0A15 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  242/   C0A15 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  242/   C0A15 : =$80                vcTLMask1 set $80
(1)  242/   C0A15 : =$8                 vcTL1 set vcTL1&$7F
(1)  242/   C0A15 : =$26                vcTL2 set vcTL2&$7F
(1)  242/   C0A15 : =$20                vcTL3 set vcTL3&$7F
(1)  242/   C0A15 : =$1E                vcTL4 set vcTL4&$7F
(1)  242/   C0A15 :                     
(1)  242/   C0A15 : 0102 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  242/   C0A19 : 8E8E 8D89                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  242/   C0A1D : 0E0E 0E16                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  242/   C0A21 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  242/   C0A25 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  242/   C0A29 : 1E20 2688                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  243/   C0A2D :                     
(1)  244/   C0A2D :                     ;	Voice $01
(1)  245/   C0A2D :                     ;	$3D
(1)  246/   C0A2D :                     ;	$01, $01, $02, $01, 	$4C, $0F, $50, $12, 	$0B, $05, $01, $02
(1)  247/   C0A2D :                     ;	$01, $00, $00, $00, 	$20, $24, $24, $14, 	$1D, $84, $88, $8A
(1)  248/   C0A2D : (MACRO)             	smpsVcAlgorithm     $05
(1)  248/   C0A2D : =$5                 vcAlgorithm set $05
(1)  249/   C0A2D : (MACRO)             	smpsVcFeedback      $07
(1)  249/   C0A2D : =$7                 vcFeedback set $07
(1)  250/   C0A2D : (MACRO)             	smpsVcUnusedBits    $00
(1)  250/   C0A2D : =$0                 vcUnusedBits set $00
(1)  250/   C0A2D : =$0                 vcD1R1Unk set 0
(1)  250/   C0A2D : =$0                 vcD1R2Unk set 0
(1)  250/   C0A2D : =$0                 vcD1R3Unk set 0
(1)  250/   C0A2D : =$0                 vcD1R4Unk set 0
(1)  251/   C0A2D : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  251/   C0A2D : =$0                 vcDT1 set $00
(1)  251/   C0A2D : =$0                 vcDT2 set $00
(1)  251/   C0A2D : =$0                 vcDT3 set $00
(1)  251/   C0A2D : =$0                 vcDT4 set $00
(1)  252/   C0A2D : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $01
(1)  252/   C0A2D : =$1                 vcCF1 set $01
(1)  252/   C0A2D : =$2                 vcCF2 set $02
(1)  252/   C0A2D : =$1                 vcCF3 set $01
(1)  252/   C0A2D : =$1                 vcCF4 set $01
(1)  253/   C0A2D : (MACRO)             	smpsVcRateScale     $00, $01, $00, $01
(1)  253/   C0A2D : =$0                 vcRS1 set $00
(1)  253/   C0A2D : =$1                 vcRS2 set $01
(1)  253/   C0A2D : =$0                 vcRS3 set $00
(1)  253/   C0A2D : =$1                 vcRS4 set $01
(1)  254/   C0A2D : (MACRO)             	smpsVcAttackRate    $12, $10, $0F, $0C
(1)  254/   C0A2D : =$12                vcAR1 set $12
(1)  254/   C0A2D : =$10                vcAR2 set $10
(1)  254/   C0A2D : =$F                 vcAR3 set $0F
(1)  254/   C0A2D : =$C                 vcAR4 set $0C
(1)  255/   C0A2D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  255/   C0A2D : =$0                 vcAM1 set $00<<5
(1)  255/   C0A2D : =$0                 vcAM2 set $00<<5
(1)  255/   C0A2D : =$0                 vcAM3 set $00<<5
(1)  255/   C0A2D : =$0                 vcAM4 set $00<<5
(1)  256/   C0A2D : (MACRO)             	smpsVcDecayRate1    $02, $01, $05, $0B
(1)  256/   C0A2D : =$2                 vcD1R1 set $02
(1)  256/   C0A2D : =$1                 vcD1R2 set $01
(1)  256/   C0A2D : =$5                 vcD1R3 set $05
(1)  256/   C0A2D : =$B                 vcD1R4 set $0B
(1)  257/   C0A2D : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1)  257/   C0A2D : =$0                 vcD2R1 set $00
(1)  257/   C0A2D : =$0                 vcD2R2 set $00
(1)  257/   C0A2D : =$0                 vcD2R3 set $00
(1)  257/   C0A2D : =$1                 vcD2R4 set $01
(1)  258/   C0A2D : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1)  258/   C0A2D : =$1                 vcDL1 set $01
(1)  258/   C0A2D : =$2                 vcDL2 set $02
(1)  258/   C0A2D : =$2                 vcDL3 set $02
(1)  258/   C0A2D : =$2                 vcDL4 set $02
(1)  259/   C0A2D : (MACRO)             	smpsVcReleaseRate   $04, $04, $04, $00
(1)  259/   C0A2D : =$4                 vcRR1 set $04
(1)  259/   C0A2D : =$4                 vcRR2 set $04
(1)  259/   C0A2D : =$4                 vcRR3 set $04
(1)  259/   C0A2D : =$0                 vcRR4 set $00
(1)  260/   C0A2D : (MACRO)             	smpsVcTotalLevel    $0A, $08, $04, $1D
(1)  260/   C0A2D : =$A                 vcTL1 set $0A
(1)  260/   C0A2D : =$8                 vcTL2 set $08
(1)  260/   C0A2D : =$4                 vcTL3 set $04
(1)  260/   C0A2D : =$1D                vcTL4 set $1D
(1)  260/   C0A2D : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  260/   C0A2E :                     ;   0     1     2     3     4     5     6     7
(1)  260/   C0A2E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  260/   C0A2E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  260/   C0A2E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  260/   C0A2E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  260/   C0A2E : =$80                vcTLMask1 set $80
(1)  260/   C0A2E :                     
(1)  260/   C0A2E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  260/   C0A2E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  260/   C0A2E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  260/   C0A2E : =$80                vcTLMask1 set $80
(1)  260/   C0A2E : =$A                 vcTL1 set vcTL1&$7F
(1)  260/   C0A2E : =$8                 vcTL2 set vcTL2&$7F
(1)  260/   C0A2E : =$4                 vcTL3 set vcTL3&$7F
(1)  260/   C0A2E : =$1D                vcTL4 set vcTL4&$7F
(1)  260/   C0A2E :                     
(1)  260/   C0A2E : 0101 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  260/   C0A32 : 4C0F 5012                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  260/   C0A36 : 0B05 0102                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  260/   C0A3A : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  260/   C0A3E : 2024 2414                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  260/   C0A42 : 1D84 888A                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  261/   C0A46 :                     
(1)  262/   C0A46 :                     ;	Voice $02
(1)  263/   C0A46 :                     ;	$3A
(1)  264/   C0A46 :                     ;	$01, $01, $01, $01, 	$8E, $8E, $8D, $50, 	$0E, $0E, $0E, $00
(1)  265/   C0A46 :                     ;	$0B, $00, $00, $00, 	$04, $04, $04, $04, 	$17, $28, $27, $8A
(1)  266/   C0A46 : (MACRO)             	smpsVcAlgorithm     $02
(1)  266/   C0A46 : =$2                 vcAlgorithm set $02
(1)  267/   C0A46 : (MACRO)             	smpsVcFeedback      $07
(1)  267/   C0A46 : =$7                 vcFeedback set $07
(1)  268/   C0A46 : (MACRO)             	smpsVcUnusedBits    $00
(1)  268/   C0A46 : =$0                 vcUnusedBits set $00
(1)  268/   C0A46 : =$0                 vcD1R1Unk set 0
(1)  268/   C0A46 : =$0                 vcD1R2Unk set 0
(1)  268/   C0A46 : =$0                 vcD1R3Unk set 0
(1)  268/   C0A46 : =$0                 vcD1R4Unk set 0
(1)  269/   C0A46 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  269/   C0A46 : =$0                 vcDT1 set $00
(1)  269/   C0A46 : =$0                 vcDT2 set $00
(1)  269/   C0A46 : =$0                 vcDT3 set $00
(1)  269/   C0A46 : =$0                 vcDT4 set $00
(1)  270/   C0A46 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  270/   C0A46 : =$1                 vcCF1 set $01
(1)  270/   C0A46 : =$1                 vcCF2 set $01
(1)  270/   C0A46 : =$1                 vcCF3 set $01
(1)  270/   C0A46 : =$1                 vcCF4 set $01
(1)  271/   C0A46 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  271/   C0A46 : =$1                 vcRS1 set $01
(1)  271/   C0A46 : =$2                 vcRS2 set $02
(1)  271/   C0A46 : =$2                 vcRS3 set $02
(1)  271/   C0A46 : =$2                 vcRS4 set $02
(1)  272/   C0A46 : (MACRO)             	smpsVcAttackRate    $10, $0D, $0E, $0E
(1)  272/   C0A46 : =$10                vcAR1 set $10
(1)  272/   C0A46 : =$D                 vcAR2 set $0D
(1)  272/   C0A46 : =$E                 vcAR3 set $0E
(1)  272/   C0A46 : =$E                 vcAR4 set $0E
(1)  273/   C0A46 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  273/   C0A46 : =$0                 vcAM1 set $00<<5
(1)  273/   C0A46 : =$0                 vcAM2 set $00<<5
(1)  273/   C0A46 : =$0                 vcAM3 set $00<<5
(1)  273/   C0A46 : =$0                 vcAM4 set $00<<5
(1)  274/   C0A46 : (MACRO)             	smpsVcDecayRate1    $00, $0E, $0E, $0E
(1)  274/   C0A46 : =$0                 vcD1R1 set $00
(1)  274/   C0A46 : =$E                 vcD1R2 set $0E
(1)  274/   C0A46 : =$E                 vcD1R3 set $0E
(1)  274/   C0A46 : =$E                 vcD1R4 set $0E
(1)  275/   C0A46 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $0B
(1)  275/   C0A46 : =$0                 vcD2R1 set $00
(1)  275/   C0A46 : =$0                 vcD2R2 set $00
(1)  275/   C0A46 : =$0                 vcD2R3 set $00
(1)  275/   C0A46 : =$B                 vcD2R4 set $0B
(1)  276/   C0A46 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  276/   C0A46 : =$0                 vcDL1 set $00
(1)  276/   C0A46 : =$0                 vcDL2 set $00
(1)  276/   C0A46 : =$0                 vcDL3 set $00
(1)  276/   C0A46 : =$0                 vcDL4 set $00
(1)  277/   C0A46 : (MACRO)             	smpsVcReleaseRate   $04, $04, $04, $04
(1)  277/   C0A46 : =$4                 vcRR1 set $04
(1)  277/   C0A46 : =$4                 vcRR2 set $04
(1)  277/   C0A46 : =$4                 vcRR3 set $04
(1)  277/   C0A46 : =$4                 vcRR4 set $04
(1)  278/   C0A46 : (MACRO)             	smpsVcTotalLevel    $0A, $27, $28, $17
(1)  278/   C0A46 : =$A                 vcTL1 set $0A
(1)  278/   C0A46 : =$27                vcTL2 set $27
(1)  278/   C0A46 : =$28                vcTL3 set $28
(1)  278/   C0A46 : =$17                vcTL4 set $17
(1)  278/   C0A46 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  278/   C0A47 :                     ;   0     1     2     3     4     5     6     7
(1)  278/   C0A47 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  278/   C0A47 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  278/   C0A47 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  278/   C0A47 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  278/   C0A47 : =$80                vcTLMask1 set $80
(1)  278/   C0A47 :                     
(1)  278/   C0A47 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  278/   C0A47 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  278/   C0A47 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  278/   C0A47 : =$80                vcTLMask1 set $80
(1)  278/   C0A47 : =$A                 vcTL1 set vcTL1&$7F
(1)  278/   C0A47 : =$27                vcTL2 set vcTL2&$7F
(1)  278/   C0A47 : =$28                vcTL3 set vcTL3&$7F
(1)  278/   C0A47 : =$17                vcTL4 set vcTL4&$7F
(1)  278/   C0A47 :                     
(1)  278/   C0A47 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  278/   C0A4B : 8E8E 8D50                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  278/   C0A4F : 0E0E 0E00                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  278/   C0A53 : 0B00 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  278/   C0A57 : 0404 0404                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  278/   C0A5B : 1728 278A                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  279/   C0A5F :                     
(1)  280/   C0A5F :                     ;	Voice $03
(1)  281/   C0A5F :                     ;	$3A
(1)  282/   C0A5F :                     ;	$20, $23, $60, $01, 	$1E, $1F, $1F, $1F, 	$0A, $0A, $0B, $0A
(1)  283/   C0A5F :                     ;	$05, $07, $0A, $08, 	$AF, $8F, $9F, $7F, 	$21, $25, $28, $82
(1)  284/   C0A5F : (MACRO)             	smpsVcAlgorithm     $02
(1)  284/   C0A5F : =$2                 vcAlgorithm set $02
(1)  285/   C0A5F : (MACRO)             	smpsVcFeedback      $07
(1)  285/   C0A5F : =$7                 vcFeedback set $07
(1)  286/   C0A5F : (MACRO)             	smpsVcUnusedBits    $00
(1)  286/   C0A5F : =$0                 vcUnusedBits set $00
(1)  286/   C0A5F : =$0                 vcD1R1Unk set 0
(1)  286/   C0A5F : =$0                 vcD1R2Unk set 0
(1)  286/   C0A5F : =$0                 vcD1R3Unk set 0
(1)  286/   C0A5F : =$0                 vcD1R4Unk set 0
(1)  287/   C0A5F : (MACRO)             	smpsVcDetune        $00, $06, $02, $02
(1)  287/   C0A5F : =$0                 vcDT1 set $00
(1)  287/   C0A5F : =$6                 vcDT2 set $06
(1)  287/   C0A5F : =$2                 vcDT3 set $02
(1)  287/   C0A5F : =$2                 vcDT4 set $02
(1)  288/   C0A5F : (MACRO)             	smpsVcCoarseFreq    $01, $00, $03, $00
(1)  288/   C0A5F : =$1                 vcCF1 set $01
(1)  288/   C0A5F : =$0                 vcCF2 set $00
(1)  288/   C0A5F : =$3                 vcCF3 set $03
(1)  288/   C0A5F : =$0                 vcCF4 set $00
(1)  289/   C0A5F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  289/   C0A5F : =$0                 vcRS1 set $00
(1)  289/   C0A5F : =$0                 vcRS2 set $00
(1)  289/   C0A5F : =$0                 vcRS3 set $00
(1)  289/   C0A5F : =$0                 vcRS4 set $00
(1)  290/   C0A5F : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1E
(1)  290/   C0A5F : =$1F                vcAR1 set $1F
(1)  290/   C0A5F : =$1F                vcAR2 set $1F
(1)  290/   C0A5F : =$1F                vcAR3 set $1F
(1)  290/   C0A5F : =$1E                vcAR4 set $1E
(1)  291/   C0A5F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  291/   C0A5F : =$0                 vcAM1 set $00<<5
(1)  291/   C0A5F : =$0                 vcAM2 set $00<<5
(1)  291/   C0A5F : =$0                 vcAM3 set $00<<5
(1)  291/   C0A5F : =$0                 vcAM4 set $00<<5
(1)  292/   C0A5F : (MACRO)             	smpsVcDecayRate1    $0A, $0B, $0A, $0A
(1)  292/   C0A5F : =$A                 vcD1R1 set $0A
(1)  292/   C0A5F : =$B                 vcD1R2 set $0B
(1)  292/   C0A5F : =$A                 vcD1R3 set $0A
(1)  292/   C0A5F : =$A                 vcD1R4 set $0A
(1)  293/   C0A5F : (MACRO)             	smpsVcDecayRate2    $08, $0A, $07, $05
(1)  293/   C0A5F : =$8                 vcD2R1 set $08
(1)  293/   C0A5F : =$A                 vcD2R2 set $0A
(1)  293/   C0A5F : =$7                 vcD2R3 set $07
(1)  293/   C0A5F : =$5                 vcD2R4 set $05
(1)  294/   C0A5F : (MACRO)             	smpsVcDecayLevel    $07, $09, $08, $0A
(1)  294/   C0A5F : =$7                 vcDL1 set $07
(1)  294/   C0A5F : =$9                 vcDL2 set $09
(1)  294/   C0A5F : =$8                 vcDL3 set $08
(1)  294/   C0A5F : =$A                 vcDL4 set $0A
(1)  295/   C0A5F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  295/   C0A5F : =$F                 vcRR1 set $0F
(1)  295/   C0A5F : =$F                 vcRR2 set $0F
(1)  295/   C0A5F : =$F                 vcRR3 set $0F
(1)  295/   C0A5F : =$F                 vcRR4 set $0F
(1)  296/   C0A5F : (MACRO)             	smpsVcTotalLevel    $02, $28, $25, $21
(1)  296/   C0A5F : =$2                 vcTL1 set $02
(1)  296/   C0A5F : =$28                vcTL2 set $28
(1)  296/   C0A5F : =$25                vcTL3 set $25
(1)  296/   C0A5F : =$21                vcTL4 set $21
(1)  296/   C0A5F : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  296/   C0A60 :                     ;   0     1     2     3     4     5     6     7
(1)  296/   C0A60 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  296/   C0A60 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  296/   C0A60 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  296/   C0A60 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  296/   C0A60 : =$80                vcTLMask1 set $80
(1)  296/   C0A60 :                     
(1)  296/   C0A60 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  296/   C0A60 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  296/   C0A60 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  296/   C0A60 : =$80                vcTLMask1 set $80
(1)  296/   C0A60 : =$2                 vcTL1 set vcTL1&$7F
(1)  296/   C0A60 : =$28                vcTL2 set vcTL2&$7F
(1)  296/   C0A60 : =$25                vcTL3 set vcTL3&$7F
(1)  296/   C0A60 : =$21                vcTL4 set vcTL4&$7F
(1)  296/   C0A60 :                     
(1)  296/   C0A60 : 2023 6001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  296/   C0A64 : 1E1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  296/   C0A68 : 0A0A 0B0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  296/   C0A6C : 0507 0A08                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  296/   C0A70 : AF8F 9F7F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  296/   C0A74 : 2125 2882                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  297/   C0A78 :                     
(1)  298/   C0A78 :                     
   52/   C0A78 :                        Music_10:	include		"music-improved/90 - HPZ.asm"
(1)    1/   C0A78 :                     HPZ_Header:
(1)    2/   C0A78 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C0A78 :                     
(1)    2/   C0A78 : =$2                 SourceDriver set 2
(1)    2/   C0A78 :                     
(1)    2/   C0A78 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C0A78 :                     
(1)    2/   C0A78 : =$C0A78             songStart set *
(1)    2/   C0A78 :                     
(1)    2/   C0A78 :                     
(1)    3/   C0A78 : (MACRO)             	smpsHeaderVoice     HPZ_Voices
(1)    3/   C0A78 : 738C                                dc.w    z80_ptr(HPZ_VOICES)
(1)    4/   C0A7A : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C0A7A : 0603                        dc.b    $06,$03
(1)    5/   C0A7C : (MACRO)             	smpsHeaderTempo     $02, $E0
(1)    5/   C0A7C : 02                          dc.b    $02
(1)    5/   C0A7D :  (MACRO-2)                  convertMainTempoMod $E0
(1)    5/   C0A7D : 20                                          dc.b    s2TempotoS3($E0)
(1)    6/   C0A7E :                     
(1)    7/   C0A7E : (MACRO)             	smpsHeaderDAC       HPZ_DAC
(1)    7/   C0A7E :  (MACRO-2)                  CheckedChannelPointer HPZ_DAC
(1)    7/   C0A7E : 3A8C                                dc.w    z80_ptr(HPZ_DAC)
(1)    7/   C0A80 : 0000                                dc.w    $00
(1)    8/   C0A82 : (MACRO)             	smpsHeaderFM        HPZ_FM1,	$00, $06
(1)    8/   C0A82 :  (MACRO-2)                  CheckedChannelPointer HPZ_FM1
(1)    8/   C0A82 : D88A                                dc.w    z80_ptr(HPZ_FM1)
(1)    8/   C0A84 : 0006                        dc.b    $00,$06
(1)    9/   C0A86 : (MACRO)             	smpsHeaderFM        HPZ_FM2,	$0C, $10
(1)    9/   C0A86 :  (MACRO-2)                  CheckedChannelPointer HPZ_FM2
(1)    9/   C0A86 : 2B8B                                dc.w    z80_ptr(HPZ_FM2)
(1)    9/   C0A88 : 0C10                        dc.b    $0C,$10
(1)   10/   C0A8A : (MACRO)             	smpsHeaderFM        HPZ_FM3,	$00, $14
(1)   10/   C0A8A :  (MACRO-2)                  CheckedChannelPointer HPZ_FM3
(1)   10/   C0A8A : AB8B                                dc.w    z80_ptr(HPZ_FM3)
(1)   10/   C0A8C : 0014                        dc.b    $00,$14
(1)   11/   C0A8E : (MACRO)             	smpsHeaderFM        HPZ_FM4,	$00, $0E
(1)   11/   C0A8E :  (MACRO-2)                  CheckedChannelPointer HPZ_FM4
(1)   11/   C0A8E : B68A                                dc.w    z80_ptr(HPZ_FM4)
(1)   11/   C0A90 : 000E                        dc.b    $00,$0E
(1)   12/   C0A92 : (MACRO)             	smpsHeaderFM        HPZ_FM5,	$F4, $14
(1)   12/   C0A92 :  (MACRO-2)                  CheckedChannelPointer HPZ_FM5
(1)   12/   C0A92 : A88A                                dc.w    z80_ptr(HPZ_FM5)
(1)   12/   C0A94 : F414                        dc.b    $F4,$14
(1)   13/   C0A96 : (MACRO)             	smpsHeaderPSG       HPZ_PSG1,	$E8, $06, $00, $00
(1)   13/   C0A96 :  (MACRO-2)                  CheckedChannelPointer HPZ_PSG1
(1)   13/   C0A96 : C48A                                dc.w    z80_ptr(HPZ_PSG1)
(1)   13/   C0A98 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   13/   C0A98 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   13/   C0A99 : 0600 00                     dc.b    $06,$00,$00
(1)   14/   C0A9C : (MACRO)             	smpsHeaderPSG       HPZ_PSG2,	$E8, $08, $00, fTone_08
(1)   14/   C0A9C :  (MACRO-2)                  CheckedChannelPointer HPZ_PSG2
(1)   14/   C0A9C : CC8A                                dc.w    z80_ptr(HPZ_PSG2)
(1)   14/   C0A9E :  (MACRO-2)                  PSGPitchConvert $E8
(1)   14/   C0A9E : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   14/   C0A9F : 0800 08                     dc.b    $08,$00,FTONE_08
(1)   15/   C0AA2 : (MACRO)             	smpsHeaderPSG       HPZ_PSG3,	$F4, $08, $00, fTone_08
(1)   15/   C0AA2 :  (MACRO-2)                  CheckedChannelPointer HPZ_PSG3
(1)   15/   C0AA2 : F98B                                dc.w    z80_ptr(HPZ_PSG3)
(1)   15/   C0AA4 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   15/   C0AA4 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)   15/   C0AA5 : 0800 08                     dc.b    $08,$00,FTONE_08
(1)   16/   C0AA8 :                     
(1)   17/   C0AA8 :                     ; FM5 Data
(1)   18/   C0AA8 :                     HPZ_FM5:
(1)   19/   C0AA8 : (MACRO)             	smpsPan             panRight, $00
(1)   19/   C0AA8 : =$0                 panNone set $00
(1)   19/   C0AA8 : =$40                panRight set $40
(1)   19/   C0AA8 : =$80                panLeft set $80
(1)   19/   C0AA8 : =$C0                panCentre set $C0
(1)   19/   C0AA8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   19/   C0AA8 : E040                        dc.b $E0,PANRIGHT+$00
(1)   20/   C0AAA : (MACRO)             	smpsModSet          $18, $01, $FE, $04
(1)   20/   C0AAA : F0                          dc.b    $F0
(1)   20/   C0AAB : 1901 FE05                           dc.b    $18+1,$01,$FE,(($04+1) * $01) & $FF
(1)   20/   C0AAF :                             ;dc.b   $01,$FE,$04
(1)   21/   C0AAF : (MACRO)             	smpsSetvoice        $03
(1)   21/   C0AAF :  (MACRO-2)                  smpsFMvoice $03
(1)   21/   C0AAF : EF03                                dc.b    $EF,$03
(1)   22/   C0AB1 : (MACRO)             	smpsAlterNote       $02
(1)   22/   C0AB1 :  (MACRO-2)                  smpsDetune      $02
(1)   22/   C0AB1 : E102                        dc.b    $E1,$02
(1)   23/   C0AB3 : (MACRO)             	smpsJump            HPZ_Loop02
(1)   23/   C0AB3 : F6                          dc.b    $F6
(1)   23/   C0AB4 : B68B                                dc.w    z80_ptr(HPZ_LOOP02)
(1)   24/   C0AB6 :                     
(1)   25/   C0AB6 :                     ; FM4 Data
(1)   26/   C0AB6 :                     HPZ_FM4:
(1)   27/   C0AB6 : (MACRO)             	smpsModSet          $0C, $01, $FD, $05
(1)   27/   C0AB6 : F0                          dc.b    $F0
(1)   27/   C0AB7 : 0D01 FD06                           dc.b    $0C+1,$01,$FD,(($05+1) * $01) & $FF
(1)   27/   C0ABB :                             ;dc.b   $01,$FD,$05
(1)   28/   C0ABB : (MACRO)             	smpsSetvoice        $00
(1)   28/   C0ABB :  (MACRO-2)                  smpsFMvoice $00
(1)   28/   C0ABB : EF00                                dc.b    $EF,$00
(1)   29/   C0ABD : (MACRO)             	smpsAlterNote       $02
(1)   29/   C0ABD :  (MACRO-2)                  smpsDetune      $02
(1)   29/   C0ABD : E102                        dc.b    $E1,$02
(1)   30/   C0ABF : 8006                	dc.b	nRst, $06
(1)   31/   C0AC1 : (MACRO)             	smpsJump            HPZ_Jump02
(1)   31/   C0AC1 : F6                          dc.b    $F6
(1)   31/   C0AC2 : DF8A                                dc.w    z80_ptr(HPZ_JUMP02)
(1)   32/   C0AC4 :                     
(1)   33/   C0AC4 :                     ; PSG1 Data
(1)   34/   C0AC4 :                     HPZ_PSG1:
(1)   35/   C0AC4 : (MACRO)             	smpsModSet          $0C, $01, $01, $04
(1)   35/   C0AC4 : F0                          dc.b    $F0
(1)   35/   C0AC5 : 0D01 0105                           dc.b    $0C+1,$01,$01,(($04+1) * $01) & $FF
(1)   35/   C0AC9 :                             ;dc.b   $01,$01,$04
(1)   36/   C0AC9 : (MACRO)             	smpsJump            HPZ_Jump02
(1)   36/   C0AC9 : F6                          dc.b    $F6
(1)   36/   C0ACA : DF8A                                dc.w    z80_ptr(HPZ_JUMP02)
(1)   37/   C0ACC :                     
(1)   38/   C0ACC :                     ; PSG2 Data
(1)   39/   C0ACC :                     HPZ_PSG2:
(1)   40/   C0ACC : (MACRO)             	smpsModSet          $0C, $01, $FF, $04
(1)   40/   C0ACC : F0                          dc.b    $F0
(1)   40/   C0ACD : 0D01 FF05                           dc.b    $0C+1,$01,$FF,(($04+1) * $01) & $FF
(1)   40/   C0AD1 :                             ;dc.b   $01,$FF,$04
(1)   41/   C0AD1 : (MACRO)             	smpsAlterNote       $FF
(1)   41/   C0AD1 :  (MACRO-2)                  smpsDetune      $FF
(1)   41/   C0AD1 : E1FF                        dc.b    $E1,$FF
(1)   42/   C0AD3 : 8006                	dc.b	nRst, $06
(1)   43/   C0AD5 : (MACRO)             	smpsJump            HPZ_Jump02
(1)   43/   C0AD5 : F6                          dc.b    $F6
(1)   43/   C0AD6 : DF8A                                dc.w    z80_ptr(HPZ_JUMP02)
(1)   44/   C0AD8 :                     
(1)   45/   C0AD8 :                     ; FM1 Data
(1)   46/   C0AD8 :                     HPZ_FM1:
(1)   47/   C0AD8 : (MACRO)             	smpsModSet          $0C, $01, $03, $05
(1)   47/   C0AD8 : F0                          dc.b    $F0
(1)   47/   C0AD9 : 0D01 0306                           dc.b    $0C+1,$01,$03,(($05+1) * $01) & $FF
(1)   47/   C0ADD :                             ;dc.b   $01,$03,$05
(1)   48/   C0ADD : (MACRO)             	smpsSetvoice        $00
(1)   48/   C0ADD :  (MACRO-2)                  smpsFMvoice $00
(1)   48/   C0ADD : EF00                                dc.b    $EF,$00
(1)   49/   C0ADF :                     
(1)   50/   C0ADF :                     HPZ_Jump02:
(1)   51/   C0ADF : 8018                	dc.b	nRst, $18
(1)   52/   C0AE1 :                     
(1)   53/   C0AE1 :                     HPZ_Loop04:
(1)   54/   C0AE1 : B606 B8BA 18B8 0CBA 	dc.b	nF4, $06, nG4, nA4, $18, nG4, $0C, nA4, $18, nC5, $0C, nB4
            C0AE9 : 18BD 0CBC         
(1)   55/   C0AED : BAB8 BA18 B606 B8BA 	dc.b	nA4, nG4, nA4, $18, nF4, $06, nG4, nA4, $18, nG4, $0C, nA4
            C0AF5 : 18B8 0CBA         
(1)   56/   C0AF9 : 18BD 0CBF BCB8 BA18 	dc.b	$18, nC5, $0C, nD5, nB4, nG4, nA4, $18, nF4, $0C, nG4, $18
            C0B01 : B60C B818         
(1)   57/   C0B05 : B60C B818 BD0C BA24 	dc.b	nF4, $0C, nG4, $18, nC5, $0C, nA4, $24, nG4, $18, nF4, $0C
            C0B0D : B818 B60C         
(1)   58/   C0B11 : BA24 BCBD BC18      	dc.b	nA4, $24, nB4, nC5, nB4, $18
(1)   59/   C0B17 : (MACRO)             	smpsLoop            $01, $02, HPZ_Loop04
(1)   59/   C0B17 : F7                          dc.b    $F7
(1)   59/   C0B18 : 0102                        dc.b    $01,$02
(1)   59/   C0B1A : E18A                                dc.w    z80_ptr(HPZ_LOOP04)
(1)   60/   C0B1C : E7BC 0CC2 240C C4C2 	dc.b	smpsNoAttack, nB4, $0C, nF5, $24, $0C, nG5, nF5, nE5, $24, nCs5, $18
            C0B24 : C124 BE18         
(1)   61/   C0B28 : (MACRO)             	smpsJump            HPZ_Loop04
(1)   61/   C0B28 : F6                          dc.b    $F6
(1)   61/   C0B29 : E18A                                dc.w    z80_ptr(HPZ_LOOP04)
(1)   62/   C0B2B :                     
(1)   63/   C0B2B :                     ; FM2 Data
(1)   64/   C0B2B :                     HPZ_FM2:
(1)   65/   C0B2B : (MACRO)             	smpsSetvoice        $01
(1)   65/   C0B2B :  (MACRO-2)                  smpsFMvoice $01
(1)   65/   C0B2B : EF01                                dc.b    $EF,$01
(1)   66/   C0B2D :                     
(1)   67/   C0B2D :                     HPZ_Loop03:
(1)   68/   C0B2D : 8018 960C 9B06 8012 	dc.b	nRst, $18, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
            C0B35 : 960C               
(1)   69/   C0B37 :                     
(1)   70/   C0B37 :                     HPZ_Jump01:
(1)   71/   C0B37 : 9B06 8012 960C 9406 	dc.b	nD2, $06, nRst, $12, nA1, $0C, nG1, $06, nRst, $12, nG1, $0C
            C0B3F : 8012 940C         
(1)   72/   C0B43 : 9B06 8012 960C 9B06 	dc.b	nD2, $06, nRst, $12, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
            C0B4B : 8012 960C         
(1)   73/   C0B4F : 9B06 8012 960C 9406 	dc.b	nD2, $06, nRst, $12, nA1, $0C, nG1, $06, nRst, $12, nG1, $0C
            C0B57 : 8012 940C         
(1)   74/   C0B5B : 9B06 8012 9B0C 9406 	dc.b	nD2, $06, nRst, $12, nD2, $0C, nG1, $06, nRst, $12, nD2, $0C
            C0B63 : 8012 9B0C         
(1)   75/   C0B67 : 9406 8012 940C 9206 	dc.b	nG1, $06, nRst, $12, nG1, $0C, nF1, $06, nRst, $12, nC2, $0C
            C0B6F : 8012 990C         
(1)   76/   C0B73 : 9206 8012 990C 9B06 	dc.b	nF1, $06, nRst, $12, nC2, $0C, nD2, $06, nRst, $12, nA1, $0C
            C0B7B : 8012 960C         
(1)   77/   C0B7F : 9B06 8012 960C 9B06 	dc.b	nD2, $06, nRst, $12, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
            C0B87 : 8012 960C         
(1)   78/   C0B8B : (MACRO)             	smpsLoop            $00, $02, HPZ_Loop03
(1)   78/   C0B8B : F7                          dc.b    $F7
(1)   78/   C0B8C : 0002                        dc.b    $00,$02
(1)   78/   C0B8E : 2D8B                                dc.w    z80_ptr(HPZ_LOOP03)
(1)   79/   C0B90 : 9B06 8012 960C 9718 	dc.b	nD2, $06, nRst, $12, nA1, $0C, nBb1, $18, $0C, $18, $0C, nC2
            C0B98 : 0C18 0C99         
(1)   80/   C0B9C : 180C 9A18 960C 9B06 	dc.b	$18, $0C, nCs2, $18, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
            C0BA4 : 8012 960C         
(1)   81/   C0BA8 : (MACRO)             	smpsJump            HPZ_Jump01
(1)   81/   C0BA8 : F6                          dc.b    $F6
(1)   81/   C0BA9 : 378B                                dc.w    z80_ptr(HPZ_JUMP01)
(1)   82/   C0BAB :                     
(1)   83/   C0BAB :                     ; FM3 Data
(1)   84/   C0BAB :                     HPZ_FM3:
(1)   85/   C0BAB : (MACRO)             	smpsPan             panLeft, $00
(1)   85/   C0BAB : =$0                 panNone set $00
(1)   85/   C0BAB : =$40                panRight set $40
(1)   85/   C0BAB : =$80                panLeft set $80
(1)   85/   C0BAB : =$C0                panCentre set $C0
(1)   85/   C0BAB : =$C0                panCenter set $C0 ; silly Americans :U
(1)   85/   C0BAB : E080                        dc.b $E0,PANLEFT+$00
(1)   86/   C0BAD : (MACRO)             	smpsAlterPitch      $F4
(1)   86/   C0BAD :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   86/   C0BAD : FBF4                                dc.b    $FB,$F4
(1)   87/   C0BAF : (MACRO)             	smpsModSet          $18, $01, $02, $04
(1)   87/   C0BAF : F0                          dc.b    $F0
(1)   87/   C0BB0 : 1901 0205                           dc.b    $18+1,$01,$02,(($04+1) * $01) & $FF
(1)   87/   C0BB4 :                             ;dc.b   $01,$02,$04
(1)   88/   C0BB4 : (MACRO)             	smpsSetvoice        $02
(1)   88/   C0BB4 :  (MACRO-2)                  smpsFMvoice $02
(1)   88/   C0BB4 : EF02                                dc.b    $EF,$02
(1)   89/   C0BB6 :                     
(1)   90/   C0BB6 :                     HPZ_Loop02:
(1)   91/   C0BB6 : B30C BAB6           	dc.b	nD4, $0C, nA4, nF4
(1)   92/   C0BBA :                     
(1)   93/   C0BBA :                     HPZ_Jump00:
(1)   94/   C0BBA : BD24 E7BD BCC1 18BA 	dc.b	nC5, $24, smpsNoAttack, nC5, nB4, nE5, $18, nA4, $0C, nC5, $24, smpsNoAttack
            C0BC2 : 0CBD 24E7         
(1)   95/   C0BC6 : BDBC BF80 0CB8 BABC 	dc.b	nC5, nB4, nD5, nRst, $0C, nG4, nA4, nB4, $18, nA4, $0C, nRst
            C0BCE : 18BA 0C80         
(1)   96/   C0BD2 : BABC BDBC BDBF 24E7 	dc.b	nA4, nB4, nC5, nB4, nC5, nD5, $24, smpsNoAttack, $18, nE5, $0C, nD5
            C0BDA : 18C1 0CBF         
(1)   97/   C0BDE : 24                  	dc.b	$24
(1)   98/   C0BDF : (MACRO)             	smpsLoop            $00, $02, HPZ_Loop02
(1)   98/   C0BDF : F7                          dc.b    $F7
(1)   98/   C0BE0 : 0002                        dc.b    $00,$02
(1)   98/   C0BE2 : B68B                                dc.w    z80_ptr(HPZ_LOOP02)
(1)   99/   C0BE4 : (MACRO)             	smpsAlterPitch      $0C
(1)   99/   C0BE4 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   99/   C0BE4 : FB0C                                dc.b    $FB,$0C
(1)  100/   C0BE6 : E7B3 24B3 AF0C B3BA 	dc.b	smpsNoAttack, nD4, $24, nD4, nBb3, $0C, nD4, nA4, nG4, $24
            C0BEE : B824               
(1)  101/   C0BF0 : (MACRO)             	smpsAlterPitch      $F4
(1)  101/   C0BF0 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  101/   C0BF0 : FBF4                                dc.b    $FB,$F4
(1)  102/   C0BF2 : B50C BAB6           	dc.b	nE4, $0C, nA4, nF4
(1)  103/   C0BF6 : (MACRO)             	smpsJump            HPZ_Jump00
(1)  103/   C0BF6 : F6                          dc.b    $F6
(1)  103/   C0BF7 : BA8B                                dc.w    z80_ptr(HPZ_JUMP00)
(1)  104/   C0BF9 :                     
(1)  105/   C0BF9 :                     ; PSG3 Data
(1)  106/   C0BF9 :                     HPZ_PSG3:
(1)  107/   C0BF9 : 8024                	dc.b	nRst, $24
(1)  108/   C0BFB : (MACRO)             	smpsNoteFill        $10
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  108/   C0BFB :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  108/   C0BFB : E810                                dc.b    $E8,$10
(1)  109/   C0BFD :                     
(1)  110/   C0BFD :                     HPZ_Loop05:
(1)  111/   C0BFD : (MACRO)             	smpsPSGAlterVol     $FE
(1)  111/   C0BFD : ECFE                        dc.b    $EC,$FE
(1)  112/   C0BFF : B606                	dc.b	nF4, $06
(1)  113/   C0C01 : (MACRO)             	smpsPSGAlterVol     $02
(1)  113/   C0C01 : EC02                        dc.b    $EC,$02
(1)  114/   C0C03 : BDBD B6BA B6        	dc.b	nC5, nC5, nF4, nA4, nF4
(1)  115/   C0C08 : (MACRO)             	smpsPSGAlterVol     $FE
(1)  115/   C0C08 : ECFE                        dc.b    $EC,$FE
(1)  116/   C0C0A : BC                  	dc.b	nB4
(1)  117/   C0C0B : (MACRO)             	smpsPSGAlterVol     $02
(1)  117/   C0C0B : EC02                        dc.b    $EC,$02
(1)  118/   C0C0D : B6BD B6BC B6        	dc.b	nF4, nC5, nF4, nB4, nF4
(1)  119/   C0C12 : (MACRO)             	smpsLoop            $01, $10, HPZ_Loop05
(1)  119/   C0C12 : F7                          dc.b    $F7
(1)  119/   C0C13 : 0110                        dc.b    $01,$10
(1)  119/   C0C15 : FD8B                                dc.w    z80_ptr(HPZ_LOOP05)
(1)  120/   C0C17 :                     
(1)  121/   C0C17 :                     HPZ_Loop06:
(1)  122/   C0C17 : C606 C2C1 BF        	dc.b	nA5, $06, nF5, nE5, nD5
(1)  123/   C0C1C : (MACRO)             	smpsLoop            $01, $04, HPZ_Loop06
(1)  123/   C0C1C : F7                          dc.b    $F7
(1)  123/   C0C1D : 0104                        dc.b    $01,$04
(1)  123/   C0C1F : 178C                                dc.w    z80_ptr(HPZ_LOOP06)
(1)  124/   C0C21 : C606 C2C1 BEC6 C4C1 	dc.b	nA5, $06, nF5, nE5, nCs5, nA5, nG5, nE5, nCs5
            C0C29 : BE               
(1)  125/   C0C2A : (MACRO)             	smpsJump            HPZ_Loop05
(1)  125/   C0C2A : F6                          dc.b    $F6
(1)  125/   C0C2B : FD8B                                dc.w    z80_ptr(HPZ_LOOP05)
(1)  126/   C0C2D :                     
(1)  127/   C0C2D :                     HPZ_Call00:
(1)  128/   C0C2D : 8112 8206 8E0C 810C 	dc.b	dKick, $12, dSnare, $06, dFloorTom, $0C, dKick, $0C, dSnare, $12, dFloorTom, $06
            C0C35 : 8212 8E06         
(1)  129/   C0C39 : (MACRO)             	smpsReturn
(1)  129/   C0C39 : F9                                  dc.b    $F9
(1)  130/   C0C3A :                     
(1)  131/   C0C3A :                     ; DAC Data
(1)  132/   C0C3A :                     HPZ_DAC:
(1)  133/   C0C3A : 8206 8C0C 8D06 8E0C 	dc.b	dSnare, $06, dMidTom, $0C, dLowTom, $06, dFloorTom, $0C
(1)  134/   C0C42 :                     
(1)  135/   C0C42 :                     HPZ_Loop00:
(1)  136/   C0C42 : (MACRO)             	smpsCall            HPZ_Call00
(1)  136/   C0C42 : F8                          dc.b    $F8
(1)  136/   C0C43 : 2D8C                                dc.w    z80_ptr(HPZ_CALL00)
(1)  137/   C0C45 : (MACRO)             	smpsLoop            $00, $07, HPZ_Loop00
(1)  137/   C0C45 : F7                          dc.b    $F7
(1)  137/   C0C46 : 0007                        dc.b    $00,$07
(1)  137/   C0C48 : 428C                                dc.w    z80_ptr(HPZ_LOOP00)
(1)  138/   C0C4A : 8112 8206 8E0C 8106 	dc.b	dKick, $12, dSnare, $06, dFloorTom, $0C, dKick, $06, dMidTom, $0C, dLowTom, $06
            C0C52 : 8C0C 8D06         
(1)  139/   C0C56 : 810C                	dc.b	dKick, $0C
(1)  140/   C0C58 :                     
(1)  141/   C0C58 :                     HPZ_Loop01:
(1)  142/   C0C58 : (MACRO)             	smpsCall            HPZ_Call00
(1)  142/   C0C58 : F8                          dc.b    $F8
(1)  142/   C0C59 : 2D8C                                dc.w    z80_ptr(HPZ_CALL00)
(1)  143/   C0C5B : (MACRO)             	smpsLoop            $00, $08, HPZ_Loop01
(1)  143/   C0C5B : F7                          dc.b    $F7
(1)  143/   C0C5C : 0008                        dc.b    $00,$08
(1)  143/   C0C5E : 588C                                dc.w    z80_ptr(HPZ_LOOP01)
(1)  144/   C0C60 : 8112 8206 810C 810C 	dc.b	dKick, $12, dSnare, $06, dKick, $0C, dKick, $0C, dKick, dSnare, dKick, $12
            C0C68 : 8182 8112         
(1)  145/   C0C6C : 8206 810C           	dc.b	dSnare, $06, dKick, $0C
(1)  146/   C0C70 : (MACRO)             	smpsJump            HPZ_DAC
(1)  146/   C0C70 : F6                          dc.b    $F6
(1)  146/   C0C71 : 3A8C                                dc.w    z80_ptr(HPZ_DAC)
(1)  147/   C0C73 :                     
(1)  148/   C0C73 :                     HPZ_Voices:
(1)  149/   C0C73 :                     ;	Voice $00
(1)  150/   C0C73 :                     ;	$3B
(1)  151/   C0C73 :                     ;	$01, $02, $13, $02, 	$5D, $5D, $5D, $4A, 	$00, $00, $00, $00
(1)  152/   C0C73 :                     ;	$00, $00, $00, $00, 	$05, $05, $04, $0A, 	$1E, $1E, $28, $09
(1)  153/   C0C73 : (MACRO)             	smpsVcAlgorithm     $03
(1)  153/   C0C73 : =$3                 vcAlgorithm set $03
(1)  154/   C0C73 : (MACRO)             	smpsVcFeedback      $07
(1)  154/   C0C73 : =$7                 vcFeedback set $07
(1)  155/   C0C73 : (MACRO)             	smpsVcUnusedBits    $00
(1)  155/   C0C73 : =$0                 vcUnusedBits set $00
(1)  155/   C0C73 : =$0                 vcD1R1Unk set 0
(1)  155/   C0C73 : =$0                 vcD1R2Unk set 0
(1)  155/   C0C73 : =$0                 vcD1R3Unk set 0
(1)  155/   C0C73 : =$0                 vcD1R4Unk set 0
(1)  156/   C0C73 : (MACRO)             	smpsVcDetune        $00, $01, $00, $00
(1)  156/   C0C73 : =$0                 vcDT1 set $00
(1)  156/   C0C73 : =$1                 vcDT2 set $01
(1)  156/   C0C73 : =$0                 vcDT3 set $00
(1)  156/   C0C73 : =$0                 vcDT4 set $00
(1)  157/   C0C73 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $02, $01
(1)  157/   C0C73 : =$2                 vcCF1 set $02
(1)  157/   C0C73 : =$3                 vcCF2 set $03
(1)  157/   C0C73 : =$2                 vcCF3 set $02
(1)  157/   C0C73 : =$1                 vcCF4 set $01
(1)  158/   C0C73 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  158/   C0C73 : =$1                 vcRS1 set $01
(1)  158/   C0C73 : =$1                 vcRS2 set $01
(1)  158/   C0C73 : =$1                 vcRS3 set $01
(1)  158/   C0C73 : =$1                 vcRS4 set $01
(1)  159/   C0C73 : (MACRO)             	smpsVcAttackRate    $0A, $1D, $1D, $1D
(1)  159/   C0C73 : =$A                 vcAR1 set $0A
(1)  159/   C0C73 : =$1D                vcAR2 set $1D
(1)  159/   C0C73 : =$1D                vcAR3 set $1D
(1)  159/   C0C73 : =$1D                vcAR4 set $1D
(1)  160/   C0C73 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  160/   C0C73 : =$0                 vcAM1 set $00<<5
(1)  160/   C0C73 : =$0                 vcAM2 set $00<<5
(1)  160/   C0C73 : =$0                 vcAM3 set $00<<5
(1)  160/   C0C73 : =$0                 vcAM4 set $00<<5
(1)  161/   C0C73 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  161/   C0C73 : =$0                 vcD1R1 set $00
(1)  161/   C0C73 : =$0                 vcD1R2 set $00
(1)  161/   C0C73 : =$0                 vcD1R3 set $00
(1)  161/   C0C73 : =$0                 vcD1R4 set $00
(1)  162/   C0C73 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  162/   C0C73 : =$0                 vcD2R1 set $00
(1)  162/   C0C73 : =$0                 vcD2R2 set $00
(1)  162/   C0C73 : =$0                 vcD2R3 set $00
(1)  162/   C0C73 : =$0                 vcD2R4 set $00
(1)  163/   C0C73 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  163/   C0C73 : =$0                 vcDL1 set $00
(1)  163/   C0C73 : =$0                 vcDL2 set $00
(1)  163/   C0C73 : =$0                 vcDL3 set $00
(1)  163/   C0C73 : =$0                 vcDL4 set $00
(1)  164/   C0C73 : (MACRO)             	smpsVcReleaseRate   $0A, $04, $05, $05
(1)  164/   C0C73 : =$A                 vcRR1 set $0A
(1)  164/   C0C73 : =$4                 vcRR2 set $04
(1)  164/   C0C73 : =$5                 vcRR3 set $05
(1)  164/   C0C73 : =$5                 vcRR4 set $05
(1)  165/   C0C73 : (MACRO)             	smpsVcTotalLevel    $09, $28, $1E, $1E
(1)  165/   C0C73 : =$9                 vcTL1 set $09
(1)  165/   C0C73 : =$28                vcTL2 set $28
(1)  165/   C0C73 : =$1E                vcTL3 set $1E
(1)  165/   C0C73 : =$1E                vcTL4 set $1E
(1)  165/   C0C73 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  165/   C0C74 :                     ;   0     1     2     3     4     5     6     7
(1)  165/   C0C74 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  165/   C0C74 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  165/   C0C74 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  165/   C0C74 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  165/   C0C74 : =$80                vcTLMask1 set $80
(1)  165/   C0C74 :                     
(1)  165/   C0C74 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  165/   C0C74 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  165/   C0C74 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  165/   C0C74 : =$80                vcTLMask1 set $80
(1)  165/   C0C74 : =$9                 vcTL1 set vcTL1&$7F
(1)  165/   C0C74 : =$28                vcTL2 set vcTL2&$7F
(1)  165/   C0C74 : =$1E                vcTL3 set vcTL3&$7F
(1)  165/   C0C74 : =$1E                vcTL4 set vcTL4&$7F
(1)  165/   C0C74 :                     
(1)  165/   C0C74 : 0102 1302                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  165/   C0C78 : 5D5D 5D4A                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  165/   C0C7C : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  165/   C0C80 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  165/   C0C84 : 0505 040A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  165/   C0C88 : 1E1E 2889                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  166/   C0C8C :                     
(1)  167/   C0C8C :                     ;	Voice $01
(1)  168/   C0C8C :                     ;	$3A
(1)  169/   C0C8C :                     ;	$22, $68, $71, $32, 	$12, $16, $14, $0C, 	$0A, $06, $0A, $04
(1)  170/   C0C8C :                     ;	$00, $00, $00, $00, 	$16, $26, $56, $06, 	$1F, $22, $1C, $00
(1)  171/   C0C8C : (MACRO)             	smpsVcAlgorithm     $02
(1)  171/   C0C8C : =$2                 vcAlgorithm set $02
(1)  172/   C0C8C : (MACRO)             	smpsVcFeedback      $07
(1)  172/   C0C8C : =$7                 vcFeedback set $07
(1)  173/   C0C8C : (MACRO)             	smpsVcUnusedBits    $00
(1)  173/   C0C8C : =$0                 vcUnusedBits set $00
(1)  173/   C0C8C : =$0                 vcD1R1Unk set 0
(1)  173/   C0C8C : =$0                 vcD1R2Unk set 0
(1)  173/   C0C8C : =$0                 vcD1R3Unk set 0
(1)  173/   C0C8C : =$0                 vcD1R4Unk set 0
(1)  174/   C0C8C : (MACRO)             	smpsVcDetune        $03, $07, $06, $02
(1)  174/   C0C8C : =$3                 vcDT1 set $03
(1)  174/   C0C8C : =$7                 vcDT2 set $07
(1)  174/   C0C8C : =$6                 vcDT3 set $06
(1)  174/   C0C8C : =$2                 vcDT4 set $02
(1)  175/   C0C8C : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $02
(1)  175/   C0C8C : =$2                 vcCF1 set $02
(1)  175/   C0C8C : =$1                 vcCF2 set $01
(1)  175/   C0C8C : =$8                 vcCF3 set $08
(1)  175/   C0C8C : =$2                 vcCF4 set $02
(1)  176/   C0C8C : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  176/   C0C8C : =$0                 vcRS1 set $00
(1)  176/   C0C8C : =$0                 vcRS2 set $00
(1)  176/   C0C8C : =$0                 vcRS3 set $00
(1)  176/   C0C8C : =$0                 vcRS4 set $00
(1)  177/   C0C8C : (MACRO)             	smpsVcAttackRate    $0C, $14, $16, $12
(1)  177/   C0C8C : =$C                 vcAR1 set $0C
(1)  177/   C0C8C : =$14                vcAR2 set $14
(1)  177/   C0C8C : =$16                vcAR3 set $16
(1)  177/   C0C8C : =$12                vcAR4 set $12
(1)  178/   C0C8C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  178/   C0C8C : =$0                 vcAM1 set $00<<5
(1)  178/   C0C8C : =$0                 vcAM2 set $00<<5
(1)  178/   C0C8C : =$0                 vcAM3 set $00<<5
(1)  178/   C0C8C : =$0                 vcAM4 set $00<<5
(1)  179/   C0C8C : (MACRO)             	smpsVcDecayRate1    $04, $0A, $06, $0A
(1)  179/   C0C8C : =$4                 vcD1R1 set $04
(1)  179/   C0C8C : =$A                 vcD1R2 set $0A
(1)  179/   C0C8C : =$6                 vcD1R3 set $06
(1)  179/   C0C8C : =$A                 vcD1R4 set $0A
(1)  180/   C0C8C : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  180/   C0C8C : =$0                 vcD2R1 set $00
(1)  180/   C0C8C : =$0                 vcD2R2 set $00
(1)  180/   C0C8C : =$0                 vcD2R3 set $00
(1)  180/   C0C8C : =$0                 vcD2R4 set $00
(1)  181/   C0C8C : (MACRO)             	smpsVcDecayLevel    $00, $05, $02, $01
(1)  181/   C0C8C : =$0                 vcDL1 set $00
(1)  181/   C0C8C : =$5                 vcDL2 set $05
(1)  181/   C0C8C : =$2                 vcDL3 set $02
(1)  181/   C0C8C : =$1                 vcDL4 set $01
(1)  182/   C0C8C : (MACRO)             	smpsVcReleaseRate   $06, $06, $06, $06
(1)  182/   C0C8C : =$6                 vcRR1 set $06
(1)  182/   C0C8C : =$6                 vcRR2 set $06
(1)  182/   C0C8C : =$6                 vcRR3 set $06
(1)  182/   C0C8C : =$6                 vcRR4 set $06
(1)  183/   C0C8C : (MACRO)             	smpsVcTotalLevel    $00, $1C, $22, $1F
(1)  183/   C0C8C : =$0                 vcTL1 set $00
(1)  183/   C0C8C : =$1C                vcTL2 set $1C
(1)  183/   C0C8C : =$22                vcTL3 set $22
(1)  183/   C0C8C : =$1F                vcTL4 set $1F
(1)  183/   C0C8C : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  183/   C0C8D :                     ;   0     1     2     3     4     5     6     7
(1)  183/   C0C8D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  183/   C0C8D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  183/   C0C8D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  183/   C0C8D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  183/   C0C8D : =$80                vcTLMask1 set $80
(1)  183/   C0C8D :                     
(1)  183/   C0C8D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  183/   C0C8D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  183/   C0C8D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  183/   C0C8D : =$80                vcTLMask1 set $80
(1)  183/   C0C8D : =$0                 vcTL1 set vcTL1&$7F
(1)  183/   C0C8D : =$1C                vcTL2 set vcTL2&$7F
(1)  183/   C0C8D : =$22                vcTL3 set vcTL3&$7F
(1)  183/   C0C8D : =$1F                vcTL4 set vcTL4&$7F
(1)  183/   C0C8D :                     
(1)  183/   C0C8D : 2268 7132                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  183/   C0C91 : 1216 140C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  183/   C0C95 : 0A06 0A04                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  183/   C0C99 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  183/   C0C9D : 1626 5606                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  183/   C0CA1 : 1F22 1C80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  184/   C0CA5 :                     
(1)  185/   C0CA5 :                     ;	Voice $02
(1)  186/   C0CA5 :                     ;	$3B
(1)  187/   C0CA5 :                     ;	$32, $32, $32, $72, 	$4F, $18, $1A, $11, 	$0E, $16, $0B, $00
(1)  188/   C0CA5 :                     ;	$04, $00, $00, $00, 	$50, $10, $00, $0A, 	$1B, $1F, $1E, $00
(1)  189/   C0CA5 : (MACRO)             	smpsVcAlgorithm     $03
(1)  189/   C0CA5 : =$3                 vcAlgorithm set $03
(1)  190/   C0CA5 : (MACRO)             	smpsVcFeedback      $07
(1)  190/   C0CA5 : =$7                 vcFeedback set $07
(1)  191/   C0CA5 : (MACRO)             	smpsVcUnusedBits    $00
(1)  191/   C0CA5 : =$0                 vcUnusedBits set $00
(1)  191/   C0CA5 : =$0                 vcD1R1Unk set 0
(1)  191/   C0CA5 : =$0                 vcD1R2Unk set 0
(1)  191/   C0CA5 : =$0                 vcD1R3Unk set 0
(1)  191/   C0CA5 : =$0                 vcD1R4Unk set 0
(1)  192/   C0CA5 : (MACRO)             	smpsVcDetune        $07, $03, $03, $03
(1)  192/   C0CA5 : =$7                 vcDT1 set $07
(1)  192/   C0CA5 : =$3                 vcDT2 set $03
(1)  192/   C0CA5 : =$3                 vcDT3 set $03
(1)  192/   C0CA5 : =$3                 vcDT4 set $03
(1)  193/   C0CA5 : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $02
(1)  193/   C0CA5 : =$2                 vcCF1 set $02
(1)  193/   C0CA5 : =$2                 vcCF2 set $02
(1)  193/   C0CA5 : =$2                 vcCF3 set $02
(1)  193/   C0CA5 : =$2                 vcCF4 set $02
(1)  194/   C0CA5 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $01
(1)  194/   C0CA5 : =$0                 vcRS1 set $00
(1)  194/   C0CA5 : =$0                 vcRS2 set $00
(1)  194/   C0CA5 : =$0                 vcRS3 set $00
(1)  194/   C0CA5 : =$1                 vcRS4 set $01
(1)  195/   C0CA5 : (MACRO)             	smpsVcAttackRate    $11, $1A, $18, $0F
(1)  195/   C0CA5 : =$11                vcAR1 set $11
(1)  195/   C0CA5 : =$1A                vcAR2 set $1A
(1)  195/   C0CA5 : =$18                vcAR3 set $18
(1)  195/   C0CA5 : =$F                 vcAR4 set $0F
(1)  196/   C0CA5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  196/   C0CA5 : =$0                 vcAM1 set $00<<5
(1)  196/   C0CA5 : =$0                 vcAM2 set $00<<5
(1)  196/   C0CA5 : =$0                 vcAM3 set $00<<5
(1)  196/   C0CA5 : =$0                 vcAM4 set $00<<5
(1)  197/   C0CA5 : (MACRO)             	smpsVcDecayRate1    $00, $0B, $16, $0E
(1)  197/   C0CA5 : =$0                 vcD1R1 set $00
(1)  197/   C0CA5 : =$B                 vcD1R2 set $0B
(1)  197/   C0CA5 : =$16                vcD1R3 set $16
(1)  197/   C0CA5 : =$E                 vcD1R4 set $0E
(1)  198/   C0CA5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $04
(1)  198/   C0CA5 : =$0                 vcD2R1 set $00
(1)  198/   C0CA5 : =$0                 vcD2R2 set $00
(1)  198/   C0CA5 : =$0                 vcD2R3 set $00
(1)  198/   C0CA5 : =$4                 vcD2R4 set $04
(1)  199/   C0CA5 : (MACRO)             	smpsVcDecayLevel    $00, $00, $01, $05
(1)  199/   C0CA5 : =$0                 vcDL1 set $00
(1)  199/   C0CA5 : =$0                 vcDL2 set $00
(1)  199/   C0CA5 : =$1                 vcDL3 set $01
(1)  199/   C0CA5 : =$5                 vcDL4 set $05
(1)  200/   C0CA5 : (MACRO)             	smpsVcReleaseRate   $0A, $00, $00, $00
(1)  200/   C0CA5 : =$A                 vcRR1 set $0A
(1)  200/   C0CA5 : =$0                 vcRR2 set $00
(1)  200/   C0CA5 : =$0                 vcRR3 set $00
(1)  200/   C0CA5 : =$0                 vcRR4 set $00
(1)  201/   C0CA5 : (MACRO)             	smpsVcTotalLevel    $00, $1E, $1F, $1B
(1)  201/   C0CA5 : =$0                 vcTL1 set $00
(1)  201/   C0CA5 : =$1E                vcTL2 set $1E
(1)  201/   C0CA5 : =$1F                vcTL3 set $1F
(1)  201/   C0CA5 : =$1B                vcTL4 set $1B
(1)  201/   C0CA5 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  201/   C0CA6 :                     ;   0     1     2     3     4     5     6     7
(1)  201/   C0CA6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  201/   C0CA6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  201/   C0CA6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  201/   C0CA6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  201/   C0CA6 : =$80                vcTLMask1 set $80
(1)  201/   C0CA6 :                     
(1)  201/   C0CA6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  201/   C0CA6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  201/   C0CA6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  201/   C0CA6 : =$80                vcTLMask1 set $80
(1)  201/   C0CA6 : =$0                 vcTL1 set vcTL1&$7F
(1)  201/   C0CA6 : =$1E                vcTL2 set vcTL2&$7F
(1)  201/   C0CA6 : =$1F                vcTL3 set vcTL3&$7F
(1)  201/   C0CA6 : =$1B                vcTL4 set vcTL4&$7F
(1)  201/   C0CA6 :                     
(1)  201/   C0CA6 : 3232 3272                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  201/   C0CAA : 4F18 1A11                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  201/   C0CAE : 0E16 0B00                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  201/   C0CB2 : 0400 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  201/   C0CB6 : 5010 000A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  201/   C0CBA : 1B1F 1E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  202/   C0CBE :                     
(1)  203/   C0CBE :                     ;	Voice $03
(1)  204/   C0CBE :                     ;	$38
(1)  205/   C0CBE :                     ;	$32, $52, $32, $72, 	$17, $18, $1A, $11, 	$17, $16, $0B, $00
(1)  206/   C0CBE :                     ;	$00, $00, $00, $00, 	$10, $10, $00, $0A, 	$20, $11, $21, $00
(1)  207/   C0CBE : (MACRO)             	smpsVcAlgorithm     $00
(1)  207/   C0CBE : =$0                 vcAlgorithm set $00
(1)  208/   C0CBE : (MACRO)             	smpsVcFeedback      $07
(1)  208/   C0CBE : =$7                 vcFeedback set $07
(1)  209/   C0CBE : (MACRO)             	smpsVcUnusedBits    $00
(1)  209/   C0CBE : =$0                 vcUnusedBits set $00
(1)  209/   C0CBE : =$0                 vcD1R1Unk set 0
(1)  209/   C0CBE : =$0                 vcD1R2Unk set 0
(1)  209/   C0CBE : =$0                 vcD1R3Unk set 0
(1)  209/   C0CBE : =$0                 vcD1R4Unk set 0
(1)  210/   C0CBE : (MACRO)             	smpsVcDetune        $07, $03, $05, $03
(1)  210/   C0CBE : =$7                 vcDT1 set $07
(1)  210/   C0CBE : =$3                 vcDT2 set $03
(1)  210/   C0CBE : =$5                 vcDT3 set $05
(1)  210/   C0CBE : =$3                 vcDT4 set $03
(1)  211/   C0CBE : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $02
(1)  211/   C0CBE : =$2                 vcCF1 set $02
(1)  211/   C0CBE : =$2                 vcCF2 set $02
(1)  211/   C0CBE : =$2                 vcCF3 set $02
(1)  211/   C0CBE : =$2                 vcCF4 set $02
(1)  212/   C0CBE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  212/   C0CBE : =$0                 vcRS1 set $00
(1)  212/   C0CBE : =$0                 vcRS2 set $00
(1)  212/   C0CBE : =$0                 vcRS3 set $00
(1)  212/   C0CBE : =$0                 vcRS4 set $00
(1)  213/   C0CBE : (MACRO)             	smpsVcAttackRate    $11, $1A, $18, $17
(1)  213/   C0CBE : =$11                vcAR1 set $11
(1)  213/   C0CBE : =$1A                vcAR2 set $1A
(1)  213/   C0CBE : =$18                vcAR3 set $18
(1)  213/   C0CBE : =$17                vcAR4 set $17
(1)  214/   C0CBE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  214/   C0CBE : =$0                 vcAM1 set $00<<5
(1)  214/   C0CBE : =$0                 vcAM2 set $00<<5
(1)  214/   C0CBE : =$0                 vcAM3 set $00<<5
(1)  214/   C0CBE : =$0                 vcAM4 set $00<<5
(1)  215/   C0CBE : (MACRO)             	smpsVcDecayRate1    $00, $0B, $16, $17
(1)  215/   C0CBE : =$0                 vcD1R1 set $00
(1)  215/   C0CBE : =$B                 vcD1R2 set $0B
(1)  215/   C0CBE : =$16                vcD1R3 set $16
(1)  215/   C0CBE : =$17                vcD1R4 set $17
(1)  216/   C0CBE : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  216/   C0CBE : =$0                 vcD2R1 set $00
(1)  216/   C0CBE : =$0                 vcD2R2 set $00
(1)  216/   C0CBE : =$0                 vcD2R3 set $00
(1)  216/   C0CBE : =$0                 vcD2R4 set $00
(1)  217/   C0CBE : (MACRO)             	smpsVcDecayLevel    $00, $00, $01, $01
(1)  217/   C0CBE : =$0                 vcDL1 set $00
(1)  217/   C0CBE : =$0                 vcDL2 set $00
(1)  217/   C0CBE : =$1                 vcDL3 set $01
(1)  217/   C0CBE : =$1                 vcDL4 set $01
(1)  218/   C0CBE : (MACRO)             	smpsVcReleaseRate   $0A, $00, $00, $00
(1)  218/   C0CBE : =$A                 vcRR1 set $0A
(1)  218/   C0CBE : =$0                 vcRR2 set $00
(1)  218/   C0CBE : =$0                 vcRR3 set $00
(1)  218/   C0CBE : =$0                 vcRR4 set $00
(1)  219/   C0CBE : (MACRO)             	smpsVcTotalLevel    $00, $21, $11, $20
(1)  219/   C0CBE : =$0                 vcTL1 set $00
(1)  219/   C0CBE : =$21                vcTL2 set $21
(1)  219/   C0CBE : =$11                vcTL3 set $11
(1)  219/   C0CBE : =$20                vcTL4 set $20
(1)  219/   C0CBE : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  219/   C0CBF :                     ;   0     1     2     3     4     5     6     7
(1)  219/   C0CBF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  219/   C0CBF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  219/   C0CBF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  219/   C0CBF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  219/   C0CBF : =$80                vcTLMask1 set $80
(1)  219/   C0CBF :                     
(1)  219/   C0CBF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  219/   C0CBF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  219/   C0CBF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  219/   C0CBF : =$80                vcTLMask1 set $80
(1)  219/   C0CBF : =$0                 vcTL1 set vcTL1&$7F
(1)  219/   C0CBF : =$21                vcTL2 set vcTL2&$7F
(1)  219/   C0CBF : =$11                vcTL3 set vcTL3&$7F
(1)  219/   C0CBF : =$20                vcTL4 set vcTL4&$7F
(1)  219/   C0CBF :                     
(1)  219/   C0CBF : 3252 3272                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  219/   C0CC3 : 1718 1A11                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  219/   C0CC7 : 1716 0B00                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  219/   C0CCB : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  219/   C0CCF : 1010 000A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  219/   C0CD3 : 2011 2180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  220/   C0CD7 :                     
(1)  221/   C0CD7 :                     
   53/   C0CD7 :                        Music_11:	include		"music-improved/91 - Options.asm"
(1)    1/   C0CD7 :                     Options_Header:
(1)    2/   C0CD7 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C0CD7 :                     
(1)    2/   C0CD7 : =$2                 SourceDriver set 2
(1)    2/   C0CD7 :                     
(1)    2/   C0CD7 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C0CD7 :                     
(1)    2/   C0CD7 : =$C0CD7             songStart set *
(1)    2/   C0CD7 :                     
(1)    2/   C0CD7 :                     
(1)    3/   C0CD7 : (MACRO)             	smpsHeaderVoice     Options_Voices
(1)    3/   C0CD7 : D58D                                dc.w    z80_ptr(OPTIONS_VOICES)
(1)    4/   C0CD9 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C0CD9 : 0603                        dc.b    $06,$03
(1)    5/   C0CDB : (MACRO)             	smpsHeaderTempo     $01, $87
(1)    5/   C0CDB : 01                          dc.b    $01
(1)    5/   C0CDC :  (MACRO-2)                  convertMainTempoMod $87
(1)    5/   C0CDC : 79                                          dc.b    s2TempotoS3($87)
(1)    6/   C0CDD :                     
(1)    7/   C0CDD : (MACRO)             	smpsHeaderDAC       Options_DAC
(1)    7/   C0CDD :  (MACRO-2)                  CheckedChannelPointer OPTIONS_DAC
(1)    7/   C0CDD : C08D                                dc.w    z80_ptr(OPTIONS_DAC)
(1)    7/   C0CDF : 0000                                dc.w    $00
(1)    8/   C0CE1 : (MACRO)             	smpsHeaderFM        Options_FM1,	$F4, $05
(1)    8/   C0CE1 :  (MACRO-2)                  CheckedChannelPointer OPTIONS_FM1
(1)    8/   C0CE1 : 878D                                dc.w    z80_ptr(OPTIONS_FM1)
(1)    8/   C0CE3 : F405                        dc.b    $F4,$05
(1)    9/   C0CE5 : (MACRO)             	smpsHeaderFM        Options_FM2,	$00, $07
(1)    9/   C0CE5 :  (MACRO-2)                  CheckedChannelPointer OPTIONS_FM2
(1)    9/   C0CE5 : 598D                                dc.w    z80_ptr(OPTIONS_FM2)
(1)    9/   C0CE7 : 0007                        dc.b    $00,$07
(1)   10/   C0CE9 : (MACRO)             	smpsHeaderFM        Options_FM3,	$E8, $0E
(1)   10/   C0CE9 :  (MACRO-2)                  CheckedChannelPointer OPTIONS_FM3
(1)   10/   C0CE9 : 2A8D                                dc.w    z80_ptr(OPTIONS_FM3)
(1)   10/   C0CEB : E80E                        dc.b    $E8,$0E
(1)   11/   C0CED : (MACRO)             	smpsHeaderFM        Options_FM4,	$00, $13
(1)   11/   C0CED :  (MACRO-2)                  CheckedChannelPointer OPTIONS_FM4
(1)   11/   C0CED : 078D                                dc.w    z80_ptr(OPTIONS_FM4)
(1)   11/   C0CEF : 0013                        dc.b    $00,$13
(1)   12/   C0CF1 : (MACRO)             	smpsHeaderFM        Options_FM5,	$00, $07
(1)   12/   C0CF1 :  (MACRO-2)                  CheckedChannelPointer OPTIONS_FM5
(1)   12/   C0CF1 : 4B8D                                dc.w    z80_ptr(OPTIONS_FM5)
(1)   12/   C0CF3 : 0007                        dc.b    $00,$07
(1)   13/   C0CF5 : (MACRO)             	smpsHeaderPSG       Options_PSG1,	$E8, $06, $00, fTone_03
(1)   13/   C0CF5 :  (MACRO-2)                  CheckedChannelPointer OPTIONS_PSG1
(1)   13/   C0CF5 : BB8D                                dc.w    z80_ptr(OPTIONS_PSG1)
(1)   13/   C0CF7 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   13/   C0CF7 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   13/   C0CF8 : 0600 03                     dc.b    $06,$00,FTONE_03
(1)   14/   C0CFB : (MACRO)             	smpsHeaderPSG       Options_PSG2,	$DC, $05, $00, fTone_07
(1)   14/   C0CFB :  (MACRO-2)                  CheckedChannelPointer OPTIONS_PSG2
(1)   14/   C0CFB : AF8D                                dc.w    z80_ptr(OPTIONS_PSG2)
(1)   14/   C0CFD :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C0CFD : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C0CFE : 0500 07                     dc.b    $05,$00,FTONE_07
(1)   15/   C0D01 : (MACRO)             	smpsHeaderPSG       Options_PSG3,	$DC, $06, $00, fTone_07
(1)   15/   C0D01 :  (MACRO-2)                  CheckedChannelPointer OPTIONS_PSG3
(1)   15/   C0D01 : B48D                                dc.w    z80_ptr(OPTIONS_PSG3)
(1)   15/   C0D03 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/   C0D03 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   15/   C0D04 : 0600 07                     dc.b    $06,$00,FTONE_07
(1)   16/   C0D07 :                     
(1)   17/   C0D07 :                     ; FM4 Data
(1)   18/   C0D07 :                     Options_FM4:
(1)   19/   C0D07 : (MACRO)             	smpsSetvoice        $03
(1)   19/   C0D07 :  (MACRO-2)                  smpsFMvoice $03
(1)   19/   C0D07 : EF03                                dc.b    $EF,$03
(1)   20/   C0D09 : (MACRO)             	smpsPan             panRight, $00
(1)   20/   C0D09 : =$0                 panNone set $00
(1)   20/   C0D09 : =$40                panRight set $40
(1)   20/   C0D09 : =$80                panLeft set $80
(1)   20/   C0D09 : =$C0                panCentre set $C0
(1)   20/   C0D09 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   20/   C0D09 : E040                        dc.b $E0,PANRIGHT+$00
(1)   21/   C0D0B : (MACRO)             	smpsNoteFill        $05
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   21/   C0D0B :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   21/   C0D0B : E805                                dc.b    $E8,$05
(1)   22/   C0D0D :                     
(1)   23/   C0D0D :                     Options_Loop00:
(1)   24/   C0D0D : BD06 BCBA B8        	dc.b	nC5, $06, nB4, nA4, nG4
(1)   25/   C0D12 : (MACRO)             	smpsLoop            $00, $04, Options_Loop00
(1)   25/   C0D12 : F7                          dc.b    $F7
(1)   25/   C0D13 : 0004                        dc.b    $00,$04
(1)   25/   C0D15 : 0D8D                                dc.w    z80_ptr(OPTIONS_LOOP00)
(1)   26/   C0D17 : BDBB B9B8 BDBB B9B8 	dc.b	nC5, nBb4, nAb4, nG4, nC5, nBb4, nAb4, nG4, nD5, nC5, nBb4, nAb4
            C0D1F : BFBD BBB9         
(1)   27/   C0D23 : BFBD BBB9           	dc.b	nD5, nC5, nBb4, nAb4
(1)   28/   C0D27 : (MACRO)             	smpsJump            Options_Loop00
(1)   28/   C0D27 : F6                          dc.b    $F6
(1)   28/   C0D28 : 0D8D                                dc.w    z80_ptr(OPTIONS_LOOP00)
(1)   29/   C0D2A :                     
(1)   30/   C0D2A :                     ; FM3 Data
(1)   31/   C0D2A :                     Options_FM3:
(1)   32/   C0D2A : (MACRO)             	smpsSetvoice        $04
(1)   32/   C0D2A :  (MACRO-2)                  smpsFMvoice $04
(1)   32/   C0D2A : EF04                                dc.b    $EF,$04
(1)   33/   C0D2C :                     
(1)   34/   C0D2C :                     Options_Jump01:
(1)   35/   C0D2C : 800C B106 B5B8 0CB1 	dc.b	nRst, $0C, nC4, $06, nE4, nG4, $0C, nC4, $06, nE4, nG4, $18
            C0D34 : 06B5 B818         
(1)   36/   C0D38 : E718 800C AD06 B1B4 	dc.b	smpsNoAttack, $18, nRst, $0C, nAb3, $06, nC4, nEb4, $18, nRst, $0C, nBb3
            C0D40 : 1880 0CAF         
(1)   37/   C0D44 : 06B3 B618           	dc.b	$06, nD4, nF4, $18
(1)   38/   C0D48 : (MACRO)             	smpsJump            Options_Jump01
(1)   38/   C0D48 : F6                          dc.b    $F6
(1)   38/   C0D49 : 2C8D                                dc.w    z80_ptr(OPTIONS_JUMP01)
(1)   39/   C0D4B :                     
(1)   40/   C0D4B :                     ; FM5 Data
(1)   41/   C0D4B :                     Options_FM5:
(1)   42/   C0D4B : (MACRO)             	smpsSetvoice        $01
(1)   42/   C0D4B :  (MACRO-2)                  smpsFMvoice $01
(1)   42/   C0D4B : EF01                                dc.b    $EF,$01
(1)   43/   C0D4D : (MACRO)             	smpsPan             panRight, $00
(1)   43/   C0D4D : =$0                 panNone set $00
(1)   43/   C0D4D : =$40                panRight set $40
(1)   43/   C0D4D : =$80                panLeft set $80
(1)   43/   C0D4D : =$C0                panCentre set $C0
(1)   43/   C0D4D : =$C0                panCenter set $C0 ; silly Americans :U
(1)   43/   C0D4D : E040                        dc.b $E0,PANRIGHT+$00
(1)   44/   C0D4F : (MACRO)             	smpsModSet          $02, $01, $02, $04
(1)   44/   C0D4F : F0                          dc.b    $F0
(1)   44/   C0D50 : 0301 0205                           dc.b    $02+1,$01,$02,(($04+1) * $01) & $FF
(1)   44/   C0D54 :                             ;dc.b   $01,$02,$04
(1)   45/   C0D54 : 8002                	dc.b	nRst, $02
(1)   46/   C0D56 : (MACRO)             	smpsJump            Options_Jump00
(1)   46/   C0D56 : F6                          dc.b    $F6
(1)   46/   C0D57 : 628D                                dc.w    z80_ptr(OPTIONS_JUMP00)
(1)   47/   C0D59 :                     
(1)   48/   C0D59 :                     ; FM2 Data
(1)   49/   C0D59 :                     Options_FM2:
(1)   50/   C0D59 : (MACRO)             	smpsSetvoice        $01
(1)   50/   C0D59 :  (MACRO-2)                  smpsFMvoice $01
(1)   50/   C0D59 : EF01                                dc.b    $EF,$01
(1)   51/   C0D5B : (MACRO)             	smpsPan             panLeft, $00
(1)   51/   C0D5B : =$0                 panNone set $00
(1)   51/   C0D5B : =$40                panRight set $40
(1)   51/   C0D5B : =$80                panLeft set $80
(1)   51/   C0D5B : =$C0                panCentre set $C0
(1)   51/   C0D5B : =$C0                panCenter set $C0 ; silly Americans :U
(1)   51/   C0D5B : E080                        dc.b $E0,PANLEFT+$00
(1)   52/   C0D5D : (MACRO)             	smpsModSet          $12, $01, $02, $04
(1)   52/   C0D5D : F0                          dc.b    $F0
(1)   52/   C0D5E : 1301 0205                           dc.b    $12+1,$01,$02,(($04+1) * $01) & $FF
(1)   52/   C0D62 :                             ;dc.b   $01,$02,$04
(1)   53/   C0D62 :                     
(1)   54/   C0D62 :                     Options_Jump00:
(1)   55/   C0D62 : 800C BD03 80BD 80BD 	dc.b	nRst, $0C, nC5, $03, nRst, nC5, nRst, nC5, $0C, nD5, $03, nRst
            C0D6A : 0CBF 0380         
(1)   56/   C0D6E : C20C 8006 C180 BF80 	dc.b	nF5, $0C, nRst, $06, nE5, nRst, nD5, nRst, nC5, nRst, nEb5, $0C
            C0D76 : BD80 C00C         
(1)   57/   C0D7A : C206 BD06 E718 E718 	dc.b	nF5, $06, nC5, $06, smpsNoAttack, $18, smpsNoAttack, $18, smpsNoAttack, $18
            C0D82 : E718               
(1)   58/   C0D84 : (MACRO)             	smpsJump            Options_Jump00
(1)   58/   C0D84 : F6                          dc.b    $F6
(1)   58/   C0D85 : 628D                                dc.w    z80_ptr(OPTIONS_JUMP00)
(1)   59/   C0D87 :                     
(1)   60/   C0D87 :                     ; FM1 Data
(1)   61/   C0D87 :                     Options_FM1:
(1)   62/   C0D87 : (MACRO)             	smpsSetvoice        $02
(1)   62/   C0D87 :  (MACRO-2)                  smpsFMvoice $02
(1)   62/   C0D87 : EF02                                dc.b    $EF,$02
(1)   63/   C0D89 : A506 8012 A506 8012 	dc.b	nC3, $06, nRst, $12, nC3, $06, nRst, $12, nC3, $06, nRst, $12
            C0D91 : A506 8012         
(1)   64/   C0D95 : A506 80A0 0CA1 0680 	dc.b	nC3, $06, nRst, nG2, $0C, nAb2, $06, nRst, $12, nAb2, $06, nRst
            C0D9D : 12A1 0680         
(1)   65/   C0DA1 : 9E0C A306 8012 A306 	dc.b	nF2, $0C, nBb2, $06, nRst, $12, nBb2, $06, nRst, nG2, $0C
            C0DA9 : 80A0 0C            
(1)   66/   C0DAC : (MACRO)             	smpsJump            Options_FM1
(1)   66/   C0DAC : F6                          dc.b    $F6
(1)   66/   C0DAD : 878D                                dc.w    z80_ptr(OPTIONS_FM1)
(1)   67/   C0DAF :                     
(1)   68/   C0DAF :                     ; PSG2 Data
(1)   69/   C0DAF :                     Options_PSG2:
(1)   70/   C0DAF : 8002                	dc.b	nRst, $02
(1)   71/   C0DB1 : (MACRO)             	smpsJump            Options_Jump00
(1)   71/   C0DB1 : F6                          dc.b    $F6
(1)   71/   C0DB2 : 628D                                dc.w    z80_ptr(OPTIONS_JUMP00)
(1)   72/   C0DB4 :                     
(1)   73/   C0DB4 :                     ; PSG3 Data
(1)   74/   C0DB4 :                     Options_PSG3:
(1)   75/   C0DB4 : (MACRO)             	smpsAlterNote       $01
(1)   75/   C0DB4 :  (MACRO-2)                  smpsDetune      $01
(1)   75/   C0DB4 : E101                        dc.b    $E1,$01
(1)   76/   C0DB6 : 8003                	dc.b	nRst, $03
(1)   77/   C0DB8 : (MACRO)             	smpsJump            Options_Jump00
(1)   77/   C0DB8 : F6                          dc.b    $F6
(1)   77/   C0DB9 : 628D                                dc.w    z80_ptr(OPTIONS_JUMP00)
(1)   78/   C0DBB :                     
(1)   79/   C0DBB :                     ; PSG1 Data
(1)   80/   C0DBB :                     Options_PSG1:
(1)   81/   C0DBB : (MACRO)             	smpsAlterNote       $01
(1)   81/   C0DBB :  (MACRO-2)                  smpsDetune      $01
(1)   81/   C0DBB : E101                        dc.b    $E1,$01
(1)   82/   C0DBD : (MACRO)             	smpsJump            Options_Jump01
(1)   82/   C0DBD : F6                          dc.b    $F6
(1)   82/   C0DBE : 2C8D                                dc.w    z80_ptr(OPTIONS_JUMP01)
(1)   83/   C0DC0 :                     
(1)   84/   C0DC0 :                     ; DAC Data
(1)   85/   C0DC0 :                     Options_DAC:
(1)   86/   C0DC0 : 820C 0404 040C 0404 	dc.b	dSnare, $0C, $04, $04, $04, $0C, $04, $04, $04, $0C, $04, $04
            C0DC8 : 040C 0404         
(1)   87/   C0DCC : 048C 068E 8C8E      	dc.b	$04, dMidTom, $06, dFloorTom, dMidTom, dFloorTom
(1)   88/   C0DD2 : (MACRO)             	smpsJump            Options_DAC
(1)   88/   C0DD2 : F6                          dc.b    $F6
(1)   88/   C0DD3 : C08D                                dc.w    z80_ptr(OPTIONS_DAC)
(1)   89/   C0DD5 :                     
(1)   90/   C0DD5 :                     Options_Voices:
(1)   91/   C0DD5 :                     ;	Voice $00
(1)   92/   C0DD5 :                     ;	$35
(1)   93/   C0DD5 :                     ;	$3F, $31, $58, $51, 	$1F, $9E, $1F, $9E, 	$0F, $11, $0E, $12
(1)   94/   C0DD5 :                     ;	$0E, $05, $08, $08, 	$5F, $0F, $6F, $0F, 	$25, $2D, $2F, $80
(1)   95/   C0DD5 : (MACRO)             	smpsVcAlgorithm     $05
(1)   95/   C0DD5 : =$5                 vcAlgorithm set $05
(1)   96/   C0DD5 : (MACRO)             	smpsVcFeedback      $06
(1)   96/   C0DD5 : =$6                 vcFeedback set $06
(1)   97/   C0DD5 : (MACRO)             	smpsVcUnusedBits    $00
(1)   97/   C0DD5 : =$0                 vcUnusedBits set $00
(1)   97/   C0DD5 : =$0                 vcD1R1Unk set 0
(1)   97/   C0DD5 : =$0                 vcD1R2Unk set 0
(1)   97/   C0DD5 : =$0                 vcD1R3Unk set 0
(1)   97/   C0DD5 : =$0                 vcD1R4Unk set 0
(1)   98/   C0DD5 : (MACRO)             	smpsVcDetune        $05, $05, $03, $03
(1)   98/   C0DD5 : =$5                 vcDT1 set $05
(1)   98/   C0DD5 : =$5                 vcDT2 set $05
(1)   98/   C0DD5 : =$3                 vcDT3 set $03
(1)   98/   C0DD5 : =$3                 vcDT4 set $03
(1)   99/   C0DD5 : (MACRO)             	smpsVcCoarseFreq    $01, $08, $01, $0F
(1)   99/   C0DD5 : =$1                 vcCF1 set $01
(1)   99/   C0DD5 : =$8                 vcCF2 set $08
(1)   99/   C0DD5 : =$1                 vcCF3 set $01
(1)   99/   C0DD5 : =$F                 vcCF4 set $0F
(1)  100/   C0DD5 : (MACRO)             	smpsVcRateScale     $02, $00, $02, $00
(1)  100/   C0DD5 : =$2                 vcRS1 set $02
(1)  100/   C0DD5 : =$0                 vcRS2 set $00
(1)  100/   C0DD5 : =$2                 vcRS3 set $02
(1)  100/   C0DD5 : =$0                 vcRS4 set $00
(1)  101/   C0DD5 : (MACRO)             	smpsVcAttackRate    $1E, $1F, $1E, $1F
(1)  101/   C0DD5 : =$1E                vcAR1 set $1E
(1)  101/   C0DD5 : =$1F                vcAR2 set $1F
(1)  101/   C0DD5 : =$1E                vcAR3 set $1E
(1)  101/   C0DD5 : =$1F                vcAR4 set $1F
(1)  102/   C0DD5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  102/   C0DD5 : =$0                 vcAM1 set $00<<5
(1)  102/   C0DD5 : =$0                 vcAM2 set $00<<5
(1)  102/   C0DD5 : =$0                 vcAM3 set $00<<5
(1)  102/   C0DD5 : =$0                 vcAM4 set $00<<5
(1)  103/   C0DD5 : (MACRO)             	smpsVcDecayRate1    $12, $0E, $11, $0F
(1)  103/   C0DD5 : =$12                vcD1R1 set $12
(1)  103/   C0DD5 : =$E                 vcD1R2 set $0E
(1)  103/   C0DD5 : =$11                vcD1R3 set $11
(1)  103/   C0DD5 : =$F                 vcD1R4 set $0F
(1)  104/   C0DD5 : (MACRO)             	smpsVcDecayRate2    $08, $08, $05, $0E
(1)  104/   C0DD5 : =$8                 vcD2R1 set $08
(1)  104/   C0DD5 : =$8                 vcD2R2 set $08
(1)  104/   C0DD5 : =$5                 vcD2R3 set $05
(1)  104/   C0DD5 : =$E                 vcD2R4 set $0E
(1)  105/   C0DD5 : (MACRO)             	smpsVcDecayLevel    $00, $06, $00, $05
(1)  105/   C0DD5 : =$0                 vcDL1 set $00
(1)  105/   C0DD5 : =$6                 vcDL2 set $06
(1)  105/   C0DD5 : =$0                 vcDL3 set $00
(1)  105/   C0DD5 : =$5                 vcDL4 set $05
(1)  106/   C0DD5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  106/   C0DD5 : =$F                 vcRR1 set $0F
(1)  106/   C0DD5 : =$F                 vcRR2 set $0F
(1)  106/   C0DD5 : =$F                 vcRR3 set $0F
(1)  106/   C0DD5 : =$F                 vcRR4 set $0F
(1)  107/   C0DD5 : (MACRO)             	smpsVcTotalLevel    $80, $2F, $2D, $25
(1)  107/   C0DD5 : =$80                vcTL1 set $80
(1)  107/   C0DD5 : =$2F                vcTL2 set $2F
(1)  107/   C0DD5 : =$2D                vcTL3 set $2D
(1)  107/   C0DD5 : =$25                vcTL4 set $25
(1)  107/   C0DD5 : 35                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  107/   C0DD6 :                     ;   0     1     2     3     4     5     6     7
(1)  107/   C0DD6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  107/   C0DD6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  107/   C0DD6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  107/   C0DD6 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  107/   C0DD6 : =$80                vcTLMask1 set $80
(1)  107/   C0DD6 :                     
(1)  107/   C0DD6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  107/   C0DD6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  107/   C0DD6 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  107/   C0DD6 : =$80                vcTLMask1 set $80
(1)  107/   C0DD6 : =$0                 vcTL1 set vcTL1&$7F
(1)  107/   C0DD6 : =$2F                vcTL2 set vcTL2&$7F
(1)  107/   C0DD6 : =$2D                vcTL3 set vcTL3&$7F
(1)  107/   C0DD6 : =$25                vcTL4 set vcTL4&$7F
(1)  107/   C0DD6 :                     
(1)  107/   C0DD6 : 3F31 5851                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  107/   C0DDA : 1F9E 1F9E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  107/   C0DDE : 0F11 0E12                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  107/   C0DE2 : 0E05 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  107/   C0DE6 : 5F0F 6F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  107/   C0DEA : 25AD AF80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  108/   C0DEE :                     
(1)  109/   C0DEE :                     ;	Voice $01
(1)  110/   C0DEE :                     ;	$3D
(1)  111/   C0DEE :                     ;	$01, $08, $01, $01, 	$90, $8D, $8F, $53, 	$0E, $0E, $0E, $05
(1)  112/   C0DEE :                     ;	$02, $03, $02, $04, 	$1F, $FF, $1F, $0F, 	$16, $28, $27, $80
(1)  113/   C0DEE : (MACRO)             	smpsVcAlgorithm     $05
(1)  113/   C0DEE : =$5                 vcAlgorithm set $05
(1)  114/   C0DEE : (MACRO)             	smpsVcFeedback      $07
(1)  114/   C0DEE : =$7                 vcFeedback set $07
(1)  115/   C0DEE : (MACRO)             	smpsVcUnusedBits    $00
(1)  115/   C0DEE : =$0                 vcUnusedBits set $00
(1)  115/   C0DEE : =$0                 vcD1R1Unk set 0
(1)  115/   C0DEE : =$0                 vcD1R2Unk set 0
(1)  115/   C0DEE : =$0                 vcD1R3Unk set 0
(1)  115/   C0DEE : =$0                 vcD1R4Unk set 0
(1)  116/   C0DEE : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  116/   C0DEE : =$0                 vcDT1 set $00
(1)  116/   C0DEE : =$0                 vcDT2 set $00
(1)  116/   C0DEE : =$0                 vcDT3 set $00
(1)  116/   C0DEE : =$0                 vcDT4 set $00
(1)  117/   C0DEE : (MACRO)             	smpsVcCoarseFreq    $01, $01, $08, $01
(1)  117/   C0DEE : =$1                 vcCF1 set $01
(1)  117/   C0DEE : =$1                 vcCF2 set $01
(1)  117/   C0DEE : =$8                 vcCF3 set $08
(1)  117/   C0DEE : =$1                 vcCF4 set $01
(1)  118/   C0DEE : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  118/   C0DEE : =$1                 vcRS1 set $01
(1)  118/   C0DEE : =$2                 vcRS2 set $02
(1)  118/   C0DEE : =$2                 vcRS3 set $02
(1)  118/   C0DEE : =$2                 vcRS4 set $02
(1)  119/   C0DEE : (MACRO)             	smpsVcAttackRate    $13, $0F, $0D, $10
(1)  119/   C0DEE : =$13                vcAR1 set $13
(1)  119/   C0DEE : =$F                 vcAR2 set $0F
(1)  119/   C0DEE : =$D                 vcAR3 set $0D
(1)  119/   C0DEE : =$10                vcAR4 set $10
(1)  120/   C0DEE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  120/   C0DEE : =$0                 vcAM1 set $00<<5
(1)  120/   C0DEE : =$0                 vcAM2 set $00<<5
(1)  120/   C0DEE : =$0                 vcAM3 set $00<<5
(1)  120/   C0DEE : =$0                 vcAM4 set $00<<5
(1)  121/   C0DEE : (MACRO)             	smpsVcDecayRate1    $05, $0E, $0E, $0E
(1)  121/   C0DEE : =$5                 vcD1R1 set $05
(1)  121/   C0DEE : =$E                 vcD1R2 set $0E
(1)  121/   C0DEE : =$E                 vcD1R3 set $0E
(1)  121/   C0DEE : =$E                 vcD1R4 set $0E
(1)  122/   C0DEE : (MACRO)             	smpsVcDecayRate2    $04, $02, $03, $02
(1)  122/   C0DEE : =$4                 vcD2R1 set $04
(1)  122/   C0DEE : =$2                 vcD2R2 set $02
(1)  122/   C0DEE : =$3                 vcD2R3 set $03
(1)  122/   C0DEE : =$2                 vcD2R4 set $02
(1)  123/   C0DEE : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  123/   C0DEE : =$0                 vcDL1 set $00
(1)  123/   C0DEE : =$1                 vcDL2 set $01
(1)  123/   C0DEE : =$F                 vcDL3 set $0F
(1)  123/   C0DEE : =$1                 vcDL4 set $01
(1)  124/   C0DEE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  124/   C0DEE : =$F                 vcRR1 set $0F
(1)  124/   C0DEE : =$F                 vcRR2 set $0F
(1)  124/   C0DEE : =$F                 vcRR3 set $0F
(1)  124/   C0DEE : =$F                 vcRR4 set $0F
(1)  125/   C0DEE : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $16
(1)  125/   C0DEE : =$80                vcTL1 set $80
(1)  125/   C0DEE : =$27                vcTL2 set $27
(1)  125/   C0DEE : =$28                vcTL3 set $28
(1)  125/   C0DEE : =$16                vcTL4 set $16
(1)  125/   C0DEE : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  125/   C0DEF :                     ;   0     1     2     3     4     5     6     7
(1)  125/   C0DEF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  125/   C0DEF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  125/   C0DEF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  125/   C0DEF : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  125/   C0DEF : =$80                vcTLMask1 set $80
(1)  125/   C0DEF :                     
(1)  125/   C0DEF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  125/   C0DEF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  125/   C0DEF : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  125/   C0DEF : =$80                vcTLMask1 set $80
(1)  125/   C0DEF : =$0                 vcTL1 set vcTL1&$7F
(1)  125/   C0DEF : =$27                vcTL2 set vcTL2&$7F
(1)  125/   C0DEF : =$28                vcTL3 set vcTL3&$7F
(1)  125/   C0DEF : =$16                vcTL4 set vcTL4&$7F
(1)  125/   C0DEF :                     
(1)  125/   C0DEF : 0108 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  125/   C0DF3 : 908D 8F53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  125/   C0DF7 : 0E0E 0E05                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  125/   C0DFB : 0203 0204                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  125/   C0DFF : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  125/   C0E03 : 16A8 A780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  126/   C0E07 :                     
(1)  127/   C0E07 :                     ;	Voice $02
(1)  128/   C0E07 :                     ;	$3A
(1)  129/   C0E07 :                     ;	$61, $3C, $13, $32, 	$98, $D8, $9D, $DA, 	$05, $09, $05, $06
(1)  130/   C0E07 :                     ;	$03, $01, $04, $04, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
(1)  131/   C0E07 : (MACRO)             	smpsVcAlgorithm     $02
(1)  131/   C0E07 : =$2                 vcAlgorithm set $02
(1)  132/   C0E07 : (MACRO)             	smpsVcFeedback      $07
(1)  132/   C0E07 : =$7                 vcFeedback set $07
(1)  133/   C0E07 : (MACRO)             	smpsVcUnusedBits    $00
(1)  133/   C0E07 : =$0                 vcUnusedBits set $00
(1)  133/   C0E07 : =$0                 vcD1R1Unk set 0
(1)  133/   C0E07 : =$0                 vcD1R2Unk set 0
(1)  133/   C0E07 : =$0                 vcD1R3Unk set 0
(1)  133/   C0E07 : =$0                 vcD1R4Unk set 0
(1)  134/   C0E07 : (MACRO)             	smpsVcDetune        $03, $01, $03, $06
(1)  134/   C0E07 : =$3                 vcDT1 set $03
(1)  134/   C0E07 : =$1                 vcDT2 set $01
(1)  134/   C0E07 : =$3                 vcDT3 set $03
(1)  134/   C0E07 : =$6                 vcDT4 set $06
(1)  135/   C0E07 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $0C, $01
(1)  135/   C0E07 : =$2                 vcCF1 set $02
(1)  135/   C0E07 : =$3                 vcCF2 set $03
(1)  135/   C0E07 : =$C                 vcCF3 set $0C
(1)  135/   C0E07 : =$1                 vcCF4 set $01
(1)  136/   C0E07 : (MACRO)             	smpsVcRateScale     $03, $02, $03, $02
(1)  136/   C0E07 : =$3                 vcRS1 set $03
(1)  136/   C0E07 : =$2                 vcRS2 set $02
(1)  136/   C0E07 : =$3                 vcRS3 set $03
(1)  136/   C0E07 : =$2                 vcRS4 set $02
(1)  137/   C0E07 : (MACRO)             	smpsVcAttackRate    $1A, $1D, $18, $18
(1)  137/   C0E07 : =$1A                vcAR1 set $1A
(1)  137/   C0E07 : =$1D                vcAR2 set $1D
(1)  137/   C0E07 : =$18                vcAR3 set $18
(1)  137/   C0E07 : =$18                vcAR4 set $18
(1)  138/   C0E07 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  138/   C0E07 : =$0                 vcAM1 set $00<<5
(1)  138/   C0E07 : =$0                 vcAM2 set $00<<5
(1)  138/   C0E07 : =$0                 vcAM3 set $00<<5
(1)  138/   C0E07 : =$0                 vcAM4 set $00<<5
(1)  139/   C0E07 : (MACRO)             	smpsVcDecayRate1    $06, $05, $09, $05
(1)  139/   C0E07 : =$6                 vcD1R1 set $06
(1)  139/   C0E07 : =$5                 vcD1R2 set $05
(1)  139/   C0E07 : =$9                 vcD1R3 set $09
(1)  139/   C0E07 : =$5                 vcD1R4 set $05
(1)  140/   C0E07 : (MACRO)             	smpsVcDecayRate2    $04, $04, $01, $03
(1)  140/   C0E07 : =$4                 vcD2R1 set $04
(1)  140/   C0E07 : =$4                 vcD2R2 set $04
(1)  140/   C0E07 : =$1                 vcD2R3 set $01
(1)  140/   C0E07 : =$3                 vcD2R4 set $03
(1)  141/   C0E07 : (MACRO)             	smpsVcDecayLevel    $0A, $00, $00, $01
(1)  141/   C0E07 : =$A                 vcDL1 set $0A
(1)  141/   C0E07 : =$0                 vcDL2 set $00
(1)  141/   C0E07 : =$0                 vcDL3 set $00
(1)  141/   C0E07 : =$1                 vcDL4 set $01
(1)  142/   C0E07 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  142/   C0E07 : =$F                 vcRR1 set $0F
(1)  142/   C0E07 : =$F                 vcRR2 set $0F
(1)  142/   C0E07 : =$F                 vcRR3 set $0F
(1)  142/   C0E07 : =$F                 vcRR4 set $0F
(1)  143/   C0E07 : (MACRO)             	smpsVcTotalLevel    $80, $31, $47, $21
(1)  143/   C0E07 : =$80                vcTL1 set $80
(1)  143/   C0E07 : =$31                vcTL2 set $31
(1)  143/   C0E07 : =$47                vcTL3 set $47
(1)  143/   C0E07 : =$21                vcTL4 set $21
(1)  143/   C0E07 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  143/   C0E08 :                     ;   0     1     2     3     4     5     6     7
(1)  143/   C0E08 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  143/   C0E08 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  143/   C0E08 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  143/   C0E08 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  143/   C0E08 : =$80                vcTLMask1 set $80
(1)  143/   C0E08 :                     
(1)  143/   C0E08 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  143/   C0E08 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  143/   C0E08 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  143/   C0E08 : =$80                vcTLMask1 set $80
(1)  143/   C0E08 : =$0                 vcTL1 set vcTL1&$7F
(1)  143/   C0E08 : =$31                vcTL2 set vcTL2&$7F
(1)  143/   C0E08 : =$47                vcTL3 set vcTL3&$7F
(1)  143/   C0E08 : =$21                vcTL4 set vcTL4&$7F
(1)  143/   C0E08 :                     
(1)  143/   C0E08 : 613C 1332                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  143/   C0E0C : 98D8 9DDA                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  143/   C0E10 : 0509 0506                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  143/   C0E14 : 0301 0404                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  143/   C0E18 : 1F0F 0FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  143/   C0E1C : 2147 3180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  144/   C0E20 :                     
(1)  145/   C0E20 :                     ;	Voice $03
(1)  146/   C0E20 :                     ;	$3C
(1)  147/   C0E20 :                     ;	$01, $01, $00, $01, 	$CF, $0E, $CF, $0E, 	$00, $02, $00, $02
(1)  148/   C0E20 :                     ;	$00, $00, $00, $00, 	$02, $37, $02, $38, 	$1E, $80, $1F, $80
(1)  149/   C0E20 : (MACRO)             	smpsVcAlgorithm     $04
(1)  149/   C0E20 : =$4                 vcAlgorithm set $04
(1)  150/   C0E20 : (MACRO)             	smpsVcFeedback      $07
(1)  150/   C0E20 : =$7                 vcFeedback set $07
(1)  151/   C0E20 : (MACRO)             	smpsVcUnusedBits    $00
(1)  151/   C0E20 : =$0                 vcUnusedBits set $00
(1)  151/   C0E20 : =$0                 vcD1R1Unk set 0
(1)  151/   C0E20 : =$0                 vcD1R2Unk set 0
(1)  151/   C0E20 : =$0                 vcD1R3Unk set 0
(1)  151/   C0E20 : =$0                 vcD1R4Unk set 0
(1)  152/   C0E20 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  152/   C0E20 : =$0                 vcDT1 set $00
(1)  152/   C0E20 : =$0                 vcDT2 set $00
(1)  152/   C0E20 : =$0                 vcDT3 set $00
(1)  152/   C0E20 : =$0                 vcDT4 set $00
(1)  153/   C0E20 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $01, $01
(1)  153/   C0E20 : =$1                 vcCF1 set $01
(1)  153/   C0E20 : =$0                 vcCF2 set $00
(1)  153/   C0E20 : =$1                 vcCF3 set $01
(1)  153/   C0E20 : =$1                 vcCF4 set $01
(1)  154/   C0E20 : (MACRO)             	smpsVcRateScale     $00, $03, $00, $03
(1)  154/   C0E20 : =$0                 vcRS1 set $00
(1)  154/   C0E20 : =$3                 vcRS2 set $03
(1)  154/   C0E20 : =$0                 vcRS3 set $00
(1)  154/   C0E20 : =$3                 vcRS4 set $03
(1)  155/   C0E20 : (MACRO)             	smpsVcAttackRate    $0E, $0F, $0E, $0F
(1)  155/   C0E20 : =$E                 vcAR1 set $0E
(1)  155/   C0E20 : =$F                 vcAR2 set $0F
(1)  155/   C0E20 : =$E                 vcAR3 set $0E
(1)  155/   C0E20 : =$F                 vcAR4 set $0F
(1)  156/   C0E20 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  156/   C0E20 : =$0                 vcAM1 set $00<<5
(1)  156/   C0E20 : =$0                 vcAM2 set $00<<5
(1)  156/   C0E20 : =$0                 vcAM3 set $00<<5
(1)  156/   C0E20 : =$0                 vcAM4 set $00<<5
(1)  157/   C0E20 : (MACRO)             	smpsVcDecayRate1    $02, $00, $02, $00
(1)  157/   C0E20 : =$2                 vcD1R1 set $02
(1)  157/   C0E20 : =$0                 vcD1R2 set $00
(1)  157/   C0E20 : =$2                 vcD1R3 set $02
(1)  157/   C0E20 : =$0                 vcD1R4 set $00
(1)  158/   C0E20 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  158/   C0E20 : =$0                 vcD2R1 set $00
(1)  158/   C0E20 : =$0                 vcD2R2 set $00
(1)  158/   C0E20 : =$0                 vcD2R3 set $00
(1)  158/   C0E20 : =$0                 vcD2R4 set $00
(1)  159/   C0E20 : (MACRO)             	smpsVcDecayLevel    $03, $00, $03, $00
(1)  159/   C0E20 : =$3                 vcDL1 set $03
(1)  159/   C0E20 : =$0                 vcDL2 set $00
(1)  159/   C0E20 : =$3                 vcDL3 set $03
(1)  159/   C0E20 : =$0                 vcDL4 set $00
(1)  160/   C0E20 : (MACRO)             	smpsVcReleaseRate   $08, $02, $07, $02
(1)  160/   C0E20 : =$8                 vcRR1 set $08
(1)  160/   C0E20 : =$2                 vcRR2 set $02
(1)  160/   C0E20 : =$7                 vcRR3 set $07
(1)  160/   C0E20 : =$2                 vcRR4 set $02
(1)  161/   C0E20 : (MACRO)             	smpsVcTotalLevel    $80, $1F, $80, $1E
(1)  161/   C0E20 : =$80                vcTL1 set $80
(1)  161/   C0E20 : =$1F                vcTL2 set $1F
(1)  161/   C0E20 : =$80                vcTL3 set $80
(1)  161/   C0E20 : =$1E                vcTL4 set $1E
(1)  161/   C0E20 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  161/   C0E21 :                     ;   0     1     2     3     4     5     6     7
(1)  161/   C0E21 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  161/   C0E21 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  161/   C0E21 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  161/   C0E21 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  161/   C0E21 : =$80                vcTLMask1 set $80
(1)  161/   C0E21 :                     
(1)  161/   C0E21 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  161/   C0E21 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  161/   C0E21 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  161/   C0E21 : =$80                vcTLMask1 set $80
(1)  161/   C0E21 : =$0                 vcTL1 set vcTL1&$7F
(1)  161/   C0E21 : =$1F                vcTL2 set vcTL2&$7F
(1)  161/   C0E21 : =$0                 vcTL3 set vcTL3&$7F
(1)  161/   C0E21 : =$1E                vcTL4 set vcTL4&$7F
(1)  161/   C0E21 :                     
(1)  161/   C0E21 : 0101 0001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  161/   C0E25 : CF0E CF0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  161/   C0E29 : 0002 0002                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  161/   C0E2D : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  161/   C0E31 : 0237 0238                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  161/   C0E35 : 1E80 1F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  162/   C0E39 :                     
(1)  163/   C0E39 :                     ;	Voice $04
(1)  164/   C0E39 :                     ;	$3A
(1)  165/   C0E39 :                     ;	$14, $03, $05, $14, 	$8C, $58, $4E, $4E, 	$0A, $0D, $06, $06
(1)  166/   C0E39 :                     ;	$00, $00, $00, $01, 	$1F, $FF, $0F, $5F, 	$1F, $2E, $3B, $80
(1)  167/   C0E39 : (MACRO)             	smpsVcAlgorithm     $02
(1)  167/   C0E39 : =$2                 vcAlgorithm set $02
(1)  168/   C0E39 : (MACRO)             	smpsVcFeedback      $07
(1)  168/   C0E39 : =$7                 vcFeedback set $07
(1)  169/   C0E39 : (MACRO)             	smpsVcUnusedBits    $00
(1)  169/   C0E39 : =$0                 vcUnusedBits set $00
(1)  169/   C0E39 : =$0                 vcD1R1Unk set 0
(1)  169/   C0E39 : =$0                 vcD1R2Unk set 0
(1)  169/   C0E39 : =$0                 vcD1R3Unk set 0
(1)  169/   C0E39 : =$0                 vcD1R4Unk set 0
(1)  170/   C0E39 : (MACRO)             	smpsVcDetune        $01, $00, $00, $01
(1)  170/   C0E39 : =$1                 vcDT1 set $01
(1)  170/   C0E39 : =$0                 vcDT2 set $00
(1)  170/   C0E39 : =$0                 vcDT3 set $00
(1)  170/   C0E39 : =$1                 vcDT4 set $01
(1)  171/   C0E39 : (MACRO)             	smpsVcCoarseFreq    $04, $05, $03, $04
(1)  171/   C0E39 : =$4                 vcCF1 set $04
(1)  171/   C0E39 : =$5                 vcCF2 set $05
(1)  171/   C0E39 : =$3                 vcCF3 set $03
(1)  171/   C0E39 : =$4                 vcCF4 set $04
(1)  172/   C0E39 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $02
(1)  172/   C0E39 : =$1                 vcRS1 set $01
(1)  172/   C0E39 : =$1                 vcRS2 set $01
(1)  172/   C0E39 : =$1                 vcRS3 set $01
(1)  172/   C0E39 : =$2                 vcRS4 set $02
(1)  173/   C0E39 : (MACRO)             	smpsVcAttackRate    $0E, $0E, $18, $0C
(1)  173/   C0E39 : =$E                 vcAR1 set $0E
(1)  173/   C0E39 : =$E                 vcAR2 set $0E
(1)  173/   C0E39 : =$18                vcAR3 set $18
(1)  173/   C0E39 : =$C                 vcAR4 set $0C
(1)  174/   C0E39 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  174/   C0E39 : =$0                 vcAM1 set $00<<5
(1)  174/   C0E39 : =$0                 vcAM2 set $00<<5
(1)  174/   C0E39 : =$0                 vcAM3 set $00<<5
(1)  174/   C0E39 : =$0                 vcAM4 set $00<<5
(1)  175/   C0E39 : (MACRO)             	smpsVcDecayRate1    $06, $06, $0D, $0A
(1)  175/   C0E39 : =$6                 vcD1R1 set $06
(1)  175/   C0E39 : =$6                 vcD1R2 set $06
(1)  175/   C0E39 : =$D                 vcD1R3 set $0D
(1)  175/   C0E39 : =$A                 vcD1R4 set $0A
(1)  176/   C0E39 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1)  176/   C0E39 : =$1                 vcD2R1 set $01
(1)  176/   C0E39 : =$0                 vcD2R2 set $00
(1)  176/   C0E39 : =$0                 vcD2R3 set $00
(1)  176/   C0E39 : =$0                 vcD2R4 set $00
(1)  177/   C0E39 : (MACRO)             	smpsVcDecayLevel    $05, $00, $0F, $01
(1)  177/   C0E39 : =$5                 vcDL1 set $05
(1)  177/   C0E39 : =$0                 vcDL2 set $00
(1)  177/   C0E39 : =$F                 vcDL3 set $0F
(1)  177/   C0E39 : =$1                 vcDL4 set $01
(1)  178/   C0E39 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  178/   C0E39 : =$F                 vcRR1 set $0F
(1)  178/   C0E39 : =$F                 vcRR2 set $0F
(1)  178/   C0E39 : =$F                 vcRR3 set $0F
(1)  178/   C0E39 : =$F                 vcRR4 set $0F
(1)  179/   C0E39 : (MACRO)             	smpsVcTotalLevel    $80, $3B, $2E, $1F
(1)  179/   C0E39 : =$80                vcTL1 set $80
(1)  179/   C0E39 : =$3B                vcTL2 set $3B
(1)  179/   C0E39 : =$2E                vcTL3 set $2E
(1)  179/   C0E39 : =$1F                vcTL4 set $1F
(1)  179/   C0E39 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  179/   C0E3A :                     ;   0     1     2     3     4     5     6     7
(1)  179/   C0E3A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  179/   C0E3A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  179/   C0E3A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  179/   C0E3A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  179/   C0E3A : =$80                vcTLMask1 set $80
(1)  179/   C0E3A :                     
(1)  179/   C0E3A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  179/   C0E3A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  179/   C0E3A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  179/   C0E3A : =$80                vcTLMask1 set $80
(1)  179/   C0E3A : =$0                 vcTL1 set vcTL1&$7F
(1)  179/   C0E3A : =$3B                vcTL2 set vcTL2&$7F
(1)  179/   C0E3A : =$2E                vcTL3 set vcTL3&$7F
(1)  179/   C0E3A : =$1F                vcTL4 set vcTL4&$7F
(1)  179/   C0E3A :                     
(1)  179/   C0E3A : 1403 0514                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  179/   C0E3E : 8C58 4E4E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  179/   C0E42 : 0A0D 0606                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  179/   C0E46 : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  179/   C0E4A : 1FFF 0F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  179/   C0E4E : 1F2E 3B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  180/   C0E52 :                     
(1)  181/   C0E52 :                     
   54/   C0E52 :                        Music_12:	include		"music-improved/92 - Special Stage.asm"
(1)    1/   C0E52 :                     SpecStg_Header:
(1)    2/   C0E52 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C0E52 :                     
(1)    2/   C0E52 : =$2                 SourceDriver set 2
(1)    2/   C0E52 :                     
(1)    2/   C0E52 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C0E52 :                     
(1)    2/   C0E52 : =$C0E52             songStart set *
(1)    2/   C0E52 :                     
(1)    2/   C0E52 :                     
(1)    3/   C0E52 : (MACRO)             	smpsHeaderVoice     SpecStg_Voices
(1)    3/   C0E52 : B193                                dc.w    z80_ptr(SPECSTG_VOICES)
(1)    4/   C0E54 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C0E54 : 0603                        dc.b    $06,$03
(1)    5/   C0E56 : (MACRO)             	smpsHeaderTempo     $01, $FF
(1)    5/   C0E56 : 01                          dc.b    $01
(1)    5/   C0E57 :  (MACRO-2)                  convertMainTempoMod $FF
(1)    5/   C0E57 : 01                                          dc.b    s2TempotoS3($FF)
(1)    6/   C0E58 :                     
(1)    7/   C0E58 : (MACRO)             	smpsHeaderDAC       SpecStg_DAC
(1)    7/   C0E58 :  (MACRO-2)                  CheckedChannelPointer SPECSTG_DAC
(1)    7/   C0E58 : C092                                dc.w    z80_ptr(SPECSTG_DAC)
(1)    7/   C0E5A : 0000                                dc.w    $00
(1)    8/   C0E5C : (MACRO)             	smpsHeaderFM        SpecStg_FM1,	$0C, $08
(1)    8/   C0E5C :  (MACRO-2)                  CheckedChannelPointer SPECSTG_FM1
(1)    8/   C0E5C : 828E                                dc.w    z80_ptr(SPECSTG_FM1)
(1)    8/   C0E5E : 0C08                        dc.b    $0C,$08
(1)    9/   C0E60 : (MACRO)             	smpsHeaderFM        SpecStg_FM2,	$00, $05
(1)    9/   C0E60 :  (MACRO-2)                  CheckedChannelPointer SPECSTG_FM2
(1)    9/   C0E60 : D58E                                dc.w    z80_ptr(SPECSTG_FM2)
(1)    9/   C0E62 : 0005                        dc.b    $00,$05
(1)   10/   C0E64 : (MACRO)             	smpsHeaderFM        SpecStg_FM3,	$00, $0E
(1)   10/   C0E64 :  (MACRO-2)                  CheckedChannelPointer SPECSTG_FM3
(1)   10/   C0E64 : D88F                                dc.w    z80_ptr(SPECSTG_FM3)
(1)   10/   C0E66 : 000E                        dc.b    $00,$0E
(1)   11/   C0E68 : (MACRO)             	smpsHeaderFM        SpecStg_FM4,	$00, $0E
(1)   11/   C0E68 :  (MACRO-2)                  CheckedChannelPointer SPECSTG_FM4
(1)   11/   C0E68 : 9490                                dc.w    z80_ptr(SPECSTG_FM4)
(1)   11/   C0E6A : 000E                        dc.b    $00,$0E
(1)   12/   C0E6C : (MACRO)             	smpsHeaderFM        SpecStg_FM5,	$00, $0F
(1)   12/   C0E6C :  (MACRO-2)                  CheckedChannelPointer SPECSTG_FM5
(1)   12/   C0E6C : 4291                                dc.w    z80_ptr(SPECSTG_FM5)
(1)   12/   C0E6E : 000F                        dc.b    $00,$0F
(1)   13/   C0E70 : (MACRO)             	smpsHeaderPSG       SpecStg_PSG1,	$DC, $02, $00, fTone_0B
(1)   13/   C0E70 :  (MACRO-2)                  CheckedChannelPointer SPECSTG_PSG1
(1)   13/   C0E70 : 7591                                dc.w    z80_ptr(SPECSTG_PSG1)
(1)   13/   C0E72 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   13/   C0E72 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   13/   C0E73 : 0200 0B                     dc.b    $02,$00,FTONE_0B
(1)   14/   C0E76 : (MACRO)             	smpsHeaderPSG       SpecStg_PSG2,	$DC, $04, $00, fTone_0B
(1)   14/   C0E76 :  (MACRO-2)                  CheckedChannelPointer SPECSTG_PSG2
(1)   14/   C0E76 : 0292                                dc.w    z80_ptr(SPECSTG_PSG2)
(1)   14/   C0E78 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C0E78 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C0E79 : 0400 0B                     dc.b    $04,$00,FTONE_0B
(1)   15/   C0E7C : (MACRO)             	smpsHeaderPSG       SpecStg_PSG3,	$00, $01, $00, $00
(1)   15/   C0E7C :  (MACRO-2)                  CheckedChannelPointer SPECSTG_PSG3
(1)   15/   C0E7C : 2593                                dc.w    z80_ptr(SPECSTG_PSG3)
(1)   15/   C0E7E :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   C0E7E : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   C0E7F : 0100 00                     dc.b    $01,$00,$00
(1)   16/   C0E82 :                     
(1)   17/   C0E82 :                     ; FM1 Data
(1)   18/   C0E82 :                     SpecStg_FM1:
(1)   19/   C0E82 : (MACRO)             	smpsAlterVol        $08
(1)   19/   C0E82 : E608                        dc.b    $E6,$08
(1)   20/   C0E84 : (MACRO)             	smpsAlterPitch      $E8
(1)   20/   C0E84 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)   20/   C0E84 : FBE8                                dc.b    $FB,$E8
(1)   21/   C0E86 : (MACRO)             	smpsPan             panRight, $00
(1)   21/   C0E86 : =$0                 panNone set $00
(1)   21/   C0E86 : =$40                panRight set $40
(1)   21/   C0E86 : =$80                panLeft set $80
(1)   21/   C0E86 : =$C0                panCentre set $C0
(1)   21/   C0E86 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   21/   C0E86 : E040                        dc.b $E0,PANRIGHT+$00
(1)   22/   C0E88 : (MACRO)             	smpsSetvoice        $02
(1)   22/   C0E88 :  (MACRO-2)                  smpsFMvoice $02
(1)   22/   C0E88 : EF02                                dc.b    $EF,$02
(1)   23/   C0E8A : (MACRO)             	smpsCall            SpecStg_Call00
(1)   23/   C0E8A : F8                          dc.b    $F8
(1)   23/   C0E8B : 9F8F                                dc.w    z80_ptr(SPECSTG_CALL00)
(1)   24/   C0E8D : (MACRO)             	smpsAlterPitch      $18
(1)   24/   C0E8D :  (MACRO-2)                  smpsChangeTransposition $18
(1)   24/   C0E8D : FB18                                dc.b    $FB,$18
(1)   25/   C0E8F : (MACRO)             	smpsPan             panCenter, $00
(1)   25/   C0E8F : =$0                 panNone set $00
(1)   25/   C0E8F : =$40                panRight set $40
(1)   25/   C0E8F : =$80                panLeft set $80
(1)   25/   C0E8F : =$C0                panCentre set $C0
(1)   25/   C0E8F : =$C0                panCenter set $C0 ; silly Americans :U
(1)   25/   C0E8F : E0C0                        dc.b $E0,PANCENTER+$00
(1)   26/   C0E91 : (MACRO)             	smpsAlterVol        $F8
(1)   26/   C0E91 : E6F8                        dc.b    $E6,$F8
(1)   27/   C0E93 : (MACRO)             	smpsSetvoice        $03
(1)   27/   C0E93 :  (MACRO-2)                  smpsFMvoice $03
(1)   27/   C0E93 : EF03                                dc.b    $EF,$03
(1)   28/   C0E95 :                     
(1)   29/   C0E95 :                     SpecStg_Loop0C:
(1)   30/   C0E95 : 9D06 A995 0C96 97A0 	dc.b	nE2, $06, nE3, nAb1, $0C, nA1, nBb1, nG2, $06, nG3, nCs2, $0C
            C0E9D : 06AC 9A0C         
(1)   31/   C0EA1 : 9B9C 9D06 A995 0C96 	dc.b	nD2, nEb2, nE2, $06, nE3, nAb1, $0C, nA1, nBb1, nG2, $06, nG3
            C0EA9 : 97A0 06AC         
(1)   32/   C0EAD : 9A0C 9B9C 9D06 A995 	dc.b	nCs2, $0C, nD2, nEb2, nE2, $06, nE3, nAb1, $0C, nA1, nBb1, nG2
            C0EB5 : 0C96 97A0         
(1)   33/   C0EB9 : 06AC 9A0C 9B9C 9D06 	dc.b	$06, nG3, nCs2, $0C, nD2, nEb2, nE2, $06, nE3, nAb1, $0C, nA1
            C0EC1 : A995 0C96         
(1)   34/   C0EC5 : 9798 06A4 9A0C 9B9C 	dc.b	nBb1, nB1, $06, nB2, nCs2, $0C, nD2, nEb2
(1)   35/   C0ECD : (MACRO)             	smpsLoop            $00, $07, SpecStg_Loop0C
(1)   35/   C0ECD : F7                          dc.b    $F7
(1)   35/   C0ECE : 0007                        dc.b    $00,$07
(1)   35/   C0ED0 : 958E                                dc.w    z80_ptr(SPECSTG_LOOP0C)
(1)   36/   C0ED2 : (MACRO)             	smpsJump            SpecStg_Loop0C
(1)   36/   C0ED2 : F6                          dc.b    $F6
(1)   36/   C0ED3 : 958E                                dc.w    z80_ptr(SPECSTG_LOOP0C)
(1)   37/   C0ED5 :                     
(1)   38/   C0ED5 :                     ; FM2 Data
(1)   39/   C0ED5 :                     SpecStg_FM2:
(1)   40/   C0ED5 : (MACRO)             	smpsSetvoice        $06
(1)   40/   C0ED5 :  (MACRO-2)                  smpsFMvoice $06
(1)   40/   C0ED5 : EF06                                dc.b    $EF,$06
(1)   41/   C0ED7 : (MACRO)             	smpsAlterVol        $0A
(1)   41/   C0ED7 : E60A                        dc.b    $E6,$0A
(1)   42/   C0ED9 : (MACRO)             	smpsAlterPitch      $F4
(1)   42/   C0ED9 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   42/   C0ED9 : FBF4                                dc.b    $FB,$F4
(1)   43/   C0EDB : (MACRO)             	smpsPan             panLeft, $00
(1)   43/   C0EDB : =$0                 panNone set $00
(1)   43/   C0EDB : =$40                panRight set $40
(1)   43/   C0EDB : =$80                panLeft set $80
(1)   43/   C0EDB : =$C0                panCentre set $C0
(1)   43/   C0EDB : =$C0                panCenter set $C0 ; silly Americans :U
(1)   43/   C0EDB : E080                        dc.b $E0,PANLEFT+$00
(1)   44/   C0EDD : (MACRO)             	smpsModSet          $06, $01, $02, $04
(1)   44/   C0EDD : F0                          dc.b    $F0
(1)   44/   C0EDE : 0701 0205                           dc.b    $06+1,$01,$02,(($04+1) * $01) & $FF
(1)   44/   C0EE2 :                             ;dc.b   $01,$02,$04
(1)   45/   C0EE2 : (MACRO)             	smpsCall            SpecStg_Call00
(1)   45/   C0EE2 : F8                          dc.b    $F8
(1)   45/   C0EE3 : 9F8F                                dc.w    z80_ptr(SPECSTG_CALL00)
(1)   46/   C0EE5 : C506 8030 802A      	dc.b	nAb5, $06, nRst, $30, nRst, $2A
(1)   47/   C0EEB : (MACRO)             	smpsAlterPitch      $0C
(1)   47/   C0EEB :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   47/   C0EEB : FB0C                                dc.b    $FB,$0C
(1)   48/   C0EED : (MACRO)             	smpsAlterVol        $F6
(1)   48/   C0EED : E6F6                        dc.b    $E6,$F6
(1)   49/   C0EEF : (MACRO)             	smpsPan             panCenter, $00
(1)   49/   C0EEF : =$0                 panNone set $00
(1)   49/   C0EEF : =$40                panRight set $40
(1)   49/   C0EEF : =$80                panLeft set $80
(1)   49/   C0EEF : =$C0                panCentre set $C0
(1)   49/   C0EEF : =$C0                panCenter set $C0 ; silly Americans :U
(1)   49/   C0EEF : E0C0                        dc.b $E0,PANCENTER+$00
(1)   50/   C0EF1 : 8030 8030           	dc.b	nRst, $30, nRst, $30
(1)   51/   C0EF5 : (MACRO)             	smpsSetvoice        $05
(1)   51/   C0EF5 :  (MACRO-2)                  smpsFMvoice $05
(1)   51/   C0EF5 : EF05                                dc.b    $EF,$05
(1)   52/   C0EF7 : B812 B9BA 0CBB 12BC 	dc.b	nG4, $12, nAb4, nA4, $0C, nBb4, $12, nB4, nC5, $0C, nB4, $12
            C0EFF : BD0C BC12         
(1)   53/   C0F03 : BDBE 0CBD 12BE BF0C 	dc.b	nC5, nCs5, $0C, nC5, $12, nCs5, nD5, $0C
(1)   54/   C0F0B : (MACRO)             	smpsAlterVol        $02
(1)   54/   C0F0B : E602                        dc.b    $E6,$02
(1)   55/   C0F0D :                     
(1)   56/   C0F0D :                     SpecStg_Loop0A:
(1)   57/   C0F0D : (MACRO)             	smpsSetvoice        $00
(1)   57/   C0F0D :  (MACRO-2)                  smpsFMvoice $00
(1)   57/   C0F0D : EF00                                dc.b    $EF,$00
(1)   58/   C0F0F : (MACRO)             	smpsPan             panCenter, $00
(1)   58/   C0F0F : =$0                 panNone set $00
(1)   58/   C0F0F : =$40                panRight set $40
(1)   58/   C0F0F : =$80                panLeft set $80
(1)   58/   C0F0F : =$C0                panCentre set $C0
(1)   58/   C0F0F : =$C0                panCenter set $C0 ; silly Americans :U
(1)   58/   C0F0F : E0C0                        dc.b $E0,PANCENTER+$00
(1)   59/   C0F11 : (MACRO)             	smpsModSet          $01, $01, $08, $04
(1)   59/   C0F11 : F0                          dc.b    $F0
(1)   59/   C0F12 : 0201 0805                           dc.b    $01+1,$01,$08,(($04+1) * $01) & $FF
(1)   59/   C0F16 :                             ;dc.b   $01,$08,$04
(1)   60/   C0F16 : C118 C50C C818 C6C5 	dc.b	nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack, nAb5, nFs5
            C0F1E : 0CE7 C5C3         
(1)   61/   C0F22 : 18C1 C50C           	dc.b	$18, nE5, nAb5, $0C
(1)   62/   C0F26 : (MACRO)             	smpsModSet          $18, $01, $10, $04
(1)   62/   C0F26 : F0                          dc.b    $F0
(1)   62/   C0F27 : 1901 1005                           dc.b    $18+1,$01,$10,(($04+1) * $01) & $FF
(1)   62/   C0F2B :                             ;dc.b   $01,$10,$04
(1)   63/   C0F2B : C3C1 BF30 E730      	dc.b	nFs5, nE5, nD5, $30, smpsNoAttack, $30
(1)   64/   C0F31 : (MACRO)             	smpsModSet          $01, $01, $08, $04
(1)   64/   C0F31 : F0                          dc.b    $F0
(1)   64/   C0F32 : 0201 0805                           dc.b    $01+1,$01,$08,(($04+1) * $01) & $FF
(1)   64/   C0F36 :                             ;dc.b   $01,$08,$04
(1)   65/   C0F36 : 8030 80C1 18C5 0CC8 	dc.b	nRst, $30, nRst, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C
            C0F3E : 18C6 C50C         
(1)   66/   C0F42 : E7C5 C318 C1C5 0C   	dc.b	smpsNoAttack, nAb5, nFs5, $18, nE5, nAb5, $0C
(1)   67/   C0F49 : (MACRO)             	smpsModSet          $18, $01, $10, $04
(1)   67/   C0F49 : F0                          dc.b    $F0
(1)   67/   C0F4A : 1901 1005                           dc.b    $18+1,$01,$10,(($04+1) * $01) & $FF
(1)   67/   C0F4E :                             ;dc.b   $01,$10,$04
(1)   68/   C0F4E : C3C1 CB30 E730 8030 	dc.b	nFs5, nE5, nD6, $30, smpsNoAttack, $30, nRst, $30, nRst
            C0F56 : 80               
(1)   69/   C0F57 : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop0A
(1)   69/   C0F57 : F7                          dc.b    $F7
(1)   69/   C0F58 : 0002                        dc.b    $00,$02
(1)   69/   C0F5A : 0D8F                                dc.w    z80_ptr(SPECSTG_LOOP0A)
(1)   70/   C0F5C : (MACRO)             	smpsAlterVol        $FE
(1)   70/   C0F5C : E6FE                        dc.b    $E6,$FE
(1)   71/   C0F5E : (MACRO)             	smpsPan             panRight, $00
(1)   71/   C0F5E : =$0                 panNone set $00
(1)   71/   C0F5E : =$40                panRight set $40
(1)   71/   C0F5E : =$80                panLeft set $80
(1)   71/   C0F5E : =$C0                panCentre set $C0
(1)   71/   C0F5E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   71/   C0F5E : E040                        dc.b $E0,PANRIGHT+$00
(1)   72/   C0F60 :                     
(1)   73/   C0F60 :                     SpecStg_Loop0B:
(1)   74/   C0F60 : (MACRO)             	smpsSetvoice        $05
(1)   74/   C0F60 :  (MACRO-2)                  smpsFMvoice $05
(1)   74/   C0F60 : EF05                                dc.b    $EF,$05
(1)   75/   C0F62 : BC06 80BC 80BE BC12 	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $0C, nRst, nE5
            C0F6A : C10C 80C1         
(1)   76/   C0F6E : 80BC 0680 BC80 BEBC 	dc.b	nRst, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nAb4, $18, nRst
            C0F76 : 12B9 1880         
(1)   77/   C0F7A : BC06 80BC 80BE BC12 	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $06, nRst, nE5
            C0F82 : C106 80C1         
(1)   78/   C0F86 : 80BE C112 BC06 80BC 	dc.b	nRst, nCs5, nE5, $12, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12
            C0F8E : 80BE BC12         
(1)   79/   C0F92 : B918 80             	dc.b	nAb4, $18, nRst
(1)   80/   C0F95 : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop0B
(1)   80/   C0F95 : F7                          dc.b    $F7
(1)   80/   C0F96 : 0002                        dc.b    $00,$02
(1)   80/   C0F98 : 608F                                dc.w    z80_ptr(SPECSTG_LOOP0B)
(1)   81/   C0F9A : (MACRO)             	smpsAlterVol        $02
(1)   81/   C0F9A : E602                        dc.b    $E6,$02
(1)   82/   C0F9C : (MACRO)             	smpsJump            SpecStg_Loop0A
(1)   82/   C0F9C : F6                          dc.b    $F6
(1)   82/   C0F9D : 0D8F                                dc.w    z80_ptr(SPECSTG_LOOP0A)
(1)   83/   C0F9F :                     
(1)   84/   C0F9F :                     SpecStg_Call00:
(1)   85/   C0F9F : C106                	dc.b	nE5, $06
(1)   86/   C0FA1 : (MACRO)             	smpsAlterVol        $10
(1)   86/   C0FA1 : E610                        dc.b    $E6,$10
(1)   87/   C0FA3 : 0680 0C             	dc.b	$06, nRst, $0C
(1)   88/   C0FA6 : (MACRO)             	smpsAlterVol        $F0
(1)   88/   C0FA6 : E6F0                        dc.b    $E6,$F0
(1)   89/   C0FA8 : C508 C1C5 C806      	dc.b	nAb5, $08, nE5, nAb5, nB5, $06
(1)   90/   C0FAE : (MACRO)             	smpsAlterVol        $10
(1)   90/   C0FAE : E610                        dc.b    $E6,$10
(1)   91/   C0FB0 : 0680 0C             	dc.b	$06, nRst, $0C
(1)   92/   C0FB3 : (MACRO)             	smpsAlterVol        $F0
(1)   92/   C0FB3 : E6F0                        dc.b    $E6,$F0
(1)   93/   C0FB5 : C606                	dc.b	nA5, $06
(1)   94/   C0FB7 : (MACRO)             	smpsAlterVol        $10
(1)   94/   C0FB7 : E610                        dc.b    $E6,$10
(1)   95/   C0FB9 : 0680 0C             	dc.b	$06, nRst, $0C
(1)   96/   C0FBC : (MACRO)             	smpsAlterVol        $F0
(1)   96/   C0FBC : E6F0                        dc.b    $E6,$F0
(1)   97/   C0FBE : C524 C306           	dc.b	nAb5, $24, nFs5, $06
(1)   98/   C0FC2 : (MACRO)             	smpsAlterVol        $10
(1)   98/   C0FC2 : E610                        dc.b    $E6,$10
(1)   99/   C0FC4 : 06                  	dc.b	$06
(1)  100/   C0FC5 : (MACRO)             	smpsAlterVol        $F0
(1)  100/   C0FC5 : E6F0                        dc.b    $E6,$F0
(1)  101/   C0FC7 : C1                  	dc.b	nE5
(1)  102/   C0FC8 : (MACRO)             	smpsAlterVol        $10
(1)  102/   C0FC8 : E610                        dc.b    $E6,$10
(1)  103/   C0FCA : 0680 0C             	dc.b	$06, nRst, $0C
(1)  104/   C0FCD : (MACRO)             	smpsAlterVol        $F0
(1)  104/   C0FCD : E6F0                        dc.b    $E6,$F0
(1)  105/   C0FCF : C018 E730 E724 800C 	dc.b	nEb5, $18, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C
(1)  106/   C0FD7 : (MACRO)             	smpsReturn
(1)  106/   C0FD7 : F9                                  dc.b    $F9
(1)  107/   C0FD8 :                     
(1)  108/   C0FD8 :                     ; FM3 Data
(1)  109/   C0FD8 :                     SpecStg_FM3:
(1)  110/   C0FD8 : (MACRO)             	smpsSetvoice        $02
(1)  110/   C0FD8 :  (MACRO-2)                  smpsFMvoice $02
(1)  110/   C0FD8 : EF02                                dc.b    $EF,$02
(1)  111/   C0FDA : (MACRO)             	smpsAlterNote       $F8
(1)  111/   C0FDA :  (MACRO-2)                  smpsDetune      $F8
(1)  111/   C0FDA : E1F8                        dc.b    $E1,$F8
(1)  112/   C0FDC : (MACRO)             	smpsPan             panLeft, $00
(1)  112/   C0FDC : =$0                 panNone set $00
(1)  112/   C0FDC : =$40                panRight set $40
(1)  112/   C0FDC : =$80                panLeft set $80
(1)  112/   C0FDC : =$C0                panCentre set $C0
(1)  112/   C0FDC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  112/   C0FDC : E080                        dc.b $E0,PANLEFT+$00
(1)  113/   C0FDE : (MACRO)             	smpsCall            SpecStg_Call00
(1)  113/   C0FDE : F8                          dc.b    $F8
(1)  113/   C0FDF : 9F8F                                dc.w    z80_ptr(SPECSTG_CALL00)
(1)  114/   C0FE1 : (MACRO)             	smpsPan             panCenter, $00
(1)  114/   C0FE1 : =$0                 panNone set $00
(1)  114/   C0FE1 : =$40                panRight set $40
(1)  114/   C0FE1 : =$80                panLeft set $80
(1)  114/   C0FE1 : =$C0                panCentre set $C0
(1)  114/   C0FE1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  114/   C0FE1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  115/   C0FE3 : (MACRO)             	smpsSetvoice        $05
(1)  115/   C0FE3 :  (MACRO-2)                  smpsFMvoice $05
(1)  115/   C0FE3 : EF05                                dc.b    $EF,$05
(1)  116/   C0FE5 : (MACRO)             	smpsAlterNote       $00
(1)  116/   C0FE5 :  (MACRO-2)                  smpsDetune      $00
(1)  116/   C0FE5 : E100                        dc.b    $E1,$00
(1)  117/   C0FE7 : C506 8030 802A 8030 	dc.b	nAb5, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nG4, $12, nAb4
            C0FEF : 80B8 12B9         
(1)  118/   C0FF3 : BA0C BB12 BCBD 0CBC 	dc.b	nA4, $0C, nBb4, $12, nB4, nC5, $0C, nB4, $12, nC5, nCs5, $0C
            C0FFB : 12BD BE0C         
(1)  119/   C0FFF : BD12 BEBF 0C        	dc.b	nC5, $12, nCs5, nD5, $0C
(1)  120/   C1004 :                     
(1)  121/   C1004 :                     SpecStg_Loop08:
(1)  122/   C1004 : 8030 8080 80        	dc.b	nRst, $30, nRst, nRst, nRst
(1)  123/   C1009 :                     
(1)  124/   C1009 :                     SpecStg_Loop07:
(1)  125/   C1009 : (MACRO)             	smpsPan             panRight, $00
(1)  125/   C1009 : =$0                 panNone set $00
(1)  125/   C1009 : =$40                panRight set $40
(1)  125/   C1009 : =$80                panLeft set $80
(1)  125/   C1009 : =$C0                panCentre set $C0
(1)  125/   C1009 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  125/   C1009 : E040                        dc.b $E0,PANRIGHT+$00
(1)  126/   C100B : B906 800C B906 800C 	dc.b	nAb4, $06, nRst, $0C, nAb4, $06, nRst, $0C, nAb4, $06, nRst, nFs4
            C1013 : B906 80B7         
(1)  127/   C1017 : 12B9 0680 18        	dc.b	$12, nAb4, $06, nRst, $18
(1)  128/   C101C : (MACRO)             	smpsLoop            $01, $02, SpecStg_Loop07
(1)  128/   C101C : F7                          dc.b    $F7
(1)  128/   C101D : 0102                        dc.b    $01,$02
(1)  128/   C101F : 0990                                dc.w    z80_ptr(SPECSTG_LOOP07)
(1)  129/   C1021 : (MACRO)             	smpsPan             panCenter, $00
(1)  129/   C1021 : =$0                 panNone set $00
(1)  129/   C1021 : =$40                panRight set $40
(1)  129/   C1021 : =$80                panLeft set $80
(1)  129/   C1021 : =$C0                panCentre set $C0
(1)  129/   C1021 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  129/   C1021 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  130/   C1023 : 8030 8080 80B9 0680 	dc.b	nRst, $30, nRst, nRst, nRst, nAb4, $06, nRst, $0C, nRst, $06, nRst
            C102B : 0C80 0680         
(1)  131/   C102F : 0CB9 0680 B980 0C80 	dc.b	$0C, nAb4, $06, nRst, nAb4, nRst, $0C, nRst, $06, nRst, $0C, nAb4
            C1037 : 0680 0CB9         
(1)  132/   C103B : 0680 B980 0C80 0680 	dc.b	$06, nRst, nAb4, nRst, $0C, nRst, $06, nRst, $0C, nAb4, $06, nRst
            C1043 : 0CB9 0680         
(1)  133/   C1047 : B980 2A             	dc.b	nAb4, nRst, $2A
(1)  134/   C104A : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop08
(1)  134/   C104A : F7                          dc.b    $F7
(1)  134/   C104B : 0002                        dc.b    $00,$02
(1)  134/   C104D : 0490                                dc.w    z80_ptr(SPECSTG_LOOP08)
(1)  135/   C104F : (MACRO)             	smpsPan             panLeft, $00
(1)  135/   C104F : =$0                 panNone set $00
(1)  135/   C104F : =$40                panRight set $40
(1)  135/   C104F : =$80                panLeft set $80
(1)  135/   C104F : =$C0                panCentre set $C0
(1)  135/   C104F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  135/   C104F : E080                        dc.b $E0,PANLEFT+$00
(1)  136/   C1051 : (MACRO)             	smpsAlterNote       $FE
(1)  136/   C1051 :  (MACRO-2)                  smpsDetune      $FE
(1)  136/   C1051 : E1FE                        dc.b    $E1,$FE
(1)  137/   C1053 : (MACRO)             	smpsAlterVol        $F8
(1)  137/   C1053 : E6F8                        dc.b    $E6,$F8
(1)  138/   C1055 :                     
(1)  139/   C1055 :                     SpecStg_Loop09:
(1)  140/   C1055 : BC06 80BC 80BE BC12 	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $0C, nRst, nE5
            C105D : C10C 80C1         
(1)  141/   C1061 : 80BC 0680 BC80 BEBC 	dc.b	nRst, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nAb4, $18, nRst
            C1069 : 12B9 1880         
(1)  142/   C106D : BC06 80BC 80BE BC12 	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $06, nRst, nE5
            C1075 : C106 80C1         
(1)  143/   C1079 : 80BE C112 BC06 80BC 	dc.b	nRst, nCs5, nE5, $12, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12
            C1081 : 80BE BC12         
(1)  144/   C1085 : B918 80             	dc.b	nAb4, $18, nRst
(1)  145/   C1088 : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop09
(1)  145/   C1088 : F7                          dc.b    $F7
(1)  145/   C1089 : 0002                        dc.b    $00,$02
(1)  145/   C108B : 5590                                dc.w    z80_ptr(SPECSTG_LOOP09)
(1)  146/   C108D : (MACRO)             	smpsAlterNote       $00
(1)  146/   C108D :  (MACRO-2)                  smpsDetune      $00
(1)  146/   C108D : E100                        dc.b    $E1,$00
(1)  147/   C108F : (MACRO)             	smpsAlterVol        $08
(1)  147/   C108F : E608                        dc.b    $E6,$08
(1)  148/   C1091 : (MACRO)             	smpsJump            SpecStg_Loop08
(1)  148/   C1091 : F6                          dc.b    $F6
(1)  148/   C1092 : 0490                                dc.w    z80_ptr(SPECSTG_LOOP08)
(1)  149/   C1094 :                     
(1)  150/   C1094 :                     ; FM4 Data
(1)  151/   C1094 :                     SpecStg_FM4:
(1)  152/   C1094 : (MACRO)             	smpsSetvoice        $06
(1)  152/   C1094 :  (MACRO-2)                  smpsFMvoice $06
(1)  152/   C1094 : EF06                                dc.b    $EF,$06
(1)  153/   C1096 : (MACRO)             	smpsAlterNote       $08
(1)  153/   C1096 :  (MACRO-2)                  smpsDetune      $08
(1)  153/   C1096 : E108                        dc.b    $E1,$08
(1)  154/   C1098 : (MACRO)             	smpsPan             panRight, $00
(1)  154/   C1098 : =$0                 panNone set $00
(1)  154/   C1098 : =$40                panRight set $40
(1)  154/   C1098 : =$80                panLeft set $80
(1)  154/   C1098 : =$C0                panCentre set $C0
(1)  154/   C1098 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  154/   C1098 : E040                        dc.b $E0,PANRIGHT+$00
(1)  155/   C109A : (MACRO)             	smpsCall            SpecStg_Call00
(1)  155/   C109A : F8                          dc.b    $F8
(1)  155/   C109B : 9F8F                                dc.w    z80_ptr(SPECSTG_CALL00)
(1)  156/   C109D : (MACRO)             	smpsPan             panCenter, $00
(1)  156/   C109D : =$0                 panNone set $00
(1)  156/   C109D : =$40                panRight set $40
(1)  156/   C109D : =$80                panLeft set $80
(1)  156/   C109D : =$C0                panCentre set $C0
(1)  156/   C109D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  156/   C109D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  157/   C109F : (MACRO)             	smpsSetvoice        $05
(1)  157/   C109F :  (MACRO-2)                  smpsFMvoice $05
(1)  157/   C109F : EF05                                dc.b    $EF,$05
(1)  158/   C10A1 : (MACRO)             	smpsAlterNote       $00
(1)  158/   C10A1 :  (MACRO-2)                  smpsDetune      $00
(1)  158/   C10A1 : E100                        dc.b    $E1,$00
(1)  159/   C10A3 : C106 8030 802A 8030 	dc.b	nE5, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nEb4, $12, nE4
            C10AB : 80B4 12B5         
(1)  160/   C10AF : B60C B712 B8B9 0CB8 	dc.b	nF4, $0C, nFs4, $12, nG4, nAb4, $0C, nG4, $12, nAb4, nA4, $0C
            C10B7 : 12B9 BA0C         
(1)  161/   C10BB : B912 BABB 0C        	dc.b	nAb4, $12, nA4, nBb4, $0C
(1)  162/   C10C0 :                     
(1)  163/   C10C0 :                     SpecStg_Loop05:
(1)  164/   C10C0 : 8030 8080 80        	dc.b	nRst, $30, nRst, nRst, nRst
(1)  165/   C10C5 :                     
(1)  166/   C10C5 :                     SpecStg_Loop04:
(1)  167/   C10C5 : B506 800C B506 800C 	dc.b	nE4, $06, nRst, $0C, nE4, $06, nRst, $0C, nE4, $06, nRst, nD4
            C10CD : B506 80B3         
(1)  168/   C10D1 : 12B5 0680 18        	dc.b	$12, nE4, $06, nRst, $18
(1)  169/   C10D6 : (MACRO)             	smpsLoop            $01, $02, SpecStg_Loop04
(1)  169/   C10D6 : F7                          dc.b    $F7
(1)  169/   C10D7 : 0102                        dc.b    $01,$02
(1)  169/   C10D9 : C590                                dc.w    z80_ptr(SPECSTG_LOOP04)
(1)  170/   C10DB : 8030 8080 80B5 0680 	dc.b	nRst, $30, nRst, nRst, nRst, nE4, $06, nRst, $0C, nRst, $06, nRst
            C10E3 : 0C80 0680         
(1)  171/   C10E7 : 0CB5 0680 B580 0C80 	dc.b	$0C, nE4, $06, nRst, nE4, nRst, $0C, nRst, $06, nRst, $0C, nE4
            C10EF : 0680 0CB5         
(1)  172/   C10F3 : 0680 B580 0C80 0680 	dc.b	$06, nRst, nE4, nRst, $0C, nRst, $06, nRst, $0C, nE4, $06, nRst
            C10FB : 0CB5 0680         
(1)  173/   C10FF : B580 2A             	dc.b	nE4, nRst, $2A
(1)  174/   C1102 : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop05
(1)  174/   C1102 : F7                          dc.b    $F7
(1)  174/   C1103 : 0002                        dc.b    $00,$02
(1)  174/   C1105 : C090                                dc.w    z80_ptr(SPECSTG_LOOP05)
(1)  175/   C1107 :                     
(1)  176/   C1107 :                     SpecStg_Loop06:
(1)  177/   C1107 : B906 80B9 80BA B912 	dc.b	nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12, nB4, $0C, nRst, nB4
            C110F : BC0C 80BC         
(1)  178/   C1113 : 80B9 0680 B980 BAB9 	dc.b	nRst, nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12, nE4, $18, nRst
            C111B : 12B5 1880         
(1)  179/   C111F : B906 80B9 80BA B912 	dc.b	nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12, nB4, $06, nRst, nB4
            C1127 : BC06 80BC         
(1)  180/   C112B : 80BA BC12 B906 80B9 	dc.b	nRst, nA4, nB4, $12, nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12
            C1133 : 80BA B912         
(1)  181/   C1137 : B518 80             	dc.b	nE4, $18, nRst
(1)  182/   C113A : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop06
(1)  182/   C113A : F7                          dc.b    $F7
(1)  182/   C113B : 0002                        dc.b    $00,$02
(1)  182/   C113D : 0791                                dc.w    z80_ptr(SPECSTG_LOOP06)
(1)  183/   C113F : (MACRO)             	smpsJump            SpecStg_Loop05
(1)  183/   C113F : F6                          dc.b    $F6
(1)  183/   C1140 : C090                                dc.w    z80_ptr(SPECSTG_LOOP05)
(1)  184/   C1142 :                     
(1)  185/   C1142 :                     ; FM5 Data
(1)  186/   C1142 :                     SpecStg_FM5:
(1)  187/   C1142 : (MACRO)             	smpsAlterPitch      $F4
(1)  187/   C1142 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  187/   C1142 : FBF4                                dc.b    $FB,$F4
(1)  188/   C1144 : (MACRO)             	smpsPan             panCenter, $00
(1)  188/   C1144 : =$0                 panNone set $00
(1)  188/   C1144 : =$40                panRight set $40
(1)  188/   C1144 : =$80                panLeft set $80
(1)  188/   C1144 : =$C0                panCentre set $C0
(1)  188/   C1144 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  188/   C1144 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  189/   C1146 : (MACRO)             	smpsSetvoice        $06
(1)  189/   C1146 :  (MACRO-2)                  smpsFMvoice $06
(1)  189/   C1146 : EF06                                dc.b    $EF,$06
(1)  190/   C1148 : (MACRO)             	smpsAlterNote       $FA
(1)  190/   C1148 :  (MACRO-2)                  smpsDetune      $FA
(1)  190/   C1148 : E1FA                        dc.b    $E1,$FA
(1)  191/   C114A : (MACRO)             	smpsCall            SpecStg_Call00
(1)  191/   C114A : F8                          dc.b    $F8
(1)  191/   C114B : 9F8F                                dc.w    z80_ptr(SPECSTG_CALL00)
(1)  192/   C114D : (MACRO)             	smpsAlterPitch      $0C
(1)  192/   C114D :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  192/   C114D : FB0C                                dc.b    $FB,$0C
(1)  193/   C114F : (MACRO)             	smpsSetvoice        $01
(1)  193/   C114F :  (MACRO-2)                  smpsFMvoice $01
(1)  193/   C114F : EF01                                dc.b    $EF,$01
(1)  194/   C1151 : (MACRO)             	smpsModSet          $06, $01, $02, $03
(1)  194/   C1151 : F0                          dc.b    $F0
(1)  194/   C1152 : 0701 0204                           dc.b    $06+1,$01,$02,(($03+1) * $01) & $FF
(1)  194/   C1156 :                             ;dc.b   $01,$02,$03
(1)  195/   C1156 :                     
(1)  196/   C1156 :                     SpecStg_Loop03:
(1)  197/   C1156 : (MACRO)             	smpsPan             panCenter, $00
(1)  197/   C1156 : =$0                 panNone set $00
(1)  197/   C1156 : =$40                panRight set $40
(1)  197/   C1156 : =$80                panLeft set $80
(1)  197/   C1156 : =$C0                panCentre set $C0
(1)  197/   C1156 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  197/   C1156 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  198/   C1158 : C50C C1             	dc.b	nAb5, $0C, nE5
(1)  199/   C115B : (MACRO)             	smpsPan             panLeft, $00
(1)  199/   C115B : =$0                 panNone set $00
(1)  199/   C115B : =$40                panRight set $40
(1)  199/   C115B : =$80                panLeft set $80
(1)  199/   C115B : =$C0                panCentre set $C0
(1)  199/   C115B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  199/   C115B : E080                        dc.b $E0,PANLEFT+$00
(1)  200/   C115D : C3BF 06             	dc.b	nFs5, nD5, $06
(1)  201/   C1160 : (MACRO)             	smpsPan             panCenter, $00
(1)  201/   C1160 : =$0                 panNone set $00
(1)  201/   C1160 : =$40                panRight set $40
(1)  201/   C1160 : =$80                panLeft set $80
(1)  201/   C1160 : =$C0                panCentre set $C0
(1)  201/   C1160 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  201/   C1160 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  202/   C1162 : C50C 06             	dc.b	nAb5, $0C, $06
(1)  203/   C1165 : (MACRO)             	smpsPan             panRight, $00
(1)  203/   C1165 : =$0                 panNone set $00
(1)  203/   C1165 : =$40                panRight set $40
(1)  203/   C1165 : =$80                panLeft set $80
(1)  203/   C1165 : =$C0                panCentre set $C0
(1)  203/   C1165 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  203/   C1165 : E040                        dc.b $E0,PANRIGHT+$00
(1)  204/   C1167 : C10C C3             	dc.b	nE5, $0C, nFs5
(1)  205/   C116A : (MACRO)             	smpsPan             panCenter, $00
(1)  205/   C116A : =$0                 panNone set $00
(1)  205/   C116A : =$40                panRight set $40
(1)  205/   C116A : =$80                panLeft set $80
(1)  205/   C116A : =$C0                panCentre set $C0
(1)  205/   C116A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  205/   C116A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  206/   C116C : BF                  	dc.b	nD5
(1)  207/   C116D : (MACRO)             	smpsLoop            $00, $1C, SpecStg_Loop03
(1)  207/   C116D : F7                          dc.b    $F7
(1)  207/   C116E : 001C                        dc.b    $00,$1C
(1)  207/   C1170 : 5691                                dc.w    z80_ptr(SPECSTG_LOOP03)
(1)  208/   C1172 : (MACRO)             	smpsJump            SpecStg_Loop03
(1)  208/   C1172 : F6                          dc.b    $F6
(1)  208/   C1173 : 5691                                dc.w    z80_ptr(SPECSTG_LOOP03)
(1)  209/   C1175 :                     
(1)  210/   C1175 :                     ; PSG1 Data
(1)  211/   C1175 :                     SpecStg_PSG1:
(1)  212/   C1175 : 8030 8080 8080 8080 	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst
            C117D : 8080 8080         
(1)  213/   C1181 : 8080 80             	dc.b	nRst, nRst, nRst
(1)  214/   C1184 :                     
(1)  215/   C1184 :                     SpecStg_Loop11:
(1)  216/   C1184 : C118 C50C C818 C6C5 	dc.b	nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack, nAb5, nFs5
            C118C : 0CE7 C5C3         
(1)  217/   C1190 : 18C1 C50C C3C1 BF30 	dc.b	$18, nE5, nAb5, $0C, nFs5, nE5, nD5, $30, smpsNoAttack, $30, nRst, $30
            C1198 : E730 8030         
(1)  218/   C119C : 80C1 18C5 0CC8 18C6 	dc.b	nRst, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack, nAb5
            C11A4 : C50C E7C5         
(1)  219/   C11A8 : C318 C1C5 0CC3 C1CB 	dc.b	nFs5, $18, nE5, nAb5, $0C, nFs5, nE5, nD6, $30, smpsNoAttack, $30, nRst
            C11B0 : 30E7 3080         
(1)  220/   C11B4 : 3080                	dc.b	$30, nRst
(1)  221/   C11B6 : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop11
(1)  221/   C11B6 : F7                          dc.b    $F7
(1)  221/   C11B7 : 0002                        dc.b    $00,$02
(1)  221/   C11B9 : 8491                                dc.w    z80_ptr(SPECSTG_LOOP11)
(1)  222/   C11BB : 8030 8080 8080 8080 	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst
            C11C3 : 80               
(1)  223/   C11C4 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  223/   C11C4 : ECFF                        dc.b    $EC,$FF
(1)  224/   C11C6 : (MACRO)             	smpsAlterPitch      $F4
(1)  224/   C11C6 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  224/   C11C6 : FBF4                                dc.b    $FB,$F4
(1)  225/   C11C8 : D406 80D4 80D6 D412 	dc.b	nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12, nE7, $0C, nRst, nE7
            C11D0 : D90C 80D9         
(1)  226/   C11D4 : 80D4 0680 D480 D6D4 	dc.b	nRst, nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12, nAb6, $18, nRst
            C11DC : 12D1 1880         
(1)  227/   C11E0 : D406 80D4 80D6 D412 	dc.b	nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12, nE7, $06, nRst, nE7
            C11E8 : D906 80D9         
(1)  228/   C11EC : 80D6 D912 D406 80D4 	dc.b	nRst, nCs7, nE7, $12, nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12
            C11F4 : 80D6 D412         
(1)  229/   C11F8 : D118 80             	dc.b	nAb6, $18, nRst
(1)  230/   C11FB : (MACRO)             	smpsAlterPitch      $0C
(1)  230/   C11FB :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  230/   C11FB : FB0C                                dc.b    $FB,$0C
(1)  231/   C11FD : (MACRO)             	smpsPSGAlterVol     $01
(1)  231/   C11FD : EC01                        dc.b    $EC,$01
(1)  232/   C11FF : (MACRO)             	smpsJump            SpecStg_Loop11
(1)  232/   C11FF : F6                          dc.b    $F6
(1)  232/   C1200 : 8491                                dc.w    z80_ptr(SPECSTG_LOOP11)
(1)  233/   C1202 :                     
(1)  234/   C1202 :                     ; PSG2 Data
(1)  235/   C1202 :                     SpecStg_PSG2:
(1)  236/   C1202 : (MACRO)             	smpsAlterNote       $FF
(1)  236/   C1202 :  (MACRO-2)                  smpsDetune      $FF
(1)  236/   C1202 : E1FF                        dc.b    $E1,$FF
(1)  237/   C1204 : 8030 8080 8080 8080 	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst
            C120C : 8080 8080         
(1)  238/   C1210 : 8080 80             	dc.b	nRst, nRst, nRst
(1)  239/   C1213 :                     
(1)  240/   C1213 :                     SpecStg_Jump00:
(1)  241/   C1213 : 8012 C118 C50C C818 	dc.b	nRst, $12, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack
            C121B : C6C5 0CE7         
(1)  242/   C121F : C5C3 18C1 C50C C3C1 	dc.b	nAb5, nFs5, $18, nE5, nAb5, $0C, nFs5, nE5, nD5, $30, smpsNoAttack, $30
            C1227 : BF30 E730         
(1)  243/   C122B : 8030 80C1 18C5 0CC8 	dc.b	nRst, $30, nRst, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C
            C1233 : 18C6 C50C         
(1)  244/   C1237 : E7C5 C318 C1C5 0CC3 	dc.b	smpsNoAttack, nAb5, nFs5, $18, nE5, nAb5, $0C, nFs5, nE5, nD6, $30, smpsNoAttack
            C123F : C1CB 30E7         
(1)  245/   C1243 : 3080 3080 1E        	dc.b	$30, nRst, $30, nRst, $1E
(1)  246/   C1248 : (MACRO)             	smpsPSGAlterVol     $FC
(1)  246/   C1248 : ECFC                        dc.b    $EC,$FC
(1)  247/   C124A : C518 C80C CC18 CAC8 	dc.b	nAb5, $18, nB5, $0C, nEb6, $18, nCs6, nB5, $0C, smpsNoAttack, nB5, nA5
            C1252 : 0CE7 C8C6         
(1)  248/   C1256 : 18C5 C80C C6C5 C330 	dc.b	$18, nAb5, nB5, $0C, nA5, nAb5, nFs5, $30, smpsNoAttack, $30, nRst, $30
            C125E : E730 8030         
(1)  249/   C1262 : 80C5 18C8 0CCC 18CA 	dc.b	nRst, nAb5, $18, nB5, $0C, nEb6, $18, nCs6, nB5, $0C, smpsNoAttack, nB5
            C126A : C80C E7C8         
(1)  250/   C126E : C618 C5C8 0CC6 C5CF 	dc.b	nA5, $18, nAb5, nB5, $0C, nA5, nAb5, nFs6, $30, smpsNoAttack, $30, nRst
            C1276 : 30E7 3080         
(1)  251/   C127A : 3080 8080 8080 8080 	dc.b	$30, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst
            C1282 : 8080               
(1)  252/   C1284 : (MACRO)             	smpsAlterPitch      $E8
(1)  252/   C1284 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  252/   C1284 : FBE8                                dc.b    $FB,$E8
(1)  253/   C1286 : D106 80D1 80D2 D112 	dc.b	nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12, nB6, $0C, nRst, nB6
            C128E : D40C 80D4         
(1)  254/   C1292 : 80D1 0680 D180 D2D1 	dc.b	nRst, nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12, nE6, $18, nRst
            C129A : 12CD 1880         
(1)  255/   C129E : D106 80D1 80D2 D112 	dc.b	nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12, nB6, $06, nRst, nB6
            C12A6 : D406 80D4         
(1)  256/   C12AA : 80D2 D412 D106 80D1 	dc.b	nRst, nA6, nB6, $12, nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12
            C12B2 : 80D2 D112         
(1)  257/   C12B6 : CD18 80             	dc.b	nE6, $18, nRst
(1)  258/   C12B9 : (MACRO)             	smpsPSGAlterVol     $04
(1)  258/   C12B9 : EC04                        dc.b    $EC,$04
(1)  259/   C12BB : (MACRO)             	smpsAlterPitch      $18
(1)  259/   C12BB :  (MACRO-2)                  smpsChangeTransposition $18
(1)  259/   C12BB : FB18                                dc.b    $FB,$18
(1)  260/   C12BD : (MACRO)             	smpsJump            SpecStg_Jump00
(1)  260/   C12BD : F6                          dc.b    $F6
(1)  260/   C12BE : 1392                                dc.w    z80_ptr(SPECSTG_JUMP00)
(1)  261/   C12C0 :                     
(1)  262/   C12C0 :                     ; DAC Data
(1)  263/   C12C0 :                     SpecStg_DAC:
(1)  264/   C12C0 : 8030 8080 8080 80   	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
(1)  265/   C12C7 :                     
(1)  266/   C12C7 :                     SpecStg_Loop00:
(1)  267/   C12C7 : 8118 8181 810C 82   	dc.b	dKick, $18, dKick, dKick, dKick, $0C, dSnare
(1)  268/   C12CE : (MACRO)             	smpsLoop            $00, $03, SpecStg_Loop00
(1)  268/   C12CE : F7                          dc.b    $F7
(1)  268/   C12CF : 0003                        dc.b    $00,$03
(1)  268/   C12D1 : C792                                dc.w    z80_ptr(SPECSTG_LOOP00)
(1)  269/   C12D3 : 8118 8181 810C 8206 	dc.b	dKick, $18, dKick, dKick, dKick, $0C, dSnare, $06, dKick
            C12DB : 81               
(1)  270/   C12DC :                     
(1)  271/   C12DC :                     SpecStg_Loop01:
(1)  272/   C12DC : 8118 8281 8281 8281 	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, $12
            C12E4 : 8281 8212         
(1)  273/   C12E8 : 8281 0C82 1881 0C81 	dc.b	dSnare, dKick, $0C, dSnare, $18, dKick, $0C, dKick, dSnare, $12, dSnare, dKick
            C12F0 : 8212 8281         
(1)  274/   C12F4 : 0C82 8106 81        	dc.b	$0C, dSnare, dKick, $06, dKick
(1)  275/   C12F9 : (MACRO)             	smpsLoop            $00, $04, SpecStg_Loop01
(1)  275/   C12F9 : F7                          dc.b    $F7
(1)  275/   C12FA : 0004                        dc.b    $00,$04
(1)  275/   C12FC : DC92                                dc.w    z80_ptr(SPECSTG_LOOP01)
(1)  276/   C12FE :                     
(1)  277/   C12FE :                     SpecStg_Loop02:
(1)  278/   C12FE : 8118 8212 0681 1882 	dc.b	dKick, $18, dSnare, $12, $06, dKick, $18, dSnare, dKick, dSnare, $12, dSnare
            C1306 : 8182 1282         
(1)  279/   C130A : 810C 8218 8182 1206 	dc.b	dKick, $0C, dSnare, $18, dKick, dSnare, $12, $06, dKick, $18, dSnare, dKick
            C1312 : 8118 8281         
(1)  280/   C1316 : 8212 8281 0C82 18   	dc.b	dSnare, $12, dSnare, dKick, $0C, dSnare, $18
(1)  281/   C131D : (MACRO)             	smpsLoop            $00, $02, SpecStg_Loop02
(1)  281/   C131D : F7                          dc.b    $F7
(1)  281/   C131E : 0002                        dc.b    $00,$02
(1)  281/   C1320 : FE92                                dc.w    z80_ptr(SPECSTG_LOOP02)
(1)  282/   C1322 : (MACRO)             	smpsJump            SpecStg_Loop01
(1)  282/   C1322 : F6                          dc.b    $F6
(1)  282/   C1323 : DC92                                dc.w    z80_ptr(SPECSTG_LOOP01)
(1)  283/   C1325 :                     
(1)  284/   C1325 :                     ; PSG3 Data
(1)  285/   C1325 :                     SpecStg_PSG3:
(1)  286/   C1325 : (MACRO)             	smpsPSGform         $E7
(1)  286/   C1325 : F3E7                        dc.b    $F3,$E7
(1)  287/   C1327 : (MACRO)             	smpsPSGvoice        fTone_04
(1)  287/   C1327 : F504                        dc.b    $F5,FTONE_04
(1)  288/   C1329 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  288/   C1329 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  288/   C1329 : E803                                dc.b    $E8,$03
(1)  289/   C132B : 8030 8080 8080 80   	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
(1)  290/   C1332 :                     
(1)  291/   C1332 :                     SpecStg_Loop0D:
(1)  292/   C1332 : C70C 06C7 C7C7 0CC7 	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, nMaxPSG
            C133A : C706 C7C7         
(1)  293/   C133E : C70C C7             	dc.b	nMaxPSG, $0C, nMaxPSG
(1)  294/   C1341 : (MACRO)             	smpsLoop            $00, $03, SpecStg_Loop0D
(1)  294/   C1341 : F7                          dc.b    $F7
(1)  294/   C1342 : 0003                        dc.b    $00,$03
(1)  294/   C1344 : 3293                                dc.w    z80_ptr(SPECSTG_LOOP0D)
(1)  295/   C1346 : C70C 06C7 C7C7 0CC7 	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, nMaxPSG
            C134E : C706 C7C7         
(1)  296/   C1352 : C70C C7             	dc.b	nMaxPSG, $0C, nMaxPSG
(1)  297/   C1355 :                     
(1)  298/   C1355 :                     SpecStg_Loop0E:
(1)  299/   C1355 : C712 C706 C7C7 C7C7 	dc.b	nMaxPSG, $12, nMaxPSG, $06, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG, $0C, $06, $0C, $06
            C135D : 0C06 0C06         
(1)  300/   C1361 : 0C06 0CC7 06C7 C70C 	dc.b	$0C, $06, $0C, nMaxPSG, $06, nMaxPSG, nMaxPSG, $0C, $06, $0C, $06, $0C
            C1369 : 060C 060C         
(1)  301/   C136D : 060C 060C C7C7 C7C7 	dc.b	$06, $0C, $06, $0C, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG, $24, nMaxPSG, $0C, nMaxPSG
            C1375 : 24C7 0CC7         
(1)  302/   C1379 : 06C7 C70C C7C7 C718 	dc.b	$06, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, nMaxPSG, $18, nMaxPSG, $0C, nMaxPSG
            C1381 : C70C C7            
(1)  303/   C1384 : (MACRO)             	smpsLoop            $00, $04, SpecStg_Loop0E
(1)  303/   C1384 : F7                          dc.b    $F7
(1)  303/   C1385 : 0004                        dc.b    $00,$04
(1)  303/   C1387 : 5593                                dc.w    z80_ptr(SPECSTG_LOOP0E)
(1)  304/   C1389 :                     
(1)  305/   C1389 :                     SpecStg_Loop0F:
(1)  306/   C1389 : C718 06C7 0CC7 C706 	dc.b	nMaxPSG, $18, $06, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, $0C, nMaxPSG, nMaxPSG
            C1391 : C70C C7C7         
(1)  307/   C1395 : (MACRO)             	smpsLoop            $00, $04, SpecStg_Loop0F
(1)  307/   C1395 : F7                          dc.b    $F7
(1)  307/   C1396 : 0004                        dc.b    $00,$04
(1)  307/   C1398 : 8993                                dc.w    z80_ptr(SPECSTG_LOOP0F)
(1)  308/   C139A :                     
(1)  309/   C139A :                     SpecStg_Loop10:
(1)  310/   C139A : C70C 06C7 C7C7 0CC7 	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, nMaxPSG
            C13A2 : C706 C7C7         
(1)  311/   C13A6 : C70C C7             	dc.b	nMaxPSG, $0C, nMaxPSG
(1)  312/   C13A9 : (MACRO)             	smpsLoop            $00, $04, SpecStg_Loop10
(1)  312/   C13A9 : F7                          dc.b    $F7
(1)  312/   C13AA : 0004                        dc.b    $00,$04
(1)  312/   C13AC : 9A93                                dc.w    z80_ptr(SPECSTG_LOOP10)
(1)  313/   C13AE : (MACRO)             	smpsJump            SpecStg_Loop0E
(1)  313/   C13AE : F6                          dc.b    $F6
(1)  313/   C13AF : 5593                                dc.w    z80_ptr(SPECSTG_LOOP0E)
(1)  314/   C13B1 :                     
(1)  315/   C13B1 :                     SpecStg_Voices:
(1)  316/   C13B1 :                     ;	Voice $00
(1)  317/   C13B1 :                     ;	$3A
(1)  318/   C13B1 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $00
(1)  319/   C13B1 :                     ;	$00, $00, $00, $04, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
(1)  320/   C13B1 : (MACRO)             	smpsVcAlgorithm     $02
(1)  320/   C13B1 : =$2                 vcAlgorithm set $02
(1)  321/   C13B1 : (MACRO)             	smpsVcFeedback      $07
(1)  321/   C13B1 : =$7                 vcFeedback set $07
(1)  322/   C13B1 : (MACRO)             	smpsVcUnusedBits    $00
(1)  322/   C13B1 : =$0                 vcUnusedBits set $00
(1)  322/   C13B1 : =$0                 vcD1R1Unk set 0
(1)  322/   C13B1 : =$0                 vcD1R2Unk set 0
(1)  322/   C13B1 : =$0                 vcD1R3Unk set 0
(1)  322/   C13B1 : =$0                 vcD1R4Unk set 0
(1)  323/   C13B1 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  323/   C13B1 : =$0                 vcDT1 set $00
(1)  323/   C13B1 : =$0                 vcDT2 set $00
(1)  323/   C13B1 : =$0                 vcDT3 set $00
(1)  323/   C13B1 : =$0                 vcDT4 set $00
(1)  324/   C13B1 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  324/   C13B1 : =$1                 vcCF1 set $01
(1)  324/   C13B1 : =$1                 vcCF2 set $01
(1)  324/   C13B1 : =$7                 vcCF3 set $07
(1)  324/   C13B1 : =$1                 vcCF4 set $01
(1)  325/   C13B1 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  325/   C13B1 : =$1                 vcRS1 set $01
(1)  325/   C13B1 : =$2                 vcRS2 set $02
(1)  325/   C13B1 : =$2                 vcRS3 set $02
(1)  325/   C13B1 : =$2                 vcRS4 set $02
(1)  326/   C13B1 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  326/   C13B1 : =$13                vcAR1 set $13
(1)  326/   C13B1 : =$D                 vcAR2 set $0D
(1)  326/   C13B1 : =$E                 vcAR3 set $0E
(1)  326/   C13B1 : =$E                 vcAR4 set $0E
(1)  327/   C13B1 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  327/   C13B1 : =$0                 vcAM1 set $00<<5
(1)  327/   C13B1 : =$0                 vcAM2 set $00<<5
(1)  327/   C13B1 : =$0                 vcAM3 set $00<<5
(1)  327/   C13B1 : =$0                 vcAM4 set $00<<5
(1)  328/   C13B1 : (MACRO)             	smpsVcDecayRate1    $00, $0E, $0E, $0E
(1)  328/   C13B1 : =$0                 vcD1R1 set $00
(1)  328/   C13B1 : =$E                 vcD1R2 set $0E
(1)  328/   C13B1 : =$E                 vcD1R3 set $0E
(1)  328/   C13B1 : =$E                 vcD1R4 set $0E
(1)  329/   C13B1 : (MACRO)             	smpsVcDecayRate2    $04, $00, $00, $00
(1)  329/   C13B1 : =$4                 vcD2R1 set $04
(1)  329/   C13B1 : =$0                 vcD2R2 set $00
(1)  329/   C13B1 : =$0                 vcD2R3 set $00
(1)  329/   C13B1 : =$0                 vcD2R4 set $00
(1)  330/   C13B1 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  330/   C13B1 : =$0                 vcDL1 set $00
(1)  330/   C13B1 : =$1                 vcDL2 set $01
(1)  330/   C13B1 : =$F                 vcDL3 set $0F
(1)  330/   C13B1 : =$1                 vcDL4 set $01
(1)  331/   C13B1 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  331/   C13B1 : =$F                 vcRR1 set $0F
(1)  331/   C13B1 : =$F                 vcRR2 set $0F
(1)  331/   C13B1 : =$F                 vcRR3 set $0F
(1)  331/   C13B1 : =$F                 vcRR4 set $0F
(1)  332/   C13B1 : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $18
(1)  332/   C13B1 : =$80                vcTL1 set $80
(1)  332/   C13B1 : =$27                vcTL2 set $27
(1)  332/   C13B1 : =$28                vcTL3 set $28
(1)  332/   C13B1 : =$18                vcTL4 set $18
(1)  332/   C13B1 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  332/   C13B2 :                     ;   0     1     2     3     4     5     6     7
(1)  332/   C13B2 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  332/   C13B2 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  332/   C13B2 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  332/   C13B2 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  332/   C13B2 : =$80                vcTLMask1 set $80
(1)  332/   C13B2 :                     
(1)  332/   C13B2 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  332/   C13B2 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  332/   C13B2 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  332/   C13B2 : =$80                vcTLMask1 set $80
(1)  332/   C13B2 : =$0                 vcTL1 set vcTL1&$7F
(1)  332/   C13B2 : =$27                vcTL2 set vcTL2&$7F
(1)  332/   C13B2 : =$28                vcTL3 set vcTL3&$7F
(1)  332/   C13B2 : =$18                vcTL4 set vcTL4&$7F
(1)  332/   C13B2 :                     
(1)  332/   C13B2 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  332/   C13B6 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  332/   C13BA : 0E0E 0E00                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  332/   C13BE : 0000 0004                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  332/   C13C2 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  332/   C13C6 : 1828 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  333/   C13CA :                     
(1)  334/   C13CA :                     ;	Voice $01
(1)  335/   C13CA :                     ;	$3A
(1)  336/   C13CA :                     ;	$07, $06, $02, $01, 	$5F, $5F, $5F, $9F, 	$02, $02, $0A, $07
(1)  337/   C13CA :                     ;	$02, $03, $03, $06, 	$52, $72, $A2, $B5, 	$1A, $1C, $23, $80
(1)  338/   C13CA : (MACRO)             	smpsVcAlgorithm     $02
(1)  338/   C13CA : =$2                 vcAlgorithm set $02
(1)  339/   C13CA : (MACRO)             	smpsVcFeedback      $07
(1)  339/   C13CA : =$7                 vcFeedback set $07
(1)  340/   C13CA : (MACRO)             	smpsVcUnusedBits    $00
(1)  340/   C13CA : =$0                 vcUnusedBits set $00
(1)  340/   C13CA : =$0                 vcD1R1Unk set 0
(1)  340/   C13CA : =$0                 vcD1R2Unk set 0
(1)  340/   C13CA : =$0                 vcD1R3Unk set 0
(1)  340/   C13CA : =$0                 vcD1R4Unk set 0
(1)  341/   C13CA : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  341/   C13CA : =$0                 vcDT1 set $00
(1)  341/   C13CA : =$0                 vcDT2 set $00
(1)  341/   C13CA : =$0                 vcDT3 set $00
(1)  341/   C13CA : =$0                 vcDT4 set $00
(1)  342/   C13CA : (MACRO)             	smpsVcCoarseFreq    $01, $02, $06, $07
(1)  342/   C13CA : =$1                 vcCF1 set $01
(1)  342/   C13CA : =$2                 vcCF2 set $02
(1)  342/   C13CA : =$6                 vcCF3 set $06
(1)  342/   C13CA : =$7                 vcCF4 set $07
(1)  343/   C13CA : (MACRO)             	smpsVcRateScale     $02, $01, $01, $01
(1)  343/   C13CA : =$2                 vcRS1 set $02
(1)  343/   C13CA : =$1                 vcRS2 set $01
(1)  343/   C13CA : =$1                 vcRS3 set $01
(1)  343/   C13CA : =$1                 vcRS4 set $01
(1)  344/   C13CA : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  344/   C13CA : =$1F                vcAR1 set $1F
(1)  344/   C13CA : =$1F                vcAR2 set $1F
(1)  344/   C13CA : =$1F                vcAR3 set $1F
(1)  344/   C13CA : =$1F                vcAR4 set $1F
(1)  345/   C13CA : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  345/   C13CA : =$0                 vcAM1 set $00<<5
(1)  345/   C13CA : =$0                 vcAM2 set $00<<5
(1)  345/   C13CA : =$0                 vcAM3 set $00<<5
(1)  345/   C13CA : =$0                 vcAM4 set $00<<5
(1)  346/   C13CA : (MACRO)             	smpsVcDecayRate1    $07, $0A, $02, $02
(1)  346/   C13CA : =$7                 vcD1R1 set $07
(1)  346/   C13CA : =$A                 vcD1R2 set $0A
(1)  346/   C13CA : =$2                 vcD1R3 set $02
(1)  346/   C13CA : =$2                 vcD1R4 set $02
(1)  347/   C13CA : (MACRO)             	smpsVcDecayRate2    $06, $03, $03, $02
(1)  347/   C13CA : =$6                 vcD2R1 set $06
(1)  347/   C13CA : =$3                 vcD2R2 set $03
(1)  347/   C13CA : =$3                 vcD2R3 set $03
(1)  347/   C13CA : =$2                 vcD2R4 set $02
(1)  348/   C13CA : (MACRO)             	smpsVcDecayLevel    $0B, $0A, $07, $05
(1)  348/   C13CA : =$B                 vcDL1 set $0B
(1)  348/   C13CA : =$A                 vcDL2 set $0A
(1)  348/   C13CA : =$7                 vcDL3 set $07
(1)  348/   C13CA : =$5                 vcDL4 set $05
(1)  349/   C13CA : (MACRO)             	smpsVcReleaseRate   $05, $02, $02, $02
(1)  349/   C13CA : =$5                 vcRR1 set $05
(1)  349/   C13CA : =$2                 vcRR2 set $02
(1)  349/   C13CA : =$2                 vcRR3 set $02
(1)  349/   C13CA : =$2                 vcRR4 set $02
(1)  350/   C13CA : (MACRO)             	smpsVcTotalLevel    $80, $23, $1C, $1A
(1)  350/   C13CA : =$80                vcTL1 set $80
(1)  350/   C13CA : =$23                vcTL2 set $23
(1)  350/   C13CA : =$1C                vcTL3 set $1C
(1)  350/   C13CA : =$1A                vcTL4 set $1A
(1)  350/   C13CA : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  350/   C13CB :                     ;   0     1     2     3     4     5     6     7
(1)  350/   C13CB :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  350/   C13CB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  350/   C13CB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  350/   C13CB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  350/   C13CB : =$80                vcTLMask1 set $80
(1)  350/   C13CB :                     
(1)  350/   C13CB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  350/   C13CB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  350/   C13CB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  350/   C13CB : =$80                vcTLMask1 set $80
(1)  350/   C13CB : =$0                 vcTL1 set vcTL1&$7F
(1)  350/   C13CB : =$23                vcTL2 set vcTL2&$7F
(1)  350/   C13CB : =$1C                vcTL3 set vcTL3&$7F
(1)  350/   C13CB : =$1A                vcTL4 set vcTL4&$7F
(1)  350/   C13CB :                     
(1)  350/   C13CB : 0706 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  350/   C13CF : 5F5F 5F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  350/   C13D3 : 0202 0A07                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  350/   C13D7 : 0203 0306                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  350/   C13DB : 5272 A2B5                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  350/   C13DF : 1A1C 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  351/   C13E3 :                     
(1)  352/   C13E3 :                     ;	Voice $02
(1)  353/   C13E3 :                     ;	$3D
(1)  354/   C13E3 :                     ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
(1)  355/   C13E3 :                     ;	$00, $00, $00, $00, 	$2B, $2B, $2B, $1B, 	$19, $80, $80, $80
(1)  356/   C13E3 : (MACRO)             	smpsVcAlgorithm     $05
(1)  356/   C13E3 : =$5                 vcAlgorithm set $05
(1)  357/   C13E3 : (MACRO)             	smpsVcFeedback      $07
(1)  357/   C13E3 : =$7                 vcFeedback set $07
(1)  358/   C13E3 : (MACRO)             	smpsVcUnusedBits    $00
(1)  358/   C13E3 : =$0                 vcUnusedBits set $00
(1)  358/   C13E3 : =$0                 vcD1R1Unk set 0
(1)  358/   C13E3 : =$0                 vcD1R2Unk set 0
(1)  358/   C13E3 : =$0                 vcD1R3Unk set 0
(1)  358/   C13E3 : =$0                 vcD1R4Unk set 0
(1)  359/   C13E3 : (MACRO)             	smpsVcDetune        $00, $05, $02, $00
(1)  359/   C13E3 : =$0                 vcDT1 set $00
(1)  359/   C13E3 : =$5                 vcDT2 set $05
(1)  359/   C13E3 : =$2                 vcDT3 set $02
(1)  359/   C13E3 : =$0                 vcDT4 set $00
(1)  360/   C13E3 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  360/   C13E3 : =$1                 vcCF1 set $01
(1)  360/   C13E3 : =$1                 vcCF2 set $01
(1)  360/   C13E3 : =$1                 vcCF3 set $01
(1)  360/   C13E3 : =$1                 vcCF4 set $01
(1)  361/   C13E3 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  361/   C13E3 : =$0                 vcRS1 set $00
(1)  361/   C13E3 : =$0                 vcRS2 set $00
(1)  361/   C13E3 : =$0                 vcRS3 set $00
(1)  361/   C13E3 : =$0                 vcRS4 set $00
(1)  362/   C13E3 : (MACRO)             	smpsVcAttackRate    $0F, $14, $14, $12
(1)  362/   C13E3 : =$F                 vcAR1 set $0F
(1)  362/   C13E3 : =$14                vcAR2 set $14
(1)  362/   C13E3 : =$14                vcAR3 set $14
(1)  362/   C13E3 : =$12                vcAR4 set $12
(1)  363/   C13E3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  363/   C13E3 : =$0                 vcAM1 set $00<<5
(1)  363/   C13E3 : =$0                 vcAM2 set $00<<5
(1)  363/   C13E3 : =$0                 vcAM3 set $00<<5
(1)  363/   C13E3 : =$0                 vcAM4 set $00<<5
(1)  364/   C13E3 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1)  364/   C13E3 : =$5                 vcD1R1 set $05
(1)  364/   C13E3 : =$5                 vcD1R2 set $05
(1)  364/   C13E3 : =$5                 vcD1R3 set $05
(1)  364/   C13E3 : =$A                 vcD1R4 set $0A
(1)  365/   C13E3 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  365/   C13E3 : =$0                 vcD2R1 set $00
(1)  365/   C13E3 : =$0                 vcD2R2 set $00
(1)  365/   C13E3 : =$0                 vcD2R3 set $00
(1)  365/   C13E3 : =$0                 vcD2R4 set $00
(1)  366/   C13E3 : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1)  366/   C13E3 : =$1                 vcDL1 set $01
(1)  366/   C13E3 : =$2                 vcDL2 set $02
(1)  366/   C13E3 : =$2                 vcDL3 set $02
(1)  366/   C13E3 : =$2                 vcDL4 set $02
(1)  367/   C13E3 : (MACRO)             	smpsVcReleaseRate   $0B, $0B, $0B, $0B
(1)  367/   C13E3 : =$B                 vcRR1 set $0B
(1)  367/   C13E3 : =$B                 vcRR2 set $0B
(1)  367/   C13E3 : =$B                 vcRR3 set $0B
(1)  367/   C13E3 : =$B                 vcRR4 set $0B
(1)  368/   C13E3 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $19
(1)  368/   C13E3 : =$80                vcTL1 set $80
(1)  368/   C13E3 : =$80                vcTL2 set $80
(1)  368/   C13E3 : =$80                vcTL3 set $80
(1)  368/   C13E3 : =$19                vcTL4 set $19
(1)  368/   C13E3 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  368/   C13E4 :                     ;   0     1     2     3     4     5     6     7
(1)  368/   C13E4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  368/   C13E4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  368/   C13E4 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  368/   C13E4 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  368/   C13E4 : =$80                vcTLMask1 set $80
(1)  368/   C13E4 :                     
(1)  368/   C13E4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  368/   C13E4 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  368/   C13E4 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  368/   C13E4 : =$80                vcTLMask1 set $80
(1)  368/   C13E4 : =$0                 vcTL1 set vcTL1&$7F
(1)  368/   C13E4 : =$0                 vcTL2 set vcTL2&$7F
(1)  368/   C13E4 : =$0                 vcTL3 set vcTL3&$7F
(1)  368/   C13E4 : =$19                vcTL4 set vcTL4&$7F
(1)  368/   C13E4 :                     
(1)  368/   C13E4 : 0121 5101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  368/   C13E8 : 1214 140F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  368/   C13EC : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  368/   C13F0 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  368/   C13F4 : 2B2B 2B1B                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  368/   C13F8 : 1980 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  369/   C13FC :                     
(1)  370/   C13FC :                     ;	Voice $03
(1)  371/   C13FC :                     ;	$38
(1)  372/   C13FC :                     ;	$3A, $30, $30, $30, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  373/   C13FC :                     ;	$00, $04, $04, $03, 	$26, $26, $26, $26, 	$24, $2D, $12, $00
(1)  374/   C13FC : (MACRO)             	smpsVcAlgorithm     $00
(1)  374/   C13FC : =$0                 vcAlgorithm set $00
(1)  375/   C13FC : (MACRO)             	smpsVcFeedback      $07
(1)  375/   C13FC : =$7                 vcFeedback set $07
(1)  376/   C13FC : (MACRO)             	smpsVcUnusedBits    $00
(1)  376/   C13FC : =$0                 vcUnusedBits set $00
(1)  376/   C13FC : =$0                 vcD1R1Unk set 0
(1)  376/   C13FC : =$0                 vcD1R2Unk set 0
(1)  376/   C13FC : =$0                 vcD1R3Unk set 0
(1)  376/   C13FC : =$0                 vcD1R4Unk set 0
(1)  377/   C13FC : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)  377/   C13FC : =$3                 vcDT1 set $03
(1)  377/   C13FC : =$3                 vcDT2 set $03
(1)  377/   C13FC : =$3                 vcDT3 set $03
(1)  377/   C13FC : =$3                 vcDT4 set $03
(1)  378/   C13FC : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $0A
(1)  378/   C13FC : =$0                 vcCF1 set $00
(1)  378/   C13FC : =$0                 vcCF2 set $00
(1)  378/   C13FC : =$0                 vcCF3 set $00
(1)  378/   C13FC : =$A                 vcCF4 set $0A
(1)  379/   C13FC : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  379/   C13FC : =$1                 vcRS1 set $01
(1)  379/   C13FC : =$1                 vcRS2 set $01
(1)  379/   C13FC : =$0                 vcRS3 set $00
(1)  379/   C13FC : =$0                 vcRS4 set $00
(1)  380/   C13FC : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  380/   C13FC : =$1F                vcAR1 set $1F
(1)  380/   C13FC : =$1F                vcAR2 set $1F
(1)  380/   C13FC : =$1F                vcAR3 set $1F
(1)  380/   C13FC : =$1F                vcAR4 set $1F
(1)  381/   C13FC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  381/   C13FC : =$0                 vcAM1 set $00<<5
(1)  381/   C13FC : =$0                 vcAM2 set $00<<5
(1)  381/   C13FC : =$0                 vcAM3 set $00<<5
(1)  381/   C13FC : =$0                 vcAM4 set $00<<5
(1)  382/   C13FC : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  382/   C13FC : =$A                 vcD1R1 set $0A
(1)  382/   C13FC : =$A                 vcD1R2 set $0A
(1)  382/   C13FC : =$E                 vcD1R3 set $0E
(1)  382/   C13FC : =$12                vcD1R4 set $12
(1)  383/   C13FC : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  383/   C13FC : =$3                 vcD2R1 set $03
(1)  383/   C13FC : =$4                 vcD2R2 set $04
(1)  383/   C13FC : =$4                 vcD2R3 set $04
(1)  383/   C13FC : =$0                 vcD2R4 set $00
(1)  384/   C13FC : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  384/   C13FC : =$2                 vcDL1 set $02
(1)  384/   C13FC : =$2                 vcDL2 set $02
(1)  384/   C13FC : =$2                 vcDL3 set $02
(1)  384/   C13FC : =$2                 vcDL4 set $02
(1)  385/   C13FC : (MACRO)             	smpsVcReleaseRate   $06, $06, $06, $06
(1)  385/   C13FC : =$6                 vcRR1 set $06
(1)  385/   C13FC : =$6                 vcRR2 set $06
(1)  385/   C13FC : =$6                 vcRR3 set $06
(1)  385/   C13FC : =$6                 vcRR4 set $06
(1)  386/   C13FC : (MACRO)             	smpsVcTotalLevel    $00, $12, $2D, $24
(1)  386/   C13FC : =$0                 vcTL1 set $00
(1)  386/   C13FC : =$12                vcTL2 set $12
(1)  386/   C13FC : =$2D                vcTL3 set $2D
(1)  386/   C13FC : =$24                vcTL4 set $24
(1)  386/   C13FC : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  386/   C13FD :                     ;   0     1     2     3     4     5     6     7
(1)  386/   C13FD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  386/   C13FD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  386/   C13FD : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  386/   C13FD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  386/   C13FD : =$80                vcTLMask1 set $80
(1)  386/   C13FD :                     
(1)  386/   C13FD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  386/   C13FD : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  386/   C13FD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  386/   C13FD : =$80                vcTLMask1 set $80
(1)  386/   C13FD : =$0                 vcTL1 set vcTL1&$7F
(1)  386/   C13FD : =$12                vcTL2 set vcTL2&$7F
(1)  386/   C13FD : =$2D                vcTL3 set vcTL3&$7F
(1)  386/   C13FD : =$24                vcTL4 set vcTL4&$7F
(1)  386/   C13FD :                     
(1)  386/   C13FD : 3A30 3030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  386/   C1401 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  386/   C1405 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  386/   C1409 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  386/   C140D : 2626 2626                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  386/   C1411 : 242D 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  387/   C1415 :                     
(1)  388/   C1415 :                     ;	Voice $04
(1)  389/   C1415 :                     ;	$3D
(1)  390/   C1415 :                     ;	$01, $21, $50, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
(1)  391/   C1415 :                     ;	$00, $00, $00, $00, 	$26, $28, $28, $18, 	$19, $80, $80, $80
(1)  392/   C1415 : (MACRO)             	smpsVcAlgorithm     $05
(1)  392/   C1415 : =$5                 vcAlgorithm set $05
(1)  393/   C1415 : (MACRO)             	smpsVcFeedback      $07
(1)  393/   C1415 : =$7                 vcFeedback set $07
(1)  394/   C1415 : (MACRO)             	smpsVcUnusedBits    $00
(1)  394/   C1415 : =$0                 vcUnusedBits set $00
(1)  394/   C1415 : =$0                 vcD1R1Unk set 0
(1)  394/   C1415 : =$0                 vcD1R2Unk set 0
(1)  394/   C1415 : =$0                 vcD1R3Unk set 0
(1)  394/   C1415 : =$0                 vcD1R4Unk set 0
(1)  395/   C1415 : (MACRO)             	smpsVcDetune        $00, $05, $02, $00
(1)  395/   C1415 : =$0                 vcDT1 set $00
(1)  395/   C1415 : =$5                 vcDT2 set $05
(1)  395/   C1415 : =$2                 vcDT3 set $02
(1)  395/   C1415 : =$0                 vcDT4 set $00
(1)  396/   C1415 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $01, $01
(1)  396/   C1415 : =$1                 vcCF1 set $01
(1)  396/   C1415 : =$0                 vcCF2 set $00
(1)  396/   C1415 : =$1                 vcCF3 set $01
(1)  396/   C1415 : =$1                 vcCF4 set $01
(1)  397/   C1415 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  397/   C1415 : =$0                 vcRS1 set $00
(1)  397/   C1415 : =$0                 vcRS2 set $00
(1)  397/   C1415 : =$0                 vcRS3 set $00
(1)  397/   C1415 : =$0                 vcRS4 set $00
(1)  398/   C1415 : (MACRO)             	smpsVcAttackRate    $0F, $14, $14, $12
(1)  398/   C1415 : =$F                 vcAR1 set $0F
(1)  398/   C1415 : =$14                vcAR2 set $14
(1)  398/   C1415 : =$14                vcAR3 set $14
(1)  398/   C1415 : =$12                vcAR4 set $12
(1)  399/   C1415 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  399/   C1415 : =$0                 vcAM1 set $00<<5
(1)  399/   C1415 : =$0                 vcAM2 set $00<<5
(1)  399/   C1415 : =$0                 vcAM3 set $00<<5
(1)  399/   C1415 : =$0                 vcAM4 set $00<<5
(1)  400/   C1415 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1)  400/   C1415 : =$5                 vcD1R1 set $05
(1)  400/   C1415 : =$5                 vcD1R2 set $05
(1)  400/   C1415 : =$5                 vcD1R3 set $05
(1)  400/   C1415 : =$A                 vcD1R4 set $0A
(1)  401/   C1415 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  401/   C1415 : =$0                 vcD2R1 set $00
(1)  401/   C1415 : =$0                 vcD2R2 set $00
(1)  401/   C1415 : =$0                 vcD2R3 set $00
(1)  401/   C1415 : =$0                 vcD2R4 set $00
(1)  402/   C1415 : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1)  402/   C1415 : =$1                 vcDL1 set $01
(1)  402/   C1415 : =$2                 vcDL2 set $02
(1)  402/   C1415 : =$2                 vcDL3 set $02
(1)  402/   C1415 : =$2                 vcDL4 set $02
(1)  403/   C1415 : (MACRO)             	smpsVcReleaseRate   $08, $08, $08, $06
(1)  403/   C1415 : =$8                 vcRR1 set $08
(1)  403/   C1415 : =$8                 vcRR2 set $08
(1)  403/   C1415 : =$8                 vcRR3 set $08
(1)  403/   C1415 : =$6                 vcRR4 set $06
(1)  404/   C1415 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $19
(1)  404/   C1415 : =$80                vcTL1 set $80
(1)  404/   C1415 : =$80                vcTL2 set $80
(1)  404/   C1415 : =$80                vcTL3 set $80
(1)  404/   C1415 : =$19                vcTL4 set $19
(1)  404/   C1415 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  404/   C1416 :                     ;   0     1     2     3     4     5     6     7
(1)  404/   C1416 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  404/   C1416 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  404/   C1416 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  404/   C1416 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  404/   C1416 : =$80                vcTLMask1 set $80
(1)  404/   C1416 :                     
(1)  404/   C1416 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  404/   C1416 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  404/   C1416 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  404/   C1416 : =$80                vcTLMask1 set $80
(1)  404/   C1416 : =$0                 vcTL1 set vcTL1&$7F
(1)  404/   C1416 : =$0                 vcTL2 set vcTL2&$7F
(1)  404/   C1416 : =$0                 vcTL3 set vcTL3&$7F
(1)  404/   C1416 : =$19                vcTL4 set vcTL4&$7F
(1)  404/   C1416 :                     
(1)  404/   C1416 : 0121 5001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  404/   C141A : 1214 140F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  404/   C141E : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  404/   C1422 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  404/   C1426 : 2628 2818                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  404/   C142A : 1980 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  405/   C142E :                     
(1)  406/   C142E :                     ;	Voice $05
(1)  407/   C142E :                     ;	$3A
(1)  408/   C142E :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  409/   C142E :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
(1)  410/   C142E : (MACRO)             	smpsVcAlgorithm     $02
(1)  410/   C142E : =$2                 vcAlgorithm set $02
(1)  411/   C142E : (MACRO)             	smpsVcFeedback      $07
(1)  411/   C142E : =$7                 vcFeedback set $07
(1)  412/   C142E : (MACRO)             	smpsVcUnusedBits    $00
(1)  412/   C142E : =$0                 vcUnusedBits set $00
(1)  412/   C142E : =$0                 vcD1R1Unk set 0
(1)  412/   C142E : =$0                 vcD1R2Unk set 0
(1)  412/   C142E : =$0                 vcD1R3Unk set 0
(1)  412/   C142E : =$0                 vcD1R4Unk set 0
(1)  413/   C142E : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  413/   C142E : =$0                 vcDT1 set $00
(1)  413/   C142E : =$0                 vcDT2 set $00
(1)  413/   C142E : =$0                 vcDT3 set $00
(1)  413/   C142E : =$0                 vcDT4 set $00
(1)  414/   C142E : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  414/   C142E : =$1                 vcCF1 set $01
(1)  414/   C142E : =$1                 vcCF2 set $01
(1)  414/   C142E : =$7                 vcCF3 set $07
(1)  414/   C142E : =$1                 vcCF4 set $01
(1)  415/   C142E : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  415/   C142E : =$1                 vcRS1 set $01
(1)  415/   C142E : =$2                 vcRS2 set $02
(1)  415/   C142E : =$2                 vcRS3 set $02
(1)  415/   C142E : =$2                 vcRS4 set $02
(1)  416/   C142E : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  416/   C142E : =$13                vcAR1 set $13
(1)  416/   C142E : =$D                 vcAR2 set $0D
(1)  416/   C142E : =$E                 vcAR3 set $0E
(1)  416/   C142E : =$E                 vcAR4 set $0E
(1)  417/   C142E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  417/   C142E : =$0                 vcAM1 set $00<<5
(1)  417/   C142E : =$0                 vcAM2 set $00<<5
(1)  417/   C142E : =$0                 vcAM3 set $00<<5
(1)  417/   C142E : =$0                 vcAM4 set $00<<5
(1)  418/   C142E : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  418/   C142E : =$3                 vcD1R1 set $03
(1)  418/   C142E : =$E                 vcD1R2 set $0E
(1)  418/   C142E : =$E                 vcD1R3 set $0E
(1)  418/   C142E : =$E                 vcD1R4 set $0E
(1)  419/   C142E : (MACRO)             	smpsVcDecayRate2    $07, $00, $00, $00
(1)  419/   C142E : =$7                 vcD2R1 set $07
(1)  419/   C142E : =$0                 vcD2R2 set $00
(1)  419/   C142E : =$0                 vcD2R3 set $00
(1)  419/   C142E : =$0                 vcD2R4 set $00
(1)  420/   C142E : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  420/   C142E : =$0                 vcDL1 set $00
(1)  420/   C142E : =$1                 vcDL2 set $01
(1)  420/   C142E : =$F                 vcDL3 set $0F
(1)  420/   C142E : =$1                 vcDL4 set $01
(1)  421/   C142E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  421/   C142E : =$F                 vcRR1 set $0F
(1)  421/   C142E : =$F                 vcRR2 set $0F
(1)  421/   C142E : =$F                 vcRR3 set $0F
(1)  421/   C142E : =$F                 vcRR4 set $0F
(1)  422/   C142E : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $18
(1)  422/   C142E : =$80                vcTL1 set $80
(1)  422/   C142E : =$27                vcTL2 set $27
(1)  422/   C142E : =$28                vcTL3 set $28
(1)  422/   C142E : =$18                vcTL4 set $18
(1)  422/   C142E : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  422/   C142F :                     ;   0     1     2     3     4     5     6     7
(1)  422/   C142F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  422/   C142F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  422/   C142F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  422/   C142F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  422/   C142F : =$80                vcTLMask1 set $80
(1)  422/   C142F :                     
(1)  422/   C142F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  422/   C142F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  422/   C142F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  422/   C142F : =$80                vcTLMask1 set $80
(1)  422/   C142F : =$0                 vcTL1 set vcTL1&$7F
(1)  422/   C142F : =$27                vcTL2 set vcTL2&$7F
(1)  422/   C142F : =$28                vcTL3 set vcTL3&$7F
(1)  422/   C142F : =$18                vcTL4 set vcTL4&$7F
(1)  422/   C142F :                     
(1)  422/   C142F : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  422/   C1433 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  422/   C1437 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  422/   C143B : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  422/   C143F : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  422/   C1443 : 1828 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  423/   C1447 :                     
(1)  424/   C1447 :                     ;	Voice $06
(1)  425/   C1447 :                     ;	$3A
(1)  426/   C1447 :                     ;	$31, $37, $31, $31, 	$8D, $8D, $8E, $53, 	$0E, $0E, $0E, $03
(1)  427/   C1447 :                     ;	$00, $00, $00, $00, 	$13, $FA, $13, $0A, 	$17, $28, $26, $00
(1)  428/   C1447 : (MACRO)             	smpsVcAlgorithm     $02
(1)  428/   C1447 : =$2                 vcAlgorithm set $02
(1)  429/   C1447 : (MACRO)             	smpsVcFeedback      $07
(1)  429/   C1447 : =$7                 vcFeedback set $07
(1)  430/   C1447 : (MACRO)             	smpsVcUnusedBits    $00
(1)  430/   C1447 : =$0                 vcUnusedBits set $00
(1)  430/   C1447 : =$0                 vcD1R1Unk set 0
(1)  430/   C1447 : =$0                 vcD1R2Unk set 0
(1)  430/   C1447 : =$0                 vcD1R3Unk set 0
(1)  430/   C1447 : =$0                 vcD1R4Unk set 0
(1)  431/   C1447 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)  431/   C1447 : =$3                 vcDT1 set $03
(1)  431/   C1447 : =$3                 vcDT2 set $03
(1)  431/   C1447 : =$3                 vcDT3 set $03
(1)  431/   C1447 : =$3                 vcDT4 set $03
(1)  432/   C1447 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  432/   C1447 : =$1                 vcCF1 set $01
(1)  432/   C1447 : =$1                 vcCF2 set $01
(1)  432/   C1447 : =$7                 vcCF3 set $07
(1)  432/   C1447 : =$1                 vcCF4 set $01
(1)  433/   C1447 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  433/   C1447 : =$1                 vcRS1 set $01
(1)  433/   C1447 : =$2                 vcRS2 set $02
(1)  433/   C1447 : =$2                 vcRS3 set $02
(1)  433/   C1447 : =$2                 vcRS4 set $02
(1)  434/   C1447 : (MACRO)             	smpsVcAttackRate    $13, $0E, $0D, $0D
(1)  434/   C1447 : =$13                vcAR1 set $13
(1)  434/   C1447 : =$E                 vcAR2 set $0E
(1)  434/   C1447 : =$D                 vcAR3 set $0D
(1)  434/   C1447 : =$D                 vcAR4 set $0D
(1)  435/   C1447 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  435/   C1447 : =$0                 vcAM1 set $00<<5
(1)  435/   C1447 : =$0                 vcAM2 set $00<<5
(1)  435/   C1447 : =$0                 vcAM3 set $00<<5
(1)  435/   C1447 : =$0                 vcAM4 set $00<<5
(1)  436/   C1447 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  436/   C1447 : =$3                 vcD1R1 set $03
(1)  436/   C1447 : =$E                 vcD1R2 set $0E
(1)  436/   C1447 : =$E                 vcD1R3 set $0E
(1)  436/   C1447 : =$E                 vcD1R4 set $0E
(1)  437/   C1447 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  437/   C1447 : =$0                 vcD2R1 set $00
(1)  437/   C1447 : =$0                 vcD2R2 set $00
(1)  437/   C1447 : =$0                 vcD2R3 set $00
(1)  437/   C1447 : =$0                 vcD2R4 set $00
(1)  438/   C1447 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  438/   C1447 : =$0                 vcDL1 set $00
(1)  438/   C1447 : =$1                 vcDL2 set $01
(1)  438/   C1447 : =$F                 vcDL3 set $0F
(1)  438/   C1447 : =$1                 vcDL4 set $01
(1)  439/   C1447 : (MACRO)             	smpsVcReleaseRate   $0A, $03, $0A, $03
(1)  439/   C1447 : =$A                 vcRR1 set $0A
(1)  439/   C1447 : =$3                 vcRR2 set $03
(1)  439/   C1447 : =$A                 vcRR3 set $0A
(1)  439/   C1447 : =$3                 vcRR4 set $03
(1)  440/   C1447 : (MACRO)             	smpsVcTotalLevel    $00, $26, $28, $17
(1)  440/   C1447 : =$0                 vcTL1 set $00
(1)  440/   C1447 : =$26                vcTL2 set $26
(1)  440/   C1447 : =$28                vcTL3 set $28
(1)  440/   C1447 : =$17                vcTL4 set $17
(1)  440/   C1447 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  440/   C1448 :                     ;   0     1     2     3     4     5     6     7
(1)  440/   C1448 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  440/   C1448 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  440/   C1448 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  440/   C1448 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  440/   C1448 : =$80                vcTLMask1 set $80
(1)  440/   C1448 :                     
(1)  440/   C1448 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  440/   C1448 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  440/   C1448 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  440/   C1448 : =$80                vcTLMask1 set $80
(1)  440/   C1448 : =$0                 vcTL1 set vcTL1&$7F
(1)  440/   C1448 : =$26                vcTL2 set vcTL2&$7F
(1)  440/   C1448 : =$28                vcTL3 set vcTL3&$7F
(1)  440/   C1448 : =$17                vcTL4 set vcTL4&$7F
(1)  440/   C1448 :                     
(1)  440/   C1448 : 3137 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  440/   C144C : 8D8D 8E53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  440/   C1450 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  440/   C1454 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  440/   C1458 : 13FA 130A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  440/   C145C : 1728 2680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  441/   C1460 :                     
(1)  442/   C1460 :                     
   55/   C1460 :                        Music_13:	include		"music-improved/93 - Boss.asm"
(1)    1/   C1460 :                     Boss_Header:
(1)    2/   C1460 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C1460 :                     
(1)    2/   C1460 : =$2                 SourceDriver set 2
(1)    2/   C1460 :                     
(1)    2/   C1460 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C1460 :                     
(1)    2/   C1460 : =$C1460             songStart set *
(1)    2/   C1460 :                     
(1)    2/   C1460 :                     
(1)    3/   C1460 : (MACRO)             	smpsHeaderVoice     Boss_Voices
(1)    3/   C1460 : CF96                                dc.w    z80_ptr(BOSS_VOICES)
(1)    4/   C1462 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C1462 : 0603                        dc.b    $06,$03
(1)    5/   C1464 : (MACRO)             	smpsHeaderTempo     $01, $E3
(1)    5/   C1464 : 01                          dc.b    $01
(1)    5/   C1465 :  (MACRO-2)                  convertMainTempoMod $E3
(1)    5/   C1465 : 1D                                          dc.b    s2TempotoS3($E3)
(1)    6/   C1466 :                     
(1)    7/   C1466 : (MACRO)             	smpsHeaderDAC       Boss_DAC
(1)    7/   C1466 :  (MACRO-2)                  CheckedChannelPointer BOSS_DAC
(1)    7/   C1466 : 3D96                                dc.w    z80_ptr(BOSS_DAC)
(1)    7/   C1468 : 0000                                dc.w    $00
(1)    8/   C146A : (MACRO)             	smpsHeaderFM        Boss_FM1,	$0C, $0A
(1)    8/   C146A :  (MACRO-2)                  CheckedChannelPointer BOSS_FM1
(1)    8/   C146A : 9094                                dc.w    z80_ptr(BOSS_FM1)
(1)    8/   C146C : 0C0A                        dc.b    $0C,$0A
(1)    9/   C146E : (MACRO)             	smpsHeaderFM        Boss_FM2,	$0C, $06
(1)    9/   C146E :  (MACRO-2)                  CheckedChannelPointer BOSS_FM2
(1)    9/   C146E : FD94                                dc.w    z80_ptr(BOSS_FM2)
(1)    9/   C1470 : 0C06                        dc.b    $0C,$06
(1)   10/   C1472 : (MACRO)             	smpsHeaderFM        Boss_FM3,	$0C, $08
(1)   10/   C1472 :  (MACRO-2)                  CheckedChannelPointer BOSS_FM3
(1)   10/   C1472 : 5595                                dc.w    z80_ptr(BOSS_FM3)
(1)   10/   C1474 : 0C08                        dc.b    $0C,$08
(1)   11/   C1476 : (MACRO)             	smpsHeaderFM        Boss_FM4,	$00, $0F
(1)   11/   C1476 :  (MACRO-2)                  CheckedChannelPointer BOSS_FM4
(1)   11/   C1476 : 8895                                dc.w    z80_ptr(BOSS_FM4)
(1)   11/   C1478 : 000F                        dc.b    $00,$0F
(1)   12/   C147A : (MACRO)             	smpsHeaderFM        Boss_FM5,	$00, $0F
(1)   12/   C147A :  (MACRO-2)                  CheckedChannelPointer BOSS_FM5
(1)   12/   C147A : 9495                                dc.w    z80_ptr(BOSS_FM5)
(1)   12/   C147C : 000F                        dc.b    $00,$0F
(1)   13/   C147E : (MACRO)             	smpsHeaderPSG       Boss_PSG1,	$E8, $04, $00, fTone_0C
(1)   13/   C147E :  (MACRO-2)                  CheckedChannelPointer BOSS_PSG1
(1)   13/   C147E : FC94                                dc.w    z80_ptr(BOSS_PSG1)
(1)   13/   C1480 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   13/   C1480 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   13/   C1481 : 0400 0C                     dc.b    $04,$00,FTONE_0C
(1)   14/   C1484 : (MACRO)             	smpsHeaderPSG       Boss_PSG2,	$E8, $06, $00, fTone_0C
(1)   14/   C1484 :  (MACRO-2)                  CheckedChannelPointer BOSS_PSG2
(1)   14/   C1484 : FC94                                dc.w    z80_ptr(BOSS_PSG2)
(1)   14/   C1486 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   14/   C1486 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   14/   C1487 : 0600 0C                     dc.b    $06,$00,FTONE_0C
(1)   15/   C148A : (MACRO)             	smpsHeaderPSG       Boss_PSG3,	$FE, $03, $00, fTone_04
(1)   15/   C148A :  (MACRO-2)                  CheckedChannelPointer BOSS_PSG3
(1)   15/   C148A : 2396                                dc.w    z80_ptr(BOSS_PSG3)
(1)   15/   C148C :  (MACRO-2)                  PSGPitchConvert $FE
(1)   15/   C148C : 0A                                  dc.b    ($FE+psgdelta)&$FF
(1)   15/   C148D : 0300 04                     dc.b    $03,$00,FTONE_04
(1)   16/   C1490 :                     
(1)   17/   C1490 :                     ; FM1 Data
(1)   18/   C1490 :                     Boss_FM1:
(1)   19/   C1490 : (MACRO)             	smpsSetvoice        $00
(1)   19/   C1490 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   C1490 : EF00                                dc.b    $EF,$00
(1)   20/   C1492 :                     
(1)   21/   C1492 :                     Boss_Jump01:
(1)   22/   C1492 : (MACRO)             	smpsNoteFill        $08
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   22/   C1492 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   22/   C1492 : E808                                dc.b    $E8,$08
(1)   23/   C1494 : (MACRO)             	smpsCall            Boss_Call02
(1)   23/   C1494 : F8                          dc.b    $F8
(1)   23/   C1495 : F294                                dc.w    z80_ptr(BOSS_CALL02)
(1)   24/   C1497 : (MACRO)             	smpsNoteFill        $0A
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   24/   C1497 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   24/   C1497 : E80A                                dc.b    $E8,$0A
(1)   25/   C1499 :                     
(1)   26/   C1499 :                     Boss_Loop0B:
(1)   27/   C1499 : 910C 9D             	dc.b	nE1, $0C, nE2
(1)   28/   C149C : (MACRO)             	smpsLoop            $00, $04, Boss_Loop0B
(1)   28/   C149C : F7                          dc.b    $F7
(1)   28/   C149D : 0004                        dc.b    $00,$04
(1)   28/   C149F : 9994                                dc.w    z80_ptr(BOSS_LOOP0B)
(1)   29/   C14A1 : (MACRO)             	smpsNoteFill        $08
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   29/   C14A1 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   29/   C14A1 : E808                                dc.b    $E8,$08
(1)   30/   C14A3 : (MACRO)             	smpsCall            Boss_Call02
(1)   30/   C14A3 : F8                          dc.b    $F8
(1)   30/   C14A4 : F294                                dc.w    z80_ptr(BOSS_CALL02)
(1)   31/   C14A6 : (MACRO)             	smpsNoteFill        $0A
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   31/   C14A6 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   31/   C14A6 : E80A                                dc.b    $E8,$0A
(1)   32/   C14A8 : 910C 9D93 9F94 A095 	dc.b	nE1, $0C, nE2, nFs1, nFs2, nG1, nG2, nAb1, nAb2
            C14B0 : A1               
(1)   33/   C14B1 :                     
(1)   34/   C14B1 :                     Boss_Loop0C:
(1)   35/   C14B1 : (MACRO)             	smpsCall            Boss_Call03
(1)   35/   C14B1 : F8                          dc.b    $F8
(1)   35/   C14B2 : D394                                dc.w    z80_ptr(BOSS_CALL03)
(1)   36/   C14B4 : 940C A006 A094 0CA0 	dc.b	nG1, $0C, nG2, $06, nG2, nG1, $0C, nG2, $06, nG2
            C14BC : 06A0               
(1)   37/   C14BE : (MACRO)             	smpsCall            Boss_Call03
(1)   37/   C14BE : F8                          dc.b    $F8
(1)   37/   C14BF : D394                                dc.w    z80_ptr(BOSS_CALL03)
(1)   38/   C14C1 : 910C 9D06 9D91 0C9D 	dc.b	nE1, $0C, nE2, $06, nE2, nE1, $0C, nE2, $06, nE2
            C14C9 : 069D               
(1)   39/   C14CB : (MACRO)             	smpsLoop            $00, $04, Boss_Loop0C
(1)   39/   C14CB : F7                          dc.b    $F7
(1)   39/   C14CC : 0004                        dc.b    $00,$04
(1)   39/   C14CE : B194                                dc.w    z80_ptr(BOSS_LOOP0C)
(1)   40/   C14D0 : (MACRO)             	smpsJump            Boss_Jump01
(1)   40/   C14D0 : F6                          dc.b    $F6
(1)   40/   C14D1 : 9294                                dc.w    z80_ptr(BOSS_JUMP01)
(1)   41/   C14D3 :                     
(1)   42/   C14D3 :                     Boss_Call03:
(1)   43/   C14D3 : 960C A206 A296 0CA2 	dc.b	nA1, $0C, nA2, $06, nA2, nA1, $0C, nA2, $06, nA2, nA1, $0C
            C14DB : 06A2 960C         
(1)   44/   C14DF : A206 A296 0CA2 06A2 	dc.b	nA2, $06, nA2, nA1, $0C, nA2, $06, nA2, nG1, $0C, nG2, $06
            C14E7 : 940C A006         
(1)   45/   C14EB : A094 0CA0 06A0      	dc.b	nG2, nG1, $0C, nG2, $06, nG2
(1)   46/   C14F1 : (MACRO)             	smpsReturn
(1)   46/   C14F1 : F9                                  dc.b    $F9
(1)   47/   C14F2 :                     
(1)   48/   C14F2 :                     Boss_Call02:
(1)   49/   C14F2 : 960C A2A2 96A2 A296 	dc.b	nA1, $0C, nA2, nA2, nA1, nA2, nA2, nA1, nA2
            C14FA : A2               
(1)   50/   C14FB : (MACRO)             	smpsReturn
(1)   50/   C14FB : F9                                  dc.b    $F9
(1)   51/   C14FC :                     
(1)   52/   C14FC :                     ; PSG1 Data
(1)   53/   C14FC :                     Boss_PSG1:
(1)   54/   C14FC :                     ; PSG2 Data
(1)   55/   C14FC :                     Boss_PSG2:
(1)   56/   C14FC : (MACRO)             	smpsStop
(1)   56/   C14FC : F2                          dc.b    $F2
(1)   57/   C14FD :                     
(1)   58/   C14FD :                     ; FM2 Data
(1)   59/   C14FD :                     Boss_FM2:
(1)   60/   C14FD : (MACRO)             	smpsSetvoice        $02
(1)   60/   C14FD :  (MACRO-2)                  smpsFMvoice $02
(1)   60/   C14FD : EF02                                dc.b    $EF,$02
(1)   61/   C14FF :                     
(1)   62/   C14FF :                     Boss_Loop09:
(1)   63/   C14FF : (MACRO)             	smpsNoteFill        $08
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   63/   C14FF :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   63/   C14FF : E808                                dc.b    $E8,$08
(1)   64/   C1501 : AE0C A9A9 AEA9 A9AE 	dc.b	nA3, $0C, nE3, nE3, nA3, nE3, nE3, nA3, nE3
            C1509 : A9               
(1)   65/   C150A : (MACRO)             	smpsNoteFill        $17
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   65/   C150A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   65/   C150A : E817                                dc.b    $E8,$17
(1)   66/   C150C : B018 B0B0 B0        	dc.b	nB3, $18, nB3, nB3, nB3
(1)   67/   C1511 : (MACRO)             	smpsLoop            $00, $02, Boss_Loop09
(1)   67/   C1511 : F7                          dc.b    $F7
(1)   67/   C1512 : 0002                        dc.b    $00,$02
(1)   67/   C1514 : FF94                                dc.w    z80_ptr(BOSS_LOOP09)
(1)   68/   C1516 : (MACRO)             	smpsAlterPitch      $F4
(1)   68/   C1516 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   68/   C1516 : FBF4                                dc.b    $FB,$F4
(1)   69/   C1518 : (MACRO)             	smpsSetvoice        $03
(1)   69/   C1518 :  (MACRO-2)                  smpsFMvoice $03
(1)   69/   C1518 : EF03                                dc.b    $EF,$03
(1)   70/   C151A :                     
(1)   71/   C151A :                     Boss_Loop0A:
(1)   72/   C151A : (MACRO)             	smpsCall            Boss_Call01
(1)   72/   C151A : F8                          dc.b    $F8
(1)   72/   C151B : 2795                                dc.w    z80_ptr(BOSS_CALL01)
(1)   73/   C151D : (MACRO)             	smpsLoop            $00, $04, Boss_Loop0A
(1)   73/   C151D : F7                          dc.b    $F7
(1)   73/   C151E : 0004                        dc.b    $00,$04
(1)   73/   C1520 : 1A95                                dc.w    z80_ptr(BOSS_LOOP0A)
(1)   74/   C1522 : (MACRO)             	smpsAlterPitch      $0C
(1)   74/   C1522 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   74/   C1522 : FB0C                                dc.b    $FB,$0C
(1)   75/   C1524 : (MACRO)             	smpsJump            Boss_FM2
(1)   75/   C1524 : F6                          dc.b    $F6
(1)   75/   C1525 : FD94                                dc.w    z80_ptr(BOSS_FM2)
(1)   76/   C1527 :                     
(1)   77/   C1527 :                     Boss_Call01:
(1)   78/   C1527 : AE06 80B0 80B1 18B3 	dc.b	nA3, $06, nRst, nB3, nRst, nC4, $18, nD4, nC4, nB3, $06, nRst
            C152F : B1B0 0680         
(1)   79/   C1533 : B180 B080 AC18 A906 	dc.b	nC4, nRst, nB3, nRst, nG3, $18, nE3, $06, nRst, nG3, $18, nA3
            C153B : 80AC 18AE         
(1)   80/   C153F : 0680 B080 B118 B3B1 	dc.b	$06, nRst, nB3, nRst, nC4, $18, nD4, nC4, nB3, $06, nRst, nC4
            C1547 : B006 80B1         
(1)   81/   C154B : 80B3 80B4 80B5 0C80 	dc.b	nRst, nD4, nRst, nEb4, nRst, nE4, $0C, nRst, $24
            C1553 : 24               
(1)   82/   C1554 : (MACRO)             	smpsReturn
(1)   82/   C1554 : F9                                  dc.b    $F9
(1)   83/   C1555 :                     
(1)   84/   C1555 :                     ; FM3 Data
(1)   85/   C1555 :                     Boss_FM3:
(1)   86/   C1555 : (MACRO)             	smpsSetvoice        $02
(1)   86/   C1555 :  (MACRO-2)                  smpsFMvoice $02
(1)   86/   C1555 : EF02                                dc.b    $EF,$02
(1)   87/   C1557 :                     
(1)   88/   C1557 :                     Boss_Loop06:
(1)   89/   C1557 : (MACRO)             	smpsNoteFill        $08
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   89/   C1557 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   89/   C1557 : E808                                dc.b    $E8,$08
(1)   90/   C1559 : B10C AEAE B1AE AEB1 	dc.b	nC4, $0C, nA3, nA3, nC4, nA3, nA3, nC4, nA3
            C1561 : AE               
(1)   91/   C1562 : (MACRO)             	smpsNoteFill        $17
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   91/   C1562 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   91/   C1562 : E817                                dc.b    $E8,$17
(1)   92/   C1564 : AD18 ADAD AD        	dc.b	nAb3, $18, nAb3, nAb3, nAb3
(1)   93/   C1569 : (MACRO)             	smpsLoop            $00, $02, Boss_Loop06
(1)   93/   C1569 : F7                          dc.b    $F7
(1)   93/   C156A : 0002                        dc.b    $00,$02
(1)   93/   C156C : 5795                                dc.w    z80_ptr(BOSS_LOOP06)
(1)   94/   C156E :                     
(1)   95/   C156E :                     Boss_Loop07:
(1)   96/   C156E : 8030                	dc.b	nRst, $30
(1)   97/   C1570 : (MACRO)             	smpsLoop            $00, $10, Boss_Loop07
(1)   97/   C1570 : F7                          dc.b    $F7
(1)   97/   C1571 : 0010                        dc.b    $00,$10
(1)   97/   C1573 : 6E95                                dc.w    z80_ptr(BOSS_LOOP07)
(1)   98/   C1575 : (MACRO)             	smpsAlterNote       $03
(1)   98/   C1575 :  (MACRO-2)                  smpsDetune      $03
(1)   98/   C1575 : E103                        dc.b    $E1,$03
(1)   99/   C1577 : (MACRO)             	smpsAlterVol        $FC
(1)   99/   C1577 : E6FC                        dc.b    $E6,$FC
(1)  100/   C1579 :                     
(1)  101/   C1579 :                     Boss_Loop08:
(1)  102/   C1579 : (MACRO)             	smpsCall            Boss_Call01
(1)  102/   C1579 : F8                          dc.b    $F8
(1)  102/   C157A : 2795                                dc.w    z80_ptr(BOSS_CALL01)
(1)  103/   C157C : (MACRO)             	smpsLoop            $00, $02, Boss_Loop08
(1)  103/   C157C : F7                          dc.b    $F7
(1)  103/   C157D : 0002                        dc.b    $00,$02
(1)  103/   C157F : 7995                                dc.w    z80_ptr(BOSS_LOOP08)
(1)  104/   C1581 : (MACRO)             	smpsAlterNote       $00
(1)  104/   C1581 :  (MACRO-2)                  smpsDetune      $00
(1)  104/   C1581 : E100                        dc.b    $E1,$00
(1)  105/   C1583 : (MACRO)             	smpsAlterVol        $04
(1)  105/   C1583 : E604                        dc.b    $E6,$04
(1)  106/   C1585 : (MACRO)             	smpsJump            Boss_FM3
(1)  106/   C1585 : F6                          dc.b    $F6
(1)  106/   C1586 : 5595                                dc.w    z80_ptr(BOSS_FM3)
(1)  107/   C1588 :                     
(1)  108/   C1588 :                     ; FM4 Data
(1)  109/   C1588 :                     Boss_FM4:
(1)  110/   C1588 : (MACRO)             	smpsPan             panLeft, $00
(1)  110/   C1588 : =$0                 panNone set $00
(1)  110/   C1588 : =$40                panRight set $40
(1)  110/   C1588 : =$80                panLeft set $80
(1)  110/   C1588 : =$C0                panCentre set $C0
(1)  110/   C1588 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  110/   C1588 : E080                        dc.b $E0,PANLEFT+$00
(1)  111/   C158A : (MACRO)             	smpsAlterNote       $02
(1)  111/   C158A :  (MACRO-2)                  smpsDetune      $02
(1)  111/   C158A : E102                        dc.b    $E1,$02
(1)  112/   C158C : (MACRO)             	smpsModSet          $0C, $01, $04, $04
(1)  112/   C158C : F0                          dc.b    $F0
(1)  112/   C158D : 0D01 0405                           dc.b    $0C+1,$01,$04,(($04+1) * $01) & $FF
(1)  112/   C1591 :                             ;dc.b   $01,$04,$04
(1)  113/   C1591 : (MACRO)             	smpsJump            Boss_Jump00
(1)  113/   C1591 : F6                          dc.b    $F6
(1)  113/   C1592 : 9B95                                dc.w    z80_ptr(BOSS_JUMP00)
(1)  114/   C1594 :                     
(1)  115/   C1594 :                     ; FM5 Data
(1)  116/   C1594 :                     Boss_FM5:
(1)  117/   C1594 : (MACRO)             	smpsPan             panRight, $00
(1)  117/   C1594 : =$0                 panNone set $00
(1)  117/   C1594 : =$40                panRight set $40
(1)  117/   C1594 : =$80                panLeft set $80
(1)  117/   C1594 : =$C0                panCentre set $C0
(1)  117/   C1594 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  117/   C1594 : E040                        dc.b $E0,PANRIGHT+$00
(1)  118/   C1596 : (MACRO)             	smpsModSet          $0C, $01, $FC, $04
(1)  118/   C1596 : F0                          dc.b    $F0
(1)  118/   C1597 : 0D01 FC05                           dc.b    $0C+1,$01,$FC,(($04+1) * $01) & $FF
(1)  118/   C159B :                             ;dc.b   $01,$FC,$04
(1)  119/   C159B :                     
(1)  120/   C159B :                     Boss_Jump00:
(1)  121/   C159B : (MACRO)             	smpsModOff
(1)  121/   C159B : FA                                  dc.b    $FA
(1)  122/   C159C : (MACRO)             	smpsSetvoice        $01
(1)  122/   C159C :  (MACRO-2)                  smpsFMvoice $01
(1)  122/   C159C : EF01                                dc.b    $EF,$01
(1)  123/   C159E : 8030 8024 BF06 C1C2 	dc.b	nRst, $30, nRst, $24, nD5, $06, nE5, nF5, $0C, nF5, nE5, nE5
            C15A6 : 0CC2 C1C1         
(1)  124/   C15AA : BFBF C180 8030 8024 	dc.b	nD5, nD5, nE5, nRst, nRst, $30, nRst, $24, nD5, $06, nE5, nF5
            C15B2 : BF06 C1C2         
(1)  125/   C15B6 : 0CC1 C0C1 C518 C1   	dc.b	$0C, nE5, nEb5, nE5, nAb5, $18, nE5
(1)  126/   C15BD :                     
(1)  127/   C15BD :                     Boss_Loop05:
(1)  128/   C15BD : 8030 80             	dc.b	nRst, $30, nRst
(1)  129/   C15C0 : (MACRO)             	smpsLoop            $00, $04, Boss_Loop05
(1)  129/   C15C0 : F7                          dc.b    $F7
(1)  129/   C15C1 : 0004                        dc.b    $00,$04
(1)  129/   C15C3 : BD95                                dc.w    z80_ptr(BOSS_LOOP05)
(1)  130/   C15C5 : (MACRO)             	smpsModOn
(1)  130/   C15C5 : F480                                        dc.b    $F4,$80
(1)  131/   C15C7 : (MACRO)             	smpsAlterVol        $02
(1)  131/   C15C7 : E602                        dc.b    $E6,$02
(1)  132/   C15C9 : (MACRO)             	smpsCall            Boss_Call00
(1)  132/   C15C9 : F8                          dc.b    $F8
(1)  132/   C15CA : 1996                                dc.w    z80_ptr(BOSS_CALL00)
(1)  133/   C15CC : AC                  	dc.b	nG3
(1)  134/   C15CD : (MACRO)             	smpsCall            Boss_Call00
(1)  134/   C15CD : F8                          dc.b    $F8
(1)  134/   C15CE : 1996                                dc.w    z80_ptr(BOSS_CALL00)
(1)  135/   C15D0 : ADBD E718 BF0C BDBC 	dc.b	nAb3, nC5, smpsNoAttack, $18, nD5, $0C, nC5, nB4, $30, nG4, nC5, smpsNoAttack
            C15D8 : 30B8 BDE7         
(1)  136/   C15DC : 18BF 0CBD BC30 B9   	dc.b	$18, nD5, $0C, nC5, nB4, $30, nAb4
(1)  137/   C15E3 : (MACRO)             	smpsAlterVol        $F5
(1)  137/   C15E3 : E6F5                        dc.b    $E6,$F5
(1)  138/   C15E5 : (MACRO)             	smpsSetvoice        $02
(1)  138/   C15E5 :  (MACRO-2)                  smpsFMvoice $02
(1)  138/   C15E5 : EF02                                dc.b    $EF,$02
(1)  139/   C15E7 : BD06 80BF 80C1 18C2 	dc.b	nC5, $06, nRst, nD5, nRst, nE5, $18, nF5, nE5, nD5, $06, nRst
            C15EF : C1BF 0680         
(1)  140/   C15F3 : C180 BF80 BC18 B806 	dc.b	nE5, nRst, nD5, nRst, nB4, $18, nG4, $06, nRst, nB4, $18, nC5
            C15FB : 80BC 18BD         
(1)  141/   C15FF : 0680 BF80 C118 C2C1 	dc.b	$06, nRst, nD5, nRst, nE5, $18, nF5, nE5, nD5, $06, nRst, nE5
            C1607 : BF06 80C1         
(1)  142/   C160B : 80C2 80C3 80C5 0C80 	dc.b	nRst, nF5, nRst, nFs5, nRst, nAb5, $0C, nRst, $24
            C1613 : 24               
(1)  143/   C1614 : (MACRO)             	smpsAlterVol        $09
(1)  143/   C1614 : E609                        dc.b    $E6,$09
(1)  144/   C1616 : (MACRO)             	smpsJump            Boss_Jump00
(1)  144/   C1616 : F6                          dc.b    $F6
(1)  144/   C1617 : 9B95                                dc.w    z80_ptr(BOSS_JUMP00)
(1)  145/   C1619 :                     
(1)  146/   C1619 :                     Boss_Call00:
(1)  147/   C1619 : B130 E718 B30C B1B0 	dc.b	nC4, $30, smpsNoAttack, $18, nD4, $0C, nC4, nB3, $30
            C1621 : 30               
(1)  148/   C1622 : (MACRO)             	smpsReturn
(1)  148/   C1622 : F9                                  dc.b    $F9
(1)  149/   C1623 :                     
(1)  150/   C1623 :                     ; PSG3 Data
(1)  151/   C1623 :                     Boss_PSG3:
(1)  152/   C1623 : (MACRO)             	smpsPSGform         $E7
(1)  152/   C1623 : F3E7                        dc.b    $F3,$E7
(1)  153/   C1625 : (MACRO)             	smpsNoteFill        $05
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  153/   C1625 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  153/   C1625 : E805                                dc.b    $E8,$05
(1)  154/   C1627 :                     
(1)  155/   C1627 :                     Boss_Loop0D:
(1)  156/   C1627 : C624 2418 8030 80   	dc.b	nA5, $24, $24, $18, nRst, $30, nRst
(1)  157/   C162E : (MACRO)             	smpsLoop            $00, $02, Boss_Loop0D
(1)  157/   C162E : F7                          dc.b    $F7
(1)  157/   C162F : 0002                        dc.b    $00,$02
(1)  157/   C1631 : 2796                                dc.w    z80_ptr(BOSS_LOOP0D)
(1)  158/   C1633 :                     
(1)  159/   C1633 :                     Boss_Loop0E:
(1)  160/   C1633 : C618                	dc.b	nA5, $18
(1)  161/   C1635 : (MACRO)             	smpsLoop            $00, $40, Boss_Loop0E
(1)  161/   C1635 : F7                          dc.b    $F7
(1)  161/   C1636 : 0040                        dc.b    $00,$40
(1)  161/   C1638 : 3396                                dc.w    z80_ptr(BOSS_LOOP0E)
(1)  162/   C163A : (MACRO)             	smpsJump            Boss_Loop0D
(1)  162/   C163A : F6                          dc.b    $F6
(1)  162/   C163B : 2796                                dc.w    z80_ptr(BOSS_LOOP0D)
(1)  163/   C163D :                     
(1)  164/   C163D :                     ; DAC Data
(1)  165/   C163D :                     Boss_DAC:
(1)  166/   C163D : 820C 8282 8282 8282 	dc.b	dSnare, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dMidTimpani, $0C, dVLowTimpani
            C1645 : 8289 0C8B         
(1)  167/   C1649 : 898B 898B 898B      	dc.b	dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani
(1)  168/   C164F : (MACRO)             	smpsLoop            $00, $02, Boss_DAC
(1)  168/   C164F : F7                          dc.b    $F7
(1)  168/   C1650 : 0002                        dc.b    $00,$02
(1)  168/   C1652 : 3D96                                dc.w    z80_ptr(BOSS_DAC)
(1)  169/   C1654 : 810C 8206 82        	dc.b	dKick, $0C, dSnare, $06, dSnare
(1)  170/   C1659 :                     
(1)  171/   C1659 :                     Boss_Loop00:
(1)  172/   C1659 : 810C 8206 82        	dc.b	dKick, $0C, dSnare, $06, dSnare
(1)  173/   C165E : (MACRO)             	smpsLoop            $00, $06, Boss_Loop00
(1)  173/   C165E : F7                          dc.b    $F7
(1)  173/   C165F : 0006                        dc.b    $00,$06
(1)  173/   C1661 : 5996                                dc.w    z80_ptr(BOSS_LOOP00)
(1)  174/   C1663 : 810C 8202 8904 8202 	dc.b	dKick, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C
            C166B : 8904 8B0C         
(1)  175/   C166F : 8206 82             	dc.b	dSnare, $06, dSnare
(1)  176/   C1672 :                     
(1)  177/   C1672 :                     Boss_Loop01:
(1)  178/   C1672 : 810C 8206 82        	dc.b	dKick, $0C, dSnare, $06, dSnare
(1)  179/   C1677 : (MACRO)             	smpsLoop            $00, $05, Boss_Loop01
(1)  179/   C1677 : F7                          dc.b    $F7
(1)  179/   C1678 : 0005                        dc.b    $00,$05
(1)  179/   C167A : 7296                                dc.w    z80_ptr(BOSS_LOOP01)
(1)  180/   C167C : 810C 8202 8904 8202 	dc.b	dKick, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C
            C1684 : 8904 8B0C         
(1)  181/   C1688 : 8202 8904 8202 8904 	dc.b	dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C, dSnare, $06
            C1690 : 8B0C 8206         
(1)  182/   C1694 : 82                  	dc.b	dSnare
(1)  183/   C1695 : (MACRO)             	smpsLoop            $01, $03, Boss_Loop00
(1)  183/   C1695 : F7                          dc.b    $F7
(1)  183/   C1696 : 0103                        dc.b    $01,$03
(1)  183/   C1698 : 5996                                dc.w    z80_ptr(BOSS_LOOP00)
(1)  184/   C169A :                     
(1)  185/   C169A :                     Boss_Loop02:
(1)  186/   C169A : 810C 8206 82        	dc.b	dKick, $0C, dSnare, $06, dSnare
(1)  187/   C169F : (MACRO)             	smpsLoop            $00, $06, Boss_Loop02
(1)  187/   C169F : F7                          dc.b    $F7
(1)  187/   C16A0 : 0006                        dc.b    $00,$06
(1)  187/   C16A2 : 9A96                                dc.w    z80_ptr(BOSS_LOOP02)
(1)  188/   C16A4 : 810C 8202 8904 8202 	dc.b	dKick, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C
            C16AC : 8904 8B0C         
(1)  189/   C16B0 : 8206 82             	dc.b	dSnare, $06, dSnare
(1)  190/   C16B3 :                     
(1)  191/   C16B3 :                     Boss_Loop03:
(1)  192/   C16B3 : 810C 8206 82        	dc.b	dKick, $0C, dSnare, $06, dSnare
(1)  193/   C16B8 : (MACRO)             	smpsLoop            $00, $03, Boss_Loop03
(1)  193/   C16B8 : F7                          dc.b    $F7
(1)  193/   C16B9 : 0003                        dc.b    $00,$03
(1)  193/   C16BB : B396                                dc.w    z80_ptr(BOSS_LOOP03)
(1)  194/   C16BD :                     
(1)  195/   C16BD :                     Boss_Loop04:
(1)  196/   C16BD : 8B0C 8202 8904 8202 	dc.b	dVLowTimpani, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04
            C16C5 : 8904               
(1)  197/   C16C7 : (MACRO)             	smpsLoop            $00, $04, Boss_Loop04
(1)  197/   C16C7 : F7                          dc.b    $F7
(1)  197/   C16C8 : 0004                        dc.b    $00,$04
(1)  197/   C16CA : BD96                                dc.w    z80_ptr(BOSS_LOOP04)
(1)  198/   C16CC : (MACRO)             	smpsJump            Boss_DAC
(1)  198/   C16CC : F6                          dc.b    $F6
(1)  198/   C16CD : 3D96                                dc.w    z80_ptr(BOSS_DAC)
(1)  199/   C16CF :                     
(1)  200/   C16CF :                     Boss_Voices:
(1)  201/   C16CF :                     ;	Voice $00
(1)  202/   C16CF :                     ;	$20
(1)  203/   C16CF :                     ;	$66, $65, $60, $61, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(1)  204/   C16CF :                     ;	$07, $06, $06, $08, 	$29, $19, $19, $F9, 	$1C, $3A, $16, $00
(1)  205/   C16CF : (MACRO)             	smpsVcAlgorithm     $00
(1)  205/   C16CF : =$0                 vcAlgorithm set $00
(1)  206/   C16CF : (MACRO)             	smpsVcFeedback      $04
(1)  206/   C16CF : =$4                 vcFeedback set $04
(1)  207/   C16CF : (MACRO)             	smpsVcUnusedBits    $00
(1)  207/   C16CF : =$0                 vcUnusedBits set $00
(1)  207/   C16CF : =$0                 vcD1R1Unk set 0
(1)  207/   C16CF : =$0                 vcD1R2Unk set 0
(1)  207/   C16CF : =$0                 vcD1R3Unk set 0
(1)  207/   C16CF : =$0                 vcD1R4Unk set 0
(1)  208/   C16CF : (MACRO)             	smpsVcDetune        $06, $06, $06, $06
(1)  208/   C16CF : =$6                 vcDT1 set $06
(1)  208/   C16CF : =$6                 vcDT2 set $06
(1)  208/   C16CF : =$6                 vcDT3 set $06
(1)  208/   C16CF : =$6                 vcDT4 set $06
(1)  209/   C16CF : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(1)  209/   C16CF : =$1                 vcCF1 set $01
(1)  209/   C16CF : =$0                 vcCF2 set $00
(1)  209/   C16CF : =$5                 vcCF3 set $05
(1)  209/   C16CF : =$6                 vcCF4 set $06
(1)  210/   C16CF : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1)  210/   C16CF : =$2                 vcRS1 set $02
(1)  210/   C16CF : =$2                 vcRS2 set $02
(1)  210/   C16CF : =$3                 vcRS3 set $03
(1)  210/   C16CF : =$3                 vcRS4 set $03
(1)  211/   C16CF : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  211/   C16CF : =$1F                vcAR1 set $1F
(1)  211/   C16CF : =$1F                vcAR2 set $1F
(1)  211/   C16CF : =$1F                vcAR3 set $1F
(1)  211/   C16CF : =$1F                vcAR4 set $1F
(1)  212/   C16CF : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  212/   C16CF : =$0                 vcAM1 set $00<<5
(1)  212/   C16CF : =$0                 vcAM2 set $00<<5
(1)  212/   C16CF : =$0                 vcAM3 set $00<<5
(1)  212/   C16CF : =$0                 vcAM4 set $00<<5
(1)  213/   C16CF : (MACRO)             	smpsVcDecayRate1    $06, $09, $06, $07
(1)  213/   C16CF : =$6                 vcD1R1 set $06
(1)  213/   C16CF : =$9                 vcD1R2 set $09
(1)  213/   C16CF : =$6                 vcD1R3 set $06
(1)  213/   C16CF : =$7                 vcD1R4 set $07
(1)  214/   C16CF : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1)  214/   C16CF : =$8                 vcD2R1 set $08
(1)  214/   C16CF : =$6                 vcD2R2 set $06
(1)  214/   C16CF : =$6                 vcD2R3 set $06
(1)  214/   C16CF : =$7                 vcD2R4 set $07
(1)  215/   C16CF : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1)  215/   C16CF : =$F                 vcDL1 set $0F
(1)  215/   C16CF : =$1                 vcDL2 set $01
(1)  215/   C16CF : =$1                 vcDL3 set $01
(1)  215/   C16CF : =$2                 vcDL4 set $02
(1)  216/   C16CF : (MACRO)             	smpsVcReleaseRate   $09, $09, $09, $09
(1)  216/   C16CF : =$9                 vcRR1 set $09
(1)  216/   C16CF : =$9                 vcRR2 set $09
(1)  216/   C16CF : =$9                 vcRR3 set $09
(1)  216/   C16CF : =$9                 vcRR4 set $09
(1)  217/   C16CF : (MACRO)             	smpsVcTotalLevel    $00, $16, $3A, $1C
(1)  217/   C16CF : =$0                 vcTL1 set $00
(1)  217/   C16CF : =$16                vcTL2 set $16
(1)  217/   C16CF : =$3A                vcTL3 set $3A
(1)  217/   C16CF : =$1C                vcTL4 set $1C
(1)  217/   C16CF : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  217/   C16D0 :                     ;   0     1     2     3     4     5     6     7
(1)  217/   C16D0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  217/   C16D0 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  217/   C16D0 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  217/   C16D0 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  217/   C16D0 : =$80                vcTLMask1 set $80
(1)  217/   C16D0 :                     
(1)  217/   C16D0 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  217/   C16D0 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  217/   C16D0 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  217/   C16D0 : =$80                vcTLMask1 set $80
(1)  217/   C16D0 : =$0                 vcTL1 set vcTL1&$7F
(1)  217/   C16D0 : =$16                vcTL2 set vcTL2&$7F
(1)  217/   C16D0 : =$3A                vcTL3 set vcTL3&$7F
(1)  217/   C16D0 : =$1C                vcTL4 set vcTL4&$7F
(1)  217/   C16D0 :                     
(1)  217/   C16D0 : 6665 6061                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  217/   C16D4 : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  217/   C16D8 : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  217/   C16DC : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  217/   C16E0 : 2919 19F9                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  217/   C16E4 : 1C3A 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  218/   C16E8 :                     
(1)  219/   C16E8 :                     ;	Voice $01
(1)  220/   C16E8 :                     ;	$3A
(1)  221/   C16E8 :                     ;	$31, $01, $01, $71, 	$8F, $8F, $4F, $4D, 	$09, $09, $00, $03
(1)  222/   C16E8 :                     ;	$00, $00, $00, $00, 	$15, $F5, $05, $0A, 	$19, $1F, $19, $01
(1)  223/   C16E8 : (MACRO)             	smpsVcAlgorithm     $02
(1)  223/   C16E8 : =$2                 vcAlgorithm set $02
(1)  224/   C16E8 : (MACRO)             	smpsVcFeedback      $07
(1)  224/   C16E8 : =$7                 vcFeedback set $07
(1)  225/   C16E8 : (MACRO)             	smpsVcUnusedBits    $00
(1)  225/   C16E8 : =$0                 vcUnusedBits set $00
(1)  225/   C16E8 : =$0                 vcD1R1Unk set 0
(1)  225/   C16E8 : =$0                 vcD1R2Unk set 0
(1)  225/   C16E8 : =$0                 vcD1R3Unk set 0
(1)  225/   C16E8 : =$0                 vcD1R4Unk set 0
(1)  226/   C16E8 : (MACRO)             	smpsVcDetune        $07, $00, $00, $03
(1)  226/   C16E8 : =$7                 vcDT1 set $07
(1)  226/   C16E8 : =$0                 vcDT2 set $00
(1)  226/   C16E8 : =$0                 vcDT3 set $00
(1)  226/   C16E8 : =$3                 vcDT4 set $03
(1)  227/   C16E8 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  227/   C16E8 : =$1                 vcCF1 set $01
(1)  227/   C16E8 : =$1                 vcCF2 set $01
(1)  227/   C16E8 : =$1                 vcCF3 set $01
(1)  227/   C16E8 : =$1                 vcCF4 set $01
(1)  228/   C16E8 : (MACRO)             	smpsVcRateScale     $01, $01, $02, $02
(1)  228/   C16E8 : =$1                 vcRS1 set $01
(1)  228/   C16E8 : =$1                 vcRS2 set $01
(1)  228/   C16E8 : =$2                 vcRS3 set $02
(1)  228/   C16E8 : =$2                 vcRS4 set $02
(1)  229/   C16E8 : (MACRO)             	smpsVcAttackRate    $0D, $0F, $0F, $0F
(1)  229/   C16E8 : =$D                 vcAR1 set $0D
(1)  229/   C16E8 : =$F                 vcAR2 set $0F
(1)  229/   C16E8 : =$F                 vcAR3 set $0F
(1)  229/   C16E8 : =$F                 vcAR4 set $0F
(1)  230/   C16E8 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  230/   C16E8 : =$0                 vcAM1 set $00<<5
(1)  230/   C16E8 : =$0                 vcAM2 set $00<<5
(1)  230/   C16E8 : =$0                 vcAM3 set $00<<5
(1)  230/   C16E8 : =$0                 vcAM4 set $00<<5
(1)  231/   C16E8 : (MACRO)             	smpsVcDecayRate1    $03, $00, $09, $09
(1)  231/   C16E8 : =$3                 vcD1R1 set $03
(1)  231/   C16E8 : =$0                 vcD1R2 set $00
(1)  231/   C16E8 : =$9                 vcD1R3 set $09
(1)  231/   C16E8 : =$9                 vcD1R4 set $09
(1)  232/   C16E8 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  232/   C16E8 : =$0                 vcD2R1 set $00
(1)  232/   C16E8 : =$0                 vcD2R2 set $00
(1)  232/   C16E8 : =$0                 vcD2R3 set $00
(1)  232/   C16E8 : =$0                 vcD2R4 set $00
(1)  233/   C16E8 : (MACRO)             	smpsVcDecayLevel    $00, $00, $0F, $01
(1)  233/   C16E8 : =$0                 vcDL1 set $00
(1)  233/   C16E8 : =$0                 vcDL2 set $00
(1)  233/   C16E8 : =$F                 vcDL3 set $0F
(1)  233/   C16E8 : =$1                 vcDL4 set $01
(1)  234/   C16E8 : (MACRO)             	smpsVcReleaseRate   $0A, $05, $05, $05
(1)  234/   C16E8 : =$A                 vcRR1 set $0A
(1)  234/   C16E8 : =$5                 vcRR2 set $05
(1)  234/   C16E8 : =$5                 vcRR3 set $05
(1)  234/   C16E8 : =$5                 vcRR4 set $05
(1)  235/   C16E8 : (MACRO)             	smpsVcTotalLevel    $01, $19, $1F, $19
(1)  235/   C16E8 : =$1                 vcTL1 set $01
(1)  235/   C16E8 : =$19                vcTL2 set $19
(1)  235/   C16E8 : =$1F                vcTL3 set $1F
(1)  235/   C16E8 : =$19                vcTL4 set $19
(1)  235/   C16E8 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  235/   C16E9 :                     ;   0     1     2     3     4     5     6     7
(1)  235/   C16E9 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  235/   C16E9 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  235/   C16E9 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  235/   C16E9 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  235/   C16E9 : =$80                vcTLMask1 set $80
(1)  235/   C16E9 :                     
(1)  235/   C16E9 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  235/   C16E9 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  235/   C16E9 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  235/   C16E9 : =$80                vcTLMask1 set $80
(1)  235/   C16E9 : =$1                 vcTL1 set vcTL1&$7F
(1)  235/   C16E9 : =$19                vcTL2 set vcTL2&$7F
(1)  235/   C16E9 : =$1F                vcTL3 set vcTL3&$7F
(1)  235/   C16E9 : =$19                vcTL4 set vcTL4&$7F
(1)  235/   C16E9 :                     
(1)  235/   C16E9 : 3101 0171                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  235/   C16ED : 8F8F 4F4D                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  235/   C16F1 : 0909 0003                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  235/   C16F5 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  235/   C16F9 : 15F5 050A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  235/   C16FD : 191F 1981                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  236/   C1701 :                     
(1)  237/   C1701 :                     ;	Voice $02
(1)  238/   C1701 :                     ;	$3A
(1)  239/   C1701 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  240/   C1701 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $86
(1)  241/   C1701 : (MACRO)             	smpsVcAlgorithm     $02
(1)  241/   C1701 : =$2                 vcAlgorithm set $02
(1)  242/   C1701 : (MACRO)             	smpsVcFeedback      $07
(1)  242/   C1701 : =$7                 vcFeedback set $07
(1)  243/   C1701 : (MACRO)             	smpsVcUnusedBits    $00
(1)  243/   C1701 : =$0                 vcUnusedBits set $00
(1)  243/   C1701 : =$0                 vcD1R1Unk set 0
(1)  243/   C1701 : =$0                 vcD1R2Unk set 0
(1)  243/   C1701 : =$0                 vcD1R3Unk set 0
(1)  243/   C1701 : =$0                 vcD1R4Unk set 0
(1)  244/   C1701 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  244/   C1701 : =$0                 vcDT1 set $00
(1)  244/   C1701 : =$0                 vcDT2 set $00
(1)  244/   C1701 : =$0                 vcDT3 set $00
(1)  244/   C1701 : =$0                 vcDT4 set $00
(1)  245/   C1701 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  245/   C1701 : =$1                 vcCF1 set $01
(1)  245/   C1701 : =$1                 vcCF2 set $01
(1)  245/   C1701 : =$7                 vcCF3 set $07
(1)  245/   C1701 : =$1                 vcCF4 set $01
(1)  246/   C1701 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  246/   C1701 : =$1                 vcRS1 set $01
(1)  246/   C1701 : =$2                 vcRS2 set $02
(1)  246/   C1701 : =$2                 vcRS3 set $02
(1)  246/   C1701 : =$2                 vcRS4 set $02
(1)  247/   C1701 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  247/   C1701 : =$13                vcAR1 set $13
(1)  247/   C1701 : =$D                 vcAR2 set $0D
(1)  247/   C1701 : =$E                 vcAR3 set $0E
(1)  247/   C1701 : =$E                 vcAR4 set $0E
(1)  248/   C1701 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  248/   C1701 : =$0                 vcAM1 set $00<<5
(1)  248/   C1701 : =$0                 vcAM2 set $00<<5
(1)  248/   C1701 : =$0                 vcAM3 set $00<<5
(1)  248/   C1701 : =$0                 vcAM4 set $00<<5
(1)  249/   C1701 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  249/   C1701 : =$3                 vcD1R1 set $03
(1)  249/   C1701 : =$E                 vcD1R2 set $0E
(1)  249/   C1701 : =$E                 vcD1R3 set $0E
(1)  249/   C1701 : =$E                 vcD1R4 set $0E
(1)  250/   C1701 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  250/   C1701 : =$0                 vcD2R1 set $00
(1)  250/   C1701 : =$0                 vcD2R2 set $00
(1)  250/   C1701 : =$0                 vcD2R3 set $00
(1)  250/   C1701 : =$0                 vcD2R4 set $00
(1)  251/   C1701 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  251/   C1701 : =$0                 vcDL1 set $00
(1)  251/   C1701 : =$1                 vcDL2 set $01
(1)  251/   C1701 : =$F                 vcDL3 set $0F
(1)  251/   C1701 : =$1                 vcDL4 set $01
(1)  252/   C1701 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  252/   C1701 : =$F                 vcRR1 set $0F
(1)  252/   C1701 : =$F                 vcRR2 set $0F
(1)  252/   C1701 : =$F                 vcRR3 set $0F
(1)  252/   C1701 : =$F                 vcRR4 set $0F
(1)  253/   C1701 : (MACRO)             	smpsVcTotalLevel    $86, $27, $28, $17
(1)  253/   C1701 : =$86                vcTL1 set $86
(1)  253/   C1701 : =$27                vcTL2 set $27
(1)  253/   C1701 : =$28                vcTL3 set $28
(1)  253/   C1701 : =$17                vcTL4 set $17
(1)  253/   C1701 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  253/   C1702 :                     ;   0     1     2     3     4     5     6     7
(1)  253/   C1702 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  253/   C1702 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  253/   C1702 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  253/   C1702 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  253/   C1702 : =$80                vcTLMask1 set $80
(1)  253/   C1702 :                     
(1)  253/   C1702 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  253/   C1702 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  253/   C1702 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  253/   C1702 : =$80                vcTLMask1 set $80
(1)  253/   C1702 : =$6                 vcTL1 set vcTL1&$7F
(1)  253/   C1702 : =$27                vcTL2 set vcTL2&$7F
(1)  253/   C1702 : =$28                vcTL3 set vcTL3&$7F
(1)  253/   C1702 : =$17                vcTL4 set vcTL4&$7F
(1)  253/   C1702 :                     
(1)  253/   C1702 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  253/   C1706 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  253/   C170A : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  253/   C170E : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  253/   C1712 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  253/   C1716 : 1728 2786                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  254/   C171A :                     
(1)  255/   C171A :                     ;	Voice $03
(1)  256/   C171A :                     ;	$3A
(1)  257/   C171A :                     ;	$51, $07, $51, $02, 	$0F, $0B, $0F, $0F, 	$1F, $1F, $1F, $0F
(1)  258/   C171A :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$1C, $28, $22, $81
(1)  259/   C171A : (MACRO)             	smpsVcAlgorithm     $02
(1)  259/   C171A : =$2                 vcAlgorithm set $02
(1)  260/   C171A : (MACRO)             	smpsVcFeedback      $07
(1)  260/   C171A : =$7                 vcFeedback set $07
(1)  261/   C171A : (MACRO)             	smpsVcUnusedBits    $00
(1)  261/   C171A : =$0                 vcUnusedBits set $00
(1)  261/   C171A : =$0                 vcD1R1Unk set 0
(1)  261/   C171A : =$0                 vcD1R2Unk set 0
(1)  261/   C171A : =$0                 vcD1R3Unk set 0
(1)  261/   C171A : =$0                 vcD1R4Unk set 0
(1)  262/   C171A : (MACRO)             	smpsVcDetune        $00, $05, $00, $05
(1)  262/   C171A : =$0                 vcDT1 set $00
(1)  262/   C171A : =$5                 vcDT2 set $05
(1)  262/   C171A : =$0                 vcDT3 set $00
(1)  262/   C171A : =$5                 vcDT4 set $05
(1)  263/   C171A : (MACRO)             	smpsVcCoarseFreq    $02, $01, $07, $01
(1)  263/   C171A : =$2                 vcCF1 set $02
(1)  263/   C171A : =$1                 vcCF2 set $01
(1)  263/   C171A : =$7                 vcCF3 set $07
(1)  263/   C171A : =$1                 vcCF4 set $01
(1)  264/   C171A : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  264/   C171A : =$0                 vcRS1 set $00
(1)  264/   C171A : =$0                 vcRS2 set $00
(1)  264/   C171A : =$0                 vcRS3 set $00
(1)  264/   C171A : =$0                 vcRS4 set $00
(1)  265/   C171A : (MACRO)             	smpsVcAttackRate    $0F, $0F, $0B, $0F
(1)  265/   C171A : =$F                 vcAR1 set $0F
(1)  265/   C171A : =$F                 vcAR2 set $0F
(1)  265/   C171A : =$B                 vcAR3 set $0B
(1)  265/   C171A : =$F                 vcAR4 set $0F
(1)  266/   C171A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  266/   C171A : =$0                 vcAM1 set $00<<5
(1)  266/   C171A : =$0                 vcAM2 set $00<<5
(1)  266/   C171A : =$0                 vcAM3 set $00<<5
(1)  266/   C171A : =$0                 vcAM4 set $00<<5
(1)  267/   C171A : (MACRO)             	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1)  267/   C171A : =$F                 vcD1R1 set $0F
(1)  267/   C171A : =$1F                vcD1R2 set $1F
(1)  267/   C171A : =$1F                vcD1R3 set $1F
(1)  267/   C171A : =$1F                vcD1R4 set $1F
(1)  268/   C171A : (MACRO)             	smpsVcDecayRate2    $02, $00, $00, $00
(1)  268/   C171A : =$2                 vcD2R1 set $02
(1)  268/   C171A : =$0                 vcD2R2 set $00
(1)  268/   C171A : =$0                 vcD2R3 set $00
(1)  268/   C171A : =$0                 vcD2R4 set $00
(1)  269/   C171A : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1)  269/   C171A : =$1                 vcDL1 set $01
(1)  269/   C171A : =$0                 vcDL2 set $00
(1)  269/   C171A : =$0                 vcDL3 set $00
(1)  269/   C171A : =$0                 vcDL4 set $00
(1)  270/   C171A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  270/   C171A : =$F                 vcRR1 set $0F
(1)  270/   C171A : =$F                 vcRR2 set $0F
(1)  270/   C171A : =$F                 vcRR3 set $0F
(1)  270/   C171A : =$F                 vcRR4 set $0F
(1)  271/   C171A : (MACRO)             	smpsVcTotalLevel    $81, $22, $28, $1C
(1)  271/   C171A : =$81                vcTL1 set $81
(1)  271/   C171A : =$22                vcTL2 set $22
(1)  271/   C171A : =$28                vcTL3 set $28
(1)  271/   C171A : =$1C                vcTL4 set $1C
(1)  271/   C171A : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  271/   C171B :                     ;   0     1     2     3     4     5     6     7
(1)  271/   C171B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  271/   C171B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  271/   C171B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  271/   C171B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  271/   C171B : =$80                vcTLMask1 set $80
(1)  271/   C171B :                     
(1)  271/   C171B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  271/   C171B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  271/   C171B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  271/   C171B : =$80                vcTLMask1 set $80
(1)  271/   C171B : =$1                 vcTL1 set vcTL1&$7F
(1)  271/   C171B : =$22                vcTL2 set vcTL2&$7F
(1)  271/   C171B : =$28                vcTL3 set vcTL3&$7F
(1)  271/   C171B : =$1C                vcTL4 set vcTL4&$7F
(1)  271/   C171B :                     
(1)  271/   C171B : 5107 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  271/   C171F : 0F0B 0F0F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  271/   C1723 : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  271/   C1727 : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  271/   C172B : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  271/   C172F : 1C28 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  272/   C1733 :                     
(1)  273/   C1733 :                     
   56/   C1733 :                        Music_14:	include		"music-improved/94 - Final Boss.asm"
(1)    1/   C1733 :                     End_Boss_Header:
(1)    2/   C1733 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C1733 :                     
(1)    2/   C1733 : =$2                 SourceDriver set 2
(1)    2/   C1733 :                     
(1)    2/   C1733 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C1733 :                     
(1)    2/   C1733 : =$C1733             songStart set *
(1)    2/   C1733 :                     
(1)    2/   C1733 :                     
(1)    3/   C1733 : (MACRO)             	smpsHeaderVoice     End_Boss_Voices
(1)    3/   C1733 : 209A                                dc.w    z80_ptr(END_BOSS_VOICES)
(1)    4/   C1735 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C1735 : 0603                        dc.b    $06,$03
(1)    5/   C1737 : (MACRO)             	smpsHeaderTempo     $01, $A9
(1)    5/   C1737 : 01                          dc.b    $01
(1)    5/   C1738 :  (MACRO-2)                  convertMainTempoMod $A9
(1)    5/   C1738 : 57                                          dc.b    s2TempotoS3($A9)
(1)    6/   C1739 :                     
(1)    7/   C1739 : (MACRO)             	smpsHeaderDAC       End_Boss_DAC
(1)    7/   C1739 :  (MACRO-2)                  CheckedChannelPointer END_BOSS_DAC
(1)    7/   C1739 : 0F9A                                dc.w    z80_ptr(END_BOSS_DAC)
(1)    7/   C173B : 0000                                dc.w    $00
(1)    8/   C173D : (MACRO)             	smpsHeaderFM        End_Boss_FM1,	$F4, $0B
(1)    8/   C173D :  (MACRO-2)                  CheckedChannelPointer END_BOSS_FM1
(1)    8/   C173D : 6397                                dc.w    z80_ptr(END_BOSS_FM1)
(1)    8/   C173F : F40B                        dc.b    $F4,$0B
(1)    9/   C1741 : (MACRO)             	smpsHeaderFM        End_Boss_FM2,	$F4, $0B
(1)    9/   C1741 :  (MACRO-2)                  CheckedChannelPointer END_BOSS_FM2
(1)    9/   C1741 : 0E98                                dc.w    z80_ptr(END_BOSS_FM2)
(1)    9/   C1743 : F40B                        dc.b    $F4,$0B
(1)   10/   C1745 : (MACRO)             	smpsHeaderFM        End_Boss_FM3,	$E8, $0E
(1)   10/   C1745 :  (MACRO-2)                  CheckedChannelPointer END_BOSS_FM3
(1)   10/   C1745 : B398                                dc.w    z80_ptr(END_BOSS_FM3)
(1)   10/   C1747 : E80E                        dc.b    $E8,$0E
(1)   11/   C1749 : (MACRO)             	smpsHeaderFM        End_Boss_FM4,	$F4, $14
(1)   11/   C1749 :  (MACRO-2)                  CheckedChannelPointer END_BOSS_FM4
(1)   11/   C1749 : 2E99                                dc.w    z80_ptr(END_BOSS_FM4)
(1)   11/   C174B : F414                        dc.b    $F4,$14
(1)   12/   C174D : (MACRO)             	smpsHeaderFM        End_Boss_FM5,	$F4, $14
(1)   12/   C174D :  (MACRO-2)                  CheckedChannelPointer END_BOSS_FM5
(1)   12/   C174D : 8199                                dc.w    z80_ptr(END_BOSS_FM5)
(1)   12/   C174F : F414                        dc.b    $F4,$14
(1)   13/   C1751 : (MACRO)             	smpsHeaderPSG       End_Boss_PSG1,	$D0, $06, $00, $00
(1)   13/   C1751 :  (MACRO-2)                  CheckedChannelPointer END_BOSS_PSG1
(1)   13/   C1751 : B399                                dc.w    z80_ptr(END_BOSS_PSG1)
(1)   13/   C1753 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   C1753 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   C1754 : 0600 00                     dc.b    $06,$00,$00
(1)   14/   C1757 : (MACRO)             	smpsHeaderPSG       End_Boss_PSG2,	$F4, $05, $00, $00
(1)   14/   C1757 :  (MACRO-2)                  CheckedChannelPointer END_BOSS_PSG2
(1)   14/   C1757 : E199                                dc.w    z80_ptr(END_BOSS_PSG2)
(1)   14/   C1759 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   14/   C1759 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)   14/   C175A : 0500 00                     dc.b    $05,$00,$00
(1)   15/   C175D : (MACRO)             	smpsHeaderPSG       End_Boss_PSG3,	$FE, $03, $00, fTone_04
(1)   15/   C175D :  (MACRO-2)                  CheckedChannelPointer END_BOSS_PSG3
(1)   15/   C175D : 029A                                dc.w    z80_ptr(END_BOSS_PSG3)
(1)   15/   C175F :  (MACRO-2)                  PSGPitchConvert $FE
(1)   15/   C175F : 0A                                  dc.b    ($FE+psgdelta)&$FF
(1)   15/   C1760 : 0300 04                     dc.b    $03,$00,FTONE_04
(1)   16/   C1763 :                     
(1)   17/   C1763 :                     ; FM1 Data
(1)   18/   C1763 :                     End_Boss_FM1:
(1)   19/   C1763 : (MACRO)             	smpsSetvoice        $00
(1)   19/   C1763 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   C1763 : EF00                                dc.b    $EF,$00
(1)   20/   C1765 :                     
(1)   21/   C1765 :                     End_Boss_Loop07:
(1)   22/   C1765 : C70C C2             	dc.b	nBb5, $0C, nF5
(1)   23/   C1768 : (MACRO)             	smpsAlterVol        $05
(1)   23/   C1768 : E605                        dc.b    $E6,$05
(1)   24/   C176A : (MACRO)             	smpsLoop            $00, $04, End_Boss_Loop07
(1)   24/   C176A : F7                          dc.b    $F7
(1)   24/   C176B : 0004                        dc.b    $00,$04
(1)   24/   C176D : 6597                                dc.w    z80_ptr(END_BOSS_LOOP07)
(1)   25/   C176F : (MACRO)             	smpsAlterVol        $EC
(1)   25/   C176F : E6EC                        dc.b    $E6,$EC
(1)   26/   C1771 : (MACRO)             	smpsLoop            $01, $02, End_Boss_Loop07
(1)   26/   C1771 : F7                          dc.b    $F7
(1)   26/   C1772 : 0102                        dc.b    $01,$02
(1)   26/   C1774 : 6597                                dc.w    z80_ptr(END_BOSS_LOOP07)
(1)   27/   C1776 : (MACRO)             	smpsPan             panLeft, $00
(1)   27/   C1776 : =$0                 panNone set $00
(1)   27/   C1776 : =$40                panRight set $40
(1)   27/   C1776 : =$80                panLeft set $80
(1)   27/   C1776 : =$C0                panCentre set $C0
(1)   27/   C1776 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   27/   C1776 : E080                        dc.b $E0,PANLEFT+$00
(1)   28/   C1778 : (MACRO)             	smpsAlterVol        $FE
(1)   28/   C1778 : E6FE                        dc.b    $E6,$FE
(1)   29/   C177A :                     
(1)   30/   C177A :                     End_Boss_Loop08:
(1)   31/   C177A : (MACRO)             	smpsCall            End_Boss_Call08
(1)   31/   C177A : F8                          dc.b    $F8
(1)   31/   C177B : A097                                dc.w    z80_ptr(END_BOSS_CALL08)
(1)   32/   C177D : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop08
(1)   32/   C177D : F7                          dc.b    $F7
(1)   32/   C177E : 0002                        dc.b    $00,$02
(1)   32/   C1780 : 7A97                                dc.w    z80_ptr(END_BOSS_LOOP08)
(1)   33/   C1782 : (MACRO)             	smpsAlterVol        $02
(1)   33/   C1782 : E602                        dc.b    $E6,$02
(1)   34/   C1784 : (MACRO)             	smpsPan             panCenter, $00
(1)   34/   C1784 : =$0                 panNone set $00
(1)   34/   C1784 : =$40                panRight set $40
(1)   34/   C1784 : =$80                panLeft set $80
(1)   34/   C1784 : =$C0                panCentre set $C0
(1)   34/   C1784 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   34/   C1784 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   35/   C1786 : (MACRO)             	smpsCall            End_Boss_Call09
(1)   35/   C1786 : F8                          dc.b    $F8
(1)   35/   C1787 : B297                                dc.w    z80_ptr(END_BOSS_CALL09)
(1)   36/   C1789 : (MACRO)             	smpsPan             panLeft, $00
(1)   36/   C1789 : =$0                 panNone set $00
(1)   36/   C1789 : =$40                panRight set $40
(1)   36/   C1789 : =$80                panLeft set $80
(1)   36/   C1789 : =$C0                panCentre set $C0
(1)   36/   C1789 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   36/   C1789 : E080                        dc.b $E0,PANLEFT+$00
(1)   37/   C178B :                     
(1)   38/   C178B :                     End_Boss_Loop09:
(1)   39/   C178B : (MACRO)             	smpsCall            End_Boss_Call0A
(1)   39/   C178B : F8                          dc.b    $F8
(1)   39/   C178C : EE97                                dc.w    z80_ptr(END_BOSS_CALL0A)
(1)   40/   C178E : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop09
(1)   40/   C178E : F7                          dc.b    $F7
(1)   40/   C178F : 0002                        dc.b    $00,$02
(1)   40/   C1791 : 8B97                                dc.w    z80_ptr(END_BOSS_LOOP09)
(1)   41/   C1793 : (MACRO)             	smpsCall            End_Boss_Call0B
(1)   41/   C1793 : F8                          dc.b    $F8
(1)   41/   C1794 : FF97                                dc.w    z80_ptr(END_BOSS_CALL0B)
(1)   42/   C1796 : (MACRO)             	smpsLoop            $01, $02, End_Boss_Loop09
(1)   42/   C1796 : F7                          dc.b    $F7
(1)   42/   C1797 : 0102                        dc.b    $01,$02
(1)   42/   C1799 : 8B97                                dc.w    z80_ptr(END_BOSS_LOOP09)
(1)   43/   C179B : (MACRO)             	smpsPan             panCenter, $00
(1)   43/   C179B : =$0                 panNone set $00
(1)   43/   C179B : =$40                panRight set $40
(1)   43/   C179B : =$80                panLeft set $80
(1)   43/   C179B : =$C0                panCentre set $C0
(1)   43/   C179B : =$C0                panCenter set $C0 ; silly Americans :U
(1)   43/   C179B : E0C0                        dc.b $E0,PANCENTER+$00
(1)   44/   C179D : (MACRO)             	smpsJump            End_Boss_Loop07
(1)   44/   C179D : F6                          dc.b    $F6
(1)   44/   C179E : 6597                                dc.w    z80_ptr(END_BOSS_LOOP07)
(1)   45/   C17A0 :                     
(1)   46/   C17A0 :                     End_Boss_Call08:
(1)   47/   C17A0 : 8060 8080 0CD0 06D2 	dc.b	nRst, $60, nRst, nRst, $0C, nG6, $06, nA6, nE6, $48, nRst, $0C
            C17A8 : CD48 800C         
(1)   48/   C17AC : D006 D1CD 48        	dc.b	nG6, $06, nAb6, nE6, $48
(1)   49/   C17B1 : (MACRO)             	smpsReturn
(1)   49/   C17B1 : F9                                  dc.b    $F9
(1)   50/   C17B2 :                     
(1)   51/   C17B2 :                     End_Boss_Call09:
(1)   52/   C17B2 : C906 C8C9 80C9 C8C9 	dc.b	nC6, $06, nB5, nC6, nRst, nC6, nB5, nC6, nRst, nD6, $12, $06
            C17BA : 80CB 1206         
(1)   53/   C17BE : 8018 CB06 C9CB 80CB 	dc.b	nRst, $18, nD6, $06, nC6, nD6, nRst, nD6, nC6, nD6, nRst, nE6
            C17C6 : C9CB 80CD         
(1)   54/   C17CA : 1206 8018 CD06 CBCD 	dc.b	$12, $06, nRst, $18, nE6, $06, nD6, nE6, nRst, nE6, nD6, nE6
            C17D2 : 80CD CBCD         
(1)   55/   C17D6 : 80CD 1206 8018 D224 	dc.b	nRst, nE6, $12, $06, nRst, $18, nA6, $24, $03, nRst, nAb6, $36
            C17DE : 0380 D136         
(1)   56/   C17E2 : 0680 D180 D180 D180 	dc.b	$06, nRst, nAb6, nRst, nAb6, nRst, nAb6, nRst, nAb6, nRst, $2A
            C17EA : D180 2A            
(1)   57/   C17ED : (MACRO)             	smpsReturn
(1)   57/   C17ED : F9                                  dc.b    $F9
(1)   58/   C17EE :                     
(1)   59/   C17EE :                     End_Boss_Call0A:
(1)   60/   C17EE : CD06 C980 CDC9 80CD 	dc.b	nE6, $06, nC6, nRst, nE6, nC6, nRst, nE6, nC6, nE6, nC6, nRst
            C17F6 : C9CD C980         
(1)   61/   C17FA : CDC9 8012           	dc.b	nE6, nC6, nRst, $12
(1)   62/   C17FE : (MACRO)             	smpsReturn
(1)   62/   C17FE : F9                                  dc.b    $F9
(1)   63/   C17FF :                     
(1)   64/   C17FF :                     End_Boss_Call0B:
(1)   65/   C17FF : 800C C606 C8C9 4880 	dc.b	nRst, $0C, nA5, $06, nB5, nC6, $48, nRst, $0C, nB5, $06, nC6
            C1807 : 0CC8 06C9         
(1)   66/   C180B : CB48                	dc.b	nD6, $48
(1)   67/   C180D : (MACRO)             	smpsReturn
(1)   67/   C180D : F9                                  dc.b    $F9
(1)   68/   C180E :                     
(1)   69/   C180E :                     ; FM2 Data
(1)   70/   C180E :                     End_Boss_FM2:
(1)   71/   C180E : (MACRO)             	smpsSetvoice        $00
(1)   71/   C180E :  (MACRO-2)                  smpsFMvoice $00
(1)   71/   C180E : EF00                                dc.b    $EF,$00
(1)   72/   C1810 :                     
(1)   73/   C1810 :                     End_Boss_Loop04:
(1)   74/   C1810 : C60C C1             	dc.b	nA5, $0C, nE5
(1)   75/   C1813 : (MACRO)             	smpsAlterVol        $05
(1)   75/   C1813 : E605                        dc.b    $E6,$05
(1)   76/   C1815 : (MACRO)             	smpsLoop            $00, $04, End_Boss_Loop04
(1)   76/   C1815 : F7                          dc.b    $F7
(1)   76/   C1816 : 0004                        dc.b    $00,$04
(1)   76/   C1818 : 1098                                dc.w    z80_ptr(END_BOSS_LOOP04)
(1)   77/   C181A : (MACRO)             	smpsAlterVol        $EC
(1)   77/   C181A : E6EC                        dc.b    $E6,$EC
(1)   78/   C181C : (MACRO)             	smpsLoop            $01, $02, End_Boss_Loop04
(1)   78/   C181C : F7                          dc.b    $F7
(1)   78/   C181D : 0102                        dc.b    $01,$02
(1)   78/   C181F : 1098                                dc.w    z80_ptr(END_BOSS_LOOP04)
(1)   79/   C1821 : (MACRO)             	smpsSetvoice        $02
(1)   79/   C1821 :  (MACRO-2)                  smpsFMvoice $02
(1)   79/   C1821 : EF02                                dc.b    $EF,$02
(1)   80/   C1823 : (MACRO)             	smpsPan             panLeft, $00
(1)   80/   C1823 : =$0                 panNone set $00
(1)   80/   C1823 : =$40                panRight set $40
(1)   80/   C1823 : =$80                panLeft set $80
(1)   80/   C1823 : =$C0                panCentre set $C0
(1)   80/   C1823 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   80/   C1823 : E080                        dc.b $E0,PANLEFT+$00
(1)   81/   C1825 : (MACRO)             	smpsAlterNote       $03
(1)   81/   C1825 :  (MACRO-2)                  smpsDetune      $03
(1)   81/   C1825 : E103                        dc.b    $E1,$03
(1)   82/   C1827 : (MACRO)             	smpsAlterVol        $08
(1)   82/   C1827 : E608                        dc.b    $E6,$08
(1)   83/   C1829 :                     
(1)   84/   C1829 :                     End_Boss_Loop05:
(1)   85/   C1829 : (MACRO)             	smpsCall            End_Boss_Call03
(1)   85/   C1829 : F8                          dc.b    $F8
(1)   85/   C182A : 6F99                                dc.w    z80_ptr(END_BOSS_CALL03)
(1)   86/   C182C : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop05
(1)   86/   C182C : F7                          dc.b    $F7
(1)   86/   C182D : 0002                        dc.b    $00,$02
(1)   86/   C182F : 2998                                dc.w    z80_ptr(END_BOSS_LOOP05)
(1)   87/   C1831 : (MACRO)             	smpsSetvoice        $00
(1)   87/   C1831 :  (MACRO-2)                  smpsFMvoice $00
(1)   87/   C1831 : EF00                                dc.b    $EF,$00
(1)   88/   C1833 : (MACRO)             	smpsAlterNote       $00
(1)   88/   C1833 :  (MACRO-2)                  smpsDetune      $00
(1)   88/   C1833 : E100                        dc.b    $E1,$00
(1)   89/   C1835 : (MACRO)             	smpsAlterVol        $F8
(1)   89/   C1835 : E6F8                        dc.b    $E6,$F8
(1)   90/   C1837 : (MACRO)             	smpsPan             panCenter, $00
(1)   90/   C1837 : =$0                 panNone set $00
(1)   90/   C1837 : =$40                panRight set $40
(1)   90/   C1837 : =$80                panLeft set $80
(1)   90/   C1837 : =$C0                panCentre set $C0
(1)   90/   C1837 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   90/   C1837 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   91/   C1839 : (MACRO)             	smpsCall            End_Boss_Call05
(1)   91/   C1839 : F8                          dc.b    $F8
(1)   91/   C183A : 7798                                dc.w    z80_ptr(END_BOSS_CALL05)
(1)   92/   C183C :                     
(1)   93/   C183C :                     End_Boss_Loop06:
(1)   94/   C183C : (MACRO)             	smpsCall            End_Boss_Call06
(1)   94/   C183C : F8                          dc.b    $F8
(1)   94/   C183D : 4F98                                dc.w    z80_ptr(END_BOSS_CALL06)
(1)   95/   C183F : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop06
(1)   95/   C183F : F7                          dc.b    $F7
(1)   95/   C1840 : 0002                        dc.b    $00,$02
(1)   95/   C1842 : 3C98                                dc.w    z80_ptr(END_BOSS_LOOP06)
(1)   96/   C1844 : (MACRO)             	smpsCall            End_Boss_Call07
(1)   96/   C1844 : F8                          dc.b    $F8
(1)   96/   C1845 : 6098                                dc.w    z80_ptr(END_BOSS_CALL07)
(1)   97/   C1847 : (MACRO)             	smpsLoop            $01, $02, End_Boss_Loop06
(1)   97/   C1847 : F7                          dc.b    $F7
(1)   97/   C1848 : 0102                        dc.b    $01,$02
(1)   97/   C184A : 3C98                                dc.w    z80_ptr(END_BOSS_LOOP06)
(1)   98/   C184C : (MACRO)             	smpsJump            End_Boss_Loop04
(1)   98/   C184C : F6                          dc.b    $F6
(1)   98/   C184D : 1098                                dc.w    z80_ptr(END_BOSS_LOOP04)
(1)   99/   C184F :                     
(1)  100/   C184F :                     End_Boss_Call06:
(1)  101/   C184F : C906 C680 C9C6 80C9 	dc.b	nC6, $06, nA5, nRst, nC6, nA5, nRst, nC6, nA5, nC6, nA5, nRst
            C1857 : C6C9 C680         
(1)  102/   C185B : C9C6 8012           	dc.b	nC6, nA5, nRst, $12
(1)  103/   C185F : (MACRO)             	smpsReturn
(1)  103/   C185F : F9                                  dc.b    $F9
(1)  104/   C1860 :                     
(1)  105/   C1860 :                     End_Boss_Call07:
(1)  106/   C1860 : (MACRO)             	smpsAlterPitch      $F4
(1)  106/   C1860 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  106/   C1860 : FBF4                                dc.b    $FB,$F4
(1)  107/   C1862 : (MACRO)             	smpsAlterVol        $03
(1)  107/   C1862 : E603                        dc.b    $E6,$03
(1)  108/   C1864 : 800C C606 C8C9 4880 	dc.b	nRst, $0C, nA5, $06, nB5, nC6, $48, nRst, $0C, nB5, $06, nC6
            C186C : 0CC8 06C9         
(1)  109/   C1870 : CB48                	dc.b	nD6, $48
(1)  110/   C1872 : (MACRO)             	smpsAlterPitch      $0C
(1)  110/   C1872 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  110/   C1872 : FB0C                                dc.b    $FB,$0C
(1)  111/   C1874 : (MACRO)             	smpsAlterVol        $FD
(1)  111/   C1874 : E6FD                        dc.b    $E6,$FD
(1)  112/   C1876 : (MACRO)             	smpsReturn
(1)  112/   C1876 : F9                                  dc.b    $F9
(1)  113/   C1877 :                     
(1)  114/   C1877 :                     End_Boss_Call05:
(1)  115/   C1877 : C606 C4C6 80C6 C4C6 	dc.b	nA5, $06, nG5, nA5, nRst, nA5, nG5, nA5, nRst, nB5, $12, $06
            C187F : 80C8 1206         
(1)  116/   C1883 : 8018 C806 C6C8 80C8 	dc.b	nRst, $18, nB5, $06, nA5, nB5, nRst, nB5, nA5, nB5, nRst, nC6
            C188B : C6C8 80C9         
(1)  117/   C188F : 1206 8018 C906 C8C9 	dc.b	$12, $06, nRst, $18, nC6, $06, nB5, nC6, nRst, nC6, nB5, nC6
            C1897 : 80C9 C8C9         
(1)  118/   C189B : 80C9 1206 8018 CD24 	dc.b	nRst, nC6, $12, $06, nRst, $18, nE6, $24, $03, nRst, nE6, $36
            C18A3 : 0380 CD36         
(1)  119/   C18A7 : 0680 CD80 CD80 CD80 	dc.b	$06, nRst, nE6, nRst, nE6, nRst, nE6, nRst, nE6, nRst, $2A
            C18AF : CD80 2A            
(1)  120/   C18B2 : (MACRO)             	smpsReturn
(1)  120/   C18B2 : F9                                  dc.b    $F9
(1)  121/   C18B3 :                     
(1)  122/   C18B3 :                     ; FM3 Data
(1)  123/   C18B3 :                     End_Boss_FM3:
(1)  124/   C18B3 : (MACRO)             	smpsSetvoice        $01
(1)  124/   C18B3 :  (MACRO-2)                  smpsFMvoice $01
(1)  124/   C18B3 : EF01                                dc.b    $EF,$01
(1)  125/   C18B5 : (MACRO)             	smpsModSet          $13, $01, $03, $05
(1)  125/   C18B5 : F0                          dc.b    $F0
(1)  125/   C18B6 : 1401 0306                           dc.b    $13+1,$01,$03,(($05+1) * $01) & $FF
(1)  125/   C18BA :                             ;dc.b   $01,$03,$05
(1)  126/   C18BA :                     
(1)  127/   C18BA :                     End_Boss_Jump01:
(1)  128/   C18BA : 8060 80             	dc.b	nRst, $60, nRst
(1)  129/   C18BD :                     
(1)  130/   C18BD :                     End_Boss_Loop03:
(1)  131/   C18BD : (MACRO)             	smpsCall            End_Boss_Call00
(1)  131/   C18BD : F8                          dc.b    $F8
(1)  131/   C18BE : EB98                                dc.w    z80_ptr(END_BOSS_CALL00)
(1)  132/   C18C0 : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop03
(1)  132/   C18C0 : F7                          dc.b    $F7
(1)  132/   C18C1 : 0002                        dc.b    $00,$02
(1)  132/   C18C3 : BD98                                dc.w    z80_ptr(END_BOSS_LOOP03)
(1)  133/   C18C5 : (MACRO)             	smpsCall            End_Boss_Call01
(1)  133/   C18C5 : F8                          dc.b    $F8
(1)  133/   C18C6 : 0D99                                dc.w    z80_ptr(END_BOSS_CALL01)
(1)  134/   C18C8 : (MACRO)             	smpsCall            End_Boss_Call04
(1)  134/   C18C8 : F8                          dc.b    $F8
(1)  134/   C18C9 : DB98                                dc.w    z80_ptr(END_BOSS_CALL04)
(1)  135/   C18CB : B654 B806 BAB5 60   	dc.b	nF4, $54, nG4, $06, nA4, nE4, $60
(1)  136/   C18D2 : (MACRO)             	smpsCall            End_Boss_Call04
(1)  136/   C18D2 : F8                          dc.b    $F8
(1)  136/   C18D3 : DB98                                dc.w    z80_ptr(END_BOSS_CALL04)
(1)  137/   C18D5 : B660 B8             	dc.b	nF4, $60, nG4
(1)  138/   C18D8 : (MACRO)             	smpsJump            End_Boss_Jump01
(1)  138/   C18D8 : F6                          dc.b    $F6
(1)  138/   C18D9 : BA98                                dc.w    z80_ptr(END_BOSS_JUMP01)
(1)  139/   C18DB :                     
(1)  140/   C18DB :                     End_Boss_Call04:
(1)  141/   C18DB : BA18 B50C BAB9 18B5 	dc.b	nA4, $18, nE4, $0C, nA4, nAb4, $18, nE4, nG4, nA4, $0C, nG4
            C18E3 : B8BA 0CB8         
(1)  142/   C18E7 : B718 B3             	dc.b	nFs4, $18, nD4
(1)  143/   C18EA : (MACRO)             	smpsReturn
(1)  143/   C18EA : F9                                  dc.b    $F9
(1)  144/   C18EB :                     
(1)  145/   C18EB :                     End_Boss_Call00:
(1)  146/   C18EB : BA0C BDC1 BAB9 BDC1 	dc.b	nA4, $0C, nC5, nE5, nA4, nAb4, nC5, nE5, nAb4, nG4, nB4, nD5
            C18F3 : B9B8 BCBF         
(1)  147/   C18F7 : B8B7 BABD B7B6 BABD 	dc.b	nG4, nFs4, nA4, nC5, nFs4, nF4, nA4, nC5, nA4, nE5, nA4, nC5
            C18FF : BAC1 BABD         
(1)  148/   C1903 : B6B5 B9BC B9BF B9BC 	dc.b	nF4, nE4, nAb4, nB4, nAb4, nD5, nAb4, nB4, nE4
            C190B : B5               
(1)  149/   C190C : (MACRO)             	smpsReturn
(1)  149/   C190C : F9                                  dc.b    $F9
(1)  150/   C190D :                     
(1)  151/   C190D :                     End_Boss_Call01:
(1)  152/   C190D : B624 BD0C BC24 BA0C 	dc.b	nF4, $24, nC5, $0C, nB4, $24, nA4, $0C, nG4, $24, nD5, $0C
            C1915 : B824 BF0C         
(1)  153/   C1919 : BD24 06BF C124 062A 	dc.b	nC5, $24, $06, nD5, nE5, $24, $06, $2A, nC5, $06, nD5, nE5
            C1921 : BD06 BFC1         
(1)  154/   C1925 : 24C2 06C1 36E7 3080 	dc.b	$24, nF5, $06, nE5, $36, smpsNoAttack, $30, nRst
(1)  155/   C192D : (MACRO)             	smpsReturn
(1)  155/   C192D : F9                                  dc.b    $F9
(1)  156/   C192E :                     
(1)  157/   C192E :                     ; FM4 Data
(1)  158/   C192E :                     End_Boss_FM4:
(1)  159/   C192E : (MACRO)             	smpsSetvoice        $02
(1)  159/   C192E :  (MACRO-2)                  smpsFMvoice $02
(1)  159/   C192E : EF02                                dc.b    $EF,$02
(1)  160/   C1930 : (MACRO)             	smpsModSet          $12, $01, $05, $05
(1)  160/   C1930 : F0                          dc.b    $F0
(1)  160/   C1931 : 1301 0506                           dc.b    $12+1,$01,$05,(($05+1) * $01) & $FF
(1)  160/   C1935 :                             ;dc.b   $01,$05,$05
(1)  161/   C1935 :                     
(1)  162/   C1935 :                     End_Boss_Jump00:
(1)  163/   C1935 : 8060 80             	dc.b	nRst, $60, nRst
(1)  164/   C1938 :                     
(1)  165/   C1938 :                     End_Boss_Loop01:
(1)  166/   C1938 : (MACRO)             	smpsCall            End_Boss_Call03
(1)  166/   C1938 : F8                          dc.b    $F8
(1)  166/   C1939 : 6F99                                dc.w    z80_ptr(END_BOSS_CALL03)
(1)  167/   C193B : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop01
(1)  167/   C193B : F7                          dc.b    $F7
(1)  167/   C193C : 0002                        dc.b    $00,$02
(1)  167/   C193E : 3899                                dc.w    z80_ptr(END_BOSS_LOOP01)
(1)  168/   C1940 :                     
(1)  169/   C1940 :                     End_Boss_Loop02:
(1)  170/   C1940 : 8060                	dc.b	nRst, $60
(1)  171/   C1942 : (MACRO)             	smpsLoop            $00, $05, End_Boss_Loop02
(1)  171/   C1942 : F7                          dc.b    $F7
(1)  171/   C1943 : 0005                        dc.b    $00,$05
(1)  171/   C1945 : 4099                                dc.w    z80_ptr(END_BOSS_LOOP02)
(1)  172/   C1947 : (MACRO)             	smpsCall            End_Boss_Call02
(1)  172/   C1947 : F8                          dc.b    $F8
(1)  172/   C1948 : 5A99                                dc.w    z80_ptr(END_BOSS_CALL02)
(1)  173/   C194A : C954 CB06 C9C8 60   	dc.b	nC6, $54, nD6, $06, nC6, nB5, $60
(1)  174/   C1951 : (MACRO)             	smpsCall            End_Boss_Call02
(1)  174/   C1951 : F8                          dc.b    $F8
(1)  174/   C1952 : 5A99                                dc.w    z80_ptr(END_BOSS_CALL02)
(1)  175/   C1954 : C960 CB             	dc.b	nC6, $60, nD6
(1)  176/   C1957 : (MACRO)             	smpsJump            End_Boss_Jump00
(1)  176/   C1957 : F6                          dc.b    $F6
(1)  176/   C1958 : 3599                                dc.w    z80_ptr(END_BOSS_JUMP00)
(1)  177/   C195A :                     
(1)  178/   C195A :                     End_Boss_Call02:
(1)  179/   C195A : C624 C506 C6C8 24C6 	dc.b	nA5, $24, nAb5, $06, nA5, nB5, $24, nA5, $06, nB5, nC6, $24
            C1962 : 06C8 C924         
(1)  180/   C1966 : C806 C9CB 24C9 06CB 	dc.b	nB5, $06, nC6, nD6, $24, nC6, $06, nD6
(1)  181/   C196E : (MACRO)             	smpsReturn
(1)  181/   C196E : F9                                  dc.b    $F9
(1)  182/   C196F :                     
(1)  183/   C196F :                     End_Boss_Call03:
(1)  184/   C196F : C618 C9CB 24C8 0CC9 	dc.b	nA5, $18, nC6, nD6, $24, nB5, $0C, nC6, $24, nA5, $0C, nB5
            C1977 : 24C6 0CC8         
(1)  185/   C197B : 18C4 C660 80        	dc.b	$18, nG5, nA5, $60, nRst
(1)  186/   C1980 : (MACRO)             	smpsReturn
(1)  186/   C1980 : F9                                  dc.b    $F9
(1)  187/   C1981 :                     
(1)  188/   C1981 :                     ; FM5 Data
(1)  189/   C1981 :                     End_Boss_FM5:
(1)  190/   C1981 : (MACRO)             	smpsSetvoice        $01
(1)  190/   C1981 :  (MACRO-2)                  smpsFMvoice $01
(1)  190/   C1981 : EF01                                dc.b    $EF,$01
(1)  191/   C1983 : (MACRO)             	smpsAlterNote       $01
(1)  191/   C1983 :  (MACRO-2)                  smpsDetune      $01
(1)  191/   C1983 : E101                        dc.b    $E1,$01
(1)  192/   C1985 : (MACRO)             	smpsPan             panRight, $00
(1)  192/   C1985 : =$0                 panNone set $00
(1)  192/   C1985 : =$40                panRight set $40
(1)  192/   C1985 : =$80                panLeft set $80
(1)  192/   C1985 : =$C0                panCentre set $C0
(1)  192/   C1985 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  192/   C1985 : E040                        dc.b $E0,PANRIGHT+$00
(1)  193/   C1987 : (MACRO)             	smpsModSet          $13, $01, $03, $05
(1)  193/   C1987 : F0                          dc.b    $F0
(1)  193/   C1988 : 1401 0306                           dc.b    $13+1,$01,$03,(($05+1) * $01) & $FF
(1)  193/   C198C :                             ;dc.b   $01,$03,$05
(1)  194/   C198C : 8060 80             	dc.b	nRst, $60, nRst
(1)  195/   C198F :                     
(1)  196/   C198F :                     End_Boss_Loop00:
(1)  197/   C198F : (MACRO)             	smpsCall            End_Boss_Call00
(1)  197/   C198F : F8                          dc.b    $F8
(1)  197/   C1990 : EB98                                dc.w    z80_ptr(END_BOSS_CALL00)
(1)  198/   C1992 : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop00
(1)  198/   C1992 : F7                          dc.b    $F7
(1)  198/   C1993 : 0002                        dc.b    $00,$02
(1)  198/   C1995 : 8F99                                dc.w    z80_ptr(END_BOSS_LOOP00)
(1)  199/   C1997 : (MACRO)             	smpsCall            End_Boss_Call01
(1)  199/   C1997 : F8                          dc.b    $F8
(1)  199/   C1998 : 0D99                                dc.w    z80_ptr(END_BOSS_CALL01)
(1)  200/   C199A : (MACRO)             	smpsPan             panLeft, $00
(1)  200/   C199A : =$0                 panNone set $00
(1)  200/   C199A : =$40                panRight set $40
(1)  200/   C199A : =$80                panLeft set $80
(1)  200/   C199A : =$C0                panCentre set $C0
(1)  200/   C199A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  200/   C199A : E080                        dc.b $E0,PANLEFT+$00
(1)  201/   C199C : (MACRO)             	smpsSetvoice        $02
(1)  201/   C199C :  (MACRO-2)                  smpsFMvoice $02
(1)  201/   C199C : EF02                                dc.b    $EF,$02
(1)  202/   C199E : (MACRO)             	smpsAlterNote       $03
(1)  202/   C199E :  (MACRO-2)                  smpsDetune      $03
(1)  202/   C199E : E103                        dc.b    $E1,$03
(1)  203/   C19A0 : (MACRO)             	smpsCall            End_Boss_Call02
(1)  203/   C19A0 : F8                          dc.b    $F8
(1)  203/   C19A1 : 5A99                                dc.w    z80_ptr(END_BOSS_CALL02)
(1)  204/   C19A3 : C954 CB06 C9C8 60   	dc.b	nC6, $54, nD6, $06, nC6, nB5, $60
(1)  205/   C19AA : (MACRO)             	smpsCall            End_Boss_Call02
(1)  205/   C19AA : F8                          dc.b    $F8
(1)  205/   C19AB : 5A99                                dc.w    z80_ptr(END_BOSS_CALL02)
(1)  206/   C19AD : C960 CB             	dc.b	nC6, $60, nD6
(1)  207/   C19B0 : (MACRO)             	smpsJump            End_Boss_FM5
(1)  207/   C19B0 : F6                          dc.b    $F6
(1)  207/   C19B1 : 8199                                dc.w    z80_ptr(END_BOSS_FM5)
(1)  208/   C19B3 :                     
(1)  209/   C19B3 :                     ; PSG1 Data
(1)  210/   C19B3 :                     End_Boss_PSG1:
(1)  211/   C19B3 : (MACRO)             	smpsAlterNote       $02
(1)  211/   C19B3 :  (MACRO-2)                  smpsDetune      $02
(1)  211/   C19B3 : E102                        dc.b    $E1,$02
(1)  212/   C19B5 :                     
(1)  213/   C19B5 :                     End_Boss_Jump04:
(1)  214/   C19B5 : 8060 8060           	dc.b	nRst, $60, nRst, $60
(1)  215/   C19B9 :                     
(1)  216/   C19B9 :                     End_Boss_Loop0A:
(1)  217/   C19B9 : (MACRO)             	smpsCall            End_Boss_Call08
(1)  217/   C19B9 : F8                          dc.b    $F8
(1)  217/   C19BA : A097                                dc.w    z80_ptr(END_BOSS_CALL08)
(1)  218/   C19BC : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop0A
(1)  218/   C19BC : F7                          dc.b    $F7
(1)  218/   C19BD : 0002                        dc.b    $00,$02
(1)  218/   C19BF : B999                                dc.w    z80_ptr(END_BOSS_LOOP0A)
(1)  219/   C19C1 :                     
(1)  220/   C19C1 :                     End_Boss_Loop0B:
(1)  221/   C19C1 : 8060                	dc.b	nRst, $60
(1)  222/   C19C3 : (MACRO)             	smpsLoop            $00, $05, End_Boss_Loop0B
(1)  222/   C19C3 : F7                          dc.b    $F7
(1)  222/   C19C4 : 0005                        dc.b    $00,$05
(1)  222/   C19C6 : C199                                dc.w    z80_ptr(END_BOSS_LOOP0B)
(1)  223/   C19C8 :                     
(1)  224/   C19C8 :                     End_Boss_Loop0C:
(1)  225/   C19C8 : 8060 8080 0CC6 06C8 	dc.b	nRst, $60, nRst, nRst, $0C, nA5, $06, nB5, nC6, $48, nRst, $0C
            C19D0 : C948 800C         
(1)  226/   C19D4 : C806 C9CB 48        	dc.b	nB5, $06, nC6, nD6, $48
(1)  227/   C19D9 : (MACRO)             	smpsLoop            $00, $02, End_Boss_Loop0C
(1)  227/   C19D9 : F7                          dc.b    $F7
(1)  227/   C19DA : 0002                        dc.b    $00,$02
(1)  227/   C19DC : C899                                dc.w    z80_ptr(END_BOSS_LOOP0C)
(1)  228/   C19DE : (MACRO)             	smpsJump            End_Boss_Jump04
(1)  228/   C19DE : F6                          dc.b    $F6
(1)  228/   C19DF : B599                                dc.w    z80_ptr(END_BOSS_JUMP04)
(1)  229/   C19E1 :                     
(1)  230/   C19E1 :                     ; PSG2 Data
(1)  231/   C19E1 :                     End_Boss_PSG2:
(1)  232/   C19E1 : (MACRO)             	smpsPSGvoice        fTone_08
(1)  232/   C19E1 : F508                        dc.b    $F5,FTONE_08
(1)  233/   C19E3 : (MACRO)             	smpsModSet          $0C, $01, $02, $01
(1)  233/   C19E3 : F0                          dc.b    $F0
(1)  233/   C19E4 : 0D01 0202                           dc.b    $0C+1,$01,$02,(($01+1) * $01) & $FF
(1)  233/   C19E8 :                             ;dc.b   $01,$02,$01
(1)  234/   C19E8 :                     
(1)  235/   C19E8 :                     End_Boss_Jump03:
(1)  236/   C19E8 : 8060                	dc.b	nRst, $60
(1)  237/   C19EA : (MACRO)             	smpsLoop            $00, $0F, End_Boss_PSG2
(1)  237/   C19EA : F7                          dc.b    $F7
(1)  237/   C19EB : 000F                        dc.b    $00,$0F
(1)  237/   C19ED : E199                                dc.w    z80_ptr(END_BOSS_PSG2)
(1)  238/   C19EF : (MACRO)             	smpsCall            End_Boss_Call04
(1)  238/   C19EF : F8                          dc.b    $F8
(1)  238/   C19F0 : DB98                                dc.w    z80_ptr(END_BOSS_CALL04)
(1)  239/   C19F2 : B654 B806 BAB5 60   	dc.b	nF4, $54, nG4, $06, nA4, nE4, $60
(1)  240/   C19F9 : (MACRO)             	smpsCall            End_Boss_Call04
(1)  240/   C19F9 : F8                          dc.b    $F8
(1)  240/   C19FA : DB98                                dc.w    z80_ptr(END_BOSS_CALL04)
(1)  241/   C19FC : B660 B8             	dc.b	nF4, $60, nG4
(1)  242/   C19FF : (MACRO)             	smpsJump            End_Boss_Jump03
(1)  242/   C19FF : F6                          dc.b    $F6
(1)  242/   C1A00 : E899                                dc.w    z80_ptr(END_BOSS_JUMP03)
(1)  243/   C1A02 :                     
(1)  244/   C1A02 :                     ; PSG3 Data
(1)  245/   C1A02 :                     End_Boss_PSG3:
(1)  246/   C1A02 : (MACRO)             	smpsPSGform         $E7
(1)  246/   C1A02 : F3E7                        dc.b    $F3,$E7
(1)  247/   C1A04 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  247/   C1A04 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  247/   C1A04 : E806                                dc.b    $E8,$06
(1)  248/   C1A06 :                     
(1)  249/   C1A06 :                     End_Boss_Jump02:
(1)  250/   C1A06 : C718 1818 0C0C      	dc.b	nBb5, $18, $18, $18, $0C, $0C
(1)  251/   C1A0C : (MACRO)             	smpsJump            End_Boss_Jump02
(1)  251/   C1A0C : F6                          dc.b    $F6
(1)  251/   C1A0D : 069A                                dc.w    z80_ptr(END_BOSS_JUMP02)
(1)  252/   C1A0F :                     
(1)  253/   C1A0F :                     ; DAC Data
(1)  254/   C1A0F :                     End_Boss_DAC:
(1)  255/   C1A0F : 8B0C 8204 8282      	dc.b	dVLowTimpani, $0C, dSnare, $04, dSnare, dSnare
(1)  256/   C1A15 : (MACRO)             	smpsLoop            $00, $03, End_Boss_DAC
(1)  256/   C1A15 : F7                          dc.b    $F7
(1)  256/   C1A16 : 0003                        dc.b    $00,$03
(1)  256/   C1A18 : 0F9A                                dc.w    z80_ptr(END_BOSS_DAC)
(1)  257/   C1A1A : 890C 8A             	dc.b	dMidTimpani, $0C, dLowTimpani
(1)  258/   C1A1D : (MACRO)             	smpsJump            End_Boss_DAC
(1)  258/   C1A1D : F6                          dc.b    $F6
(1)  258/   C1A1E : 0F9A                                dc.w    z80_ptr(END_BOSS_DAC)
(1)  259/   C1A20 :                     
(1)  260/   C1A20 :                     End_Boss_Voices:
(1)  261/   C1A20 :                     ;	Voice $00
(1)  262/   C1A20 :                     ;	$3A
(1)  263/   C1A20 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  264/   C1A20 :                     ;	$00, $00, $00, $01, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1)  265/   C1A20 : (MACRO)             	smpsVcAlgorithm     $02
(1)  265/   C1A20 : =$2                 vcAlgorithm set $02
(1)  266/   C1A20 : (MACRO)             	smpsVcFeedback      $07
(1)  266/   C1A20 : =$7                 vcFeedback set $07
(1)  267/   C1A20 : (MACRO)             	smpsVcUnusedBits    $00
(1)  267/   C1A20 : =$0                 vcUnusedBits set $00
(1)  267/   C1A20 : =$0                 vcD1R1Unk set 0
(1)  267/   C1A20 : =$0                 vcD1R2Unk set 0
(1)  267/   C1A20 : =$0                 vcD1R3Unk set 0
(1)  267/   C1A20 : =$0                 vcD1R4Unk set 0
(1)  268/   C1A20 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  268/   C1A20 : =$0                 vcDT1 set $00
(1)  268/   C1A20 : =$0                 vcDT2 set $00
(1)  268/   C1A20 : =$0                 vcDT3 set $00
(1)  268/   C1A20 : =$0                 vcDT4 set $00
(1)  269/   C1A20 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  269/   C1A20 : =$1                 vcCF1 set $01
(1)  269/   C1A20 : =$1                 vcCF2 set $01
(1)  269/   C1A20 : =$7                 vcCF3 set $07
(1)  269/   C1A20 : =$1                 vcCF4 set $01
(1)  270/   C1A20 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  270/   C1A20 : =$1                 vcRS1 set $01
(1)  270/   C1A20 : =$2                 vcRS2 set $02
(1)  270/   C1A20 : =$2                 vcRS3 set $02
(1)  270/   C1A20 : =$2                 vcRS4 set $02
(1)  271/   C1A20 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  271/   C1A20 : =$13                vcAR1 set $13
(1)  271/   C1A20 : =$D                 vcAR2 set $0D
(1)  271/   C1A20 : =$E                 vcAR3 set $0E
(1)  271/   C1A20 : =$E                 vcAR4 set $0E
(1)  272/   C1A20 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  272/   C1A20 : =$0                 vcAM1 set $00<<5
(1)  272/   C1A20 : =$0                 vcAM2 set $00<<5
(1)  272/   C1A20 : =$0                 vcAM3 set $00<<5
(1)  272/   C1A20 : =$0                 vcAM4 set $00<<5
(1)  273/   C1A20 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  273/   C1A20 : =$3                 vcD1R1 set $03
(1)  273/   C1A20 : =$E                 vcD1R2 set $0E
(1)  273/   C1A20 : =$E                 vcD1R3 set $0E
(1)  273/   C1A20 : =$E                 vcD1R4 set $0E
(1)  274/   C1A20 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1)  274/   C1A20 : =$1                 vcD2R1 set $01
(1)  274/   C1A20 : =$0                 vcD2R2 set $00
(1)  274/   C1A20 : =$0                 vcD2R3 set $00
(1)  274/   C1A20 : =$0                 vcD2R4 set $00
(1)  275/   C1A20 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  275/   C1A20 : =$0                 vcDL1 set $00
(1)  275/   C1A20 : =$1                 vcDL2 set $01
(1)  275/   C1A20 : =$F                 vcDL3 set $0F
(1)  275/   C1A20 : =$1                 vcDL4 set $01
(1)  276/   C1A20 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  276/   C1A20 : =$F                 vcRR1 set $0F
(1)  276/   C1A20 : =$F                 vcRR2 set $0F
(1)  276/   C1A20 : =$F                 vcRR3 set $0F
(1)  276/   C1A20 : =$F                 vcRR4 set $0F
(1)  277/   C1A20 : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $17
(1)  277/   C1A20 : =$80                vcTL1 set $80
(1)  277/   C1A20 : =$27                vcTL2 set $27
(1)  277/   C1A20 : =$28                vcTL3 set $28
(1)  277/   C1A20 : =$17                vcTL4 set $17
(1)  277/   C1A20 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  277/   C1A21 :                     ;   0     1     2     3     4     5     6     7
(1)  277/   C1A21 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  277/   C1A21 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  277/   C1A21 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  277/   C1A21 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  277/   C1A21 : =$80                vcTLMask1 set $80
(1)  277/   C1A21 :                     
(1)  277/   C1A21 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  277/   C1A21 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  277/   C1A21 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  277/   C1A21 : =$80                vcTLMask1 set $80
(1)  277/   C1A21 : =$0                 vcTL1 set vcTL1&$7F
(1)  277/   C1A21 : =$27                vcTL2 set vcTL2&$7F
(1)  277/   C1A21 : =$28                vcTL3 set vcTL3&$7F
(1)  277/   C1A21 : =$17                vcTL4 set vcTL4&$7F
(1)  277/   C1A21 :                     
(1)  277/   C1A21 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  277/   C1A25 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  277/   C1A29 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  277/   C1A2D : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  277/   C1A31 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  277/   C1A35 : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  278/   C1A39 :                     
(1)  279/   C1A39 :                     ;	Voice $01
(1)  280/   C1A39 :                     ;	$3D
(1)  281/   C1A39 :                     ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
(1)  282/   C1A39 :                     ;	$00, $03, $03, $03, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $60
(1)  283/   C1A39 : (MACRO)             	smpsVcAlgorithm     $05
(1)  283/   C1A39 : =$5                 vcAlgorithm set $05
(1)  284/   C1A39 : (MACRO)             	smpsVcFeedback      $07
(1)  284/   C1A39 : =$7                 vcFeedback set $07
(1)  285/   C1A39 : (MACRO)             	smpsVcUnusedBits    $00
(1)  285/   C1A39 : =$0                 vcUnusedBits set $00
(1)  285/   C1A39 : =$0                 vcD1R1Unk set 0
(1)  285/   C1A39 : =$0                 vcD1R2Unk set 0
(1)  285/   C1A39 : =$0                 vcD1R3Unk set 0
(1)  285/   C1A39 : =$0                 vcD1R4Unk set 0
(1)  286/   C1A39 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  286/   C1A39 : =$0                 vcDT1 set $00
(1)  286/   C1A39 : =$0                 vcDT2 set $00
(1)  286/   C1A39 : =$0                 vcDT3 set $00
(1)  286/   C1A39 : =$0                 vcDT4 set $00
(1)  287/   C1A39 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  287/   C1A39 : =$1                 vcCF1 set $01
(1)  287/   C1A39 : =$1                 vcCF2 set $01
(1)  287/   C1A39 : =$1                 vcCF3 set $01
(1)  287/   C1A39 : =$1                 vcCF4 set $01
(1)  288/   C1A39 : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(1)  288/   C1A39 : =$1                 vcRS1 set $01
(1)  288/   C1A39 : =$0                 vcRS2 set $00
(1)  288/   C1A39 : =$1                 vcRS3 set $01
(1)  288/   C1A39 : =$2                 vcRS4 set $02
(1)  289/   C1A39 : (MACRO)             	smpsVcAttackRate    $0C, $14, $12, $0E
(1)  289/   C1A39 : =$C                 vcAR1 set $0C
(1)  289/   C1A39 : =$14                vcAR2 set $14
(1)  289/   C1A39 : =$12                vcAR3 set $12
(1)  289/   C1A39 : =$E                 vcAR4 set $0E
(1)  290/   C1A39 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  290/   C1A39 : =$0                 vcAM1 set $00<<5
(1)  290/   C1A39 : =$0                 vcAM2 set $00<<5
(1)  290/   C1A39 : =$0                 vcAM3 set $00<<5
(1)  290/   C1A39 : =$0                 vcAM4 set $00<<5
(1)  291/   C1A39 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $08, $08
(1)  291/   C1A39 : =$3                 vcD1R1 set $03
(1)  291/   C1A39 : =$E                 vcD1R2 set $0E
(1)  291/   C1A39 : =$8                 vcD1R3 set $08
(1)  291/   C1A39 : =$8                 vcD1R4 set $08
(1)  292/   C1A39 : (MACRO)             	smpsVcDecayRate2    $03, $03, $03, $00
(1)  292/   C1A39 : =$3                 vcD2R1 set $03
(1)  292/   C1A39 : =$3                 vcD2R2 set $03
(1)  292/   C1A39 : =$3                 vcD2R3 set $03
(1)  292/   C1A39 : =$0                 vcD2R4 set $00
(1)  293/   C1A39 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(1)  293/   C1A39 : =$1                 vcDL1 set $01
(1)  293/   C1A39 : =$1                 vcDL2 set $01
(1)  293/   C1A39 : =$1                 vcDL3 set $01
(1)  293/   C1A39 : =$1                 vcDL4 set $01
(1)  294/   C1A39 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  294/   C1A39 : =$F                 vcRR1 set $0F
(1)  294/   C1A39 : =$F                 vcRR2 set $0F
(1)  294/   C1A39 : =$F                 vcRR3 set $0F
(1)  294/   C1A39 : =$F                 vcRR4 set $0F
(1)  295/   C1A39 : (MACRO)             	smpsVcTotalLevel    $60, $80, $80, $1A
(1)  295/   C1A39 : =$60                vcTL1 set $60
(1)  295/   C1A39 : =$80                vcTL2 set $80
(1)  295/   C1A39 : =$80                vcTL3 set $80
(1)  295/   C1A39 : =$1A                vcTL4 set $1A
(1)  295/   C1A39 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  295/   C1A3A :                     ;   0     1     2     3     4     5     6     7
(1)  295/   C1A3A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  295/   C1A3A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  295/   C1A3A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  295/   C1A3A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  295/   C1A3A : =$80                vcTLMask1 set $80
(1)  295/   C1A3A :                     
(1)  295/   C1A3A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  295/   C1A3A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  295/   C1A3A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  295/   C1A3A : =$80                vcTLMask1 set $80
(1)  295/   C1A3A : =$60                vcTL1 set vcTL1&$7F
(1)  295/   C1A3A : =$0                 vcTL2 set vcTL2&$7F
(1)  295/   C1A3A : =$0                 vcTL3 set vcTL3&$7F
(1)  295/   C1A3A : =$1A                vcTL4 set vcTL4&$7F
(1)  295/   C1A3A :                     
(1)  295/   C1A3A : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  295/   C1A3E : 8E52 144C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  295/   C1A42 : 0808 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  295/   C1A46 : 0003 0303                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  295/   C1A4A : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  295/   C1A4E : 1A80 80E0                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  296/   C1A52 :                     
(1)  297/   C1A52 :                     ;	Voice $02
(1)  298/   C1A52 :                     ;	$3D
(1)  299/   C1A52 :                     ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$05, $05, $05, $05
(1)  300/   C1A52 :                     ;	$00, $00, $00, $00, 	$2F, $2F, $2F, $1F, 	$1E, $80, $80, $80
(1)  301/   C1A52 : (MACRO)             	smpsVcAlgorithm     $05
(1)  301/   C1A52 : =$5                 vcAlgorithm set $05
(1)  302/   C1A52 : (MACRO)             	smpsVcFeedback      $07
(1)  302/   C1A52 : =$7                 vcFeedback set $07
(1)  303/   C1A52 : (MACRO)             	smpsVcUnusedBits    $00
(1)  303/   C1A52 : =$0                 vcUnusedBits set $00
(1)  303/   C1A52 : =$0                 vcD1R1Unk set 0
(1)  303/   C1A52 : =$0                 vcD1R2Unk set 0
(1)  303/   C1A52 : =$0                 vcD1R3Unk set 0
(1)  303/   C1A52 : =$0                 vcD1R4Unk set 0
(1)  304/   C1A52 : (MACRO)             	smpsVcDetune        $00, $05, $02, $00
(1)  304/   C1A52 : =$0                 vcDT1 set $00
(1)  304/   C1A52 : =$5                 vcDT2 set $05
(1)  304/   C1A52 : =$2                 vcDT3 set $02
(1)  304/   C1A52 : =$0                 vcDT4 set $00
(1)  305/   C1A52 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  305/   C1A52 : =$1                 vcCF1 set $01
(1)  305/   C1A52 : =$1                 vcCF2 set $01
(1)  305/   C1A52 : =$1                 vcCF3 set $01
(1)  305/   C1A52 : =$1                 vcCF4 set $01
(1)  306/   C1A52 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  306/   C1A52 : =$0                 vcRS1 set $00
(1)  306/   C1A52 : =$0                 vcRS2 set $00
(1)  306/   C1A52 : =$0                 vcRS3 set $00
(1)  306/   C1A52 : =$0                 vcRS4 set $00
(1)  307/   C1A52 : (MACRO)             	smpsVcAttackRate    $0F, $14, $14, $12
(1)  307/   C1A52 : =$F                 vcAR1 set $0F
(1)  307/   C1A52 : =$14                vcAR2 set $14
(1)  307/   C1A52 : =$14                vcAR3 set $14
(1)  307/   C1A52 : =$12                vcAR4 set $12
(1)  308/   C1A52 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  308/   C1A52 : =$0                 vcAM1 set $00<<5
(1)  308/   C1A52 : =$0                 vcAM2 set $00<<5
(1)  308/   C1A52 : =$0                 vcAM3 set $00<<5
(1)  308/   C1A52 : =$0                 vcAM4 set $00<<5
(1)  309/   C1A52 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $05
(1)  309/   C1A52 : =$5                 vcD1R1 set $05
(1)  309/   C1A52 : =$5                 vcD1R2 set $05
(1)  309/   C1A52 : =$5                 vcD1R3 set $05
(1)  309/   C1A52 : =$5                 vcD1R4 set $05
(1)  310/   C1A52 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  310/   C1A52 : =$0                 vcD2R1 set $00
(1)  310/   C1A52 : =$0                 vcD2R2 set $00
(1)  310/   C1A52 : =$0                 vcD2R3 set $00
(1)  310/   C1A52 : =$0                 vcD2R4 set $00
(1)  311/   C1A52 : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1)  311/   C1A52 : =$1                 vcDL1 set $01
(1)  311/   C1A52 : =$2                 vcDL2 set $02
(1)  311/   C1A52 : =$2                 vcDL3 set $02
(1)  311/   C1A52 : =$2                 vcDL4 set $02
(1)  312/   C1A52 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  312/   C1A52 : =$F                 vcRR1 set $0F
(1)  312/   C1A52 : =$F                 vcRR2 set $0F
(1)  312/   C1A52 : =$F                 vcRR3 set $0F
(1)  312/   C1A52 : =$F                 vcRR4 set $0F
(1)  313/   C1A52 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $1E
(1)  313/   C1A52 : =$80                vcTL1 set $80
(1)  313/   C1A52 : =$80                vcTL2 set $80
(1)  313/   C1A52 : =$80                vcTL3 set $80
(1)  313/   C1A52 : =$1E                vcTL4 set $1E
(1)  313/   C1A52 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  313/   C1A53 :                     ;   0     1     2     3     4     5     6     7
(1)  313/   C1A53 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  313/   C1A53 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  313/   C1A53 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  313/   C1A53 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  313/   C1A53 : =$80                vcTLMask1 set $80
(1)  313/   C1A53 :                     
(1)  313/   C1A53 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  313/   C1A53 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  313/   C1A53 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  313/   C1A53 : =$80                vcTLMask1 set $80
(1)  313/   C1A53 : =$0                 vcTL1 set vcTL1&$7F
(1)  313/   C1A53 : =$0                 vcTL2 set vcTL2&$7F
(1)  313/   C1A53 : =$0                 vcTL3 set vcTL3&$7F
(1)  313/   C1A53 : =$1E                vcTL4 set vcTL4&$7F
(1)  313/   C1A53 :                     
(1)  313/   C1A53 : 0121 5101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  313/   C1A57 : 1214 140F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  313/   C1A5B : 0505 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  313/   C1A5F : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  313/   C1A63 : 2F2F 2F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  313/   C1A67 : 1E80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  314/   C1A6B :                     
(1)  315/   C1A6B :                     
   57/   C1A6B :                        Music_15:	include		"music-improved/95 - Ending.asm"
(1)    1/   C1A6B :                     Ending_Header:
(1)    2/   C1A6B : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C1A6B :                     
(1)    2/   C1A6B : =$2                 SourceDriver set 2
(1)    2/   C1A6B :                     
(1)    2/   C1A6B : =$0                 SourceSMPS2ASM set 0
(1)    2/   C1A6B :                     
(1)    2/   C1A6B : =$C1A6B             songStart set *
(1)    2/   C1A6B :                     
(1)    2/   C1A6B :                     
(1)    3/   C1A6B : (MACRO)             	smpsHeaderVoice     Ending_Voices
(1)    3/   C1A6B : 00A0                                dc.w    z80_ptr(ENDING_VOICES)
(1)    4/   C1A6D : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C1A6D : 0603                        dc.b    $06,$03
(1)    5/   C1A6F : (MACRO)             	smpsHeaderTempo     $02, $97
(1)    5/   C1A6F : 02                          dc.b    $02
(1)    5/   C1A70 :  (MACRO-2)                  convertMainTempoMod $97
(1)    5/   C1A70 : 69                                          dc.b    s2TempotoS3($97)
(1)    6/   C1A71 :                     
(1)    7/   C1A71 : (MACRO)             	smpsHeaderDAC       Ending_DAC
(1)    7/   C1A71 :  (MACRO-2)                  CheckedChannelPointer ENDING_DAC
(1)    7/   C1A71 : 909F                                dc.w    z80_ptr(ENDING_DAC)
(1)    7/   C1A73 : 0000                                dc.w    $00
(1)    8/   C1A75 : (MACRO)             	smpsHeaderFM        Ending_FM1,	$E8, $10
(1)    8/   C1A75 :  (MACRO-2)                  CheckedChannelPointer ENDING_FM1
(1)    8/   C1A75 : 9B9A                                dc.w    z80_ptr(ENDING_FM1)
(1)    8/   C1A77 : E810                        dc.b    $E8,$10
(1)    9/   C1A79 : (MACRO)             	smpsHeaderFM        Ending_FM2,	$F4, $09
(1)    9/   C1A79 :  (MACRO-2)                  CheckedChannelPointer ENDING_FM2
(1)    9/   C1A79 : 889B                                dc.w    z80_ptr(ENDING_FM2)
(1)    9/   C1A7B : F409                        dc.b    $F4,$09
(1)   10/   C1A7D : (MACRO)             	smpsHeaderFM        Ending_FM3,	$F4, $08
(1)   10/   C1A7D :  (MACRO-2)                  CheckedChannelPointer ENDING_FM3
(1)   10/   C1A7D : A29C                                dc.w    z80_ptr(ENDING_FM3)
(1)   10/   C1A7F : F408                        dc.b    $F4,$08
(1)   11/   C1A81 : (MACRO)             	smpsHeaderFM        Ending_FM4,	$F4, $0B
(1)   11/   C1A81 :  (MACRO-2)                  CheckedChannelPointer ENDING_FM4
(1)   11/   C1A81 : 6A9D                                dc.w    z80_ptr(ENDING_FM4)
(1)   11/   C1A83 : F40B                        dc.b    $F4,$0B
(1)   12/   C1A85 : (MACRO)             	smpsHeaderFM        Ending_FM5,	$F4, $0B
(1)   12/   C1A85 :  (MACRO-2)                  CheckedChannelPointer ENDING_FM5
(1)   12/   C1A85 : 1A9E                                dc.w    z80_ptr(ENDING_FM5)
(1)   12/   C1A87 : F40B                        dc.b    $F4,$0B
(1)   13/   C1A89 : (MACRO)             	smpsHeaderPSG       Ending_PSG1,	$D0, $06, $02, fTone_0C
(1)   13/   C1A89 :  (MACRO-2)                  CheckedChannelPointer ENDING_PSG1
(1)   13/   C1A89 : D39E                                dc.w    z80_ptr(ENDING_PSG1)
(1)   13/   C1A8B :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   C1A8B : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   C1A8C : 0602 0C                     dc.b    $06,$02,FTONE_0C
(1)   14/   C1A8F : (MACRO)             	smpsHeaderPSG       Ending_PSG2,	$D0, $05, $00, fTone_05
(1)   14/   C1A8F :  (MACRO-2)                  CheckedChannelPointer ENDING_PSG2
(1)   14/   C1A8F : D79E                                dc.w    z80_ptr(ENDING_PSG2)
(1)   14/   C1A91 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   14/   C1A91 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   14/   C1A92 : 0500 05                     dc.b    $05,$00,FTONE_05
(1)   15/   C1A95 : (MACRO)             	smpsHeaderPSG       Ending_PSG3,	$DC, $05, $02, fTone_0C
(1)   15/   C1A95 :  (MACRO-2)                  CheckedChannelPointer ENDING_PSG3
(1)   15/   C1A95 : 789F                                dc.w    z80_ptr(ENDING_PSG3)
(1)   15/   C1A97 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/   C1A97 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   15/   C1A98 : 0502 0C                     dc.b    $05,$02,FTONE_0C
(1)   16/   C1A9B :                     
(1)   17/   C1A9B :                     ; FM1 Data
(1)   18/   C1A9B :                     Ending_FM1:
(1)   19/   C1A9B : (MACRO)             	smpsSetvoice        $03
(1)   19/   C1A9B :  (MACRO-2)                  smpsFMvoice $03
(1)   19/   C1A9B : EF03                                dc.b    $EF,$03
(1)   20/   C1A9D : (MACRO)             	smpsModSet          $02, $01, $04, $02
(1)   20/   C1A9D : F0                          dc.b    $F0
(1)   20/   C1A9E : 0301 0403                           dc.b    $02+1,$01,$04,(($02+1) * $01) & $FF
(1)   20/   C1AA2 :                             ;dc.b   $01,$04,$02
(1)   21/   C1AA2 : (MACRO)             	smpsCall            Ending_Call04
(1)   21/   C1AA2 : F8                          dc.b    $F8
(1)   21/   C1AA3 : FB9A                                dc.w    z80_ptr(ENDING_CALL04)
(1)   22/   C1AA5 : (MACRO)             	smpsAlterVol        $FC
(1)   22/   C1AA5 : E6FC                        dc.b    $E6,$FC
(1)   23/   C1AA7 : (MACRO)             	smpsCall            Ending_Call05
(1)   23/   C1AA7 : F8                          dc.b    $F8
(1)   23/   C1AA8 : E89A                                dc.w    z80_ptr(ENDING_CALL05)
(1)   24/   C1AAA : (MACRO)             	smpsAlterVol        $04
(1)   24/   C1AAA : E604                        dc.b    $E6,$04
(1)   25/   C1AAC : (MACRO)             	smpsCall            Ending_Call06
(1)   25/   C1AAC : F8                          dc.b    $F8
(1)   25/   C1AAD : 269B                                dc.w    z80_ptr(ENDING_CALL06)
(1)   26/   C1AAF : (MACRO)             	smpsAlterVol        $10
(1)   26/   C1AAF : E610                        dc.b    $E6,$10
(1)   27/   C1AB1 : C403                	dc.b	nG5, $03
(1)   28/   C1AB3 : (MACRO)             	smpsAlterVol        $FF
(1)   28/   C1AB3 : E6FF                        dc.b    $E6,$FF
(1)   29/   C1AB5 : C6                  	dc.b	nA5
(1)   30/   C1AB6 : (MACRO)             	smpsAlterVol        $FF
(1)   30/   C1AB6 : E6FF                        dc.b    $E6,$FF
(1)   31/   C1AB8 : C8                  	dc.b	nB5
(1)   32/   C1AB9 : (MACRO)             	smpsAlterVol        $FF
(1)   32/   C1AB9 : E6FF                        dc.b    $E6,$FF
(1)   33/   C1ABB : C9                  	dc.b	nC6
(1)   34/   C1ABC : (MACRO)             	smpsAlterVol        $FF
(1)   34/   C1ABC : E6FF                        dc.b    $E6,$FF
(1)   35/   C1ABE : C8                  	dc.b	nB5
(1)   36/   C1ABF : (MACRO)             	smpsAlterVol        $FE
(1)   36/   C1ABF : E6FE                        dc.b    $E6,$FE
(1)   37/   C1AC1 : C9                  	dc.b	nC6
(1)   38/   C1AC2 : (MACRO)             	smpsAlterVol        $FE
(1)   38/   C1AC2 : E6FE                        dc.b    $E6,$FE
(1)   39/   C1AC4 : CB                  	dc.b	nD6
(1)   40/   C1AC5 : (MACRO)             	smpsAlterVol        $FE
(1)   40/   C1AC5 : E6FE                        dc.b    $E6,$FE
(1)   41/   C1AC7 : CD                  	dc.b	nE6
(1)   42/   C1AC8 : (MACRO)             	smpsAlterVol        $FE
(1)   42/   C1AC8 : E6FE                        dc.b    $E6,$FE
(1)   43/   C1ACA : CB                  	dc.b	nD6
(1)   44/   C1ACB : (MACRO)             	smpsAlterVol        $FE
(1)   44/   C1ACB : E6FE                        dc.b    $E6,$FE
(1)   45/   C1ACD : CD                  	dc.b	nE6
(1)   46/   C1ACE : (MACRO)             	smpsAlterVol        $FE
(1)   46/   C1ACE : E6FE                        dc.b    $E6,$FE
(1)   47/   C1AD0 : CE                  	dc.b	nF6
(1)   48/   C1AD1 : (MACRO)             	smpsAlterVol        $FE
(1)   48/   C1AD1 : E6FE                        dc.b    $E6,$FE
(1)   49/   C1AD3 : D0                  	dc.b	nG6
(1)   50/   C1AD4 : (MACRO)             	smpsAlterVol        $FE
(1)   50/   C1AD4 : E6FE                        dc.b    $E6,$FE
(1)   51/   C1AD6 : CE                  	dc.b	nF6
(1)   52/   C1AD7 : (MACRO)             	smpsAlterVol        $FE
(1)   52/   C1AD7 : E6FE                        dc.b    $E6,$FE
(1)   53/   C1AD9 : D0                  	dc.b	nG6
(1)   54/   C1ADA : (MACRO)             	smpsAlterVol        $FE
(1)   54/   C1ADA : E6FE                        dc.b    $E6,$FE
(1)   55/   C1ADC : D2                  	dc.b	nA6
(1)   56/   C1ADD : (MACRO)             	smpsAlterVol        $FE
(1)   56/   C1ADD : E6FE                        dc.b    $E6,$FE
(1)   57/   C1ADF : D4                  	dc.b	nB6
(1)   58/   C1AE0 : (MACRO)             	smpsAlterVol        $09
(1)   58/   C1AE0 : E609                        dc.b    $E6,$09
(1)   59/   C1AE2 : (MACRO)             	smpsCall            Ending_Call07
(1)   59/   C1AE2 : F8                          dc.b    $F8
(1)   59/   C1AE3 : 379B                                dc.w    z80_ptr(ENDING_CALL07)
(1)   60/   C1AE5 : D330                	dc.b	nBb6, $30
(1)   61/   C1AE7 : (MACRO)             	smpsStop
(1)   61/   C1AE7 : F2                          dc.b    $F2
(1)   62/   C1AE8 :                     
(1)   63/   C1AE8 :                     Ending_Call05:
(1)   64/   C1AE8 : CD12 C906 CE12 C91E 	dc.b	nE6, $12, nC6, $06, nF6, $12, nC6, $1E, nRst, $18, nE6, $12
            C1AF0 : 8018 CD12         
(1)   65/   C1AF4 : C906 CE12 C91E      	dc.b	nC6, $06, nF6, $12, nC6, $1E
(1)   66/   C1AFA : (MACRO)             	smpsReturn
(1)   66/   C1AFA : F9                                  dc.b    $F9
(1)   67/   C1AFB :                     
(1)   68/   C1AFB :                     Ending_Call04:
(1)   69/   C1AFB : B11E B806 B5B3 B130 	dc.b	nC4, $1E, nG4, $06, nE4, nD4, nC4, $30, nAb3, $18, nBb3, $0C
            C1B03 : AD18 AF0C         
(1)   70/   C1B07 : B3B5 30B4 18B6 0CB3 	dc.b	nD4, nE4, $30, nEb4, $18, nF4, $0C, nD4, nE4, $12, nA3, $1E
            C1B0F : B512 AE1E         
(1)   71/   C1B13 : B312 B81E BA12 B81E 	dc.b	nD4, $12, nG4, $1E, nA4, $12, nG4, $1E, nRst, $0C, nB4, nG4
            C1B1B : 800C BCB8         
(1)   72/   C1B1F : 06B3 B8B9 BA18      	dc.b	$06, nD4, nG4, nAb4, nA4, $18
(1)   73/   C1B25 : (MACRO)             	smpsReturn
(1)   73/   C1B25 : F9                                  dc.b    $F9
(1)   74/   C1B26 :                     
(1)   75/   C1B26 :                     Ending_Call06:
(1)   76/   C1B26 : 8018 CE0C 06CD CECD 	dc.b	nRst, $18, nF6, $0C, $06, nE6, nF6, nE6, $0C, nD6, nE6, $06
            C1B2E : 0CCB CD06         
(1)   77/   C1B32 : CE0C CD30           	dc.b	nF6, $0C, nE6, $30
(1)   78/   C1B36 : (MACRO)             	smpsReturn
(1)   78/   C1B36 : F9                                  dc.b    $F9
(1)   79/   C1B37 :                     
(1)   80/   C1B37 :                     Ending_Call07:
(1)   81/   C1B37 : D018 D30C CCD1 1580 	dc.b	nG6, $18, nBb6, $0C, nEb6, nAb6, $15, nRst, $03, nC7, $06, nBb6
            C1B3F : 03D5 06D3         
(1)   82/   C1B43 : D003 D109 D018 D30C 	dc.b	nG6, $03, nAb6, $09, nG6, $18, nBb6, $0C, nEb6, nAb6, $15, nC7
            C1B4B : CCD1 15D5         
(1)   83/   C1B4F : 0306 D3D0 03D1 09D5 	dc.b	$03, $06, nBb6, nG6, $03, nAb6, $09, nC7, $15, $03, nB6, $06
            C1B57 : 1503 D406         
(1)   84/   C1B5B : 0603 06D3 1BD2 0606 	dc.b	$06, $03, $06, nBb6, $1B, nA6, $06, $06, $03, $09, nC7, $06
            C1B63 : 0309 D506         
(1)   85/   C1B67 : D3D0 D118 D003 03D5 	dc.b	nBb6, nG6, nAb6, $18, nG6, $03, $03, nC7, $06, nBb6, nG6, nAb6
            C1B6F : 06D3 D0D1         
(1)   86/   C1B73 : 12D3 0CD6 03D5 D3D1 	dc.b	$12, nBb6, $0C, nCs7, $03, nC7, nBb6, nAb6, nCs7, nC7, nBb6, nAb6
            C1B7B : D6D5 D3D1         
(1)   87/   C1B7F : D6D5 D3D1 D6D5 D3D1 	dc.b	nCs7, nC7, nBb6, nAb6, nCs7, nC7, nBb6, nAb6
(1)   88/   C1B87 : (MACRO)             	smpsReturn
(1)   88/   C1B87 : F9                                  dc.b    $F9
(1)   89/   C1B88 :                     
(1)   90/   C1B88 :                     ; FM2 Data
(1)   91/   C1B88 :                     Ending_FM2:
(1)   92/   C1B88 : (MACRO)             	smpsSetvoice        $01
(1)   92/   C1B88 :  (MACRO-2)                  smpsFMvoice $01
(1)   92/   C1B88 : EF01                                dc.b    $EF,$01
(1)   93/   C1B8A : (MACRO)             	smpsModSet          $01, $01, $02, $02
(1)   93/   C1B8A : F0                          dc.b    $F0
(1)   93/   C1B8B : 0201 0203                           dc.b    $01+1,$01,$02,(($02+1) * $01) & $FF
(1)   93/   C1B8F :                             ;dc.b   $01,$02,$02
(1)   94/   C1B8F : 8006 C103 C2C1 24   	dc.b	nRst, $06, nE5, $03, nF5, nE5, $24
(1)   95/   C1B96 : (MACRO)             	smpsCall            Ending_Call01
(1)   95/   C1B96 : F8                          dc.b    $F8
(1)   95/   C1B97 : 029C                                dc.w    z80_ptr(ENDING_CALL01)
(1)   96/   C1B99 : (MACRO)             	smpsAlterVol        $02
(1)   96/   C1B99 : E602                        dc.b    $E6,$02
(1)   97/   C1B9B : 8030                	dc.b	nRst, $30
(1)   98/   C1B9D :                     
(1)   99/   C1B9D :                     Ending_Loop0F:
(1)  100/   C1B9D : 8018 C402 8001 BD02 	dc.b	nRst, $18, nG5, $02, nRst, $01, nC5, $02, nRst, $01, nE5, $02
            C1BA5 : 8001 C102         
(1)  101/   C1BA9 : 8001 BD02 8001 C402 	dc.b	nRst, $01, nC5, $02, nRst, $01, nG5, $02, nRst, $01, nC5, $02
            C1BB1 : 8001 BD02         
(1)  102/   C1BB5 : 8001 C102 8001 BD02 	dc.b	nRst, $01, nE5, $02, nRst, $01, nC5, $02, nRst, $01, nRst, $18
            C1BBD : 8001 8018         
(1)  103/   C1BC1 : C602 8001 BF02 8001 	dc.b	nA5, $02, nRst, $01, nD5, $02, nRst, $01, nF5, $02, nRst, $01
            C1BC9 : C202 8001         
(1)  104/   C1BCD : BF02 8001 C602 8001 	dc.b	nD5, $02, nRst, $01, nA5, $02, nRst, $01, nD5, $02, nRst, $01
            C1BD5 : BF02 8001         
(1)  105/   C1BD9 : C202 8001 BF02 8001 	dc.b	nF5, $02, nRst, $01, nD5, $02, nRst, $01
(1)  106/   C1BE1 : (MACRO)             	smpsLoop            $00, $02, Ending_Loop0F
(1)  106/   C1BE1 : F7                          dc.b    $F7
(1)  106/   C1BE2 : 0002                        dc.b    $00,$02
(1)  106/   C1BE4 : 9D9B                                dc.w    z80_ptr(ENDING_LOOP0F)
(1)  107/   C1BE6 : (MACRO)             	smpsAlterVol        $FE
(1)  107/   C1BE6 : E6FE                        dc.b    $E6,$FE
(1)  108/   C1BE8 : (MACRO)             	smpsCall            Ending_Call02
(1)  108/   C1BE8 : F8                          dc.b    $F8
(1)  108/   C1BE9 : 7D9C                                dc.w    z80_ptr(ENDING_CALL02)
(1)  109/   C1BEB : 8006                	dc.b	nRst, $06
(1)  110/   C1BED : (MACRO)             	smpsAlterVol        $0A
(1)  110/   C1BED : E60A                        dc.b    $E6,$0A
(1)  111/   C1BEF :                     
(1)  112/   C1BEF :                     Ending_Loop10:
(1)  113/   C1BEF : C906                	dc.b	nC6, $06
(1)  114/   C1BF1 : (MACRO)             	smpsAlterVol        $FE
(1)  114/   C1BF1 : E6FE                        dc.b    $E6,$FE
(1)  115/   C1BF3 : (MACRO)             	smpsLoop            $00, $07, Ending_Loop10
(1)  115/   C1BF3 : F7                          dc.b    $F7
(1)  115/   C1BF4 : 0007                        dc.b    $00,$07
(1)  115/   C1BF6 : EF9B                                dc.w    z80_ptr(ENDING_LOOP10)
(1)  116/   C1BF8 : (MACRO)             	smpsAlterVol        $03
(1)  116/   C1BF8 : E603                        dc.b    $E6,$03
(1)  117/   C1BFA : (MACRO)             	smpsCall            Ending_Call03
(1)  117/   C1BFA : F8                          dc.b    $F8
(1)  117/   C1BFB : 379C                                dc.w    z80_ptr(ENDING_CALL03)
(1)  118/   C1BFD : CC30 E730           	dc.b	nEb6, $30, smpsNoAttack, $30
(1)  119/   C1C01 : (MACRO)             	smpsStop
(1)  119/   C1C01 : F2                          dc.b    $F2
(1)  120/   C1C02 :                     
(1)  121/   C1C02 :                     Ending_Call01:
(1)  122/   C1C02 : 8006 C902 8001 C902 	dc.b	nRst, $06, nC6, $02, nRst, $01, nC6, $02, nRst, $01, nC6, $06
            C1C0A : 8001 C906         
(1)  123/   C1C0E : CB03 CE09 CD06 CBC9 	dc.b	nD6, $03, nF6, $09, nE6, $06, nD6, nC6, nEb6, nF6, $03, nC6
            C1C16 : CCCE 03C9         
(1)  124/   C1C1A : 2480 03             	dc.b	$24, nRst, $03
(1)  125/   C1C1D : (MACRO)             	smpsLoop            $01, $02, Ending_Call01
(1)  125/   C1C1D : F7                          dc.b    $F7
(1)  125/   C1C1E : 0102                        dc.b    $01,$02
(1)  125/   C1C20 : 029C                                dc.w    z80_ptr(ENDING_CALL01)
(1)  126/   C1C22 : 8018 CD06 C9CD 03C9 	dc.b	nRst, $18, nE6, $06, nC6, nE6, $03, nC6, $06, nD6, $1B, nE6
            C1C2A : 06CB 1BCD         
(1)  127/   C1C2E : 06C9 CD03 C906 CB33 	dc.b	$06, nC6, nE6, $03, nC6, $06, nD6, $33
(1)  128/   C1C36 : (MACRO)             	smpsReturn
(1)  128/   C1C36 : F9                                  dc.b    $F9
(1)  129/   C1C37 :                     
(1)  130/   C1C37 :                     Ending_Call03:
(1)  131/   C1C37 : 8006 CC03 CB09 CC03 	dc.b	nRst, $06, nEb6, $03, nD6, $09, nEb6, $03, nBb5, $09, nEb6, $03
            C1C3F : C709 CC03         
(1)  132/   C1C43 : CB09 CC03 C915 8003 	dc.b	nD6, $09, nEb6, $03, nC6, $15, nRst, $03, nAb6, $03, $06, nG6
            C1C4B : D103 06D0         
(1)  133/   C1C4F : CC03 CE09           	dc.b	nEb6, $03, nF6, $09
(1)  134/   C1C53 : (MACRO)             	smpsLoop            $01, $02, Ending_Call03
(1)  134/   C1C53 : F7                          dc.b    $F7
(1)  134/   C1C54 : 0102                        dc.b    $01,$02
(1)  134/   C1C56 : 379C                                dc.w    z80_ptr(ENDING_CALL03)
(1)  135/   C1C58 : D015 03CE 06D0 CC03 	dc.b	nG6, $15, $03, nF6, $06, nG6, nEb6, $03, nF6, $06, nG6, $1B
            C1C60 : CE06 D01B         
(1)  136/   C1C64 : CE06 D0CC 0306 03D1 	dc.b	nF6, $06, nG6, nEb6, $03, $06, $03, nAb6, $06, nG6, nEb6, nF6
            C1C6C : 06D0 CCCE         
(1)  137/   C1C70 : 18CC 0303 D106 D0CC 	dc.b	$18, nEb6, $03, $03, nAb6, $06, nG6, nEb6, nF6, $12, nEb6, $0C
            C1C78 : CE12 CC0C         
(1)  138/   C1C7C : (MACRO)             	smpsReturn
(1)  138/   C1C7C : F9                                  dc.b    $F9
(1)  139/   C1C7D :                     
(1)  140/   C1C7D :                     Ending_Call02:
(1)  141/   C1C7D : 8006 CE03 D0D2 80CE 	dc.b	nRst, $06, nF6, $03, nG6, nA6, nRst, nF6, $03, nG6, nA6, $18
            C1C85 : 03D0 D218         
(1)  142/   C1C89 : 8006 D003 D2D4 80D0 	dc.b	nRst, $06, nG6, $03, nA6, nB6, nRst, nG6, $03, nA6, nB6, $18
            C1C91 : 03D2 D418         
(1)  143/   C1C95 : 8006 D203 D4D5 80D2 	dc.b	nRst, $06, nA6, $03, nB6, nC7, nRst, nA6, $03, nB6, nC7, $18
            C1C9D : 03D4 D518         
(1)  144/   C1CA1 : (MACRO)             	smpsReturn
(1)  144/   C1CA1 : F9                                  dc.b    $F9
(1)  145/   C1CA2 :                     
(1)  146/   C1CA2 :                     ; FM3 Data
(1)  147/   C1CA2 :                     Ending_FM3:
(1)  148/   C1CA2 : (MACRO)             	smpsSetvoice        $00
(1)  148/   C1CA2 :  (MACRO-2)                  smpsFMvoice $00
(1)  148/   C1CA2 : EF00                                dc.b    $EF,$00
(1)  149/   C1CA4 : 8024 AC0C           	dc.b	nRst, $24, nG3, $0C
(1)  150/   C1CA8 :                     
(1)  151/   C1CA8 :                     Ending_Loop0C:
(1)  152/   C1CA8 : B115 AC03 B106 0C03 	dc.b	nC4, $15, nG3, $03, nC4, $06, $0C, $03, nG3, nAb3, $15, nEb3
            C1CB0 : ACAD 15A8         
(1)  153/   C1CB4 : 03AF 060C 03B0      	dc.b	$03, nBb3, $06, $0C, $03, nB3
(1)  154/   C1CBA : (MACRO)             	smpsLoop            $00, $02, Ending_Loop0C
(1)  154/   C1CBA : F7                          dc.b    $F7
(1)  154/   C1CBB : 0002                        dc.b    $00,$02
(1)  154/   C1CBD : A89C                                dc.w    z80_ptr(ENDING_LOOP0C)
(1)  155/   C1CBF : AE15 A903 AE06 0603 	dc.b	nA3, $15, nE3, $03, nA3, $06, $06, $03, nB3, nC4, nCs4, nD4
            C1CC7 : B0B1 B2B3         
(1)  156/   C1CCB : 15AE 03B3 060C 06AC 	dc.b	$15, nA3, $03, nD4, $06, $0C, $06, nG3, $15, nD3, $03, nG3
            C1CD3 : 15A7 03AC         
(1)  157/   C1CD7 : 060C B306 AC15 A703 	dc.b	$06, $0C, nD4, $06, nG3, $15, nD3, $03, nG3, nD3, nG3, $0C
            C1CDF : ACA7 AC0C         
(1)  158/   C1CE3 : 03AD AE15 A903 AE06 	dc.b	$03, nAb3, nA3, $15, nE3, $03, nA3, $06, $0C, $03, nE3, nBb3
            C1CEB : 0C03 A9AF         
(1)  159/   C1CEF : 15AA 03AF 060C 03AA 	dc.b	$15, nF3, $03, nBb3, $06, $0C, $03, nF3, nA3, $15, nE3, $03
            C1CF7 : AE15 A903         
(1)  160/   C1CFB : AE06 AEAE 03A9 AEA9 	dc.b	nA3, $06, nA3, nA3, $03, nE3, nA3, nE3, nBb3, $15, nF3, $03
            C1D03 : AF15 AA03         
(1)  161/   C1D07 : AF06 0C03 03AA 1503 	dc.b	nBb3, $06, $0C, $03, $03, nF3, $15, $03, $06, $0C, $03, nFs3
            C1D0F : 060C 03AB         
(1)  162/   C1D13 : AC15 A703 AC06 0C03 	dc.b	nG3, $15, nD3, $03, nG3, $06, $0C, $03, nAb3, nA3, $15, nE3
            C1D1B : ADAE 15A9         
(1)  163/   C1D1F : 03AE 060C 0303 8006 	dc.b	$03, nA3, $06, $0C, $03, $03, nRst, $06
(1)  164/   C1D27 : (MACRO)             	smpsAlterVol        $0A
(1)  164/   C1D27 : E60A                        dc.b    $E6,$0A
(1)  165/   C1D29 :                     
(1)  166/   C1D29 :                     Ending_Loop0D:
(1)  167/   C1D29 : AC                  	dc.b	nG3
(1)  168/   C1D2A : (MACRO)             	smpsAlterVol        $FE
(1)  168/   C1D2A : E6FE                        dc.b    $E6,$FE
(1)  169/   C1D2C : (MACRO)             	smpsLoop            $00, $07, Ending_Loop0D
(1)  169/   C1D2C : F7                          dc.b    $F7
(1)  169/   C1D2D : 0007                        dc.b    $00,$07
(1)  169/   C1D2F : 299D                                dc.w    z80_ptr(ENDING_LOOP0D)
(1)  170/   C1D31 : (MACRO)             	smpsAlterVol        $03
(1)  170/   C1D31 : E603                        dc.b    $E6,$03
(1)  171/   C1D33 :                     
(1)  172/   C1D33 :                     Ending_Loop0E:
(1)  173/   C1D33 : B415 03B3 060C 03AF 	dc.b	nEb4, $15, $03, nD4, $06, $0C, $03, nBb3, nAb3, $15, $03, nBb3
            C1D3B : AD15 03AF         
(1)  174/   C1D3F : 060C B603 AF        	dc.b	$06, $0C, nF4, $03, nBb3
(1)  175/   C1D44 : (MACRO)             	smpsLoop            $00, $02, Ending_Loop0E
(1)  175/   C1D44 : F7                          dc.b    $F7
(1)  175/   C1D45 : 0002                        dc.b    $00,$02
(1)  175/   C1D47 : 339D                                dc.w    z80_ptr(ENDING_LOOP0E)
(1)  176/   C1D49 : B115 03B0 0612 AF15 	dc.b	nC4, $15, $03, nB3, $06, $12, nBb3, $15, $03, nA3, $06, $12
            C1D51 : 03AE 0612         
(1)  177/   C1D55 : ADAF 18B6 06AD 12AF 	dc.b	nAb3, nBb3, $18, nF4, $06, nAb3, $12, nBb3, nBb3, $06, nC4, nCs4
            C1D5D : AF06 B1B2         
(1)  178/   C1D61 : 15AD 03B2 0612 A830 	dc.b	$15, nAb3, $03, nCs4, $06, $12, nEb3, $30
(1)  179/   C1D69 : (MACRO)             	smpsStop
(1)  179/   C1D69 : F2                          dc.b    $F2
(1)  180/   C1D6A :                     
(1)  181/   C1D6A :                     ; FM4 Data
(1)  182/   C1D6A :                     Ending_FM4:
(1)  183/   C1D6A : (MACRO)             	smpsSetvoice        $02
(1)  183/   C1D6A :  (MACRO-2)                  smpsFMvoice $02
(1)  183/   C1D6A : EF02                                dc.b    $EF,$02
(1)  184/   C1D6C : (MACRO)             	smpsPan             panRight, $00
(1)  184/   C1D6C : =$0                 panNone set $00
(1)  184/   C1D6C : =$40                panRight set $40
(1)  184/   C1D6C : =$80                panLeft set $80
(1)  184/   C1D6C : =$C0                panCentre set $C0
(1)  184/   C1D6C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  184/   C1D6C : E040                        dc.b $E0,PANRIGHT+$00
(1)  185/   C1D6E : 8012 C403 C6C4 18   	dc.b	nRst, $12, nG5, $03, nA5, nG5, $18
(1)  186/   C1D75 :                     
(1)  187/   C1D75 :                     Ending_Loop08:
(1)  188/   C1D75 : C430 C018 C20C C6   	dc.b	nG5, $30, nEb5, $18, nF5, $0C, nA5
(1)  189/   C1D7C : (MACRO)             	smpsLoop            $00, $02, Ending_Loop08
(1)  189/   C1D7C : F7                          dc.b    $F7
(1)  189/   C1D7D : 0002                        dc.b    $00,$02
(1)  189/   C1D7F : 759D                                dc.w    z80_ptr(ENDING_LOOP08)
(1)  190/   C1D81 : C112 C4C1 0CC1 12C4 	dc.b	nE5, $12, nG5, nE5, $0C, nE5, $12, nG5, nE5, $0C, nF5, $12
            C1D89 : C10C C212         
(1)  191/   C1D8D : C6C2 0CC9 12C6 C20C 	dc.b	nA5, nF5, $0C, nC6, $12, nA5, nF5, $0C
(1)  192/   C1D95 :                     
(1)  193/   C1D95 :                     Ending_Loop09:
(1)  194/   C1D95 : C103 03BF 06C1 BF03 	dc.b	nE5, $03, $03, nD5, $06, nE5, nD5, $03, nE5, $1B, nF5, $03
            C1D9D : C11B C203         
(1)  195/   C1DA1 : 03C1 06C2 C103 C21B 	dc.b	$03, nE5, $06, nF5, nE5, $03, nF5, $1B
(1)  196/   C1DA9 : (MACRO)             	smpsLoop            $00, $02, Ending_Loop09
(1)  196/   C1DA9 : F7                          dc.b    $F7
(1)  196/   C1DAA : 0002                        dc.b    $00,$02
(1)  196/   C1DAC : 959D                                dc.w    z80_ptr(ENDING_LOOP09)
(1)  197/   C1DAE : BD12 BABD 0CBC 12BF 	dc.b	nC5, $12, nA4, nC5, $0C, nB4, $12, nD5, nB4, $0C, nC5, $12
            C1DB6 : BC0C BD12         
(1)  198/   C1DBA : C1BD 0C80 06        	dc.b	nE5, nC5, $0C, nRst, $06
(1)  199/   C1DBF : (MACRO)             	smpsAlterVol        $0A
(1)  199/   C1DBF : E60A                        dc.b    $E6,$0A
(1)  200/   C1DC1 :                     
(1)  201/   C1DC1 :                     Ending_Loop0A:
(1)  202/   C1DC1 : C2                  	dc.b	nF5
(1)  203/   C1DC2 : (MACRO)             	smpsAlterVol        $FE
(1)  203/   C1DC2 : E6FE                        dc.b    $E6,$FE
(1)  204/   C1DC4 : (MACRO)             	smpsLoop            $00, $07, Ending_Loop0A
(1)  204/   C1DC4 : F7                          dc.b    $F7
(1)  204/   C1DC5 : 0007                        dc.b    $00,$07
(1)  204/   C1DC7 : C19D                                dc.w    z80_ptr(ENDING_LOOP0A)
(1)  205/   C1DC9 : (MACRO)             	smpsAlterVol        $03
(1)  205/   C1DC9 : E603                        dc.b    $E6,$03
(1)  206/   C1DCB :                     
(1)  207/   C1DCB :                     Ending_Loop0B:
(1)  208/   C1DCB : C712 C403 C70F C40C 	dc.b	nBb5, $12, nG5, $03, nBb5, $0F, nG5, $0C, nC6, $18, nAb5, $06
            C1DD3 : C918 C506         
(1)  209/   C1DD7 : 0603 C909           	dc.b	$06, $03, nC6, $09
(1)  210/   C1DDB : (MACRO)             	smpsLoop            $00, $02, Ending_Loop0B
(1)  210/   C1DDB : F7                          dc.b    $F7
(1)  210/   C1DDC : 0002                        dc.b    $00,$02
(1)  210/   C1DDE : CB9D                                dc.w    z80_ptr(ENDING_LOOP0B)
(1)  211/   C1DE0 : C906 BD03 C0C4 06BD 	dc.b	nC6, $06, nC5, $03, nEb5, nG5, $06, nC5, $03, nEb5, nB5, $18
            C1DE8 : 03C0 C818         
(1)  212/   C1DEC : C706 BD03 C0C4 06BD 	dc.b	nBb5, $06, nC5, $03, nEb5, nG5, $06, nC5, $03, nEb5, nA5, $18
            C1DF4 : 03C0 C618         
(1)  213/   C1DF8 : C012 C218 C403 C2C0 	dc.b	nEb5, $12, nF5, $18, nG5, $03, nF5, nEb5, $12, nF5, nF5, $0C
            C1E00 : 12C2 C20C         
(1)  214/   C1E04 : BD06 C003 BD06 C003 	dc.b	nC5, $06, nEb5, $03, nC5, $06, nEb5, $03, nC6, $06, nG5, $03
            C1E0C : C906 C403         
(1)  215/   C1E10 : 03C0 BD09 C403 C5C4 	dc.b	$03, nEb5, nC5, $09, nG5, $03, nAb5, nG5, $30
            C1E18 : 30               
(1)  216/   C1E19 : (MACRO)             	smpsStop
(1)  216/   C1E19 : F2                          dc.b    $F2
(1)  217/   C1E1A :                     
(1)  218/   C1E1A :                     ; FM5 Data
(1)  219/   C1E1A :                     Ending_FM5:
(1)  220/   C1E1A : (MACRO)             	smpsSetvoice        $02
(1)  220/   C1E1A :  (MACRO-2)                  smpsFMvoice $02
(1)  220/   C1E1A : EF02                                dc.b    $EF,$02
(1)  221/   C1E1C : (MACRO)             	smpsPan             panLeft, $00
(1)  221/   C1E1C : =$0                 panNone set $00
(1)  221/   C1E1C : =$40                panRight set $40
(1)  221/   C1E1C : =$80                panLeft set $80
(1)  221/   C1E1C : =$C0                panCentre set $C0
(1)  221/   C1E1C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  221/   C1E1C : E080                        dc.b $E0,PANLEFT+$00
(1)  222/   C1E1E : 8001 8012 C403 C6C4 	dc.b	nRst, $01, nRst, $12, nG5, $03, nA5, nG5, $17
            C1E26 : 17               
(1)  223/   C1E27 :                     
(1)  224/   C1E27 :                     Ending_Loop04:
(1)  225/   C1E27 : C130 BD18 BF0C C2   	dc.b	nE5, $30, nC5, $18, nD5, $0C, nF5
(1)  226/   C1E2E : (MACRO)             	smpsLoop            $00, $02, Ending_Loop04
(1)  226/   C1E2E : F7                          dc.b    $F7
(1)  226/   C1E2F : 0002                        dc.b    $00,$02
(1)  226/   C1E31 : 279E                                dc.w    z80_ptr(ENDING_LOOP04)
(1)  227/   C1E33 : BD12 C1BD 0CBD 12C1 	dc.b	nC5, $12, nE5, nC5, $0C, nC5, $12, nE5, nC5, $0C, nD5, $12
            C1E3B : BD0C BF12         
(1)  228/   C1E3F : C2BF 0CC6 12C2 BF0C 	dc.b	nF5, nD5, $0C, nA5, $12, nF5, nD5, $0C
(1)  229/   C1E47 :                     
(1)  230/   C1E47 :                     Ending_Loop05:
(1)  231/   C1E47 : BD03 03BC 06BD BC03 	dc.b	nC5, $03, $03, nB4, $06, nC5, nB4, $03, nC5, $1B, nD5, $03
            C1E4F : BD1B BF03         
(1)  232/   C1E53 : 03BD 06BF BD03 BF1B 	dc.b	$03, nC5, $06, nD5, nC5, $03, nD5, $1B
(1)  233/   C1E5B : (MACRO)             	smpsLoop            $00, $02, Ending_Loop05
(1)  233/   C1E5B : F7                          dc.b    $F7
(1)  233/   C1E5C : 0002                        dc.b    $00,$02
(1)  233/   C1E5E : 479E                                dc.w    z80_ptr(ENDING_LOOP05)
(1)  234/   C1E60 : BA12 B6BA 0CB8 12BC 	dc.b	nA4, $12, nF4, nA4, $0C, nG4, $12, nB4, nG4, $0C, nA4, $12
            C1E68 : B80C BA12         
(1)  235/   C1E6C : BDBA 0C80 06        	dc.b	nC5, nA4, $0C, nRst, $06
(1)  236/   C1E71 : (MACRO)             	smpsAlterVol        $0A
(1)  236/   C1E71 : E60A                        dc.b    $E6,$0A
(1)  237/   C1E73 :                     
(1)  238/   C1E73 :                     Ending_Loop06:
(1)  239/   C1E73 : BF06                	dc.b	nD5, $06
(1)  240/   C1E75 : (MACRO)             	smpsAlterVol        $FE
(1)  240/   C1E75 : E6FE                        dc.b    $E6,$FE
(1)  241/   C1E77 : (MACRO)             	smpsLoop            $00, $07, Ending_Loop06
(1)  241/   C1E77 : F7                          dc.b    $F7
(1)  241/   C1E78 : 0007                        dc.b    $00,$07
(1)  241/   C1E7A : 739E                                dc.w    z80_ptr(ENDING_LOOP06)
(1)  242/   C1E7C : (MACRO)             	smpsAlterVol        $03
(1)  242/   C1E7C : E603                        dc.b    $E6,$03
(1)  243/   C1E7E :                     
(1)  244/   C1E7E :                     Ending_Loop07:
(1)  245/   C1E7E : C412 C003 C40F C00C 	dc.b	nG5, $12, nEb5, $03, nG5, $0F, nEb5, $0C, nAb5, $18, nF5, $06
            C1E86 : C518 C206         
(1)  246/   C1E8A : 0603 C509           	dc.b	$06, $03, nAb5, $09
(1)  247/   C1E8E : (MACRO)             	smpsLoop            $00, $02, Ending_Loop07
(1)  247/   C1E8E : F7                          dc.b    $F7
(1)  247/   C1E8F : 0002                        dc.b    $00,$02
(1)  247/   C1E91 : 7E9E                                dc.w    z80_ptr(ENDING_LOOP07)
(1)  248/   C1E93 : 8001 C906 BD03 C0C4 	dc.b	nRst, $01, nC6, $06, nC5, $03, nEb5, nG5, $06, nC5, $03, nEb5
            C1E9B : 06BD 03C0         
(1)  249/   C1E9F : 02C4 1880 01C7 06BD 	dc.b	$02, nG5, $18, nRst, $01, nBb5, $06, nC5, $03, nEb5, nG5, $06
            C1EA7 : 03C0 C406         
(1)  250/   C1EAB : BD03 C002 C418 BD12 	dc.b	nC5, $03, nEb5, $02, nG5, $18, nC5, $12, nD5, $18, nEb5, $03
            C1EB3 : BF18 C003         
(1)  251/   C1EB7 : BFBD 12BF BF0C B906 	dc.b	nD5, nC5, $12, nD5, nD5, $0C, nAb4, $06, nC5, $03, nAb4, $06
            C1EBF : BD03 B906         
(1)  252/   C1EC3 : BD03 C406 C003 03BD 	dc.b	nC5, $03, nG5, $06, nEb5, $03, $03, nC5, nAb4, $09, nEb5, $03
            C1ECB : B909 C003         
(1)  253/   C1ECF : C2C0 30             	dc.b	nF5, nEb5, $30
(1)  254/   C1ED2 : (MACRO)             	smpsStop
(1)  254/   C1ED2 : F2                          dc.b    $F2
(1)  255/   C1ED3 :                     
(1)  256/   C1ED3 :                     ; PSG1 Data
(1)  257/   C1ED3 :                     Ending_PSG1:
(1)  258/   C1ED3 : (MACRO)             	smpsAlterNote       $01
(1)  258/   C1ED3 :  (MACRO-2)                  smpsDetune      $01
(1)  258/   C1ED3 : E101                        dc.b    $E1,$01
(1)  259/   C1ED5 : 8002                	dc.b	nRst, $02
(1)  260/   C1ED7 :                     
(1)  261/   C1ED7 :                     ; PSG2 Data
(1)  262/   C1ED7 :                     Ending_PSG2:
(1)  263/   C1ED7 : 8001 8006 C103 C2C1 	dc.b	nRst, $01, nRst, $06, nE5, $03, nF5, nE5, $24
            C1EDF : 24               
(1)  264/   C1EE0 : (MACRO)             	smpsCall            Ending_Call01
(1)  264/   C1EE0 : F8                          dc.b    $F8
(1)  264/   C1EE1 : 029C                                dc.w    z80_ptr(ENDING_CALL01)
(1)  265/   C1EE3 : 8030 8018           	dc.b	nRst, $30, nRst, $18
(1)  266/   C1EE7 : (MACRO)             	smpsPSGAlterVol     $02
(1)  266/   C1EE7 : EC02                        dc.b    $EC,$02
(1)  267/   C1EE9 : (MACRO)             	smpsCall            Ending_Call05
(1)  267/   C1EE9 : F8                          dc.b    $F8
(1)  267/   C1EEA : E89A                                dc.w    z80_ptr(ENDING_CALL05)
(1)  268/   C1EEC : (MACRO)             	smpsPSGAlterVol     $FE
(1)  268/   C1EEC : ECFE                        dc.b    $EC,$FE
(1)  269/   C1EEE : 8006 CE02 8001 D002 	dc.b	nRst, $06, nF6, $02, nRst, $01, nG6, $02, nRst, $01, nA6, $02
            C1EF6 : 8001 D202         
(1)  270/   C1EFA : 8001 8003 CE02 8001 	dc.b	nRst, $01, nRst, $03, nF6, $02, nRst, $01, nG6, $02, nRst, $01
            C1F02 : D002 8001         
(1)  271/   C1F06 : D214 8004 8006 D002 	dc.b	nA6, $14, nRst, $04, nRst, $06, nG6, $02, nRst, $01, nA6, $02
            C1F0E : 8001 D202         
(1)  272/   C1F12 : 8001 D402 8001 8003 	dc.b	nRst, $01, nB6, $02, nRst, $01, nRst, $03, nG6, $02, nRst, $01
            C1F1A : D002 8001         
(1)  273/   C1F1E : D202 8001 D414 8004 	dc.b	nA6, $02, nRst, $01, nB6, $14, nRst, $04, nRst, $06, nA6, $02
            C1F26 : 8006 D202         
(1)  274/   C1F2A : 8001 D402 8001 D502 	dc.b	nRst, $01, nB6, $02, nRst, $01, nC7, $02, nRst, $01, nRst, $03
            C1F32 : 8001 8003         
(1)  275/   C1F36 : D202 8001 D402 8001 	dc.b	nA6, $02, nRst, $01, nB6, $02, nRst, $01, nC7, $14, nRst, $04
            C1F3E : D514 8004         
(1)  276/   C1F42 : (MACRO)             	smpsCall            Ending_Call08
(1)  276/   C1F42 : F8                          dc.b    $F8
(1)  276/   C1F43 : 4F9F                                dc.w    z80_ptr(ENDING_CALL08)
(1)  277/   C1F45 : (MACRO)             	smpsCall            Ending_Call03
(1)  277/   C1F45 : F8                          dc.b    $F8
(1)  277/   C1F46 : 379C                                dc.w    z80_ptr(ENDING_CALL03)
(1)  278/   C1F48 : CC30 E718 8018      	dc.b	nEb6, $30, smpsNoAttack, $18, nRst, $18
(1)  279/   C1F4E : (MACRO)             	smpsStop
(1)  279/   C1F4E : F2                          dc.b    $F2
(1)  280/   C1F4F :                     
(1)  281/   C1F4F :                     Ending_Call08:
(1)  282/   C1F4F : (MACRO)             	smpsPSGAlterVol     $07
(1)  282/   C1F4F : EC07                        dc.b    $EC,$07
(1)  283/   C1F51 : C403 C6             	dc.b	nG5, $03, nA5
(1)  284/   C1F54 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  284/   C1F54 : ECFF                        dc.b    $EC,$FF
(1)  285/   C1F56 : C803 C9             	dc.b	nB5, $03, nC6
(1)  286/   C1F59 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  286/   C1F59 : ECFF                        dc.b    $EC,$FF
(1)  287/   C1F5B : C803 C9             	dc.b	nB5, $03, nC6
(1)  288/   C1F5E : (MACRO)             	smpsPSGAlterVol     $FF
(1)  288/   C1F5E : ECFF                        dc.b    $EC,$FF
(1)  289/   C1F60 : CB03 CD             	dc.b	nD6, $03, nE6
(1)  290/   C1F63 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  290/   C1F63 : ECFF                        dc.b    $EC,$FF
(1)  291/   C1F65 : CB03 CD             	dc.b	nD6, $03, nE6
(1)  292/   C1F68 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  292/   C1F68 : ECFF                        dc.b    $EC,$FF
(1)  293/   C1F6A : CE03 D0             	dc.b	nF6, $03, nG6
(1)  294/   C1F6D : (MACRO)             	smpsPSGAlterVol     $FF
(1)  294/   C1F6D : ECFF                        dc.b    $EC,$FF
(1)  295/   C1F6F : CE03 D0             	dc.b	nF6, $03, nG6
(1)  296/   C1F72 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  296/   C1F72 : ECFF                        dc.b    $EC,$FF
(1)  297/   C1F74 : D203 D4             	dc.b	nA6, $03, nB6
(1)  298/   C1F77 : (MACRO)             	smpsReturn
(1)  298/   C1F77 : F9                                  dc.b    $F9
(1)  299/   C1F78 :                     
(1)  300/   C1F78 :                     ; PSG3 Data
(1)  301/   C1F78 :                     Ending_PSG3:
(1)  302/   C1F78 : 8002                	dc.b	nRst, $02
(1)  303/   C1F7A : (MACRO)             	smpsCall            Ending_Call04
(1)  303/   C1F7A : F8                          dc.b    $F8
(1)  303/   C1F7B : FB9A                                dc.w    z80_ptr(ENDING_CALL04)
(1)  304/   C1F7D : (MACRO)             	smpsAlterPitch      $F4
(1)  304/   C1F7D :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  304/   C1F7D : FBF4                                dc.b    $FB,$F4
(1)  305/   C1F7F : (MACRO)             	smpsCall            Ending_Call05
(1)  305/   C1F7F : F8                          dc.b    $F8
(1)  305/   C1F80 : E89A                                dc.w    z80_ptr(ENDING_CALL05)
(1)  306/   C1F82 : (MACRO)             	smpsCall            Ending_Call06
(1)  306/   C1F82 : F8                          dc.b    $F8
(1)  306/   C1F83 : 269B                                dc.w    z80_ptr(ENDING_CALL06)
(1)  307/   C1F85 : (MACRO)             	smpsCall            Ending_Call08
(1)  307/   C1F85 : F8                          dc.b    $F8
(1)  307/   C1F86 : 4F9F                                dc.w    z80_ptr(ENDING_CALL08)
(1)  308/   C1F88 : (MACRO)             	smpsCall            Ending_Call07
(1)  308/   C1F88 : F8                          dc.b    $F8
(1)  308/   C1F89 : 379B                                dc.w    z80_ptr(ENDING_CALL07)
(1)  309/   C1F8B : D318 8018           	dc.b	nBb6, $18, nRst, $18
(1)  310/   C1F8F : (MACRO)             	smpsStop
(1)  310/   C1F8F : F2                          dc.b    $F2
(1)  311/   C1F90 :                     
(1)  312/   C1F90 :                     ; DAC Data
(1)  313/   C1F90 :                     Ending_DAC:
(1)  314/   C1F90 : (MACRO)             	smpsCall            Ending_Call00
(1)  314/   C1F90 : F8                          dc.b    $F8
(1)  314/   C1F91 : F59F                                dc.w    z80_ptr(ENDING_CALL00)
(1)  315/   C1F93 :                     
(1)  316/   C1F93 :                     Ending_Loop00:
(1)  317/   C1F93 : 8115 8103 0606 820C 	dc.b	dKick, $15, dKick, $03, $06, $06, dSnare, $0C
(1)  318/   C1F9B : (MACRO)             	smpsLoop            $00, $07, Ending_Loop00
(1)  318/   C1F9B : F7                          dc.b    $F7
(1)  318/   C1F9C : 0007                        dc.b    $00,$07
(1)  318/   C1F9E : 939F                                dc.w    z80_ptr(ENDING_LOOP00)
(1)  319/   C1FA0 : (MACRO)             	smpsCall            Ending_Call00
(1)  319/   C1FA0 : F8                          dc.b    $F8
(1)  319/   C1FA1 : F59F                                dc.w    z80_ptr(ENDING_CALL00)
(1)  320/   C1FA3 :                     
(1)  321/   C1FA3 :                     Ending_Loop01:
(1)  322/   C1FA3 : 810C 8209 8103 0606 	dc.b	dKick, $0C, dSnare, $09, dKick, $03, $06, $06, dSnare, $0C
            C1FAB : 820C               
(1)  323/   C1FAD : (MACRO)             	smpsLoop            $00, $07, Ending_Loop01
(1)  323/   C1FAD : F7                          dc.b    $F7
(1)  323/   C1FAE : 0007                        dc.b    $00,$07
(1)  323/   C1FB0 : A39F                                dc.w    z80_ptr(ENDING_LOOP01)
(1)  324/   C1FB2 : 8106 8282 8282 8282 	dc.b	dKick, $06, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, $03, dSnare
            C1FBA : 8203 82            
(1)  325/   C1FBD :                     
(1)  326/   C1FBD :                     Ending_Loop02:
(1)  327/   C1FBD : 810C 8209 8103 0606 	dc.b	dKick, $0C, dSnare, $09, dKick, $03, $06, $06, dSnare, $0C, dKick, $0C
            C1FC5 : 820C 810C         
(1)  328/   C1FC9 : 8209 8103 0606 8206 	dc.b	dSnare, $09, dKick, $03, $06, $06, dSnare, $06, $03, $03
            C1FD1 : 0303               
(1)  329/   C1FD3 : (MACRO)             	smpsLoop            $00, $03, Ending_Loop02
(1)  329/   C1FD3 : F7                          dc.b    $F7
(1)  329/   C1FD4 : 0003                        dc.b    $00,$03
(1)  329/   C1FD6 : BD9F                                dc.w    z80_ptr(ENDING_LOOP02)
(1)  330/   C1FD8 :                     
(1)  331/   C1FD8 :                     Ending_Loop03:
(1)  332/   C1FD8 : 810C 8206 810C 8206 	dc.b	dKick, $0C, dSnare, $06, dKick, $0C, dSnare, $06, $06, $03, $03
            C1FE0 : 0603 03            
(1)  333/   C1FE3 : (MACRO)             	smpsLoop            $00, $02, Ending_Loop03
(1)  333/   C1FE3 : F7                          dc.b    $F7
(1)  333/   C1FE4 : 0002                        dc.b    $00,$02
(1)  333/   C1FE6 : D89F                                dc.w    z80_ptr(ENDING_LOOP03)
(1)  334/   C1FE8 : 810C 8209 8103 0606 	dc.b	dKick, $0C, dSnare, $09, dKick, $03, $06, $06, dSnare, $0C, dKick, $30
            C1FF0 : 820C 8130         
(1)  335/   C1FF4 : (MACRO)             	smpsStop
(1)  335/   C1FF4 : F2                          dc.b    $F2
(1)  336/   C1FF5 :                     
(1)  337/   C1FF5 :                     Ending_Call00:
(1)  338/   C1FF5 : 8115 8103 0606 8282 	dc.b	dKick, $15, dKick, $03, $06, $06, dSnare, dSnare, $03, $03
            C1FFD : 0303               
(1)  339/   C1FFF : (MACRO)             	smpsReturn
(1)  339/   C1FFF : F9                                  dc.b    $F9
(1)  340/   C2000 :                     
(1)  341/   C2000 :                     Ending_Voices:
(1)  342/   C2000 :                     ;	Voice $00
(1)  343/   C2000 :                     ;	$08
(1)  344/   C2000 :                     ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  345/   C2000 :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $80
(1)  346/   C2000 : (MACRO)             	smpsVcAlgorithm     $00
(1)  346/   C2000 : =$0                 vcAlgorithm set $00
(1)  347/   C2000 : (MACRO)             	smpsVcFeedback      $01
(1)  347/   C2000 : =$1                 vcFeedback set $01
(1)  348/   C2000 : (MACRO)             	smpsVcUnusedBits    $00
(1)  348/   C2000 : =$0                 vcUnusedBits set $00
(1)  348/   C2000 : =$0                 vcD1R1Unk set 0
(1)  348/   C2000 : =$0                 vcD1R2Unk set 0
(1)  348/   C2000 : =$0                 vcD1R3Unk set 0
(1)  348/   C2000 : =$0                 vcD1R4Unk set 0
(1)  349/   C2000 : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  349/   C2000 : =$0                 vcDT1 set $00
(1)  349/   C2000 : =$3                 vcDT2 set $03
(1)  349/   C2000 : =$7                 vcDT3 set $07
(1)  349/   C2000 : =$0                 vcDT4 set $00
(1)  350/   C2000 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)  350/   C2000 : =$0                 vcCF1 set $00
(1)  350/   C2000 : =$0                 vcCF2 set $00
(1)  350/   C2000 : =$0                 vcCF3 set $00
(1)  350/   C2000 : =$9                 vcCF4 set $09
(1)  351/   C2000 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  351/   C2000 : =$1                 vcRS1 set $01
(1)  351/   C2000 : =$1                 vcRS2 set $01
(1)  351/   C2000 : =$0                 vcRS3 set $00
(1)  351/   C2000 : =$0                 vcRS4 set $00
(1)  352/   C2000 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  352/   C2000 : =$1F                vcAR1 set $1F
(1)  352/   C2000 : =$1F                vcAR2 set $1F
(1)  352/   C2000 : =$1F                vcAR3 set $1F
(1)  352/   C2000 : =$1F                vcAR4 set $1F
(1)  353/   C2000 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  353/   C2000 : =$0                 vcAM1 set $00<<5
(1)  353/   C2000 : =$0                 vcAM2 set $00<<5
(1)  353/   C2000 : =$0                 vcAM3 set $00<<5
(1)  353/   C2000 : =$0                 vcAM4 set $00<<5
(1)  354/   C2000 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  354/   C2000 : =$A                 vcD1R1 set $0A
(1)  354/   C2000 : =$A                 vcD1R2 set $0A
(1)  354/   C2000 : =$E                 vcD1R3 set $0E
(1)  354/   C2000 : =$12                vcD1R4 set $12
(1)  355/   C2000 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  355/   C2000 : =$3                 vcD2R1 set $03
(1)  355/   C2000 : =$4                 vcD2R2 set $04
(1)  355/   C2000 : =$4                 vcD2R3 set $04
(1)  355/   C2000 : =$0                 vcD2R4 set $00
(1)  356/   C2000 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  356/   C2000 : =$2                 vcDL1 set $02
(1)  356/   C2000 : =$2                 vcDL2 set $02
(1)  356/   C2000 : =$2                 vcDL3 set $02
(1)  356/   C2000 : =$2                 vcDL4 set $02
(1)  357/   C2000 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  357/   C2000 : =$F                 vcRR1 set $0F
(1)  357/   C2000 : =$F                 vcRR2 set $0F
(1)  357/   C2000 : =$F                 vcRR3 set $0F
(1)  357/   C2000 : =$F                 vcRR4 set $0F
(1)  358/   C2000 : (MACRO)             	smpsVcTotalLevel    $80, $13, $30, $25
(1)  358/   C2000 : =$80                vcTL1 set $80
(1)  358/   C2000 : =$13                vcTL2 set $13
(1)  358/   C2000 : =$30                vcTL3 set $30
(1)  358/   C2000 : =$25                vcTL4 set $25
(1)  358/   C2000 : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  358/   C2001 :                     ;   0     1     2     3     4     5     6     7
(1)  358/   C2001 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  358/   C2001 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  358/   C2001 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  358/   C2001 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  358/   C2001 : =$80                vcTLMask1 set $80
(1)  358/   C2001 :                     
(1)  358/   C2001 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  358/   C2001 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  358/   C2001 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  358/   C2001 : =$80                vcTLMask1 set $80
(1)  358/   C2001 : =$0                 vcTL1 set vcTL1&$7F
(1)  358/   C2001 : =$13                vcTL2 set vcTL2&$7F
(1)  358/   C2001 : =$30                vcTL3 set vcTL3&$7F
(1)  358/   C2001 : =$25                vcTL4 set vcTL4&$7F
(1)  358/   C2001 :                     
(1)  358/   C2001 : 0970 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  358/   C2005 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  358/   C2009 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  358/   C200D : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  358/   C2011 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  358/   C2015 : 2530 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  359/   C2019 :                     
(1)  360/   C2019 :                     ;	Voice $01
(1)  361/   C2019 :                     ;	$3D
(1)  362/   C2019 :                     ;	$01, $08, $01, $01, 	$90, $8D, $8F, $53, 	$0E, $0E, $0E, $05
(1)  363/   C2019 :                     ;	$02, $03, $02, $04, 	$1F, $FF, $1F, $0F, 	$16, $28, $27, $80
(1)  364/   C2019 : (MACRO)             	smpsVcAlgorithm     $05
(1)  364/   C2019 : =$5                 vcAlgorithm set $05
(1)  365/   C2019 : (MACRO)             	smpsVcFeedback      $07
(1)  365/   C2019 : =$7                 vcFeedback set $07
(1)  366/   C2019 : (MACRO)             	smpsVcUnusedBits    $00
(1)  366/   C2019 : =$0                 vcUnusedBits set $00
(1)  366/   C2019 : =$0                 vcD1R1Unk set 0
(1)  366/   C2019 : =$0                 vcD1R2Unk set 0
(1)  366/   C2019 : =$0                 vcD1R3Unk set 0
(1)  366/   C2019 : =$0                 vcD1R4Unk set 0
(1)  367/   C2019 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  367/   C2019 : =$0                 vcDT1 set $00
(1)  367/   C2019 : =$0                 vcDT2 set $00
(1)  367/   C2019 : =$0                 vcDT3 set $00
(1)  367/   C2019 : =$0                 vcDT4 set $00
(1)  368/   C2019 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $08, $01
(1)  368/   C2019 : =$1                 vcCF1 set $01
(1)  368/   C2019 : =$1                 vcCF2 set $01
(1)  368/   C2019 : =$8                 vcCF3 set $08
(1)  368/   C2019 : =$1                 vcCF4 set $01
(1)  369/   C2019 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  369/   C2019 : =$1                 vcRS1 set $01
(1)  369/   C2019 : =$2                 vcRS2 set $02
(1)  369/   C2019 : =$2                 vcRS3 set $02
(1)  369/   C2019 : =$2                 vcRS4 set $02
(1)  370/   C2019 : (MACRO)             	smpsVcAttackRate    $13, $0F, $0D, $10
(1)  370/   C2019 : =$13                vcAR1 set $13
(1)  370/   C2019 : =$F                 vcAR2 set $0F
(1)  370/   C2019 : =$D                 vcAR3 set $0D
(1)  370/   C2019 : =$10                vcAR4 set $10
(1)  371/   C2019 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  371/   C2019 : =$0                 vcAM1 set $00<<5
(1)  371/   C2019 : =$0                 vcAM2 set $00<<5
(1)  371/   C2019 : =$0                 vcAM3 set $00<<5
(1)  371/   C2019 : =$0                 vcAM4 set $00<<5
(1)  372/   C2019 : (MACRO)             	smpsVcDecayRate1    $05, $0E, $0E, $0E
(1)  372/   C2019 : =$5                 vcD1R1 set $05
(1)  372/   C2019 : =$E                 vcD1R2 set $0E
(1)  372/   C2019 : =$E                 vcD1R3 set $0E
(1)  372/   C2019 : =$E                 vcD1R4 set $0E
(1)  373/   C2019 : (MACRO)             	smpsVcDecayRate2    $04, $02, $03, $02
(1)  373/   C2019 : =$4                 vcD2R1 set $04
(1)  373/   C2019 : =$2                 vcD2R2 set $02
(1)  373/   C2019 : =$3                 vcD2R3 set $03
(1)  373/   C2019 : =$2                 vcD2R4 set $02
(1)  374/   C2019 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  374/   C2019 : =$0                 vcDL1 set $00
(1)  374/   C2019 : =$1                 vcDL2 set $01
(1)  374/   C2019 : =$F                 vcDL3 set $0F
(1)  374/   C2019 : =$1                 vcDL4 set $01
(1)  375/   C2019 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  375/   C2019 : =$F                 vcRR1 set $0F
(1)  375/   C2019 : =$F                 vcRR2 set $0F
(1)  375/   C2019 : =$F                 vcRR3 set $0F
(1)  375/   C2019 : =$F                 vcRR4 set $0F
(1)  376/   C2019 : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $16
(1)  376/   C2019 : =$80                vcTL1 set $80
(1)  376/   C2019 : =$27                vcTL2 set $27
(1)  376/   C2019 : =$28                vcTL3 set $28
(1)  376/   C2019 : =$16                vcTL4 set $16
(1)  376/   C2019 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  376/   C201A :                     ;   0     1     2     3     4     5     6     7
(1)  376/   C201A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  376/   C201A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  376/   C201A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  376/   C201A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  376/   C201A : =$80                vcTLMask1 set $80
(1)  376/   C201A :                     
(1)  376/   C201A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  376/   C201A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  376/   C201A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  376/   C201A : =$80                vcTLMask1 set $80
(1)  376/   C201A : =$0                 vcTL1 set vcTL1&$7F
(1)  376/   C201A : =$27                vcTL2 set vcTL2&$7F
(1)  376/   C201A : =$28                vcTL3 set vcTL3&$7F
(1)  376/   C201A : =$16                vcTL4 set vcTL4&$7F
(1)  376/   C201A :                     
(1)  376/   C201A : 0108 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  376/   C201E : 908D 8F53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  376/   C2022 : 0E0E 0E05                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  376/   C2026 : 0203 0204                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  376/   C202A : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  376/   C202E : 16A8 A780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  377/   C2032 :                     
(1)  378/   C2032 :                     ;	Voice $02
(1)  379/   C2032 :                     ;	$3A
(1)  380/   C2032 :                     ;	$11, $1A, $00, $11, 	$89, $59, $4F, $4F, 	$0A, $0D, $06, $09
(1)  381/   C2032 :                     ;	$00, $00, $00, $01, 	$1F, $FF, $0F, $5F, 	$20, $2E, $3B, $80
(1)  382/   C2032 : (MACRO)             	smpsVcAlgorithm     $02
(1)  382/   C2032 : =$2                 vcAlgorithm set $02
(1)  383/   C2032 : (MACRO)             	smpsVcFeedback      $07
(1)  383/   C2032 : =$7                 vcFeedback set $07
(1)  384/   C2032 : (MACRO)             	smpsVcUnusedBits    $00
(1)  384/   C2032 : =$0                 vcUnusedBits set $00
(1)  384/   C2032 : =$0                 vcD1R1Unk set 0
(1)  384/   C2032 : =$0                 vcD1R2Unk set 0
(1)  384/   C2032 : =$0                 vcD1R3Unk set 0
(1)  384/   C2032 : =$0                 vcD1R4Unk set 0
(1)  385/   C2032 : (MACRO)             	smpsVcDetune        $01, $00, $01, $01
(1)  385/   C2032 : =$1                 vcDT1 set $01
(1)  385/   C2032 : =$0                 vcDT2 set $00
(1)  385/   C2032 : =$1                 vcDT3 set $01
(1)  385/   C2032 : =$1                 vcDT4 set $01
(1)  386/   C2032 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $0A, $01
(1)  386/   C2032 : =$1                 vcCF1 set $01
(1)  386/   C2032 : =$0                 vcCF2 set $00
(1)  386/   C2032 : =$A                 vcCF3 set $0A
(1)  386/   C2032 : =$1                 vcCF4 set $01
(1)  387/   C2032 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $02
(1)  387/   C2032 : =$1                 vcRS1 set $01
(1)  387/   C2032 : =$1                 vcRS2 set $01
(1)  387/   C2032 : =$1                 vcRS3 set $01
(1)  387/   C2032 : =$2                 vcRS4 set $02
(1)  388/   C2032 : (MACRO)             	smpsVcAttackRate    $0F, $0F, $19, $09
(1)  388/   C2032 : =$F                 vcAR1 set $0F
(1)  388/   C2032 : =$F                 vcAR2 set $0F
(1)  388/   C2032 : =$19                vcAR3 set $19
(1)  388/   C2032 : =$9                 vcAR4 set $09
(1)  389/   C2032 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  389/   C2032 : =$0                 vcAM1 set $00<<5
(1)  389/   C2032 : =$0                 vcAM2 set $00<<5
(1)  389/   C2032 : =$0                 vcAM3 set $00<<5
(1)  389/   C2032 : =$0                 vcAM4 set $00<<5
(1)  390/   C2032 : (MACRO)             	smpsVcDecayRate1    $09, $06, $0D, $0A
(1)  390/   C2032 : =$9                 vcD1R1 set $09
(1)  390/   C2032 : =$6                 vcD1R2 set $06
(1)  390/   C2032 : =$D                 vcD1R3 set $0D
(1)  390/   C2032 : =$A                 vcD1R4 set $0A
(1)  391/   C2032 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1)  391/   C2032 : =$1                 vcD2R1 set $01
(1)  391/   C2032 : =$0                 vcD2R2 set $00
(1)  391/   C2032 : =$0                 vcD2R3 set $00
(1)  391/   C2032 : =$0                 vcD2R4 set $00
(1)  392/   C2032 : (MACRO)             	smpsVcDecayLevel    $05, $00, $0F, $01
(1)  392/   C2032 : =$5                 vcDL1 set $05
(1)  392/   C2032 : =$0                 vcDL2 set $00
(1)  392/   C2032 : =$F                 vcDL3 set $0F
(1)  392/   C2032 : =$1                 vcDL4 set $01
(1)  393/   C2032 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  393/   C2032 : =$F                 vcRR1 set $0F
(1)  393/   C2032 : =$F                 vcRR2 set $0F
(1)  393/   C2032 : =$F                 vcRR3 set $0F
(1)  393/   C2032 : =$F                 vcRR4 set $0F
(1)  394/   C2032 : (MACRO)             	smpsVcTotalLevel    $80, $3B, $2E, $20
(1)  394/   C2032 : =$80                vcTL1 set $80
(1)  394/   C2032 : =$3B                vcTL2 set $3B
(1)  394/   C2032 : =$2E                vcTL3 set $2E
(1)  394/   C2032 : =$20                vcTL4 set $20
(1)  394/   C2032 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  394/   C2033 :                     ;   0     1     2     3     4     5     6     7
(1)  394/   C2033 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  394/   C2033 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  394/   C2033 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  394/   C2033 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  394/   C2033 : =$80                vcTLMask1 set $80
(1)  394/   C2033 :                     
(1)  394/   C2033 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  394/   C2033 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  394/   C2033 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  394/   C2033 : =$80                vcTLMask1 set $80
(1)  394/   C2033 : =$0                 vcTL1 set vcTL1&$7F
(1)  394/   C2033 : =$3B                vcTL2 set vcTL2&$7F
(1)  394/   C2033 : =$2E                vcTL3 set vcTL3&$7F
(1)  394/   C2033 : =$20                vcTL4 set vcTL4&$7F
(1)  394/   C2033 :                     
(1)  394/   C2033 : 111A 0011                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  394/   C2037 : 8959 4F4F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  394/   C203B : 0A0D 0609                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  394/   C203F : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  394/   C2043 : 1FFF 0F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  394/   C2047 : 202E 3B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  395/   C204B :                     
(1)  396/   C204B :                     ;	Voice $03
(1)  397/   C204B :                     ;	$23
(1)  398/   C204B :                     ;	$6E, $34, $26, $74, 	$0E, $0E, $0E, $0D, 	$08, $07, $05, $05
(1)  399/   C204B :                     ;	$02, $02, $03, $12, 	$1F, $2F, $2F, $2F, 	$29, $9F, $24, $82
(1)  400/   C204B : (MACRO)             	smpsVcAlgorithm     $03
(1)  400/   C204B : =$3                 vcAlgorithm set $03
(1)  401/   C204B : (MACRO)             	smpsVcFeedback      $04
(1)  401/   C204B : =$4                 vcFeedback set $04
(1)  402/   C204B : (MACRO)             	smpsVcUnusedBits    $00
(1)  402/   C204B : =$0                 vcUnusedBits set $00
(1)  402/   C204B : =$0                 vcD1R1Unk set 0
(1)  402/   C204B : =$0                 vcD1R2Unk set 0
(1)  402/   C204B : =$0                 vcD1R3Unk set 0
(1)  402/   C204B : =$0                 vcD1R4Unk set 0
(1)  403/   C204B : (MACRO)             	smpsVcDetune        $07, $02, $03, $06
(1)  403/   C204B : =$7                 vcDT1 set $07
(1)  403/   C204B : =$2                 vcDT2 set $02
(1)  403/   C204B : =$3                 vcDT3 set $03
(1)  403/   C204B : =$6                 vcDT4 set $06
(1)  404/   C204B : (MACRO)             	smpsVcCoarseFreq    $04, $06, $04, $0E
(1)  404/   C204B : =$4                 vcCF1 set $04
(1)  404/   C204B : =$6                 vcCF2 set $06
(1)  404/   C204B : =$4                 vcCF3 set $04
(1)  404/   C204B : =$E                 vcCF4 set $0E
(1)  405/   C204B : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  405/   C204B : =$0                 vcRS1 set $00
(1)  405/   C204B : =$0                 vcRS2 set $00
(1)  405/   C204B : =$0                 vcRS3 set $00
(1)  405/   C204B : =$0                 vcRS4 set $00
(1)  406/   C204B : (MACRO)             	smpsVcAttackRate    $0D, $0E, $0E, $0E
(1)  406/   C204B : =$D                 vcAR1 set $0D
(1)  406/   C204B : =$E                 vcAR2 set $0E
(1)  406/   C204B : =$E                 vcAR3 set $0E
(1)  406/   C204B : =$E                 vcAR4 set $0E
(1)  407/   C204B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  407/   C204B : =$0                 vcAM1 set $00<<5
(1)  407/   C204B : =$0                 vcAM2 set $00<<5
(1)  407/   C204B : =$0                 vcAM3 set $00<<5
(1)  407/   C204B : =$0                 vcAM4 set $00<<5
(1)  408/   C204B : (MACRO)             	smpsVcDecayRate1    $05, $05, $07, $08
(1)  408/   C204B : =$5                 vcD1R1 set $05
(1)  408/   C204B : =$5                 vcD1R2 set $05
(1)  408/   C204B : =$7                 vcD1R3 set $07
(1)  408/   C204B : =$8                 vcD1R4 set $08
(1)  409/   C204B : (MACRO)             	smpsVcDecayRate2    $12, $03, $02, $02
(1)  409/   C204B : =$12                vcD2R1 set $12
(1)  409/   C204B : =$3                 vcD2R2 set $03
(1)  409/   C204B : =$2                 vcD2R3 set $02
(1)  409/   C204B : =$2                 vcD2R4 set $02
(1)  410/   C204B : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $01
(1)  410/   C204B : =$2                 vcDL1 set $02
(1)  410/   C204B : =$2                 vcDL2 set $02
(1)  410/   C204B : =$2                 vcDL3 set $02
(1)  410/   C204B : =$1                 vcDL4 set $01
(1)  411/   C204B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  411/   C204B : =$F                 vcRR1 set $0F
(1)  411/   C204B : =$F                 vcRR2 set $0F
(1)  411/   C204B : =$F                 vcRR3 set $0F
(1)  411/   C204B : =$F                 vcRR4 set $0F
(1)  412/   C204B : (MACRO)             	smpsVcTotalLevel    $82, $24, $9F, $29
(1)  412/   C204B : =$82                vcTL1 set $82
(1)  412/   C204B : =$24                vcTL2 set $24
(1)  412/   C204B : =$9F                vcTL3 set $9F
(1)  412/   C204B : =$29                vcTL4 set $29
(1)  412/   C204B : 23                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  412/   C204C :                     ;   0     1     2     3     4     5     6     7
(1)  412/   C204C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  412/   C204C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  412/   C204C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  412/   C204C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  412/   C204C : =$80                vcTLMask1 set $80
(1)  412/   C204C :                     
(1)  412/   C204C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  412/   C204C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  412/   C204C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  412/   C204C : =$80                vcTLMask1 set $80
(1)  412/   C204C : =$2                 vcTL1 set vcTL1&$7F
(1)  412/   C204C : =$24                vcTL2 set vcTL2&$7F
(1)  412/   C204C : =$1F                vcTL3 set vcTL3&$7F
(1)  412/   C204C : =$29                vcTL4 set vcTL4&$7F
(1)  412/   C204C :                     
(1)  412/   C204C : 6E34 2674                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  412/   C2050 : 0E0E 0E0D                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  412/   C2054 : 0807 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  412/   C2058 : 0202 0312                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  412/   C205C : 1F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  412/   C2060 : 291F 2482                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  413/   C2064 :                     
(1)  414/   C2064 :                     
   58/   C2064 :                        Music_16:	include		"music-improved/96 - Super Sonic.asm"
(1)    1/   C2064 :                     Supersonic_Header:
(1)    2/   C2064 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C2064 :                     
(1)    2/   C2064 : =$2                 SourceDriver set 2
(1)    2/   C2064 :                     
(1)    2/   C2064 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C2064 :                     
(1)    2/   C2064 : =$C2064             songStart set *
(1)    2/   C2064 :                     
(1)    2/   C2064 :                     
(1)    3/   C2064 : (MACRO)             	smpsHeaderVoice     Supersonic_Voices
(1)    3/   C2064 : DAA2                                dc.w    z80_ptr(SUPERSONIC_VOICES)
(1)    4/   C2066 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C2066 : 0603                        dc.b    $06,$03
(1)    5/   C2068 : (MACRO)             	smpsHeaderTempo     $01, $FA
(1)    5/   C2068 : 01                          dc.b    $01
(1)    5/   C2069 :  (MACRO-2)                  convertMainTempoMod $FA
(1)    5/   C2069 : 06                                          dc.b    s2TempotoS3($FA)
(1)    6/   C206A :                     
(1)    7/   C206A : (MACRO)             	smpsHeaderDAC       Supersonic_DAC
(1)    7/   C206A :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_DAC
(1)    7/   C206A : AFA2                                dc.w    z80_ptr(SUPERSONIC_DAC)
(1)    7/   C206C : 0000                                dc.w    $00
(1)    8/   C206E : (MACRO)             	smpsHeaderFM        Supersonic_FM1,	$F4, $13
(1)    8/   C206E :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_FM1
(1)    8/   C206E : 94A0                                dc.w    z80_ptr(SUPERSONIC_FM1)
(1)    8/   C2070 : F413                        dc.b    $F4,$13
(1)    9/   C2072 : (MACRO)             	smpsHeaderFM        Supersonic_FM2,	$F4, $0A
(1)    9/   C2072 :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_FM2
(1)    9/   C2072 : ACA1                                dc.w    z80_ptr(SUPERSONIC_FM2)
(1)    9/   C2074 : F40A                        dc.b    $F4,$0A
(1)   10/   C2076 : (MACRO)             	smpsHeaderFM        Supersonic_FM3,	$F4, $13
(1)   10/   C2076 :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_FM3
(1)   10/   C2076 : F5A0                                dc.w    z80_ptr(SUPERSONIC_FM3)
(1)   10/   C2078 : F413                        dc.b    $F4,$13
(1)   11/   C207A : (MACRO)             	smpsHeaderFM        Supersonic_FM4,	$F4, $13
(1)   11/   C207A :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_FM4
(1)   11/   C207A : 44A1                                dc.w    z80_ptr(SUPERSONIC_FM4)
(1)   11/   C207C : F413                        dc.b    $F4,$13
(1)   12/   C207E : (MACRO)             	smpsHeaderFM        Supersonic_FM5,	$F4, $13
(1)   12/   C207E :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_FM5
(1)   12/   C207E : 0BA2                                dc.w    z80_ptr(SUPERSONIC_FM5)
(1)   12/   C2080 : F413                        dc.b    $F4,$13
(1)   13/   C2082 : (MACRO)             	smpsHeaderPSG       Supersonic_PSG1,	$D0, $01, $00, fTone_09
(1)   13/   C2082 :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_PSG1
(1)   13/   C2082 : 6DA2                                dc.w    z80_ptr(SUPERSONIC_PSG1)
(1)   13/   C2084 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   C2084 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   C2085 : 0100 09                     dc.b    $01,$00,FTONE_09
(1)   14/   C2088 : (MACRO)             	smpsHeaderPSG       Supersonic_PSG2,	$D0, $03, $00, $00
(1)   14/   C2088 :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_PSG2
(1)   14/   C2088 : ADA2                                dc.w    z80_ptr(SUPERSONIC_PSG2)
(1)   14/   C208A :  (MACRO-2)                  PSGPitchConvert $D0
(1)   14/   C208A : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   14/   C208B : 0300 00                     dc.b    $03,$00,$00
(1)   15/   C208E : (MACRO)             	smpsHeaderPSG       Supersonic_PSG3,	$00, $03, $00, fTone_04
(1)   15/   C208E :  (MACRO-2)                  CheckedChannelPointer SUPERSONIC_PSG3
(1)   15/   C208E : AEA2                                dc.w    z80_ptr(SUPERSONIC_PSG3)
(1)   15/   C2090 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   C2090 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   C2091 : 0300 04                     dc.b    $03,$00,FTONE_04
(1)   16/   C2094 :                     
(1)   17/   C2094 :                     ; FM1 Data
(1)   18/   C2094 :                     Supersonic_FM1:
(1)   19/   C2094 : 8060 80             	dc.b	nRst, $60, nRst
(1)   20/   C2097 : (MACRO)             	smpsSetvoice        $00
(1)   20/   C2097 :  (MACRO-2)                  smpsFMvoice $00
(1)   20/   C2097 : EF00                                dc.b    $EF,$00
(1)   21/   C2099 :                     
(1)   22/   C2099 :                     Supersonic_Loop09:
(1)   23/   C2099 : (MACRO)             	smpsCall            Supersonic_Call05
(1)   23/   C2099 : F8                          dc.b    $F8
(1)   23/   C209A : BFA0                                dc.w    z80_ptr(SUPERSONIC_CALL05)
(1)   24/   C209C : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop09
(1)   24/   C209C : F7                          dc.b    $F7
(1)   24/   C209D : 0002                        dc.b    $00,$02
(1)   24/   C209F : 99A0                                dc.w    z80_ptr(SUPERSONIC_LOOP09)
(1)   25/   C20A1 :                     
(1)   26/   C20A1 :                     Supersonic_Loop0A:
(1)   27/   C20A1 : (MACRO)             	smpsCall            Supersonic_Call01
(1)   27/   C20A1 : F8                          dc.b    $F8
(1)   27/   C20A2 : DDA0                                dc.w    z80_ptr(SUPERSONIC_CALL01)
(1)   28/   C20A4 : 80CE 80CD 80CE D012 	dc.b	nRst, nF6, nRst, nE6, nRst, nF6, nG6, $12
(1)   29/   C20AC : (MACRO)             	smpsCall            Supersonic_Call01
(1)   29/   C20AC : F8                          dc.b    $F8
(1)   29/   C20AD : DDA0                                dc.w    z80_ptr(SUPERSONIC_CALL01)
(1)   30/   C20AF : 80CE 0C80 24        	dc.b	nRst, nF6, $0C, nRst, $24
(1)   31/   C20B4 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop0A
(1)   31/   C20B4 : F7                          dc.b    $F7
(1)   31/   C20B5 : 0002                        dc.b    $00,$02
(1)   31/   C20B7 : A1A0                                dc.w    z80_ptr(SUPERSONIC_LOOP0A)
(1)   32/   C20B9 : (MACRO)             	smpsCall            Supersonic_Call02
(1)   32/   C20B9 : F8                          dc.b    $F8
(1)   32/   C20BA : E6A0                                dc.w    z80_ptr(SUPERSONIC_CALL02)
(1)   33/   C20BC : (MACRO)             	smpsJump            Supersonic_FM1
(1)   33/   C20BC : F6                          dc.b    $F6
(1)   33/   C20BD : 94A0                                dc.w    z80_ptr(SUPERSONIC_FM1)
(1)   34/   C20BF :                     
(1)   35/   C20BF :                     Supersonic_Call05:
(1)   36/   C20BF : 800C C816 8002 C806 	dc.b	nRst, $0C, nB5, $16, nRst, $02, nB5, $06, nRst, nC6, $12, nD6
            C20C7 : 80C9 12CB         
(1)   37/   C20CB : CD0C CB06 80CB 80CB 	dc.b	nE6, $0C, nD6, $06, nRst, nD6, nRst, nD6, nRst, nB5, nRst, nC6
            C20D3 : 80C8 80C9         
(1)   38/   C20D7 : 12C6 1880 06        	dc.b	$12, nA5, $18, nRst, $06
(1)   39/   C20DC : (MACRO)             	smpsReturn
(1)   39/   C20DC : F9                                  dc.b    $F9
(1)   40/   C20DD :                     
(1)   41/   C20DD :                     Supersonic_Call01:
(1)   42/   C20DD : 8009 D40F D006 80CB 	dc.b	nRst, $09, nB6, $0F, nG6, $06, nRst, nD6
(1)   43/   C20E5 : (MACRO)             	smpsReturn
(1)   43/   C20E5 : F9                                  dc.b    $F9
(1)   44/   C20E6 :                     
(1)   45/   C20E6 :                     Supersonic_Call02:
(1)   46/   C20E6 : C924 C606 C9CD 24C9 	dc.b	nC6, $24, nA5, $06, nC6, nE6, $24, nC6, $06, nE6, nG6, $3C
            C20EE : 06CD D03C         
(1)   47/   C20F2 : 8024                	dc.b	nRst, $24
(1)   48/   C20F4 : (MACRO)             	smpsReturn
(1)   48/   C20F4 : F9                                  dc.b    $F9
(1)   49/   C20F5 :                     
(1)   50/   C20F5 :                     ; FM3 Data
(1)   51/   C20F5 :                     Supersonic_FM3:
(1)   52/   C20F5 : (MACRO)             	smpsSetvoice        $00
(1)   52/   C20F5 :  (MACRO-2)                  smpsFMvoice $00
(1)   52/   C20F5 : EF00                                dc.b    $EF,$00
(1)   53/   C20F7 : C812 C9CA 0CC9 12CA 	dc.b	nB5, $12, nC6, nCs6, $0C, nC6, $12, nCs6, nD6, $0C, nCs6, $12
            C20FF : CB0C CA12         
(1)   54/   C2103 : CBCC 0CCB 12CC CD0C 	dc.b	nD6, nEb6, $0C, nD6, $12, nEb6, nE6, $0C
(1)   55/   C210B : (MACRO)             	smpsSetvoice        $02
(1)   55/   C210B :  (MACRO-2)                  smpsFMvoice $02
(1)   55/   C210B : EF02                                dc.b    $EF,$02
(1)   56/   C210D : (MACRO)             	smpsAlterNote       $03
(1)   56/   C210D :  (MACRO-2)                  smpsDetune      $03
(1)   56/   C210D : E103                        dc.b    $E1,$03
(1)   57/   C210F :                     
(1)   58/   C210F :                     Supersonic_Loop07:
(1)   59/   C210F : (MACRO)             	smpsCall            Supersonic_Call05
(1)   59/   C210F : F8                          dc.b    $F8
(1)   59/   C2110 : BFA0                                dc.w    z80_ptr(SUPERSONIC_CALL05)
(1)   60/   C2112 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop07
(1)   60/   C2112 : F7                          dc.b    $F7
(1)   60/   C2113 : 0002                        dc.b    $00,$02
(1)   60/   C2115 : 0FA1                                dc.w    z80_ptr(SUPERSONIC_LOOP07)
(1)   61/   C2117 :                     
(1)   62/   C2117 :                     Supersonic_Loop08:
(1)   63/   C2117 : (MACRO)             	smpsSetvoice        $00
(1)   63/   C2117 :  (MACRO-2)                  smpsFMvoice $00
(1)   63/   C2117 : EF00                                dc.b    $EF,$00
(1)   64/   C2119 : (MACRO)             	smpsAlterNote       $00
(1)   64/   C2119 :  (MACRO-2)                  smpsDetune      $00
(1)   64/   C2119 : E100                        dc.b    $E1,$00
(1)   65/   C211B : C80C 80C8 80C6 80C6 	dc.b	nB5, $0C, nRst, nB5, nRst, nA5, nRst, nA5, nRst, nB5, $06, nRst
            C2123 : 80C8 0680         
(1)   66/   C2127 : C880 C60C C806 8036 	dc.b	nB5, nRst, nA5, $0C, nB5, $06, nRst, $36
(1)   67/   C212F : (MACRO)             	smpsAlterPitch      $03
(1)   67/   C212F :  (MACRO-2)                  smpsChangeTransposition $03
(1)   67/   C212F : FB03                                dc.b    $FB,$03
(1)   68/   C2131 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop08
(1)   68/   C2131 : F7                          dc.b    $F7
(1)   68/   C2132 : 0002                        dc.b    $00,$02
(1)   68/   C2134 : 17A1                                dc.w    z80_ptr(SUPERSONIC_LOOP08)
(1)   69/   C2136 : (MACRO)             	smpsAlterPitch      $FA
(1)   69/   C2136 :  (MACRO-2)                  smpsChangeTransposition $FA
(1)   69/   C2136 : FBFA                                dc.b    $FB,$FA
(1)   70/   C2138 : C918 80CD 80D0 D0D0 	dc.b	nC6, $18, nRst, nE6, nRst, nG6, nG6, nG6, nG6
            C2140 : D0               
(1)   71/   C2141 : (MACRO)             	smpsJump            Supersonic_FM3
(1)   71/   C2141 : F6                          dc.b    $F6
(1)   71/   C2142 : F5A0                                dc.w    z80_ptr(SUPERSONIC_FM3)
(1)   72/   C2144 :                     
(1)   73/   C2144 :                     ; FM4 Data
(1)   74/   C2144 :                     Supersonic_FM4:
(1)   75/   C2144 : (MACRO)             	smpsSetvoice        $00
(1)   75/   C2144 :  (MACRO-2)                  smpsFMvoice $00
(1)   75/   C2144 : EF00                                dc.b    $EF,$00
(1)   76/   C2146 :                     
(1)   77/   C2146 :                     Supersonic_Jump01:
(1)   78/   C2146 : C412 C5C6 0CC5 12C6 	dc.b	nG5, $12, nAb5, nA5, $0C, nAb5, $12, nA5, nBb5, $0C, nA5, $12
            C214E : C70C C612         
(1)   79/   C2152 : C7C8 0CC7 12C8 C90C 	dc.b	nBb5, nB5, $0C, nBb5, $12, nB5, nC6, $0C
(1)   80/   C215A : (MACRO)             	smpsSetvoice        $03
(1)   80/   C215A :  (MACRO-2)                  smpsFMvoice $03
(1)   80/   C215A : EF03                                dc.b    $EF,$03
(1)   81/   C215C :                     
(1)   82/   C215C :                     Supersonic_Loop05:
(1)   83/   C215C : (MACRO)             	smpsCall            Supersonic_Call04
(1)   83/   C215C : F8                          dc.b    $F8
(1)   83/   C215D : A2A1                                dc.w    z80_ptr(SUPERSONIC_CALL04)
(1)   84/   C215F : C980 C980 C980 C980 	dc.b	nC6, nRst, nC6, nRst, nC6, nRst, nC6, nRst
(1)   85/   C2167 : (MACRO)             	smpsCall            Supersonic_Call04
(1)   85/   C2167 : F8                          dc.b    $F8
(1)   85/   C2168 : A2A1                                dc.w    z80_ptr(SUPERSONIC_CALL04)
(1)   86/   C216A : C680 C680 C680 C680 	dc.b	nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst
(1)   87/   C2172 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop05
(1)   87/   C2172 : F7                          dc.b    $F7
(1)   87/   C2173 : 0002                        dc.b    $00,$02
(1)   87/   C2175 : 5CA1                                dc.w    z80_ptr(SUPERSONIC_LOOP05)
(1)   88/   C2177 : (MACRO)             	smpsSetvoice        $00
(1)   88/   C2177 :  (MACRO-2)                  smpsFMvoice $00
(1)   88/   C2177 : EF00                                dc.b    $EF,$00
(1)   89/   C2179 :                     
(1)   90/   C2179 :                     Supersonic_Loop06:
(1)   91/   C2179 : C40C 80C4 80C2 80C2 	dc.b	nG5, $0C, nRst, nG5, nRst, nF5, nRst, nF5, nRst, nG5, $06, nRst
            C2181 : 80C4 0680         
(1)   92/   C2185 : C480 C20C C406 8036 	dc.b	nG5, nRst, nF5, $0C, nG5, $06, nRst, $36
(1)   93/   C218D : (MACRO)             	smpsAlterPitch      $04
(1)   93/   C218D :  (MACRO-2)                  smpsChangeTransposition $04
(1)   93/   C218D : FB04                                dc.b    $FB,$04
(1)   94/   C218F : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop06
(1)   94/   C218F : F7                          dc.b    $F7
(1)   94/   C2190 : 0002                        dc.b    $00,$02
(1)   94/   C2192 : 79A1                                dc.w    z80_ptr(SUPERSONIC_LOOP06)
(1)   95/   C2194 : (MACRO)             	smpsAlterPitch      $F8
(1)   95/   C2194 :  (MACRO-2)                  smpsChangeTransposition $F8
(1)   95/   C2194 : FBF8                                dc.b    $FB,$F8
(1)   96/   C2196 : C618 80C9 80CD CDCD 	dc.b	nA5, $18, nRst, nC6, nRst, nE6, nE6, nE6, nE6
            C219E : CD               
(1)   97/   C219F : (MACRO)             	smpsJump            Supersonic_Jump01
(1)   97/   C219F : F6                          dc.b    $F6
(1)   97/   C21A0 : 46A1                                dc.w    z80_ptr(SUPERSONIC_JUMP01)
(1)   98/   C21A2 :                     
(1)   99/   C21A2 :                     Supersonic_Call04:
(1)  100/   C21A2 : C806 80C8 80C8 80C8 	dc.b	nB5, $06, nRst, nB5, nRst, nB5, nRst, nB5, nRst
            C21AA : 80               
(1)  101/   C21AB : (MACRO)             	smpsReturn
(1)  101/   C21AB : F9                                  dc.b    $F9
(1)  102/   C21AC :                     
(1)  103/   C21AC :                     ; FM2 Data
(1)  104/   C21AC :                     Supersonic_FM2:
(1)  105/   C21AC : (MACRO)             	smpsSetvoice        $01
(1)  105/   C21AC :  (MACRO-2)                  smpsFMvoice $01
(1)  105/   C21AC : EF01                                dc.b    $EF,$01
(1)  106/   C21AE :                     
(1)  107/   C21AE :                     Supersonic_Jump00:
(1)  108/   C21AE : A612 A7A8 0CA7 12A8 	dc.b	nCs3, $12, nD3, nEb3, $0C, nD3, $12, nEb3, nE3, $0C, nEb3, $12
            C21B6 : A90C A812         
(1)  109/   C21BA : A9AA 0CA9 12AA AB0C 	dc.b	nE3, nF3, $0C, nE3, $12, nF3, nFs3, $0C
(1)  110/   C21C2 : (MACRO)             	smpsSetvoice        $04
(1)  110/   C21C2 :  (MACRO-2)                  smpsFMvoice $04
(1)  110/   C21C2 : EF04                                dc.b    $EF,$04
(1)  111/   C21C4 :                     
(1)  112/   C21C4 :                     Supersonic_Loop03:
(1)  113/   C21C4 : (MACRO)             	smpsCall            Supersonic_Call03
(1)  113/   C21C4 : F8                          dc.b    $F8
(1)  113/   C21C5 : F9A1                                dc.w    z80_ptr(SUPERSONIC_CALL03)
(1)  114/   C21C7 : 8006 A90C           	dc.b	nRst, $06, nE3, $0C
(1)  115/   C21CB : (MACRO)             	smpsCall            Supersonic_Call03
(1)  115/   C21CB : F8                          dc.b    $F8
(1)  115/   C21CC : F9A1                                dc.w    z80_ptr(SUPERSONIC_CALL03)
(1)  116/   C21CE : AA06 A90C           	dc.b	nF3, $06, nE3, $0C
(1)  117/   C21D2 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop03
(1)  117/   C21D2 : F7                          dc.b    $F7
(1)  117/   C21D3 : 0002                        dc.b    $00,$02
(1)  117/   C21D5 : C4A1                                dc.w    z80_ptr(SUPERSONIC_LOOP03)
(1)  118/   C21D7 : (MACRO)             	smpsSetvoice        $01
(1)  118/   C21D7 :  (MACRO-2)                  smpsFMvoice $01
(1)  118/   C21D7 : EF01                                dc.b    $EF,$01
(1)  119/   C21D9 :                     
(1)  120/   C21D9 :                     Supersonic_Loop04:
(1)  121/   C21D9 : 8060 803C AF06 B0AC 	dc.b	nRst, $60, nRst, $3C, nBb3, $06, nB3, nG3, $0C, nFs3
            C21E1 : 0CAB               
(1)  122/   C21E3 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop04
(1)  122/   C21E3 : F7                          dc.b    $F7
(1)  122/   C21E4 : 0002                        dc.b    $00,$02
(1)  122/   C21E6 : D9A1                                dc.w    z80_ptr(SUPERSONIC_LOOP04)
(1)  123/   C21E8 : B618 AAB6 AAB6 0CAA 	dc.b	nF4, $18, nF3, nF4, nF3, nF4, $0C, nF3, nF4, nF3, nF4, nF3
            C21F0 : B6AA B6AA         
(1)  124/   C21F4 : B6AA                	dc.b	nF4, nF3
(1)  125/   C21F6 : (MACRO)             	smpsJump            Supersonic_Jump00
(1)  125/   C21F6 : F6                          dc.b    $F6
(1)  125/   C21F7 : AEA1                                dc.w    z80_ptr(SUPERSONIC_JUMP00)
(1)  126/   C21F9 :                     
(1)  127/   C21F9 :                     Supersonic_Call03:
(1)  128/   C21F9 : AC06 80AC 0CA7 0680 	dc.b	nG3, $06, nRst, nG3, $0C, nD3, $06, nRst, nD3, $0C, nF3, $06
            C2201 : A70C AA06         
(1)  129/   C2205 : 80AA 0CA9 06        	dc.b	nRst, nF3, $0C, nE3, $06
(1)  130/   C220A : (MACRO)             	smpsReturn
(1)  130/   C220A : F9                                  dc.b    $F9
(1)  131/   C220B :                     
(1)  132/   C220B :                     ; FM5 Data
(1)  133/   C220B :                     Supersonic_FM5:
(1)  134/   C220B : (MACRO)             	smpsSetvoice        $03
(1)  134/   C220B :  (MACRO-2)                  smpsFMvoice $03
(1)  134/   C220B : EF03                                dc.b    $EF,$03
(1)  135/   C220D : (MACRO)             	smpsPan             panRight, $00
(1)  135/   C220D : =$0                 panNone set $00
(1)  135/   C220D : =$40                panRight set $40
(1)  135/   C220D : =$80                panLeft set $80
(1)  135/   C220D : =$C0                panCentre set $C0
(1)  135/   C220D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  135/   C220D : E040                        dc.b $E0,PANRIGHT+$00
(1)  136/   C220F : 8060 80             	dc.b	nRst, $60, nRst
(1)  137/   C2212 :                     
(1)  138/   C2212 :                     Supersonic_Loop01:
(1)  139/   C2212 : (MACRO)             	smpsCall            Supersonic_Call00
(1)  139/   C2212 : F8                          dc.b    $F8
(1)  139/   C2213 : 63A2                                dc.w    z80_ptr(SUPERSONIC_CALL00)
(1)  140/   C2215 : CD80 CD80 CD80 CD80 	dc.b	nE6, nRst, nE6, nRst, nE6, nRst, nE6, nRst
(1)  141/   C221D : (MACRO)             	smpsCall            Supersonic_Call00
(1)  141/   C221D : F8                          dc.b    $F8
(1)  141/   C221E : 63A2                                dc.w    z80_ptr(SUPERSONIC_CALL00)
(1)  142/   C2220 : C980 C980 C980 C980 	dc.b	nC6, nRst, nC6, nRst, nC6, nRst, nC6, nRst
(1)  143/   C2228 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop01
(1)  143/   C2228 : F7                          dc.b    $F7
(1)  143/   C2229 : 0002                        dc.b    $00,$02
(1)  143/   C222B : 12A2                                dc.w    z80_ptr(SUPERSONIC_LOOP01)
(1)  144/   C222D :                     
(1)  145/   C222D :                     Supersonic_Loop02:
(1)  146/   C222D : (MACRO)             	smpsSetvoice        $02
(1)  146/   C222D :  (MACRO-2)                  smpsFMvoice $02
(1)  146/   C222D : EF02                                dc.b    $EF,$02
(1)  147/   C222F : (MACRO)             	smpsAlterNote       $03
(1)  147/   C222F :  (MACRO-2)                  smpsDetune      $03
(1)  147/   C222F : E103                        dc.b    $E1,$03
(1)  148/   C2231 : (MACRO)             	smpsPan             panLeft, $00
(1)  148/   C2231 : =$0                 panNone set $00
(1)  148/   C2231 : =$40                panRight set $40
(1)  148/   C2231 : =$80                panLeft set $80
(1)  148/   C2231 : =$C0                panCentre set $C0
(1)  148/   C2231 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  148/   C2231 : E080                        dc.b $E0,PANLEFT+$00
(1)  149/   C2233 : (MACRO)             	smpsCall            Supersonic_Call01
(1)  149/   C2233 : F8                          dc.b    $F8
(1)  149/   C2234 : DDA0                                dc.w    z80_ptr(SUPERSONIC_CALL01)
(1)  150/   C2236 : 8006 CE80 CD80 CED0 	dc.b	nRst, $06, nF6, nRst, nE6, nRst, nF6, nG6, $12
            C223E : 12               
(1)  151/   C223F : (MACRO)             	smpsCall            Supersonic_Call01
(1)  151/   C223F : F8                          dc.b    $F8
(1)  151/   C2240 : DDA0                                dc.w    z80_ptr(SUPERSONIC_CALL01)
(1)  152/   C2242 : 8006 CE0C           	dc.b	nRst, $06, nF6, $0C
(1)  153/   C2246 : (MACRO)             	smpsSetvoice        $03
(1)  153/   C2246 :  (MACRO-2)                  smpsFMvoice $03
(1)  153/   C2246 : EF03                                dc.b    $EF,$03
(1)  154/   C2248 : (MACRO)             	smpsAlterNote       $00
(1)  154/   C2248 :  (MACRO-2)                  smpsDetune      $00
(1)  154/   C2248 : E100                        dc.b    $E1,$00
(1)  155/   C224A : (MACRO)             	smpsPan             panCenter, $00
(1)  155/   C224A : =$0                 panNone set $00
(1)  155/   C224A : =$40                panRight set $40
(1)  155/   C224A : =$80                panLeft set $80
(1)  155/   C224A : =$C0                panCentre set $C0
(1)  155/   C224A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  155/   C224A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  156/   C224C : B206 B3B0 0CAC      	dc.b	nCs4, $06, nD4, nB3, $0C, nG3
(1)  157/   C2252 : (MACRO)             	smpsLoop            $00, $02, Supersonic_Loop02
(1)  157/   C2252 : F7                          dc.b    $F7
(1)  157/   C2253 : 0002                        dc.b    $00,$02
(1)  157/   C2255 : 2DA2                                dc.w    z80_ptr(SUPERSONIC_LOOP02)
(1)  158/   C2257 : (MACRO)             	smpsSetvoice        $02
(1)  158/   C2257 :  (MACRO-2)                  smpsFMvoice $02
(1)  158/   C2257 : EF02                                dc.b    $EF,$02
(1)  159/   C2259 : (MACRO)             	smpsAlterNote       $02
(1)  159/   C2259 :  (MACRO-2)                  smpsDetune      $02
(1)  159/   C2259 : E102                        dc.b    $E1,$02
(1)  160/   C225B : (MACRO)             	smpsCall            Supersonic_Call02
(1)  160/   C225B : F8                          dc.b    $F8
(1)  160/   C225C : E6A0                                dc.w    z80_ptr(SUPERSONIC_CALL02)
(1)  161/   C225E : (MACRO)             	smpsAlterNote       $00
(1)  161/   C225E :  (MACRO-2)                  smpsDetune      $00
(1)  161/   C225E : E100                        dc.b    $E1,$00
(1)  162/   C2260 : (MACRO)             	smpsJump            Supersonic_FM5
(1)  162/   C2260 : F6                          dc.b    $F6
(1)  162/   C2261 : 0BA2                                dc.w    z80_ptr(SUPERSONIC_FM5)
(1)  163/   C2263 :                     
(1)  164/   C2263 :                     Supersonic_Call00:
(1)  165/   C2263 : CB06 80CB 80CB 80CB 	dc.b	nD6, $06, nRst, nD6, nRst, nD6, nRst, nD6, nRst
            C226B : 80               
(1)  166/   C226C : (MACRO)             	smpsReturn
(1)  166/   C226C : F9                                  dc.b    $F9
(1)  167/   C226D :                     
(1)  168/   C226D :                     ; PSG1 Data
(1)  169/   C226D :                     Supersonic_PSG1:
(1)  170/   C226D : 8060                	dc.b	nRst, $60
(1)  171/   C226F : (MACRO)             	smpsLoop            $00, $0A, Supersonic_PSG1
(1)  171/   C226F : F7                          dc.b    $F7
(1)  171/   C2270 : 000A                        dc.b    $00,$0A
(1)  171/   C2272 : 6DA2                                dc.w    z80_ptr(SUPERSONIC_PSG1)
(1)  172/   C2274 : 8018                	dc.b	nRst, $18
(1)  173/   C2276 : (MACRO)             	smpsCall            Supersonic_Call06
(1)  173/   C2276 : F8                          dc.b    $F8
(1)  173/   C2277 : A3A2                                dc.w    z80_ptr(SUPERSONIC_CALL06)
(1)  174/   C2279 : CB80 15D5 03D4 D3D2 	dc.b	nD6, nRst, $15, nC7, $03, nB6, nBb6, nA6, nAb6, nG6, nFs6, nF6
            C2281 : D1D0 CFCE         
(1)  175/   C2285 : (MACRO)             	smpsCall            Supersonic_Call06
(1)  175/   C2285 : F8                          dc.b    $F8
(1)  175/   C2286 : A3A2                                dc.w    z80_ptr(SUPERSONIC_CALL06)
(1)  176/   C2288 : CAD5 D4D2 D1D0 CFCE 	dc.b	nCs6, nC7, nB6, nA6, nAb6, nG6, nFs6, nF6, nE7, nEb7, nD7, nCs7
            C2290 : D9D8 D7D6         
(1)  177/   C2294 : D5D4 D3D2 D0CF CECD 	dc.b	nC7, nB6, nBb6, nA6, nG6, nFs6, nF6, nE6, nEb6, nD6, nCs6, nB5
            C229C : CCCB CAC8         
(1)  178/   C22A0 : (MACRO)             	smpsJump            Supersonic_PSG1
(1)  178/   C22A0 : F6                          dc.b    $F6
(1)  178/   C22A1 : 6DA2                                dc.w    z80_ptr(SUPERSONIC_PSG1)
(1)  179/   C22A3 :                     
(1)  180/   C22A3 :                     Supersonic_Call06:
(1)  181/   C22A3 : D203 D1D0 CFCE CDCC 	dc.b	nA6, $03, nAb6, nG6, nFs6, nF6, nE6, nEb6, nD6
            C22AB : CB               
(1)  182/   C22AC : (MACRO)             	smpsReturn
(1)  182/   C22AC : F9                                  dc.b    $F9
(1)  183/   C22AD :                     
(1)  184/   C22AD :                     ; PSG2 Data
(1)  185/   C22AD :                     Supersonic_PSG2:
(1)  186/   C22AD : (MACRO)             	smpsStop
(1)  186/   C22AD : F2                          dc.b    $F2
(1)  187/   C22AE :                     
(1)  188/   C22AE :                     ; PSG3 Data
(1)  189/   C22AE :                     Supersonic_PSG3:
(1)  190/   C22AE : (MACRO)             	smpsStop
(1)  190/   C22AE : F2                          dc.b    $F2
(1)  191/   C22AF :                     
(1)  192/   C22AF :                     ; DAC Data
(1)  193/   C22AF :                     Supersonic_DAC:
(1)  194/   C22AF : 810C 8206 8112 820C 	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dSnare, $0C
(1)  195/   C22B7 : (MACRO)             	smpsLoop            $00, $03, Supersonic_DAC
(1)  195/   C22B7 : F7                          dc.b    $F7
(1)  195/   C22B8 : 0003                        dc.b    $00,$03
(1)  195/   C22BA : AFA2                                dc.w    z80_ptr(SUPERSONIC_DAC)
(1)  196/   C22BC : 810C 8206 810C 8206 	dc.b	dKick, $0C, dSnare, $06, dKick, $0C, dSnare, $06, $0C
            C22C4 : 0C               
(1)  197/   C22C5 :                     
(1)  198/   C22C5 :                     Supersonic_Loop00:
(1)  199/   C22C5 : 810C 82             	dc.b	dKick, $0C, dSnare
(1)  200/   C22C8 : (MACRO)             	smpsLoop            $00, $07, Supersonic_Loop00
(1)  200/   C22C8 : F7                          dc.b    $F7
(1)  200/   C22C9 : 0007                        dc.b    $00,$07
(1)  200/   C22CB : C5A2                                dc.w    z80_ptr(SUPERSONIC_LOOP00)
(1)  201/   C22CD : 8106 8282 0C        	dc.b	dKick, $06, dSnare, dSnare, $0C
(1)  202/   C22D2 : (MACRO)             	smpsLoop            $01, $05, Supersonic_Loop00
(1)  202/   C22D2 : F7                          dc.b    $F7
(1)  202/   C22D3 : 0105                        dc.b    $01,$05
(1)  202/   C22D5 : C5A2                                dc.w    z80_ptr(SUPERSONIC_LOOP00)
(1)  203/   C22D7 : (MACRO)             	smpsJump            Supersonic_DAC
(1)  203/   C22D7 : F6                          dc.b    $F6
(1)  203/   C22D8 : AFA2                                dc.w    z80_ptr(SUPERSONIC_DAC)
(1)  204/   C22DA :                     
(1)  205/   C22DA :                     Supersonic_Voices:
(1)  206/   C22DA :                     ;	Voice $00
(1)  207/   C22DA :                     ;	$3A
(1)  208/   C22DA :                     ;	$02, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  209/   C22DA :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$19, $4E, $15, $80
(1)  210/   C22DA : (MACRO)             	smpsVcAlgorithm     $02
(1)  210/   C22DA : =$2                 vcAlgorithm set $02
(1)  211/   C22DA : (MACRO)             	smpsVcFeedback      $07
(1)  211/   C22DA : =$7                 vcFeedback set $07
(1)  212/   C22DA : (MACRO)             	smpsVcUnusedBits    $00
(1)  212/   C22DA : =$0                 vcUnusedBits set $00
(1)  212/   C22DA : =$0                 vcD1R1Unk set 0
(1)  212/   C22DA : =$0                 vcD1R2Unk set 0
(1)  212/   C22DA : =$0                 vcD1R3Unk set 0
(1)  212/   C22DA : =$0                 vcD1R4Unk set 0
(1)  213/   C22DA : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  213/   C22DA : =$0                 vcDT1 set $00
(1)  213/   C22DA : =$0                 vcDT2 set $00
(1)  213/   C22DA : =$0                 vcDT3 set $00
(1)  213/   C22DA : =$0                 vcDT4 set $00
(1)  214/   C22DA : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $02
(1)  214/   C22DA : =$1                 vcCF1 set $01
(1)  214/   C22DA : =$1                 vcCF2 set $01
(1)  214/   C22DA : =$7                 vcCF3 set $07
(1)  214/   C22DA : =$2                 vcCF4 set $02
(1)  215/   C22DA : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  215/   C22DA : =$1                 vcRS1 set $01
(1)  215/   C22DA : =$2                 vcRS2 set $02
(1)  215/   C22DA : =$2                 vcRS3 set $02
(1)  215/   C22DA : =$2                 vcRS4 set $02
(1)  216/   C22DA : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  216/   C22DA : =$13                vcAR1 set $13
(1)  216/   C22DA : =$D                 vcAR2 set $0D
(1)  216/   C22DA : =$E                 vcAR3 set $0E
(1)  216/   C22DA : =$E                 vcAR4 set $0E
(1)  217/   C22DA : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  217/   C22DA : =$0                 vcAM1 set $00<<5
(1)  217/   C22DA : =$0                 vcAM2 set $00<<5
(1)  217/   C22DA : =$0                 vcAM3 set $00<<5
(1)  217/   C22DA : =$0                 vcAM4 set $00<<5
(1)  218/   C22DA : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  218/   C22DA : =$3                 vcD1R1 set $03
(1)  218/   C22DA : =$E                 vcD1R2 set $0E
(1)  218/   C22DA : =$E                 vcD1R3 set $0E
(1)  218/   C22DA : =$E                 vcD1R4 set $0E
(1)  219/   C22DA : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  219/   C22DA : =$0                 vcD2R1 set $00
(1)  219/   C22DA : =$0                 vcD2R2 set $00
(1)  219/   C22DA : =$0                 vcD2R3 set $00
(1)  219/   C22DA : =$0                 vcD2R4 set $00
(1)  220/   C22DA : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  220/   C22DA : =$0                 vcDL1 set $00
(1)  220/   C22DA : =$1                 vcDL2 set $01
(1)  220/   C22DA : =$F                 vcDL3 set $0F
(1)  220/   C22DA : =$1                 vcDL4 set $01
(1)  221/   C22DA : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  221/   C22DA : =$F                 vcRR1 set $0F
(1)  221/   C22DA : =$F                 vcRR2 set $0F
(1)  221/   C22DA : =$F                 vcRR3 set $0F
(1)  221/   C22DA : =$F                 vcRR4 set $0F
(1)  222/   C22DA : (MACRO)             	smpsVcTotalLevel    $00, $15, $4E, $19
(1)  222/   C22DA : =$0                 vcTL1 set $00
(1)  222/   C22DA : =$15                vcTL2 set $15
(1)  222/   C22DA : =$4E                vcTL3 set $4E
(1)  222/   C22DA : =$19                vcTL4 set $19
(1)  222/   C22DA : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  222/   C22DB :                     ;   0     1     2     3     4     5     6     7
(1)  222/   C22DB :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  222/   C22DB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  222/   C22DB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  222/   C22DB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  222/   C22DB : =$80                vcTLMask1 set $80
(1)  222/   C22DB :                     
(1)  222/   C22DB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  222/   C22DB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  222/   C22DB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  222/   C22DB : =$80                vcTLMask1 set $80
(1)  222/   C22DB : =$0                 vcTL1 set vcTL1&$7F
(1)  222/   C22DB : =$15                vcTL2 set vcTL2&$7F
(1)  222/   C22DB : =$4E                vcTL3 set vcTL3&$7F
(1)  222/   C22DB : =$19                vcTL4 set vcTL4&$7F
(1)  222/   C22DB :                     
(1)  222/   C22DB : 0207 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  222/   C22DF : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  222/   C22E3 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  222/   C22E7 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  222/   C22EB : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  222/   C22EF : 194E 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  223/   C22F3 :                     
(1)  224/   C22F3 :                     ;	Voice $01
(1)  225/   C22F3 :                     ;	$08
(1)  226/   C22F3 :                     ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  227/   C22F3 :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$22, $2E, $13, $80
(1)  228/   C22F3 : (MACRO)             	smpsVcAlgorithm     $00
(1)  228/   C22F3 : =$0                 vcAlgorithm set $00
(1)  229/   C22F3 : (MACRO)             	smpsVcFeedback      $01
(1)  229/   C22F3 : =$1                 vcFeedback set $01
(1)  230/   C22F3 : (MACRO)             	smpsVcUnusedBits    $00
(1)  230/   C22F3 : =$0                 vcUnusedBits set $00
(1)  230/   C22F3 : =$0                 vcD1R1Unk set 0
(1)  230/   C22F3 : =$0                 vcD1R2Unk set 0
(1)  230/   C22F3 : =$0                 vcD1R3Unk set 0
(1)  230/   C22F3 : =$0                 vcD1R4Unk set 0
(1)  231/   C22F3 : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1)  231/   C22F3 : =$0                 vcDT1 set $00
(1)  231/   C22F3 : =$3                 vcDT2 set $03
(1)  231/   C22F3 : =$7                 vcDT3 set $07
(1)  231/   C22F3 : =$0                 vcDT4 set $00
(1)  232/   C22F3 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $0A
(1)  232/   C22F3 : =$0                 vcCF1 set $00
(1)  232/   C22F3 : =$0                 vcCF2 set $00
(1)  232/   C22F3 : =$0                 vcCF3 set $00
(1)  232/   C22F3 : =$A                 vcCF4 set $0A
(1)  233/   C22F3 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  233/   C22F3 : =$1                 vcRS1 set $01
(1)  233/   C22F3 : =$1                 vcRS2 set $01
(1)  233/   C22F3 : =$0                 vcRS3 set $00
(1)  233/   C22F3 : =$0                 vcRS4 set $00
(1)  234/   C22F3 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  234/   C22F3 : =$1F                vcAR1 set $1F
(1)  234/   C22F3 : =$1F                vcAR2 set $1F
(1)  234/   C22F3 : =$1F                vcAR3 set $1F
(1)  234/   C22F3 : =$1F                vcAR4 set $1F
(1)  235/   C22F3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  235/   C22F3 : =$0                 vcAM1 set $00<<5
(1)  235/   C22F3 : =$0                 vcAM2 set $00<<5
(1)  235/   C22F3 : =$0                 vcAM3 set $00<<5
(1)  235/   C22F3 : =$0                 vcAM4 set $00<<5
(1)  236/   C22F3 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  236/   C22F3 : =$A                 vcD1R1 set $0A
(1)  236/   C22F3 : =$A                 vcD1R2 set $0A
(1)  236/   C22F3 : =$E                 vcD1R3 set $0E
(1)  236/   C22F3 : =$12                vcD1R4 set $12
(1)  237/   C22F3 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1)  237/   C22F3 : =$3                 vcD2R1 set $03
(1)  237/   C22F3 : =$4                 vcD2R2 set $04
(1)  237/   C22F3 : =$4                 vcD2R3 set $04
(1)  237/   C22F3 : =$0                 vcD2R4 set $00
(1)  238/   C22F3 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  238/   C22F3 : =$2                 vcDL1 set $02
(1)  238/   C22F3 : =$2                 vcDL2 set $02
(1)  238/   C22F3 : =$2                 vcDL3 set $02
(1)  238/   C22F3 : =$2                 vcDL4 set $02
(1)  239/   C22F3 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  239/   C22F3 : =$F                 vcRR1 set $0F
(1)  239/   C22F3 : =$F                 vcRR2 set $0F
(1)  239/   C22F3 : =$F                 vcRR3 set $0F
(1)  239/   C22F3 : =$F                 vcRR4 set $0F
(1)  240/   C22F3 : (MACRO)             	smpsVcTotalLevel    $00, $13, $2E, $22
(1)  240/   C22F3 : =$0                 vcTL1 set $00
(1)  240/   C22F3 : =$13                vcTL2 set $13
(1)  240/   C22F3 : =$2E                vcTL3 set $2E
(1)  240/   C22F3 : =$22                vcTL4 set $22
(1)  240/   C22F3 : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  240/   C22F4 :                     ;   0     1     2     3     4     5     6     7
(1)  240/   C22F4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  240/   C22F4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  240/   C22F4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  240/   C22F4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  240/   C22F4 : =$80                vcTLMask1 set $80
(1)  240/   C22F4 :                     
(1)  240/   C22F4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  240/   C22F4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  240/   C22F4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  240/   C22F4 : =$80                vcTLMask1 set $80
(1)  240/   C22F4 : =$0                 vcTL1 set vcTL1&$7F
(1)  240/   C22F4 : =$13                vcTL2 set vcTL2&$7F
(1)  240/   C22F4 : =$2E                vcTL3 set vcTL3&$7F
(1)  240/   C22F4 : =$22                vcTL4 set vcTL4&$7F
(1)  240/   C22F4 :                     
(1)  240/   C22F4 : 0A70 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  240/   C22F8 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  240/   C22FC : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  240/   C2300 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  240/   C2304 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  240/   C2308 : 222E 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  241/   C230C :                     
(1)  242/   C230C :                     ;	Voice $02
(1)  243/   C230C :                     ;	$3A
(1)  244/   C230C :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  245/   C230C :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1)  246/   C230C : (MACRO)             	smpsVcAlgorithm     $02
(1)  246/   C230C : =$2                 vcAlgorithm set $02
(1)  247/   C230C : (MACRO)             	smpsVcFeedback      $07
(1)  247/   C230C : =$7                 vcFeedback set $07
(1)  248/   C230C : (MACRO)             	smpsVcUnusedBits    $00
(1)  248/   C230C : =$0                 vcUnusedBits set $00
(1)  248/   C230C : =$0                 vcD1R1Unk set 0
(1)  248/   C230C : =$0                 vcD1R2Unk set 0
(1)  248/   C230C : =$0                 vcD1R3Unk set 0
(1)  248/   C230C : =$0                 vcD1R4Unk set 0
(1)  249/   C230C : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  249/   C230C : =$0                 vcDT1 set $00
(1)  249/   C230C : =$0                 vcDT2 set $00
(1)  249/   C230C : =$0                 vcDT3 set $00
(1)  249/   C230C : =$0                 vcDT4 set $00
(1)  250/   C230C : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  250/   C230C : =$1                 vcCF1 set $01
(1)  250/   C230C : =$1                 vcCF2 set $01
(1)  250/   C230C : =$7                 vcCF3 set $07
(1)  250/   C230C : =$1                 vcCF4 set $01
(1)  251/   C230C : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  251/   C230C : =$1                 vcRS1 set $01
(1)  251/   C230C : =$2                 vcRS2 set $02
(1)  251/   C230C : =$2                 vcRS3 set $02
(1)  251/   C230C : =$2                 vcRS4 set $02
(1)  252/   C230C : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  252/   C230C : =$13                vcAR1 set $13
(1)  252/   C230C : =$D                 vcAR2 set $0D
(1)  252/   C230C : =$E                 vcAR3 set $0E
(1)  252/   C230C : =$E                 vcAR4 set $0E
(1)  253/   C230C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  253/   C230C : =$0                 vcAM1 set $00<<5
(1)  253/   C230C : =$0                 vcAM2 set $00<<5
(1)  253/   C230C : =$0                 vcAM3 set $00<<5
(1)  253/   C230C : =$0                 vcAM4 set $00<<5
(1)  254/   C230C : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  254/   C230C : =$3                 vcD1R1 set $03
(1)  254/   C230C : =$E                 vcD1R2 set $0E
(1)  254/   C230C : =$E                 vcD1R3 set $0E
(1)  254/   C230C : =$E                 vcD1R4 set $0E
(1)  255/   C230C : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  255/   C230C : =$0                 vcD2R1 set $00
(1)  255/   C230C : =$0                 vcD2R2 set $00
(1)  255/   C230C : =$0                 vcD2R3 set $00
(1)  255/   C230C : =$0                 vcD2R4 set $00
(1)  256/   C230C : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  256/   C230C : =$0                 vcDL1 set $00
(1)  256/   C230C : =$1                 vcDL2 set $01
(1)  256/   C230C : =$F                 vcDL3 set $0F
(1)  256/   C230C : =$1                 vcDL4 set $01
(1)  257/   C230C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  257/   C230C : =$F                 vcRR1 set $0F
(1)  257/   C230C : =$F                 vcRR2 set $0F
(1)  257/   C230C : =$F                 vcRR3 set $0F
(1)  257/   C230C : =$F                 vcRR4 set $0F
(1)  258/   C230C : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $17
(1)  258/   C230C : =$0                 vcTL1 set $00
(1)  258/   C230C : =$27                vcTL2 set $27
(1)  258/   C230C : =$28                vcTL3 set $28
(1)  258/   C230C : =$17                vcTL4 set $17
(1)  258/   C230C : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  258/   C230D :                     ;   0     1     2     3     4     5     6     7
(1)  258/   C230D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  258/   C230D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  258/   C230D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  258/   C230D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  258/   C230D : =$80                vcTLMask1 set $80
(1)  258/   C230D :                     
(1)  258/   C230D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  258/   C230D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  258/   C230D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  258/   C230D : =$80                vcTLMask1 set $80
(1)  258/   C230D : =$0                 vcTL1 set vcTL1&$7F
(1)  258/   C230D : =$27                vcTL2 set vcTL2&$7F
(1)  258/   C230D : =$28                vcTL3 set vcTL3&$7F
(1)  258/   C230D : =$17                vcTL4 set vcTL4&$7F
(1)  258/   C230D :                     
(1)  258/   C230D : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  258/   C2311 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  258/   C2315 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  258/   C2319 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  258/   C231D : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  258/   C2321 : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  259/   C2325 :                     
(1)  260/   C2325 :                     ;	Voice $03
(1)  261/   C2325 :                     ;	$2C
(1)  262/   C2325 :                     ;	$71, $72, $33, $33, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)  263/   C2325 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1E, $80, $23, $82
(1)  264/   C2325 : (MACRO)             	smpsVcAlgorithm     $04
(1)  264/   C2325 : =$4                 vcAlgorithm set $04
(1)  265/   C2325 : (MACRO)             	smpsVcFeedback      $05
(1)  265/   C2325 : =$5                 vcFeedback set $05
(1)  266/   C2325 : (MACRO)             	smpsVcUnusedBits    $00
(1)  266/   C2325 : =$0                 vcUnusedBits set $00
(1)  266/   C2325 : =$0                 vcD1R1Unk set 0
(1)  266/   C2325 : =$0                 vcD1R2Unk set 0
(1)  266/   C2325 : =$0                 vcD1R3Unk set 0
(1)  266/   C2325 : =$0                 vcD1R4Unk set 0
(1)  267/   C2325 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(1)  267/   C2325 : =$3                 vcDT1 set $03
(1)  267/   C2325 : =$3                 vcDT2 set $03
(1)  267/   C2325 : =$7                 vcDT3 set $07
(1)  267/   C2325 : =$7                 vcDT4 set $07
(1)  268/   C2325 : (MACRO)             	smpsVcCoarseFreq    $03, $03, $02, $01
(1)  268/   C2325 : =$3                 vcCF1 set $03
(1)  268/   C2325 : =$3                 vcCF2 set $03
(1)  268/   C2325 : =$2                 vcCF3 set $02
(1)  268/   C2325 : =$1                 vcCF4 set $01
(1)  269/   C2325 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  269/   C2325 : =$0                 vcRS1 set $00
(1)  269/   C2325 : =$0                 vcRS2 set $00
(1)  269/   C2325 : =$0                 vcRS3 set $00
(1)  269/   C2325 : =$0                 vcRS4 set $00
(1)  270/   C2325 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  270/   C2325 : =$1F                vcAR1 set $1F
(1)  270/   C2325 : =$1F                vcAR2 set $1F
(1)  270/   C2325 : =$1F                vcAR3 set $1F
(1)  270/   C2325 : =$1F                vcAR4 set $1F
(1)  271/   C2325 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  271/   C2325 : =$0                 vcAM1 set $00<<5
(1)  271/   C2325 : =$0                 vcAM2 set $00<<5
(1)  271/   C2325 : =$0                 vcAM3 set $00<<5
(1)  271/   C2325 : =$0                 vcAM4 set $00<<5
(1)  272/   C2325 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  272/   C2325 : =$0                 vcD1R1 set $00
(1)  272/   C2325 : =$0                 vcD1R2 set $00
(1)  272/   C2325 : =$0                 vcD1R3 set $00
(1)  272/   C2325 : =$0                 vcD1R4 set $00
(1)  273/   C2325 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  273/   C2325 : =$0                 vcD2R1 set $00
(1)  273/   C2325 : =$0                 vcD2R2 set $00
(1)  273/   C2325 : =$0                 vcD2R3 set $00
(1)  273/   C2325 : =$0                 vcD2R4 set $00
(1)  274/   C2325 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  274/   C2325 : =$0                 vcDL1 set $00
(1)  274/   C2325 : =$0                 vcDL2 set $00
(1)  274/   C2325 : =$0                 vcDL3 set $00
(1)  274/   C2325 : =$0                 vcDL4 set $00
(1)  275/   C2325 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  275/   C2325 : =$F                 vcRR1 set $0F
(1)  275/   C2325 : =$F                 vcRR2 set $0F
(1)  275/   C2325 : =$F                 vcRR3 set $0F
(1)  275/   C2325 : =$F                 vcRR4 set $0F
(1)  276/   C2325 : (MACRO)             	smpsVcTotalLevel    $02, $23, $00, $1E
(1)  276/   C2325 : =$2                 vcTL1 set $02
(1)  276/   C2325 : =$23                vcTL2 set $23
(1)  276/   C2325 : =$0                 vcTL3 set $00
(1)  276/   C2325 : =$1E                vcTL4 set $1E
(1)  276/   C2325 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  276/   C2326 :                     ;   0     1     2     3     4     5     6     7
(1)  276/   C2326 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  276/   C2326 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  276/   C2326 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  276/   C2326 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  276/   C2326 : =$80                vcTLMask1 set $80
(1)  276/   C2326 :                     
(1)  276/   C2326 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  276/   C2326 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  276/   C2326 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  276/   C2326 : =$80                vcTLMask1 set $80
(1)  276/   C2326 : =$2                 vcTL1 set vcTL1&$7F
(1)  276/   C2326 : =$23                vcTL2 set vcTL2&$7F
(1)  276/   C2326 : =$0                 vcTL3 set vcTL3&$7F
(1)  276/   C2326 : =$1E                vcTL4 set vcTL4&$7F
(1)  276/   C2326 :                     
(1)  276/   C2326 : 7172 3333                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  276/   C232A : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  276/   C232E : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  276/   C2332 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  276/   C2336 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  276/   C233A : 1E80 2382                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  277/   C233E :                     
(1)  278/   C233E :                     ;	Voice $04
(1)  279/   C233E :                     ;	$3A
(1)  280/   C233E :                     ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
(1)  281/   C233E :                     ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
(1)  282/   C233E : (MACRO)             	smpsVcAlgorithm     $02
(1)  282/   C233E : =$2                 vcAlgorithm set $02
(1)  283/   C233E : (MACRO)             	smpsVcFeedback      $07
(1)  283/   C233E : =$7                 vcFeedback set $07
(1)  284/   C233E : (MACRO)             	smpsVcUnusedBits    $00
(1)  284/   C233E : =$0                 vcUnusedBits set $00
(1)  284/   C233E : =$0                 vcD1R1Unk set 0
(1)  284/   C233E : =$0                 vcD1R2Unk set 0
(1)  284/   C233E : =$0                 vcD1R3Unk set 0
(1)  284/   C233E : =$0                 vcD1R4Unk set 0
(1)  285/   C233E : (MACRO)             	smpsVcDetune        $03, $01, $03, $06
(1)  285/   C233E : =$3                 vcDT1 set $03
(1)  285/   C233E : =$1                 vcDT2 set $01
(1)  285/   C233E : =$3                 vcDT3 set $03
(1)  285/   C233E : =$6                 vcDT4 set $06
(1)  286/   C233E : (MACRO)             	smpsVcCoarseFreq    $01, $04, $0C, $01
(1)  286/   C233E : =$1                 vcCF1 set $01
(1)  286/   C233E : =$4                 vcCF2 set $04
(1)  286/   C233E : =$C                 vcCF3 set $0C
(1)  286/   C233E : =$1                 vcCF4 set $01
(1)  287/   C233E : (MACRO)             	smpsVcRateScale     $03, $02, $03, $02
(1)  287/   C233E : =$3                 vcRS1 set $03
(1)  287/   C233E : =$2                 vcRS2 set $02
(1)  287/   C233E : =$3                 vcRS3 set $03
(1)  287/   C233E : =$2                 vcRS4 set $02
(1)  288/   C233E : (MACRO)             	smpsVcAttackRate    $1A, $1C, $1B, $1C
(1)  288/   C233E : =$1A                vcAR1 set $1A
(1)  288/   C233E : =$1C                vcAR2 set $1C
(1)  288/   C233E : =$1B                vcAR3 set $1B
(1)  288/   C233E : =$1C                vcAR4 set $1C
(1)  289/   C233E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  289/   C233E : =$0                 vcAM1 set $00<<5
(1)  289/   C233E : =$0                 vcAM2 set $00<<5
(1)  289/   C233E : =$0                 vcAM3 set $00<<5
(1)  289/   C233E : =$0                 vcAM4 set $00<<5
(1)  290/   C233E : (MACRO)             	smpsVcDecayRate1    $03, $04, $09, $04
(1)  290/   C233E : =$3                 vcD1R1 set $03
(1)  290/   C233E : =$4                 vcD1R2 set $04
(1)  290/   C233E : =$9                 vcD1R3 set $09
(1)  290/   C233E : =$4                 vcD1R4 set $04
(1)  291/   C233E : (MACRO)             	smpsVcDecayRate2    $00, $03, $01, $03
(1)  291/   C233E : =$0                 vcD2R1 set $00
(1)  291/   C233E : =$3                 vcD2R2 set $03
(1)  291/   C233E : =$1                 vcD2R3 set $01
(1)  291/   C233E : =$3                 vcD2R4 set $03
(1)  292/   C233E : (MACRO)             	smpsVcDecayLevel    $0A, $00, $00, $01
(1)  292/   C233E : =$A                 vcDL1 set $0A
(1)  292/   C233E : =$0                 vcDL2 set $00
(1)  292/   C233E : =$0                 vcDL3 set $00
(1)  292/   C233E : =$1                 vcDL4 set $01
(1)  293/   C233E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  293/   C233E : =$F                 vcRR1 set $0F
(1)  293/   C233E : =$F                 vcRR2 set $0F
(1)  293/   C233E : =$F                 vcRR3 set $0F
(1)  293/   C233E : =$F                 vcRR4 set $0F
(1)  294/   C233E : (MACRO)             	smpsVcTotalLevel    $00, $31, $47, $21
(1)  294/   C233E : =$0                 vcTL1 set $00
(1)  294/   C233E : =$31                vcTL2 set $31
(1)  294/   C233E : =$47                vcTL3 set $47
(1)  294/   C233E : =$21                vcTL4 set $21
(1)  294/   C233E : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  294/   C233F :                     ;   0     1     2     3     4     5     6     7
(1)  294/   C233F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  294/   C233F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  294/   C233F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  294/   C233F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  294/   C233F : =$80                vcTLMask1 set $80
(1)  294/   C233F :                     
(1)  294/   C233F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  294/   C233F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  294/   C233F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  294/   C233F : =$80                vcTLMask1 set $80
(1)  294/   C233F : =$0                 vcTL1 set vcTL1&$7F
(1)  294/   C233F : =$31                vcTL2 set vcTL2&$7F
(1)  294/   C233F : =$47                vcTL3 set vcTL3&$7F
(1)  294/   C233F : =$21                vcTL4 set vcTL4&$7F
(1)  294/   C233F :                     
(1)  294/   C233F : 613C 1431                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  294/   C2343 : 9CDB 9CDA                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  294/   C2347 : 0409 0403                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  294/   C234B : 0301 0300                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  294/   C234F : 1F0F 0FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  294/   C2353 : 2147 3180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  295/   C2357 :                     
(1)  296/   C2357 :                     
   59/   C2357 :                        ;-------------------------------------------------------------------------------                
   60/   C2357 :                        ;-------------------------------------------------------------------------------                                
   61/   C2357 :                        ; Z80 Bank $1A
   62/   C2357 : (MACRO)                                align   $8000
   62/   C2357 :  (MACRO-2)                     cnop 0,$8000
   62/   C2357 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   62/   C8000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   63/   C8000 :                        
   64/   C8000 :                        Music_17:	include		"music-improved/97 - Invincible.asm"
(1)    1/   C8000 :                     Invincible_Header:
(1)    2/   C8000 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C8000 :                     
(1)    2/   C8000 : =$2                 SourceDriver set 2
(1)    2/   C8000 :                     
(1)    2/   C8000 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C8000 :                     
(1)    2/   C8000 : =$C8000             songStart set *
(1)    2/   C8000 :                     
(1)    2/   C8000 :                     
(1)    3/   C8000 : (MACRO)             	smpsHeaderVoice     Invincible_Voices
(1)    3/   C8000 : 9481                                dc.w    z80_ptr(INVINCIBLE_VOICES)
(1)    4/   C8002 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C8002 : 0603                        dc.b    $06,$03
(1)    5/   C8004 : (MACRO)             	smpsHeaderTempo     $01, $E8
(1)    5/   C8004 : 01                          dc.b    $01
(1)    5/   C8005 :  (MACRO-2)                  convertMainTempoMod $E8
(1)    5/   C8005 : 18                                          dc.b    s2TempotoS3($E8)
(1)    6/   C8006 :                     
(1)    7/   C8006 : (MACRO)             	smpsHeaderDAC       Invincible_DAC
(1)    7/   C8006 :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_DAC
(1)    7/   C8006 : 4781                                dc.w    z80_ptr(INVINCIBLE_DAC)
(1)    7/   C8008 : 0000                                dc.w    $00
(1)    8/   C800A : (MACRO)             	smpsHeaderFM        Invincible_FM1,	$F4, $11
(1)    8/   C800A :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_FM1
(1)    8/   C800A : 3280                                dc.w    z80_ptr(INVINCIBLE_FM1)
(1)    8/   C800C : F411                        dc.b    $F4,$11
(1)    9/   C800E : (MACRO)             	smpsHeaderFM        Invincible_FM2,	$F4, $09
(1)    9/   C800E :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_FM2
(1)    9/   C800E : 8080                                dc.w    z80_ptr(INVINCIBLE_FM2)
(1)    9/   C8010 : F409                        dc.b    $F4,$09
(1)   10/   C8012 : (MACRO)             	smpsHeaderFM        Invincible_FM3,	$E8, $0F
(1)   10/   C8012 :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_FM3
(1)   10/   C8012 : CA80                                dc.w    z80_ptr(INVINCIBLE_FM3)
(1)   10/   C8014 : E80F                        dc.b    $E8,$0F
(1)   11/   C8016 : (MACRO)             	smpsHeaderFM        Invincible_FM4,	$E8, $0F
(1)   11/   C8016 :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_FM4
(1)   11/   C8016 : FE80                                dc.w    z80_ptr(INVINCIBLE_FM4)
(1)   11/   C8018 : E80F                        dc.b    $E8,$0F
(1)   12/   C801A : (MACRO)             	smpsHeaderFM        Invincible_FM5,	$F4, $11
(1)   12/   C801A :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_FM5
(1)   12/   C801A : 3080                                dc.w    z80_ptr(INVINCIBLE_FM5)
(1)   12/   C801C : F411                        dc.b    $F4,$11
(1)   13/   C801E : (MACRO)             	smpsHeaderPSG       Invincible_PSG1,	$F4, $02, $00, fTone_08
(1)   13/   C801E :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_PSG1
(1)   13/   C801E : 3281                                dc.w    z80_ptr(INVINCIBLE_PSG1)
(1)   13/   C8020 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   13/   C8020 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)   13/   C8021 : 0200 08                     dc.b    $02,$00,FTONE_08
(1)   14/   C8024 : (MACRO)             	smpsHeaderPSG       Invincible_PSG2,	$DC, $05, $00, fTone_05
(1)   14/   C8024 :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_PSG2
(1)   14/   C8024 : 3281                                dc.w    z80_ptr(INVINCIBLE_PSG2)
(1)   14/   C8026 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C8026 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C8027 : 0500 05                     dc.b    $05,$00,FTONE_05
(1)   15/   C802A : (MACRO)             	smpsHeaderPSG       Invincible_PSG3,	$00, $03, $00, fTone_04
(1)   15/   C802A :  (MACRO-2)                  CheckedChannelPointer INVINCIBLE_PSG3
(1)   15/   C802A : 3381                                dc.w    z80_ptr(INVINCIBLE_PSG3)
(1)   15/   C802C :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   C802C : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   C802D : 0300 04                     dc.b    $03,$00,FTONE_04
(1)   16/   C8030 :                     
(1)   17/   C8030 :                     ; FM5 Data
(1)   18/   C8030 :                     Invincible_FM5:
(1)   19/   C8030 : (MACRO)             	smpsAlterNote       $03
(1)   19/   C8030 :  (MACRO-2)                  smpsDetune      $03
(1)   19/   C8030 : E103                        dc.b    $E1,$03
(1)   20/   C8032 :                     
(1)   21/   C8032 :                     ; FM1 Data
(1)   22/   C8032 :                     Invincible_FM1:
(1)   23/   C8032 : 8030                	dc.b	nRst, $30
(1)   24/   C8034 : (MACRO)             	smpsSetvoice        $00
(1)   24/   C8034 :  (MACRO-2)                  smpsFMvoice $00
(1)   24/   C8034 : EF00                                dc.b    $EF,$00
(1)   25/   C8036 :                     
(1)   26/   C8036 :                     Invincible_Loop07:
(1)   27/   C8036 : 800C CA15 8003 CA06 	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
            C803E : 80CB 0F80         
(1)   28/   C8042 : 03C8 1880 06CA 0680 	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
            C804A : CA80 CA80         
(1)   29/   C804E : C680 C40F 8003 C818 	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
            C8056 : 8006               
(1)   30/   C8058 : (MACRO)             	smpsLoop            $00, $02, Invincible_Loop07
(1)   30/   C8058 : F7                          dc.b    $F7
(1)   30/   C8059 : 0002                        dc.b    $00,$02
(1)   30/   C805B : 3680                                dc.w    z80_ptr(INVINCIBLE_LOOP07)
(1)   31/   C805D : (MACRO)             	smpsAlterVol        $FD
(1)   31/   C805D : E6FD                        dc.b    $E6,$FD
(1)   32/   C805F : 8030 80C6 04C8 CACB 	dc.b	nRst, $30, nRst, nA5, $04, nB5, nCs6, nD6, nE6, nFs6, nB5, nCs6
            C8067 : CDCF C8CA         
(1)   33/   C806B : CCCD CFD1 CACC CECF 	dc.b	nEb6, nE6, nFs6, nAb6, nCs6, nEb6, nF6, nFs6, nAb6, nBb6, nF6, nFs6
            C8073 : D1D3 CECF         
(1)   34/   C8077 : D1D3 D5D6           	dc.b	nAb6, nBb6, nC7, nCs7
(1)   35/   C807B : (MACRO)             	smpsAlterVol        $03
(1)   35/   C807B : E603                        dc.b    $E6,$03
(1)   36/   C807D : (MACRO)             	smpsJump            Invincible_Loop07
(1)   36/   C807D : F6                          dc.b    $F6
(1)   36/   C807E : 3680                                dc.w    z80_ptr(INVINCIBLE_LOOP07)
(1)   37/   C8080 :                     
(1)   38/   C8080 :                     ; FM2 Data
(1)   39/   C8080 :                     Invincible_FM2:
(1)   40/   C8080 : (MACRO)             	smpsNop             $01
(1)   41/   C8080 : (MACRO)             	smpsSetvoice        $01
(1)   41/   C8080 :  (MACRO-2)                  smpsFMvoice $01
(1)   41/   C8080 : EF01                                dc.b    $EF,$01
(1)   42/   C8082 : 8030                	dc.b	nRst, $30
(1)   43/   C8084 :                     
(1)   44/   C8084 :                     Invincible_Loop05:
(1)   45/   C8084 : AE06 80AE 80A9 80A9 	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
            C808C : 80AC 12AB         
(1)   46/   C8090 : 0CAC 06AB 0CAE 0680 	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
            C8098 : AE80 A980         
(1)   47/   C809C : A980 B312 B20C B306 	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
            C80A4 : B20C               
(1)   48/   C80A6 : (MACRO)             	smpsLoop            $00, $02, Invincible_Loop05
(1)   48/   C80A6 : F7                          dc.b    $F7
(1)   48/   C80A7 : 0002                        dc.b    $00,$02
(1)   48/   C80A9 : 8480                                dc.w    z80_ptr(INVINCIBLE_LOOP05)
(1)   49/   C80AB :                     
(1)   50/   C80AB :                     Invincible_Loop06:
(1)   51/   C80AB : A406 A012 A206 80A4 	dc.b	nB2, $06, nG2, $12, nA2, $06, nRst, nB2, nRst
            C80B3 : 80               
(1)   52/   C80B4 : (MACRO)             	smpsLoop            $00, $02, Invincible_Loop06
(1)   52/   C80B4 : F7                          dc.b    $F7
(1)   52/   C80B5 : 0002                        dc.b    $00,$02
(1)   52/   C80B7 : AB80                                dc.w    z80_ptr(INVINCIBLE_LOOP06)
(1)   53/   C80B9 : A20C A4A6 A8A4 06A6 	dc.b	nA2, $0C, nB2, nCs3, nEb3, nB2, $06, nCs3, nEb3, nF3, nCs3, nEb3
            C80C1 : A8AA A6A8         
(1)   54/   C80C5 : AAAB                	dc.b	nF3, nFs3
(1)   55/   C80C7 : (MACRO)             	smpsNop             $01
(1)   56/   C80C7 : (MACRO)             	smpsJump            Invincible_Loop05
(1)   56/   C80C7 : F6                          dc.b    $F6
(1)   56/   C80C8 : 8480                                dc.w    z80_ptr(INVINCIBLE_LOOP05)
(1)   57/   C80CA :                     
(1)   58/   C80CA :                     ; FM3 Data
(1)   59/   C80CA :                     Invincible_FM3:
(1)   60/   C80CA : (MACRO)             	smpsSetvoice        $00
(1)   60/   C80CA :  (MACRO-2)                  smpsFMvoice $00
(1)   60/   C80CA : EF00                                dc.b    $EF,$00
(1)   61/   C80CC : 8030                	dc.b	nRst, $30
(1)   62/   C80CE :                     
(1)   63/   C80CE :                     Invincible_Loop03:
(1)   64/   C80CE : CD06 80CD 80CA 80CA 	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nFs6
            C80D6 : 80CB 12CF         
(1)   65/   C80DA : D20C CD06 80CD 80CA 	dc.b	nA6, $0C, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6
            C80E2 : 80CA 80D0         
(1)   66/   C80E6 : 12D0 1E             	dc.b	$12, nG6, $1E
(1)   67/   C80E9 : (MACRO)             	smpsLoop            $00, $02, Invincible_Loop03
(1)   67/   C80E9 : F7                          dc.b    $F7
(1)   67/   C80EA : 0002                        dc.b    $00,$02
(1)   67/   C80EC : CE80                                dc.w    z80_ptr(INVINCIBLE_LOOP03)
(1)   68/   C80EE :                     
(1)   69/   C80EE :                     Invincible_Loop04:
(1)   70/   C80EE : 8006 C412 C606 8012 	dc.b	nRst, $06, nG5, $12, nA5, $06, nRst, $12
(1)   71/   C80F6 : (MACRO)             	smpsLoop            $00, $04, Invincible_Loop04
(1)   71/   C80F6 : F7                          dc.b    $F7
(1)   71/   C80F7 : 0004                        dc.b    $00,$04
(1)   71/   C80F9 : EE80                                dc.w    z80_ptr(INVINCIBLE_LOOP04)
(1)   72/   C80FB : (MACRO)             	smpsJump            Invincible_Loop03
(1)   72/   C80FB : F6                          dc.b    $F6
(1)   72/   C80FC : CE80                                dc.w    z80_ptr(INVINCIBLE_LOOP03)
(1)   73/   C80FE :                     
(1)   74/   C80FE :                     ; FM4 Data
(1)   75/   C80FE :                     Invincible_FM4:
(1)   76/   C80FE : (MACRO)             	smpsSetvoice        $00
(1)   76/   C80FE :  (MACRO-2)                  smpsFMvoice $00
(1)   76/   C80FE : EF00                                dc.b    $EF,$00
(1)   77/   C8100 : 8030                	dc.b	nRst, $30
(1)   78/   C8102 :                     
(1)   79/   C8102 :                     Invincible_Loop01:
(1)   80/   C8102 : CA06 80CA 80C6 80C6 	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nD6
            C810A : 80C8 12CB         
(1)   81/   C810E : CF0C CA06 80CA 80C6 	dc.b	nFs6, $0C, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6
            C8116 : 80C6 80CB         
(1)   82/   C811A : 12CB 1E             	dc.b	$12, nD6, $1E
(1)   83/   C811D : (MACRO)             	smpsLoop            $00, $02, Invincible_Loop01
(1)   83/   C811D : F7                          dc.b    $F7
(1)   83/   C811E : 0002                        dc.b    $00,$02
(1)   83/   C8120 : 0281                                dc.w    z80_ptr(INVINCIBLE_LOOP01)
(1)   84/   C8122 :                     
(1)   85/   C8122 :                     Invincible_Loop02:
(1)   86/   C8122 : 8006 C812 CA06 8012 	dc.b	nRst, $06, nB5, $12, nCs6, $06, nRst, $12
(1)   87/   C812A : (MACRO)             	smpsLoop            $00, $04, Invincible_Loop02
(1)   87/   C812A : F7                          dc.b    $F7
(1)   87/   C812B : 0004                        dc.b    $00,$04
(1)   87/   C812D : 2281                                dc.w    z80_ptr(INVINCIBLE_LOOP02)
(1)   88/   C812F : (MACRO)             	smpsJump            Invincible_Loop01
(1)   88/   C812F : F6                          dc.b    $F6
(1)   88/   C8130 : 0281                                dc.w    z80_ptr(INVINCIBLE_LOOP01)
(1)   89/   C8132 :                     
(1)   90/   C8132 :                     ; PSG1 Data
(1)   91/   C8132 :                     Invincible_PSG1:
(1)   92/   C8132 :                     ; PSG2 Data
(1)   93/   C8132 :                     Invincible_PSG2:
(1)   94/   C8132 : (MACRO)             	smpsStop
(1)   94/   C8132 : F2                          dc.b    $F2
(1)   95/   C8133 :                     
(1)   96/   C8133 :                     ; PSG3 Data
(1)   97/   C8133 :                     Invincible_PSG3:
(1)   98/   C8133 : (MACRO)             	smpsPSGform         $E7
(1)   98/   C8133 : F3E7                        dc.b    $F3,$E7
(1)   99/   C8135 : 8030                	dc.b	nRst, $30
(1)  100/   C8137 :                     
(1)  101/   C8137 :                     Invincible_Jump00:
(1)  102/   C8137 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  102/   C8137 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  102/   C8137 : E803                                dc.b    $E8,$03
(1)  103/   C8139 : C70C                	dc.b	nMaxPSG, $0C
(1)  104/   C813B : (MACRO)             	smpsNoteFill        $0C
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  104/   C813B :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  104/   C813B : E80C                                dc.b    $E8,$0C
(1)  105/   C813D : 0C                  	dc.b	$0C
(1)  106/   C813E : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  106/   C813E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  106/   C813E : E803                                dc.b    $E8,$03
(1)  107/   C8140 : 0C                  	dc.b	$0C
(1)  108/   C8141 : (MACRO)             	smpsNoteFill        $0C
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  108/   C8141 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  108/   C8141 : E80C                                dc.b    $E8,$0C
(1)  109/   C8143 : 0C                  	dc.b	$0C
(1)  110/   C8144 : (MACRO)             	smpsJump            Invincible_Jump00
(1)  110/   C8144 : F6                          dc.b    $F6
(1)  110/   C8145 : 3781                                dc.w    z80_ptr(INVINCIBLE_JUMP00)
(1)  111/   C8147 :                     
(1)  112/   C8147 :                     ; DAC Data
(1)  113/   C8147 :                     Invincible_DAC:
(1)  114/   C8147 : 8206 8281 8182 8282 	dc.b	dSnare, $06, dSnare, dKick, dKick, dSnare, dSnare, dSnare, dSnare
            C814F : 82               
(1)  115/   C8150 :                     
(1)  116/   C8150 :                     Invincible_Loop00:
(1)  117/   C8150 : 810C 8281 8281 0C82 	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $0C, dSnare, dKick, dSnare, dKick, $0C
            C8158 : 8182 810C         
(1)  118/   C815C : 8281 8281 0C82 8104 	dc.b	dSnare, dKick, dSnare, dKick, $0C, dSnare, dKick, $04, nRst, dSnare, dSnare, $0C
            C8164 : 8082 820C         
(1)  119/   C8168 : (MACRO)             	smpsLoop            $00, $02, Invincible_Loop00
(1)  119/   C8168 : F7                          dc.b    $F7
(1)  119/   C8169 : 0002                        dc.b    $00,$02
(1)  119/   C816B : 5081                                dc.w    z80_ptr(INVINCIBLE_LOOP00)
(1)  120/   C816D : 8106 8212 810C 8282 	dc.b	dKick, $06, dSnare, $12, dKick, $0C, dSnare, dSnare, $06, dKick, $12, dKick
            C8175 : 0681 1281         
(1)  121/   C8179 : 0C82 8206 810C 8206 	dc.b	$0C, dSnare, dSnare, $06, dKick, $0C, dSnare, $06, dKick, $0C, dSnare, dSnare
            C8181 : 810C 8282         
(1)  122/   C8185 : 0482 8282 8282 8282 	dc.b	$04, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
            C818D : 8282 8282         
(1)  123/   C8191 : (MACRO)             	smpsJump            Invincible_Loop00
(1)  123/   C8191 : F6                          dc.b    $F6
(1)  123/   C8192 : 5081                                dc.w    z80_ptr(INVINCIBLE_LOOP00)
(1)  124/   C8194 :                     
(1)  125/   C8194 :                     Invincible_Voices:
(1)  126/   C8194 :                     ;	Voice $00
(1)  127/   C8194 :                     ;	$3A
(1)  128/   C8194 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  129/   C8194 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
(1)  130/   C8194 : (MACRO)             	smpsVcAlgorithm     $02
(1)  130/   C8194 : =$2                 vcAlgorithm set $02
(1)  131/   C8194 : (MACRO)             	smpsVcFeedback      $07
(1)  131/   C8194 : =$7                 vcFeedback set $07
(1)  132/   C8194 : (MACRO)             	smpsVcUnusedBits    $00
(1)  132/   C8194 : =$0                 vcUnusedBits set $00
(1)  132/   C8194 : =$0                 vcD1R1Unk set 0
(1)  132/   C8194 : =$0                 vcD1R2Unk set 0
(1)  132/   C8194 : =$0                 vcD1R3Unk set 0
(1)  132/   C8194 : =$0                 vcD1R4Unk set 0
(1)  133/   C8194 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  133/   C8194 : =$0                 vcDT1 set $00
(1)  133/   C8194 : =$0                 vcDT2 set $00
(1)  133/   C8194 : =$0                 vcDT3 set $00
(1)  133/   C8194 : =$0                 vcDT4 set $00
(1)  134/   C8194 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  134/   C8194 : =$1                 vcCF1 set $01
(1)  134/   C8194 : =$1                 vcCF2 set $01
(1)  134/   C8194 : =$7                 vcCF3 set $07
(1)  134/   C8194 : =$1                 vcCF4 set $01
(1)  135/   C8194 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  135/   C8194 : =$1                 vcRS1 set $01
(1)  135/   C8194 : =$2                 vcRS2 set $02
(1)  135/   C8194 : =$2                 vcRS3 set $02
(1)  135/   C8194 : =$2                 vcRS4 set $02
(1)  136/   C8194 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  136/   C8194 : =$13                vcAR1 set $13
(1)  136/   C8194 : =$D                 vcAR2 set $0D
(1)  136/   C8194 : =$E                 vcAR3 set $0E
(1)  136/   C8194 : =$E                 vcAR4 set $0E
(1)  137/   C8194 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  137/   C8194 : =$0                 vcAM1 set $00<<5
(1)  137/   C8194 : =$0                 vcAM2 set $00<<5
(1)  137/   C8194 : =$0                 vcAM3 set $00<<5
(1)  137/   C8194 : =$0                 vcAM4 set $00<<5
(1)  138/   C8194 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  138/   C8194 : =$3                 vcD1R1 set $03
(1)  138/   C8194 : =$E                 vcD1R2 set $0E
(1)  138/   C8194 : =$E                 vcD1R3 set $0E
(1)  138/   C8194 : =$E                 vcD1R4 set $0E
(1)  139/   C8194 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  139/   C8194 : =$0                 vcD2R1 set $00
(1)  139/   C8194 : =$0                 vcD2R2 set $00
(1)  139/   C8194 : =$0                 vcD2R3 set $00
(1)  139/   C8194 : =$0                 vcD2R4 set $00
(1)  140/   C8194 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  140/   C8194 : =$0                 vcDL1 set $00
(1)  140/   C8194 : =$1                 vcDL2 set $01
(1)  140/   C8194 : =$F                 vcDL3 set $0F
(1)  140/   C8194 : =$1                 vcDL4 set $01
(1)  141/   C8194 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  141/   C8194 : =$F                 vcRR1 set $0F
(1)  141/   C8194 : =$F                 vcRR2 set $0F
(1)  141/   C8194 : =$F                 vcRR3 set $0F
(1)  141/   C8194 : =$F                 vcRR4 set $0F
(1)  142/   C8194 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $18
(1)  142/   C8194 : =$0                 vcTL1 set $00
(1)  142/   C8194 : =$27                vcTL2 set $27
(1)  142/   C8194 : =$28                vcTL3 set $28
(1)  142/   C8194 : =$18                vcTL4 set $18
(1)  142/   C8194 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  142/   C8195 :                     ;   0     1     2     3     4     5     6     7
(1)  142/   C8195 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  142/   C8195 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  142/   C8195 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  142/   C8195 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  142/   C8195 : =$80                vcTLMask1 set $80
(1)  142/   C8195 :                     
(1)  142/   C8195 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  142/   C8195 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  142/   C8195 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  142/   C8195 : =$80                vcTLMask1 set $80
(1)  142/   C8195 : =$0                 vcTL1 set vcTL1&$7F
(1)  142/   C8195 : =$27                vcTL2 set vcTL2&$7F
(1)  142/   C8195 : =$28                vcTL3 set vcTL3&$7F
(1)  142/   C8195 : =$18                vcTL4 set vcTL4&$7F
(1)  142/   C8195 :                     
(1)  142/   C8195 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  142/   C8199 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  142/   C819D : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  142/   C81A1 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  142/   C81A5 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  142/   C81A9 : 1828 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  143/   C81AD :                     
(1)  144/   C81AD :                     ;	Voice $01
(1)  145/   C81AD :                     ;	$20
(1)  146/   C81AD :                     ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
(1)  147/   C81AD :                     ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
(1)  148/   C81AD : (MACRO)             	smpsVcAlgorithm     $00
(1)  148/   C81AD : =$0                 vcAlgorithm set $00
(1)  149/   C81AD : (MACRO)             	smpsVcFeedback      $04
(1)  149/   C81AD : =$4                 vcFeedback set $04
(1)  150/   C81AD : (MACRO)             	smpsVcUnusedBits    $00
(1)  150/   C81AD : =$0                 vcUnusedBits set $00
(1)  150/   C81AD : =$0                 vcD1R1Unk set 0
(1)  150/   C81AD : =$0                 vcD1R2Unk set 0
(1)  150/   C81AD : =$0                 vcD1R3Unk set 0
(1)  150/   C81AD : =$0                 vcD1R4Unk set 0
(1)  151/   C81AD : (MACRO)             	smpsVcDetune        $00, $00, $03, $07
(1)  151/   C81AD : =$0                 vcDT1 set $00
(1)  151/   C81AD : =$0                 vcDT2 set $00
(1)  151/   C81AD : =$3                 vcDT3 set $03
(1)  151/   C81AD : =$7                 vcDT4 set $07
(1)  152/   C81AD : (MACRO)             	smpsVcCoarseFreq    $00, $00, $01, $0A
(1)  152/   C81AD : =$0                 vcCF1 set $00
(1)  152/   C81AD : =$0                 vcCF2 set $00
(1)  152/   C81AD : =$1                 vcCF3 set $01
(1)  152/   C81AD : =$A                 vcCF4 set $0A
(1)  153/   C81AD : (MACRO)             	smpsVcRateScale     $03, $03, $03, $02
(1)  153/   C81AD : =$3                 vcRS1 set $03
(1)  153/   C81AD : =$3                 vcRS2 set $03
(1)  153/   C81AD : =$3                 vcRS3 set $03
(1)  153/   C81AD : =$2                 vcRS4 set $02
(1)  154/   C81AD : (MACRO)             	smpsVcAttackRate    $1F, $1C, $18, $1F
(1)  154/   C81AD : =$1F                vcAR1 set $1F
(1)  154/   C81AD : =$1C                vcAR2 set $1C
(1)  154/   C81AD : =$18                vcAR3 set $18
(1)  154/   C81AD : =$1F                vcAR4 set $1F
(1)  155/   C81AD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  155/   C81AD : =$0                 vcAM1 set $00<<5
(1)  155/   C81AD : =$0                 vcAM2 set $00<<5
(1)  155/   C81AD : =$0                 vcAM3 set $00<<5
(1)  155/   C81AD : =$0                 vcAM4 set $00<<5
(1)  156/   C81AD : (MACRO)             	smpsVcDecayRate1    $04, $04, $0A, $10
(1)  156/   C81AD : =$4                 vcD1R1 set $04
(1)  156/   C81AD : =$4                 vcD1R2 set $04
(1)  156/   C81AD : =$A                 vcD1R3 set $0A
(1)  156/   C81AD : =$10                vcD1R4 set $10
(1)  157/   C81AD : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $0F
(1)  157/   C81AD : =$8                 vcD2R1 set $08
(1)  157/   C81AD : =$8                 vcD2R2 set $08
(1)  157/   C81AD : =$8                 vcD2R3 set $08
(1)  157/   C81AD : =$F                 vcD2R4 set $0F
(1)  158/   C81AD : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $05, $05
(1)  158/   C81AD : =$B                 vcDL1 set $0B
(1)  158/   C81AD : =$B                 vcDL2 set $0B
(1)  158/   C81AD : =$5                 vcDL3 set $05
(1)  158/   C81AD : =$5                 vcDL4 set $05
(1)  159/   C81AD : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  159/   C81AD : =$F                 vcRR1 set $0F
(1)  159/   C81AD : =$F                 vcRR2 set $0F
(1)  159/   C81AD : =$F                 vcRR3 set $0F
(1)  159/   C81AD : =$F                 vcRR4 set $0F
(1)  160/   C81AD : (MACRO)             	smpsVcTotalLevel    $00, $17, $2B, $14
(1)  160/   C81AD : =$0                 vcTL1 set $00
(1)  160/   C81AD : =$17                vcTL2 set $17
(1)  160/   C81AD : =$2B                vcTL3 set $2B
(1)  160/   C81AD : =$14                vcTL4 set $14
(1)  160/   C81AD : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  160/   C81AE :                     ;   0     1     2     3     4     5     6     7
(1)  160/   C81AE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  160/   C81AE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  160/   C81AE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  160/   C81AE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  160/   C81AE : =$80                vcTLMask1 set $80
(1)  160/   C81AE :                     
(1)  160/   C81AE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  160/   C81AE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  160/   C81AE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  160/   C81AE : =$80                vcTLMask1 set $80
(1)  160/   C81AE : =$0                 vcTL1 set vcTL1&$7F
(1)  160/   C81AE : =$17                vcTL2 set vcTL2&$7F
(1)  160/   C81AE : =$2B                vcTL3 set vcTL3&$7F
(1)  160/   C81AE : =$14                vcTL4 set vcTL4&$7F
(1)  160/   C81AE :                     
(1)  160/   C81AE : 7A31 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  160/   C81B2 : 9FD8 DCDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  160/   C81B6 : 100A 0404                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  160/   C81BA : 0F08 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  160/   C81BE : 5F5F BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  160/   C81C2 : 142B 1780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  161/   C81C6 :                     
(1)  162/   C81C6 :                     
   65/   C81C6 :                        Music_18:	include		"music-improved/98 - Extra Life.asm"
(1)    1/   C81C6 :                     ExtraLife_Header:
(1)    2/   C81C6 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C81C6 :                     
(1)    2/   C81C6 : =$2                 SourceDriver set 2
(1)    2/   C81C6 :                     
(1)    2/   C81C6 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C81C6 :                     
(1)    2/   C81C6 : =$C81C6             songStart set *
(1)    2/   C81C6 :                     
(1)    2/   C81C6 :                     
(1)    3/   C81C6 : (MACRO)             	smpsHeaderVoice     ExtraLife_Voices
(1)    3/   C81C6 : 6682                                dc.w    z80_ptr(EXTRALIFE_VOICES)
(1)    4/   C81C8 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C81C8 : 0603                        dc.b    $06,$03
(1)    5/   C81CA : (MACRO)             	smpsHeaderTempo     $02, $CD
(1)    5/   C81CA : 02                          dc.b    $02
(1)    5/   C81CB :  (MACRO-2)                  convertMainTempoMod $CD
(1)    5/   C81CB : 33                                          dc.b    s2TempotoS3($CD)
(1)    6/   C81CC :                     
(1)    7/   C81CC : (MACRO)             	smpsHeaderDAC       ExtraLife_DAC
(1)    7/   C81CC :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_DAC
(1)    7/   C81CC : 5582                                dc.w    z80_ptr(EXTRALIFE_DAC)
(1)    7/   C81CE : 0000                                dc.w    $00
(1)    8/   C81D0 : (MACRO)             	smpsHeaderFM        ExtraLife_FM1,	$E8, $10
(1)    8/   C81D0 :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_FM1
(1)    8/   C81D0 : FD81                                dc.w    z80_ptr(EXTRALIFE_FM1)
(1)    8/   C81D2 : E810                        dc.b    $E8,$10
(1)    9/   C81D4 : (MACRO)             	smpsHeaderFM        ExtraLife_FM2,	$E8, $10
(1)    9/   C81D4 :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_FM2
(1)    9/   C81D4 : 1382                                dc.w    z80_ptr(EXTRALIFE_FM2)
(1)    9/   C81D6 : E810                        dc.b    $E8,$10
(1)   10/   C81D8 : (MACRO)             	smpsHeaderFM        ExtraLife_FM3,	$E8, $10
(1)   10/   C81D8 :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_FM3
(1)   10/   C81D8 : 2E82                                dc.w    z80_ptr(EXTRALIFE_FM3)
(1)   10/   C81DA : E810                        dc.b    $E8,$10
(1)   11/   C81DC : (MACRO)             	smpsHeaderFM        ExtraLife_FM4,	$E8, $10
(1)   11/   C81DC :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_FM4
(1)   11/   C81DC : F681                                dc.w    z80_ptr(EXTRALIFE_FM4)
(1)   11/   C81DE : E810                        dc.b    $E8,$10
(1)   12/   C81E0 : (MACRO)             	smpsHeaderFM        ExtraLife_FM5,	$E8, $10
(1)   12/   C81E0 :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_FM5
(1)   12/   C81E0 : 2782                                dc.w    z80_ptr(EXTRALIFE_FM5)
(1)   12/   C81E2 : E810                        dc.b    $E8,$10
(1)   13/   C81E4 : (MACRO)             	smpsHeaderPSG       ExtraLife_PSG1,	$D0, $08, $00, fTone_05
(1)   13/   C81E4 :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_PSG1
(1)   13/   C81E4 : 4382                                dc.w    z80_ptr(EXTRALIFE_PSG1)
(1)   13/   C81E6 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   C81E6 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   C81E7 : 0800 05                     dc.b    $08,$00,FTONE_05
(1)   14/   C81EA : (MACRO)             	smpsHeaderPSG       ExtraLife_PSG2,	$DC, $08, $00, fTone_05
(1)   14/   C81EA :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_PSG2
(1)   14/   C81EA : 5482                                dc.w    z80_ptr(EXTRALIFE_PSG2)
(1)   14/   C81EC :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C81EC : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C81ED : 0800 05                     dc.b    $08,$00,FTONE_05
(1)   15/   C81F0 : (MACRO)             	smpsHeaderPSG       ExtraLife_PSG3,	$DC, $00, $00, fTone_04
(1)   15/   C81F0 :  (MACRO-2)                  CheckedChannelPointer EXTRALIFE_PSG3
(1)   15/   C81F0 : 5482                                dc.w    z80_ptr(EXTRALIFE_PSG3)
(1)   15/   C81F2 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/   C81F2 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   15/   C81F3 : 0000 04                     dc.b    $00,$00,FTONE_04
(1)   16/   C81F6 :                     
(1)   17/   C81F6 :                     ; FM4 Data
(1)   18/   C81F6 :                     ExtraLife_FM4:
(1)   19/   C81F6 : (MACRO)             	smpsAlterNote       $03
(1)   19/   C81F6 :  (MACRO-2)                  smpsDetune      $03
(1)   19/   C81F6 : E103                        dc.b    $E1,$03
(1)   20/   C81F8 : (MACRO)             	smpsPan             panRight, $00
(1)   20/   C81F8 : =$0                 panNone set $00
(1)   20/   C81F8 : =$40                panRight set $40
(1)   20/   C81F8 : =$80                panLeft set $80
(1)   20/   C81F8 : =$C0                panCentre set $C0
(1)   20/   C81F8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   20/   C81F8 : E040                        dc.b $E0,PANRIGHT+$00
(1)   21/   C81FA : (MACRO)             	smpsJump            ExtraLife_Jump01
(1)   21/   C81FA : F6                          dc.b    $F6
(1)   21/   C81FB : FF81                                dc.w    z80_ptr(EXTRALIFE_JUMP01)
(1)   22/   C81FD :                     
(1)   23/   C81FD :                     ; FM1 Data
(1)   24/   C81FD :                     ExtraLife_FM1:
(1)   25/   C81FD : (MACRO)             	smpsPan             panLeft, $00
(1)   25/   C81FD : =$0                 panNone set $00
(1)   25/   C81FD : =$40                panRight set $40
(1)   25/   C81FD : =$80                panLeft set $80
(1)   25/   C81FD : =$C0                panCentre set $C0
(1)   25/   C81FD : =$C0                panCenter set $C0 ; silly Americans :U
(1)   25/   C81FD : E080                        dc.b $E0,PANLEFT+$00
(1)   26/   C81FF :                     
(1)   27/   C81FF :                     ExtraLife_Jump01:
(1)   28/   C81FF : (MACRO)             	smpsSetvoice        $00
(1)   28/   C81FF :  (MACRO-2)                  smpsFMvoice $00
(1)   28/   C81FF : EF00                                dc.b    $EF,$00
(1)   29/   C8201 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   29/   C8201 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   29/   C8201 : E806                                dc.b    $E8,$06
(1)   30/   C8203 : D906 0303 0606      	dc.b	nE7, $06, $03, $03, $06, $06
(1)   31/   C8209 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   31/   C8209 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   31/   C8209 : E800                                dc.b    $E8,$00
(1)   32/   C820B : DB09 D7D6 06D9 18   	dc.b	nFs7, $09, nD7, nCs7, $06, nE7, $18
(1)   33/   C8212 : (MACRO)             	smpsStop
(1)   33/   C8212 : F2                          dc.b    $F2
(1)   34/   C8213 :                     
(1)   35/   C8213 :                     ; FM2 Data
(1)   36/   C8213 :                     ExtraLife_FM2:
(1)   37/   C8213 : (MACRO)             	smpsSetvoice        $01
(1)   37/   C8213 :  (MACRO-2)                  smpsFMvoice $01
(1)   37/   C8213 : EF01                                dc.b    $EF,$01
(1)   38/   C8215 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   38/   C8215 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   38/   C8215 : E806                                dc.b    $E8,$06
(1)   39/   C8217 : (MACRO)             	smpsNop             $01
(1)   40/   C8217 : D606 0303 0606      	dc.b	nCs7, $06, $03, $03, $06, $06
(1)   41/   C821D : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   41/   C821D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   41/   C821D : E800                                dc.b    $E8,$00
(1)   42/   C821F : D709 D4D2 06D6 18   	dc.b	nD7, $09, nB6, nA6, $06, nCs7, $18
(1)   43/   C8226 : (MACRO)             	smpsNop             $01
(1)   44/   C8226 : (MACRO)             	smpsStop
(1)   44/   C8226 : F2                          dc.b    $F2
(1)   45/   C8227 :                     
(1)   46/   C8227 :                     ; FM5 Data
(1)   47/   C8227 :                     ExtraLife_FM5:
(1)   48/   C8227 : (MACRO)             	smpsAlterNote       $03
(1)   48/   C8227 :  (MACRO-2)                  smpsDetune      $03
(1)   48/   C8227 : E103                        dc.b    $E1,$03
(1)   49/   C8229 : (MACRO)             	smpsPan             panRight, $00
(1)   49/   C8229 : =$0                 panNone set $00
(1)   49/   C8229 : =$40                panRight set $40
(1)   49/   C8229 : =$80                panLeft set $80
(1)   49/   C8229 : =$C0                panCentre set $C0
(1)   49/   C8229 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   49/   C8229 : E040                        dc.b $E0,PANRIGHT+$00
(1)   50/   C822B : (MACRO)             	smpsJump            ExtraLife_Jump00
(1)   50/   C822B : F6                          dc.b    $F6
(1)   50/   C822C : 3082                                dc.w    z80_ptr(EXTRALIFE_JUMP00)
(1)   51/   C822E :                     
(1)   52/   C822E :                     ; FM3 Data
(1)   53/   C822E :                     ExtraLife_FM3:
(1)   54/   C822E : (MACRO)             	smpsPan             panLeft, $00
(1)   54/   C822E : =$0                 panNone set $00
(1)   54/   C822E : =$40                panRight set $40
(1)   54/   C822E : =$80                panLeft set $80
(1)   54/   C822E : =$C0                panCentre set $C0
(1)   54/   C822E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   54/   C822E : E080                        dc.b $E0,PANLEFT+$00
(1)   55/   C8230 :                     
(1)   56/   C8230 :                     ExtraLife_Jump00:
(1)   57/   C8230 : (MACRO)             	smpsSetvoice        $02
(1)   57/   C8230 :  (MACRO-2)                  smpsFMvoice $02
(1)   57/   C8230 : EF02                                dc.b    $EF,$02
(1)   58/   C8232 : BA0C 8006 BAB8 8003 	dc.b	nA4, $0C, nRst, $06, nA4, nG4, nRst, $03, nG4, $06, nRst, $03
            C823A : B806 8003         
(1)   59/   C823E : B806 BA18           	dc.b	nG4, $06, nA4, $18
(1)   60/   C8242 : (MACRO)             	smpsStop
(1)   60/   C8242 : F2                          dc.b    $F2
(1)   61/   C8243 :                     
(1)   62/   C8243 :                     ; PSG1 Data
(1)   63/   C8243 :                     ExtraLife_PSG1:
(1)   64/   C8243 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   64/   C8243 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   64/   C8243 : E806                                dc.b    $E8,$06
(1)   65/   C8245 : D606 0303 0606      	dc.b	nCs7, $06, $03, $03, $06, $06
(1)   66/   C824B : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   66/   C824B :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   66/   C824B : E800                                dc.b    $E8,$00
(1)   67/   C824D : D709 D4D2 06D6 18   	dc.b	nD7, $09, nB6, nA6, $06, nCs7, $18
(1)   68/   C8254 :                     
(1)   69/   C8254 :                     ; PSG2 Data
(1)   70/   C8254 :                     ExtraLife_PSG2:
(1)   71/   C8254 :                     ; PSG3 Data
(1)   72/   C8254 :                     ExtraLife_PSG3:
(1)   73/   C8254 : (MACRO)             	smpsStop
(1)   73/   C8254 : F2                          dc.b    $F2
(1)   74/   C8255 :                     
(1)   75/   C8255 :                     ; DAC Data
(1)   76/   C8255 :                     ExtraLife_DAC:
(1)   77/   C8255 : 8812 068B 0909 0688 	dc.b	dHiTimpani, $12, $06, dVLowTimpani, $09, $09, $06, dHiTimpani, $06, dLowTimpani, dHiTimpani, dLowTimpani
            C825D : 068A 888A         
(1)   78/   C8261 : 880C                	dc.b	dHiTimpani, $0C
(1)   79/   C8263 : (MACRO)             	smpsFade
(1)   79/   C8263 : E2                                  dc.b    $E2
(1)   79/   C8264 : FF                                          dc.b    $FF
(1)   79/   C8265 :  (MACRO-2)                                  smpsStop
(1)   79/   C8265 : F2                          dc.b    $F2
(1)   80/   C8266 :                     
(1)   81/   C8266 :                     ExtraLife_Voices:
(1)   82/   C8266 :                     ;	Voice $00
(1)   83/   C8266 :                     ;	$3A
(1)   84/   C8266 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)   85/   C8266 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $4E, $16, $80
(1)   86/   C8266 : (MACRO)             	smpsVcAlgorithm     $02
(1)   86/   C8266 : =$2                 vcAlgorithm set $02
(1)   87/   C8266 : (MACRO)             	smpsVcFeedback      $07
(1)   87/   C8266 : =$7                 vcFeedback set $07
(1)   88/   C8266 : (MACRO)             	smpsVcUnusedBits    $00
(1)   88/   C8266 : =$0                 vcUnusedBits set $00
(1)   88/   C8266 : =$0                 vcD1R1Unk set 0
(1)   88/   C8266 : =$0                 vcD1R2Unk set 0
(1)   88/   C8266 : =$0                 vcD1R3Unk set 0
(1)   88/   C8266 : =$0                 vcD1R4Unk set 0
(1)   89/   C8266 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   89/   C8266 : =$0                 vcDT1 set $00
(1)   89/   C8266 : =$0                 vcDT2 set $00
(1)   89/   C8266 : =$0                 vcDT3 set $00
(1)   89/   C8266 : =$0                 vcDT4 set $00
(1)   90/   C8266 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)   90/   C8266 : =$1                 vcCF1 set $01
(1)   90/   C8266 : =$1                 vcCF2 set $01
(1)   90/   C8266 : =$7                 vcCF3 set $07
(1)   90/   C8266 : =$1                 vcCF4 set $01
(1)   91/   C8266 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)   91/   C8266 : =$1                 vcRS1 set $01
(1)   91/   C8266 : =$2                 vcRS2 set $02
(1)   91/   C8266 : =$2                 vcRS3 set $02
(1)   91/   C8266 : =$2                 vcRS4 set $02
(1)   92/   C8266 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)   92/   C8266 : =$13                vcAR1 set $13
(1)   92/   C8266 : =$D                 vcAR2 set $0D
(1)   92/   C8266 : =$E                 vcAR3 set $0E
(1)   92/   C8266 : =$E                 vcAR4 set $0E
(1)   93/   C8266 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   93/   C8266 : =$0                 vcAM1 set $00<<5
(1)   93/   C8266 : =$0                 vcAM2 set $00<<5
(1)   93/   C8266 : =$0                 vcAM3 set $00<<5
(1)   93/   C8266 : =$0                 vcAM4 set $00<<5
(1)   94/   C8266 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)   94/   C8266 : =$3                 vcD1R1 set $03
(1)   94/   C8266 : =$E                 vcD1R2 set $0E
(1)   94/   C8266 : =$E                 vcD1R3 set $0E
(1)   94/   C8266 : =$E                 vcD1R4 set $0E
(1)   95/   C8266 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   95/   C8266 : =$0                 vcD2R1 set $00
(1)   95/   C8266 : =$0                 vcD2R2 set $00
(1)   95/   C8266 : =$0                 vcD2R3 set $00
(1)   95/   C8266 : =$0                 vcD2R4 set $00
(1)   96/   C8266 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)   96/   C8266 : =$0                 vcDL1 set $00
(1)   96/   C8266 : =$1                 vcDL2 set $01
(1)   96/   C8266 : =$F                 vcDL3 set $0F
(1)   96/   C8266 : =$1                 vcDL4 set $01
(1)   97/   C8266 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   97/   C8266 : =$F                 vcRR1 set $0F
(1)   97/   C8266 : =$F                 vcRR2 set $0F
(1)   97/   C8266 : =$F                 vcRR3 set $0F
(1)   97/   C8266 : =$F                 vcRR4 set $0F
(1)   98/   C8266 : (MACRO)             	smpsVcTotalLevel    $00, $16, $4E, $18
(1)   98/   C8266 : =$0                 vcTL1 set $00
(1)   98/   C8266 : =$16                vcTL2 set $16
(1)   98/   C8266 : =$4E                vcTL3 set $4E
(1)   98/   C8266 : =$18                vcTL4 set $18
(1)   98/   C8266 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   98/   C8267 :                     ;   0     1     2     3     4     5     6     7
(1)   98/   C8267 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   98/   C8267 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   98/   C8267 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   98/   C8267 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   98/   C8267 : =$80                vcTLMask1 set $80
(1)   98/   C8267 :                     
(1)   98/   C8267 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   98/   C8267 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   98/   C8267 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   98/   C8267 : =$80                vcTLMask1 set $80
(1)   98/   C8267 : =$0                 vcTL1 set vcTL1&$7F
(1)   98/   C8267 : =$16                vcTL2 set vcTL2&$7F
(1)   98/   C8267 : =$4E                vcTL3 set vcTL3&$7F
(1)   98/   C8267 : =$18                vcTL4 set vcTL4&$7F
(1)   98/   C8267 :                     
(1)   98/   C8267 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   98/   C826B : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   98/   C826F : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   98/   C8273 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   98/   C8277 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   98/   C827B : 184E 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   99/   C827F :                     
(1)  100/   C827F :                     ;	Voice $01
(1)  101/   C827F :                     ;	$3A
(1)  102/   C827F :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  103/   C827F :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
(1)  104/   C827F : (MACRO)             	smpsVcAlgorithm     $02
(1)  104/   C827F : =$2                 vcAlgorithm set $02
(1)  105/   C827F : (MACRO)             	smpsVcFeedback      $07
(1)  105/   C827F : =$7                 vcFeedback set $07
(1)  106/   C827F : (MACRO)             	smpsVcUnusedBits    $00
(1)  106/   C827F : =$0                 vcUnusedBits set $00
(1)  106/   C827F : =$0                 vcD1R1Unk set 0
(1)  106/   C827F : =$0                 vcD1R2Unk set 0
(1)  106/   C827F : =$0                 vcD1R3Unk set 0
(1)  106/   C827F : =$0                 vcD1R4Unk set 0
(1)  107/   C827F : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  107/   C827F : =$0                 vcDT1 set $00
(1)  107/   C827F : =$0                 vcDT2 set $00
(1)  107/   C827F : =$0                 vcDT3 set $00
(1)  107/   C827F : =$0                 vcDT4 set $00
(1)  108/   C827F : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  108/   C827F : =$1                 vcCF1 set $01
(1)  108/   C827F : =$1                 vcCF2 set $01
(1)  108/   C827F : =$7                 vcCF3 set $07
(1)  108/   C827F : =$1                 vcCF4 set $01
(1)  109/   C827F : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  109/   C827F : =$1                 vcRS1 set $01
(1)  109/   C827F : =$2                 vcRS2 set $02
(1)  109/   C827F : =$2                 vcRS3 set $02
(1)  109/   C827F : =$2                 vcRS4 set $02
(1)  110/   C827F : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  110/   C827F : =$13                vcAR1 set $13
(1)  110/   C827F : =$D                 vcAR2 set $0D
(1)  110/   C827F : =$E                 vcAR3 set $0E
(1)  110/   C827F : =$E                 vcAR4 set $0E
(1)  111/   C827F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  111/   C827F : =$0                 vcAM1 set $00<<5
(1)  111/   C827F : =$0                 vcAM2 set $00<<5
(1)  111/   C827F : =$0                 vcAM3 set $00<<5
(1)  111/   C827F : =$0                 vcAM4 set $00<<5
(1)  112/   C827F : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  112/   C827F : =$3                 vcD1R1 set $03
(1)  112/   C827F : =$E                 vcD1R2 set $0E
(1)  112/   C827F : =$E                 vcD1R3 set $0E
(1)  112/   C827F : =$E                 vcD1R4 set $0E
(1)  113/   C827F : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  113/   C827F : =$0                 vcD2R1 set $00
(1)  113/   C827F : =$0                 vcD2R2 set $00
(1)  113/   C827F : =$0                 vcD2R3 set $00
(1)  113/   C827F : =$0                 vcD2R4 set $00
(1)  114/   C827F : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  114/   C827F : =$0                 vcDL1 set $00
(1)  114/   C827F : =$1                 vcDL2 set $01
(1)  114/   C827F : =$F                 vcDL3 set $0F
(1)  114/   C827F : =$1                 vcDL4 set $01
(1)  115/   C827F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  115/   C827F : =$F                 vcRR1 set $0F
(1)  115/   C827F : =$F                 vcRR2 set $0F
(1)  115/   C827F : =$F                 vcRR3 set $0F
(1)  115/   C827F : =$F                 vcRR4 set $0F
(1)  116/   C827F : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $18
(1)  116/   C827F : =$0                 vcTL1 set $00
(1)  116/   C827F : =$27                vcTL2 set $27
(1)  116/   C827F : =$28                vcTL3 set $28
(1)  116/   C827F : =$18                vcTL4 set $18
(1)  116/   C827F : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  116/   C8280 :                     ;   0     1     2     3     4     5     6     7
(1)  116/   C8280 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  116/   C8280 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  116/   C8280 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  116/   C8280 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  116/   C8280 : =$80                vcTLMask1 set $80
(1)  116/   C8280 :                     
(1)  116/   C8280 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  116/   C8280 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  116/   C8280 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  116/   C8280 : =$80                vcTLMask1 set $80
(1)  116/   C8280 : =$0                 vcTL1 set vcTL1&$7F
(1)  116/   C8280 : =$27                vcTL2 set vcTL2&$7F
(1)  116/   C8280 : =$28                vcTL3 set vcTL3&$7F
(1)  116/   C8280 : =$18                vcTL4 set vcTL4&$7F
(1)  116/   C8280 :                     
(1)  116/   C8280 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  116/   C8284 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  116/   C8288 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  116/   C828C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  116/   C8290 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  116/   C8294 : 1828 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  117/   C8298 :                     
(1)  118/   C8298 :                     ;	Voice $02
(1)  119/   C8298 :                     ;	$3A
(1)  120/   C8298 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  121/   C8298 :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
(1)  122/   C8298 : (MACRO)             	smpsVcAlgorithm     $02
(1)  122/   C8298 : =$2                 vcAlgorithm set $02
(1)  123/   C8298 : (MACRO)             	smpsVcFeedback      $07
(1)  123/   C8298 : =$7                 vcFeedback set $07
(1)  124/   C8298 : (MACRO)             	smpsVcUnusedBits    $00
(1)  124/   C8298 : =$0                 vcUnusedBits set $00
(1)  124/   C8298 : =$0                 vcD1R1Unk set 0
(1)  124/   C8298 : =$0                 vcD1R2Unk set 0
(1)  124/   C8298 : =$0                 vcD1R3Unk set 0
(1)  124/   C8298 : =$0                 vcD1R4Unk set 0
(1)  125/   C8298 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  125/   C8298 : =$0                 vcDT1 set $00
(1)  125/   C8298 : =$0                 vcDT2 set $00
(1)  125/   C8298 : =$0                 vcDT3 set $00
(1)  125/   C8298 : =$0                 vcDT4 set $00
(1)  126/   C8298 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  126/   C8298 : =$1                 vcCF1 set $01
(1)  126/   C8298 : =$1                 vcCF2 set $01
(1)  126/   C8298 : =$7                 vcCF3 set $07
(1)  126/   C8298 : =$1                 vcCF4 set $01
(1)  127/   C8298 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  127/   C8298 : =$1                 vcRS1 set $01
(1)  127/   C8298 : =$2                 vcRS2 set $02
(1)  127/   C8298 : =$2                 vcRS3 set $02
(1)  127/   C8298 : =$2                 vcRS4 set $02
(1)  128/   C8298 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  128/   C8298 : =$13                vcAR1 set $13
(1)  128/   C8298 : =$D                 vcAR2 set $0D
(1)  128/   C8298 : =$E                 vcAR3 set $0E
(1)  128/   C8298 : =$E                 vcAR4 set $0E
(1)  129/   C8298 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  129/   C8298 : =$0                 vcAM1 set $00<<5
(1)  129/   C8298 : =$0                 vcAM2 set $00<<5
(1)  129/   C8298 : =$0                 vcAM3 set $00<<5
(1)  129/   C8298 : =$0                 vcAM4 set $00<<5
(1)  130/   C8298 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  130/   C8298 : =$3                 vcD1R1 set $03
(1)  130/   C8298 : =$E                 vcD1R2 set $0E
(1)  130/   C8298 : =$E                 vcD1R3 set $0E
(1)  130/   C8298 : =$E                 vcD1R4 set $0E
(1)  131/   C8298 : (MACRO)             	smpsVcDecayRate2    $07, $00, $00, $00
(1)  131/   C8298 : =$7                 vcD2R1 set $07
(1)  131/   C8298 : =$0                 vcD2R2 set $00
(1)  131/   C8298 : =$0                 vcD2R3 set $00
(1)  131/   C8298 : =$0                 vcD2R4 set $00
(1)  132/   C8298 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  132/   C8298 : =$0                 vcDL1 set $00
(1)  132/   C8298 : =$1                 vcDL2 set $01
(1)  132/   C8298 : =$F                 vcDL3 set $0F
(1)  132/   C8298 : =$1                 vcDL4 set $01
(1)  133/   C8298 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  133/   C8298 : =$F                 vcRR1 set $0F
(1)  133/   C8298 : =$F                 vcRR2 set $0F
(1)  133/   C8298 : =$F                 vcRR3 set $0F
(1)  133/   C8298 : =$F                 vcRR4 set $0F
(1)  134/   C8298 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $18
(1)  134/   C8298 : =$0                 vcTL1 set $00
(1)  134/   C8298 : =$27                vcTL2 set $27
(1)  134/   C8298 : =$28                vcTL3 set $28
(1)  134/   C8298 : =$18                vcTL4 set $18
(1)  134/   C8298 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  134/   C8299 :                     ;   0     1     2     3     4     5     6     7
(1)  134/   C8299 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  134/   C8299 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  134/   C8299 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  134/   C8299 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  134/   C8299 : =$80                vcTLMask1 set $80
(1)  134/   C8299 :                     
(1)  134/   C8299 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  134/   C8299 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  134/   C8299 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  134/   C8299 : =$80                vcTLMask1 set $80
(1)  134/   C8299 : =$0                 vcTL1 set vcTL1&$7F
(1)  134/   C8299 : =$27                vcTL2 set vcTL2&$7F
(1)  134/   C8299 : =$28                vcTL3 set vcTL3&$7F
(1)  134/   C8299 : =$18                vcTL4 set vcTL4&$7F
(1)  134/   C8299 :                     
(1)  134/   C8299 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  134/   C829D : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  134/   C82A1 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  134/   C82A5 : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  134/   C82A9 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  134/   C82AD : 1828 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  135/   C82B1 :                     
(1)  136/   C82B1 :                     
   66/   C82B1 :                        Music_19:	include		"music-improved/99 - Title Screen.asm"
(1)    1/   C82B1 :                     Title_screen_Header:
(1)    2/   C82B1 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C82B1 :                     
(1)    2/   C82B1 : =$2                 SourceDriver set 2
(1)    2/   C82B1 :                     
(1)    2/   C82B1 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C82B1 :                     
(1)    2/   C82B1 : =$C82B1             songStart set *
(1)    2/   C82B1 :                     
(1)    2/   C82B1 :                     
(1)    3/   C82B1 : (MACRO)             	smpsHeaderVoice     Title_screen_Voices
(1)    3/   C82B1 : 3B84                                dc.w    z80_ptr(TITLE_SCREEN_VOICES)
(1)    4/   C82B3 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C82B3 : 0603                        dc.b    $06,$03
(1)    5/   C82B5 : (MACRO)             	smpsHeaderTempo     $01, $CD
(1)    5/   C82B5 : 01                          dc.b    $01
(1)    5/   C82B6 :  (MACRO-2)                  convertMainTempoMod $CD
(1)    5/   C82B6 : 33                                          dc.b    s2TempotoS3($CD)
(1)    6/   C82B7 :                     
(1)    7/   C82B7 : (MACRO)             	smpsHeaderDAC       Title_screen_DAC
(1)    7/   C82B7 :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_DAC
(1)    7/   C82B7 : E283                                dc.w    z80_ptr(TITLE_SCREEN_DAC)
(1)    7/   C82B9 : 0000                                dc.w    $00
(1)    8/   C82BB : (MACRO)             	smpsHeaderFM        Title_screen_FM1,	$F4, $0C
(1)    8/   C82BB :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_FM1
(1)    8/   C82BB : E382                                dc.w    z80_ptr(TITLE_SCREEN_FM1)
(1)    8/   C82BD : F40C                        dc.b    $F4,$0C
(1)    9/   C82BF : (MACRO)             	smpsHeaderFM        Title_screen_FM2,	$F4, $0C
(1)    9/   C82BF :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_FM2
(1)    9/   C82BF : 1883                                dc.w    z80_ptr(TITLE_SCREEN_FM2)
(1)    9/   C82C1 : F40C                        dc.b    $F4,$0C
(1)   10/   C82C3 : (MACRO)             	smpsHeaderFM        Title_screen_FM3,	$F4, $0B
(1)   10/   C82C3 :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_FM3
(1)   10/   C82C3 : 4A83                                dc.w    z80_ptr(TITLE_SCREEN_FM3)
(1)   10/   C82C5 : F40B                        dc.b    $F4,$0B
(1)   11/   C82C7 : (MACRO)             	smpsHeaderFM        Title_screen_FM4,	$F4, $0B
(1)   11/   C82C7 :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_FM4
(1)   11/   C82C7 : 8383                                dc.w    z80_ptr(TITLE_SCREEN_FM4)
(1)   11/   C82C9 : F40B                        dc.b    $F4,$0B
(1)   12/   C82CB : (MACRO)             	smpsHeaderFM        Title_screen_FM5,	$F4, $0E
(1)   12/   C82CB :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_FM5
(1)   12/   C82CB : E182                                dc.w    z80_ptr(TITLE_SCREEN_FM5)
(1)   12/   C82CD : F40E                        dc.b    $F4,$0E
(1)   13/   C82CF : (MACRO)             	smpsHeaderPSG       Title_screen_PSG1,	$00, $00, $00, fTone_03
(1)   13/   C82CF :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_PSG1
(1)   13/   C82CF : 1784                                dc.w    z80_ptr(TITLE_SCREEN_PSG1)
(1)   13/   C82D1 :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/   C82D1 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   13/   C82D2 : 0000 03                     dc.b    $00,$00,FTONE_03
(1)   14/   C82D5 : (MACRO)             	smpsHeaderPSG       Title_screen_PSG2,	$00, $02, $00, fTone_03
(1)   14/   C82D5 :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_PSG2
(1)   14/   C82D5 : 1584                                dc.w    z80_ptr(TITLE_SCREEN_PSG2)
(1)   14/   C82D7 :  (MACRO-2)                  PSGPitchConvert $00
(1)   14/   C82D7 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   14/   C82D8 : 0200 03                     dc.b    $02,$00,FTONE_03
(1)   15/   C82DB : (MACRO)             	smpsHeaderPSG       Title_screen_PSG3,	$00, $03, $00, fTone_04
(1)   15/   C82DB :  (MACRO-2)                  CheckedChannelPointer TITLE_SCREEN_PSG3
(1)   15/   C82DB : BF83                                dc.w    z80_ptr(TITLE_SCREEN_PSG3)
(1)   15/   C82DD :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   C82DD : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   C82DE : 0300 04                     dc.b    $03,$00,FTONE_04
(1)   16/   C82E1 :                     
(1)   17/   C82E1 :                     ; FM5 Data
(1)   18/   C82E1 :                     Title_screen_FM5:
(1)   19/   C82E1 : (MACRO)             	smpsAlterNote       $03
(1)   19/   C82E1 :  (MACRO-2)                  smpsDetune      $03
(1)   19/   C82E1 : E103                        dc.b    $E1,$03
(1)   20/   C82E3 :                     
(1)   21/   C82E3 :                     ; FM1 Data
(1)   22/   C82E3 :                     Title_screen_FM1:
(1)   23/   C82E3 : (MACRO)             	smpsSetvoice        $00
(1)   23/   C82E3 :  (MACRO-2)                  smpsFMvoice $00
(1)   23/   C82E3 : EF00                                dc.b    $EF,$00
(1)   24/   C82E5 : 803C CA15 8003 CA06 	dc.b	nRst, $3C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
            C82ED : 80CB 0F80         
(1)   25/   C82F1 : 03C8 1880 06CA 80CA 	dc.b	$03, nB5, $18, nRst, $06, nCs6, nRst, nCs6, nRst, nCs6, nRst, nA5
            C82F9 : 80CA 80C6         
(1)   26/   C82FD : 80C4 0F80 03C8 0C80 	dc.b	nRst, nG5, $0F, nRst, $03, nB5, $0C, nRst, $12, nA5, $06, nRst
            C8305 : 12C6 0680         
(1)   27/   C8309 : CA80 D280 CD0C 8006 	dc.b	nCs6, nRst, nA6, nRst, nE6, $0C, nRst, $06, nAb6, $12, nA6, $06
            C8311 : D112 D206         
(1)   28/   C8315 : 8072                	dc.b	nRst, $72
(1)   29/   C8317 : (MACRO)             	smpsStop
(1)   29/   C8317 : F2                          dc.b    $F2
(1)   30/   C8318 :                     
(1)   31/   C8318 :                     ; FM2 Data
(1)   32/   C8318 :                     Title_screen_FM2:
(1)   33/   C8318 : (MACRO)             	smpsSetvoice        $03
(1)   33/   C8318 :  (MACRO-2)                  smpsFMvoice $03
(1)   33/   C8318 : EF03                                dc.b    $EF,$03
(1)   34/   C831A : (MACRO)             	smpsNop             $01
(1)   35/   C831A : 8030 AE06 80AE 80A9 	dc.b	nRst, $30, nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3
            C8322 : 80A9 80AC         
(1)   36/   C8326 : 12B0 B30C AE06 80AE 	dc.b	$12, nB3, nD4, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3
            C832E : 80A9 80A9         
(1)   37/   C8332 : 80B3 12B2 B00C 80AE 	dc.b	nRst, nD4, $12, nCs4, nB3, $0C, nRst, nA3, nRst, nA3, nRst, $06
            C833A : 80AE 8006         
(1)   38/   C833E : AD12 AE06 80        	dc.b	nAb3, $12, nA3, $06, nRst
(1)   39/   C8343 : (MACRO)             	smpsSetvoice        $01
(1)   39/   C8343 :  (MACRO-2)                  smpsFMvoice $01
(1)   39/   C8343 : EF01                                dc.b    $EF,$01
(1)   40/   C8345 : (MACRO)             	smpsAlterVol        $02
(1)   40/   C8345 : E602                        dc.b    $E6,$02
(1)   41/   C8347 : A26C                	dc.b	nA2, $6C
(1)   42/   C8349 : (MACRO)             	smpsNop             $01
(1)   43/   C8349 : (MACRO)             	smpsStop
(1)   43/   C8349 : F2                          dc.b    $F2
(1)   44/   C834A :                     
(1)   45/   C834A :                     ; FM3 Data
(1)   46/   C834A :                     Title_screen_FM3:
(1)   47/   C834A : (MACRO)             	smpsSetvoice        $02
(1)   47/   C834A :  (MACRO-2)                  smpsFMvoice $02
(1)   47/   C834A : EF02                                dc.b    $EF,$02
(1)   48/   C834C : 8030 CD06 80CD 80CA 	dc.b	nRst, $30, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6
            C8354 : 80CA 80CB         
(1)   49/   C8358 : 0F80 03CB 1880 06CD 	dc.b	$0F, nRst, $03, nD6, $18, nRst, $06, nE6, nRst, nE6, nRst, nCs6
            C8360 : 80CD 80CA         
(1)   50/   C8364 : 80CA 80D0 0F80 03D0 	dc.b	nRst, nCs6, nRst, nG6, $0F, nRst, $03, nG6, $18, nRst, $06, nE6
            C836C : 1880 06CD         
(1)   51/   C8370 : 0C80 CD80 8006 CC12 	dc.b	$0C, nRst, nE6, nRst, nRst, $06, nEb6, $12, nE6, $0C
            C8378 : CD0C               
(1)   52/   C837A : (MACRO)             	smpsAlterVol        $FC
(1)   52/   C837A : E6FC                        dc.b    $E6,$FC
(1)   53/   C837C : (MACRO)             	smpsSetvoice        $01
(1)   53/   C837C :  (MACRO-2)                  smpsFMvoice $01
(1)   53/   C837C : EF01                                dc.b    $EF,$01
(1)   54/   C837E : (MACRO)             	smpsAlterNote       $03
(1)   54/   C837E :  (MACRO-2)                  smpsDetune      $03
(1)   54/   C837E : E103                        dc.b    $E1,$03
(1)   55/   C8380 : A26C                	dc.b	nA2, $6C
(1)   56/   C8382 : (MACRO)             	smpsStop
(1)   56/   C8382 : F2                          dc.b    $F2
(1)   57/   C8383 :                     
(1)   58/   C8383 :                     ; FM4 Data
(1)   59/   C8383 :                     Title_screen_FM4:
(1)   60/   C8383 : (MACRO)             	smpsSetvoice        $02
(1)   60/   C8383 :  (MACRO-2)                  smpsFMvoice $02
(1)   60/   C8383 : EF02                                dc.b    $EF,$02
(1)   61/   C8385 : 8030 CA06 80CA 80C6 	dc.b	nRst, $30, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5
            C838D : 80C6 80C8         
(1)   62/   C8391 : 0F80 03C8 1880 06CA 	dc.b	$0F, nRst, $03, nB5, $18, nRst, $06, nCs6, nRst, nCs6, nRst, nA5
            C8399 : 80CA 80C6         
(1)   63/   C839D : 80C6 80CB 0F80 03CB 	dc.b	nRst, nA5, nRst, nD6, $0F, nRst, $03, nD6, $18, nRst, $06, nCs6
            C83A5 : 1880 06CA         
(1)   64/   C83A9 : 0C80 CA80 8006 C912 	dc.b	$0C, nRst, nCs6, nRst, nRst, $06, nC6, $12, nCs6, $0C
            C83B1 : CA0C               
(1)   65/   C83B3 : (MACRO)             	smpsAlterVol        $FD
(1)   65/   C83B3 : E6FD                        dc.b    $E6,$FD
(1)   66/   C83B5 : (MACRO)             	smpsSetvoice        $01
(1)   66/   C83B5 :  (MACRO-2)                  smpsFMvoice $01
(1)   66/   C83B5 : EF01                                dc.b    $EF,$01
(1)   67/   C83B7 : (MACRO)             	smpsModSet          $00, $01, $06, $04
(1)   67/   C83B7 : F0                          dc.b    $F0
(1)   67/   C83B8 : 0101 0605                           dc.b    $00+1,$01,$06,(($04+1) * $01) & $FF
(1)   67/   C83BC :                             ;dc.b   $01,$06,$04
(1)   68/   C83BC : A26C                	dc.b	nA2, $6C
(1)   69/   C83BE : (MACRO)             	smpsStop
(1)   69/   C83BE : F2                          dc.b    $F2
(1)   70/   C83BF :                     
(1)   71/   C83BF :                     ; PSG3 Data
(1)   72/   C83BF :                     Title_screen_PSG3:
(1)   73/   C83BF : (MACRO)             	smpsPSGform         $E7
(1)   73/   C83BF : F3E7                        dc.b    $F3,$E7
(1)   74/   C83C1 : 8030                	dc.b	nRst, $30
(1)   75/   C83C3 :                     
(1)   76/   C83C3 :                     Title_screen_Loop02:
(1)   77/   C83C3 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   77/   C83C3 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   77/   C83C3 : E803                                dc.b    $E8,$03
(1)   78/   C83C5 : C70C                	dc.b	nMaxPSG, $0C
(1)   79/   C83C7 : (MACRO)             	smpsNoteFill        $0C
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   79/   C83C7 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   79/   C83C7 : E80C                                dc.b    $E8,$0C
(1)   80/   C83C9 : 0C                  	dc.b	$0C
(1)   81/   C83CA : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   81/   C83CA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   81/   C83CA : E803                                dc.b    $E8,$03
(1)   82/   C83CC : 0C                  	dc.b	$0C
(1)   83/   C83CD : (MACRO)             	smpsNoteFill        $0C
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   83/   C83CD :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   83/   C83CD : E80C                                dc.b    $E8,$0C
(1)   84/   C83CF : 0C                  	dc.b	$0C
(1)   85/   C83D0 : (MACRO)             	smpsLoop            $00, $05, Title_screen_Loop02
(1)   85/   C83D0 : F7                          dc.b    $F7
(1)   85/   C83D1 : 0005                        dc.b    $00,$05
(1)   85/   C83D3 : C383                                dc.w    z80_ptr(TITLE_SCREEN_LOOP02)
(1)   86/   C83D5 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   86/   C83D5 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   86/   C83D5 : E803                                dc.b    $E8,$03
(1)   87/   C83D7 : 06                  	dc.b	$06
(1)   88/   C83D8 : (MACRO)             	smpsNoteFill        $0E
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   88/   C83D8 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   88/   C83D8 : E80E                                dc.b    $E8,$0E
(1)   89/   C83DA : 12                  	dc.b	$12
(1)   90/   C83DB : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   90/   C83DB :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   90/   C83DB : E803                                dc.b    $E8,$03
(1)   91/   C83DD : 0C                  	dc.b	$0C
(1)   92/   C83DE : (MACRO)             	smpsNoteFill        $0F
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   92/   C83DE :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   92/   C83DE : E80F                                dc.b    $E8,$0F
(1)   93/   C83E0 : 0C                  	dc.b	$0C
(1)   94/   C83E1 : (MACRO)             	smpsStop
(1)   94/   C83E1 : F2                          dc.b    $F2
(1)   95/   C83E2 :                     
(1)   96/   C83E2 :                     ; DAC Data
(1)   97/   C83E2 :                     Title_screen_DAC:
(1)   98/   C83E2 : 810C 8282 8208 8204 	dc.b	dKick, $0C, dSnare, dSnare, dSnare, $08, dSnare, $04, dKick, $0C, dSnare, dKick
            C83EA : 810C 8281         
(1)   99/   C83EE : 8281 8281 8281 8281 	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
            C83F6 : 8281 8281         
(1)  100/   C83FA : 0680 0282 8282 0982 	dc.b	$06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare, $03, dKick, $0C, dSnare
            C8402 : 0381 0C82         
(1)  101/   C8406 : 8204 8282 8280 8082 	dc.b	dSnare, $04, dSnare, dSnare, dSnare, nRst, nRst, dSnare, $06, dSnare, $12, dSnare
            C840E : 0682 1282         
(1)  102/   C8412 : 0C81                	dc.b	$0C, dKick
(1)  103/   C8414 : (MACRO)             	smpsStop
(1)  103/   C8414 : F2                          dc.b    $F2
(1)  104/   C8415 :                     
(1)  105/   C8415 :                     ; PSG2 Data
(1)  106/   C8415 :                     Title_screen_PSG2:
(1)  107/   C8415 : 8003                	dc.b	nRst, $03
(1)  108/   C8417 :                     
(1)  109/   C8417 :                     ; PSG1 Data
(1)  110/   C8417 :                     Title_screen_PSG1:
(1)  111/   C8417 : 8030                	dc.b	nRst, $30
(1)  112/   C8419 : (MACRO)             	smpsLoop            $00, $06, Title_screen_PSG1
(1)  112/   C8419 : F7                          dc.b    $F7
(1)  112/   C841A : 0006                        dc.b    $00,$06
(1)  112/   C841C : 1784                                dc.w    z80_ptr(TITLE_SCREEN_PSG1)
(1)  113/   C841E : 8020                	dc.b	nRst, $20
(1)  114/   C8420 :                     
(1)  115/   C8420 :                     Title_screen_Loop00:
(1)  116/   C8420 : BF03 C1C3           	dc.b	nD5, $03, nE5, nFs5
(1)  117/   C8424 : (MACRO)             	smpsPSGAlterVol     $01
(1)  117/   C8424 : EC01                        dc.b    $EC,$01
(1)  118/   C8426 : (MACRO)             	smpsAlterPitch      $FF
(1)  118/   C8426 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  118/   C8426 : FBFF                                dc.b    $FB,$FF
(1)  119/   C8428 : (MACRO)             	smpsLoop            $00, $05, Title_screen_Loop00
(1)  119/   C8428 : F7                          dc.b    $F7
(1)  119/   C8429 : 0005                        dc.b    $00,$05
(1)  119/   C842B : 2084                                dc.w    z80_ptr(TITLE_SCREEN_LOOP00)
(1)  120/   C842D :                     
(1)  121/   C842D :                     Title_screen_Loop01:
(1)  122/   C842D : BF03 C1C3           	dc.b	nD5, $03, nE5, nFs5
(1)  123/   C8431 : (MACRO)             	smpsPSGAlterVol     $01
(1)  123/   C8431 : EC01                        dc.b    $EC,$01
(1)  124/   C8433 : (MACRO)             	smpsAlterPitch      $01
(1)  124/   C8433 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  124/   C8433 : FB01                                dc.b    $FB,$01
(1)  125/   C8435 : (MACRO)             	smpsLoop            $00, $07, Title_screen_Loop01
(1)  125/   C8435 : F7                          dc.b    $F7
(1)  125/   C8436 : 0007                        dc.b    $00,$07
(1)  125/   C8438 : 2D84                                dc.w    z80_ptr(TITLE_SCREEN_LOOP01)
(1)  126/   C843A : (MACRO)             	smpsStop
(1)  126/   C843A : F2                          dc.b    $F2
(1)  127/   C843B :                     
(1)  128/   C843B :                     Title_screen_Voices:
(1)  129/   C843B :                     ;	Voice $00
(1)  130/   C843B :                     ;	$3A
(1)  131/   C843B :                     ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
(1)  132/   C843B :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
(1)  133/   C843B : (MACRO)             	smpsVcAlgorithm     $02
(1)  133/   C843B : =$2                 vcAlgorithm set $02
(1)  134/   C843B : (MACRO)             	smpsVcFeedback      $07
(1)  134/   C843B : =$7                 vcFeedback set $07
(1)  135/   C843B : (MACRO)             	smpsVcUnusedBits    $00
(1)  135/   C843B : =$0                 vcUnusedBits set $00
(1)  135/   C843B : =$0                 vcD1R1Unk set 0
(1)  135/   C843B : =$0                 vcD1R2Unk set 0
(1)  135/   C843B : =$0                 vcD1R3Unk set 0
(1)  135/   C843B : =$0                 vcD1R4Unk set 0
(1)  136/   C843B : (MACRO)             	smpsVcDetune        $00, $05, $00, $05
(1)  136/   C843B : =$0                 vcDT1 set $00
(1)  136/   C843B : =$5                 vcDT2 set $05
(1)  136/   C843B : =$0                 vcDT3 set $00
(1)  136/   C843B : =$5                 vcDT4 set $05
(1)  137/   C843B : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $01
(1)  137/   C843B : =$2                 vcCF1 set $02
(1)  137/   C843B : =$1                 vcCF2 set $01
(1)  137/   C843B : =$8                 vcCF3 set $08
(1)  137/   C843B : =$1                 vcCF4 set $01
(1)  138/   C843B : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  138/   C843B : =$0                 vcRS1 set $00
(1)  138/   C843B : =$0                 vcRS2 set $00
(1)  138/   C843B : =$0                 vcRS3 set $00
(1)  138/   C843B : =$0                 vcRS4 set $00
(1)  139/   C843B : (MACRO)             	smpsVcAttackRate    $10, $1E, $1E, $1E
(1)  139/   C843B : =$10                vcAR1 set $10
(1)  139/   C843B : =$1E                vcAR2 set $1E
(1)  139/   C843B : =$1E                vcAR3 set $1E
(1)  139/   C843B : =$1E                vcAR4 set $1E
(1)  140/   C843B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  140/   C843B : =$0                 vcAM1 set $00<<5
(1)  140/   C843B : =$0                 vcAM2 set $00<<5
(1)  140/   C843B : =$0                 vcAM3 set $00<<5
(1)  140/   C843B : =$0                 vcAM4 set $00<<5
(1)  141/   C843B : (MACRO)             	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1)  141/   C843B : =$F                 vcD1R1 set $0F
(1)  141/   C843B : =$1F                vcD1R2 set $1F
(1)  141/   C843B : =$1F                vcD1R3 set $1F
(1)  141/   C843B : =$1F                vcD1R4 set $1F
(1)  142/   C843B : (MACRO)             	smpsVcDecayRate2    $02, $00, $00, $00
(1)  142/   C843B : =$2                 vcD2R1 set $02
(1)  142/   C843B : =$0                 vcD2R2 set $00
(1)  142/   C843B : =$0                 vcD2R3 set $00
(1)  142/   C843B : =$0                 vcD2R4 set $00
(1)  143/   C843B : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1)  143/   C843B : =$1                 vcDL1 set $01
(1)  143/   C843B : =$0                 vcDL2 set $00
(1)  143/   C843B : =$0                 vcDL3 set $00
(1)  143/   C843B : =$0                 vcDL4 set $00
(1)  144/   C843B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  144/   C843B : =$F                 vcRR1 set $0F
(1)  144/   C843B : =$F                 vcRR2 set $0F
(1)  144/   C843B : =$F                 vcRR3 set $0F
(1)  144/   C843B : =$F                 vcRR4 set $0F
(1)  145/   C843B : (MACRO)             	smpsVcTotalLevel    $01, $22, $24, $18
(1)  145/   C843B : =$1                 vcTL1 set $01
(1)  145/   C843B : =$22                vcTL2 set $22
(1)  145/   C843B : =$24                vcTL3 set $24
(1)  145/   C843B : =$18                vcTL4 set $18
(1)  145/   C843B : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  145/   C843C :                     ;   0     1     2     3     4     5     6     7
(1)  145/   C843C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  145/   C843C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  145/   C843C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  145/   C843C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  145/   C843C : =$80                vcTLMask1 set $80
(1)  145/   C843C :                     
(1)  145/   C843C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  145/   C843C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  145/   C843C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  145/   C843C : =$80                vcTLMask1 set $80
(1)  145/   C843C : =$1                 vcTL1 set vcTL1&$7F
(1)  145/   C843C : =$22                vcTL2 set vcTL2&$7F
(1)  145/   C843C : =$24                vcTL3 set vcTL3&$7F
(1)  145/   C843C : =$18                vcTL4 set vcTL4&$7F
(1)  145/   C843C :                     
(1)  145/   C843C : 5108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  145/   C8440 : 1E1E 1E10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  145/   C8444 : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  145/   C8448 : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  145/   C844C : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  145/   C8450 : 1824 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  146/   C8454 :                     
(1)  147/   C8454 :                     ;	Voice $01
(1)  148/   C8454 :                     ;	$20
(1)  149/   C8454 :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(1)  150/   C8454 :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
(1)  151/   C8454 : (MACRO)             	smpsVcAlgorithm     $00
(1)  151/   C8454 : =$0                 vcAlgorithm set $00
(1)  152/   C8454 : (MACRO)             	smpsVcFeedback      $04
(1)  152/   C8454 : =$4                 vcFeedback set $04
(1)  153/   C8454 : (MACRO)             	smpsVcUnusedBits    $00
(1)  153/   C8454 : =$0                 vcUnusedBits set $00
(1)  153/   C8454 : =$0                 vcD1R1Unk set 0
(1)  153/   C8454 : =$0                 vcD1R2Unk set 0
(1)  153/   C8454 : =$0                 vcD1R3Unk set 0
(1)  153/   C8454 : =$0                 vcD1R4Unk set 0
(1)  154/   C8454 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)  154/   C8454 : =$3                 vcDT1 set $03
(1)  154/   C8454 : =$3                 vcDT2 set $03
(1)  154/   C8454 : =$3                 vcDT3 set $03
(1)  154/   C8454 : =$3                 vcDT4 set $03
(1)  155/   C8454 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(1)  155/   C8454 : =$1                 vcCF1 set $01
(1)  155/   C8454 : =$0                 vcCF2 set $00
(1)  155/   C8454 : =$5                 vcCF3 set $05
(1)  155/   C8454 : =$6                 vcCF4 set $06
(1)  156/   C8454 : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1)  156/   C8454 : =$2                 vcRS1 set $02
(1)  156/   C8454 : =$2                 vcRS2 set $02
(1)  156/   C8454 : =$3                 vcRS3 set $03
(1)  156/   C8454 : =$3                 vcRS4 set $03
(1)  157/   C8454 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  157/   C8454 : =$1F                vcAR1 set $1F
(1)  157/   C8454 : =$1F                vcAR2 set $1F
(1)  157/   C8454 : =$1F                vcAR3 set $1F
(1)  157/   C8454 : =$1F                vcAR4 set $1F
(1)  158/   C8454 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  158/   C8454 : =$0                 vcAM1 set $00<<5
(1)  158/   C8454 : =$0                 vcAM2 set $00<<5
(1)  158/   C8454 : =$0                 vcAM3 set $00<<5
(1)  158/   C8454 : =$0                 vcAM4 set $00<<5
(1)  159/   C8454 : (MACRO)             	smpsVcDecayRate1    $06, $09, $06, $07
(1)  159/   C8454 : =$6                 vcD1R1 set $06
(1)  159/   C8454 : =$9                 vcD1R2 set $09
(1)  159/   C8454 : =$6                 vcD1R3 set $06
(1)  159/   C8454 : =$7                 vcD1R4 set $07
(1)  160/   C8454 : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1)  160/   C8454 : =$8                 vcD2R1 set $08
(1)  160/   C8454 : =$6                 vcD2R2 set $06
(1)  160/   C8454 : =$6                 vcD2R3 set $06
(1)  160/   C8454 : =$7                 vcD2R4 set $07
(1)  161/   C8454 : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1)  161/   C8454 : =$F                 vcDL1 set $0F
(1)  161/   C8454 : =$1                 vcDL2 set $01
(1)  161/   C8454 : =$1                 vcDL3 set $01
(1)  161/   C8454 : =$2                 vcDL4 set $02
(1)  162/   C8454 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  162/   C8454 : =$F                 vcRR1 set $0F
(1)  162/   C8454 : =$F                 vcRR2 set $0F
(1)  162/   C8454 : =$F                 vcRR3 set $0F
(1)  162/   C8454 : =$F                 vcRR4 set $0F
(1)  163/   C8454 : (MACRO)             	smpsVcTotalLevel    $00, $13, $37, $19
(1)  163/   C8454 : =$0                 vcTL1 set $00
(1)  163/   C8454 : =$13                vcTL2 set $13
(1)  163/   C8454 : =$37                vcTL3 set $37
(1)  163/   C8454 : =$19                vcTL4 set $19
(1)  163/   C8454 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  163/   C8455 :                     ;   0     1     2     3     4     5     6     7
(1)  163/   C8455 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  163/   C8455 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  163/   C8455 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  163/   C8455 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  163/   C8455 : =$80                vcTLMask1 set $80
(1)  163/   C8455 :                     
(1)  163/   C8455 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  163/   C8455 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  163/   C8455 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  163/   C8455 : =$80                vcTLMask1 set $80
(1)  163/   C8455 : =$0                 vcTL1 set vcTL1&$7F
(1)  163/   C8455 : =$13                vcTL2 set vcTL2&$7F
(1)  163/   C8455 : =$37                vcTL3 set vcTL3&$7F
(1)  163/   C8455 : =$19                vcTL4 set vcTL4&$7F
(1)  163/   C8455 :                     
(1)  163/   C8455 : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  163/   C8459 : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  163/   C845D : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  163/   C8461 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  163/   C8465 : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  163/   C8469 : 1937 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  164/   C846D :                     
(1)  165/   C846D :                     ;	Voice $02
(1)  166/   C846D :                     ;	$3A
(1)  167/   C846D :                     ;	$01, $07, $01, $01, 	$7D, $7D, $7D, $33, 	$0E, $0E, $0E, $03
(1)  168/   C846D :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $1F, 	$18, $20, $2F, $80
(1)  169/   C846D : (MACRO)             	smpsVcAlgorithm     $02
(1)  169/   C846D : =$2                 vcAlgorithm set $02
(1)  170/   C846D : (MACRO)             	smpsVcFeedback      $07
(1)  170/   C846D : =$7                 vcFeedback set $07
(1)  171/   C846D : (MACRO)             	smpsVcUnusedBits    $00
(1)  171/   C846D : =$0                 vcUnusedBits set $00
(1)  171/   C846D : =$0                 vcD1R1Unk set 0
(1)  171/   C846D : =$0                 vcD1R2Unk set 0
(1)  171/   C846D : =$0                 vcD1R3Unk set 0
(1)  171/   C846D : =$0                 vcD1R4Unk set 0
(1)  172/   C846D : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  172/   C846D : =$0                 vcDT1 set $00
(1)  172/   C846D : =$0                 vcDT2 set $00
(1)  172/   C846D : =$0                 vcDT3 set $00
(1)  172/   C846D : =$0                 vcDT4 set $00
(1)  173/   C846D : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  173/   C846D : =$1                 vcCF1 set $01
(1)  173/   C846D : =$1                 vcCF2 set $01
(1)  173/   C846D : =$7                 vcCF3 set $07
(1)  173/   C846D : =$1                 vcCF4 set $01
(1)  174/   C846D : (MACRO)             	smpsVcRateScale     $00, $01, $01, $01
(1)  174/   C846D : =$0                 vcRS1 set $00
(1)  174/   C846D : =$1                 vcRS2 set $01
(1)  174/   C846D : =$1                 vcRS3 set $01
(1)  174/   C846D : =$1                 vcRS4 set $01
(1)  175/   C846D : (MACRO)             	smpsVcAttackRate    $33, $3D, $3D, $3D
(1)  175/   C846D : =$33                vcAR1 set $33
(1)  175/   C846D : =$3D                vcAR2 set $3D
(1)  175/   C846D : =$3D                vcAR3 set $3D
(1)  175/   C846D : =$3D                vcAR4 set $3D
(1)  176/   C846D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  176/   C846D : =$0                 vcAM1 set $00<<5
(1)  176/   C846D : =$0                 vcAM2 set $00<<5
(1)  176/   C846D : =$0                 vcAM3 set $00<<5
(1)  176/   C846D : =$0                 vcAM4 set $00<<5
(1)  177/   C846D : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  177/   C846D : =$3                 vcD1R1 set $03
(1)  177/   C846D : =$E                 vcD1R2 set $0E
(1)  177/   C846D : =$E                 vcD1R3 set $0E
(1)  177/   C846D : =$E                 vcD1R4 set $0E
(1)  178/   C846D : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  178/   C846D : =$0                 vcD2R1 set $00
(1)  178/   C846D : =$0                 vcD2R2 set $00
(1)  178/   C846D : =$0                 vcD2R3 set $00
(1)  178/   C846D : =$0                 vcD2R4 set $00
(1)  179/   C846D : (MACRO)             	smpsVcDecayLevel    $01, $01, $0F, $01
(1)  179/   C846D : =$1                 vcDL1 set $01
(1)  179/   C846D : =$1                 vcDL2 set $01
(1)  179/   C846D : =$F                 vcDL3 set $0F
(1)  179/   C846D : =$1                 vcDL4 set $01
(1)  180/   C846D : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  180/   C846D : =$F                 vcRR1 set $0F
(1)  180/   C846D : =$F                 vcRR2 set $0F
(1)  180/   C846D : =$F                 vcRR3 set $0F
(1)  180/   C846D : =$F                 vcRR4 set $0F
(1)  181/   C846D : (MACRO)             	smpsVcTotalLevel    $00, $2F, $20, $18
(1)  181/   C846D : =$0                 vcTL1 set $00
(1)  181/   C846D : =$2F                vcTL2 set $2F
(1)  181/   C846D : =$20                vcTL3 set $20
(1)  181/   C846D : =$18                vcTL4 set $18
(1)  181/   C846D : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  181/   C846E :                     ;   0     1     2     3     4     5     6     7
(1)  181/   C846E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  181/   C846E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  181/   C846E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  181/   C846E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  181/   C846E : =$80                vcTLMask1 set $80
(1)  181/   C846E :                     
(1)  181/   C846E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  181/   C846E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  181/   C846E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  181/   C846E : =$80                vcTLMask1 set $80
(1)  181/   C846E : =$0                 vcTL1 set vcTL1&$7F
(1)  181/   C846E : =$2F                vcTL2 set vcTL2&$7F
(1)  181/   C846E : =$20                vcTL3 set vcTL3&$7F
(1)  181/   C846E : =$18                vcTL4 set vcTL4&$7F
(1)  181/   C846E :                     
(1)  181/   C846E : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  181/   C8472 : 7D7D 7D33                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  181/   C8476 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  181/   C847A : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  181/   C847E : 1FFF 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  181/   C8482 : 1820 2F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  182/   C8486 :                     
(1)  183/   C8486 :                     ;	Voice $03
(1)  184/   C8486 :                     ;	$39
(1)  185/   C8486 :                     ;	$06, $60, $30, $01, 	$3F, $3F, $5F, $5F, 	$11, $0F, $13, $09
(1)  186/   C8486 :                     ;	$05, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$27, $2C, $97, $80
(1)  187/   C8486 : (MACRO)             	smpsVcAlgorithm     $01
(1)  187/   C8486 : =$1                 vcAlgorithm set $01
(1)  188/   C8486 : (MACRO)             	smpsVcFeedback      $07
(1)  188/   C8486 : =$7                 vcFeedback set $07
(1)  189/   C8486 : (MACRO)             	smpsVcUnusedBits    $00
(1)  189/   C8486 : =$0                 vcUnusedBits set $00
(1)  189/   C8486 : =$0                 vcD1R1Unk set 0
(1)  189/   C8486 : =$0                 vcD1R2Unk set 0
(1)  189/   C8486 : =$0                 vcD1R3Unk set 0
(1)  189/   C8486 : =$0                 vcD1R4Unk set 0
(1)  190/   C8486 : (MACRO)             	smpsVcDetune        $00, $03, $06, $00
(1)  190/   C8486 : =$0                 vcDT1 set $00
(1)  190/   C8486 : =$3                 vcDT2 set $03
(1)  190/   C8486 : =$6                 vcDT3 set $06
(1)  190/   C8486 : =$0                 vcDT4 set $00
(1)  191/   C8486 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $00, $06
(1)  191/   C8486 : =$1                 vcCF1 set $01
(1)  191/   C8486 : =$0                 vcCF2 set $00
(1)  191/   C8486 : =$0                 vcCF3 set $00
(1)  191/   C8486 : =$6                 vcCF4 set $06
(1)  192/   C8486 : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  192/   C8486 : =$1                 vcRS1 set $01
(1)  192/   C8486 : =$1                 vcRS2 set $01
(1)  192/   C8486 : =$0                 vcRS3 set $00
(1)  192/   C8486 : =$0                 vcRS4 set $00
(1)  193/   C8486 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $3F, $3F
(1)  193/   C8486 : =$1F                vcAR1 set $1F
(1)  193/   C8486 : =$1F                vcAR2 set $1F
(1)  193/   C8486 : =$3F                vcAR3 set $3F
(1)  193/   C8486 : =$3F                vcAR4 set $3F
(1)  194/   C8486 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  194/   C8486 : =$0                 vcAM1 set $00<<5
(1)  194/   C8486 : =$0                 vcAM2 set $00<<5
(1)  194/   C8486 : =$0                 vcAM3 set $00<<5
(1)  194/   C8486 : =$0                 vcAM4 set $00<<5
(1)  195/   C8486 : (MACRO)             	smpsVcDecayRate1    $09, $13, $0F, $11
(1)  195/   C8486 : =$9                 vcD1R1 set $09
(1)  195/   C8486 : =$13                vcD1R2 set $13
(1)  195/   C8486 : =$F                 vcD1R3 set $0F
(1)  195/   C8486 : =$11                vcD1R4 set $11
(1)  196/   C8486 : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $05
(1)  196/   C8486 : =$3                 vcD2R1 set $03
(1)  196/   C8486 : =$4                 vcD2R2 set $04
(1)  196/   C8486 : =$4                 vcD2R3 set $04
(1)  196/   C8486 : =$5                 vcD2R4 set $05
(1)  197/   C8486 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1)  197/   C8486 : =$2                 vcDL1 set $02
(1)  197/   C8486 : =$2                 vcDL2 set $02
(1)  197/   C8486 : =$2                 vcDL3 set $02
(1)  197/   C8486 : =$2                 vcDL4 set $02
(1)  198/   C8486 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  198/   C8486 : =$F                 vcRR1 set $0F
(1)  198/   C8486 : =$F                 vcRR2 set $0F
(1)  198/   C8486 : =$F                 vcRR3 set $0F
(1)  198/   C8486 : =$F                 vcRR4 set $0F
(1)  199/   C8486 : (MACRO)             	smpsVcTotalLevel    $00, $97, $2C, $27
(1)  199/   C8486 : =$0                 vcTL1 set $00
(1)  199/   C8486 : =$97                vcTL2 set $97
(1)  199/   C8486 : =$2C                vcTL3 set $2C
(1)  199/   C8486 : =$27                vcTL4 set $27
(1)  199/   C8486 : 39                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  199/   C8487 :                     ;   0     1     2     3     4     5     6     7
(1)  199/   C8487 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  199/   C8487 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  199/   C8487 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  199/   C8487 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  199/   C8487 : =$80                vcTLMask1 set $80
(1)  199/   C8487 :                     
(1)  199/   C8487 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  199/   C8487 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  199/   C8487 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  199/   C8487 : =$80                vcTLMask1 set $80
(1)  199/   C8487 : =$0                 vcTL1 set vcTL1&$7F
(1)  199/   C8487 : =$17                vcTL2 set vcTL2&$7F
(1)  199/   C8487 : =$2C                vcTL3 set vcTL3&$7F
(1)  199/   C8487 : =$27                vcTL4 set vcTL4&$7F
(1)  199/   C8487 :                     
(1)  199/   C8487 : 0660 3001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  199/   C848B : 3F3F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  199/   C848F : 110F 1309                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  199/   C8493 : 0504 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  199/   C8497 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  199/   C849B : 272C 1780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  200/   C849F :                     
(1)  201/   C849F :                     
   67/   C849F :                        Music_1A:	include		"music-improved/9A - End of Act.asm"
(1)    1/   C849F :                     End_of_level_Header:
(1)    2/   C849F : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C849F :                     
(1)    2/   C849F : =$2                 SourceDriver set 2
(1)    2/   C849F :                     
(1)    2/   C849F : =$0                 SourceSMPS2ASM set 0
(1)    2/   C849F :                     
(1)    2/   C849F : =$C849F             songStart set *
(1)    2/   C849F :                     
(1)    2/   C849F :                     
(1)    3/   C849F : (MACRO)             	smpsHeaderVoice     End_of_level_Voices
(1)    3/   C849F : 7385                                dc.w    z80_ptr(END_OF_LEVEL_VOICES)
(1)    4/   C84A1 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C84A1 : 0603                        dc.b    $06,$03
(1)    5/   C84A3 : (MACRO)             	smpsHeaderTempo     $02, $AA
(1)    5/   C84A3 : 02                          dc.b    $02
(1)    5/   C84A4 :  (MACRO-2)                  convertMainTempoMod $AA
(1)    5/   C84A4 : 56                                          dc.b    s2TempotoS3($AA)
(1)    6/   C84A5 :                     
(1)    7/   C84A5 : (MACRO)             	smpsHeaderDAC       End_of_level_DAC
(1)    7/   C84A5 :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_DAC
(1)    7/   C84A5 : 5985                                dc.w    z80_ptr(END_OF_LEVEL_DAC)
(1)    7/   C84A7 : 0000                                dc.w    $00
(1)    8/   C84A9 : (MACRO)             	smpsHeaderFM        End_of_level_FM1,	$F4, $0A
(1)    8/   C84A9 :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_FM1
(1)    8/   C84A9 : CF84                                dc.w    z80_ptr(END_OF_LEVEL_FM1)
(1)    8/   C84AB : F40A                        dc.b    $F4,$0A
(1)    9/   C84AD : (MACRO)             	smpsHeaderFM        End_of_level_FM2,	$DC, $0A
(1)    9/   C84AD :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_FM2
(1)    9/   C84AD : EC84                                dc.w    z80_ptr(END_OF_LEVEL_FM2)
(1)    9/   C84AF : DC0A                        dc.b    $DC,$0A
(1)   10/   C84B1 : (MACRO)             	smpsHeaderFM        End_of_level_FM3,	$F4, $15
(1)   10/   C84B1 :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_FM3
(1)   10/   C84B1 : 0A85                                dc.w    z80_ptr(END_OF_LEVEL_FM3)
(1)   10/   C84B3 : F415                        dc.b    $F4,$15
(1)   11/   C84B5 : (MACRO)             	smpsHeaderFM        End_of_level_FM4,	$F4, $15
(1)   11/   C84B5 :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_FM4
(1)   11/   C84B5 : 2685                                dc.w    z80_ptr(END_OF_LEVEL_FM4)
(1)   11/   C84B7 : F415                        dc.b    $F4,$15
(1)   12/   C84B9 : (MACRO)             	smpsHeaderFM        End_of_level_FM5,	$F4, $14
(1)   12/   C84B9 :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_FM5
(1)   12/   C84B9 : 4285                                dc.w    z80_ptr(END_OF_LEVEL_FM5)
(1)   12/   C84BB : F414                        dc.b    $F4,$14
(1)   13/   C84BD : (MACRO)             	smpsHeaderPSG       End_of_level_PSG1,	$D0, $05, $00, fTone_05
(1)   13/   C84BD :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_PSG1
(1)   13/   C84BD : D184                                dc.w    z80_ptr(END_OF_LEVEL_PSG1)
(1)   13/   C84BF :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   C84BF : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   C84C0 : 0500 05                     dc.b    $05,$00,FTONE_05
(1)   14/   C84C3 : (MACRO)             	smpsHeaderPSG       End_of_level_PSG2,	$DC, $07, $00, fTone_05
(1)   14/   C84C3 :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_PSG2
(1)   14/   C84C3 : 4985                                dc.w    z80_ptr(END_OF_LEVEL_PSG2)
(1)   14/   C84C5 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C84C5 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C84C6 : 0700 05                     dc.b    $07,$00,FTONE_05
(1)   15/   C84C9 : (MACRO)             	smpsHeaderPSG       End_of_level_PSG3,	$DC, $00, $00, fTone_04
(1)   15/   C84C9 :  (MACRO-2)                  CheckedChannelPointer END_OF_LEVEL_PSG3
(1)   15/   C84C9 : 5885                                dc.w    z80_ptr(END_OF_LEVEL_PSG3)
(1)   15/   C84CB :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/   C84CB : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   15/   C84CC : 0000 04                     dc.b    $00,$00,FTONE_04
(1)   16/   C84CF :                     
(1)   17/   C84CF :                     ; FM1 Data
(1)   18/   C84CF :                     End_of_level_FM1:
(1)   19/   C84CF : (MACRO)             	smpsSetvoice        $00
(1)   19/   C84CF :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   C84CF : EF00                                dc.b    $EF,$00
(1)   20/   C84D1 :                     
(1)   21/   C84D1 :                     ; PSG1 Data
(1)   22/   C84D1 :                     End_of_level_PSG1:
(1)   23/   C84D1 : 8006 B8BA BCBD BFC1 	dc.b	nRst, $06, nG4, nA4, nB4, nC5, nD5, nE5, nF5, nG5, $0C, nB6
            C84D9 : C2C4 0CD4         
(1)   24/   C84DD : 02E7 D501 D403 D0   	dc.b	$02, smpsNoAttack, nC7, $01, nB6, $03, nG6
(1)   25/   C84E4 : (MACRO)             	smpsModSet          $0C, $01, $08, $04
(1)   25/   C84E4 : F0                          dc.b    $F0
(1)   25/   C84E5 : 0D01 0805                           dc.b    $0C+1,$01,$08,(($04+1) * $01) & $FF
(1)   25/   C84E9 :                             ;dc.b   $01,$08,$04
(1)   26/   C84E9 : D233                	dc.b	nA6, $33
(1)   27/   C84EB : (MACRO)             	smpsStop
(1)   27/   C84EB : F2                          dc.b    $F2
(1)   28/   C84EC :                     
(1)   29/   C84EC :                     ; FM2 Data
(1)   30/   C84EC :                     End_of_level_FM2:
(1)   31/   C84EC : (MACRO)             	smpsSetvoice        $01
(1)   31/   C84EC :  (MACRO-2)                  smpsFMvoice $01
(1)   31/   C84EC : EF01                                dc.b    $EF,$01
(1)   32/   C84EE : (MACRO)             	smpsNoteFill        $0B
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   32/   C84EE :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   32/   C84EE : E80B                                dc.b    $E8,$0B
(1)   33/   C84F0 : (MACRO)             	smpsNop             $01
(1)   34/   C84F0 : C403 C4B8 06B8 C403 	dc.b	nG5, $03, nG5, nG4, $06, nG4, nG5, $03, nG5, nG4, $06, nG4
            C84F8 : C4B8 06B8         
(1)   35/   C84FC : C403 C480 0680 0CB8 	dc.b	nG5, $03, nG5, nRst, $06, nRst, $0C, nG4, $09
            C8504 : 09               
(1)   36/   C8505 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   36/   C8505 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   36/   C8505 : E800                                dc.b    $E8,$00
(1)   37/   C8507 : BA33                	dc.b	nA4, $33
(1)   38/   C8509 : (MACRO)             	smpsNop             $01
(1)   39/   C8509 : (MACRO)             	smpsStop
(1)   39/   C8509 : F2                          dc.b    $F2
(1)   40/   C850A :                     
(1)   41/   C850A :                     ; FM3 Data
(1)   42/   C850A :                     End_of_level_FM3:
(1)   43/   C850A : (MACRO)             	smpsPan             panLeft, $00
(1)   43/   C850A : =$0                 panNone set $00
(1)   43/   C850A : =$40                panRight set $40
(1)   43/   C850A : =$80                panLeft set $80
(1)   43/   C850A : =$C0                panCentre set $C0
(1)   43/   C850A : =$C0                panCenter set $C0 ; silly Americans :U
(1)   43/   C850A : E080                        dc.b $E0,PANLEFT+$00
(1)   44/   C850C : (MACRO)             	smpsSetvoice        $02
(1)   44/   C850C :  (MACRO-2)                  smpsFMvoice $02
(1)   44/   C850C : EF02                                dc.b    $EF,$02
(1)   45/   C850E : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   45/   C850E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   45/   C850E : E806                                dc.b    $E8,$06
(1)   46/   C8510 : C903 C980 0CC9 03C9 	dc.b	nC6, $03, nC6, nRst, $0C, nC6, $03, nC6, nRst, $0C, nC6, $03
            C8518 : 800C C903         
(1)   47/   C851C : C980 12             	dc.b	nC6, nRst, $12
(1)   48/   C851F : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   48/   C851F :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   48/   C851F : E800                                dc.b    $E8,$00
(1)   49/   C8521 : C909 CB33           	dc.b	nC6, $09, nD6, $33
(1)   50/   C8525 : (MACRO)             	smpsStop
(1)   50/   C8525 : F2                          dc.b    $F2
(1)   51/   C8526 :                     
(1)   52/   C8526 :                     ; FM4 Data
(1)   53/   C8526 :                     End_of_level_FM4:
(1)   54/   C8526 : (MACRO)             	smpsPan             panRight, $00
(1)   54/   C8526 : =$0                 panNone set $00
(1)   54/   C8526 : =$40                panRight set $40
(1)   54/   C8526 : =$80                panLeft set $80
(1)   54/   C8526 : =$C0                panCentre set $C0
(1)   54/   C8526 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   54/   C8526 : E040                        dc.b $E0,PANRIGHT+$00
(1)   55/   C8528 : (MACRO)             	smpsSetvoice        $02
(1)   55/   C8528 :  (MACRO-2)                  smpsFMvoice $02
(1)   55/   C8528 : EF02                                dc.b    $EF,$02
(1)   56/   C852A : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   56/   C852A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   56/   C852A : E806                                dc.b    $E8,$06
(1)   57/   C852C : C603 C680 0CC6 03C6 	dc.b	nA5, $03, nA5, nRst, $0C, nA5, $03, nA5, nRst, $0C, nA5, $03
            C8534 : 800C C603         
(1)   58/   C8538 : C680 12             	dc.b	nA5, nRst, $12
(1)   59/   C853B : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   59/   C853B :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   59/   C853B : E800                                dc.b    $E8,$00
(1)   60/   C853D : C609 C833           	dc.b	nA5, $09, nB5, $33
(1)   61/   C8541 : (MACRO)             	smpsStop
(1)   61/   C8541 : F2                          dc.b    $F2
(1)   62/   C8542 :                     
(1)   63/   C8542 :                     ; FM5 Data
(1)   64/   C8542 :                     End_of_level_FM5:
(1)   65/   C8542 : (MACRO)             	smpsSetvoice        $03
(1)   65/   C8542 :  (MACRO-2)                  smpsFMvoice $03
(1)   65/   C8542 : EF03                                dc.b    $EF,$03
(1)   66/   C8544 : (MACRO)             	smpsModSet          $0D, $01, $02, $05
(1)   66/   C8544 : F0                          dc.b    $F0
(1)   66/   C8545 : 0E01 0206                           dc.b    $0D+1,$01,$02,(($05+1) * $01) & $FF
(1)   66/   C8549 :                             ;dc.b   $01,$02,$05
(1)   67/   C8549 :                     
(1)   68/   C8549 :                     ; PSG2 Data
(1)   69/   C8549 :                     End_of_level_PSG2:
(1)   70/   C8549 : C406 C9C8 C4C9 C8C4 	dc.b	nG5, $06, nC6, nB5, nG5, nC6, nB5, nG5, nC6, nB5, $0C, nC6
            C8551 : C9C8 0CC9         
(1)   71/   C8555 : 09C8 33             	dc.b	$09, nB5, $33
(1)   72/   C8558 :                     
(1)   73/   C8558 :                     ; PSG3 Data
(1)   74/   C8558 :                     End_of_level_PSG3:
(1)   75/   C8558 : (MACRO)             	smpsStop
(1)   75/   C8558 : F2                          dc.b    $F2
(1)   76/   C8559 :                     
(1)   77/   C8559 :                     ; DAC Data
(1)   78/   C8559 :                     End_of_level_DAC:
(1)   79/   C8559 : 8203 8281 0681 8203 	dc.b	dSnare, $03, dSnare, dKick, $06, dKick, dSnare, $03, dSnare, dKick, $06, dKick
            C8561 : 8281 0681         
(1)   80/   C8565 : 8203 8288 888B 8B03 	dc.b	dSnare, $03, dSnare, dHiTimpani, dHiTimpani, dVLowTimpani, dVLowTimpani, $03, dVLowTimpani, dVLowTimpani, dSnare, $09
            C856D : 8B8B 8209         
(1)   81/   C8571 : 33                  	dc.b	$33
(1)   82/   C8572 : (MACRO)             	smpsStop
(1)   82/   C8572 : F2                          dc.b    $F2
(1)   83/   C8573 :                     
(1)   84/   C8573 :                     End_of_level_Voices:
(1)   85/   C8573 :                     ;	Voice $00
(1)   86/   C8573 :                     ;	$3D
(1)   87/   C8573 :                     ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
(1)   88/   C8573 :                     ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
(1)   89/   C8573 : (MACRO)             	smpsVcAlgorithm     $05
(1)   89/   C8573 : =$5                 vcAlgorithm set $05
(1)   90/   C8573 : (MACRO)             	smpsVcFeedback      $07
(1)   90/   C8573 : =$7                 vcFeedback set $07
(1)   91/   C8573 : (MACRO)             	smpsVcUnusedBits    $00
(1)   91/   C8573 : =$0                 vcUnusedBits set $00
(1)   91/   C8573 : =$0                 vcD1R1Unk set 0
(1)   91/   C8573 : =$0                 vcD1R2Unk set 0
(1)   91/   C8573 : =$0                 vcD1R3Unk set 0
(1)   91/   C8573 : =$0                 vcD1R4Unk set 0
(1)   92/   C8573 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   92/   C8573 : =$0                 vcDT1 set $00
(1)   92/   C8573 : =$0                 vcDT2 set $00
(1)   92/   C8573 : =$0                 vcDT3 set $00
(1)   92/   C8573 : =$0                 vcDT4 set $00
(1)   93/   C8573 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $02, $01
(1)   93/   C8573 : =$1                 vcCF1 set $01
(1)   93/   C8573 : =$0                 vcCF2 set $00
(1)   93/   C8573 : =$2                 vcCF3 set $02
(1)   93/   C8573 : =$1                 vcCF4 set $01
(1)   94/   C8573 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   94/   C8573 : =$0                 vcRS1 set $00
(1)   94/   C8573 : =$0                 vcRS2 set $00
(1)   94/   C8573 : =$0                 vcRS3 set $00
(1)   94/   C8573 : =$0                 vcRS4 set $00
(1)   95/   C8573 : (MACRO)             	smpsVcAttackRate    $0E, $0E, $0E, $1F
(1)   95/   C8573 : =$E                 vcAR1 set $0E
(1)   95/   C8573 : =$E                 vcAR2 set $0E
(1)   95/   C8573 : =$E                 vcAR3 set $0E
(1)   95/   C8573 : =$1F                vcAR4 set $1F
(1)   96/   C8573 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   96/   C8573 : =$0                 vcAM1 set $00<<5
(1)   96/   C8573 : =$0                 vcAM2 set $00<<5
(1)   96/   C8573 : =$0                 vcAM3 set $00<<5
(1)   96/   C8573 : =$0                 vcAM4 set $00<<5
(1)   97/   C8573 : (MACRO)             	smpsVcDecayRate1    $1F, $1F, $1F, $07
(1)   97/   C8573 : =$1F                vcD1R1 set $1F
(1)   97/   C8573 : =$1F                vcD1R2 set $1F
(1)   97/   C8573 : =$1F                vcD1R3 set $1F
(1)   97/   C8573 : =$7                 vcD1R4 set $07
(1)   98/   C8573 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   98/   C8573 : =$0                 vcD2R1 set $00
(1)   98/   C8573 : =$0                 vcD2R2 set $00
(1)   98/   C8573 : =$0                 vcD2R3 set $00
(1)   98/   C8573 : =$0                 vcD2R4 set $00
(1)   99/   C8573 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $01
(1)   99/   C8573 : =$0                 vcDL1 set $00
(1)   99/   C8573 : =$0                 vcDL2 set $00
(1)   99/   C8573 : =$0                 vcDL3 set $00
(1)   99/   C8573 : =$1                 vcDL4 set $01
(1)  100/   C8573 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  100/   C8573 : =$F                 vcRR1 set $0F
(1)  100/   C8573 : =$F                 vcRR2 set $0F
(1)  100/   C8573 : =$F                 vcRR3 set $0F
(1)  100/   C8573 : =$F                 vcRR4 set $0F
(1)  101/   C8573 : (MACRO)             	smpsVcTotalLevel    $0C, $0C, $0D, $17
(1)  101/   C8573 : =$C                 vcTL1 set $0C
(1)  101/   C8573 : =$C                 vcTL2 set $0C
(1)  101/   C8573 : =$D                 vcTL3 set $0D
(1)  101/   C8573 : =$17                vcTL4 set $17
(1)  101/   C8573 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  101/   C8574 :                     ;   0     1     2     3     4     5     6     7
(1)  101/   C8574 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  101/   C8574 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  101/   C8574 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  101/   C8574 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  101/   C8574 : =$80                vcTLMask1 set $80
(1)  101/   C8574 :                     
(1)  101/   C8574 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  101/   C8574 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  101/   C8574 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  101/   C8574 : =$80                vcTLMask1 set $80
(1)  101/   C8574 : =$C                 vcTL1 set vcTL1&$7F
(1)  101/   C8574 : =$C                 vcTL2 set vcTL2&$7F
(1)  101/   C8574 : =$D                 vcTL3 set vcTL3&$7F
(1)  101/   C8574 : =$17                vcTL4 set vcTL4&$7F
(1)  101/   C8574 :                     
(1)  101/   C8574 : 0102 0001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  101/   C8578 : 1F0E 0E0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  101/   C857C : 071F 1F1F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  101/   C8580 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  101/   C8584 : 1F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  101/   C8588 : 178D 8C8C                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  102/   C858C :                     
(1)  103/   C858C :                     ;	Voice $01
(1)  104/   C858C :                     ;	$3A
(1)  105/   C858C :                     ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
(1)  106/   C858C :                     ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $0F, 	$21, $47, $31, $80
(1)  107/   C858C : (MACRO)             	smpsVcAlgorithm     $02
(1)  107/   C858C : =$2                 vcAlgorithm set $02
(1)  108/   C858C : (MACRO)             	smpsVcFeedback      $07
(1)  108/   C858C : =$7                 vcFeedback set $07
(1)  109/   C858C : (MACRO)             	smpsVcUnusedBits    $00
(1)  109/   C858C : =$0                 vcUnusedBits set $00
(1)  109/   C858C : =$0                 vcD1R1Unk set 0
(1)  109/   C858C : =$0                 vcD1R2Unk set 0
(1)  109/   C858C : =$0                 vcD1R3Unk set 0
(1)  109/   C858C : =$0                 vcD1R4Unk set 0
(1)  110/   C858C : (MACRO)             	smpsVcDetune        $03, $01, $03, $06
(1)  110/   C858C : =$3                 vcDT1 set $03
(1)  110/   C858C : =$1                 vcDT2 set $01
(1)  110/   C858C : =$3                 vcDT3 set $03
(1)  110/   C858C : =$6                 vcDT4 set $06
(1)  111/   C858C : (MACRO)             	smpsVcCoarseFreq    $01, $04, $0C, $01
(1)  111/   C858C : =$1                 vcCF1 set $01
(1)  111/   C858C : =$4                 vcCF2 set $04
(1)  111/   C858C : =$C                 vcCF3 set $0C
(1)  111/   C858C : =$1                 vcCF4 set $01
(1)  112/   C858C : (MACRO)             	smpsVcRateScale     $03, $02, $03, $02
(1)  112/   C858C : =$3                 vcRS1 set $03
(1)  112/   C858C : =$2                 vcRS2 set $02
(1)  112/   C858C : =$3                 vcRS3 set $03
(1)  112/   C858C : =$2                 vcRS4 set $02
(1)  113/   C858C : (MACRO)             	smpsVcAttackRate    $1A, $1C, $1B, $1C
(1)  113/   C858C : =$1A                vcAR1 set $1A
(1)  113/   C858C : =$1C                vcAR2 set $1C
(1)  113/   C858C : =$1B                vcAR3 set $1B
(1)  113/   C858C : =$1C                vcAR4 set $1C
(1)  114/   C858C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  114/   C858C : =$0                 vcAM1 set $00<<5
(1)  114/   C858C : =$0                 vcAM2 set $00<<5
(1)  114/   C858C : =$0                 vcAM3 set $00<<5
(1)  114/   C858C : =$0                 vcAM4 set $00<<5
(1)  115/   C858C : (MACRO)             	smpsVcDecayRate1    $03, $04, $09, $04
(1)  115/   C858C : =$3                 vcD1R1 set $03
(1)  115/   C858C : =$4                 vcD1R2 set $04
(1)  115/   C858C : =$9                 vcD1R3 set $09
(1)  115/   C858C : =$4                 vcD1R4 set $04
(1)  116/   C858C : (MACRO)             	smpsVcDecayRate2    $00, $03, $01, $03
(1)  116/   C858C : =$0                 vcD2R1 set $00
(1)  116/   C858C : =$3                 vcD2R2 set $03
(1)  116/   C858C : =$1                 vcD2R3 set $01
(1)  116/   C858C : =$3                 vcD2R4 set $03
(1)  117/   C858C : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $01
(1)  117/   C858C : =$0                 vcDL1 set $00
(1)  117/   C858C : =$0                 vcDL2 set $00
(1)  117/   C858C : =$0                 vcDL3 set $00
(1)  117/   C858C : =$1                 vcDL4 set $01
(1)  118/   C858C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  118/   C858C : =$F                 vcRR1 set $0F
(1)  118/   C858C : =$F                 vcRR2 set $0F
(1)  118/   C858C : =$F                 vcRR3 set $0F
(1)  118/   C858C : =$F                 vcRR4 set $0F
(1)  119/   C858C : (MACRO)             	smpsVcTotalLevel    $00, $31, $47, $21
(1)  119/   C858C : =$0                 vcTL1 set $00
(1)  119/   C858C : =$31                vcTL2 set $31
(1)  119/   C858C : =$47                vcTL3 set $47
(1)  119/   C858C : =$21                vcTL4 set $21
(1)  119/   C858C : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  119/   C858D :                     ;   0     1     2     3     4     5     6     7
(1)  119/   C858D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  119/   C858D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  119/   C858D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  119/   C858D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  119/   C858D : =$80                vcTLMask1 set $80
(1)  119/   C858D :                     
(1)  119/   C858D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  119/   C858D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  119/   C858D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  119/   C858D : =$80                vcTLMask1 set $80
(1)  119/   C858D : =$0                 vcTL1 set vcTL1&$7F
(1)  119/   C858D : =$31                vcTL2 set vcTL2&$7F
(1)  119/   C858D : =$47                vcTL3 set vcTL3&$7F
(1)  119/   C858D : =$21                vcTL4 set vcTL4&$7F
(1)  119/   C858D :                     
(1)  119/   C858D : 613C 1431                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  119/   C8591 : 9CDB 9CDA                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  119/   C8595 : 0409 0403                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  119/   C8599 : 0301 0300                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  119/   C859D : 1F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  119/   C85A1 : 2147 3180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  120/   C85A5 :                     
(1)  121/   C85A5 :                     ;	Voice $02
(1)  122/   C85A5 :                     ;	$3D
(1)  123/   C85A5 :                     ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
(1)  124/   C85A5 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
(1)  125/   C85A5 : (MACRO)             	smpsVcAlgorithm     $05
(1)  125/   C85A5 : =$5                 vcAlgorithm set $05
(1)  126/   C85A5 : (MACRO)             	smpsVcFeedback      $07
(1)  126/   C85A5 : =$7                 vcFeedback set $07
(1)  127/   C85A5 : (MACRO)             	smpsVcUnusedBits    $00
(1)  127/   C85A5 : =$0                 vcUnusedBits set $00
(1)  127/   C85A5 : =$0                 vcD1R1Unk set 0
(1)  127/   C85A5 : =$0                 vcD1R2Unk set 0
(1)  127/   C85A5 : =$0                 vcD1R3Unk set 0
(1)  127/   C85A5 : =$0                 vcD1R4Unk set 0
(1)  128/   C85A5 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  128/   C85A5 : =$0                 vcDT1 set $00
(1)  128/   C85A5 : =$0                 vcDT2 set $00
(1)  128/   C85A5 : =$0                 vcDT3 set $00
(1)  128/   C85A5 : =$0                 vcDT4 set $00
(1)  129/   C85A5 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  129/   C85A5 : =$1                 vcCF1 set $01
(1)  129/   C85A5 : =$1                 vcCF2 set $01
(1)  129/   C85A5 : =$1                 vcCF3 set $01
(1)  129/   C85A5 : =$1                 vcCF4 set $01
(1)  130/   C85A5 : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(1)  130/   C85A5 : =$1                 vcRS1 set $01
(1)  130/   C85A5 : =$0                 vcRS2 set $00
(1)  130/   C85A5 : =$1                 vcRS3 set $01
(1)  130/   C85A5 : =$2                 vcRS4 set $02
(1)  131/   C85A5 : (MACRO)             	smpsVcAttackRate    $0C, $14, $12, $0E
(1)  131/   C85A5 : =$C                 vcAR1 set $0C
(1)  131/   C85A5 : =$14                vcAR2 set $14
(1)  131/   C85A5 : =$12                vcAR3 set $12
(1)  131/   C85A5 : =$E                 vcAR4 set $0E
(1)  132/   C85A5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  132/   C85A5 : =$0                 vcAM1 set $00<<5
(1)  132/   C85A5 : =$0                 vcAM2 set $00<<5
(1)  132/   C85A5 : =$0                 vcAM3 set $00<<5
(1)  132/   C85A5 : =$0                 vcAM4 set $00<<5
(1)  133/   C85A5 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $08, $08
(1)  133/   C85A5 : =$3                 vcD1R1 set $03
(1)  133/   C85A5 : =$E                 vcD1R2 set $0E
(1)  133/   C85A5 : =$8                 vcD1R3 set $08
(1)  133/   C85A5 : =$8                 vcD1R4 set $08
(1)  134/   C85A5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  134/   C85A5 : =$0                 vcD2R1 set $00
(1)  134/   C85A5 : =$0                 vcD2R2 set $00
(1)  134/   C85A5 : =$0                 vcD2R3 set $00
(1)  134/   C85A5 : =$0                 vcD2R4 set $00
(1)  135/   C85A5 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(1)  135/   C85A5 : =$1                 vcDL1 set $01
(1)  135/   C85A5 : =$1                 vcDL2 set $01
(1)  135/   C85A5 : =$1                 vcDL3 set $01
(1)  135/   C85A5 : =$1                 vcDL4 set $01
(1)  136/   C85A5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  136/   C85A5 : =$F                 vcRR1 set $0F
(1)  136/   C85A5 : =$F                 vcRR2 set $0F
(1)  136/   C85A5 : =$F                 vcRR3 set $0F
(1)  136/   C85A5 : =$F                 vcRR4 set $0F
(1)  137/   C85A5 : (MACRO)             	smpsVcTotalLevel    $1B, $00, $00, $1B
(1)  137/   C85A5 : =$1B                vcTL1 set $1B
(1)  137/   C85A5 : =$0                 vcTL2 set $00
(1)  137/   C85A5 : =$0                 vcTL3 set $00
(1)  137/   C85A5 : =$1B                vcTL4 set $1B
(1)  137/   C85A5 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  137/   C85A6 :                     ;   0     1     2     3     4     5     6     7
(1)  137/   C85A6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  137/   C85A6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  137/   C85A6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  137/   C85A6 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  137/   C85A6 : =$80                vcTLMask1 set $80
(1)  137/   C85A6 :                     
(1)  137/   C85A6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  137/   C85A6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  137/   C85A6 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  137/   C85A6 : =$80                vcTLMask1 set $80
(1)  137/   C85A6 : =$1B                vcTL1 set vcTL1&$7F
(1)  137/   C85A6 : =$0                 vcTL2 set vcTL2&$7F
(1)  137/   C85A6 : =$0                 vcTL3 set vcTL3&$7F
(1)  137/   C85A6 : =$1B                vcTL4 set vcTL4&$7F
(1)  137/   C85A6 :                     
(1)  137/   C85A6 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  137/   C85AA : 8E52 144C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  137/   C85AE : 0808 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  137/   C85B2 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  137/   C85B6 : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  137/   C85BA : 1B80 809B                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  138/   C85BE :                     
(1)  139/   C85BE :                     ;	Voice $03
(1)  140/   C85BE :                     ;	$3D
(1)  141/   C85BE :                     ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
(1)  142/   C85BE :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
(1)  143/   C85BE : (MACRO)             	smpsVcAlgorithm     $05
(1)  143/   C85BE : =$5                 vcAlgorithm set $05
(1)  144/   C85BE : (MACRO)             	smpsVcFeedback      $07
(1)  144/   C85BE : =$7                 vcFeedback set $07
(1)  145/   C85BE : (MACRO)             	smpsVcUnusedBits    $00
(1)  145/   C85BE : =$0                 vcUnusedBits set $00
(1)  145/   C85BE : =$0                 vcD1R1Unk set 0
(1)  145/   C85BE : =$0                 vcD1R2Unk set 0
(1)  145/   C85BE : =$0                 vcD1R3Unk set 0
(1)  145/   C85BE : =$0                 vcD1R4Unk set 0
(1)  146/   C85BE : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  146/   C85BE : =$0                 vcDT1 set $00
(1)  146/   C85BE : =$0                 vcDT2 set $00
(1)  146/   C85BE : =$0                 vcDT3 set $00
(1)  146/   C85BE : =$0                 vcDT4 set $00
(1)  147/   C85BE : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  147/   C85BE : =$1                 vcCF1 set $01
(1)  147/   C85BE : =$1                 vcCF2 set $01
(1)  147/   C85BE : =$1                 vcCF3 set $01
(1)  147/   C85BE : =$1                 vcCF4 set $01
(1)  148/   C85BE : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(1)  148/   C85BE : =$1                 vcRS1 set $01
(1)  148/   C85BE : =$0                 vcRS2 set $00
(1)  148/   C85BE : =$1                 vcRS3 set $01
(1)  148/   C85BE : =$2                 vcRS4 set $02
(1)  149/   C85BE : (MACRO)             	smpsVcAttackRate    $0C, $14, $12, $0E
(1)  149/   C85BE : =$C                 vcAR1 set $0C
(1)  149/   C85BE : =$14                vcAR2 set $14
(1)  149/   C85BE : =$12                vcAR3 set $12
(1)  149/   C85BE : =$E                 vcAR4 set $0E
(1)  150/   C85BE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  150/   C85BE : =$0                 vcAM1 set $00<<5
(1)  150/   C85BE : =$0                 vcAM2 set $00<<5
(1)  150/   C85BE : =$0                 vcAM3 set $00<<5
(1)  150/   C85BE : =$0                 vcAM4 set $00<<5
(1)  151/   C85BE : (MACRO)             	smpsVcDecayRate1    $03, $0E, $08, $08
(1)  151/   C85BE : =$3                 vcD1R1 set $03
(1)  151/   C85BE : =$E                 vcD1R2 set $0E
(1)  151/   C85BE : =$8                 vcD1R3 set $08
(1)  151/   C85BE : =$8                 vcD1R4 set $08
(1)  152/   C85BE : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  152/   C85BE : =$0                 vcD2R1 set $00
(1)  152/   C85BE : =$0                 vcD2R2 set $00
(1)  152/   C85BE : =$0                 vcD2R3 set $00
(1)  152/   C85BE : =$0                 vcD2R4 set $00
(1)  153/   C85BE : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(1)  153/   C85BE : =$1                 vcDL1 set $01
(1)  153/   C85BE : =$1                 vcDL2 set $01
(1)  153/   C85BE : =$1                 vcDL3 set $01
(1)  153/   C85BE : =$1                 vcDL4 set $01
(1)  154/   C85BE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  154/   C85BE : =$F                 vcRR1 set $0F
(1)  154/   C85BE : =$F                 vcRR2 set $0F
(1)  154/   C85BE : =$F                 vcRR3 set $0F
(1)  154/   C85BE : =$F                 vcRR4 set $0F
(1)  155/   C85BE : (MACRO)             	smpsVcTotalLevel    $1B, $00, $00, $1B
(1)  155/   C85BE : =$1B                vcTL1 set $1B
(1)  155/   C85BE : =$0                 vcTL2 set $00
(1)  155/   C85BE : =$0                 vcTL3 set $00
(1)  155/   C85BE : =$1B                vcTL4 set $1B
(1)  155/   C85BE : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  155/   C85BF :                     ;   0     1     2     3     4     5     6     7
(1)  155/   C85BF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  155/   C85BF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  155/   C85BF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  155/   C85BF : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  155/   C85BF : =$80                vcTLMask1 set $80
(1)  155/   C85BF :                     
(1)  155/   C85BF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  155/   C85BF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  155/   C85BF : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  155/   C85BF : =$80                vcTLMask1 set $80
(1)  155/   C85BF : =$1B                vcTL1 set vcTL1&$7F
(1)  155/   C85BF : =$0                 vcTL2 set vcTL2&$7F
(1)  155/   C85BF : =$0                 vcTL3 set vcTL3&$7F
(1)  155/   C85BF : =$1B                vcTL4 set vcTL4&$7F
(1)  155/   C85BF :                     
(1)  155/   C85BF : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  155/   C85C3 : 8E52 144C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  155/   C85C7 : 0808 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  155/   C85CB : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  155/   C85CF : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  155/   C85D3 : 1B80 809B                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  156/   C85D7 :                     
(1)  157/   C85D7 :                     
   68/   C85D7 :                        Music_1B:	include		"music-improved/9B - Game Over.asm"
(1)    1/   C85D7 :                     GOver_Header:
(1)    2/   C85D7 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C85D7 :                     
(1)    2/   C85D7 : =$2                 SourceDriver set 2
(1)    2/   C85D7 :                     
(1)    2/   C85D7 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C85D7 :                     
(1)    2/   C85D7 : =$C85D7             songStart set *
(1)    2/   C85D7 :                     
(1)    2/   C85D7 :                     
(1)    3/   C85D7 : (MACRO)             	smpsHeaderVoice     GOver_Voices
(1)    3/   C85D7 : BE86                                dc.w    z80_ptr(GOVER_VOICES)
(1)    4/   C85D9 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C85D9 : 0603                        dc.b    $06,$03
(1)    5/   C85DB : (MACRO)             	smpsHeaderTempo     $02, $F2
(1)    5/   C85DB : 02                          dc.b    $02
(1)    5/   C85DC :  (MACRO-2)                  convertMainTempoMod $F2
(1)    5/   C85DC : 0E                                          dc.b    s2TempotoS3($F2)
(1)    6/   C85DD :                     
(1)    7/   C85DD : (MACRO)             	smpsHeaderDAC       GOver_DAC
(1)    7/   C85DD :  (MACRO-2)                  CheckedChannelPointer GOVER_DAC
(1)    7/   C85DD : B586                                dc.w    z80_ptr(GOVER_DAC)
(1)    7/   C85DF : 0000                                dc.w    $00
(1)    8/   C85E1 : (MACRO)             	smpsHeaderFM        GOver_FM1,	$E8, $0A
(1)    8/   C85E1 :  (MACRO-2)                  CheckedChannelPointer GOVER_FM1
(1)    8/   C85E1 : 0786                                dc.w    z80_ptr(GOVER_FM1)
(1)    8/   C85E3 : E80A                        dc.b    $E8,$0A
(1)    9/   C85E5 : (MACRO)             	smpsHeaderFM        GOver_FM2,	$F4, $0F
(1)    9/   C85E5 :  (MACRO-2)                  CheckedChannelPointer GOVER_FM2
(1)    9/   C85E5 : 3C86                                dc.w    z80_ptr(GOVER_FM2)
(1)    9/   C85E7 : F40F                        dc.b    $F4,$0F
(1)   10/   C85E9 : (MACRO)             	smpsHeaderFM        GOver_FM3,	$F4, $0F
(1)   10/   C85E9 :  (MACRO-2)                  CheckedChannelPointer GOVER_FM3
(1)   10/   C85E9 : 5B86                                dc.w    z80_ptr(GOVER_FM3)
(1)   10/   C85EB : F40F                        dc.b    $F4,$0F
(1)   11/   C85ED : (MACRO)             	smpsHeaderFM        GOver_FM4,	$F4, $0D
(1)   11/   C85ED :  (MACRO-2)                  CheckedChannelPointer GOVER_FM4
(1)   11/   C85ED : 7086                                dc.w    z80_ptr(GOVER_FM4)
(1)   11/   C85EF : F40D                        dc.b    $F4,$0D
(1)   12/   C85F1 : (MACRO)             	smpsHeaderFM        GOver_FM5,	$DC, $16
(1)   12/   C85F1 :  (MACRO-2)                  CheckedChannelPointer GOVER_FM5
(1)   12/   C85F1 : A286                                dc.w    z80_ptr(GOVER_FM5)
(1)   12/   C85F3 : DC16                        dc.b    $DC,$16
(1)   13/   C85F5 : (MACRO)             	smpsHeaderPSG       GOver_PSG1,	$D0, $03, $00, fTone_05
(1)   13/   C85F5 :  (MACRO-2)                  CheckedChannelPointer GOVER_PSG1
(1)   13/   C85F5 : B486                                dc.w    z80_ptr(GOVER_PSG1)
(1)   13/   C85F7 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   C85F7 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   C85F8 : 0300 05                     dc.b    $03,$00,FTONE_05
(1)   14/   C85FB : (MACRO)             	smpsHeaderPSG       GOver_PSG2,	$DC, $06, $00, fTone_05
(1)   14/   C85FB :  (MACRO-2)                  CheckedChannelPointer GOVER_PSG2
(1)   14/   C85FB : B486                                dc.w    z80_ptr(GOVER_PSG2)
(1)   14/   C85FD :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C85FD : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C85FE : 0600 05                     dc.b    $06,$00,FTONE_05
(1)   15/   C8601 : (MACRO)             	smpsHeaderPSG       GOver_PSG3,	$DC, $00, $00, fTone_04
(1)   15/   C8601 :  (MACRO-2)                  CheckedChannelPointer GOVER_PSG3
(1)   15/   C8601 : B486                                dc.w    z80_ptr(GOVER_PSG3)
(1)   15/   C8603 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/   C8603 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   15/   C8604 : 0000 04                     dc.b    $00,$00,FTONE_04
(1)   16/   C8607 :                     
(1)   17/   C8607 :                     ; FM1 Data
(1)   18/   C8607 :                     GOver_FM1:
(1)   19/   C8607 : (MACRO)             	smpsSetvoice        $00
(1)   19/   C8607 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   C8607 : EF00                                dc.b    $EF,$00
(1)   20/   C8609 : (MACRO)             	smpsModSet          $20, $01, $04, $05
(1)   20/   C8609 : F0                          dc.b    $F0
(1)   20/   C860A : 2101 0406                           dc.b    $20+1,$01,$04,(($05+1) * $01) & $FF
(1)   20/   C860E :                             ;dc.b   $01,$04,$05
(1)   21/   C860E : 800C CA12 8006 CA80 	dc.b	nRst, $0C, nCs6, $12, nRst, $06, nCs6, nRst, nD6, $12, nB5, $1E
            C8616 : CB12 C81E         
(1)   22/   C861A : CA06 80CA 80CA 80C6 	dc.b	nCs6, $06, nRst, nCs6, nRst, nCs6, nRst, nA5, nRst, nG5, $12, nB5
            C8622 : 80C4 12C8         
(1)   23/   C8626 : 0C80 12C9 0480 C9C8 	dc.b	$0C, nRst, $12, nC6, $04, nRst, nC6, nB5, $06, nRst, nBb5, nRst
            C862E : 0680 C780         
(1)   24/   C8632 : C680                	dc.b	nA5, nRst
(1)   25/   C8634 : (MACRO)             	smpsModSet          $28, $01, $18, $05
(1)   25/   C8634 : F0                          dc.b    $F0
(1)   25/   C8635 : 2901 1806                           dc.b    $28+1,$01,$18,(($05+1) * $01) & $FF
(1)   25/   C8639 :                             ;dc.b   $01,$18,$05
(1)   26/   C8639 : C560                	dc.b	nAb5, $60
(1)   27/   C863B : (MACRO)             	smpsStop
(1)   27/   C863B : F2                          dc.b    $F2
(1)   28/   C863C :                     
(1)   29/   C863C :                     ; FM2 Data
(1)   30/   C863C :                     GOver_FM2:
(1)   31/   C863C : (MACRO)             	smpsSetvoice        $01
(1)   31/   C863C :  (MACRO-2)                  smpsFMvoice $01
(1)   31/   C863C : EF01                                dc.b    $EF,$01
(1)   32/   C863E : 8001 D906 80D9 80D6 	dc.b	nRst, $01, nE7, $06, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst, nD7
            C8646 : 80D6 80D7         
(1)   33/   C864A : 15D7 1BD9 0680 D980 	dc.b	$15, nD7, $1B, nE7, $06, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst
            C8652 : D680 D680         
(1)   34/   C8656 : DC15 DC1B           	dc.b	nG7, $15, nG7, $1B
(1)   35/   C865A : (MACRO)             	smpsStop
(1)   35/   C865A : F2                          dc.b    $F2
(1)   36/   C865B :                     
(1)   37/   C865B :                     ; FM3 Data
(1)   38/   C865B :                     GOver_FM3:
(1)   39/   C865B : (MACRO)             	smpsSetvoice        $01
(1)   39/   C865B :  (MACRO-2)                  smpsFMvoice $01
(1)   39/   C865B : EF01                                dc.b    $EF,$01
(1)   40/   C865D : D60C D6D2 D2D4 15D4 	dc.b	nCs7, $0C, nCs7, nA6, nA6, nB6, $15, nB6, $1B, nCs7, $0C, nCs7
            C8665 : 1BD6 0CD6         
(1)   41/   C8669 : D2D2 D715 D71B      	dc.b	nA6, nA6, nD7, $15, nD7, $1B
(1)   42/   C866F : (MACRO)             	smpsStop
(1)   42/   C866F : F2                          dc.b    $F2
(1)   43/   C8670 :                     
(1)   44/   C8670 :                     ; FM4 Data
(1)   45/   C8670 :                     GOver_FM4:
(1)   46/   C8670 : (MACRO)             	smpsSetvoice        $02
(1)   46/   C8670 :  (MACRO-2)                  smpsFMvoice $02
(1)   46/   C8670 : EF02                                dc.b    $EF,$02
(1)   47/   C8672 : (MACRO)             	smpsNop             $01
(1)   48/   C8672 : AE06 80AE 80A9 80A9 	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $15, nFs3
            C867A : 80AC 15AB         
(1)   49/   C867E : 0CAC 03AB 0CAE 0680 	dc.b	$0C, nG3, $03, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
            C8686 : AE80 A980         
(1)   50/   C868A : A980 B315 B20C B303 	dc.b	nE3, nRst, nD4, $15, nCs4, $0C, nD4, $03, nCs4, $0C, nA3, $04
            C8692 : B20C AE04         
(1)   51/   C8696 : 80AE AD06 80AC 80AB 	dc.b	nRst, nA3, nAb3, $06, nRst, nG3, nRst, nFs3, nRst, nFs3, $60
            C869E : 80AB 60            
(1)   52/   C86A1 : (MACRO)             	smpsNop             $01
(1)   53/   C86A1 : (MACRO)             	smpsStop
(1)   53/   C86A1 : F2                          dc.b    $F2
(1)   54/   C86A2 :                     
(1)   55/   C86A2 :                     ; FM5 Data
(1)   56/   C86A2 :                     GOver_FM5:
(1)   57/   C86A2 : (MACRO)             	smpsSetvoice        $03
(1)   57/   C86A2 :  (MACRO-2)                  smpsFMvoice $03
(1)   57/   C86A2 : EF03                                dc.b    $EF,$03
(1)   58/   C86A4 : 8030 D712 8003 D71B 	dc.b	nRst, $30, nD7, $12, nRst, $03, nD7, $1B, nRst, $30, nG7, $12
            C86AC : 8030 DC12         
(1)   59/   C86B0 : 8003 DC1B           	dc.b	nRst, $03, nG7, $1B
(1)   60/   C86B4 :                     
(1)   61/   C86B4 :                     ; PSG1 Data
(1)   62/   C86B4 :                     GOver_PSG1:
(1)   63/   C86B4 :                     ; PSG2 Data
(1)   64/   C86B4 :                     GOver_PSG2:
(1)   65/   C86B4 :                     ; PSG3 Data
(1)   66/   C86B4 :                     GOver_PSG3:
(1)   67/   C86B4 : (MACRO)             	smpsStop
(1)   67/   C86B4 : F2                          dc.b    $F2
(1)   68/   C86B5 :                     
(1)   69/   C86B5 :                     ; DAC Data
(1)   70/   C86B5 :                     GOver_DAC:
(1)   71/   C86B5 : 8018 81             	dc.b	nRst, $18, dKick
(1)   72/   C86B8 : (MACRO)             	smpsLoop            $00, $04, GOver_DAC
(1)   72/   C86B8 : F7                          dc.b    $F7
(1)   72/   C86B9 : 0004                        dc.b    $00,$04
(1)   72/   C86BB : B586                                dc.w    z80_ptr(GOVER_DAC)
(1)   73/   C86BD : (MACRO)             	smpsStop
(1)   73/   C86BD : F2                          dc.b    $F2
(1)   74/   C86BE :                     
(1)   75/   C86BE :                     GOver_Voices:
(1)   76/   C86BE :                     ;	Voice $00
(1)   77/   C86BE :                     ;	$3A
(1)   78/   C86BE :                     ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
(1)   79/   C86BE :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
(1)   80/   C86BE : (MACRO)             	smpsVcAlgorithm     $02
(1)   80/   C86BE : =$2                 vcAlgorithm set $02
(1)   81/   C86BE : (MACRO)             	smpsVcFeedback      $07
(1)   81/   C86BE : =$7                 vcFeedback set $07
(1)   82/   C86BE : (MACRO)             	smpsVcUnusedBits    $00
(1)   82/   C86BE : =$0                 vcUnusedBits set $00
(1)   82/   C86BE : =$0                 vcD1R1Unk set 0
(1)   82/   C86BE : =$0                 vcD1R2Unk set 0
(1)   82/   C86BE : =$0                 vcD1R3Unk set 0
(1)   82/   C86BE : =$0                 vcD1R4Unk set 0
(1)   83/   C86BE : (MACRO)             	smpsVcDetune        $00, $05, $00, $05
(1)   83/   C86BE : =$0                 vcDT1 set $00
(1)   83/   C86BE : =$5                 vcDT2 set $05
(1)   83/   C86BE : =$0                 vcDT3 set $00
(1)   83/   C86BE : =$5                 vcDT4 set $05
(1)   84/   C86BE : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $01
(1)   84/   C86BE : =$2                 vcCF1 set $02
(1)   84/   C86BE : =$1                 vcCF2 set $01
(1)   84/   C86BE : =$8                 vcCF3 set $08
(1)   84/   C86BE : =$1                 vcCF4 set $01
(1)   85/   C86BE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   85/   C86BE : =$0                 vcRS1 set $00
(1)   85/   C86BE : =$0                 vcRS2 set $00
(1)   85/   C86BE : =$0                 vcRS3 set $00
(1)   85/   C86BE : =$0                 vcRS4 set $00
(1)   86/   C86BE : (MACRO)             	smpsVcAttackRate    $10, $1E, $1E, $1E
(1)   86/   C86BE : =$10                vcAR1 set $10
(1)   86/   C86BE : =$1E                vcAR2 set $1E
(1)   86/   C86BE : =$1E                vcAR3 set $1E
(1)   86/   C86BE : =$1E                vcAR4 set $1E
(1)   87/   C86BE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   87/   C86BE : =$0                 vcAM1 set $00<<5
(1)   87/   C86BE : =$0                 vcAM2 set $00<<5
(1)   87/   C86BE : =$0                 vcAM3 set $00<<5
(1)   87/   C86BE : =$0                 vcAM4 set $00<<5
(1)   88/   C86BE : (MACRO)             	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1)   88/   C86BE : =$F                 vcD1R1 set $0F
(1)   88/   C86BE : =$1F                vcD1R2 set $1F
(1)   88/   C86BE : =$1F                vcD1R3 set $1F
(1)   88/   C86BE : =$1F                vcD1R4 set $1F
(1)   89/   C86BE : (MACRO)             	smpsVcDecayRate2    $02, $00, $00, $00
(1)   89/   C86BE : =$2                 vcD2R1 set $02
(1)   89/   C86BE : =$0                 vcD2R2 set $00
(1)   89/   C86BE : =$0                 vcD2R3 set $00
(1)   89/   C86BE : =$0                 vcD2R4 set $00
(1)   90/   C86BE : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1)   90/   C86BE : =$1                 vcDL1 set $01
(1)   90/   C86BE : =$0                 vcDL2 set $00
(1)   90/   C86BE : =$0                 vcDL3 set $00
(1)   90/   C86BE : =$0                 vcDL4 set $00
(1)   91/   C86BE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   91/   C86BE : =$F                 vcRR1 set $0F
(1)   91/   C86BE : =$F                 vcRR2 set $0F
(1)   91/   C86BE : =$F                 vcRR3 set $0F
(1)   91/   C86BE : =$F                 vcRR4 set $0F
(1)   92/   C86BE : (MACRO)             	smpsVcTotalLevel    $01, $22, $24, $18
(1)   92/   C86BE : =$1                 vcTL1 set $01
(1)   92/   C86BE : =$22                vcTL2 set $22
(1)   92/   C86BE : =$24                vcTL3 set $24
(1)   92/   C86BE : =$18                vcTL4 set $18
(1)   92/   C86BE : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   92/   C86BF :                     ;   0     1     2     3     4     5     6     7
(1)   92/   C86BF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   92/   C86BF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   92/   C86BF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   92/   C86BF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   92/   C86BF : =$80                vcTLMask1 set $80
(1)   92/   C86BF :                     
(1)   92/   C86BF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   92/   C86BF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   92/   C86BF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   92/   C86BF : =$80                vcTLMask1 set $80
(1)   92/   C86BF : =$1                 vcTL1 set vcTL1&$7F
(1)   92/   C86BF : =$22                vcTL2 set vcTL2&$7F
(1)   92/   C86BF : =$24                vcTL3 set vcTL3&$7F
(1)   92/   C86BF : =$18                vcTL4 set vcTL4&$7F
(1)   92/   C86BF :                     
(1)   92/   C86BF : 5108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   92/   C86C3 : 1E1E 1E10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   92/   C86C7 : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   92/   C86CB : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   92/   C86CF : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   92/   C86D3 : 1824 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   93/   C86D7 :                     
(1)   94/   C86D7 :                     ;	Voice $01
(1)   95/   C86D7 :                     ;	$3C
(1)   96/   C86D7 :                     ;	$33, $30, $73, $70, 	$94, $9F, $96, $9F, 	$12, $00, $14, $0F
(1)   97/   C86D7 :                     ;	$04, $0A, $04, $0D, 	$2F, $0F, $4F, $2F, 	$33, $80, $1A, $80
(1)   98/   C86D7 : (MACRO)             	smpsVcAlgorithm     $04
(1)   98/   C86D7 : =$4                 vcAlgorithm set $04
(1)   99/   C86D7 : (MACRO)             	smpsVcFeedback      $07
(1)   99/   C86D7 : =$7                 vcFeedback set $07
(1)  100/   C86D7 : (MACRO)             	smpsVcUnusedBits    $00
(1)  100/   C86D7 : =$0                 vcUnusedBits set $00
(1)  100/   C86D7 : =$0                 vcD1R1Unk set 0
(1)  100/   C86D7 : =$0                 vcD1R2Unk set 0
(1)  100/   C86D7 : =$0                 vcD1R3Unk set 0
(1)  100/   C86D7 : =$0                 vcD1R4Unk set 0
(1)  101/   C86D7 : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
(1)  101/   C86D7 : =$7                 vcDT1 set $07
(1)  101/   C86D7 : =$7                 vcDT2 set $07
(1)  101/   C86D7 : =$3                 vcDT3 set $03
(1)  101/   C86D7 : =$3                 vcDT4 set $03
(1)  102/   C86D7 : (MACRO)             	smpsVcCoarseFreq    $00, $03, $00, $03
(1)  102/   C86D7 : =$0                 vcCF1 set $00
(1)  102/   C86D7 : =$3                 vcCF2 set $03
(1)  102/   C86D7 : =$0                 vcCF3 set $00
(1)  102/   C86D7 : =$3                 vcCF4 set $03
(1)  103/   C86D7 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(1)  103/   C86D7 : =$2                 vcRS1 set $02
(1)  103/   C86D7 : =$2                 vcRS2 set $02
(1)  103/   C86D7 : =$2                 vcRS3 set $02
(1)  103/   C86D7 : =$2                 vcRS4 set $02
(1)  104/   C86D7 : (MACRO)             	smpsVcAttackRate    $1F, $16, $1F, $14
(1)  104/   C86D7 : =$1F                vcAR1 set $1F
(1)  104/   C86D7 : =$16                vcAR2 set $16
(1)  104/   C86D7 : =$1F                vcAR3 set $1F
(1)  104/   C86D7 : =$14                vcAR4 set $14
(1)  105/   C86D7 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  105/   C86D7 : =$0                 vcAM1 set $00<<5
(1)  105/   C86D7 : =$0                 vcAM2 set $00<<5
(1)  105/   C86D7 : =$0                 vcAM3 set $00<<5
(1)  105/   C86D7 : =$0                 vcAM4 set $00<<5
(1)  106/   C86D7 : (MACRO)             	smpsVcDecayRate1    $0F, $14, $00, $12
(1)  106/   C86D7 : =$F                 vcD1R1 set $0F
(1)  106/   C86D7 : =$14                vcD1R2 set $14
(1)  106/   C86D7 : =$0                 vcD1R3 set $00
(1)  106/   C86D7 : =$12                vcD1R4 set $12
(1)  107/   C86D7 : (MACRO)             	smpsVcDecayRate2    $0D, $04, $0A, $04
(1)  107/   C86D7 : =$D                 vcD2R1 set $0D
(1)  107/   C86D7 : =$4                 vcD2R2 set $04
(1)  107/   C86D7 : =$A                 vcD2R3 set $0A
(1)  107/   C86D7 : =$4                 vcD2R4 set $04
(1)  108/   C86D7 : (MACRO)             	smpsVcDecayLevel    $02, $04, $00, $02
(1)  108/   C86D7 : =$2                 vcDL1 set $02
(1)  108/   C86D7 : =$4                 vcDL2 set $04
(1)  108/   C86D7 : =$0                 vcDL3 set $00
(1)  108/   C86D7 : =$2                 vcDL4 set $02
(1)  109/   C86D7 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  109/   C86D7 : =$F                 vcRR1 set $0F
(1)  109/   C86D7 : =$F                 vcRR2 set $0F
(1)  109/   C86D7 : =$F                 vcRR3 set $0F
(1)  109/   C86D7 : =$F                 vcRR4 set $0F
(1)  110/   C86D7 : (MACRO)             	smpsVcTotalLevel    $00, $1A, $00, $33
(1)  110/   C86D7 : =$0                 vcTL1 set $00
(1)  110/   C86D7 : =$1A                vcTL2 set $1A
(1)  110/   C86D7 : =$0                 vcTL3 set $00
(1)  110/   C86D7 : =$33                vcTL4 set $33
(1)  110/   C86D7 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  110/   C86D8 :                     ;   0     1     2     3     4     5     6     7
(1)  110/   C86D8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  110/   C86D8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  110/   C86D8 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  110/   C86D8 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  110/   C86D8 : =$80                vcTLMask1 set $80
(1)  110/   C86D8 :                     
(1)  110/   C86D8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  110/   C86D8 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  110/   C86D8 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  110/   C86D8 : =$80                vcTLMask1 set $80
(1)  110/   C86D8 : =$0                 vcTL1 set vcTL1&$7F
(1)  110/   C86D8 : =$1A                vcTL2 set vcTL2&$7F
(1)  110/   C86D8 : =$0                 vcTL3 set vcTL3&$7F
(1)  110/   C86D8 : =$33                vcTL4 set vcTL4&$7F
(1)  110/   C86D8 :                     
(1)  110/   C86D8 : 3330 7370                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  110/   C86DC : 949F 969F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  110/   C86E0 : 1200 140F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  110/   C86E4 : 040A 040D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  110/   C86E8 : 2F0F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  110/   C86EC : 3380 1A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  111/   C86F0 :                     
(1)  112/   C86F0 :                     ;	Voice $02
(1)  113/   C86F0 :                     ;	$3A
(1)  114/   C86F0 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  115/   C86F0 :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$1C, $28, $27, $80
(1)  116/   C86F0 : (MACRO)             	smpsVcAlgorithm     $02
(1)  116/   C86F0 : =$2                 vcAlgorithm set $02
(1)  117/   C86F0 : (MACRO)             	smpsVcFeedback      $07
(1)  117/   C86F0 : =$7                 vcFeedback set $07
(1)  118/   C86F0 : (MACRO)             	smpsVcUnusedBits    $00
(1)  118/   C86F0 : =$0                 vcUnusedBits set $00
(1)  118/   C86F0 : =$0                 vcD1R1Unk set 0
(1)  118/   C86F0 : =$0                 vcD1R2Unk set 0
(1)  118/   C86F0 : =$0                 vcD1R3Unk set 0
(1)  118/   C86F0 : =$0                 vcD1R4Unk set 0
(1)  119/   C86F0 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  119/   C86F0 : =$0                 vcDT1 set $00
(1)  119/   C86F0 : =$0                 vcDT2 set $00
(1)  119/   C86F0 : =$0                 vcDT3 set $00
(1)  119/   C86F0 : =$0                 vcDT4 set $00
(1)  120/   C86F0 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  120/   C86F0 : =$1                 vcCF1 set $01
(1)  120/   C86F0 : =$1                 vcCF2 set $01
(1)  120/   C86F0 : =$7                 vcCF3 set $07
(1)  120/   C86F0 : =$1                 vcCF4 set $01
(1)  121/   C86F0 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  121/   C86F0 : =$1                 vcRS1 set $01
(1)  121/   C86F0 : =$2                 vcRS2 set $02
(1)  121/   C86F0 : =$2                 vcRS3 set $02
(1)  121/   C86F0 : =$2                 vcRS4 set $02
(1)  122/   C86F0 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  122/   C86F0 : =$13                vcAR1 set $13
(1)  122/   C86F0 : =$D                 vcAR2 set $0D
(1)  122/   C86F0 : =$E                 vcAR3 set $0E
(1)  122/   C86F0 : =$E                 vcAR4 set $0E
(1)  123/   C86F0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  123/   C86F0 : =$0                 vcAM1 set $00<<5
(1)  123/   C86F0 : =$0                 vcAM2 set $00<<5
(1)  123/   C86F0 : =$0                 vcAM3 set $00<<5
(1)  123/   C86F0 : =$0                 vcAM4 set $00<<5
(1)  124/   C86F0 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  124/   C86F0 : =$3                 vcD1R1 set $03
(1)  124/   C86F0 : =$E                 vcD1R2 set $0E
(1)  124/   C86F0 : =$E                 vcD1R3 set $0E
(1)  124/   C86F0 : =$E                 vcD1R4 set $0E
(1)  125/   C86F0 : (MACRO)             	smpsVcDecayRate2    $07, $00, $00, $00
(1)  125/   C86F0 : =$7                 vcD2R1 set $07
(1)  125/   C86F0 : =$0                 vcD2R2 set $00
(1)  125/   C86F0 : =$0                 vcD2R3 set $00
(1)  125/   C86F0 : =$0                 vcD2R4 set $00
(1)  126/   C86F0 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  126/   C86F0 : =$0                 vcDL1 set $00
(1)  126/   C86F0 : =$1                 vcDL2 set $01
(1)  126/   C86F0 : =$F                 vcDL3 set $0F
(1)  126/   C86F0 : =$1                 vcDL4 set $01
(1)  127/   C86F0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  127/   C86F0 : =$F                 vcRR1 set $0F
(1)  127/   C86F0 : =$F                 vcRR2 set $0F
(1)  127/   C86F0 : =$F                 vcRR3 set $0F
(1)  127/   C86F0 : =$F                 vcRR4 set $0F
(1)  128/   C86F0 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $1C
(1)  128/   C86F0 : =$0                 vcTL1 set $00
(1)  128/   C86F0 : =$27                vcTL2 set $27
(1)  128/   C86F0 : =$28                vcTL3 set $28
(1)  128/   C86F0 : =$1C                vcTL4 set $1C
(1)  128/   C86F0 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  128/   C86F1 :                     ;   0     1     2     3     4     5     6     7
(1)  128/   C86F1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  128/   C86F1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  128/   C86F1 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  128/   C86F1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  128/   C86F1 : =$80                vcTLMask1 set $80
(1)  128/   C86F1 :                     
(1)  128/   C86F1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  128/   C86F1 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  128/   C86F1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  128/   C86F1 : =$80                vcTLMask1 set $80
(1)  128/   C86F1 : =$0                 vcTL1 set vcTL1&$7F
(1)  128/   C86F1 : =$27                vcTL2 set vcTL2&$7F
(1)  128/   C86F1 : =$28                vcTL3 set vcTL3&$7F
(1)  128/   C86F1 : =$1C                vcTL4 set vcTL4&$7F
(1)  128/   C86F1 :                     
(1)  128/   C86F1 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  128/   C86F5 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  128/   C86F9 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  128/   C86FD : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  128/   C8701 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  128/   C8705 : 1C28 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  129/   C8709 :                     
(1)  130/   C8709 :                     ;	Voice $03
(1)  131/   C8709 :                     ;	$1F
(1)  132/   C8709 :                     ;	$66, $31, $53, $22, 	$1C, $98, $1F, $1F, 	$12, $0F, $0F, $0F
(1)  133/   C8709 :                     ;	$00, $00, $00, $00, 	$FF, $0F, $0F, $0F, 	$8C, $8D, $8A, $8B
(1)  134/   C8709 : (MACRO)             	smpsVcAlgorithm     $07
(1)  134/   C8709 : =$7                 vcAlgorithm set $07
(1)  135/   C8709 : (MACRO)             	smpsVcFeedback      $03
(1)  135/   C8709 : =$3                 vcFeedback set $03
(1)  136/   C8709 : (MACRO)             	smpsVcUnusedBits    $00
(1)  136/   C8709 : =$0                 vcUnusedBits set $00
(1)  136/   C8709 : =$0                 vcD1R1Unk set 0
(1)  136/   C8709 : =$0                 vcD1R2Unk set 0
(1)  136/   C8709 : =$0                 vcD1R3Unk set 0
(1)  136/   C8709 : =$0                 vcD1R4Unk set 0
(1)  137/   C8709 : (MACRO)             	smpsVcDetune        $02, $05, $03, $06
(1)  137/   C8709 : =$2                 vcDT1 set $02
(1)  137/   C8709 : =$5                 vcDT2 set $05
(1)  137/   C8709 : =$3                 vcDT3 set $03
(1)  137/   C8709 : =$6                 vcDT4 set $06
(1)  138/   C8709 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $01, $06
(1)  138/   C8709 : =$2                 vcCF1 set $02
(1)  138/   C8709 : =$3                 vcCF2 set $03
(1)  138/   C8709 : =$1                 vcCF3 set $01
(1)  138/   C8709 : =$6                 vcCF4 set $06
(1)  139/   C8709 : (MACRO)             	smpsVcRateScale     $00, $00, $02, $00
(1)  139/   C8709 : =$0                 vcRS1 set $00
(1)  139/   C8709 : =$0                 vcRS2 set $00
(1)  139/   C8709 : =$2                 vcRS3 set $02
(1)  139/   C8709 : =$0                 vcRS4 set $00
(1)  140/   C8709 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $18, $1C
(1)  140/   C8709 : =$1F                vcAR1 set $1F
(1)  140/   C8709 : =$1F                vcAR2 set $1F
(1)  140/   C8709 : =$18                vcAR3 set $18
(1)  140/   C8709 : =$1C                vcAR4 set $1C
(1)  141/   C8709 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  141/   C8709 : =$0                 vcAM1 set $00<<5
(1)  141/   C8709 : =$0                 vcAM2 set $00<<5
(1)  141/   C8709 : =$0                 vcAM3 set $00<<5
(1)  141/   C8709 : =$0                 vcAM4 set $00<<5
(1)  142/   C8709 : (MACRO)             	smpsVcDecayRate1    $0F, $0F, $0F, $12
(1)  142/   C8709 : =$F                 vcD1R1 set $0F
(1)  142/   C8709 : =$F                 vcD1R2 set $0F
(1)  142/   C8709 : =$F                 vcD1R3 set $0F
(1)  142/   C8709 : =$12                vcD1R4 set $12
(1)  143/   C8709 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  143/   C8709 : =$0                 vcD2R1 set $00
(1)  143/   C8709 : =$0                 vcD2R2 set $00
(1)  143/   C8709 : =$0                 vcD2R3 set $00
(1)  143/   C8709 : =$0                 vcD2R4 set $00
(1)  144/   C8709 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $0F
(1)  144/   C8709 : =$0                 vcDL1 set $00
(1)  144/   C8709 : =$0                 vcDL2 set $00
(1)  144/   C8709 : =$0                 vcDL3 set $00
(1)  144/   C8709 : =$F                 vcDL4 set $0F
(1)  145/   C8709 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  145/   C8709 : =$F                 vcRR1 set $0F
(1)  145/   C8709 : =$F                 vcRR2 set $0F
(1)  145/   C8709 : =$F                 vcRR3 set $0F
(1)  145/   C8709 : =$F                 vcRR4 set $0F
(1)  146/   C8709 : (MACRO)             	smpsVcTotalLevel    $0B, $0A, $0D, $0C
(1)  146/   C8709 : =$B                 vcTL1 set $0B
(1)  146/   C8709 : =$A                 vcTL2 set $0A
(1)  146/   C8709 : =$D                 vcTL3 set $0D
(1)  146/   C8709 : =$C                 vcTL4 set $0C
(1)  146/   C8709 : 1F                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  146/   C870A :                     ;   0     1     2     3     4     5     6     7
(1)  146/   C870A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  146/   C870A : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  146/   C870A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  146/   C870A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  146/   C870A : =$80                vcTLMask1 set $80
(1)  146/   C870A :                     
(1)  146/   C870A : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  146/   C870A : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  146/   C870A : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  146/   C870A : =$80                vcTLMask1 set $80
(1)  146/   C870A : =$B                 vcTL1 set vcTL1&$7F
(1)  146/   C870A : =$A                 vcTL2 set vcTL2&$7F
(1)  146/   C870A : =$D                 vcTL3 set vcTL3&$7F
(1)  146/   C870A : =$C                 vcTL4 set vcTL4&$7F
(1)  146/   C870A :                     
(1)  146/   C870A : 6631 5322                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  146/   C870E : 1C98 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  146/   C8712 : 120F 0F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  146/   C8716 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  146/   C871A : FF0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  146/   C871E : 8C8D 8A8B                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  147/   C8722 :                     
(1)  148/   C8722 :                     
   69/   C8722 :                        Music_1C:	include		"music-improved/9C - Continue.asm"
(1)    1/   C8722 :                     Continue_Header:
(1)    2/   C8722 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C8722 :                     
(1)    2/   C8722 : =$2                 SourceDriver set 2
(1)    2/   C8722 :                     
(1)    2/   C8722 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C8722 :                     
(1)    2/   C8722 : =$C8722             songStart set *
(1)    2/   C8722 :                     
(1)    2/   C8722 :                     
(1)    3/   C8722 : (MACRO)             	smpsHeaderVoice     Continue_Voices
(1)    3/   C8722 : 1788                                dc.w    z80_ptr(CONTINUE_VOICES)
(1)    4/   C8724 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C8724 : 0603                        dc.b    $06,$03
(1)    5/   C8726 : (MACRO)             	smpsHeaderTempo     $01, $DB
(1)    5/   C8726 : 01                          dc.b    $01
(1)    5/   C8727 :  (MACRO-2)                  convertMainTempoMod $DB
(1)    5/   C8727 : 25                                          dc.b    s2TempotoS3($DB)
(1)    6/   C8728 :                     
(1)    7/   C8728 : (MACRO)             	smpsHeaderDAC       Continue_DAC
(1)    7/   C8728 :  (MACRO-2)                  CheckedChannelPointer CONTINUE_DAC
(1)    7/   C8728 : 0688                                dc.w    z80_ptr(CONTINUE_DAC)
(1)    7/   C872A : 0000                                dc.w    $00
(1)    8/   C872C : (MACRO)             	smpsHeaderFM        Continue_FM1,	$E5, $08
(1)    8/   C872C :  (MACRO-2)                  CheckedChannelPointer CONTINUE_FM1
(1)    8/   C872C : 5287                                dc.w    z80_ptr(CONTINUE_FM1)
(1)    8/   C872E : E508                        dc.b    $E5,$08
(1)    9/   C8730 : (MACRO)             	smpsHeaderFM        Continue_FM2,	$E8, $08
(1)    9/   C8730 :  (MACRO-2)                  CheckedChannelPointer CONTINUE_FM2
(1)    9/   C8730 : 7D87                                dc.w    z80_ptr(CONTINUE_FM2)
(1)    9/   C8732 : E808                        dc.b    $E8,$08
(1)   10/   C8734 : (MACRO)             	smpsHeaderFM        Continue_FM3,	$F4, $0F
(1)   10/   C8734 :  (MACRO-2)                  CheckedChannelPointer CONTINUE_FM3
(1)   10/   C8734 : B887                                dc.w    z80_ptr(CONTINUE_FM3)
(1)   10/   C8736 : F40F                        dc.b    $F4,$0F
(1)   11/   C8738 : (MACRO)             	smpsHeaderFM        Continue_FM4,	$F4, $0F
(1)   11/   C8738 :  (MACRO-2)                  CheckedChannelPointer CONTINUE_FM4
(1)   11/   C8738 : E087                                dc.w    z80_ptr(CONTINUE_FM4)
(1)   11/   C873A : F40F                        dc.b    $F4,$0F
(1)   12/   C873C : (MACRO)             	smpsHeaderFM        Continue_FM5,	$F4, $0A
(1)   12/   C873C :  (MACRO-2)                  CheckedChannelPointer CONTINUE_FM5
(1)   12/   C873C : 0588                                dc.w    z80_ptr(CONTINUE_FM5)
(1)   12/   C873E : F40A                        dc.b    $F4,$0A
(1)   13/   C8740 : (MACRO)             	smpsHeaderPSG       Continue_PSG1,	$D0, $03, $00, fTone_05
(1)   13/   C8740 :  (MACRO-2)                  CheckedChannelPointer CONTINUE_PSG1
(1)   13/   C8740 : 0588                                dc.w    z80_ptr(CONTINUE_PSG1)
(1)   13/   C8742 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/   C8742 : DC                                  dc.b    ($D0+psgdelta)&$FF
(1)   13/   C8743 : 0300 05                     dc.b    $03,$00,FTONE_05
(1)   14/   C8746 : (MACRO)             	smpsHeaderPSG       Continue_PSG2,	$DC, $06, $00, fTone_05
(1)   14/   C8746 :  (MACRO-2)                  CheckedChannelPointer CONTINUE_PSG2
(1)   14/   C8746 : 0588                                dc.w    z80_ptr(CONTINUE_PSG2)
(1)   14/   C8748 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C8748 : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C8749 : 0600 05                     dc.b    $06,$00,FTONE_05
(1)   15/   C874C : (MACRO)             	smpsHeaderPSG       Continue_PSG3,	$DC, $00, $00, fTone_04
(1)   15/   C874C :  (MACRO-2)                  CheckedChannelPointer CONTINUE_PSG3
(1)   15/   C874C : 0588                                dc.w    z80_ptr(CONTINUE_PSG3)
(1)   15/   C874E :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/   C874E : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   15/   C874F : 0000 04                     dc.b    $00,$00,FTONE_04
(1)   16/   C8752 :                     
(1)   17/   C8752 :                     ; FM1 Data
(1)   18/   C8752 :                     Continue_FM1:
(1)   19/   C8752 : (MACRO)             	smpsSetvoice        $00
(1)   19/   C8752 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   C8752 : EF00                                dc.b    $EF,$00
(1)   20/   C8754 : 8030                	dc.b	nRst, $30
(1)   21/   C8756 :                     
(1)   22/   C8756 :                     Continue_Loop04:
(1)   23/   C8756 : (MACRO)             	smpsAlterPitch      $01
(1)   23/   C8756 :  (MACRO-2)                  smpsChangeTransposition $01
(1)   23/   C8756 : FB01                                dc.b    $FB,$01
(1)   24/   C8758 : 800C CC12 8006 CC80 	dc.b	nRst, $0C, nEb6, $12, nRst, $06, nEb6, nRst, nE6, $0C, nRst, $06
            C8760 : CD0C 8006         
(1)   25/   C8764 : CA18 8006           	dc.b	nCs6, $18, nRst, $06
(1)   26/   C8768 : (MACRO)             	smpsLoop            $00, $03, Continue_Loop04
(1)   26/   C8768 : F7                          dc.b    $F7
(1)   26/   C8769 : 0003                        dc.b    $00,$03
(1)   26/   C876B : 5687                                dc.w    z80_ptr(CONTINUE_LOOP04)
(1)   27/   C876D : CE06 80CE 80CE 80C9 	dc.b	nF6, $06, nRst, nF6, nRst, nF6, nRst, nC6, nRst, nBb5, $0C, nRst
            C8775 : 80C7 0C80         
(1)   28/   C8779 : 06CB 4E             	dc.b	$06, nD6, $4E
(1)   29/   C877C : (MACRO)             	smpsStop
(1)   29/   C877C : F2                          dc.b    $F2
(1)   30/   C877D :                     
(1)   31/   C877D :                     ; FM2 Data
(1)   32/   C877D :                     Continue_FM2:
(1)   33/   C877D : (MACRO)             	smpsSetvoice        $01
(1)   33/   C877D :  (MACRO-2)                  smpsFMvoice $01
(1)   33/   C877D : EF01                                dc.b    $EF,$01
(1)   34/   C877F : (MACRO)             	smpsAlterVol        $02
(1)   34/   C877F : E602                        dc.b    $E6,$02
(1)   35/   C8781 : (MACRO)             	smpsAlterPitch      $F4
(1)   35/   C8781 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   35/   C8781 : FBF4                                dc.b    $FB,$F4
(1)   36/   C8783 : (MACRO)             	smpsNop             $01
(1)   37/   C8783 : C60C C5C4 C3        	dc.b	nA5, $0C, nAb5, nG5, nFs5
(1)   38/   C8788 : (MACRO)             	smpsAlterVol        $FE
(1)   38/   C8788 : E6FE                        dc.b    $E6,$FE
(1)   39/   C878A : (MACRO)             	smpsAlterPitch      $0C
(1)   39/   C878A :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   39/   C878A : FB0C                                dc.b    $FB,$0C
(1)   40/   C878C : (MACRO)             	smpsSetvoice        $02
(1)   40/   C878C :  (MACRO-2)                  smpsFMvoice $02
(1)   40/   C878C : EF02                                dc.b    $EF,$02
(1)   41/   C878E :                     
(1)   42/   C878E :                     Continue_Loop03:
(1)   43/   C878E : BA06 80BA 80B5 80B5 	dc.b	nA4, $06, nRst, nA4, nRst, nE4, nRst, nE4, nRst, nG4, $12, nFs4
            C8796 : 80B8 12B7         
(1)   44/   C879A : 0CB8 06B7 0C        	dc.b	$0C, nG4, $06, nFs4, $0C
(1)   45/   C879F : (MACRO)             	smpsAlterPitch      $01
(1)   45/   C879F :  (MACRO-2)                  smpsChangeTransposition $01
(1)   45/   C879F : FB01                                dc.b    $FB,$01
(1)   46/   C87A1 : (MACRO)             	smpsLoop            $00, $03, Continue_Loop03
(1)   46/   C87A1 : F7                          dc.b    $F7
(1)   46/   C87A2 : 0003                        dc.b    $00,$03
(1)   46/   C87A4 : 8E87                                dc.w    z80_ptr(CONTINUE_LOOP03)
(1)   47/   C87A6 : (MACRO)             	smpsAlterPitch      $FD
(1)   47/   C87A6 :  (MACRO-2)                  smpsChangeTransposition $FD
(1)   47/   C87A6 : FBFD                                dc.b    $FB,$FD
(1)   48/   C87A8 : BC06 80BC 80B7 80B7 	dc.b	nB4, $06, nRst, nB4, nRst, nFs4, nRst, nFs4, nRst, nE5, $0C, nRst
            C87B0 : 80C1 0C80         
(1)   49/   C87B4 : 06C0 4E             	dc.b	$06, nEb5, $4E
(1)   50/   C87B7 : (MACRO)             	smpsNop             $01
(1)   51/   C87B7 : (MACRO)             	smpsStop
(1)   51/   C87B7 : F2                          dc.b    $F2
(1)   52/   C87B8 :                     
(1)   53/   C87B8 :                     ; FM3 Data
(1)   54/   C87B8 :                     Continue_FM3:
(1)   55/   C87B8 : (MACRO)             	smpsSetvoice        $03
(1)   55/   C87B8 :  (MACRO-2)                  smpsFMvoice $03
(1)   55/   C87B8 : EF03                                dc.b    $EF,$03
(1)   56/   C87BA : 8030                	dc.b	nRst, $30
(1)   57/   C87BC :                     
(1)   58/   C87BC :                     Continue_Loop02:
(1)   59/   C87BC : CD06 80CD 80CA 80CA 	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
            C87C4 : 80CB 12CB         
(1)   60/   C87C8 : 1E                  	dc.b	$1E
(1)   61/   C87C9 : (MACRO)             	smpsLoop            $00, $03, Continue_Loop02
(1)   61/   C87C9 : F7                          dc.b    $F7
(1)   61/   C87CA : 0003                        dc.b    $00,$03
(1)   61/   C87CC : BC87                                dc.w    z80_ptr(CONTINUE_LOOP02)
(1)   62/   C87CE : CD06 80CD 80CA 80CA 	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $0C, nRst
            C87D6 : 80D0 0C80         
(1)   63/   C87DA : 06D0 1EE7 30        	dc.b	$06, nG6, $1E, smpsNoAttack, $30
(1)   64/   C87DF : (MACRO)             	smpsStop
(1)   64/   C87DF : F2                          dc.b    $F2
(1)   65/   C87E0 :                     
(1)   66/   C87E0 :                     ; FM4 Data
(1)   67/   C87E0 :                     Continue_FM4:
(1)   68/   C87E0 : (MACRO)             	smpsSetvoice        $03
(1)   68/   C87E0 :  (MACRO-2)                  smpsFMvoice $03
(1)   68/   C87E0 : EF03                                dc.b    $EF,$03
(1)   69/   C87E2 : 8030                	dc.b	nRst, $30
(1)   70/   C87E4 :                     
(1)   71/   C87E4 :                     Continue_Loop01:
(1)   72/   C87E4 : CA06 80CA 80C6 80C6 	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
            C87EC : 80C8 12C8         
(1)   73/   C87F0 : 1E                  	dc.b	$1E
(1)   74/   C87F1 : (MACRO)             	smpsLoop            $00, $03, Continue_Loop01
(1)   74/   C87F1 : F7                          dc.b    $F7
(1)   74/   C87F2 : 0003                        dc.b    $00,$03
(1)   74/   C87F4 : E487                                dc.w    z80_ptr(CONTINUE_LOOP01)
(1)   75/   C87F6 : CA06 80CA 80C6 80C6 	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $0C, nRst
            C87FE : 80CB 0C80         
(1)   76/   C8802 : 06CB 4E             	dc.b	$06, nD6, $4E
(1)   77/   C8805 :                     
(1)   78/   C8805 :                     ; FM5 Data
(1)   79/   C8805 :                     Continue_FM5:
(1)   80/   C8805 :                     ; PSG1 Data
(1)   81/   C8805 :                     Continue_PSG1:
(1)   82/   C8805 :                     ; PSG2 Data
(1)   83/   C8805 :                     Continue_PSG2:
(1)   84/   C8805 :                     ; PSG3 Data
(1)   85/   C8805 :                     Continue_PSG3:
(1)   86/   C8805 : (MACRO)             	smpsStop
(1)   86/   C8805 : F2                          dc.b    $F2
(1)   87/   C8806 :                     
(1)   88/   C8806 :                     ; DAC Data
(1)   89/   C8806 :                     Continue_DAC:
(1)   90/   C8806 : 8030                	dc.b	nRst, $30
(1)   91/   C8808 :                     
(1)   92/   C8808 :                     Continue_Loop00:
(1)   93/   C8808 : 810C 82             	dc.b	dKick, $0C, dSnare
(1)   94/   C880B : (MACRO)             	smpsLoop            $00, $0E, Continue_Loop00
(1)   94/   C880B : F7                          dc.b    $F7
(1)   94/   C880C : 000E                        dc.b    $00,$0E
(1)   94/   C880E : 0888                                dc.w    z80_ptr(CONTINUE_LOOP00)
(1)   95/   C8810 : 810C 8206 810C      	dc.b	dKick, $0C, dSnare, $06, dKick, $0C
(1)   96/   C8816 : (MACRO)             	smpsStop
(1)   96/   C8816 : F2                          dc.b    $F2
(1)   97/   C8817 :                     
(1)   98/   C8817 :                     Continue_Voices:
(1)   99/   C8817 :                     ;	Voice $00
(1)  100/   C8817 :                     ;	$3A
(1)  101/   C8817 :                     ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
(1)  102/   C8817 :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
(1)  103/   C8817 : (MACRO)             	smpsVcAlgorithm     $02
(1)  103/   C8817 : =$2                 vcAlgorithm set $02
(1)  104/   C8817 : (MACRO)             	smpsVcFeedback      $07
(1)  104/   C8817 : =$7                 vcFeedback set $07
(1)  105/   C8817 : (MACRO)             	smpsVcUnusedBits    $00
(1)  105/   C8817 : =$0                 vcUnusedBits set $00
(1)  105/   C8817 : =$0                 vcD1R1Unk set 0
(1)  105/   C8817 : =$0                 vcD1R2Unk set 0
(1)  105/   C8817 : =$0                 vcD1R3Unk set 0
(1)  105/   C8817 : =$0                 vcD1R4Unk set 0
(1)  106/   C8817 : (MACRO)             	smpsVcDetune        $00, $05, $00, $05
(1)  106/   C8817 : =$0                 vcDT1 set $00
(1)  106/   C8817 : =$5                 vcDT2 set $05
(1)  106/   C8817 : =$0                 vcDT3 set $00
(1)  106/   C8817 : =$5                 vcDT4 set $05
(1)  107/   C8817 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $01
(1)  107/   C8817 : =$2                 vcCF1 set $02
(1)  107/   C8817 : =$1                 vcCF2 set $01
(1)  107/   C8817 : =$8                 vcCF3 set $08
(1)  107/   C8817 : =$1                 vcCF4 set $01
(1)  108/   C8817 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  108/   C8817 : =$0                 vcRS1 set $00
(1)  108/   C8817 : =$0                 vcRS2 set $00
(1)  108/   C8817 : =$0                 vcRS3 set $00
(1)  108/   C8817 : =$0                 vcRS4 set $00
(1)  109/   C8817 : (MACRO)             	smpsVcAttackRate    $10, $1E, $1E, $1E
(1)  109/   C8817 : =$10                vcAR1 set $10
(1)  109/   C8817 : =$1E                vcAR2 set $1E
(1)  109/   C8817 : =$1E                vcAR3 set $1E
(1)  109/   C8817 : =$1E                vcAR4 set $1E
(1)  110/   C8817 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  110/   C8817 : =$0                 vcAM1 set $00<<5
(1)  110/   C8817 : =$0                 vcAM2 set $00<<5
(1)  110/   C8817 : =$0                 vcAM3 set $00<<5
(1)  110/   C8817 : =$0                 vcAM4 set $00<<5
(1)  111/   C8817 : (MACRO)             	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1)  111/   C8817 : =$F                 vcD1R1 set $0F
(1)  111/   C8817 : =$1F                vcD1R2 set $1F
(1)  111/   C8817 : =$1F                vcD1R3 set $1F
(1)  111/   C8817 : =$1F                vcD1R4 set $1F
(1)  112/   C8817 : (MACRO)             	smpsVcDecayRate2    $02, $00, $00, $00
(1)  112/   C8817 : =$2                 vcD2R1 set $02
(1)  112/   C8817 : =$0                 vcD2R2 set $00
(1)  112/   C8817 : =$0                 vcD2R3 set $00
(1)  112/   C8817 : =$0                 vcD2R4 set $00
(1)  113/   C8817 : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1)  113/   C8817 : =$1                 vcDL1 set $01
(1)  113/   C8817 : =$0                 vcDL2 set $00
(1)  113/   C8817 : =$0                 vcDL3 set $00
(1)  113/   C8817 : =$0                 vcDL4 set $00
(1)  114/   C8817 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  114/   C8817 : =$F                 vcRR1 set $0F
(1)  114/   C8817 : =$F                 vcRR2 set $0F
(1)  114/   C8817 : =$F                 vcRR3 set $0F
(1)  114/   C8817 : =$F                 vcRR4 set $0F
(1)  115/   C8817 : (MACRO)             	smpsVcTotalLevel    $01, $22, $24, $18
(1)  115/   C8817 : =$1                 vcTL1 set $01
(1)  115/   C8817 : =$22                vcTL2 set $22
(1)  115/   C8817 : =$24                vcTL3 set $24
(1)  115/   C8817 : =$18                vcTL4 set $18
(1)  115/   C8817 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  115/   C8818 :                     ;   0     1     2     3     4     5     6     7
(1)  115/   C8818 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  115/   C8818 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  115/   C8818 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  115/   C8818 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  115/   C8818 : =$80                vcTLMask1 set $80
(1)  115/   C8818 :                     
(1)  115/   C8818 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  115/   C8818 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  115/   C8818 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  115/   C8818 : =$80                vcTLMask1 set $80
(1)  115/   C8818 : =$1                 vcTL1 set vcTL1&$7F
(1)  115/   C8818 : =$22                vcTL2 set vcTL2&$7F
(1)  115/   C8818 : =$24                vcTL3 set vcTL3&$7F
(1)  115/   C8818 : =$18                vcTL4 set vcTL4&$7F
(1)  115/   C8818 :                     
(1)  115/   C8818 : 5108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  115/   C881C : 1E1E 1E10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  115/   C8820 : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  115/   C8824 : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  115/   C8828 : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  115/   C882C : 1824 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  116/   C8830 :                     
(1)  117/   C8830 :                     ;	Voice $01
(1)  118/   C8830 :                     ;	$3B
(1)  119/   C8830 :                     ;	$52, $31, $31, $51, 	$12, $14, $12, $14, 	$0D, $00, $0D, $02
(1)  120/   C8830 :                     ;	$00, $00, $00, $01, 	$4F, $0F, $5F, $3F, 	$1E, $18, $2D, $80
(1)  121/   C8830 : (MACRO)             	smpsVcAlgorithm     $03
(1)  121/   C8830 : =$3                 vcAlgorithm set $03
(1)  122/   C8830 : (MACRO)             	smpsVcFeedback      $07
(1)  122/   C8830 : =$7                 vcFeedback set $07
(1)  123/   C8830 : (MACRO)             	smpsVcUnusedBits    $00
(1)  123/   C8830 : =$0                 vcUnusedBits set $00
(1)  123/   C8830 : =$0                 vcD1R1Unk set 0
(1)  123/   C8830 : =$0                 vcD1R2Unk set 0
(1)  123/   C8830 : =$0                 vcD1R3Unk set 0
(1)  123/   C8830 : =$0                 vcD1R4Unk set 0
(1)  124/   C8830 : (MACRO)             	smpsVcDetune        $05, $03, $03, $05
(1)  124/   C8830 : =$5                 vcDT1 set $05
(1)  124/   C8830 : =$3                 vcDT2 set $03
(1)  124/   C8830 : =$3                 vcDT3 set $03
(1)  124/   C8830 : =$5                 vcDT4 set $05
(1)  125/   C8830 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $02
(1)  125/   C8830 : =$1                 vcCF1 set $01
(1)  125/   C8830 : =$1                 vcCF2 set $01
(1)  125/   C8830 : =$1                 vcCF3 set $01
(1)  125/   C8830 : =$2                 vcCF4 set $02
(1)  126/   C8830 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  126/   C8830 : =$0                 vcRS1 set $00
(1)  126/   C8830 : =$0                 vcRS2 set $00
(1)  126/   C8830 : =$0                 vcRS3 set $00
(1)  126/   C8830 : =$0                 vcRS4 set $00
(1)  127/   C8830 : (MACRO)             	smpsVcAttackRate    $14, $12, $14, $12
(1)  127/   C8830 : =$14                vcAR1 set $14
(1)  127/   C8830 : =$12                vcAR2 set $12
(1)  127/   C8830 : =$14                vcAR3 set $14
(1)  127/   C8830 : =$12                vcAR4 set $12
(1)  128/   C8830 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  128/   C8830 : =$0                 vcAM1 set $00<<5
(1)  128/   C8830 : =$0                 vcAM2 set $00<<5
(1)  128/   C8830 : =$0                 vcAM3 set $00<<5
(1)  128/   C8830 : =$0                 vcAM4 set $00<<5
(1)  129/   C8830 : (MACRO)             	smpsVcDecayRate1    $02, $0D, $00, $0D
(1)  129/   C8830 : =$2                 vcD1R1 set $02
(1)  129/   C8830 : =$D                 vcD1R2 set $0D
(1)  129/   C8830 : =$0                 vcD1R3 set $00
(1)  129/   C8830 : =$D                 vcD1R4 set $0D
(1)  130/   C8830 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1)  130/   C8830 : =$1                 vcD2R1 set $01
(1)  130/   C8830 : =$0                 vcD2R2 set $00
(1)  130/   C8830 : =$0                 vcD2R3 set $00
(1)  130/   C8830 : =$0                 vcD2R4 set $00
(1)  131/   C8830 : (MACRO)             	smpsVcDecayLevel    $03, $05, $00, $04
(1)  131/   C8830 : =$3                 vcDL1 set $03
(1)  131/   C8830 : =$5                 vcDL2 set $05
(1)  131/   C8830 : =$0                 vcDL3 set $00
(1)  131/   C8830 : =$4                 vcDL4 set $04
(1)  132/   C8830 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  132/   C8830 : =$F                 vcRR1 set $0F
(1)  132/   C8830 : =$F                 vcRR2 set $0F
(1)  132/   C8830 : =$F                 vcRR3 set $0F
(1)  132/   C8830 : =$F                 vcRR4 set $0F
(1)  133/   C8830 : (MACRO)             	smpsVcTotalLevel    $00, $2D, $18, $1E
(1)  133/   C8830 : =$0                 vcTL1 set $00
(1)  133/   C8830 : =$2D                vcTL2 set $2D
(1)  133/   C8830 : =$18                vcTL3 set $18
(1)  133/   C8830 : =$1E                vcTL4 set $1E
(1)  133/   C8830 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  133/   C8831 :                     ;   0     1     2     3     4     5     6     7
(1)  133/   C8831 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  133/   C8831 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  133/   C8831 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  133/   C8831 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  133/   C8831 : =$80                vcTLMask1 set $80
(1)  133/   C8831 :                     
(1)  133/   C8831 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  133/   C8831 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  133/   C8831 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  133/   C8831 : =$80                vcTLMask1 set $80
(1)  133/   C8831 : =$0                 vcTL1 set vcTL1&$7F
(1)  133/   C8831 : =$2D                vcTL2 set vcTL2&$7F
(1)  133/   C8831 : =$18                vcTL3 set vcTL3&$7F
(1)  133/   C8831 : =$1E                vcTL4 set vcTL4&$7F
(1)  133/   C8831 :                     
(1)  133/   C8831 : 5231 3151                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  133/   C8835 : 1214 1214                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  133/   C8839 : 0D00 0D02                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  133/   C883D : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  133/   C8841 : 4F0F 5F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  133/   C8845 : 1E18 2D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  134/   C8849 :                     
(1)  135/   C8849 :                     ;	Voice $02
(1)  136/   C8849 :                     ;	$3A
(1)  137/   C8849 :                     ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
(1)  138/   C8849 :                     ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
(1)  139/   C8849 : (MACRO)             	smpsVcAlgorithm     $02
(1)  139/   C8849 : =$2                 vcAlgorithm set $02
(1)  140/   C8849 : (MACRO)             	smpsVcFeedback      $07
(1)  140/   C8849 : =$7                 vcFeedback set $07
(1)  141/   C8849 : (MACRO)             	smpsVcUnusedBits    $00
(1)  141/   C8849 : =$0                 vcUnusedBits set $00
(1)  141/   C8849 : =$0                 vcD1R1Unk set 0
(1)  141/   C8849 : =$0                 vcD1R2Unk set 0
(1)  141/   C8849 : =$0                 vcD1R3Unk set 0
(1)  141/   C8849 : =$0                 vcD1R4Unk set 0
(1)  142/   C8849 : (MACRO)             	smpsVcDetune        $03, $01, $03, $06
(1)  142/   C8849 : =$3                 vcDT1 set $03
(1)  142/   C8849 : =$1                 vcDT2 set $01
(1)  142/   C8849 : =$3                 vcDT3 set $03
(1)  142/   C8849 : =$6                 vcDT4 set $06
(1)  143/   C8849 : (MACRO)             	smpsVcCoarseFreq    $01, $04, $0C, $01
(1)  143/   C8849 : =$1                 vcCF1 set $01
(1)  143/   C8849 : =$4                 vcCF2 set $04
(1)  143/   C8849 : =$C                 vcCF3 set $0C
(1)  143/   C8849 : =$1                 vcCF4 set $01
(1)  144/   C8849 : (MACRO)             	smpsVcRateScale     $03, $02, $03, $02
(1)  144/   C8849 : =$3                 vcRS1 set $03
(1)  144/   C8849 : =$2                 vcRS2 set $02
(1)  144/   C8849 : =$3                 vcRS3 set $03
(1)  144/   C8849 : =$2                 vcRS4 set $02
(1)  145/   C8849 : (MACRO)             	smpsVcAttackRate    $1A, $1C, $1B, $1C
(1)  145/   C8849 : =$1A                vcAR1 set $1A
(1)  145/   C8849 : =$1C                vcAR2 set $1C
(1)  145/   C8849 : =$1B                vcAR3 set $1B
(1)  145/   C8849 : =$1C                vcAR4 set $1C
(1)  146/   C8849 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  146/   C8849 : =$0                 vcAM1 set $00<<5
(1)  146/   C8849 : =$0                 vcAM2 set $00<<5
(1)  146/   C8849 : =$0                 vcAM3 set $00<<5
(1)  146/   C8849 : =$0                 vcAM4 set $00<<5
(1)  147/   C8849 : (MACRO)             	smpsVcDecayRate1    $03, $04, $09, $04
(1)  147/   C8849 : =$3                 vcD1R1 set $03
(1)  147/   C8849 : =$4                 vcD1R2 set $04
(1)  147/   C8849 : =$9                 vcD1R3 set $09
(1)  147/   C8849 : =$4                 vcD1R4 set $04
(1)  148/   C8849 : (MACRO)             	smpsVcDecayRate2    $00, $03, $01, $03
(1)  148/   C8849 : =$0                 vcD2R1 set $00
(1)  148/   C8849 : =$3                 vcD2R2 set $03
(1)  148/   C8849 : =$1                 vcD2R3 set $01
(1)  148/   C8849 : =$3                 vcD2R4 set $03
(1)  149/   C8849 : (MACRO)             	smpsVcDecayLevel    $0A, $00, $00, $01
(1)  149/   C8849 : =$A                 vcDL1 set $0A
(1)  149/   C8849 : =$0                 vcDL2 set $00
(1)  149/   C8849 : =$0                 vcDL3 set $00
(1)  149/   C8849 : =$1                 vcDL4 set $01
(1)  150/   C8849 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  150/   C8849 : =$F                 vcRR1 set $0F
(1)  150/   C8849 : =$F                 vcRR2 set $0F
(1)  150/   C8849 : =$F                 vcRR3 set $0F
(1)  150/   C8849 : =$F                 vcRR4 set $0F
(1)  151/   C8849 : (MACRO)             	smpsVcTotalLevel    $00, $31, $47, $21
(1)  151/   C8849 : =$0                 vcTL1 set $00
(1)  151/   C8849 : =$31                vcTL2 set $31
(1)  151/   C8849 : =$47                vcTL3 set $47
(1)  151/   C8849 : =$21                vcTL4 set $21
(1)  151/   C8849 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  151/   C884A :                     ;   0     1     2     3     4     5     6     7
(1)  151/   C884A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  151/   C884A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  151/   C884A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  151/   C884A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  151/   C884A : =$80                vcTLMask1 set $80
(1)  151/   C884A :                     
(1)  151/   C884A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  151/   C884A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  151/   C884A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  151/   C884A : =$80                vcTLMask1 set $80
(1)  151/   C884A : =$0                 vcTL1 set vcTL1&$7F
(1)  151/   C884A : =$31                vcTL2 set vcTL2&$7F
(1)  151/   C884A : =$47                vcTL3 set vcTL3&$7F
(1)  151/   C884A : =$21                vcTL4 set vcTL4&$7F
(1)  151/   C884A :                     
(1)  151/   C884A : 613C 1431                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  151/   C884E : 9CDB 9CDA                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  151/   C8852 : 0409 0403                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  151/   C8856 : 0301 0300                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  151/   C885A : 1F0F 0FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  151/   C885E : 2147 3180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  152/   C8862 :                     
(1)  153/   C8862 :                     ;	Voice $03
(1)  154/   C8862 :                     ;	$1C
(1)  155/   C8862 :                     ;	$6F, $01, $21, $71, 	$9F, $DB, $9E, $5E, 	$0F, $07, $06, $07
(1)  156/   C8862 :                     ;	$08, $0A, $0B, $00, 	$8F, $8F, $FF, $FF, 	$18, $8D, $26, $80
(1)  157/   C8862 : (MACRO)             	smpsVcAlgorithm     $04
(1)  157/   C8862 : =$4                 vcAlgorithm set $04
(1)  158/   C8862 : (MACRO)             	smpsVcFeedback      $03
(1)  158/   C8862 : =$3                 vcFeedback set $03
(1)  159/   C8862 : (MACRO)             	smpsVcUnusedBits    $00
(1)  159/   C8862 : =$0                 vcUnusedBits set $00
(1)  159/   C8862 : =$0                 vcD1R1Unk set 0
(1)  159/   C8862 : =$0                 vcD1R2Unk set 0
(1)  159/   C8862 : =$0                 vcD1R3Unk set 0
(1)  159/   C8862 : =$0                 vcD1R4Unk set 0
(1)  160/   C8862 : (MACRO)             	smpsVcDetune        $07, $02, $00, $06
(1)  160/   C8862 : =$7                 vcDT1 set $07
(1)  160/   C8862 : =$2                 vcDT2 set $02
(1)  160/   C8862 : =$0                 vcDT3 set $00
(1)  160/   C8862 : =$6                 vcDT4 set $06
(1)  161/   C8862 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $0F
(1)  161/   C8862 : =$1                 vcCF1 set $01
(1)  161/   C8862 : =$1                 vcCF2 set $01
(1)  161/   C8862 : =$1                 vcCF3 set $01
(1)  161/   C8862 : =$F                 vcCF4 set $0F
(1)  162/   C8862 : (MACRO)             	smpsVcRateScale     $01, $02, $03, $02
(1)  162/   C8862 : =$1                 vcRS1 set $01
(1)  162/   C8862 : =$2                 vcRS2 set $02
(1)  162/   C8862 : =$3                 vcRS3 set $03
(1)  162/   C8862 : =$2                 vcRS4 set $02
(1)  163/   C8862 : (MACRO)             	smpsVcAttackRate    $1E, $1E, $1B, $1F
(1)  163/   C8862 : =$1E                vcAR1 set $1E
(1)  163/   C8862 : =$1E                vcAR2 set $1E
(1)  163/   C8862 : =$1B                vcAR3 set $1B
(1)  163/   C8862 : =$1F                vcAR4 set $1F
(1)  164/   C8862 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  164/   C8862 : =$0                 vcAM1 set $00<<5
(1)  164/   C8862 : =$0                 vcAM2 set $00<<5
(1)  164/   C8862 : =$0                 vcAM3 set $00<<5
(1)  164/   C8862 : =$0                 vcAM4 set $00<<5
(1)  165/   C8862 : (MACRO)             	smpsVcDecayRate1    $07, $06, $07, $0F
(1)  165/   C8862 : =$7                 vcD1R1 set $07
(1)  165/   C8862 : =$6                 vcD1R2 set $06
(1)  165/   C8862 : =$7                 vcD1R3 set $07
(1)  165/   C8862 : =$F                 vcD1R4 set $0F
(1)  166/   C8862 : (MACRO)             	smpsVcDecayRate2    $00, $0B, $0A, $08
(1)  166/   C8862 : =$0                 vcD2R1 set $00
(1)  166/   C8862 : =$B                 vcD2R2 set $0B
(1)  166/   C8862 : =$A                 vcD2R3 set $0A
(1)  166/   C8862 : =$8                 vcD2R4 set $08
(1)  167/   C8862 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $08, $08
(1)  167/   C8862 : =$F                 vcDL1 set $0F
(1)  167/   C8862 : =$F                 vcDL2 set $0F
(1)  167/   C8862 : =$8                 vcDL3 set $08
(1)  167/   C8862 : =$8                 vcDL4 set $08
(1)  168/   C8862 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  168/   C8862 : =$F                 vcRR1 set $0F
(1)  168/   C8862 : =$F                 vcRR2 set $0F
(1)  168/   C8862 : =$F                 vcRR3 set $0F
(1)  168/   C8862 : =$F                 vcRR4 set $0F
(1)  169/   C8862 : (MACRO)             	smpsVcTotalLevel    $00, $26, $0D, $18
(1)  169/   C8862 : =$0                 vcTL1 set $00
(1)  169/   C8862 : =$26                vcTL2 set $26
(1)  169/   C8862 : =$D                 vcTL3 set $0D
(1)  169/   C8862 : =$18                vcTL4 set $18
(1)  169/   C8862 : 1C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  169/   C8863 :                     ;   0     1     2     3     4     5     6     7
(1)  169/   C8863 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  169/   C8863 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  169/   C8863 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  169/   C8863 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  169/   C8863 : =$80                vcTLMask1 set $80
(1)  169/   C8863 :                     
(1)  169/   C8863 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  169/   C8863 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  169/   C8863 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  169/   C8863 : =$80                vcTLMask1 set $80
(1)  169/   C8863 : =$0                 vcTL1 set vcTL1&$7F
(1)  169/   C8863 : =$26                vcTL2 set vcTL2&$7F
(1)  169/   C8863 : =$D                 vcTL3 set vcTL3&$7F
(1)  169/   C8863 : =$18                vcTL4 set vcTL4&$7F
(1)  169/   C8863 :                     
(1)  169/   C8863 : 6F01 2171                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  169/   C8867 : 9FDB 9E5E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  169/   C886B : 0F07 0607                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  169/   C886F : 080A 0B00                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  169/   C8873 : 8F8F FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  169/   C8877 : 188D 2680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  170/   C887B :                     
(1)  171/   C887B :                     
   70/   C887B :                        Music_1D:	include		"music-improved/9D - Got Emerald.asm"
(1)    1/   C887B :                     Emerald_Header:
(1)    2/   C887B : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C887B :                     
(1)    2/   C887B : =$2                 SourceDriver set 2
(1)    2/   C887B :                     
(1)    2/   C887B : =$0                 SourceSMPS2ASM set 0
(1)    2/   C887B :                     
(1)    2/   C887B : =$C887B             songStart set *
(1)    2/   C887B :                     
(1)    2/   C887B :                     
(1)    3/   C887B : (MACRO)             	smpsHeaderVoice     Emerald_Voices
(1)    3/   C887B : 1389                                dc.w    z80_ptr(EMERALD_VOICES)
(1)    4/   C887D : (MACRO)             	smpsHeaderChan      $07, $03
(1)    4/   C887D : 0703                        dc.b    $07,$03
(1)    5/   C887F : (MACRO)             	smpsHeaderTempo     $01, $D5
(1)    5/   C887F : 01                          dc.b    $01
(1)    5/   C8880 :  (MACRO-2)                  convertMainTempoMod $D5
(1)    5/   C8880 : 2B                                          dc.b    s2TempotoS3($D5)
(1)    6/   C8881 :                     
(1)    7/   C8881 : (MACRO)             	smpsHeaderDAC       Emerald_DAC
(1)    7/   C8881 :  (MACRO-2)                  CheckedChannelPointer EMERALD_DAC
(1)    7/   C8881 : 1289                                dc.w    z80_ptr(EMERALD_DAC)
(1)    7/   C8883 : 0000                                dc.w    $00
(1)    8/   C8885 : (MACRO)             	smpsHeaderFM        Emerald_FM1,	$F4, $08
(1)    8/   C8885 :  (MACRO-2)                  CheckedChannelPointer EMERALD_FM1
(1)    8/   C8885 : B188                                dc.w    z80_ptr(EMERALD_FM1)
(1)    8/   C8887 : F408                        dc.b    $F4,$08
(1)    9/   C8889 : (MACRO)             	smpsHeaderFM        Emerald_FM2,	$F4, $08
(1)    9/   C8889 :  (MACRO-2)                  CheckedChannelPointer EMERALD_FM2
(1)    9/   C8889 : BD88                                dc.w    z80_ptr(EMERALD_FM2)
(1)    9/   C888B : F408                        dc.b    $F4,$08
(1)   10/   C888D : (MACRO)             	smpsHeaderFM        Emerald_FM3,	$F4, $07
(1)   10/   C888D :  (MACRO-2)                  CheckedChannelPointer EMERALD_FM3
(1)   10/   C888D : AF88                                dc.w    z80_ptr(EMERALD_FM3)
(1)   10/   C888F : F407                        dc.b    $F4,$07
(1)   11/   C8891 : (MACRO)             	smpsHeaderFM        Emerald_FM4,	$F4, $16
(1)   11/   C8891 :  (MACRO-2)                  CheckedChannelPointer EMERALD_FM4
(1)   11/   C8891 : C988                                dc.w    z80_ptr(EMERALD_FM4)
(1)   11/   C8893 : F416                        dc.b    $F4,$16
(1)   12/   C8895 : (MACRO)             	smpsHeaderFM        Emerald_FM5,	$F4, $16
(1)   12/   C8895 :  (MACRO-2)                  CheckedChannelPointer EMERALD_FM5
(1)   12/   C8895 : D788                                dc.w    z80_ptr(EMERALD_FM5)
(1)   12/   C8897 : F416                        dc.b    $F4,$16
(1)   13/   C8899 : (MACRO)             	smpsHeaderFM        Emerald_FM6,	$F4, $16
(1)   13/   C8899 :  (MACRO-2)                  CheckedChannelPointer EMERALD_FM6
(1)   13/   C8899 : E588                                dc.w    z80_ptr(EMERALD_FM6)
(1)   13/   C889B : F416                        dc.b    $F4,$16
(1)   14/   C889D : (MACRO)             	smpsHeaderPSG       Emerald_PSG1,	$F4, $02, $00, fTone_04
(1)   14/   C889D :  (MACRO-2)                  CheckedChannelPointer EMERALD_PSG1
(1)   14/   C889D : 0289                                dc.w    z80_ptr(EMERALD_PSG1)
(1)   14/   C889F :  (MACRO-2)                  PSGPitchConvert $F4
(1)   14/   C889F : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)   14/   C88A0 : 0200 04                     dc.b    $02,$00,FTONE_04
(1)   15/   C88A3 : (MACRO)             	smpsHeaderPSG       Emerald_PSG2,	$F4, $02, $00, fTone_05
(1)   15/   C88A3 :  (MACRO-2)                  CheckedChannelPointer EMERALD_PSG2
(1)   15/   C88A3 : F388                                dc.w    z80_ptr(EMERALD_PSG2)
(1)   15/   C88A5 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   15/   C88A5 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)   15/   C88A6 : 0200 05                     dc.b    $02,$00,FTONE_05
(1)   16/   C88A9 : (MACRO)             	smpsHeaderPSG       Emerald_PSG3,	$F4, $00, $00, fTone_04
(1)   16/   C88A9 :  (MACRO-2)                  CheckedChannelPointer EMERALD_PSG3
(1)   16/   C88A9 : 1289                                dc.w    z80_ptr(EMERALD_PSG3)
(1)   16/   C88AB :  (MACRO-2)                  PSGPitchConvert $F4
(1)   16/   C88AB : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)   16/   C88AC : 0000 04                     dc.b    $00,$00,FTONE_04
(1)   17/   C88AF :                     
(1)   18/   C88AF :                     ; FM3 Data
(1)   19/   C88AF :                     Emerald_FM3:
(1)   20/   C88AF : (MACRO)             	smpsAlterNote       $02
(1)   20/   C88AF :  (MACRO-2)                  smpsDetune      $02
(1)   20/   C88AF : E102                        dc.b    $E1,$02
(1)   21/   C88B1 :                     
(1)   22/   C88B1 :                     ; FM1 Data
(1)   23/   C88B1 :                     Emerald_FM1:
(1)   24/   C88B1 : (MACRO)             	smpsSetvoice        $00
(1)   24/   C88B1 :  (MACRO-2)                  smpsFMvoice $00
(1)   24/   C88B1 : EF00                                dc.b    $EF,$00
(1)   25/   C88B3 : C106 C4C9 CD0C C9D0 	dc.b	nE5, $06, nG5, nC6, nE6, $0C, nC6, nG6, $2A
            C88BB : 2A               
(1)   26/   C88BC : (MACRO)             	smpsStop
(1)   26/   C88BC : F2                          dc.b    $F2
(1)   27/   C88BD :                     
(1)   28/   C88BD :                     ; FM2 Data
(1)   29/   C88BD :                     Emerald_FM2:
(1)   30/   C88BD : (MACRO)             	smpsSetvoice        $00
(1)   30/   C88BD :  (MACRO-2)                  smpsFMvoice $00
(1)   30/   C88BD : EF00                                dc.b    $EF,$00
(1)   31/   C88BF : BD06 C1C4 C90C C6CB 	dc.b	nC5, $06, nE5, nG5, nC6, $0C, nA5, nD6, $2A
            C88C7 : 2A               
(1)   32/   C88C8 : (MACRO)             	smpsStop
(1)   32/   C88C8 : F2                          dc.b    $F2
(1)   33/   C88C9 :                     
(1)   34/   C88C9 :                     ; FM4 Data
(1)   35/   C88C9 :                     Emerald_FM4:
(1)   36/   C88C9 : (MACRO)             	smpsSetvoice        $01
(1)   36/   C88C9 :  (MACRO-2)                  smpsFMvoice $01
(1)   36/   C88C9 : EF01                                dc.b    $EF,$01
(1)   37/   C88CB : C10C C106 C406 80C4 	dc.b	nE5, $0C, nE5, $06, nG5, $06, nRst, nG5, nRst, nC6, $2A
            C88D3 : 80C9 2A            
(1)   38/   C88D6 : (MACRO)             	smpsStop
(1)   38/   C88D6 : F2                          dc.b    $F2
(1)   39/   C88D7 :                     
(1)   40/   C88D7 :                     ; FM5 Data
(1)   41/   C88D7 :                     Emerald_FM5:
(1)   42/   C88D7 : (MACRO)             	smpsSetvoice        $01
(1)   42/   C88D7 :  (MACRO-2)                  smpsFMvoice $01
(1)   42/   C88D7 : EF01                                dc.b    $EF,$01
(1)   43/   C88D9 : C90C C906 CD06 80CD 	dc.b	nC6, $0C, nC6, $06, nE6, $06, nRst, nE6, nRst, nG6, $2A
            C88E1 : 80D0 2A            
(1)   44/   C88E4 : (MACRO)             	smpsStop
(1)   44/   C88E4 : F2                          dc.b    $F2
(1)   45/   C88E5 :                     
(1)   46/   C88E5 :                     ; FM6 Data
(1)   47/   C88E5 :                     Emerald_FM6:
(1)   48/   C88E5 : (MACRO)             	smpsSetvoice        $01
(1)   48/   C88E5 :  (MACRO-2)                  smpsFMvoice $01
(1)   48/   C88E5 : EF01                                dc.b    $EF,$01
(1)   49/   C88E7 : C40C C406 C906 80C9 	dc.b	nG5, $0C, nG5, $06, nC6, $06, nRst, nC6, nRst, nE6, $2A
            C88EF : 80CD 2A            
(1)   50/   C88F2 : (MACRO)             	smpsStop
(1)   50/   C88F2 : F2                          dc.b    $F2
(1)   51/   C88F3 :                     
(1)   52/   C88F3 :                     ; PSG2 Data
(1)   53/   C88F3 :                     Emerald_PSG2:
(1)   54/   C88F3 : 802D                	dc.b	nRst, $2D
(1)   55/   C88F5 :                     
(1)   56/   C88F5 :                     Emerald_Loop01:
(1)   57/   C88F5 : C406 C2C1 BF        	dc.b	nG5, $06, nF5, nE5, nD5
(1)   58/   C88FA : (MACRO)             	smpsPSGAlterVol     $03
(1)   58/   C88FA : EC03                        dc.b    $EC,$03
(1)   59/   C88FC : (MACRO)             	smpsLoop            $00, $04, Emerald_Loop01
(1)   59/   C88FC : F7                          dc.b    $F7
(1)   59/   C88FD : 0004                        dc.b    $00,$04
(1)   59/   C88FF : F588                                dc.w    z80_ptr(EMERALD_LOOP01)
(1)   60/   C8901 : (MACRO)             	smpsStop
(1)   60/   C8901 : F2                          dc.b    $F2
(1)   61/   C8902 :                     
(1)   62/   C8902 :                     ; PSG1 Data
(1)   63/   C8902 :                     Emerald_PSG1:
(1)   64/   C8902 : (MACRO)             	smpsNop             $01
(1)   65/   C8902 : 8002 802D           	dc.b	nRst, $02, nRst, $2D
(1)   66/   C8906 :                     
(1)   67/   C8906 :                     Emerald_Loop00:
(1)   68/   C8906 : C406 C2C1 BF        	dc.b	nG5, $06, nF5, nE5, nD5
(1)   69/   C890B : (MACRO)             	smpsPSGAlterVol     $03
(1)   69/   C890B : EC03                        dc.b    $EC,$03
(1)   70/   C890D : (MACRO)             	smpsLoop            $00, $04, Emerald_Loop00
(1)   70/   C890D : F7                          dc.b    $F7
(1)   70/   C890E : 0004                        dc.b    $00,$04
(1)   70/   C8910 : 0689                                dc.w    z80_ptr(EMERALD_LOOP00)
(1)   71/   C8912 :                     
(1)   72/   C8912 :                     ; DAC Data
(1)   73/   C8912 :                     Emerald_DAC:
(1)   74/   C8912 :                     ; PSG3 Data
(1)   75/   C8912 :                     Emerald_PSG3:
(1)   76/   C8912 : (MACRO)             	smpsNop             $01
(1)   77/   C8912 : (MACRO)             	smpsStop
(1)   77/   C8912 : F2                          dc.b    $F2
(1)   78/   C8913 :                     
(1)   79/   C8913 :                     Emerald_Voices:
(1)   80/   C8913 :                     ;	Voice $00
(1)   81/   C8913 :                     ;	$04
(1)   82/   C8913 :                     ;	$35, $72, $54, $46, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
(1)   83/   C8913 :                     ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $14, $1D, $80
(1)   84/   C8913 : (MACRO)             	smpsVcAlgorithm     $04
(1)   84/   C8913 : =$4                 vcAlgorithm set $04
(1)   85/   C8913 : (MACRO)             	smpsVcFeedback      $00
(1)   85/   C8913 : =$0                 vcFeedback set $00
(1)   86/   C8913 : (MACRO)             	smpsVcUnusedBits    $00
(1)   86/   C8913 : =$0                 vcUnusedBits set $00
(1)   86/   C8913 : =$0                 vcD1R1Unk set 0
(1)   86/   C8913 : =$0                 vcD1R2Unk set 0
(1)   86/   C8913 : =$0                 vcD1R3Unk set 0
(1)   86/   C8913 : =$0                 vcD1R4Unk set 0
(1)   87/   C8913 : (MACRO)             	smpsVcDetune        $04, $05, $07, $03
(1)   87/   C8913 : =$4                 vcDT1 set $04
(1)   87/   C8913 : =$5                 vcDT2 set $05
(1)   87/   C8913 : =$7                 vcDT3 set $07
(1)   87/   C8913 : =$3                 vcDT4 set $03
(1)   88/   C8913 : (MACRO)             	smpsVcCoarseFreq    $06, $04, $02, $05
(1)   88/   C8913 : =$6                 vcCF1 set $06
(1)   88/   C8913 : =$4                 vcCF2 set $04
(1)   88/   C8913 : =$2                 vcCF3 set $02
(1)   88/   C8913 : =$5                 vcCF4 set $05
(1)   89/   C8913 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   89/   C8913 : =$0                 vcRS1 set $00
(1)   89/   C8913 : =$0                 vcRS2 set $00
(1)   89/   C8913 : =$0                 vcRS3 set $00
(1)   89/   C8913 : =$0                 vcRS4 set $00
(1)   90/   C8913 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   90/   C8913 : =$1F                vcAR1 set $1F
(1)   90/   C8913 : =$1F                vcAR2 set $1F
(1)   90/   C8913 : =$1F                vcAR3 set $1F
(1)   90/   C8913 : =$1F                vcAR4 set $1F
(1)   91/   C8913 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   91/   C8913 : =$0                 vcAM1 set $00<<5
(1)   91/   C8913 : =$0                 vcAM2 set $00<<5
(1)   91/   C8913 : =$0                 vcAM3 set $00<<5
(1)   91/   C8913 : =$0                 vcAM4 set $00<<5
(1)   92/   C8913 : (MACRO)             	smpsVcDecayRate1    $0D, $07, $0A, $07
(1)   92/   C8913 : =$D                 vcD1R1 set $0D
(1)   92/   C8913 : =$7                 vcD1R2 set $07
(1)   92/   C8913 : =$A                 vcD1R3 set $0A
(1)   92/   C8913 : =$7                 vcD1R4 set $07
(1)   93/   C8913 : (MACRO)             	smpsVcDecayRate2    $0B, $00, $0B, $00
(1)   93/   C8913 : =$B                 vcD2R1 set $0B
(1)   93/   C8913 : =$0                 vcD2R2 set $00
(1)   93/   C8913 : =$B                 vcD2R3 set $0B
(1)   93/   C8913 : =$0                 vcD2R4 set $00
(1)   94/   C8913 : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)   94/   C8913 : =$0                 vcDL1 set $00
(1)   94/   C8913 : =$1                 vcDL2 set $01
(1)   94/   C8913 : =$0                 vcDL3 set $00
(1)   94/   C8913 : =$1                 vcDL4 set $01
(1)   95/   C8913 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   95/   C8913 : =$F                 vcRR1 set $0F
(1)   95/   C8913 : =$F                 vcRR2 set $0F
(1)   95/   C8913 : =$F                 vcRR3 set $0F
(1)   95/   C8913 : =$F                 vcRR4 set $0F
(1)   96/   C8913 : (MACRO)             	smpsVcTotalLevel    $80, $1D, $14, $23
(1)   96/   C8913 : =$80                vcTL1 set $80
(1)   96/   C8913 : =$1D                vcTL2 set $1D
(1)   96/   C8913 : =$14                vcTL3 set $14
(1)   96/   C8913 : =$23                vcTL4 set $23
(1)   96/   C8913 : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   96/   C8914 :                     ;   0     1     2     3     4     5     6     7
(1)   96/   C8914 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   96/   C8914 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   96/   C8914 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   96/   C8914 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   96/   C8914 : =$80                vcTLMask1 set $80
(1)   96/   C8914 :                     
(1)   96/   C8914 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   96/   C8914 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   96/   C8914 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   96/   C8914 : =$80                vcTLMask1 set $80
(1)   96/   C8914 : =$0                 vcTL1 set vcTL1&$7F
(1)   96/   C8914 : =$1D                vcTL2 set vcTL2&$7F
(1)   96/   C8914 : =$14                vcTL3 set vcTL3&$7F
(1)   96/   C8914 : =$23                vcTL4 set vcTL4&$7F
(1)   96/   C8914 :                     
(1)   96/   C8914 : 3572 5446                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   96/   C8918 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   96/   C891C : 070A 070D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   96/   C8920 : 000B 000B                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   96/   C8924 : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   96/   C8928 : 2394 1D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   97/   C892C :                     
(1)   98/   C892C :                     ;	Voice $01
(1)   99/   C892C :                     ;	$3C
(1)  100/   C892C :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1)  101/   C892C :                     ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
(1)  102/   C892C : (MACRO)             	smpsVcAlgorithm     $04
(1)  102/   C892C : =$4                 vcAlgorithm set $04
(1)  103/   C892C : (MACRO)             	smpsVcFeedback      $07
(1)  103/   C892C : =$7                 vcFeedback set $07
(1)  104/   C892C : (MACRO)             	smpsVcUnusedBits    $00
(1)  104/   C892C : =$0                 vcUnusedBits set $00
(1)  104/   C892C : =$0                 vcD1R1Unk set 0
(1)  104/   C892C : =$0                 vcD1R2Unk set 0
(1)  104/   C892C : =$0                 vcD1R3Unk set 0
(1)  104/   C892C : =$0                 vcD1R4Unk set 0
(1)  105/   C892C : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1)  105/   C892C : =$3                 vcDT1 set $03
(1)  105/   C892C : =$5                 vcDT2 set $05
(1)  105/   C892C : =$5                 vcDT3 set $05
(1)  105/   C892C : =$3                 vcDT4 set $03
(1)  106/   C892C : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1)  106/   C892C : =$0                 vcCF1 set $00
(1)  106/   C892C : =$0                 vcCF2 set $00
(1)  106/   C892C : =$2                 vcCF3 set $02
(1)  106/   C892C : =$1                 vcCF4 set $01
(1)  107/   C892C : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  107/   C892C : =$1                 vcRS1 set $01
(1)  107/   C892C : =$1                 vcRS2 set $01
(1)  107/   C892C : =$1                 vcRS3 set $01
(1)  107/   C892C : =$1                 vcRS4 set $01
(1)  108/   C892C : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1)  108/   C892C : =$13                vcAR1 set $13
(1)  108/   C892C : =$12                vcAR2 set $12
(1)  108/   C892C : =$13                vcAR3 set $13
(1)  108/   C892C : =$12                vcAR4 set $12
(1)  109/   C892C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  109/   C892C : =$0                 vcAM1 set $00<<5
(1)  109/   C892C : =$0                 vcAM2 set $00<<5
(1)  109/   C892C : =$0                 vcAM3 set $00<<5
(1)  109/   C892C : =$0                 vcAM4 set $00<<5
(1)  110/   C892C : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1)  110/   C892C : =$0                 vcD1R1 set $00
(1)  110/   C892C : =$8                 vcD1R2 set $08
(1)  110/   C892C : =$0                 vcD1R3 set $00
(1)  110/   C892C : =$8                 vcD1R4 set $08
(1)  111/   C892C : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1)  111/   C892C : =$0                 vcD2R1 set $00
(1)  111/   C892C : =$4                 vcD2R2 set $04
(1)  111/   C892C : =$0                 vcD2R3 set $00
(1)  111/   C892C : =$4                 vcD2R4 set $04
(1)  112/   C892C : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)  112/   C892C : =$0                 vcDL1 set $00
(1)  112/   C892C : =$1                 vcDL2 set $01
(1)  112/   C892C : =$0                 vcDL3 set $00
(1)  112/   C892C : =$1                 vcDL4 set $01
(1)  113/   C892C : (MACRO)             	smpsVcReleaseRate   $07, $00, $07, $00
(1)  113/   C892C : =$7                 vcRR1 set $07
(1)  113/   C892C : =$0                 vcRR2 set $00
(1)  113/   C892C : =$7                 vcRR3 set $07
(1)  113/   C892C : =$0                 vcRR4 set $00
(1)  114/   C892C : (MACRO)             	smpsVcTotalLevel    $80, $16, $80, $1A
(1)  114/   C892C : =$80                vcTL1 set $80
(1)  114/   C892C : =$16                vcTL2 set $16
(1)  114/   C892C : =$80                vcTL3 set $80
(1)  114/   C892C : =$1A                vcTL4 set $1A
(1)  114/   C892C : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  114/   C892D :                     ;   0     1     2     3     4     5     6     7
(1)  114/   C892D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  114/   C892D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  114/   C892D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  114/   C892D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  114/   C892D : =$80                vcTLMask1 set $80
(1)  114/   C892D :                     
(1)  114/   C892D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  114/   C892D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  114/   C892D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  114/   C892D : =$80                vcTLMask1 set $80
(1)  114/   C892D : =$0                 vcTL1 set vcTL1&$7F
(1)  114/   C892D : =$16                vcTL2 set vcTL2&$7F
(1)  114/   C892D : =$0                 vcTL3 set vcTL3&$7F
(1)  114/   C892D : =$1A                vcTL4 set vcTL4&$7F
(1)  114/   C892D :                     
(1)  114/   C892D : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  114/   C8931 : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  114/   C8935 : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  114/   C8939 : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  114/   C893D : 1007 1007                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  114/   C8941 : 1A80 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  115/   C8945 :                     
(1)  116/   C8945 :                     
   71/   C8945 :                        Music_1E:	include		"music-improved/9E - Credits.asm"
(1)    1/   C8945 :                     Credits_Header:
(1)    2/   C8945 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   C8945 :                     
(1)    2/   C8945 : =$2                 SourceDriver set 2
(1)    2/   C8945 :                     
(1)    2/   C8945 : =$0                 SourceSMPS2ASM set 0
(1)    2/   C8945 :                     
(1)    2/   C8945 : =$C8945             songStart set *
(1)    2/   C8945 :                     
(1)    2/   C8945 :                     
(1)    3/   C8945 : (MACRO)             	smpsHeaderVoice     Credits_Voices
(1)    3/   C8945 : 719C                                dc.w    z80_ptr(CREDITS_VOICES)
(1)    4/   C8947 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/   C8947 : 0603                        dc.b    $06,$03
(1)    5/   C8949 : (MACRO)             	smpsHeaderTempo     $01, $F0
(1)    5/   C8949 : 01                          dc.b    $01
(1)    5/   C894A :  (MACRO-2)                  convertMainTempoMod $F0
(1)    5/   C894A : 10                                          dc.b    s2TempotoS3($F0)
(1)    6/   C894B :                     
(1)    7/   C894B : (MACRO)             	smpsHeaderDAC       Credits_DAC
(1)    7/   C894B :  (MACRO-2)                  CheckedChannelPointer CREDITS_DAC
(1)    7/   C894B : 109A                                dc.w    z80_ptr(CREDITS_DAC)
(1)    7/   C894D : 0000                                dc.w    $00
(1)    8/   C894F : (MACRO)             	smpsHeaderFM        Credits_FM1,	$00, $0E
(1)    8/   C894F :  (MACRO-2)                  CheckedChannelPointer CREDITS_FM1
(1)    8/   C894F : 7589                                dc.w    z80_ptr(CREDITS_FM1)
(1)    8/   C8951 : 000E                        dc.b    $00,$0E
(1)    9/   C8953 : (MACRO)             	smpsHeaderFM        Credits_FM2,	$18, $0A
(1)    9/   C8953 :  (MACRO-2)                  CheckedChannelPointer CREDITS_FM2
(1)    9/   C8953 : DF8C                                dc.w    z80_ptr(CREDITS_FM2)
(1)    9/   C8955 : 180A                        dc.b    $18,$0A
(1)   10/   C8957 : (MACRO)             	smpsHeaderFM        Credits_FM3,	$00, $14
(1)   10/   C8957 :  (MACRO-2)                  CheckedChannelPointer CREDITS_FM3
(1)   10/   C8957 : E28F                                dc.w    z80_ptr(CREDITS_FM3)
(1)   10/   C8959 : 0014                        dc.b    $00,$14
(1)   11/   C895B : (MACRO)             	smpsHeaderFM        Credits_FM4,	$00, $16
(1)   11/   C895B :  (MACRO-2)                  CheckedChannelPointer CREDITS_FM4
(1)   11/   C895B : 2992                                dc.w    z80_ptr(CREDITS_FM4)
(1)   11/   C895D : 0016                        dc.b    $00,$16
(1)   12/   C895F : (MACRO)             	smpsHeaderFM        Credits_FM5,	$0C, $16
(1)   12/   C895F :  (MACRO-2)                  CheckedChannelPointer CREDITS_FM5
(1)   12/   C895F : B394                                dc.w    z80_ptr(CREDITS_FM5)
(1)   12/   C8961 : 0C16                        dc.b    $0C,$16
(1)   13/   C8963 : (MACRO)             	smpsHeaderPSG       Credits_PSG1,	$E8, $06, $00, fTone_0B
(1)   13/   C8963 :  (MACRO-2)                  CheckedChannelPointer CREDITS_PSG1
(1)   13/   C8963 : C196                                dc.w    z80_ptr(CREDITS_PSG1)
(1)   13/   C8965 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   13/   C8965 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)   13/   C8966 : 0600 0B                     dc.b    $06,$00,FTONE_0B
(1)   14/   C8969 : (MACRO)             	smpsHeaderPSG       Credits_PSG2,	$DC, $07, $00, fTone_0B
(1)   14/   C8969 :  (MACRO-2)                  CheckedChannelPointer CREDITS_PSG2
(1)   14/   C8969 : 1698                                dc.w    z80_ptr(CREDITS_PSG2)
(1)   14/   C896B :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/   C896B : E8                                  dc.b    ($DC+psgdelta)&$FF
(1)   14/   C896C : 0700 0B                     dc.b    $07,$00,FTONE_0B
(1)   15/   C896F : (MACRO)             	smpsHeaderPSG       Credits_PSG3,	$00, $02, $00, fTone_03
(1)   15/   C896F :  (MACRO-2)                  CheckedChannelPointer CREDITS_PSG3
(1)   15/   C896F : 3C99                                dc.w    z80_ptr(CREDITS_PSG3)
(1)   15/   C8971 :  (MACRO-2)                  PSGPitchConvert $00
(1)   15/   C8971 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   15/   C8972 : 0200 03                     dc.b    $02,$00,FTONE_03
(1)   16/   C8975 :                     
(1)   17/   C8975 :                     ; FM1 Data
(1)   18/   C8975 :                     Credits_FM1:
(1)   19/   C8975 : (MACRO)             	smpsAlterPitch      $F4
(1)   19/   C8975 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   19/   C8975 : FBF4                                dc.b    $FB,$F4
(1)   20/   C8977 : (MACRO)             	smpsAlterVol        $FE
(1)   20/   C8977 : E6FE                        dc.b    $E6,$FE
(1)   21/   C8979 : (MACRO)             	smpsCall            Credits_Call03
(1)   21/   C8979 : F8                          dc.b    $F8
(1)   21/   C897A : B48C                                dc.w    z80_ptr(CREDITS_CALL03)
(1)   22/   C897C : (MACRO)             	smpsAlterPitch      $0C
(1)   22/   C897C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   22/   C897C : FB0C                                dc.b    $FB,$0C
(1)   23/   C897E : (MACRO)             	smpsAlterVol        $02
(1)   23/   C897E : E602                        dc.b    $E6,$02
(1)   24/   C8980 :                     
(1)   25/   C8980 :                     Credits_Loop24:
(1)   26/   C8980 : 8030                	dc.b	nRst, $30
(1)   27/   C8982 : (MACRO)             	smpsLoop            $00, $08, Credits_Loop24
(1)   27/   C8982 : F7                          dc.b    $F7
(1)   27/   C8983 : 0008                        dc.b    $00,$08
(1)   27/   C8985 : 8089                                dc.w    z80_ptr(CREDITS_LOOP24)
(1)   28/   C8987 : (MACRO)             	smpsSetvoice        $03
(1)   28/   C8987 :  (MACRO-2)                  smpsFMvoice $03
(1)   28/   C8987 : EF03                                dc.b    $EF,$03
(1)   29/   C8989 : (MACRO)             	smpsCall            Credits_Call21
(1)   29/   C8989 : F8                          dc.b    $F8
(1)   29/   C898A : 7F8B                                dc.w    z80_ptr(CREDITS_CALL21)
(1)   30/   C898C : AE06 A2             	dc.b	nA3, $06, nA2
(1)   31/   C898F : (MACRO)             	smpsCall            Credits_Call21
(1)   31/   C898F : F8                          dc.b    $F8
(1)   31/   C8990 : 7F8B                                dc.w    z80_ptr(CREDITS_CALL21)
(1)   32/   C8992 : (MACRO)             	smpsAlterVol        $FD
(1)   32/   C8992 : E6FD                        dc.b    $E6,$FD
(1)   33/   C8994 :                     
(1)   34/   C8994 :                     Credits_Loop25:
(1)   35/   C8994 : (MACRO)             	smpsSetvoice        $00
(1)   35/   C8994 :  (MACRO-2)                  smpsFMvoice $00
(1)   35/   C8994 : EF00                                dc.b    $EF,$00
(1)   36/   C8996 : B706 BA             	dc.b	nFs4, $06, nA4
(1)   37/   C8999 : (MACRO)             	smpsCall            Credits_Call22
(1)   37/   C8999 : F8                          dc.b    $F8
(1)   37/   C899A : C18B                                dc.w    z80_ptr(CREDITS_CALL22)
(1)   38/   C899C : (MACRO)             	smpsLoop            $00, $02, Credits_Loop25
(1)   38/   C899C : F7                          dc.b    $F7
(1)   38/   C899D : 0002                        dc.b    $00,$02
(1)   38/   C899F : 9489                                dc.w    z80_ptr(CREDITS_LOOP25)
(1)   39/   C89A1 : 8006 8080 3080      	dc.b	nRst, $06, nRst, nRst, $30, nRst
(1)   40/   C89A7 : (MACRO)             	smpsSetvoice        $0B
(1)   40/   C89A7 :  (MACRO-2)                  smpsFMvoice $0B
(1)   40/   C89A7 : EF0B                                dc.b    $EF,$0B
(1)   41/   C89A9 : (MACRO)             	smpsAlterPitch      $18
(1)   41/   C89A9 :  (MACRO-2)                  smpsChangeTransposition $18
(1)   41/   C89A9 : FB18                                dc.b    $FB,$18
(1)   42/   C89AB : (MACRO)             	smpsAlterVol        $02
(1)   42/   C89AB : E602                        dc.b    $E6,$02
(1)   43/   C89AD :                     
(1)   44/   C89AD :                     Credits_Loop26:
(1)   45/   C89AD : 940C 8F92 8F06 9405 	dc.b	nG1, $0C, nD1, nF1, nD1, $06, nG1, $05, nG1, $07, $06, nD1
            C89B5 : 9407 068F         
(1)   46/   C89B9 : 0C92 8F             	dc.b	$0C, nF1, nD1
(1)   47/   C89BC : (MACRO)             	smpsLoop            $00, $05, Credits_Loop26
(1)   47/   C89BC : F7                          dc.b    $F7
(1)   47/   C89BD : 0005                        dc.b    $00,$05
(1)   47/   C89BF : AD89                                dc.w    z80_ptr(CREDITS_LOOP26)
(1)   48/   C89C1 : 8030 80             	dc.b	nRst, $30, nRst
(1)   49/   C89C4 : (MACRO)             	smpsSetvoice        $0E
(1)   49/   C89C4 :  (MACRO-2)                  smpsFMvoice $0E
(1)   49/   C89C4 : EF0E                                dc.b    $EF,$0E
(1)   50/   C89C6 : (MACRO)             	smpsAlterVol        $FF
(1)   50/   C89C6 : E6FF                        dc.b    $E6,$FF
(1)   51/   C89C8 : (MACRO)             	smpsAlterPitch      $E8
(1)   51/   C89C8 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)   51/   C89C8 : FBE8                                dc.b    $FB,$E8
(1)   52/   C89CA : (MACRO)             	smpsCall            Credits_Call23
(1)   52/   C89CA : F8                          dc.b    $F8
(1)   52/   C89CB : 938C                                dc.w    z80_ptr(CREDITS_CALL23)
(1)   53/   C89CD : 8012 9194 0680 1896 	dc.b	nRst, $12, nE1, nG1, $06, nRst, $18, nA1, $12, nCs2, $06, nRst
            C89D5 : 129A 0680         
(1)   54/   C89D9 : 8012 8F93 0880 1696 	dc.b	nRst, $12, nD1, nFs1, $08, nRst, $16, nA1, $06, nE1, nF1, nG1
            C89E1 : 0691 9294         
(1)   55/   C89E5 : 96                  	dc.b	nA1
(1)   56/   C89E6 : (MACRO)             	smpsCall            Credits_Call23
(1)   56/   C89E6 : F8                          dc.b    $F8
(1)   56/   C89E7 : 938C                                dc.w    z80_ptr(CREDITS_CALL23)
(1)   57/   C89E9 : 8012 9D9A 0880 1696 	dc.b	nRst, $12, nE2, nCs2, $08, nRst, $16, nA1, $12, nE2, $08, nRst
            C89F1 : 129D 0880         
(1)   58/   C89F5 : 04                  	dc.b	$04
(1)   59/   C89F6 : (MACRO)             	smpsSetvoice        $12
(1)   59/   C89F6 :  (MACRO-2)                  smpsFMvoice $12
(1)   59/   C89F6 : EF12                                dc.b    $EF,$12
(1)   60/   C89F8 : (MACRO)             	smpsModSet          $18, $01, $0A, $04
(1)   60/   C89F8 : F0                          dc.b    $F0
(1)   60/   C89F9 : 1901 0A05                           dc.b    $18+1,$01,$0A,(($04+1) * $01) & $FF
(1)   60/   C89FD :                             ;dc.b   $01,$0A,$04
(1)   61/   C89FD : 8030 80             	dc.b	nRst, $30, nRst
(1)   62/   C8A00 : (MACRO)             	smpsCall            Credits_Call24
(1)   62/   C8A00 : F8                          dc.b    $F8
(1)   62/   C8A01 : 0D8C                                dc.w    z80_ptr(CREDITS_CALL24)
(1)   63/   C8A03 : E724 E7C5 01E7 C4E7 	dc.b	smpsNoAttack, $24, smpsNoAttack, nAb5, $01, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack
            C8A0B : C3E7 C2E7         
(1)   64/   C8A0F : C1E7 C0E7 BFE7 BEE7 	dc.b	nE5, smpsNoAttack, nEb5, smpsNoAttack, nD5, smpsNoAttack, nCs5, smpsNoAttack, nC5, smpsNoAttack, nB4, smpsNoAttack
            C8A17 : BDE7 BCE7         
(1)   65/   C8A1B : BBE7 BA80 60        	dc.b	nBb4, smpsNoAttack, nA4, nRst, $60
(1)   66/   C8A20 : (MACRO)             	smpsSetvoice        $01
(1)   66/   C8A20 :  (MACRO-2)                  smpsFMvoice $01
(1)   66/   C8A20 : EF01                                dc.b    $EF,$01
(1)   67/   C8A22 : (MACRO)             	smpsAlterPitch      $F4
(1)   67/   C8A22 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   67/   C8A22 : FBF4                                dc.b    $FB,$F4
(1)   68/   C8A24 : (MACRO)             	smpsAlterVol        $FA
(1)   68/   C8A24 : E6FA                        dc.b    $E6,$FA
(1)   69/   C8A26 : (MACRO)             	smpsModOff
(1)   69/   C8A26 : FA                                  dc.b    $FA
(1)   70/   C8A27 : (MACRO)             	smpsCall            Credits_Call25
(1)   70/   C8A27 : F8                          dc.b    $F8
(1)   70/   C8A28 : 478C                                dc.w    z80_ptr(CREDITS_CALL25)
(1)   71/   C8A2A : B103                	dc.b	nC4, $03
(1)   72/   C8A2C : (MACRO)             	smpsCall            Credits_Call25
(1)   72/   C8A2C : F8                          dc.b    $F8
(1)   72/   C8A2D : 478C                                dc.w    z80_ptr(CREDITS_CALL25)
(1)   73/   C8A2F : 8003 8060           	dc.b	nRst, $03, nRst, $60
(1)   74/   C8A33 : (MACRO)             	smpsAlterVol        $04
(1)   74/   C8A33 : E604                        dc.b    $E6,$04
(1)   75/   C8A35 : (MACRO)             	smpsAlterNote       $01
(1)   75/   C8A35 :  (MACRO-2)                  smpsDetune      $01
(1)   75/   C8A35 : E101                        dc.b    $E1,$01
(1)   76/   C8A37 : (MACRO)             	smpsSetvoice        $1B
(1)   76/   C8A37 :  (MACRO-2)                  smpsFMvoice $1B
(1)   76/   C8A37 : EF1B                                dc.b    $EF,$1B
(1)   77/   C8A39 : (MACRO)             	smpsAlterVol        $06
(1)   77/   C8A39 : E606                        dc.b    $E6,$06
(1)   78/   C8A3B : C10C                	dc.b	nE5, $0C
(1)   79/   C8A3D : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   79/   C8A3D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   79/   C8A3D : E806                                dc.b    $E8,$06
(1)   80/   C8A3F : BD06 BABD 0C80 80   	dc.b	nC5, $06, nA4, nC5, $0C, nRst, nRst
(1)   81/   C8A46 : (MACRO)             	smpsSetvoice        $1C
(1)   81/   C8A46 :  (MACRO-2)                  smpsFMvoice $1C
(1)   81/   C8A46 : EF1C                                dc.b    $EF,$1C
(1)   82/   C8A48 : (MACRO)             	smpsAlterVol        $FA
(1)   82/   C8A48 : E6FA                        dc.b    $E6,$FA
(1)   83/   C8A4A : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   83/   C8A4A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   83/   C8A4A : E800                                dc.b    $E8,$00
(1)   84/   C8A4C : BC0C 1206           	dc.b	nB4, $0C, $12, $06
(1)   85/   C8A50 : (MACRO)             	smpsSetvoice        $1B
(1)   85/   C8A50 :  (MACRO-2)                  smpsFMvoice $1B
(1)   85/   C8A50 : EF1B                                dc.b    $EF,$1B
(1)   86/   C8A52 : (MACRO)             	smpsAlterVol        $06
(1)   86/   C8A52 : E606                        dc.b    $E6,$06
(1)   87/   C8A54 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   87/   C8A54 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   87/   C8A54 : E806                                dc.b    $E8,$06
(1)   88/   C8A56 : C206 C280 C280 C2   	dc.b	nF5, $06, nF5, nRst, nF5, nRst, nF5
(1)   89/   C8A5D : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   89/   C8A5D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   89/   C8A5D : E800                                dc.b    $E8,$00
(1)   90/   C8A5F : C30C C480           	dc.b	nFs5, $0C, nG5, nRst
(1)   91/   C8A63 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   91/   C8A63 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   91/   C8A63 : E806                                dc.b    $E8,$06
(1)   92/   C8A65 : C406 06C6 C4        	dc.b	nG5, $06, $06, nA5, nG5
(1)   93/   C8A6A : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   93/   C8A6A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   93/   C8A6A : E800                                dc.b    $E8,$00
(1)   94/   C8A6C : C10C                	dc.b	nE5, $0C
(1)   95/   C8A6E : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   95/   C8A6E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   95/   C8A6E : E806                                dc.b    $E8,$06
(1)   96/   C8A70 : BD06 BABD 0C80 80   	dc.b	nC5, $06, nA4, nC5, $0C, nRst, nRst
(1)   97/   C8A77 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   97/   C8A77 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   97/   C8A77 : E800                                dc.b    $E8,$00
(1)   98/   C8A79 : (MACRO)             	smpsSetvoice        $1C
(1)   98/   C8A79 :  (MACRO-2)                  smpsFMvoice $1C
(1)   98/   C8A79 : EF1C                                dc.b    $EF,$1C
(1)   99/   C8A7B : (MACRO)             	smpsAlterVol        $FA
(1)   99/   C8A7B : E6FA                        dc.b    $E6,$FA
(1)  100/   C8A7D : C1C4 C1             	dc.b	nE5, nG5, nE5
(1)  101/   C8A80 : (MACRO)             	smpsSetvoice        $1A
(1)  101/   C8A80 :  (MACRO-2)                  smpsFMvoice $1A
(1)  101/   C8A80 : EF1A                                dc.b    $EF,$1A
(1)  102/   C8A82 : (MACRO)             	smpsAlterVol        $06
(1)  102/   C8A82 : E606                        dc.b    $E6,$06
(1)  103/   C8A84 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  103/   C8A84 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  103/   C8A84 : E806                                dc.b    $E8,$06
(1)  104/   C8A86 : C206 C280 C280 C2   	dc.b	nF5, $06, nF5, nRst, nF5, nRst, nF5
(1)  105/   C8A8D : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  105/   C8A8D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  105/   C8A8D : E800                                dc.b    $E8,$00
(1)  106/   C8A8F : C30C C406 8080 2480 	dc.b	nFs5, $0C, nG5, $06, nRst, nRst, $24, nRst, $30, nRst
            C8A97 : 3080               
(1)  107/   C8A99 : (MACRO)             	smpsSetvoice        $1F
(1)  107/   C8A99 :  (MACRO-2)                  smpsFMvoice $1F
(1)  107/   C8A99 : EF1F                                dc.b    $EF,$1F
(1)  108/   C8A9B : (MACRO)             	smpsAlterPitch      $18
(1)  108/   C8A9B :  (MACRO-2)                  smpsChangeTransposition $18
(1)  108/   C8A9B : FB18                                dc.b    $FB,$18
(1)  109/   C8A9D : (MACRO)             	smpsAlterVol        $F7
(1)  109/   C8A9D : E6F7                        dc.b    $E6,$F7
(1)  110/   C8A9F : (MACRO)             	smpsAlterNote       $00
(1)  110/   C8A9F :  (MACRO-2)                  smpsDetune      $00
(1)  110/   C8A9F : E100                        dc.b    $E1,$00
(1)  111/   C8AA1 : 8006 ACAE 80B1 80B3 	dc.b	nRst, $06, nG3, nA3, nRst, nC4, nRst, nD4, nRst, nEb4, nRst, nD4
            C8AA9 : 80B4 80B3         
(1)  112/   C8AAD : 80B1 B380 B1        	dc.b	nRst, nC4, nD4, nRst, nC4
(1)  113/   C8AB2 : (MACRO)             	smpsAlterPitch      $F4
(1)  113/   C8AB2 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  113/   C8AB2 : FBF4                                dc.b    $FB,$F4
(1)  114/   C8AB4 : (MACRO)             	smpsSetvoice        $00
(1)  114/   C8AB4 :  (MACRO-2)                  smpsFMvoice $00
(1)  114/   C8AB4 : EF00                                dc.b    $EF,$00
(1)  115/   C8AB6 : 800C AC06 AEB1 8012 	dc.b	nRst, $0C, nG3, $06, nA3, nC4, nRst, $12, nG3, $06, nA3, nC4
            C8ABE : AC06 AEB1         
(1)  116/   C8AC2 : 80B4 B180 B1        	dc.b	nRst, nEb4, nC4, nRst, nC4
(1)  117/   C8AC7 : (MACRO)             	smpsAlterPitch      $0C
(1)  117/   C8AC7 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  117/   C8AC7 : FB0C                                dc.b    $FB,$0C
(1)  118/   C8AC9 : (MACRO)             	smpsSetvoice        $1F
(1)  118/   C8AC9 :  (MACRO-2)                  smpsFMvoice $1F
(1)  118/   C8AC9 : EF1F                                dc.b    $EF,$1F
(1)  119/   C8ACB : 8006 B812 B406 80B3 	dc.b	nRst, $06, nG4, $12, nEb4, $06, nRst, nD4, nRst, nEb4, nRst, nD4
            C8AD3 : 80B4 80B3         
(1)  120/   C8AD7 : 80B1 AE80 B1        	dc.b	nRst, nC4, nA3, nRst, nC4
(1)  121/   C8ADC : (MACRO)             	smpsAlterPitch      $F4
(1)  121/   C8ADC :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  121/   C8ADC : FBF4                                dc.b    $FB,$F4
(1)  122/   C8ADE : (MACRO)             	smpsSetvoice        $00
(1)  122/   C8ADE :  (MACRO-2)                  smpsFMvoice $00
(1)  122/   C8ADE : EF00                                dc.b    $EF,$00
(1)  123/   C8AE0 : 8006 AF12 AE06 8012 	dc.b	nRst, $06, nBb3, $12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3
            C8AE8 : AF06 80AE         
(1)  124/   C8AEC : 80AF B180 B180 3080 	dc.b	nRst, nBb3, nC4, nRst, nC4, nRst, $30, nRst
(1)  125/   C8AF4 : (MACRO)             	smpsSetvoice        $21
(1)  125/   C8AF4 :  (MACRO-2)                  smpsFMvoice $21
(1)  125/   C8AF4 : EF21                                dc.b    $EF,$21
(1)  126/   C8AF6 : (MACRO)             	smpsAlterPitch      $0C
(1)  126/   C8AF6 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  126/   C8AF6 : FB0C                                dc.b    $FB,$0C
(1)  127/   C8AF8 : 8030 8008 A004 9E0C 	dc.b	nRst, $30, nRst, $08, nG2, $04, nF2, $0C, nE2, nD2, nC2, $08
            C8B00 : 9D9B 9908         
(1)  128/   C8B04 : 0491 0C92 9394 9899 	dc.b	$04, nE1, $0C, nF1, nFs1, nG1, nB1, nC2, nD2, nE2, nB1, nAb1
            C8B0C : 9B9D 9895         
(1)  129/   C8B10 : 9391 989D 9196 9899 	dc.b	nFs1, nE1, nB1, nE2, nE1, nA1, nB1, nC2, nB1, nA1, nC2, nE2
            C8B18 : 9896 999D         
(1)  130/   C8B1C : 9695 9799 9795 9697 	dc.b	nA1, nAb1, nBb1, nC2, nBb1, nAb1, nA1, nBb1, nB1, nC2, nB1, nC2
            C8B24 : 9899 9899         
(1)  131/   C8B28 : 9B9D 0804 980C 9195 	dc.b	nD2, nE2, $08, $04, nB1, $0C, nE1, nAb1, nA1, nB1, nC2, nE2
            C8B30 : 9698 999D         
(1)  132/   C8B34 : 9E08 9610 970C 98   	dc.b	nF2, $08, nA1, $10, nBb1, $0C, nB1
(1)  133/   C8B3B : (MACRO)             	smpsCall            Credits_Call26
(1)  133/   C8B3B : F8                          dc.b    $F8
(1)  133/   C8B3C : AC8C                                dc.w    z80_ptr(CREDITS_CALL26)
(1)  134/   C8B3E : 9E                  	dc.b	nF2
(1)  135/   C8B3F : (MACRO)             	smpsAlterVol        $04
(1)  135/   C8B3F : E604                        dc.b    $E6,$04
(1)  136/   C8B41 : (MACRO)             	smpsCall            Credits_Call26
(1)  136/   C8B41 : F8                          dc.b    $F8
(1)  136/   C8B42 : AC8C                                dc.w    z80_ptr(CREDITS_CALL26)
(1)  137/   C8B44 : 9E                  	dc.b	nF2
(1)  138/   C8B45 : (MACRO)             	smpsAlterVol        $FC
(1)  138/   C8B45 : E6FC                        dc.b    $E6,$FC
(1)  139/   C8B47 : (MACRO)             	smpsCall            Credits_Call26
(1)  139/   C8B47 : F8                          dc.b    $F8
(1)  139/   C8B48 : AC8C                                dc.w    z80_ptr(CREDITS_CALL26)
(1)  140/   C8B4A : 9E08 9904           	dc.b	nF2, $08, nC2, $04
(1)  141/   C8B4E : (MACRO)             	smpsSetvoice        $23
(1)  141/   C8B4E :  (MACRO-2)                  smpsFMvoice $23
(1)  141/   C8B4E : EF23                                dc.b    $EF,$23
(1)  142/   C8B50 : (MACRO)             	smpsAlterPitch      $E8
(1)  142/   C8B50 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  142/   C8B50 : FBE8                                dc.b    $FB,$E8
(1)  143/   C8B52 : (MACRO)             	smpsAlterVol        $07
(1)  143/   C8B52 : E607                        dc.b    $E6,$07
(1)  144/   C8B54 : 8060                	dc.b	nRst, $60
(1)  145/   C8B56 : (MACRO)             	smpsCall            Credits_Call0A
(1)  145/   C8B56 : F8                          dc.b    $F8
(1)  145/   C8B57 : 6C8C                                dc.w    z80_ptr(CREDITS_CALL0A)
(1)  146/   C8B59 : 8060                	dc.b	nRst, $60
(1)  147/   C8B5B : (MACRO)             	smpsAlterVol        $FB
(1)  147/   C8B5B : E6FB                        dc.b    $E6,$FB
(1)  148/   C8B5D : 800C CD06 80D4 CD06 	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
            C8B65 : 800C CD06         
(1)  149/   C8B69 : 80D4 CD06 8018      	dc.b	nRst, nB6, nE6, $06, nRst, $18
(1)  150/   C8B6F : (MACRO)             	smpsAlterVol        $05
(1)  150/   C8B6F : E605                        dc.b    $E6,$05
(1)  151/   C8B71 : 800C AE80 AE80 24   	dc.b	nRst, $0C, nA3, nRst, nA3, nRst, $24
(1)  152/   C8B78 : (MACRO)             	smpsAlterNote       $02
(1)  152/   C8B78 :  (MACRO-2)                  smpsDetune      $02
(1)  152/   C8B78 : E102                        dc.b    $E1,$02
(1)  153/   C8B7A : (MACRO)             	smpsAlterVol        $08
(1)  153/   C8B7A : E608                        dc.b    $E6,$08
(1)  154/   C8B7C : A26C                	dc.b	nA2, $6C
(1)  155/   C8B7E : (MACRO)             	smpsStop
(1)  155/   C8B7E : F2                          dc.b    $F2
(1)  156/   C8B7F :                     
(1)  157/   C8B7F :                     Credits_Call21:
(1)  158/   C8B7F : A50C B106 80B1 0CAC 	dc.b	nC3, $0C, nC4, $06, nRst, nC4, $0C, nG3, nD4, $12, nC4, $0C
            C8B87 : B312 B10C         
(1)  159/   C8B8B : AC06 AEB1 A70C B306 	dc.b	nG3, $06, nA3, nC4, nD3, $0C, nD4, $06, nRst, nD4, $0C, nA3
            C8B93 : 80B3 0CAE         
(1)  160/   C8B97 : B512 B306 80AE B0B3 	dc.b	nE4, $12, nD4, $06, nRst, nA3, nB3, nD4, nBb2, $0C, nBb3, $06
            C8B9F : A30C AF06         
(1)  161/   C8BA3 : 80AF 0CAA B112 AF0C 	dc.b	nRst, nBb3, $0C, nF3, nC4, $12, nBb3, $0C, nF3, $06, nG3, nBb3
            C8BAB : AA06 ACAF         
(1)  162/   C8BAF : A20C AE06 A2A4 0CB0 	dc.b	nA2, $0C, nA3, $06, nA2, nB2, $0C, nB3, $06, nB2, nC3, $0C
            C8BB7 : 06A4 A50C         
(1)  163/   C8BBB : B106 A5A2 0C        	dc.b	nC4, $06, nC3, nA2, $0C
(1)  164/   C8BC0 : (MACRO)             	smpsReturn
(1)  164/   C8BC0 : F9                                  dc.b    $F9
(1)  165/   C8BC1 :                     
(1)  166/   C8BC1 :                     Credits_Call22:
(1)  167/   C8BC1 : BE0C BC06 BABC BA04 	dc.b	nCs5, $0C, nB4, $06, nA4, nB4, nA4, $04, smpsNoAttack, $08, nA4, $04
            C8BC9 : E708 BA04         
(1)  168/   C8BCD : 800E                	dc.b	nRst, $0E
(1)  169/   C8BCF : (MACRO)             	smpsSetvoice        $07
(1)  169/   C8BCF :  (MACRO-2)                  smpsFMvoice $07
(1)  169/   C8BCF : EF07                                dc.b    $EF,$07
(1)  170/   C8BD1 : B706 B2B5 B7        	dc.b	nFs4, $06, nCs4, nE4, nFs4
(1)  171/   C8BD6 : (MACRO)             	smpsSetvoice        $00
(1)  171/   C8BD6 :  (MACRO-2)                  smpsFMvoice $00
(1)  171/   C8BD6 : EF00                                dc.b    $EF,$00
(1)  172/   C8BD8 : B7BA BE0C BC06 BABC 	dc.b	nFs4, nA4, nCs5, $0C, nB4, $06, nA4, nB4, nA4, $0C, nB4, $04
            C8BE0 : BA0C BC04         
(1)  173/   C8BE4 : 8008 BA04 8008 BC04 	dc.b	nRst, $08, nA4, $04, nRst, $08, nB4, $04, nRst, $08, nCs5, $12
            C8BEC : 8008 BE12         
(1)  174/   C8BF0 : BA06 B780 B780 24   	dc.b	nA4, $06, nFs4, nRst, nFs4, nRst, $24
(1)  175/   C8BF7 : (MACRO)             	smpsSetvoice        $07
(1)  175/   C8BF7 :  (MACRO-2)                  smpsFMvoice $07
(1)  175/   C8BF7 : EF07                                dc.b    $EF,$07
(1)  176/   C8BF9 : B706 B2B5 B780 0C80 	dc.b	nFs4, $06, nCs4, nE4, nFs4, nRst, $0C, nRst, $30, nCs5, $06, nCs5
            C8C01 : 30BE 06BE         
(1)  177/   C8C05 : BA04 8008 BC06 BE   	dc.b	nA4, $04, nRst, $08, nB4, $06, nCs5
(1)  178/   C8C0C : (MACRO)             	smpsReturn
(1)  178/   C8C0C : F9                                  dc.b    $F9
(1)  179/   C8C0D :                     
(1)  180/   C8C0D :                     Credits_Call24:
(1)  181/   C8C0D : C301 E7C4 E7C5 E7C6 	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
            C8C15 : 2D               
(1)  182/   C8C16 : (MACRO)             	smpsAlterPitch      $02
(1)  182/   C8C16 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  182/   C8C16 : FB02                                dc.b    $FB,$02
(1)  183/   C8C18 : C301 E7C4 E7C5 E7C6 	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
            C8C20 : 2D               
(1)  184/   C8C21 : (MACRO)             	smpsAlterPitch      $01
(1)  184/   C8C21 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  184/   C8C21 : FB01                                dc.b    $FB,$01
(1)  185/   C8C23 : C301 E7C4 E7C5 E7C6 	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
            C8C2B : 2D               
(1)  186/   C8C2C : (MACRO)             	smpsAlterPitch      $FC
(1)  186/   C8C2C :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  186/   C8C2C : FBFC                                dc.b    $FB,$FC
(1)  187/   C8C2E : C301 E7C4 E7C5 E7C6 	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
            C8C36 : 2D               
(1)  188/   C8C37 : (MACRO)             	smpsAlterPitch      $01
(1)  188/   C8C37 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  188/   C8C37 : FB01                                dc.b    $FB,$01
(1)  189/   C8C39 : C301 E7C4 E7C5 E7C6 	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D, smpsNoAttack, $30, smpsNoAttack
            C8C41 : 2DE7 30E7         
(1)  190/   C8C45 : 30                  	dc.b	$30
(1)  191/   C8C46 : (MACRO)             	smpsReturn
(1)  191/   C8C46 : F9                                  dc.b    $F9
(1)  192/   C8C47 :                     
(1)  193/   C8C47 :                     Credits_Call25:
(1)  194/   C8C47 : A70C B306 80B1 80B3 	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
            C8C4F : 0CA7 0380         
(1)  195/   C8C53 : 06A7 03B3 0CB1 B309 	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, $09, nA3, $03, nG3, $06
            C8C5B : AE03 AC06         
(1)  196/   C8C5F : 80AC 0CAE 0680 AE0C 	dc.b	nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $27
            C8C67 : AF06 8027         
(1)  197/   C8C6B : (MACRO)             	smpsReturn
(1)  197/   C8C6B : F9                                  dc.b    $F9
(1)  198/   C8C6C :                     
(1)  199/   C8C6C :                     Credits_Call0A:
(1)  200/   C8C6C : 800C CA15 8003 CA06 	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
            C8C74 : 80CB 0F80         
(1)  201/   C8C78 : 03C8 1880 06CA 80CA 	dc.b	$03, nB5, $18, nRst, $06, nCs6, nRst, nCs6, nRst, nCs6, nRst, nA5
            C8C80 : 80CA 80C6         
(1)  202/   C8C84 : 80C4 0F80 03C8 1880 	dc.b	nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
            C8C8C : 06               
(1)  203/   C8C8D : (MACRO)             	smpsLoop            $00, $02, Credits_Call0A
(1)  203/   C8C8D : F7                          dc.b    $F7
(1)  203/   C8C8E : 0002                        dc.b    $00,$02
(1)  203/   C8C90 : 6C8C                                dc.w    z80_ptr(CREDITS_CALL0A)
(1)  204/   C8C92 : (MACRO)             	smpsReturn
(1)  204/   C8C92 : F9                                  dc.b    $F9
(1)  205/   C8C93 :                     
(1)  206/   C8C93 :                     Credits_Call23:
(1)  207/   C8C93 : 8012 9497 0680 1899 	dc.b	nRst, $12, nG1, nBb1, $06, nRst, $18, nC2, $12, nG1, $06, nRst
            C8C9B : 1294 0680         
(1)  208/   C8C9F : 8012 9296 0680 1897 	dc.b	nRst, $12, nF1, nA1, $06, nRst, $18, nBb1, $12, nF1, $06, nRst
            C8CA7 : 1292 0680         
(1)  209/   C8CAB : (MACRO)             	smpsReturn
(1)  209/   C8CAB : F9                                  dc.b    $F9
(1)  210/   C8CAC :                     
(1)  211/   C8CAC :                     Credits_Call26:
(1)  212/   C8CAC : 8099 8099 809E 80   	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst
(1)  213/   C8CB3 : (MACRO)             	smpsReturn
(1)  213/   C8CB3 : F9                                  dc.b    $F9
(1)  214/   C8CB4 :                     
(1)  215/   C8CB4 :                     Credits_Call03:
(1)  216/   C8CB4 : (MACRO)             	smpsSetvoice        $07
(1)  216/   C8CB4 :  (MACRO-2)                  smpsFMvoice $07
(1)  216/   C8CB4 : EF07                                dc.b    $EF,$07
(1)  217/   C8CB6 : 8054 C704 C8C9 CA24 	dc.b	nRst, $54, nBb5, $04, nB5, nC6, nCs6, $24, nE6, nA6, $18, nG6
            C8CBE : CDD2 18D0         
(1)  218/   C8CC2 : 24CF CB18 CB0C CA80 	dc.b	$24, nFs6, nD6, $18, nD6, $0C, nCs6, nRst, nE6, $60, smpsNoAttack, $3C
            C8CCA : CD60 E73C         
(1)  219/   C8CCE : CA24 CDD2 18D4 24D0 	dc.b	nCs6, $24, nE6, nA6, $18, nB6, $24, nG6, nB6, $18, nB6, $24
            C8CD6 : D418 D424         
(1)  220/   C8CDA : D660 E73C           	dc.b	nCs7, $60, smpsNoAttack, $3C
(1)  221/   C8CDE : (MACRO)             	smpsReturn
(1)  221/   C8CDE : F9                                  dc.b    $F9
(1)  222/   C8CDF :                     
(1)  223/   C8CDF :                     ; FM2 Data
(1)  224/   C8CDF :                     Credits_FM2:
(1)  225/   C8CDF : 8060                	dc.b	nRst, $60
(1)  226/   C8CE1 : (MACRO)             	smpsSetvoice        $01
(1)  226/   C8CE1 :  (MACRO-2)                  smpsFMvoice $01
(1)  226/   C8CE1 : EF01                                dc.b    $EF,$01
(1)  227/   C8CE3 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  227/   C8CE3 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  227/   C8CE3 : E806                                dc.b    $E8,$06
(1)  228/   C8CE5 : (MACRO)             	smpsCall            Credits_Call1A
(1)  228/   C8CE5 : F8                          dc.b    $F8
(1)  228/   C8CE6 : DA8F                                dc.w    z80_ptr(CREDITS_CALL1A)
(1)  229/   C8CE8 : (MACRO)             	smpsCall            Credits_Call1A
(1)  229/   C8CE8 : F8                          dc.b    $F8
(1)  229/   C8CE9 : DA8F                                dc.w    z80_ptr(CREDITS_CALL1A)
(1)  230/   C8CEB :                     
(1)  231/   C8CEB :                     Credits_Loop17:
(1)  232/   C8CEB : 850C                	dc.b	nE0, $0C
(1)  233/   C8CED : (MACRO)             	smpsLoop            $00, $0C, Credits_Loop17
(1)  233/   C8CED : F7                          dc.b    $F7
(1)  233/   C8CEE : 000C                        dc.b    $00,$0C
(1)  233/   C8CF0 : EB8C                                dc.w    z80_ptr(CREDITS_LOOP17)
(1)  234/   C8CF2 : 8A87 8889           	dc.b	nA0, nFs0, nG0, nAb0
(1)  235/   C8CF6 : (MACRO)             	smpsCall            Credits_Call1A
(1)  235/   C8CF6 : F8                          dc.b    $F8
(1)  235/   C8CF7 : DA8F                                dc.w    z80_ptr(CREDITS_CALL1A)
(1)  236/   C8CF9 :                     
(1)  237/   C8CF9 :                     Credits_Loop18:
(1)  238/   C8CF9 : 88                  	dc.b	nG0
(1)  239/   C8CFA : (MACRO)             	smpsLoop            $00, $0B, Credits_Loop18
(1)  239/   C8CFA : F7                          dc.b    $F7
(1)  239/   C8CFB : 000B                        dc.b    $00,$0B
(1)  239/   C8CFD : F98C                                dc.w    z80_ptr(CREDITS_LOOP18)
(1)  240/   C8CFF :                     
(1)  241/   C8CFF :                     Credits_Loop19:
(1)  242/   C8CFF : 8A                  	dc.b	nA0
(1)  243/   C8D00 : (MACRO)             	smpsLoop            $00, $0A, Credits_Loop19
(1)  243/   C8D00 : F7                          dc.b    $F7
(1)  243/   C8D01 : 000A                        dc.b    $00,$0A
(1)  243/   C8D03 : FF8C                                dc.w    z80_ptr(CREDITS_LOOP19)
(1)  244/   C8D05 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  244/   C8D05 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  244/   C8D05 : E800                                dc.b    $E8,$00
(1)  245/   C8D07 : (MACRO)             	smpsAlterVol        $FC
(1)  245/   C8D07 : E6FC                        dc.b    $E6,$FC
(1)  246/   C8D09 : 8A8B 8C             	dc.b	nA0, nBb0, nB0
(1)  247/   C8D0C : (MACRO)             	smpsAlterVol        $04
(1)  247/   C8D0C : E604                        dc.b    $E6,$04
(1)  248/   C8D0E : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  248/   C8D0E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  248/   C8D0E : E809                                dc.b    $E8,$09
(1)  249/   C8D10 :                     
(1)  250/   C8D10 :                     Credits_Loop1A:
(1)  251/   C8D10 : 8D0C                	dc.b	nC1, $0C
(1)  252/   C8D12 : (MACRO)             	smpsLoop            $00, $0C, Credits_Loop1A
(1)  252/   C8D12 : F7                          dc.b    $F7
(1)  252/   C8D13 : 000C                        dc.b    $00,$0C
(1)  252/   C8D15 : 108D                                dc.w    z80_ptr(CREDITS_LOOP1A)
(1)  253/   C8D17 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  253/   C8D17 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  253/   C8D17 : E800                                dc.b    $E8,$00
(1)  254/   C8D19 : 8D8A 8B8C           	dc.b	nC1, nA0, nBb0, nB0
(1)  255/   C8D1D : (MACRO)             	smpsNoteFill        $09
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  255/   C8D1D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  255/   C8D1D : E809                                dc.b    $E8,$09
(1)  256/   C8D1F :                     
(1)  257/   C8D1F :                     Credits_Loop1B:
(1)  258/   C8D1F : 8D0C                	dc.b	nC1, $0C
(1)  259/   C8D21 : (MACRO)             	smpsLoop            $00, $0C, Credits_Loop1B
(1)  259/   C8D21 : F7                          dc.b    $F7
(1)  259/   C8D22 : 000C                        dc.b    $00,$0C
(1)  259/   C8D24 : 1F8D                                dc.w    z80_ptr(CREDITS_LOOP1B)
(1)  260/   C8D26 : 8D06 99             	dc.b	nC1, $06, nC2
(1)  261/   C8D29 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  261/   C8D29 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  261/   C8D29 : E800                                dc.b    $E8,$00
(1)  262/   C8D2B : 8A0C 8B8C           	dc.b	nA0, $0C, nBb0, nB0
(1)  263/   C8D2F : (MACRO)             	smpsAlterPitch      $E8
(1)  263/   C8D2F :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  263/   C8D2F : FBE8                                dc.b    $FB,$E8
(1)  264/   C8D31 : (MACRO)             	smpsAlterVol        $0C
(1)  264/   C8D31 : E60C                        dc.b    $E6,$0C
(1)  265/   C8D33 : (MACRO)             	smpsSetvoice        $04
(1)  265/   C8D33 :  (MACRO-2)                  smpsFMvoice $04
(1)  265/   C8D33 : EF04                                dc.b    $EF,$04
(1)  266/   C8D35 :                     
(1)  267/   C8D35 :                     Credits_Loop1C:
(1)  268/   C8D35 : (MACRO)             	smpsCall            Credits_Call14
(1)  268/   C8D35 : F8                          dc.b    $F8
(1)  268/   C8D36 : 078F                                dc.w    z80_ptr(CREDITS_CALL14)
(1)  269/   C8D38 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop1C
(1)  269/   C8D38 : F7                          dc.b    $F7
(1)  269/   C8D39 : 0002                        dc.b    $00,$02
(1)  269/   C8D3B : 358D                                dc.w    z80_ptr(CREDITS_LOOP1C)
(1)  270/   C8D3D : (MACRO)             	smpsAlterVol        $F9
(1)  270/   C8D3D : E6F9                        dc.b    $E6,$F9
(1)  271/   C8D3F : (MACRO)             	smpsSetvoice        $08
(1)  271/   C8D3F :  (MACRO-2)                  smpsFMvoice $08
(1)  271/   C8D3F : EF08                                dc.b    $EF,$08
(1)  272/   C8D41 :                     
(1)  273/   C8D41 :                     Credits_Loop20:
(1)  274/   C8D41 : (MACRO)             	smpsCall            Credits_Call1B
(1)  274/   C8D41 : F8                          dc.b    $F8
(1)  274/   C8D42 : 3B8F                                dc.w    z80_ptr(CREDITS_CALL1B)
(1)  275/   C8D44 :                     
(1)  276/   C8D44 :                     Credits_Loop1D:
(1)  277/   C8D44 : 9F04 8008 9F0C      	dc.b	nFs2, $04, nRst, $08, nFs2, $0C
(1)  278/   C8D4A : (MACRO)             	smpsLoop            $00, $02, Credits_Loop1D
(1)  278/   C8D4A : F7                          dc.b    $F7
(1)  278/   C8D4B : 0002                        dc.b    $00,$02
(1)  278/   C8D4D : 448D                                dc.w    z80_ptr(CREDITS_LOOP1D)
(1)  279/   C8D4F : 069C 129D 0C9E      	dc.b	$06, nEb2, $12, nE2, $0C, nF2
(1)  280/   C8D55 : (MACRO)             	smpsCall            Credits_Call1B
(1)  280/   C8D55 : F8                          dc.b    $F8
(1)  280/   C8D56 : 3B8F                                dc.w    z80_ptr(CREDITS_CALL1B)
(1)  281/   C8D58 :                     
(1)  282/   C8D58 :                     Credits_Loop1E:
(1)  283/   C8D58 : 9D04 8008 9D0C      	dc.b	nE2, $04, nRst, $08, nE2, $0C
(1)  284/   C8D5E : (MACRO)             	smpsLoop            $00, $02, Credits_Loop1E
(1)  284/   C8D5E : F7                          dc.b    $F7
(1)  284/   C8D5F : 0002                        dc.b    $00,$02
(1)  284/   C8D61 : 588D                                dc.w    z80_ptr(CREDITS_LOOP1E)
(1)  285/   C8D63 :                     
(1)  286/   C8D63 :                     Credits_Loop1F:
(1)  287/   C8D63 : 9C04 8008 9C0C      	dc.b	nEb2, $04, nRst, $08, nEb2, $0C
(1)  288/   C8D69 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop1F
(1)  288/   C8D69 : F7                          dc.b    $F7
(1)  288/   C8D6A : 0002                        dc.b    $00,$02
(1)  288/   C8D6C : 638D                                dc.w    z80_ptr(CREDITS_LOOP1F)
(1)  289/   C8D6E : (MACRO)             	smpsLoop            $01, $02, Credits_Loop20
(1)  289/   C8D6E : F7                          dc.b    $F7
(1)  289/   C8D6F : 0102                        dc.b    $01,$02
(1)  289/   C8D71 : 418D                                dc.w    z80_ptr(CREDITS_LOOP20)
(1)  290/   C8D73 : 8060 8048           	dc.b	nRst, $60, nRst, $48
(1)  291/   C8D77 : (MACRO)             	smpsSetvoice        $0C
(1)  291/   C8D77 :  (MACRO-2)                  smpsFMvoice $0C
(1)  291/   C8D77 : EF0C                                dc.b    $EF,$0C
(1)  292/   C8D79 : (MACRO)             	smpsAlterVol        $13
(1)  292/   C8D79 : E613                        dc.b    $E6,$13
(1)  293/   C8D7B : (MACRO)             	smpsCall            Credits_Call06
(1)  293/   C8D7B : F8                          dc.b    $F8
(1)  293/   C8D7C : 4B8F                                dc.w    z80_ptr(CREDITS_CALL06)
(1)  294/   C8D7E : 2480 60             	dc.b	$24, nRst, $60
(1)  295/   C8D81 : (MACRO)             	smpsSetvoice        $0F
(1)  295/   C8D81 :  (MACRO-2)                  smpsFMvoice $0F
(1)  295/   C8D81 : EF0F                                dc.b    $EF,$0F
(1)  296/   C8D83 : (MACRO)             	smpsAlterVol        $F3
(1)  296/   C8D83 : E6F3                        dc.b    $E6,$F3
(1)  297/   C8D85 : (MACRO)             	smpsModSet          $04, $02, $03, $02
(1)  297/   C8D85 : F0                          dc.b    $F0
(1)  297/   C8D86 : 0502 0306                           dc.b    $04+1,$02,$03,(($02+1) * $02) & $FF
(1)  297/   C8D8A :                             ;dc.b   $02,$03,$02
(1)  298/   C8D8A : (MACRO)             	smpsCall            Credits_Call16
(1)  298/   C8D8A : F8                          dc.b    $F8
(1)  298/   C8D8B : 638F                                dc.w    z80_ptr(CREDITS_CALL16)
(1)  299/   C8D8D : C418 C330 E718 800C 	dc.b	nG5, $18, nFs5, $30, smpsNoAttack, $18, nRst, $0C
(1)  300/   C8D95 : (MACRO)             	smpsCall            Credits_Call16
(1)  300/   C8D95 : F8                          dc.b    $F8
(1)  300/   C8D96 : 638F                                dc.w    z80_ptr(CREDITS_CALL16)
(1)  301/   C8D98 : BE                  	dc.b	nCs5
(1)  302/   C8D99 : (MACRO)             	smpsSetvoice        $13
(1)  302/   C8D99 :  (MACRO-2)                  smpsFMvoice $13
(1)  302/   C8D99 : EF13                                dc.b    $EF,$13
(1)  303/   C8D9B : (MACRO)             	smpsAlterVol        $F5
(1)  303/   C8D9B : E6F5                        dc.b    $E6,$F5
(1)  304/   C8D9D : (MACRO)             	smpsModOff
(1)  304/   C8D9D : FA                                  dc.b    $FA
(1)  305/   C8D9E : 8060                	dc.b	nRst, $60
(1)  306/   C8DA0 :                     
(1)  307/   C8DA0 :                     Credits_Loop21:
(1)  308/   C8DA0 : (MACRO)             	smpsCall            Credits_Call1C
(1)  308/   C8DA0 : F8                          dc.b    $F8
(1)  308/   C8DA1 : 9A8F                                dc.w    z80_ptr(CREDITS_CALL1C)
(1)  309/   C8DA3 : A80C A908 A110      	dc.b	nEb3, $0C, nE3, $08, nAb2, $10
(1)  310/   C8DA9 : (MACRO)             	smpsCall            Credits_Call1C
(1)  310/   C8DA9 : F8                          dc.b    $F8
(1)  310/   C8DAA : 9A8F                                dc.w    z80_ptr(CREDITS_CALL1C)
(1)  311/   C8DAC : A808 A904 8018      	dc.b	nEb3, $08, nE3, $04, nRst, $18
(1)  312/   C8DB2 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop21
(1)  312/   C8DB2 : F7                          dc.b    $F7
(1)  312/   C8DB3 : 0002                        dc.b    $00,$02
(1)  312/   C8DB5 : A08D                                dc.w    z80_ptr(CREDITS_LOOP21)
(1)  313/   C8DB7 : 8060                	dc.b	nRst, $60
(1)  314/   C8DB9 : (MACRO)             	smpsSetvoice        $17
(1)  314/   C8DB9 :  (MACRO-2)                  smpsFMvoice $17
(1)  314/   C8DB9 : EF17                                dc.b    $EF,$17
(1)  315/   C8DBB : (MACRO)             	smpsAlterNote       $02
(1)  315/   C8DBB :  (MACRO-2)                  smpsDetune      $02
(1)  315/   C8DBB : E102                        dc.b    $E1,$02
(1)  316/   C8DBD : (MACRO)             	smpsAlterPitch      $F4
(1)  316/   C8DBD :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  316/   C8DBD : FBF4                                dc.b    $FB,$F4
(1)  317/   C8DBF : (MACRO)             	smpsAlterVol        $0A
(1)  317/   C8DBF : E60A                        dc.b    $E6,$0A
(1)  318/   C8DC1 : (MACRO)             	smpsCall            Credits_Call10
(1)  318/   C8DC1 : F8                          dc.b    $F8
(1)  318/   C8DC2 : 858F                                dc.w    z80_ptr(CREDITS_CALL10)
(1)  319/   C8DC4 : CE15 CD03 CB06 80C9 	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
            C8DCC : 0CCD 0680         
(1)  320/   C8DD0 : C90C CB06 8012 8060 	dc.b	nC6, $0C, nD6, $06, nRst, $12, nRst, $60
(1)  321/   C8DD8 : (MACRO)             	smpsSetvoice        $1B
(1)  321/   C8DD8 :  (MACRO-2)                  smpsFMvoice $1B
(1)  321/   C8DD8 : EF1B                                dc.b    $EF,$1B
(1)  322/   C8DDA : (MACRO)             	smpsAlterNote       $00
(1)  322/   C8DDA :  (MACRO-2)                  smpsDetune      $00
(1)  322/   C8DDA : E100                        dc.b    $E1,$00
(1)  323/   C8DDC : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  323/   C8DDC :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  323/   C8DDC : E806                                dc.b    $E8,$06
(1)  324/   C8DDE : 803C B806 06BA BDBD 	dc.b	nRst, $3C, nG4, $06, $06, nA4, nC5, nC5, nA4
            C8DE6 : BA               
(1)  325/   C8DE7 : (MACRO)             	smpsSetvoice        $1D
(1)  325/   C8DE7 :  (MACRO-2)                  smpsFMvoice $1D
(1)  325/   C8DE7 : EF1D                                dc.b    $EF,$1D
(1)  326/   C8DE9 : (MACRO)             	smpsAlterVol        $FA
(1)  326/   C8DE9 : E6FA                        dc.b    $E6,$FA
(1)  327/   C8DEB : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  327/   C8DEB :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  327/   C8DEB : E800                                dc.b    $E8,$00
(1)  328/   C8DED : (MACRO)             	smpsCall            Credits_Call1D
(1)  328/   C8DED : F8                          dc.b    $F8
(1)  328/   C8DEE : A98F                                dc.w    z80_ptr(CREDITS_CALL1D)
(1)  329/   C8DF0 : 80                  	dc.b	nRst
(1)  330/   C8DF1 : (MACRO)             	smpsCall            Credits_Call1E
(1)  330/   C8DF1 : F8                          dc.b    $F8
(1)  330/   C8DF2 : B98F                                dc.w    z80_ptr(CREDITS_CALL1E)
(1)  331/   C8DF4 : (MACRO)             	smpsCall            Credits_Call1D
(1)  331/   C8DF4 : F8                          dc.b    $F8
(1)  331/   C8DF5 : A98F                                dc.w    z80_ptr(CREDITS_CALL1D)
(1)  332/   C8DF7 : (MACRO)             	smpsSetvoice        $1C
(1)  332/   C8DF7 :  (MACRO-2)                  smpsFMvoice $1C
(1)  332/   C8DF7 : EF1C                                dc.b    $EF,$1C
(1)  333/   C8DF9 : BD                  	dc.b	nC5
(1)  334/   C8DFA : (MACRO)             	smpsSetvoice        $1D
(1)  334/   C8DFA :  (MACRO-2)                  smpsFMvoice $1D
(1)  334/   C8DFA : EF1D                                dc.b    $EF,$1D
(1)  335/   C8DFC : (MACRO)             	smpsCall            Credits_Call1E
(1)  335/   C8DFC : F8                          dc.b    $F8
(1)  335/   C8DFD : B98F                                dc.w    z80_ptr(CREDITS_CALL1E)
(1)  336/   C8DFF : 8030 80             	dc.b	nRst, $30, nRst
(1)  337/   C8E02 : (MACRO)             	smpsSetvoice        $01
(1)  337/   C8E02 :  (MACRO-2)                  smpsFMvoice $01
(1)  337/   C8E02 : EF01                                dc.b    $EF,$01
(1)  338/   C8E04 : (MACRO)             	smpsAlterPitch      $18
(1)  338/   C8E04 :  (MACRO-2)                  smpsChangeTransposition $18
(1)  338/   C8E04 : FB18                                dc.b    $FB,$18
(1)  339/   C8E06 : (MACRO)             	smpsAlterVol        $F9
(1)  339/   C8E06 : E6F9                        dc.b    $E6,$F9
(1)  340/   C8E08 :                     
(1)  341/   C8E08 :                     Credits_Loop22:
(1)  342/   C8E08 : 990C A506 8096 0CA2 	dc.b	nC2, $0C, nC3, $06, nRst, nA1, $0C, nA2, $06, nRst, nBb1, $0C
            C8E10 : 0680 970C         
(1)  343/   C8E14 : A306 8098 0CA8 06A7 	dc.b	nBb2, $06, nRst, nB1, $0C, nEb3, $06, nD3, nC2, $06, nC2, $12
            C8E1C : 9906 9912         
(1)  344/   C8E20 : 960C A206 8097 0CA3 	dc.b	nA1, $0C, nA2, $06, nRst, nBb1, $0C, nBb2, $06, nRst, nB1, $0C
            C8E28 : 0680 980C         
(1)  345/   C8E2C : A406 80             	dc.b	nB2, $06, nRst
(1)  346/   C8E2F : (MACRO)             	smpsLoop            $00, $02, Credits_Loop22
(1)  346/   C8E2F : F7                          dc.b    $F7
(1)  346/   C8E30 : 0002                        dc.b    $00,$02
(1)  346/   C8E32 : 088E                                dc.w    z80_ptr(CREDITS_LOOP22)
(1)  347/   C8E34 : 8060                	dc.b	nRst, $60
(1)  348/   C8E36 : (MACRO)             	smpsSetvoice        $22
(1)  348/   C8E36 :  (MACRO-2)                  smpsFMvoice $22
(1)  348/   C8E36 : EF22                                dc.b    $EF,$22
(1)  349/   C8E38 : (MACRO)             	smpsAlterPitch      $E8
(1)  349/   C8E38 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  349/   C8E38 : FBE8                                dc.b    $FB,$E8
(1)  350/   C8E3A : (MACRO)             	smpsAlterVol        $03
(1)  350/   C8E3A : E603                        dc.b    $E6,$03
(1)  351/   C8E3C : (MACRO)             	smpsModSet          $1C, $01, $06, $04
(1)  351/   C8E3C : F0                          dc.b    $F0
(1)  351/   C8E3D : 1D01 0605                           dc.b    $1C+1,$01,$06,(($04+1) * $01) & $FF
(1)  351/   C8E41 :                             ;dc.b   $01,$06,$04
(1)  352/   C8E41 : 8050 AC04 AE08 B104 	dc.b	nRst, $50, nG3, $04, nA3, $08, nC4, $04, nE4, $30, nRst, $0C
            C8E49 : B530 800C         
(1)  353/   C8E4D : B508 8004 B608 B510 	dc.b	nE4, $08, nRst, $04, nF4, $08, nE4, $10, nAb4, $08, $04, nRst
            C8E55 : B908 0480         
(1)  354/   C8E59 : 08B5 3480 0CB5 BA08 	dc.b	$08, nE4, $34, nRst, $0C, nE4, nA4, $08, $04, nRst, $08, nE4
            C8E61 : 0480 08B5         
(1)  355/   C8E65 : 04B1 2480 0CB1 0880 	dc.b	$04, nC4, $24, nRst, $0C, nC4, $08, nRst, $04, nD4, $08, nC4
            C8E6D : 04B3 08B1         
(1)  356/   C8E71 : 04B4 0CB3 08B1 4C80 	dc.b	$04, nEb4, $0C, nD4, $08, nC4, $4C, nRst, $0C, nE4, $08, nRst
            C8E79 : 0CB5 0880         
(1)  357/   C8E7D : 04B6 0880 04B5 0880 	dc.b	$04, nF4, $08, nRst, $04, nE4, $08, nRst, $04, nAb4, $08, $04
            C8E85 : 04B9 0804         
(1)  358/   C8E89 : 8008 B51C 800C BA18 	dc.b	nRst, $08, nE4, $1C, nRst, $0C, nA4, $18, nB4, $08, nA4, $04
            C8E91 : BC08 BA04         
(1)  359/   C8E95 : BD18 800C BA04 8008 	dc.b	nC5, $18, nRst, $0C, nA4, $04, nRst, $08, nG4, $18, nE4, nC4
            C8E9D : B818 B5B1         
(1)  360/   C8EA1 : B30C                	dc.b	nD4, $0C
(1)  361/   C8EA3 : (MACRO)             	smpsAlterVol        $04
(1)  361/   C8EA3 : E604                        dc.b    $E6,$04
(1)  362/   C8EA5 : (MACRO)             	smpsCall            Credits_Call1F
(1)  362/   C8EA5 : F8                          dc.b    $F8
(1)  362/   C8EA6 : C78F                                dc.w    z80_ptr(CREDITS_CALL1F)
(1)  363/   C8EA8 : B30C                	dc.b	nD4, $0C
(1)  364/   C8EAA : (MACRO)             	smpsAlterVol        $FC
(1)  364/   C8EAA : E6FC                        dc.b    $E6,$FC
(1)  365/   C8EAC : (MACRO)             	smpsCall            Credits_Call1F
(1)  365/   C8EAC : F8                          dc.b    $F8
(1)  365/   C8EAD : C78F                                dc.w    z80_ptr(CREDITS_CALL1F)
(1)  366/   C8EAF : B314 B104           	dc.b	nD4, $14, nC4, $04
(1)  367/   C8EB3 : (MACRO)             	smpsAlterVol        $FF
(1)  367/   C8EB3 : E6FF                        dc.b    $E6,$FF
(1)  368/   C8EB5 : (MACRO)             	smpsSetvoice        $24
(1)  368/   C8EB5 :  (MACRO-2)                  smpsFMvoice $24
(1)  368/   C8EB5 : EF24                                dc.b    $EF,$24
(1)  369/   C8EB7 : (MACRO)             	smpsModOff
(1)  369/   C8EB7 : FA                                  dc.b    $FA
(1)  370/   C8EB8 : 8060                	dc.b	nRst, $60
(1)  371/   C8EBA :                     
(1)  372/   C8EBA :                     Credits_Loop23:
(1)  373/   C8EBA : (MACRO)             	smpsCall            Credits_Call20
(1)  373/   C8EBA : F8                          dc.b    $F8
(1)  373/   C8EBB : D08F                                dc.w    z80_ptr(CREDITS_CALL20)
(1)  374/   C8EBD : AC12 AB0C AC06 AB0C 	dc.b	nG3, $12, nFs3, $0C, nG3, $06, nFs3, $0C
(1)  375/   C8EC5 : (MACRO)             	smpsCall            Credits_Call20
(1)  375/   C8EC5 : F8                          dc.b    $F8
(1)  375/   C8EC6 : D08F                                dc.w    z80_ptr(CREDITS_CALL20)
(1)  376/   C8EC8 : B312 B20C B306 B20C 	dc.b	nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
(1)  377/   C8ED0 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop23
(1)  377/   C8ED0 : F7                          dc.b    $F7
(1)  377/   C8ED1 : 0002                        dc.b    $00,$02
(1)  377/   C8ED3 : BA8E                                dc.w    z80_ptr(CREDITS_LOOP23)
(1)  378/   C8ED5 : AC06 80A9 80AA 80AB 	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, nG3, nE3
            C8EDD : 80AC ACA9         
(1)  379/   C8EE1 : 80AA 80AC 80A9 80A9 	dc.b	nRst, nF3, nRst, nG3, nRst, nE3, nRst, nE3, nRst, nAb3, nRst, nAb3
            C8EE9 : 80AD 80AD         
(1)  380/   C8EED : 80B0 80B0 80B3 80B3 	dc.b	nRst, nB3, nRst, nB3, nRst, nD4, nRst, nD4, nRst, nRst, $0C, nA2
            C8EF5 : 8080 0CA2         
(1)  381/   C8EF9 : 1280 06A2 12AD AE06 	dc.b	$12, nRst, $06, nA2, $12, nAb3, nA3, $06, nRst
            C8F01 : 80               
(1)  382/   C8F02 : (MACRO)             	smpsAlterVol        $FD
(1)  382/   C8F02 : E6FD                        dc.b    $E6,$FD
(1)  383/   C8F04 : A26C                	dc.b	nA2, $6C
(1)  384/   C8F06 : (MACRO)             	smpsStop
(1)  384/   C8F06 : F2                          dc.b    $F2
(1)  385/   C8F07 :                     
(1)  386/   C8F07 :                     Credits_Call14:
(1)  387/   C8F07 : 800C C406 80C6 80C4 	dc.b	nRst, $0C, nG5, $06, nRst, nA5, nRst, nG5, nRst, nC6, nRst, nC6
            C8F0F : 80C9 80C9         
(1)  388/   C8F13 : 80CB CD80 0C80 CB18 	dc.b	nRst, nD6, nE6, nRst, $0C, nRst, nD6, $18, nA5, $06, nRst, nC6
            C8F1B : C606 80C9         
(1)  389/   C8F1F : C980 CB0C 8012 801E 	dc.b	nC6, nRst, nD6, $0C, nRst, $12, nRst, $1E, nBb5, $06, nC6, nBb5
            C8F27 : C706 C9C7         
(1)  390/   C8F2B : CB80 C980 C7C9 80C6 	dc.b	nD6, nRst, nC6, nRst, nBb5, nC6, nRst, nA5, smpsNoAttack, nA5, $30, smpsNoAttack
            C8F33 : E7C6 30E7         
(1)  391/   C8F37 : 1880 18             	dc.b	$18, nRst, $18
(1)  392/   C8F3A : (MACRO)             	smpsReturn
(1)  392/   C8F3A : F9                                  dc.b    $F9
(1)  393/   C8F3B :                     
(1)  394/   C8F3B :                     Credits_Call1B:
(1)  395/   C8F3B : 9F04 8008 9F0C      	dc.b	nFs2, $04, nRst, $08, nFs2, $0C
(1)  396/   C8F41 : (MACRO)             	smpsLoop            $00, $03, Credits_Call1B
(1)  396/   C8F41 : F7                          dc.b    $F7
(1)  396/   C8F42 : 0003                        dc.b    $00,$03
(1)  396/   C8F44 : 3B8F                                dc.w    z80_ptr(CREDITS_CALL1B)
(1)  397/   C8F46 : 06AB 9F0C           	dc.b	$06, nFs3, nFs2, $0C
(1)  398/   C8F4A : (MACRO)             	smpsReturn
(1)  398/   C8F4A : F9                                  dc.b    $F9
(1)  399/   C8F4B :                     
(1)  400/   C8F4B :                     Credits_Call06:
(1)  401/   C8F4B : B808 BABC B630 E730 	dc.b	nG4, $08, nA4, nB4, nF4, $30, smpsNoAttack, $30, smpsNoAttack, nF4, nRst, $18
            C8F53 : E7B6 8018         
(1)  402/   C8F57 : B808 BABC B630 E730 	dc.b	nG4, $08, nA4, nB4, nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack
            C8F5F : E730 E7            
(1)  403/   C8F62 : (MACRO)             	smpsReturn
(1)  403/   C8F62 : F9                                  dc.b    $F9
(1)  404/   C8F63 :                     
(1)  405/   C8F63 :                     Credits_Call16:
(1)  406/   C8F63 : BF06 BDBF 12C2 BF0C 	dc.b	nD5, $06, nC5, nD5, $12, nF5, nD5, $0C, nE5, nRst, $06, nRst
            C8F6B : C180 0680         
(1)  407/   C8F6F : 12C4 0CC2 0680 C9C6 	dc.b	$12, nG5, $0C, nF5, $06, nRst, nC6, nA5, $3C, nRst, $06, nRst
            C8F77 : 3C80 0680         
(1)  408/   C8F7B : 0CC7 12C6 C406 C2C1 	dc.b	$0C, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
            C8F83 : 18               
(1)  409/   C8F84 : (MACRO)             	smpsReturn
(1)  409/   C8F84 : F9                                  dc.b    $F9
(1)  410/   C8F85 :                     
(1)  411/   C8F85 :                     Credits_Call10:
(1)  412/   C8F85 : CE15 CD03 CB06 80C9 	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
            C8F8D : 0CCD 0680         
(1)  413/   C8F91 : C90C CB06 8012 8060 	dc.b	nC6, $0C, nD6, $06, nRst, $12, nRst, $60
(1)  414/   C8F99 : (MACRO)             	smpsReturn
(1)  414/   C8F99 : F9                                  dc.b    $F9
(1)  415/   C8F9A :                     
(1)  416/   C8F9A :                     Credits_Call1C:
(1)  417/   C8F9A : A20C AEAC 08AE 04AC 	dc.b	nA2, $0C, nA3, nG3, $08, nA3, $04, nG3, $08, nE3, $04, nD3
            C8FA2 : 08A9 04A7         
(1)  418/   C8FA6 : 0804                	dc.b	$08, $04
(1)  419/   C8FA8 : (MACRO)             	smpsReturn
(1)  419/   C8FA8 : F9                                  dc.b    $F9
(1)  420/   C8FA9 :                     
(1)  421/   C8FA9 :                     Credits_Call1D:
(1)  422/   C8FA9 : 800C B1AE 0606 AC0C 	dc.b	nRst, $0C, nC4, nA3, $06, $06, nG3, $0C, nRst, nB3, nA3, $06
            C8FB1 : 80B0 AE06         
(1)  423/   C8FB5 : 06AC 0C             	dc.b	$06, nG3, $0C
(1)  424/   C8FB8 : (MACRO)             	smpsReturn
(1)  424/   C8FB8 : F9                                  dc.b    $F9
(1)  425/   C8FB9 :                     
(1)  426/   C8FB9 :                     Credits_Call1E:
(1)  427/   C8FB9 : AEAC 0606 AA0C 80AC 	dc.b	nA3, nG3, $06, $06, nF3, $0C, nRst, nG3, $0C, $06, $06, nA3
            C8FC1 : 0C06 06AE         
(1)  428/   C8FC5 : AC                  	dc.b	nG3
(1)  429/   C8FC6 : (MACRO)             	smpsReturn
(1)  429/   C8FC6 : F9                                  dc.b    $F9
(1)  430/   C8FC7 :                     
(1)  431/   C8FC7 :                     Credits_Call1F:
(1)  432/   C8FC7 : BA04 8008 B818 B5B1 	dc.b	nA4, $04, nRst, $08, nG4, $18, nE4, nC4
(1)  433/   C8FCF : (MACRO)             	smpsReturn
(1)  433/   C8FCF : F9                                  dc.b    $F9
(1)  434/   C8FD0 :                     
(1)  435/   C8FD0 :                     Credits_Call20:
(1)  436/   C8FD0 : AE06 80AE 80A9 80A9 	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst
            C8FD8 : 80               
(1)  437/   C8FD9 : (MACRO)             	smpsReturn
(1)  437/   C8FD9 : F9                                  dc.b    $F9
(1)  438/   C8FDA :                     
(1)  439/   C8FDA :                     Credits_Call1A:
(1)  440/   C8FDA : 8A0C                	dc.b	nA0, $0C
(1)  441/   C8FDC : (MACRO)             	smpsLoop            $00, $08, Credits_Call1A
(1)  441/   C8FDC : F7                          dc.b    $F7
(1)  441/   C8FDD : 0008                        dc.b    $00,$08
(1)  441/   C8FDF : DA8F                                dc.w    z80_ptr(CREDITS_CALL1A)
(1)  442/   C8FE1 : (MACRO)             	smpsReturn
(1)  442/   C8FE1 : F9                                  dc.b    $F9
(1)  443/   C8FE2 :                     
(1)  444/   C8FE2 :                     ; FM3 Data
(1)  445/   C8FE2 :                     Credits_FM3:
(1)  446/   C8FE2 : 8060                	dc.b	nRst, $60
(1)  447/   C8FE4 : (MACRO)             	smpsCall            Credits_Call0C
(1)  447/   C8FE4 : F8                          dc.b    $F8
(1)  447/   C8FE5 : 1592                                dc.w    z80_ptr(CREDITS_CALL0C)
(1)  448/   C8FE7 : (MACRO)             	smpsAlterPitch      $18
(1)  448/   C8FE7 :  (MACRO-2)                  smpsChangeTransposition $18
(1)  448/   C8FE7 : FB18                                dc.b    $FB,$18
(1)  449/   C8FE9 : (MACRO)             	smpsSetvoice        $02
(1)  449/   C8FE9 :  (MACRO-2)                  smpsFMvoice $02
(1)  449/   C8FE9 : EF02                                dc.b    $EF,$02
(1)  450/   C8FEB : (MACRO)             	smpsCall            Credits_Call13
(1)  450/   C8FEB : F8                          dc.b    $F8
(1)  450/   C8FEC : F091                                dc.w    z80_ptr(CREDITS_CALL13)
(1)  451/   C8FEE : B83C                	dc.b	nG4, $3C
(1)  452/   C8FF0 : (MACRO)             	smpsCall            Credits_Call13
(1)  452/   C8FF0 : F8                          dc.b    $F8
(1)  452/   C8FF1 : F091                                dc.w    z80_ptr(CREDITS_CALL13)
(1)  453/   C8FF3 : BD3C                	dc.b	nC5, $3C
(1)  454/   C8FF5 : (MACRO)             	smpsAlterPitch      $E8
(1)  454/   C8FF5 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  454/   C8FF5 : FBE8                                dc.b    $FB,$E8
(1)  455/   C8FF7 : (MACRO)             	smpsAlterVol        $02
(1)  455/   C8FF7 : E602                        dc.b    $E6,$02
(1)  456/   C8FF9 : (MACRO)             	smpsAlterNote       $03
(1)  456/   C8FF9 :  (MACRO-2)                  smpsDetune      $03
(1)  456/   C8FF9 : E103                        dc.b    $E1,$03
(1)  457/   C8FFB : (MACRO)             	smpsSetvoice        $04
(1)  457/   C8FFB :  (MACRO-2)                  smpsFMvoice $04
(1)  457/   C8FFB : EF04                                dc.b    $EF,$04
(1)  458/   C8FFD : (MACRO)             	smpsPan             panLeft, $00
(1)  458/   C8FFD : =$0                 panNone set $00
(1)  458/   C8FFD : =$40                panRight set $40
(1)  458/   C8FFD : =$80                panLeft set $80
(1)  458/   C8FFD : =$C0                panCentre set $C0
(1)  458/   C8FFD : =$C0                panCenter set $C0 ; silly Americans :U
(1)  458/   C8FFD : E080                        dc.b $E0,PANLEFT+$00
(1)  459/   C8FFF :                     
(1)  460/   C8FFF :                     Credits_Loop12:
(1)  461/   C8FFF : (MACRO)             	smpsCall            Credits_Call14
(1)  461/   C8FFF : F8                          dc.b    $F8
(1)  461/   C9000 : 078F                                dc.w    z80_ptr(CREDITS_CALL14)
(1)  462/   C9002 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop12
(1)  462/   C9002 : F7                          dc.b    $F7
(1)  462/   C9003 : 0002                        dc.b    $00,$02
(1)  462/   C9005 : FF8F                                dc.w    z80_ptr(CREDITS_LOOP12)
(1)  463/   C9007 : (MACRO)             	smpsSetvoice        $09
(1)  463/   C9007 :  (MACRO-2)                  smpsFMvoice $09
(1)  463/   C9007 : EF09                                dc.b    $EF,$09
(1)  464/   C9009 : (MACRO)             	smpsAlterPitch      $0C
(1)  464/   C9009 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  464/   C9009 : FB0C                                dc.b    $FB,$0C
(1)  465/   C900B : (MACRO)             	smpsAlterVol        $FD
(1)  465/   C900B : E6FD                        dc.b    $E6,$FD
(1)  466/   C900D : (MACRO)             	smpsPan             panRight, $00
(1)  466/   C900D : =$0                 panNone set $00
(1)  466/   C900D : =$40                panRight set $40
(1)  466/   C900D : =$80                panLeft set $80
(1)  466/   C900D : =$C0                panCentre set $C0
(1)  466/   C900D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  466/   C900D : E040                        dc.b $E0,PANRIGHT+$00
(1)  467/   C900F : (MACRO)             	smpsModSet          $06, $01, $05, $04
(1)  467/   C900F : F0                          dc.b    $F0
(1)  467/   C9010 : 0701 0505                           dc.b    $06+1,$01,$05,(($04+1) * $01) & $FF
(1)  467/   C9014 :                             ;dc.b   $01,$05,$04
(1)  468/   C9014 : (MACRO)             	smpsAlterNote       $00
(1)  468/   C9014 :  (MACRO-2)                  smpsDetune      $00
(1)  468/   C9014 : E100                        dc.b    $E1,$00
(1)  469/   C9016 :                     
(1)  470/   C9016 :                     Credits_Loop13:
(1)  471/   C9016 : 9F0C AB06 80A9 80AB 	dc.b	nFs2, $0C, nFs3, $06, nRst, nE3, nRst, nFs3, nFs2, nRst, nFs2, nFs3
            C901E : 9F80 9FAB         
(1)  472/   C9022 : 80A9 80AB 0C        	dc.b	nRst, nE3, nRst, nFs3, $0C
(1)  473/   C9027 : (MACRO)             	smpsLoop            $00, $03, Credits_Loop13
(1)  473/   C9027 : F7                          dc.b    $F7
(1)  473/   C9028 : 0003                        dc.b    $00,$03
(1)  473/   C902A : 1690                                dc.w    z80_ptr(CREDITS_LOOP13)
(1)  474/   C902C : 9D0C A906 80A8 80A9 	dc.b	nE2, $0C, nE3, $06, nRst, nEb3, nRst, nE3, nEb2, nRst, nEb2, nEb3
            C9034 : 9C80 9CA8         
(1)  475/   C9038 : 80A6 80A8 0C        	dc.b	nRst, nCs3, nRst, nEb3, $0C
(1)  476/   C903D : (MACRO)             	smpsLoop            $01, $02, Credits_Loop13
(1)  476/   C903D : F7                          dc.b    $F7
(1)  476/   C903E : 0102                        dc.b    $01,$02
(1)  476/   C9040 : 1690                                dc.w    z80_ptr(CREDITS_LOOP13)
(1)  477/   C9042 : 8060                	dc.b	nRst, $60
(1)  478/   C9044 : (MACRO)             	smpsSetvoice        $0D
(1)  478/   C9044 :  (MACRO-2)                  smpsFMvoice $0D
(1)  478/   C9044 : EF0D                                dc.b    $EF,$0D
(1)  479/   C9046 : (MACRO)             	smpsAlterVol        $FB
(1)  479/   C9046 : E6FB                        dc.b    $E6,$FB
(1)  480/   C9048 : (MACRO)             	smpsPan             panCenter, $00
(1)  480/   C9048 : =$0                 panNone set $00
(1)  480/   C9048 : =$40                panRight set $40
(1)  480/   C9048 : =$80                panLeft set $80
(1)  480/   C9048 : =$C0                panCentre set $C0
(1)  480/   C9048 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  480/   C9048 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  481/   C904A : (MACRO)             	smpsModOff
(1)  481/   C904A : FA                                  dc.b    $FA
(1)  482/   C904B : 8060                	dc.b	nRst, $60
(1)  483/   C904D :                     
(1)  484/   C904D :                     Credits_Loop14:
(1)  485/   C904D : (MACRO)             	smpsCall            Credits_Call15
(1)  485/   C904D : F8                          dc.b    $F8
(1)  485/   C904E : A291                                dc.w    z80_ptr(CREDITS_CALL15)
(1)  486/   C9050 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop14
(1)  486/   C9050 : F7                          dc.b    $F7
(1)  486/   C9051 : 0002                        dc.b    $00,$02
(1)  486/   C9053 : 4D90                                dc.w    z80_ptr(CREDITS_LOOP14)
(1)  487/   C9055 : 8060                	dc.b	nRst, $60
(1)  488/   C9057 : (MACRO)             	smpsSetvoice        $0F
(1)  488/   C9057 :  (MACRO-2)                  smpsFMvoice $0F
(1)  488/   C9057 : EF0F                                dc.b    $EF,$0F
(1)  489/   C9059 : (MACRO)             	smpsPan             panLeft, $00
(1)  489/   C9059 : =$0                 panNone set $00
(1)  489/   C9059 : =$40                panRight set $40
(1)  489/   C9059 : =$80                panLeft set $80
(1)  489/   C9059 : =$C0                panCentre set $C0
(1)  489/   C9059 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  489/   C9059 : E080                        dc.b $E0,PANLEFT+$00
(1)  490/   C905B : (MACRO)             	smpsAlterVol        $0B
(1)  490/   C905B : E60B                        dc.b    $E6,$0B
(1)  491/   C905D : (MACRO)             	smpsCall            Credits_Call16
(1)  491/   C905D : F8                          dc.b    $F8
(1)  491/   C905E : 638F                                dc.w    z80_ptr(CREDITS_CALL16)
(1)  492/   C9060 : C418 C348 800C      	dc.b	nG5, $18, nFs5, $48, nRst, $0C
(1)  493/   C9066 : (MACRO)             	smpsCall            Credits_Call16
(1)  493/   C9066 : F8                          dc.b    $F8
(1)  493/   C9067 : 638F                                dc.w    z80_ptr(CREDITS_CALL16)
(1)  494/   C9069 : BE0C                	dc.b	nCs5, $0C
(1)  495/   C906B : (MACRO)             	smpsModSet          $18, $01, $03, $04
(1)  495/   C906B : F0                          dc.b    $F0
(1)  495/   C906C : 1901 0305                           dc.b    $18+1,$01,$03,(($04+1) * $01) & $FF
(1)  495/   C9070 :                             ;dc.b   $01,$03,$04
(1)  496/   C9070 : (MACRO)             	smpsAlterVol        $F3
(1)  496/   C9070 : E6F3                        dc.b    $E6,$F3
(1)  497/   C9072 : (MACRO)             	smpsPan             panCenter, $00
(1)  497/   C9072 : =$0                 panNone set $00
(1)  497/   C9072 : =$40                panRight set $40
(1)  497/   C9072 : =$80                panLeft set $80
(1)  497/   C9072 : =$C0                panCentre set $C0
(1)  497/   C9072 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  497/   C9072 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  498/   C9074 : (MACRO)             	smpsSetvoice        $14
(1)  498/   C9074 :  (MACRO-2)                  smpsFMvoice $14
(1)  498/   C9074 : EF14                                dc.b    $EF,$14
(1)  499/   C9076 : A214 A404 A504 8008 	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
            C907E : A904 8008         
(1)  500/   C9082 : A804 8008 A904 8008 	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
            C908A : AC08 A910         
(1)  501/   C908E :                     
(1)  502/   C908E :                     Credits_Loop15:
(1)  503/   C908E : 8030                	dc.b	nRst, $30
(1)  504/   C9090 : (MACRO)             	smpsLoop            $00, $0A, Credits_Loop15
(1)  504/   C9090 : F7                          dc.b    $F7
(1)  504/   C9091 : 000A                        dc.b    $00,$0A
(1)  504/   C9093 : 8E90                                dc.w    z80_ptr(CREDITS_LOOP15)
(1)  505/   C9095 : (MACRO)             	smpsSetvoice        $18
(1)  505/   C9095 :  (MACRO-2)                  smpsFMvoice $18
(1)  505/   C9095 : EF18                                dc.b    $EF,$18
(1)  506/   C9097 : (MACRO)             	smpsAlterPitch      $F4
(1)  506/   C9097 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  506/   C9097 : FBF4                                dc.b    $FB,$F4
(1)  507/   C9099 : (MACRO)             	smpsAlterVol        $08
(1)  507/   C9099 : E608                        dc.b    $E6,$08
(1)  508/   C909B : (MACRO)             	smpsModOff
(1)  508/   C909B : FA                                  dc.b    $FA
(1)  509/   C909C : (MACRO)             	smpsPan             panRight, $00
(1)  509/   C909C : =$0                 panNone set $00
(1)  509/   C909C : =$40                panRight set $40
(1)  509/   C909C : =$80                panLeft set $80
(1)  509/   C909C : =$C0                panCentre set $C0
(1)  509/   C909C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  509/   C909C : E040                        dc.b $E0,PANRIGHT+$00
(1)  510/   C909E : 8060 8030 C606 80C2 	dc.b	nRst, $60, nRst, $30, nA5, $06, nRst, nF5, $0C, nG5, $09, nF5
            C90A6 : 0CC4 09C2         
(1)  511/   C90AA : 03BF 0C80 6080 3C80 	dc.b	$03, nD5, $0C, nRst, $60, nRst, $3C, nRst, $60
            C90B2 : 60               
(1)  512/   C90B3 : (MACRO)             	smpsSetvoice        $1B
(1)  512/   C90B3 :  (MACRO-2)                  smpsFMvoice $1B
(1)  512/   C90B3 : EF1B                                dc.b    $EF,$1B
(1)  513/   C90B5 : (MACRO)             	smpsAlterVol        $FB
(1)  513/   C90B5 : E6FB                        dc.b    $E6,$FB
(1)  514/   C90B7 : (MACRO)             	smpsPan             panCenter, $00
(1)  514/   C90B7 : =$0                 panNone set $00
(1)  514/   C90B7 : =$40                panRight set $40
(1)  514/   C90B7 : =$80                panLeft set $80
(1)  514/   C90B7 : =$C0                panCentre set $C0
(1)  514/   C90B7 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  514/   C90B7 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  515/   C90B9 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  515/   C90B9 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  515/   C90B9 : E806                                dc.b    $E8,$06
(1)  516/   C90BB : C406 06C6 C9C9 C6   	dc.b	nG5, $06, $06, nA5, nC6, nC6, nA5
(1)  517/   C90C2 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  517/   C90C2 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  517/   C90C2 : E800                                dc.b    $E8,$00
(1)  518/   C90C4 : CD0C                	dc.b	nE6, $0C
(1)  519/   C90C6 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  519/   C90C6 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  519/   C90C6 : E806                                dc.b    $E8,$06
(1)  520/   C90C8 : C906 C6C9 0C80 8012 	dc.b	nC6, $06, nA5, nC6, $0C, nRst, nRst, $12
(1)  521/   C90D0 : (MACRO)             	smpsSetvoice        $1C
(1)  521/   C90D0 :  (MACRO-2)                  smpsFMvoice $1C
(1)  521/   C90D0 : EF1C                                dc.b    $EF,$1C
(1)  522/   C90D2 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  522/   C90D2 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  522/   C90D2 : E800                                dc.b    $E8,$00
(1)  523/   C90D4 : BDBA 0C             	dc.b	nC5, nA4, $0C
(1)  524/   C90D7 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  524/   C90D7 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  524/   C90D7 : E806                                dc.b    $E8,$06
(1)  525/   C90D9 : (MACRO)             	smpsSetvoice        $1B
(1)  525/   C90D9 :  (MACRO-2)                  smpsFMvoice $1B
(1)  525/   C90D9 : EF1B                                dc.b    $EF,$1B
(1)  526/   C90DB : CE06 CE80 CE80 CE   	dc.b	nF6, $06, nF6, nRst, nF6, nRst, nF6
(1)  527/   C90E2 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  527/   C90E2 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  527/   C90E2 : E800                                dc.b    $E8,$00
(1)  528/   C90E4 : CF0C D080           	dc.b	nFs6, $0C, nG6, nRst
(1)  529/   C90E8 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  529/   C90E8 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  529/   C90E8 : E806                                dc.b    $E8,$06
(1)  530/   C90EA : D006 06D2 D0        	dc.b	nG6, $06, $06, nA6, nG6
(1)  531/   C90EF : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  531/   C90EF :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  531/   C90EF : E800                                dc.b    $E8,$00
(1)  532/   C90F1 : CD0C                	dc.b	nE6, $0C
(1)  533/   C90F3 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  533/   C90F3 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  533/   C90F3 : E806                                dc.b    $E8,$06
(1)  534/   C90F5 : C906 C6C9 0C        	dc.b	nC6, $06, nA5, nC6, $0C
(1)  535/   C90FA : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  535/   C90FA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  535/   C90FA : E800                                dc.b    $E8,$00
(1)  536/   C90FC : (MACRO)             	smpsSetvoice        $1C
(1)  536/   C90FC :  (MACRO-2)                  smpsFMvoice $1C
(1)  536/   C90FC : EF1C                                dc.b    $EF,$1C
(1)  537/   C90FE : 801E C20C C2BD 0680 	dc.b	nRst, $1E, nF5, $0C, nF5, nC5, $06, nRst, $60, nRst, $60
            C9106 : 6080 60            
(1)  538/   C9109 : (MACRO)             	smpsSetvoice        $00
(1)  538/   C9109 :  (MACRO-2)                  smpsFMvoice $00
(1)  538/   C9109 : EF00                                dc.b    $EF,$00
(1)  539/   C910B : (MACRO)             	smpsAlterPitch      $18
(1)  539/   C910B :  (MACRO-2)                  smpsChangeTransposition $18
(1)  539/   C910B : FB18                                dc.b    $FB,$18
(1)  540/   C910D : 8060 800C AC06 AEB1 	dc.b	nRst, $60, nRst, $0C, nG3, $06, nA3, nC4, nRst, $12, nG3, $06
            C9115 : 8012 AC06         
(1)  541/   C9119 : AEB1 80B4 B180 B180 	dc.b	nA3, nC4, nRst, nEb4, nC4, nRst, nC4, nRst, $60, nRst, $06, nBb3
            C9121 : 6080 06AF         
(1)  542/   C9125 : 12AE 0680 12AF 0680 	dc.b	$12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3, nRst, nBb3, nC4
            C912D : AE80 AFB1         
(1)  543/   C9131 : 80B1 8060           	dc.b	nRst, nC4, nRst, $60
(1)  544/   C9135 : (MACRO)             	smpsSetvoice        $22
(1)  544/   C9135 :  (MACRO-2)                  smpsFMvoice $22
(1)  544/   C9135 : EF22                                dc.b    $EF,$22
(1)  545/   C9137 : (MACRO)             	smpsAlterPitch      $DC
(1)  545/   C9137 :  (MACRO-2)                  smpsChangeTransposition $DC
(1)  545/   C9137 : FBDC                                dc.b    $FB,$DC
(1)  546/   C9139 : (MACRO)             	smpsAlterVol        $FF
(1)  546/   C9139 : E6FF                        dc.b    $E6,$FF
(1)  547/   C913B : (MACRO)             	smpsPan             panLeft, $00
(1)  547/   C913B : =$0                 panNone set $00
(1)  547/   C913B : =$40                panRight set $40
(1)  547/   C913B : =$80                panLeft set $80
(1)  547/   C913B : =$C0                panCentre set $C0
(1)  547/   C913B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  547/   C913B : E080                        dc.b $E0,PANLEFT+$00
(1)  548/   C913D : 8060                	dc.b	nRst, $60
(1)  549/   C913F : (MACRO)             	smpsCall            Credits_Call17
(1)  549/   C913F : F8                          dc.b    $F8
(1)  549/   C9140 : B491                                dc.w    z80_ptr(CREDITS_CALL17)
(1)  550/   C9142 : CD30 CB18 CD0C CBC9 	dc.b	nE6, $30, nD6, $18, nE6, $0C, nD6, nC6, $30, nF6
            C914A : 30CE               
(1)  551/   C914C : (MACRO)             	smpsCall            Credits_Call18
(1)  551/   C914C : F8                          dc.b    $F8
(1)  551/   C914D : 0192                                dc.w    z80_ptr(CREDITS_CALL18)
(1)  552/   C914F : (MACRO)             	smpsAlterVol        $04
(1)  552/   C914F : E604                        dc.b    $E6,$04
(1)  553/   C9151 : (MACRO)             	smpsCall            Credits_Call18
(1)  553/   C9151 : F8                          dc.b    $F8
(1)  553/   C9152 : 0192                                dc.w    z80_ptr(CREDITS_CALL18)
(1)  554/   C9154 : (MACRO)             	smpsAlterVol        $FC
(1)  554/   C9154 : E6FC                        dc.b    $E6,$FC
(1)  555/   C9156 : 80C4 80C4 80C6 1808 	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, $18, $08, nG5, $04
            C915E : C404               
(1)  556/   C9160 : (MACRO)             	smpsAlterPitch      $0C
(1)  556/   C9160 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  556/   C9160 : FB0C                                dc.b    $FB,$0C
(1)  557/   C9162 : (MACRO)             	smpsAlterVol        $FF
(1)  557/   C9162 : E6FF                        dc.b    $E6,$FF
(1)  558/   C9164 : (MACRO)             	smpsPan             panCenter, $00
(1)  558/   C9164 : =$0                 panNone set $00
(1)  558/   C9164 : =$40                panRight set $40
(1)  558/   C9164 : =$80                panLeft set $80
(1)  558/   C9164 : =$C0                panCentre set $C0
(1)  558/   C9164 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  558/   C9164 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  559/   C9166 : (MACRO)             	smpsSetvoice        $00
(1)  559/   C9166 :  (MACRO-2)                  smpsFMvoice $00
(1)  559/   C9166 : EF00                                dc.b    $EF,$00
(1)  560/   C9168 : 8060                	dc.b	nRst, $60
(1)  561/   C916A :                     
(1)  562/   C916A :                     Credits_Loop16:
(1)  563/   C916A : (MACRO)             	smpsCall            Credits_Call19
(1)  563/   C916A : F8                          dc.b    $F8
(1)  563/   C916B : 0B92                                dc.w    z80_ptr(CREDITS_CALL19)
(1)  564/   C916D : CB12 CB1E           	dc.b	nD6, $12, nD6, $1E
(1)  565/   C9171 : (MACRO)             	smpsCall            Credits_Call19
(1)  565/   C9171 : F8                          dc.b    $F8
(1)  565/   C9172 : 0B92                                dc.w    z80_ptr(CREDITS_CALL19)
(1)  566/   C9174 : D012 D01E           	dc.b	nG6, $12, nG6, $1E
(1)  567/   C9178 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop16
(1)  567/   C9178 : F7                          dc.b    $F7
(1)  567/   C9179 : 0002                        dc.b    $00,$02
(1)  567/   C917B : 6A91                                dc.w    z80_ptr(CREDITS_LOOP16)
(1)  568/   C917D : 800C CB12 8006 CB80 	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
            C9185 : CA12 CBCA         
(1)  569/   C9189 : 0CC5 18C8 CBD1 800C 	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
            C9191 : CD80 CD12         
(1)  570/   C9195 : CCCD 0680           	dc.b	nEb6, nE6, $06, nRst
(1)  571/   C9199 : (MACRO)             	smpsAlterVol        $F8
(1)  571/   C9199 : E6F8                        dc.b    $E6,$F8
(1)  572/   C919B : (MACRO)             	smpsSetvoice        $01
(1)  572/   C919B :  (MACRO-2)                  smpsFMvoice $01
(1)  572/   C919B : EF01                                dc.b    $EF,$01
(1)  573/   C919D : (MACRO)             	smpsAlterNote       $03
(1)  573/   C919D :  (MACRO-2)                  smpsDetune      $03
(1)  573/   C919D : E103                        dc.b    $E1,$03
(1)  574/   C919F : A26C                	dc.b	nA2, $6C
(1)  575/   C91A1 : (MACRO)             	smpsStop
(1)  575/   C91A1 : F2                          dc.b    $F2
(1)  576/   C91A2 :                     
(1)  577/   C91A2 :                     Credits_Call15:
(1)  578/   C91A2 : 8060 BC06 BDBC B8BA 	dc.b	nRst, $60, nB4, $06, nC5, nB4, nG4, nA4, nF4, $0C, nG4, nD4
            C91AA : B60C B8B3         
(1)  579/   C91AE : B306 B60C B8        	dc.b	nD4, $06, nF4, $0C, nG4
(1)  580/   C91B3 : (MACRO)             	smpsReturn
(1)  580/   C91B3 : F9                                  dc.b    $F9
(1)  581/   C91B4 :                     
(1)  582/   C91B4 :                     Credits_Call17:
(1)  583/   C91B4 : 800C CD04 8010 CD04 	dc.b	nRst, $0C, nE6, $04, nRst, $10, nE6, $04, nRst, $0C, nE6, $0C
            C91BC : 800C CD0C         
(1)  584/   C91C0 : CE08 CD04 8018 800C 	dc.b	nF6, $08, nE6, $04, nRst, $18, nRst, $0C, nD6, $04, nRst, $10
            C91C8 : CB04 8010         
(1)  585/   C91CC : CB04 800C CB0C CD08 	dc.b	nD6, $04, nRst, $0C, nD6, $0C, nE6, $08, nD6, $04, nRst, $18
            C91D4 : CB04 8018         
(1)  586/   C91D8 :                     
(1)  587/   C91D8 :                     Credits_Loop42:
(1)  588/   C91D8 : 800C C904 8010 C904 	dc.b	nRst, $0C, nC6, $04, nRst, $10, nC6, $04, nRst, $0C, nC6, $0C
            C91E0 : 800C C90C         
(1)  589/   C91E4 : CB08 C904 8018      	dc.b	nD6, $08, nC6, $04, nRst, $18
(1)  590/   C91EA : (MACRO)             	smpsLoop            $00, $02, Credits_Loop42
(1)  590/   C91EA : F7                          dc.b    $F7
(1)  590/   C91EB : 0002                        dc.b    $00,$02
(1)  590/   C91ED : D891                                dc.w    z80_ptr(CREDITS_LOOP42)
(1)  591/   C91EF : (MACRO)             	smpsReturn
(1)  591/   C91EF : F9                                  dc.b    $F9
(1)  592/   C91F0 :                     
(1)  593/   C91F0 :                     Credits_Call13:
(1)  594/   C91F0 : 8018 B80B 800D BA0C 	dc.b	nRst, $18, nG4, $0B, nRst, $0D, nA4, $0C, $0B, nRst, $19, nC5
            C91F8 : 0B80 19BD         
(1)  595/   C91FC : 0C0B 800D           	dc.b	$0C, $0B, nRst, $0D
(1)  596/   C9200 : (MACRO)             	smpsReturn
(1)  596/   C9200 : F9                                  dc.b    $F9
(1)  597/   C9201 :                     
(1)  598/   C9201 :                     Credits_Call18:
(1)  599/   C9201 : 800C C480 C480 C680 	dc.b	nRst, $0C, nG5, nRst, nG5, nRst, nA5, nRst, nA5
            C9209 : C6               
(1)  600/   C920A : (MACRO)             	smpsReturn
(1)  600/   C920A : F9                                  dc.b    $F9
(1)  601/   C920B :                     
(1)  602/   C920B :                     Credits_Call19:
(1)  603/   C920B : CD06 80CD 80CA 80CA 	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst
            C9213 : 80               
(1)  604/   C9214 : (MACRO)             	smpsReturn
(1)  604/   C9214 : F9                                  dc.b    $F9
(1)  605/   C9215 :                     
(1)  606/   C9215 :                     Credits_Call0C:
(1)  607/   C9215 : (MACRO)             	smpsSetvoice        $05
(1)  607/   C9215 :  (MACRO-2)                  smpsFMvoice $05
(1)  607/   C9215 : EF05                                dc.b    $EF,$05
(1)  608/   C9217 : (MACRO)             	smpsAlterPitch      $F4
(1)  608/   C9217 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  608/   C9217 : FBF4                                dc.b    $FB,$F4
(1)  609/   C9219 : C660 CBCD E7CD C660 	dc.b	nA5, $60, nD6, nE6, smpsNoAttack, nE6, nA5, $60, nG6, nG6, $24, nA6
            C9221 : D0D0 24D2         
(1)  610/   C9225 : 60E7 3C             	dc.b	$60, smpsNoAttack, $3C
(1)  611/   C9228 : (MACRO)             	smpsReturn
(1)  611/   C9228 : F9                                  dc.b    $F9
(1)  612/   C9229 :                     
(1)  613/   C9229 :                     ; FM4 Data
(1)  614/   C9229 :                     Credits_FM4:
(1)  615/   C9229 : 8060                	dc.b	nRst, $60
(1)  616/   C922B : (MACRO)             	smpsAlterPitch      $FB
(1)  616/   C922B :  (MACRO-2)                  smpsChangeTransposition $FB
(1)  616/   C922B : FBFB                                dc.b    $FB,$FB
(1)  617/   C922D : (MACRO)             	smpsAlterVol        $FE
(1)  617/   C922D : E6FE                        dc.b    $E6,$FE
(1)  618/   C922F : (MACRO)             	smpsCall            Credits_Call0C
(1)  618/   C922F : F8                          dc.b    $F8
(1)  618/   C9230 : 1592                                dc.w    z80_ptr(CREDITS_CALL0C)
(1)  619/   C9232 : (MACRO)             	smpsAlterPitch      $1D
(1)  619/   C9232 :  (MACRO-2)                  smpsChangeTransposition $1D
(1)  619/   C9232 : FB1D                                dc.b    $FB,$1D
(1)  620/   C9234 : (MACRO)             	smpsAlterVol        $02
(1)  620/   C9234 : E602                        dc.b    $E6,$02
(1)  621/   C9236 : (MACRO)             	smpsSetvoice        $02
(1)  621/   C9236 :  (MACRO-2)                  smpsFMvoice $02
(1)  621/   C9236 : EF02                                dc.b    $EF,$02
(1)  622/   C9238 : (MACRO)             	smpsCall            Credits_Call0D
(1)  622/   C9238 : F8                          dc.b    $F8
(1)  622/   C9239 : 5E94                                dc.w    z80_ptr(CREDITS_CALL0D)
(1)  623/   C923B : B53C                	dc.b	nE4, $3C
(1)  624/   C923D : (MACRO)             	smpsCall            Credits_Call0D
(1)  624/   C923D : F8                          dc.b    $F8
(1)  624/   C923E : 5E94                                dc.w    z80_ptr(CREDITS_CALL0D)
(1)  625/   C9240 : B83C                	dc.b	nG4, $3C
(1)  626/   C9242 : (MACRO)             	smpsAlterVol        $06
(1)  626/   C9242 : E606                        dc.b    $E6,$06
(1)  627/   C9244 : (MACRO)             	smpsSetvoice        $05
(1)  627/   C9244 :  (MACRO-2)                  smpsFMvoice $05
(1)  627/   C9244 : EF05                                dc.b    $EF,$05
(1)  628/   C9246 : (MACRO)             	smpsModSet          $02, $01, $FE, $04
(1)  628/   C9246 : F0                          dc.b    $F0
(1)  628/   C9247 : 0301 FE05                           dc.b    $02+1,$01,$FE,(($04+1) * $01) & $FF
(1)  628/   C924B :                             ;dc.b   $01,$FE,$04
(1)  629/   C924B :                     
(1)  630/   C924B :                     Credits_Loop0D:
(1)  631/   C924B : C130 E730 C3E7 30BF 	dc.b	nE5, $30, smpsNoAttack, $30, nFs5, smpsNoAttack, $30, nD5, smpsNoAttack, $30, nC5, smpsNoAttack
            C9253 : E730 BDE7         
(1)  632/   C9257 : 30                  	dc.b	$30
(1)  633/   C9258 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop0D
(1)  633/   C9258 : F7                          dc.b    $F7
(1)  633/   C9259 : 0002                        dc.b    $00,$02
(1)  633/   C925B : 4B92                                dc.w    z80_ptr(CREDITS_LOOP0D)
(1)  634/   C925D : (MACRO)             	smpsSetvoice        $0A
(1)  634/   C925D :  (MACRO-2)                  smpsFMvoice $0A
(1)  634/   C925D : EF0A                                dc.b    $EF,$0A
(1)  635/   C925F : (MACRO)             	smpsAlterPitch      $F4
(1)  635/   C925F :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  635/   C925F : FBF4                                dc.b    $FB,$F4
(1)  636/   C9261 : (MACRO)             	smpsAlterVol        $F7
(1)  636/   C9261 : E6F7                        dc.b    $E6,$F7
(1)  637/   C9263 : (MACRO)             	smpsModSet          $0C, $01, $FB, $04
(1)  637/   C9263 : F0                          dc.b    $F0
(1)  637/   C9264 : 0D01 FB05                           dc.b    $0C+1,$01,$FB,(($04+1) * $01) & $FF
(1)  637/   C9268 :                             ;dc.b   $01,$FB,$04
(1)  638/   C9268 :                     
(1)  639/   C9268 :                     Credits_Loop0E:
(1)  640/   C9268 : (MACRO)             	smpsCall            Credits_Call0E
(1)  640/   C9268 : F8                          dc.b    $F8
(1)  640/   C9269 : 6F94                                dc.w    z80_ptr(CREDITS_CALL0E)
(1)  641/   C926B : 8025 C306 C380 0CC3 	dc.b	nRst, $25, nFs5, $06, nFs5, nRst, $0C, nFs5, $06, nFs5, $05, nRst
            C9273 : 06C3 0580         
(1)  642/   C9277 : 0DC3 06C5 30E7 06   	dc.b	$0D, nFs5, $06, nAb5, $30, smpsNoAttack, $06
(1)  643/   C927E : (MACRO)             	smpsCall            Credits_Call0E
(1)  643/   C927E : F8                          dc.b    $F8
(1)  643/   C927F : 6F94                                dc.w    z80_ptr(CREDITS_CALL0E)
(1)  644/   C9281 : 8031 8060           	dc.b	nRst, $31, nRst, $60
(1)  645/   C9285 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop0E
(1)  645/   C9285 : F7                          dc.b    $F7
(1)  645/   C9286 : 0002                        dc.b    $00,$02
(1)  645/   C9288 : 6892                                dc.w    z80_ptr(CREDITS_LOOP0E)
(1)  646/   C928A : 8060 8048           	dc.b	nRst, $60, nRst, $48
(1)  647/   C928E : (MACRO)             	smpsSetvoice        $0C
(1)  647/   C928E :  (MACRO-2)                  smpsFMvoice $0C
(1)  647/   C928E : EF0C                                dc.b    $EF,$0C
(1)  648/   C9290 : (MACRO)             	smpsAlterVol        $05
(1)  648/   C9290 : E605                        dc.b    $E6,$05
(1)  649/   C9292 : (MACRO)             	smpsModOff
(1)  649/   C9292 : FA                                  dc.b    $FA
(1)  650/   C9293 : (MACRO)             	smpsAlterNote       $02
(1)  650/   C9293 :  (MACRO-2)                  smpsDetune      $02
(1)  650/   C9293 : E102                        dc.b    $E1,$02
(1)  651/   C9295 : (MACRO)             	smpsPan             panLeft, $00
(1)  651/   C9295 : =$0                 panNone set $00
(1)  651/   C9295 : =$40                panRight set $40
(1)  651/   C9295 : =$80                panLeft set $80
(1)  651/   C9295 : =$C0                panCentre set $C0
(1)  651/   C9295 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  651/   C9295 : E080                        dc.b $E0,PANLEFT+$00
(1)  652/   C9297 : (MACRO)             	smpsCall            Credits_Call06
(1)  652/   C9297 : F8                          dc.b    $F8
(1)  652/   C9298 : 4B8F                                dc.w    z80_ptr(CREDITS_CALL06)
(1)  653/   C929A : 2480 0C80 60        	dc.b	$24, nRst, $0C, nRst, $60
(1)  654/   C929F : (MACRO)             	smpsSetvoice        $10
(1)  654/   C929F :  (MACRO-2)                  smpsFMvoice $10
(1)  654/   C929F : EF10                                dc.b    $EF,$10
(1)  655/   C92A1 : (MACRO)             	smpsAlterVol        $F7
(1)  655/   C92A1 : E6F7                        dc.b    $E6,$F7
(1)  656/   C92A3 : (MACRO)             	smpsAlterNote       $00
(1)  656/   C92A3 :  (MACRO-2)                  smpsDetune      $00
(1)  656/   C92A3 : E100                        dc.b    $E1,$00
(1)  657/   C92A5 : (MACRO)             	smpsPan             panRight, $00
(1)  657/   C92A5 : =$0                 panNone set $00
(1)  657/   C92A5 : =$40                panRight set $40
(1)  657/   C92A5 : =$80                panLeft set $80
(1)  657/   C92A5 : =$C0                panCentre set $C0
(1)  657/   C92A5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  657/   C92A5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  658/   C92A7 : (MACRO)             	smpsCall            Credits_Call0F
(1)  658/   C92A7 : F8                          dc.b    $F8
(1)  658/   C92A8 : 8294                                dc.w    z80_ptr(CREDITS_CALL0F)
(1)  659/   C92AA : B3B7 06AE 0CB1 B3B7 	dc.b	nD4, nFs4, $06, nA3, $0C, nC4, nD4, nFs4, $06, nRst, nFs4, nA3
            C92B2 : 0680 B7AE         
(1)  660/   C92B6 : 0CB1                	dc.b	$0C, nC4
(1)  661/   C92B8 : (MACRO)             	smpsCall            Credits_Call0F
(1)  661/   C92B8 : F8                          dc.b    $F8
(1)  661/   C92B9 : 8294                                dc.w    z80_ptr(CREDITS_CALL0F)
(1)  662/   C92BB : (MACRO)             	smpsSetvoice        $15
(1)  662/   C92BB :  (MACRO-2)                  smpsFMvoice $15
(1)  662/   C92BB : EF15                                dc.b    $EF,$15
(1)  663/   C92BD : (MACRO)             	smpsAlterVol        $01
(1)  663/   C92BD : E601                        dc.b    $E6,$01
(1)  664/   C92BF : (MACRO)             	smpsCall            Credits_Call07
(1)  664/   C92BF : F8                          dc.b    $F8
(1)  664/   C92C0 : DD93                                dc.w    z80_ptr(CREDITS_CALL07)
(1)  665/   C92C2 :                     
(1)  666/   C92C2 :                     Credits_Loop0F:
(1)  667/   C92C2 : (MACRO)             	smpsSetvoice        $14
(1)  667/   C92C2 :  (MACRO-2)                  smpsFMvoice $14
(1)  667/   C92C2 : EF14                                dc.b    $EF,$14
(1)  668/   C92C4 : 804E                	dc.b	nRst, $4E
(1)  669/   C92C6 : (MACRO)             	smpsPan             panRight, $00
(1)  669/   C92C6 : =$0                 panNone set $00
(1)  669/   C92C6 : =$40                panRight set $40
(1)  669/   C92C6 : =$80                panLeft set $80
(1)  669/   C92C6 : =$C0                panCentre set $C0
(1)  669/   C92C6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  669/   C92C6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  670/   C92C8 : A112 A206           	dc.b	nAb2, $12, nA2, $06
(1)  671/   C92CC : (MACRO)             	smpsPan             panCenter, $00
(1)  671/   C92CC : =$0                 panNone set $00
(1)  671/   C92CC : =$40                panRight set $40
(1)  671/   C92CC : =$80                panLeft set $80
(1)  671/   C92CC : =$C0                panCentre set $C0
(1)  671/   C92CC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  671/   C92CC : E0C0                        dc.b $E0,PANCENTER+$00
(1)  672/   C92CE : (MACRO)             	smpsSetvoice        $16
(1)  672/   C92CE :  (MACRO-2)                  smpsFMvoice $16
(1)  672/   C92CE : EF16                                dc.b    $EF,$16
(1)  673/   C92D0 : 8030 8006 BA08 B904 	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
            C92D8 : B808 B704         
(1)  674/   C92DC : B608 B504           	dc.b	nF4, $08, nE4, $04
(1)  675/   C92E0 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop0F
(1)  675/   C92E0 : F7                          dc.b    $F7
(1)  675/   C92E1 : 0002                        dc.b    $00,$02
(1)  675/   C92E3 : C292                                dc.w    z80_ptr(CREDITS_LOOP0F)
(1)  676/   C92E5 : 8060                	dc.b	nRst, $60
(1)  677/   C92E7 : (MACRO)             	smpsSetvoice        $17
(1)  677/   C92E7 :  (MACRO-2)                  smpsFMvoice $17
(1)  677/   C92E7 : EF17                                dc.b    $EF,$17
(1)  678/   C92E9 : (MACRO)             	smpsAlterPitch      $F4
(1)  678/   C92E9 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  678/   C92E9 : FBF4                                dc.b    $FB,$F4
(1)  679/   C92EB : (MACRO)             	smpsAlterVol        $02
(1)  679/   C92EB : E602                        dc.b    $E6,$02
(1)  680/   C92ED : (MACRO)             	smpsPan             panCenter, $00
(1)  680/   C92ED : =$0                 panNone set $00
(1)  680/   C92ED : =$40                panRight set $40
(1)  680/   C92ED : =$80                panLeft set $80
(1)  680/   C92ED : =$C0                panCentre set $C0
(1)  680/   C92ED : =$C0                panCenter set $C0 ; silly Americans :U
(1)  680/   C92ED : E0C0                        dc.b $E0,PANCENTER+$00
(1)  681/   C92EF : (MACRO)             	smpsModSet          $01, $01, $03, $03
(1)  681/   C92EF : F0                          dc.b    $F0
(1)  681/   C92F0 : 0201 0304                           dc.b    $01+1,$01,$03,(($03+1) * $01) & $FF
(1)  681/   C92F4 :                             ;dc.b   $01,$03,$03
(1)  682/   C92F4 :                     
(1)  683/   C92F4 :                     Credits_Loop10:
(1)  684/   C92F4 : (MACRO)             	smpsCall            Credits_Call10
(1)  684/   C92F4 : F8                          dc.b    $F8
(1)  684/   C92F5 : 858F                                dc.w    z80_ptr(CREDITS_CALL10)
(1)  685/   C92F7 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop10
(1)  685/   C92F7 : F7                          dc.b    $F7
(1)  685/   C92F8 : 0002                        dc.b    $00,$02
(1)  685/   C92FA : F492                                dc.w    z80_ptr(CREDITS_LOOP10)
(1)  686/   C92FC : 8060                	dc.b	nRst, $60
(1)  687/   C92FE : (MACRO)             	smpsSetvoice        $1E
(1)  687/   C92FE :  (MACRO-2)                  smpsFMvoice $1E
(1)  687/   C92FE : EF1E                                dc.b    $EF,$1E
(1)  688/   C9300 : (MACRO)             	smpsPan             panRight, $00
(1)  688/   C9300 : =$0                 panNone set $00
(1)  688/   C9300 : =$40                panRight set $40
(1)  688/   C9300 : =$80                panLeft set $80
(1)  688/   C9300 : =$C0                panCentre set $C0
(1)  688/   C9300 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  688/   C9300 : E040                        dc.b $E0,PANRIGHT+$00
(1)  689/   C9302 : (MACRO)             	smpsAlterVol        $FE
(1)  689/   C9302 : E6FE                        dc.b    $E6,$FE
(1)  690/   C9304 : (MACRO)             	smpsAlterPitch      $F4
(1)  690/   C9304 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  690/   C9304 : FBF4                                dc.b    $FB,$F4
(1)  691/   C9306 : (MACRO)             	smpsModOff
(1)  691/   C9306 : FA                                  dc.b    $FA
(1)  692/   C9307 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  692/   C9307 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  692/   C9307 : E806                                dc.b    $E8,$06
(1)  693/   C9309 : 800C C106 1218 C406 	dc.b	nRst, $0C, nE5, $06, $12, $18, nG5, $06, $12, $0C
            C9311 : 120C               
(1)  694/   C9313 : (MACRO)             	smpsSetvoice        $1C
(1)  694/   C9313 :  (MACRO-2)                  smpsFMvoice $1C
(1)  694/   C9313 : EF1C                                dc.b    $EF,$1C
(1)  695/   C9315 : (MACRO)             	smpsPan             panCenter, $00
(1)  695/   C9315 : =$0                 panNone set $00
(1)  695/   C9315 : =$40                panRight set $40
(1)  695/   C9315 : =$80                panLeft set $80
(1)  695/   C9315 : =$C0                panCentre set $C0
(1)  695/   C9315 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  695/   C9315 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  696/   C9317 : (MACRO)             	smpsAlterVol        $FA
(1)  696/   C9317 : E6FA                        dc.b    $E6,$FA
(1)  697/   C9319 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  697/   C9319 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  697/   C9319 : E800                                dc.b    $E8,$00
(1)  698/   C931B : C6                  	dc.b	nA5
(1)  699/   C931C : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  699/   C931C :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  699/   C931C : E806                                dc.b    $E8,$06
(1)  700/   C931E : (MACRO)             	smpsAlterVol        $06
(1)  700/   C931E : E606                        dc.b    $E6,$06
(1)  701/   C9320 : (MACRO)             	smpsSetvoice        $1E
(1)  701/   C9320 :  (MACRO-2)                  smpsFMvoice $1E
(1)  701/   C9320 : EF1E                                dc.b    $EF,$1E
(1)  702/   C9322 : (MACRO)             	smpsPan             panRight, $00
(1)  702/   C9322 : =$0                 panNone set $00
(1)  702/   C9322 : =$40                panRight set $40
(1)  702/   C9322 : =$80                panLeft set $80
(1)  702/   C9322 : =$C0                panCentre set $C0
(1)  702/   C9322 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  702/   C9322 : E040                        dc.b $E0,PANRIGHT+$00
(1)  703/   C9324 : C206 1218 C406 1218 	dc.b	nF5, $06, $12, $18, nG5, $06, $12, $18, nE5, $06, $12, $18
            C932C : C106 1218         
(1)  704/   C9330 : C406 120C           	dc.b	nG5, $06, $12, $0C
(1)  705/   C9334 : (MACRO)             	smpsSetvoice        $1A
(1)  705/   C9334 :  (MACRO-2)                  smpsFMvoice $1A
(1)  705/   C9334 : EF1A                                dc.b    $EF,$1A
(1)  706/   C9336 : (MACRO)             	smpsPan             panCenter, $00
(1)  706/   C9336 : =$0                 panNone set $00
(1)  706/   C9336 : =$40                panRight set $40
(1)  706/   C9336 : =$80                panLeft set $80
(1)  706/   C9336 : =$C0                panCentre set $C0
(1)  706/   C9336 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  706/   C9336 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  707/   C9338 : (MACRO)             	smpsAlterPitch      $0C
(1)  707/   C9338 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  707/   C9338 : FB0C                                dc.b    $FB,$0C
(1)  708/   C933A : C606 C680 C680 C6   	dc.b	nA5, $06, nA5, nRst, nA5, nRst, nA5
(1)  709/   C9341 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  709/   C9341 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  709/   C9341 : E800                                dc.b    $E8,$00
(1)  710/   C9343 : C70C C806           	dc.b	nBb5, $0C, nB5, $06
(1)  711/   C9347 : (MACRO)             	smpsSetvoice        $1E
(1)  711/   C9347 :  (MACRO-2)                  smpsFMvoice $1E
(1)  711/   C9347 : EF1E                                dc.b    $EF,$1E
(1)  712/   C9349 : (MACRO)             	smpsPan             panRight, $00
(1)  712/   C9349 : =$0                 panNone set $00
(1)  712/   C9349 : =$40                panRight set $40
(1)  712/   C9349 : =$80                panLeft set $80
(1)  712/   C9349 : =$C0                panCentre set $C0
(1)  712/   C9349 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  712/   C9349 : E040                        dc.b $E0,PANRIGHT+$00
(1)  713/   C934B : (MACRO)             	smpsAlterPitch      $F4
(1)  713/   C934B :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  713/   C934B : FBF4                                dc.b    $FB,$F4
(1)  714/   C934D : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  714/   C934D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  714/   C934D : E806                                dc.b    $E8,$06
(1)  715/   C934F : 80C4 0612 0C80 60   	dc.b	nRst, nG5, $06, $12, $0C, nRst, $60
(1)  716/   C9356 : (MACRO)             	smpsSetvoice        $20
(1)  716/   C9356 :  (MACRO-2)                  smpsFMvoice $20
(1)  716/   C9356 : EF20                                dc.b    $EF,$20
(1)  717/   C9358 : (MACRO)             	smpsAlterPitch      $18
(1)  717/   C9358 :  (MACRO-2)                  smpsChangeTransposition $18
(1)  717/   C9358 : FB18                                dc.b    $FB,$18
(1)  718/   C935A : (MACRO)             	smpsAlterVol        $FA
(1)  718/   C935A : E6FA                        dc.b    $E6,$FA
(1)  719/   C935C : (MACRO)             	smpsPan             panCenter, $00
(1)  719/   C935C : =$0                 panNone set $00
(1)  719/   C935C : =$40                panRight set $40
(1)  719/   C935C : =$80                panLeft set $80
(1)  719/   C935C : =$C0                panCentre set $C0
(1)  719/   C935C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  719/   C935C : E0C0                        dc.b $E0,PANCENTER+$00
(1)  720/   C935E : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  720/   C935E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  720/   C935E : E800                                dc.b    $E8,$00
(1)  721/   C9360 : B403 E7B6 5DB3 03E7 	dc.b	nEb4, $03, smpsNoAttack, nF4, $5D, nD4, $03, smpsNoAttack, nE4, $5D, nC4, $03
            C9368 : B55D B103         
(1)  722/   C936C : E7B3 5DB3 03E7 B55D 	dc.b	smpsNoAttack, nD4, $5D, nD4, $03, smpsNoAttack, nE4, $5D, nRst, $60
            C9374 : 8060               
(1)  723/   C9376 : (MACRO)             	smpsSetvoice        $22
(1)  723/   C9376 :  (MACRO-2)                  smpsFMvoice $22
(1)  723/   C9376 : EF22                                dc.b    $EF,$22
(1)  724/   C9378 : (MACRO)             	smpsPan             panRight, $00
(1)  724/   C9378 : =$0                 panNone set $00
(1)  724/   C9378 : =$40                panRight set $40
(1)  724/   C9378 : =$80                panLeft set $80
(1)  724/   C9378 : =$C0                panCentre set $C0
(1)  724/   C9378 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  724/   C9378 : E040                        dc.b $E0,PANRIGHT+$00
(1)  725/   C937A : (MACRO)             	smpsAlterPitch      $E8
(1)  725/   C937A :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  725/   C937A : FBE8                                dc.b    $FB,$E8
(1)  726/   C937C : (MACRO)             	smpsAlterVol        $04
(1)  726/   C937C : E604                        dc.b    $E6,$04
(1)  727/   C937E : 8030 80             	dc.b	nRst, $30, nRst
(1)  728/   C9381 : (MACRO)             	smpsCall            Credits_Call11
(1)  728/   C9381 : F8                          dc.b    $F8
(1)  728/   C9382 : F693                                dc.w    z80_ptr(CREDITS_CALL11)
(1)  729/   C9384 : C930 C818 C90C C8C6 	dc.b	nC6, $30, nB5, $18, nC6, $0C, nB5, nA5, $30, nC6, nRst, $0C
            C938C : 30C9 800C         
(1)  730/   C9390 : C180 C180 C280 C2   	dc.b	nE5, nRst, nE5, nRst, nF5, nRst, nF5
(1)  731/   C9397 : (MACRO)             	smpsAlterVol        $04
(1)  731/   C9397 : E604                        dc.b    $E6,$04
(1)  732/   C9399 : 80C1 80C1 80C2 80C2 	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, nRst, nF5
(1)  733/   C93A1 : (MACRO)             	smpsAlterVol        $FC
(1)  733/   C93A1 : E6FC                        dc.b    $E6,$FC
(1)  734/   C93A3 : 80C1 80C1 80C2 1808 	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, $18, $08, nE5, $04
            C93AB : C104               
(1)  735/   C93AD : (MACRO)             	smpsAlterPitch      $0C
(1)  735/   C93AD :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  735/   C93AD : FB0C                                dc.b    $FB,$0C
(1)  736/   C93AF : (MACRO)             	smpsAlterVol        $FF
(1)  736/   C93AF : E6FF                        dc.b    $E6,$FF
(1)  737/   C93B1 : (MACRO)             	smpsPan             panCenter, $00
(1)  737/   C93B1 : =$0                 panNone set $00
(1)  737/   C93B1 : =$40                panRight set $40
(1)  737/   C93B1 : =$80                panLeft set $80
(1)  737/   C93B1 : =$C0                panCentre set $C0
(1)  737/   C93B1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  737/   C93B1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  738/   C93B3 : (MACRO)             	smpsSetvoice        $00
(1)  738/   C93B3 :  (MACRO-2)                  smpsFMvoice $00
(1)  738/   C93B3 : EF00                                dc.b    $EF,$00
(1)  739/   C93B5 : 8060                	dc.b	nRst, $60
(1)  740/   C93B7 :                     
(1)  741/   C93B7 :                     Credits_Loop11:
(1)  742/   C93B7 : (MACRO)             	smpsCall            Credits_Call12
(1)  742/   C93B7 : F8                          dc.b    $F8
(1)  742/   C93B8 : 7894                                dc.w    z80_ptr(CREDITS_CALL12)
(1)  743/   C93BA : C812 C81E           	dc.b	nB5, $12, nB5, $1E
(1)  744/   C93BE : (MACRO)             	smpsCall            Credits_Call12
(1)  744/   C93BE : F8                          dc.b    $F8
(1)  744/   C93BF : 7894                                dc.w    z80_ptr(CREDITS_CALL12)
(1)  745/   C93C1 : CB12 CB1E           	dc.b	nD6, $12, nD6, $1E
(1)  746/   C93C5 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop11
(1)  746/   C93C5 : F7                          dc.b    $F7
(1)  746/   C93C6 : 0002                        dc.b    $00,$02
(1)  746/   C93C8 : B793                                dc.w    z80_ptr(CREDITS_LOOP11)
(1)  747/   C93CA : (MACRO)             	smpsAlterNote       $03
(1)  747/   C93CA :  (MACRO-2)                  smpsDetune      $03
(1)  747/   C93CA : E103                        dc.b    $E1,$03
(1)  748/   C93CC : (MACRO)             	smpsAlterVol        $08
(1)  748/   C93CC : E608                        dc.b    $E6,$08
(1)  749/   C93CE : (MACRO)             	smpsCall            Credits_Call0B
(1)  749/   C93CE : F8                          dc.b    $F8
(1)  749/   C93CF : 3F94                                dc.w    z80_ptr(CREDITS_CALL0B)
(1)  750/   C93D1 : (MACRO)             	smpsAlterVol        $F0
(1)  750/   C93D1 : E6F0                        dc.b    $E6,$F0
(1)  751/   C93D3 : (MACRO)             	smpsSetvoice        $01
(1)  751/   C93D3 :  (MACRO-2)                  smpsFMvoice $01
(1)  751/   C93D3 : EF01                                dc.b    $EF,$01
(1)  752/   C93D5 : (MACRO)             	smpsModSet          $00, $01, $06, $04
(1)  752/   C93D5 : F0                          dc.b    $F0
(1)  752/   C93D6 : 0101 0605                           dc.b    $00+1,$01,$06,(($04+1) * $01) & $FF
(1)  752/   C93DA :                             ;dc.b   $01,$06,$04
(1)  753/   C93DA : A26C                	dc.b	nA2, $6C
(1)  754/   C93DC : (MACRO)             	smpsStop
(1)  754/   C93DC : F2                          dc.b    $F2
(1)  755/   C93DD :                     
(1)  756/   C93DD :                     Credits_Call07:
(1)  757/   C93DD : A214 A404 A504 8008 	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
            C93E5 : A904 8008         
(1)  758/   C93E9 : A804 8008 A904 8008 	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
            C93F1 : AC08 A910         
(1)  759/   C93F5 : (MACRO)             	smpsReturn
(1)  759/   C93F5 : F9                                  dc.b    $F9
(1)  760/   C93F6 :                     
(1)  761/   C93F6 :                     Credits_Call11:
(1)  762/   C93F6 : 800C C904 8010 C904 	dc.b	nRst, $0C, nC6, $04, nRst, $10, nC6, $04, nRst, $0C, nC6, $0C
            C93FE : 800C C90C         
(1)  763/   C9402 : CB08 C904 8018 800C 	dc.b	nD6, $08, nC6, $04, nRst, $18, nRst, $0C, nB5, $04, nRst, $10
            C940A : C804 8010         
(1)  764/   C940E : C804 800C C80C C908 	dc.b	nB5, $04, nRst, $0C, nB5, $0C, nC6, $08, nB5, $04, nRst, $18
            C9416 : C804 8018         
(1)  765/   C941A : 800C C604 8010 C604 	dc.b	nRst, $0C, nA5, $04, nRst, $10, nA5, $04, nRst, $0C, nA5, $0C
            C9422 : 800C C60C         
(1)  766/   C9426 : C808 C604 8018 800C 	dc.b	nB5, $08, nA5, $04, nRst, $18, nRst, $0C, nAb5, $04, nRst, $10
            C942E : C504 8010         
(1)  767/   C9432 : C504 800C C50C C708 	dc.b	nAb5, $04, nRst, $0C, nAb5, $0C, nBb5, $08, nAb5, $04, nRst, $18
            C943A : C504 8018         
(1)  768/   C943E : (MACRO)             	smpsReturn
(1)  768/   C943E : F9                                  dc.b    $F9
(1)  769/   C943F :                     
(1)  770/   C943F :                     Credits_Call0B:
(1)  771/   C943F : (MACRO)             	smpsSetvoice        $25
(1)  771/   C943F :  (MACRO-2)                  smpsFMvoice $25
(1)  771/   C943F : EF25                                dc.b    $EF,$25
(1)  772/   C9441 : 800C D0D4 D7DB 0C80 	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
            C9449 : 06DB 0CDC         
(1)  773/   C944D : 06DB 0CDD 60DE 0C80 	dc.b	$06, nFs7, $0C, nAb7, $60, nA7, $0C, nRst, nA7, nRst, nRst, $06
            C9455 : DE80 8006         
(1)  774/   C9459 : DD12 DE0C           	dc.b	nAb7, $12, nA7, $0C
(1)  775/   C945D : (MACRO)             	smpsReturn
(1)  775/   C945D : F9                                  dc.b    $F9
(1)  776/   C945E :                     
(1)  777/   C945E :                     Credits_Call0D:
(1)  778/   C945E : 8018 B50B 800D B70C 	dc.b	nRst, $18, nE4, $0B, nRst, $0D, nFs4, $0C, $0B, nRst, $19, nA4
            C9466 : 0B80 19BA         
(1)  779/   C946A : 0C0B 800D           	dc.b	$0C, $0B, nRst, $0D
(1)  780/   C946E : (MACRO)             	smpsReturn
(1)  780/   C946E : F9                                  dc.b    $F9
(1)  781/   C946F :                     
(1)  782/   C946F :                     Credits_Call0E:
(1)  783/   C946F : C305 8013 C312 C305 	dc.b	nFs5, $05, nRst, $13, nFs5, $12, nFs5, $05
(1)  784/   C9477 : (MACRO)             	smpsReturn
(1)  784/   C9477 : F9                                  dc.b    $F9
(1)  785/   C9478 :                     
(1)  786/   C9478 :                     Credits_Call12:
(1)  787/   C9478 : CA06 80CA 80C6 80C6 	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst
            C9480 : 80               
(1)  788/   C9481 : (MACRO)             	smpsReturn
(1)  788/   C9481 : F9                                  dc.b    $F9
(1)  789/   C9482 :                     
(1)  790/   C9482 :                     Credits_Call0F:
(1)  791/   C9482 : AF0C B306 B60C AFB1 	dc.b	nBb3, $0C, nD4, $06, nF4, $0C, nBb3, nC4, $06, nRst, nC4, $0C
            C948A : 0680 B10C         
(1)  792/   C948E : B506 B80C B106 80B6 	dc.b	nE4, $06, nG4, $0C, nC4, $06, nRst, nF4, $0C, nA4, $06, nC4
            C9496 : 0CBA 06B1         
(1)  793/   C949A : 0CB5 B6BA 0680 BAAF 	dc.b	$0C, nE4, nF4, nA4, $06, nRst, nA4, nBb3, $0C, nD4, nE4, nG4
            C94A2 : 0CB3 B5B8         
(1)  794/   C94A6 : 06B2 0CB3 B5B8 0680 	dc.b	$06, nCs4, $0C, nD4, nE4, nG4, $06, nRst, nG4, nCs4, $0C, nE4
            C94AE : B8B2 0CB5         
(1)  795/   C94B2 : (MACRO)             	smpsReturn
(1)  795/   C94B2 : F9                                  dc.b    $F9
(1)  796/   C94B3 :                     
(1)  797/   C94B3 :                     ; FM5 Data
(1)  798/   C94B3 :                     Credits_FM5:
(1)  799/   C94B3 : (MACRO)             	smpsAlterPitch      $E8
(1)  799/   C94B3 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  799/   C94B3 : FBE8                                dc.b    $FB,$E8
(1)  800/   C94B5 : (MACRO)             	smpsAlterVol        $F8
(1)  800/   C94B5 : E6F8                        dc.b    $E6,$F8
(1)  801/   C94B7 : (MACRO)             	smpsAlterNote       $05
(1)  801/   C94B7 :  (MACRO-2)                  smpsDetune      $05
(1)  801/   C94B7 : E105                        dc.b    $E1,$05
(1)  802/   C94B9 : (MACRO)             	smpsCall            Credits_Call03
(1)  802/   C94B9 : F8                          dc.b    $F8
(1)  802/   C94BA : B48C                                dc.w    z80_ptr(CREDITS_CALL03)
(1)  803/   C94BC : (MACRO)             	smpsAlterPitch      $18
(1)  803/   C94BC :  (MACRO-2)                  smpsChangeTransposition $18
(1)  803/   C94BC : FB18                                dc.b    $FB,$18
(1)  804/   C94BE : (MACRO)             	smpsAlterVol        $08
(1)  804/   C94BE : E608                        dc.b    $E6,$08
(1)  805/   C94C0 : (MACRO)             	smpsAlterNote       $00
(1)  805/   C94C0 :  (MACRO-2)                  smpsDetune      $00
(1)  805/   C94C0 : E100                        dc.b    $E1,$00
(1)  806/   C94C2 : (MACRO)             	smpsSetvoice        $02
(1)  806/   C94C2 :  (MACRO-2)                  smpsFMvoice $02
(1)  806/   C94C2 : EF02                                dc.b    $EF,$02
(1)  807/   C94C4 : (MACRO)             	smpsModSet          $0C, $01, $FC, $04
(1)  807/   C94C4 : F0                          dc.b    $F0
(1)  807/   C94C5 : 0D01 FC05                           dc.b    $0C+1,$01,$FC,(($04+1) * $01) & $FF
(1)  807/   C94C9 :                             ;dc.b   $01,$FC,$04
(1)  808/   C94C9 : (MACRO)             	smpsCall            Credits_Call04
(1)  808/   C94C9 : F8                          dc.b    $F8
(1)  808/   C94CA : 9896                                dc.w    z80_ptr(CREDITS_CALL04)
(1)  809/   C94CC : B13C                	dc.b	nC4, $3C
(1)  810/   C94CE : (MACRO)             	smpsCall            Credits_Call04
(1)  810/   C94CE : F8                          dc.b    $F8
(1)  810/   C94CF : 9896                                dc.w    z80_ptr(CREDITS_CALL04)
(1)  811/   C94D1 : B53C                	dc.b	nE4, $3C
(1)  812/   C94D3 : (MACRO)             	smpsAlterPitch      $F4
(1)  812/   C94D3 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  812/   C94D3 : FBF4                                dc.b    $FB,$F4
(1)  813/   C94D5 : (MACRO)             	smpsAlterVol        $07
(1)  813/   C94D5 : E607                        dc.b    $E6,$07
(1)  814/   C94D7 : (MACRO)             	smpsModSet          $30, $01, $04, $04
(1)  814/   C94D7 : F0                          dc.b    $F0
(1)  814/   C94D8 : 3101 0405                           dc.b    $30+1,$01,$04,(($04+1) * $01) & $FF
(1)  814/   C94DC :                             ;dc.b   $01,$04,$04
(1)  815/   C94DC : (MACRO)             	smpsSetvoice        $06
(1)  815/   C94DC :  (MACRO-2)                  smpsFMvoice $06
(1)  815/   C94DC : EF06                                dc.b    $EF,$06
(1)  816/   C94DE :                     
(1)  817/   C94DE :                     Credits_Loop0A:
(1)  818/   C94DE : C430 E730 C6E7 30C2 	dc.b	nG5, $30, smpsNoAttack, $30, nA5, smpsNoAttack, $30, nF5, smpsNoAttack, $30, nE5, smpsNoAttack
            C94E6 : E730 C1E7         
(1)  819/   C94EA : 30                  	dc.b	$30
(1)  820/   C94EB : (MACRO)             	smpsLoop            $00, $02, Credits_Loop0A
(1)  820/   C94EB : F7                          dc.b    $F7
(1)  820/   C94EC : 0002                        dc.b    $00,$02
(1)  820/   C94EE : DE94                                dc.w    z80_ptr(CREDITS_LOOP0A)
(1)  821/   C94F0 : (MACRO)             	smpsSetvoice        $0A
(1)  821/   C94F0 :  (MACRO-2)                  smpsFMvoice $0A
(1)  821/   C94F0 : EF0A                                dc.b    $EF,$0A
(1)  822/   C94F2 : (MACRO)             	smpsAlterVol        $F6
(1)  822/   C94F2 : E6F6                        dc.b    $E6,$F6
(1)  823/   C94F4 : (MACRO)             	smpsModSet          $0C, $01, $05, $04
(1)  823/   C94F4 : F0                          dc.b    $F0
(1)  823/   C94F5 : 0D01 0505                           dc.b    $0C+1,$01,$05,(($04+1) * $01) & $FF
(1)  823/   C94F9 :                             ;dc.b   $01,$05,$04
(1)  824/   C94F9 : (MACRO)             	smpsPan             panLeft, $00
(1)  824/   C94F9 : =$0                 panNone set $00
(1)  824/   C94F9 : =$40                panRight set $40
(1)  824/   C94F9 : =$80                panLeft set $80
(1)  824/   C94F9 : =$C0                panCentre set $C0
(1)  824/   C94F9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  824/   C94F9 : E080                        dc.b $E0,PANLEFT+$00
(1)  825/   C94FB :                     
(1)  826/   C94FB :                     Credits_Loop0B:
(1)  827/   C94FB : (MACRO)             	smpsCall            Credits_Call05
(1)  827/   C94FB : F8                          dc.b    $F8
(1)  827/   C94FC : A996                                dc.w    z80_ptr(CREDITS_CALL05)
(1)  828/   C94FE : 8025 C606 C680 0CC6 	dc.b	nRst, $25, nA5, $06, nA5, nRst, $0C, nA5, $06, nA5, $05, nRst
            C9506 : 06C6 0580         
(1)  829/   C950A : 0DC6 06C8 30E7 06   	dc.b	$0D, nA5, $06, nB5, $30, smpsNoAttack, $06
(1)  830/   C9511 : (MACRO)             	smpsCall            Credits_Call05
(1)  830/   C9511 : F8                          dc.b    $F8
(1)  830/   C9512 : A996                                dc.w    z80_ptr(CREDITS_CALL05)
(1)  831/   C9514 : 8031 8060           	dc.b	nRst, $31, nRst, $60
(1)  832/   C9518 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop0B
(1)  832/   C9518 : F7                          dc.b    $F7
(1)  832/   C9519 : 0002                        dc.b    $00,$02
(1)  832/   C951B : FB94                                dc.w    z80_ptr(CREDITS_LOOP0B)
(1)  833/   C951D : 8060 8048           	dc.b	nRst, $60, nRst, $48
(1)  834/   C9521 : (MACRO)             	smpsAlterVol        $05
(1)  834/   C9521 : E605                        dc.b    $E6,$05
(1)  835/   C9523 : (MACRO)             	smpsModOff
(1)  835/   C9523 : FA                                  dc.b    $FA
(1)  836/   C9524 : 8001                	dc.b	nRst, $01
(1)  837/   C9526 : (MACRO)             	smpsSetvoice        $0C
(1)  837/   C9526 :  (MACRO-2)                  smpsFMvoice $0C
(1)  837/   C9526 : EF0C                                dc.b    $EF,$0C
(1)  838/   C9528 : (MACRO)             	smpsAlterNote       $FE
(1)  838/   C9528 :  (MACRO-2)                  smpsDetune      $FE
(1)  838/   C9528 : E1FE                        dc.b    $E1,$FE
(1)  839/   C952A : (MACRO)             	smpsPan             panRight, $00
(1)  839/   C952A : =$0                 panNone set $00
(1)  839/   C952A : =$40                panRight set $40
(1)  839/   C952A : =$80                panLeft set $80
(1)  839/   C952A : =$C0                panCentre set $C0
(1)  839/   C952A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  839/   C952A : E040                        dc.b $E0,PANRIGHT+$00
(1)  840/   C952C : (MACRO)             	smpsCall            Credits_Call06
(1)  840/   C952C : F8                          dc.b    $F8
(1)  840/   C952D : 4B8F                                dc.w    z80_ptr(CREDITS_CALL06)
(1)  841/   C952F : 2380 0C80 60        	dc.b	$23, nRst, $0C, nRst, $60
(1)  842/   C9534 : (MACRO)             	smpsSetvoice        $11
(1)  842/   C9534 :  (MACRO-2)                  smpsFMvoice $11
(1)  842/   C9534 : EF11                                dc.b    $EF,$11
(1)  843/   C9536 : (MACRO)             	smpsAlterPitch      $F4
(1)  843/   C9536 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  843/   C9536 : FBF4                                dc.b    $FB,$F4
(1)  844/   C9538 : (MACRO)             	smpsAlterVol        $F4
(1)  844/   C9538 : E6F4                        dc.b    $E6,$F4
(1)  845/   C953A : (MACRO)             	smpsAlterNote       $00
(1)  845/   C953A :  (MACRO-2)                  smpsDetune      $00
(1)  845/   C953A : E100                        dc.b    $E1,$00
(1)  846/   C953C : (MACRO)             	smpsPan             panCenter, $00
(1)  846/   C953C : =$0                 panNone set $00
(1)  846/   C953C : =$40                panRight set $40
(1)  846/   C953C : =$80                panLeft set $80
(1)  846/   C953C : =$C0                panCentre set $C0
(1)  846/   C953C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  846/   C953C : E0C0                        dc.b $E0,PANCENTER+$00
(1)  847/   C953E : (MACRO)             	smpsModSet          $06, $01, $06, $05
(1)  847/   C953E : F0                          dc.b    $F0
(1)  847/   C953F : 0701 0606                           dc.b    $06+1,$01,$06,(($05+1) * $01) & $FF
(1)  847/   C9543 :                             ;dc.b   $01,$06,$05
(1)  848/   C9543 : 8060 8030 C206 C2C9 	dc.b	nRst, $60, nRst, $30, nF5, $06, nF5, nC6, nA5, $1E, nRst, $60
            C954B : C61E 8060         
(1)  849/   C954F : 8006 CB80 CBC9 80C9 	dc.b	nRst, $06, nD6, nRst, nD6, nC6, nRst, nC6, nRst, nBb5, nRst, nBb5
            C9557 : 80C7 80C7         
(1)  850/   C955B : 80C6 0380 C680 0980 	dc.b	nRst, nA5, $03, nRst, nA5, nRst, $09, nRst, $06, nRst, $60, nRst
            C9563 : 0680 6080         
(1)  851/   C9567 : 30C2 06C2 C9C6 1E80 	dc.b	$30, nF5, $06, nF5, nC6, nA5, $1E, nRst, $60
            C956F : 60               
(1)  852/   C9570 : (MACRO)             	smpsSetvoice        $16
(1)  852/   C9570 :  (MACRO-2)                  smpsFMvoice $16
(1)  852/   C9570 : EF16                                dc.b    $EF,$16
(1)  853/   C9572 : (MACRO)             	smpsAlterPitch      $0C
(1)  853/   C9572 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  853/   C9572 : FB0C                                dc.b    $FB,$0C
(1)  854/   C9574 : (MACRO)             	smpsAlterVol        $04
(1)  854/   C9574 : E604                        dc.b    $E6,$04
(1)  855/   C9576 : (MACRO)             	smpsModOff
(1)  855/   C9576 : FA                                  dc.b    $FA
(1)  856/   C9577 : (MACRO)             	smpsPan             panLeft, $00
(1)  856/   C9577 : =$0                 panNone set $00
(1)  856/   C9577 : =$40                panRight set $40
(1)  856/   C9577 : =$80                panLeft set $80
(1)  856/   C9577 : =$C0                panCentre set $C0
(1)  856/   C9577 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  856/   C9577 : E080                        dc.b $E0,PANLEFT+$00
(1)  857/   C9579 : 8001                	dc.b	nRst, $01
(1)  858/   C957B : (MACRO)             	smpsCall            Credits_Call07
(1)  858/   C957B : F8                          dc.b    $F8
(1)  858/   C957C : DD93                                dc.w    z80_ptr(CREDITS_CALL07)
(1)  859/   C957E : 802F                	dc.b	nRst, $2F
(1)  860/   C9580 : (MACRO)             	smpsCall            Credits_Call08
(1)  860/   C9580 : F8                          dc.b    $F8
(1)  860/   C9581 : 7D96                                dc.w    z80_ptr(CREDITS_CALL08)
(1)  861/   C9583 : 8030                	dc.b	nRst, $30
(1)  862/   C9585 : (MACRO)             	smpsCall            Credits_Call08
(1)  862/   C9585 : F8                          dc.b    $F8
(1)  862/   C9586 : 7D96                                dc.w    z80_ptr(CREDITS_CALL08)
(1)  863/   C9588 : 8060                	dc.b	nRst, $60
(1)  864/   C958A : (MACRO)             	smpsSetvoice        $19
(1)  864/   C958A :  (MACRO-2)                  smpsFMvoice $19
(1)  864/   C958A : EF19                                dc.b    $EF,$19
(1)  865/   C958C : (MACRO)             	smpsAlterPitch      $F4
(1)  865/   C958C :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  865/   C958C : FBF4                                dc.b    $FB,$F4
(1)  866/   C958E : (MACRO)             	smpsPan             panCenter, $00
(1)  866/   C958E : =$0                 panNone set $00
(1)  866/   C958E : =$40                panRight set $40
(1)  866/   C958E : =$80                panLeft set $80
(1)  866/   C958E : =$C0                panCentre set $C0
(1)  866/   C958E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  866/   C958E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  867/   C9590 : (MACRO)             	smpsCall            Credits_Call09
(1)  867/   C9590 : F8                          dc.b    $F8
(1)  867/   C9591 : B296                                dc.w    z80_ptr(CREDITS_CALL09)
(1)  868/   C9593 : 8027 B103           	dc.b	nRst, $27, nC4, $03
(1)  869/   C9597 : (MACRO)             	smpsCall            Credits_Call09
(1)  869/   C9597 : F8                          dc.b    $F8
(1)  869/   C9598 : B296                                dc.w    z80_ptr(CREDITS_CALL09)
(1)  870/   C959A : 802A 8060           	dc.b	nRst, $2A, nRst, $60
(1)  871/   C959E : (MACRO)             	smpsSetvoice        $1E
(1)  871/   C959E :  (MACRO-2)                  smpsFMvoice $1E
(1)  871/   C959E : EF1E                                dc.b    $EF,$1E
(1)  872/   C95A0 : (MACRO)             	smpsAlterPitch      $F4
(1)  872/   C95A0 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  872/   C95A0 : FBF4                                dc.b    $FB,$F4
(1)  873/   C95A2 : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  873/   C95A2 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  873/   C95A2 : E806                                dc.b    $E8,$06
(1)  874/   C95A4 :                     
(1)  875/   C95A4 :                     Credits_Loop0C:
(1)  876/   C95A4 : 800C C406 1218 C806 	dc.b	nRst, $0C, nG5, $06, $12, $18, nB5, $06, $12, $0C, nRst, nA5
            C95AC : 120C 80C6         
(1)  877/   C95B0 : 0612 18C8 0612 0C   	dc.b	$06, $12, $18, nB5, $06, $12, $0C
(1)  878/   C95B7 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop0C
(1)  878/   C95B7 : F7                          dc.b    $F7
(1)  878/   C95B8 : 0002                        dc.b    $00,$02
(1)  878/   C95BA : A495                                dc.w    z80_ptr(CREDITS_LOOP0C)
(1)  879/   C95BC : 8060                	dc.b	nRst, $60
(1)  880/   C95BE : (MACRO)             	smpsSetvoice        $20
(1)  880/   C95BE :  (MACRO-2)                  smpsFMvoice $20
(1)  880/   C95BE : EF20                                dc.b    $EF,$20
(1)  881/   C95C0 : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  881/   C95C0 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  881/   C95C0 : E800                                dc.b    $E8,$00
(1)  882/   C95C2 : (MACRO)             	smpsAlterPitch      $18
(1)  882/   C95C2 :  (MACRO-2)                  smpsChangeTransposition $18
(1)  882/   C95C2 : FB18                                dc.b    $FB,$18
(1)  883/   C95C4 : (MACRO)             	smpsAlterVol        $FA
(1)  883/   C95C4 : E6FA                        dc.b    $E6,$FA
(1)  884/   C95C6 : B803 E7BA 5DB6 03E7 	dc.b	nG4, $03, smpsNoAttack, nA4, $5D, nF4, $03, smpsNoAttack, nG4, $5D, nEb4, $03
            C95CE : B85D B403         
(1)  885/   C95D2 : E7B6 5DB6 03E7 B85D 	dc.b	smpsNoAttack, nF4, $5D, nF4, $03, smpsNoAttack, nG4, $5D, nRst, $60
            C95DA : 8060               
(1)  886/   C95DC : (MACRO)             	smpsSetvoice        $22
(1)  886/   C95DC :  (MACRO-2)                  smpsFMvoice $22
(1)  886/   C95DC : EF22                                dc.b    $EF,$22
(1)  887/   C95DE : (MACRO)             	smpsAlterPitch      $F4
(1)  887/   C95DE :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  887/   C95DE : FBF4                                dc.b    $FB,$F4
(1)  888/   C95E0 : (MACRO)             	smpsAlterVol        $05
(1)  888/   C95E0 : E605                        dc.b    $E6,$05
(1)  889/   C95E2 : (MACRO)             	smpsModSet          $1C, $01, $06, $04
(1)  889/   C95E2 : F0                          dc.b    $F0
(1)  889/   C95E3 : 1D01 0605                           dc.b    $1C+1,$01,$06,(($04+1) * $01) & $FF
(1)  889/   C95E7 :                             ;dc.b   $01,$06,$04
(1)  890/   C95E7 : 8050 A704 A908 AC04 	dc.b	nRst, $50, nD3, $04, nE3, $08, nG3, $04, nC4, $30, nRst, $0C
            C95EF : B130 800C         
(1)  891/   C95F3 : B108 8004 B308 B110 	dc.b	nC4, $08, nRst, $04, nD4, $08, nC4, $10, nE4, $08, nE4, $04
            C95FB : B508 B504         
(1)  892/   C95FF : 8008 B034 800C B0B5 	dc.b	nRst, $08, nB3, $34, nRst, $0C, nB3, nE4, $08, $04, nRst, $08
            C9607 : 0804 8008         
(1)  893/   C960B : B104 AE24 800C AE08 	dc.b	nC4, $04, nA3, $24, nRst, $0C, nA3, $08, nRst, $04, nB3, $08
            C9613 : 8004 B008         
(1)  894/   C9617 : AE04 B10C AF08 AD4C 	dc.b	nA3, $04, nC4, $0C, nBb3, $08, nAb3, $4C, nRst, $0C, nC4, $08
            C961F : 800C B108         
(1)  895/   C9623 : 8004 B308 8004 B108 	dc.b	nRst, $04, nD4, $08, nRst, $04, nC4, $08, nRst, $04, nE4, $08
            C962B : 8004 B508         
(1)  896/   C962F : B504 8008 B01C 800C 	dc.b	nE4, $04, nRst, $08, nB3, $1C, nRst, $0C, nE4, $18, nG4, $08
            C9637 : B518 B808         
(1)  897/   C963B : B504 BA18 800C B604 	dc.b	nE4, $04, nA4, $18, nRst, $0C, nF4, $04, nRst, $08, nE4, $18
            C9643 : 8008 B518         
(1)  898/   C9647 : B1AE B00C           	dc.b	nC4, nA3, nB3, $0C
(1)  899/   C964B : (MACRO)             	smpsAlterVol        $04
(1)  899/   C964B : E604                        dc.b    $E6,$04
(1)  900/   C964D : B604 8008 B518 B1AE 	dc.b	nF4, $04, nRst, $08, nE4, $18, nC4, nA3, nB3, $0C
            C9655 : B00C               
(1)  901/   C9657 : (MACRO)             	smpsAlterVol        $F8
(1)  901/   C9657 : E6F8                        dc.b    $E6,$F8
(1)  902/   C9659 : B604 8008 B518 B1AE 	dc.b	nF4, $04, nRst, $08, nE4, $18, nC4, nA3, nF3, $14, nE3, $04
            C9661 : AA14 A904         
(1)  903/   C9665 : (MACRO)             	smpsAlterVol        $0C
(1)  903/   C9665 : E60C                        dc.b    $E6,$0C
(1)  904/   C9667 : (MACRO)             	smpsSetvoice        $23
(1)  904/   C9667 :  (MACRO-2)                  smpsFMvoice $23
(1)  904/   C9667 : EF23                                dc.b    $EF,$23
(1)  905/   C9669 : (MACRO)             	smpsAlterNote       $03
(1)  905/   C9669 :  (MACRO-2)                  smpsDetune      $03
(1)  905/   C9669 : E103                        dc.b    $E1,$03
(1)  906/   C966B : (MACRO)             	smpsAlterVol        $F7
(1)  906/   C966B : E6F7                        dc.b    $E6,$F7
(1)  907/   C966D : 8060                	dc.b	nRst, $60
(1)  908/   C966F : (MACRO)             	smpsCall            Credits_Call0A
(1)  908/   C966F : F8                          dc.b    $F8
(1)  908/   C9670 : 6C8C                                dc.w    z80_ptr(CREDITS_CALL0A)
(1)  909/   C9672 : (MACRO)             	smpsAlterVol        $09
(1)  909/   C9672 : E609                        dc.b    $E6,$09
(1)  910/   C9674 : (MACRO)             	smpsModSet          $00, $01, $06, $04
(1)  910/   C9674 : F0                          dc.b    $F0
(1)  910/   C9675 : 0101 0605                           dc.b    $00+1,$01,$06,(($04+1) * $01) & $FF
(1)  910/   C9679 :                             ;dc.b   $01,$06,$04
(1)  911/   C9679 : (MACRO)             	smpsCall            Credits_Call0B
(1)  911/   C9679 : F8                          dc.b    $F8
(1)  911/   C967A : 3F94                                dc.w    z80_ptr(CREDITS_CALL0B)
(1)  912/   C967C : (MACRO)             	smpsStop
(1)  912/   C967C : F2                          dc.b    $F2
(1)  913/   C967D :                     
(1)  914/   C967D :                     Credits_Call08:
(1)  915/   C967D : 801E                	dc.b	nRst, $1E
(1)  916/   C967F : (MACRO)             	smpsSetvoice        $14
(1)  916/   C967F :  (MACRO-2)                  smpsFMvoice $14
(1)  916/   C967F : EF14                                dc.b    $EF,$14
(1)  917/   C9681 : A412 A506           	dc.b	nB2, $12, nC3, $06
(1)  918/   C9685 : (MACRO)             	smpsSetvoice        $16
(1)  918/   C9685 :  (MACRO-2)                  smpsFMvoice $16
(1)  918/   C9685 : EF16                                dc.b    $EF,$16
(1)  919/   C9687 : 8030 8006 BD08 BC04 	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
            C968F : BB08 BA04         
(1)  920/   C9693 : B908 B804           	dc.b	nAb4, $08, nG4, $04
(1)  921/   C9697 : (MACRO)             	smpsReturn
(1)  921/   C9697 : F9                                  dc.b    $F9
(1)  922/   C9698 :                     
(1)  923/   C9698 :                     Credits_Call04:
(1)  924/   C9698 : 8018 B10B 800D B30C 	dc.b	nRst, $18, nC4, $0B, nRst, $0D, nD4, $0C, $0B, nRst, $19, nF4
            C96A0 : 0B80 19B6         
(1)  925/   C96A4 : 0C0B 800D           	dc.b	$0C, $0B, nRst, $0D
(1)  926/   C96A8 : (MACRO)             	smpsReturn
(1)  926/   C96A8 : F9                                  dc.b    $F9
(1)  927/   C96A9 :                     
(1)  928/   C96A9 :                     Credits_Call05:
(1)  929/   C96A9 : C605 8013 C612 C605 	dc.b	nA5, $05, nRst, $13, nA5, $12, nA5, $05
(1)  930/   C96B1 : (MACRO)             	smpsReturn
(1)  930/   C96B1 : F9                                  dc.b    $F9
(1)  931/   C96B2 :                     
(1)  932/   C96B2 :                     Credits_Call09:
(1)  933/   C96B2 : 8060 AC06 80AC 0CAE 	dc.b	nRst, $60, nG3, $06, nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C
            C96BA : 0680 AE0C         
(1)  934/   C96BE : AF06                	dc.b	nBb3, $06
(1)  935/   C96C0 : (MACRO)             	smpsReturn
(1)  935/   C96C0 : F9                                  dc.b    $F9
(1)  936/   C96C1 :                     
(1)  937/   C96C1 :                     ; PSG1 Data
(1)  938/   C96C1 :                     Credits_PSG1:
(1)  939/   C96C1 : 8030                	dc.b	nRst, $30
(1)  940/   C96C3 : (MACRO)             	smpsLoop            $00, $1A, Credits_PSG1
(1)  940/   C96C3 : F7                          dc.b    $F7
(1)  940/   C96C4 : 001A                        dc.b    $00,$1A
(1)  940/   C96C6 : C196                                dc.w    z80_ptr(CREDITS_PSG1)
(1)  941/   C96C8 :                     
(1)  942/   C96C8 :                     Credits_Loop3C:
(1)  943/   C96C8 : C430 E730 C6E7 30C2 	dc.b	nG5, $30, smpsNoAttack, $30, nA5, smpsNoAttack, $30, nF5, smpsNoAttack, $30, nE5, smpsNoAttack
            C96D0 : E730 C1E7         
(1)  944/   C96D4 : 30                  	dc.b	$30
(1)  945/   C96D5 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop3C
(1)  945/   C96D5 : F7                          dc.b    $F7
(1)  945/   C96D6 : 0002                        dc.b    $00,$02
(1)  945/   C96D8 : C896                                dc.w    z80_ptr(CREDITS_LOOP3C)
(1)  946/   C96DA :                     
(1)  947/   C96DA :                     Credits_Loop3D:
(1)  948/   C96DA : 8030                	dc.b	nRst, $30
(1)  949/   C96DC : (MACRO)             	smpsLoop            $00, $10, Credits_Loop3D
(1)  949/   C96DC : F7                          dc.b    $F7
(1)  949/   C96DD : 0010                        dc.b    $00,$10
(1)  949/   C96DF : DA96                                dc.w    z80_ptr(CREDITS_LOOP3D)
(1)  950/   C96E1 : 8060                	dc.b	nRst, $60
(1)  951/   C96E3 :                     
(1)  952/   C96E3 :                     Credits_Loop3E:
(1)  953/   C96E3 : 8030                	dc.b	nRst, $30
(1)  954/   C96E5 : (MACRO)             	smpsLoop            $00, $0A, Credits_Loop3E
(1)  954/   C96E5 : F7                          dc.b    $F7
(1)  954/   C96E6 : 000A                        dc.b    $00,$0A
(1)  954/   C96E8 : E396                                dc.w    z80_ptr(CREDITS_LOOP3E)
(1)  955/   C96EA : 8060                	dc.b	nRst, $60
(1)  956/   C96EC : (MACRO)             	smpsAlterPitch      $F4
(1)  956/   C96EC :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  956/   C96EC : FBF4                                dc.b    $FB,$F4
(1)  957/   C96EE : (MACRO)             	smpsPSGAlterVol     $FE
(1)  957/   C96EE : ECFE                        dc.b    $EC,$FE
(1)  958/   C96F0 : (MACRO)             	smpsPSGvoice        fTone_01
(1)  958/   C96F0 : F501                        dc.b    $F5,FTONE_01
(1)  959/   C96F2 : (MACRO)             	smpsCall            Credits_Call28
(1)  959/   C96F2 : F8                          dc.b    $F8
(1)  959/   C96F3 : E497                                dc.w    z80_ptr(CREDITS_CALL28)
(1)  960/   C96F5 : AEB3 06AC 0CAE AEB3 	dc.b	nA3, nD4, $06, nG3, $0C, nA3, nA3, nD4, $06, nRst, nD4, nFs3
            C96FD : 0680 B3AB         
(1)  961/   C9701 : 0CAE                	dc.b	$0C, nA3
(1)  962/   C9703 : (MACRO)             	smpsCall            Credits_Call28
(1)  962/   C9703 : F8                          dc.b    $F8
(1)  962/   C9704 : E497                                dc.w    z80_ptr(CREDITS_CALL28)
(1)  963/   C9706 : (MACRO)             	smpsPSGvoice        fTone_0B
(1)  963/   C9706 : F50B                        dc.b    $F5,FTONE_0B
(1)  964/   C9708 : 8004 8060           	dc.b	nRst, $04, nRst, $60
(1)  965/   C970C : (MACRO)             	smpsCall            Credits_Call24
(1)  965/   C970C : F8                          dc.b    $F8
(1)  965/   C970D : 0D8C                                dc.w    z80_ptr(CREDITS_CALL24)
(1)  966/   C970F : E720 E7C5 01E7 C4E7 	dc.b	smpsNoAttack, $20, smpsNoAttack, nAb5, $01, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack
            C9717 : C3E7 C2E7         
(1)  967/   C971B : C1E7 C0E7 BFE7 BEE7 	dc.b	nE5, smpsNoAttack, nEb5, smpsNoAttack, nD5, smpsNoAttack, nCs5, smpsNoAttack, nC5, smpsNoAttack, nB4, smpsNoAttack
            C9723 : BDE7 BCE7         
(1)  968/   C9727 : BBE7 BA80 60        	dc.b	nBb4, smpsNoAttack, nA4, nRst, $60
(1)  969/   C972C : (MACRO)             	smpsPSGvoice        $00
(1)  969/   C972C : F500                        dc.b    $F5,$00
(1)  970/   C972E : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  970/   C972E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  970/   C972E : E806                                dc.b    $E8,$06
(1)  971/   C9730 : (MACRO)             	smpsAlterPitch      $F4
(1)  971/   C9730 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  971/   C9730 : FBF4                                dc.b    $FB,$F4
(1)  972/   C9732 : (MACRO)             	smpsCall            Credits_Call29
(1)  972/   C9732 : F8                          dc.b    $F8
(1)  972/   C9733 : DB97                                dc.w    z80_ptr(CREDITS_CALL29)
(1)  973/   C9735 : C280 C2             	dc.b	nF5, nRst, nF5
(1)  974/   C9738 : (MACRO)             	smpsCall            Credits_Call29
(1)  974/   C9738 : F8                          dc.b    $F8
(1)  974/   C9739 : DB97                                dc.w    z80_ptr(CREDITS_CALL29)
(1)  975/   C973B : C204 80C2 800C C280 	dc.b	nF5, $04, nRst, nF5, nRst, $0C, nF5, nRst, $60
            C9743 : 60               
(1)  976/   C9744 : (MACRO)             	smpsPSGvoice        fTone_08
(1)  976/   C9744 : F508                        dc.b    $F5,FTONE_08
(1)  977/   C9746 : (MACRO)             	smpsAlterPitch      $04
(1)  977/   C9746 :  (MACRO-2)                  smpsChangeTransposition $04
(1)  977/   C9746 : FB04                                dc.b    $FB,$04
(1)  978/   C9748 : (MACRO)             	smpsPSGAlterVol     $02
(1)  978/   C9748 : EC02                        dc.b    $EC,$02
(1)  979/   C974A : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)  979/   C974A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  979/   C974A : E806                                dc.b    $E8,$06
(1)  980/   C974C :                     
(1)  981/   C974C :                     Credits_Loop3F:
(1)  982/   C974C : (MACRO)             	smpsCall            Credits_Call27
(1)  982/   C974C : F8                          dc.b    $F8
(1)  982/   C974D : C797                                dc.w    z80_ptr(CREDITS_CALL27)
(1)  983/   C974F : (MACRO)             	smpsLoop            $00, $02, Credits_Loop3F
(1)  983/   C974F : F7                          dc.b    $F7
(1)  983/   C9750 : 0002                        dc.b    $00,$02
(1)  983/   C9752 : 4C97                                dc.w    z80_ptr(CREDITS_LOOP3F)
(1)  984/   C9754 :                     
(1)  985/   C9754 :                     Credits_Loop40:
(1)  986/   C9754 : 8030                	dc.b	nRst, $30
(1)  987/   C9756 : (MACRO)             	smpsLoop            $00, $0A, Credits_Loop40
(1)  987/   C9756 : F7                          dc.b    $F7
(1)  987/   C9757 : 000A                        dc.b    $00,$0A
(1)  987/   C9759 : 5497                                dc.w    z80_ptr(CREDITS_LOOP40)
(1)  988/   C975B : 8060                	dc.b	nRst, $60
(1)  989/   C975D : (MACRO)             	smpsPSGvoice        $00
(1)  989/   C975D : F500                        dc.b    $F5,$00
(1)  990/   C975F : (MACRO)             	smpsAlterPitch      $F0
(1)  990/   C975F :  (MACRO-2)                  smpsChangeTransposition $F0
(1)  990/   C975F : FBF0                                dc.b    $FB,$F0
(1)  991/   C9761 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  991/   C9761 : ECFF                        dc.b    $EC,$FF
(1)  992/   C9763 : 8060                	dc.b	nRst, $60
(1)  993/   C9765 : (MACRO)             	smpsCall            Credits_Call17
(1)  993/   C9765 : F8                          dc.b    $F8
(1)  993/   C9766 : B491                                dc.w    z80_ptr(CREDITS_CALL17)
(1)  994/   C9768 : (MACRO)             	smpsAlterPitch      $18
(1)  994/   C9768 :  (MACRO-2)                  smpsChangeTransposition $18
(1)  994/   C9768 : FB18                                dc.b    $FB,$18
(1)  995/   C976A : (MACRO)             	smpsPSGAlterVol     $02
(1)  995/   C976A : EC02                        dc.b    $EC,$02
(1)  996/   C976C : B530 B318 B50C B3B1 	dc.b	nE4, $30, nD4, $18, nE4, $0C, nD4, nC4, $30, nF4
            C9774 : 30B6               
(1)  997/   C9776 : (MACRO)             	smpsPSGAlterVol     $FE
(1)  997/   C9776 : ECFE                        dc.b    $EC,$FE
(1)  998/   C9778 : 800C B880 B880 BA80 	dc.b	nRst, $0C, nG4, nRst, nG4, nRst, nA4, nRst, nA4
            C9780 : BA               
(1)  999/   C9781 : (MACRO)             	smpsPSGAlterVol     $03
(1)  999/   C9781 : EC03                        dc.b    $EC,$03
(1) 1000/   C9783 : C418 C1BD BF0C 80   	dc.b	nG5, $18, nE5, nC5, nD5, $0C, nRst
(1) 1001/   C978A : (MACRO)             	smpsPSGAlterVol     $FC
(1) 1001/   C978A : ECFC                        dc.b    $EC,$FC
(1) 1002/   C978C : 80B8 80B8 80BA 1808 	dc.b	nRst, nG4, nRst, nG4, nRst, nA4, $18, $08, nG4, $04
            C9794 : B804               
(1) 1003/   C9796 : (MACRO)             	smpsAlterPitch      $F4
(1) 1003/   C9796 :  (MACRO-2)                  smpsChangeTransposition $F4
(1) 1003/   C9796 : FBF4                                dc.b    $FB,$F4
(1) 1004/   C9798 : (MACRO)             	smpsPSGAlterVol     $01
(1) 1004/   C9798 : EC01                        dc.b    $EC,$01
(1) 1005/   C979A : (MACRO)             	smpsPSGvoice        fTone_05
(1) 1005/   C979A : F505                        dc.b    $F5,FTONE_05
(1) 1006/   C979C :                     
(1) 1007/   C979C :                     Credits_Loop41:
(1) 1008/   C979C : 8060                	dc.b	nRst, $60
(1) 1009/   C979E : (MACRO)             	smpsLoop            $00, $05, Credits_Loop41
(1) 1009/   C979E : F7                          dc.b    $F7
(1) 1009/   C979F : 0005                        dc.b    $00,$05
(1) 1009/   C97A1 : 9C97                                dc.w    z80_ptr(CREDITS_LOOP41)
(1) 1010/   C97A3 : 800C C812 8006 C880 	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
            C97AB : C612 C8C6         
(1) 1011/   C97AF : 0CC1 18C5 C8CB 800C 	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
            C97B7 : CA80 CA12         
(1) 1012/   C97BB : C9CA 0680 09        	dc.b	nC6, nCs6, $06, nRst, $09
(1) 1013/   C97C0 : (MACRO)             	smpsAlterPitch      $30
(1) 1013/   C97C0 :  (MACRO-2)                  smpsChangeTransposition $30
(1) 1013/   C97C0 : FB30                                dc.b    $FB,$30
(1) 1014/   C97C2 : (MACRO)             	smpsPSGAlterVol     $FC
(1) 1014/   C97C2 : ECFC                        dc.b    $EC,$FC
(1) 1015/   C97C4 : (MACRO)             	smpsJump            Credits_Jump00
(1) 1015/   C97C4 : F6                          dc.b    $F6
(1) 1015/   C97C5 : 1D99                                dc.w    z80_ptr(CREDITS_JUMP00)
(1) 1016/   C97C7 :                     
(1) 1017/   C97C7 :                     Credits_Call27:
(1) 1018/   C97C7 : 800C BD06 1218 C406 	dc.b	nRst, $0C, nC5, $06, $12, $18, nG5, $06, $12, $0C, nRst, nF5
            C97CF : 120C 80C2         
(1) 1019/   C97D3 : 0612 18C4 0612 0C   	dc.b	$06, $12, $18, nG5, $06, $12, $0C
(1) 1020/   C97DA : (MACRO)             	smpsReturn
(1) 1020/   C97DA : F9                                  dc.b    $F9
(1) 1021/   C97DB :                     
(1) 1022/   C97DB :                     Credits_Call29:
(1) 1023/   C97DB : 8060 800C C280 C280 	dc.b	nRst, $60, nRst, $0C, nF5, nRst, nF5, nRst
(1) 1024/   C97E3 : (MACRO)             	smpsReturn
(1) 1024/   C97E3 : F9                                  dc.b    $F9
(1) 1025/   C97E4 :                     
(1) 1026/   C97E4 :                     Credits_Call28:
(1) 1027/   C97E4 : AC0C AF06 B30C ACAC 	dc.b	nG3, $0C, nBb3, $06, nD4, $0C, nG3, nG3, $06, nRst, nG3, $0C
            C97EC : 0680 AC0C         
(1) 1028/   C97F0 : AF06 B50C AC06 8006 	dc.b	nBb3, $06, nE4, $0C, nG3, $06, nRst, $06, nC4, $0C, nF4, $06
            C97F8 : B10C B606         
(1) 1029/   C97FC : AE0C B1B3 B606 80B6 	dc.b	nA3, $0C, nC4, nD4, nF4, $06, nRst, nF4, nF3, $0C, nBb3, nBb3
            C9804 : AA0C AFAF         
(1) 1030/   C9808 : B506 AC0C AFB2 B506 	dc.b	nE4, $06, nG3, $0C, nBb3, nCs4, nE4, $06, nRst, nE4, nA3, $0C
            C9810 : 80B5 AE0C         
(1) 1031/   C9814 : B2                  	dc.b	nCs4
(1) 1032/   C9815 : (MACRO)             	smpsReturn
(1) 1032/   C9815 : F9                                  dc.b    $F9
(1) 1033/   C9816 :                     
(1) 1034/   C9816 :                     ; PSG2 Data
(1) 1035/   C9816 :                     Credits_PSG2:
(1) 1036/   C9816 : 8030                	dc.b	nRst, $30
(1) 1037/   C9818 : (MACRO)             	smpsLoop            $00, $1A, Credits_PSG2
(1) 1037/   C9818 : F7                          dc.b    $F7
(1) 1037/   C9819 : 001A                        dc.b    $00,$1A
(1) 1037/   C981B : 1698                                dc.w    z80_ptr(CREDITS_PSG2)
(1) 1038/   C981D :                     
(1) 1039/   C981D :                     Credits_Loop34:
(1) 1040/   C981D : C130 E730 C3E7 30BF 	dc.b	nE5, $30, smpsNoAttack, $30, nFs5, smpsNoAttack, $30, nD5, smpsNoAttack, $30, nC5, smpsNoAttack
            C9825 : E730 BDE7         
(1) 1041/   C9829 : 30                  	dc.b	$30
(1) 1042/   C982A : (MACRO)             	smpsLoop            $00, $02, Credits_Loop34
(1) 1042/   C982A : F7                          dc.b    $F7
(1) 1042/   C982B : 0002                        dc.b    $00,$02
(1) 1042/   C982D : 1D98                                dc.w    z80_ptr(CREDITS_LOOP34)
(1) 1043/   C982F :                     
(1) 1044/   C982F :                     Credits_Loop35:
(1) 1045/   C982F : 8030                	dc.b	nRst, $30
(1) 1046/   C9831 : (MACRO)             	smpsLoop            $00, $10, Credits_Loop35
(1) 1046/   C9831 : F7                          dc.b    $F7
(1) 1046/   C9832 : 0010                        dc.b    $00,$10
(1) 1046/   C9834 : 2F98                                dc.w    z80_ptr(CREDITS_LOOP35)
(1) 1047/   C9836 : 8060                	dc.b	nRst, $60
(1) 1048/   C9838 : (MACRO)             	smpsAlterPitch      $0C
(1) 1048/   C9838 :  (MACRO-2)                  smpsChangeTransposition $0C
(1) 1048/   C9838 : FB0C                                dc.b    $FB,$0C
(1) 1049/   C983A : (MACRO)             	smpsPSGAlterVol     $FD
(1) 1049/   C983A : ECFD                        dc.b    $EC,$FD
(1) 1050/   C983C : (MACRO)             	smpsPSGvoice        fTone_04
(1) 1050/   C983C : F504                        dc.b    $F5,FTONE_04
(1) 1051/   C983E : 80                  	dc.b	nRst
(1) 1052/   C983F :                     
(1) 1053/   C983F :                     Credits_Loop36:
(1) 1054/   C983F : (MACRO)             	smpsCall            Credits_Call15
(1) 1054/   C983F : F8                          dc.b    $F8
(1) 1054/   C9840 : A291                                dc.w    z80_ptr(CREDITS_CALL15)
(1) 1055/   C9842 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop36
(1) 1055/   C9842 : F7                          dc.b    $F7
(1) 1055/   C9843 : 0002                        dc.b    $00,$02
(1) 1055/   C9845 : 3F98                                dc.w    z80_ptr(CREDITS_LOOP36)
(1) 1056/   C9847 : 8060                	dc.b	nRst, $60
(1) 1057/   C9849 : (MACRO)             	smpsModSet          $03, $02, $01, $05
(1) 1057/   C9849 : F0                          dc.b    $F0
(1) 1057/   C984A : 0402 010C                           dc.b    $03+1,$02,$01,(($05+1) * $02) & $FF
(1) 1057/   C984E :                             ;dc.b   $02,$01,$05
(1) 1058/   C984E : (MACRO)             	smpsPSGvoice        fTone_0A
(1) 1058/   C984E : F50A                        dc.b    $F5,FTONE_0A
(1) 1059/   C9850 : (MACRO)             	smpsAlterPitch      $E8
(1) 1059/   C9850 :  (MACRO-2)                  smpsChangeTransposition $E8
(1) 1059/   C9850 : FBE8                                dc.b    $FB,$E8
(1) 1060/   C9852 : (MACRO)             	smpsPSGAlterVol     $02
(1) 1060/   C9852 : EC02                        dc.b    $EC,$02
(1) 1061/   C9854 : 8030 8080 BD06 BFC6 	dc.b	nRst, $30, nRst, nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $60
            C985C : C21E 8060         
(1) 1062/   C9860 : 8006 C680 C6C4 80C4 	dc.b	nRst, $06, nA5, nRst, nA5, nG5, nRst, nG5, nRst, nFs5, nRst, nFs5
            C9868 : 80C3 80C3         
(1) 1063/   C986C : 80BF 0380 BF80 0980 	dc.b	nRst, nD5, $03, nRst, nD5, nRst, $09, nRst, $06, nRst, $30, nRst
            C9874 : 0680 3080         
(1) 1064/   C9878 : 80BD 06BF C6C2 1E80 	dc.b	nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $60
            C9880 : 60               
(1) 1065/   C9881 : (MACRO)             	smpsModOff
(1) 1065/   C9881 : FA                                  dc.b    $FA
(1) 1066/   C9882 :                     
(1) 1067/   C9882 :                     Credits_Loop37:
(1) 1068/   C9882 : 8030                	dc.b	nRst, $30
(1) 1069/   C9884 : (MACRO)             	smpsLoop            $00, $0C, Credits_Loop37
(1) 1069/   C9884 : F7                          dc.b    $F7
(1) 1069/   C9885 : 000C                        dc.b    $00,$0C
(1) 1069/   C9887 : 8298                                dc.w    z80_ptr(CREDITS_LOOP37)
(1) 1070/   C9889 : (MACRO)             	smpsPSGvoice        $00
(1) 1070/   C9889 : F500                        dc.b    $F5,$00
(1) 1071/   C988B : (MACRO)             	smpsPSGAlterVol     $FE
(1) 1071/   C988B : ECFE                        dc.b    $EC,$FE
(1) 1072/   C988D : (MACRO)             	smpsNoteFill        $06
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1072/   C988D :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1072/   C988D : E806                                dc.b    $E8,$06
(1) 1073/   C988F : 8060 800C BF80 BF80 	dc.b	nRst, $60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5, nRst
            C9897 : BF80 BF80         
(1) 1074/   C989B : 6080 0CBF 80BF 80BF 	dc.b	$60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, $04, nRst, nD5, nRst
            C98A3 : 0480 BF80         
(1) 1075/   C98A7 : 0CBF 8060           	dc.b	$0C, nD5, nRst, $60
(1) 1076/   C98AB : (MACRO)             	smpsPSGAlterVol     $02
(1) 1076/   C98AB : EC02                        dc.b    $EC,$02
(1) 1077/   C98AD :                     
(1) 1078/   C98AD :                     Credits_Loop38:
(1) 1079/   C98AD : (MACRO)             	smpsCall            Credits_Call27
(1) 1079/   C98AD : F8                          dc.b    $F8
(1) 1079/   C98AE : C797                                dc.w    z80_ptr(CREDITS_CALL27)
(1) 1080/   C98B0 : (MACRO)             	smpsLoop            $00, $02, Credits_Loop38
(1) 1080/   C98B0 : F7                          dc.b    $F7
(1) 1080/   C98B1 : 0002                        dc.b    $00,$02
(1) 1080/   C98B3 : AD98                                dc.w    z80_ptr(CREDITS_LOOP38)
(1) 1081/   C98B5 :                     
(1) 1082/   C98B5 :                     Credits_Loop39:
(1) 1083/   C98B5 : 8030                	dc.b	nRst, $30
(1) 1084/   C98B7 : (MACRO)             	smpsLoop            $00, $0A, Credits_Loop39
(1) 1084/   C98B7 : F7                          dc.b    $F7
(1) 1084/   C98B8 : 000A                        dc.b    $00,$0A
(1) 1084/   C98BA : B598                                dc.w    z80_ptr(CREDITS_LOOP39)
(1) 1085/   C98BC : 8060                	dc.b	nRst, $60
(1) 1086/   C98BE : (MACRO)             	smpsPSGvoice        $00
(1) 1086/   C98BE : F500                        dc.b    $F5,$00
(1) 1087/   C98C0 :                     	; This is wrong: it should convert from EHZ 2P's PSG2 transpose ($D0)
(1) 1088/   C98C0 :                     	; to CNZ's PSG2 transpose ($DC), but instead of adding $C, it subtracts
(1) 1089/   C98C0 :                     	; $C, causing the note to be too low and underflow the sound driver's
(1) 1090/   C98C0 :                     	; frequency table, producing invalid notes.
(1) 1091/   C98C0 :                     	;smpsAlterPitch      $F4
(1) 1092/   C98C0 : (MACRO)             	smpsAlterPitch      $0C ; Correct command
(1) 1092/   C98C0 :  (MACRO-2)                  smpsChangeTransposition $0C
(1) 1092/   C98C0 : FB0C                                dc.b    $FB,$0C
(1) 1093/   C98C2 : (MACRO)             	smpsPSGAlterVol     $FF
(1) 1093/   C98C2 : ECFF                        dc.b    $EC,$FF
(1) 1094/   C98C4 : (MACRO)             	smpsAlterPitch      $E8
(1) 1094/   C98C4 :  (MACRO-2)                  smpsChangeTransposition $E8
(1) 1094/   C98C4 : FBE8                                dc.b    $FB,$E8
(1) 1095/   C98C6 : 8060                	dc.b	nRst, $60
(1) 1096/   C98C8 : (MACRO)             	smpsCall            Credits_Call11
(1) 1096/   C98C8 : F8                          dc.b    $F8
(1) 1096/   C98C9 : F693                                dc.w    z80_ptr(CREDITS_CALL11)
(1) 1097/   C98CB : (MACRO)             	smpsAlterPitch      $18
(1) 1097/   C98CB :  (MACRO-2)                  smpsChangeTransposition $18
(1) 1097/   C98CB : FB18                                dc.b    $FB,$18
(1) 1098/   C98CD : (MACRO)             	smpsPSGAlterVol     $02
(1) 1098/   C98CD : EC02                        dc.b    $EC,$02
(1) 1099/   C98CF : B130 B018 B10C B0AE 	dc.b	nC4, $30, nB3, $18, nC4, $0C, nB3, nA3, $30, nC4
            C98D7 : 30B1               
(1) 1100/   C98D9 : (MACRO)             	smpsPSGAlterVol     $FE
(1) 1100/   C98D9 : ECFE                        dc.b    $EC,$FE
(1) 1101/   C98DB : 800C B580 B580 B680 	dc.b	nRst, $0C, nE4, nRst, nE4, nRst, nF4, nRst, nF4
            C98E3 : B6               
(1) 1102/   C98E4 : (MACRO)             	smpsPSGAlterVol     $03
(1) 1102/   C98E4 : EC03                        dc.b    $EC,$03
(1) 1103/   C98E6 : 80B1 80B1 80B1 80B1 	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, nRst, nC4
(1) 1104/   C98EE : (MACRO)             	smpsPSGAlterVol     $FC
(1) 1104/   C98EE : ECFC                        dc.b    $EC,$FC
(1) 1105/   C98F0 : 80B1 80B1 80B1 1808 	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, $18, $08, nC4, $04
            C98F8 : B104               
(1) 1106/   C98FA : (MACRO)             	smpsPSGAlterVol     $01
(1) 1106/   C98FA : EC01                        dc.b    $EC,$01
(1) 1107/   C98FC :                     	; If the above bug is fixed, then this line needs removing (the track
(1) 1108/   C98FC :                     	; will already be two octaves higher).
(1) 1109/   C98FC :                     ;	smpsAlterPitch      $18 ; Removed
(1) 1110/   C98FC : (MACRO)             	smpsPSGvoice        fTone_05
(1) 1110/   C98FC : F505                        dc.b    $F5,FTONE_05
(1) 1111/   C98FE : (MACRO)             	smpsAlterNote       $01
(1) 1111/   C98FE :  (MACRO-2)                  smpsDetune      $01
(1) 1111/   C98FE : E101                        dc.b    $E1,$01
(1) 1112/   C9900 : 8060 8080 8080 8080 	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst, nRst, $0C, nE6, $06, nRst
            C9908 : 0CCD 0680         
(1) 1113/   C990C : D4CD 800C CD06 80D4 	dc.b	nB6, nE6, nRst, $0C, nE6, $06, nRst, nB6, nE6, nRst, $18, nRst
            C9914 : CD80 1880         
(1) 1114/   C9918 : 54                  	dc.b	$54
(1) 1115/   C9919 : (MACRO)             	smpsAlterPitch      $24
(1) 1115/   C9919 :  (MACRO-2)                  smpsChangeTransposition $24
(1) 1115/   C9919 : FB24                                dc.b    $FB,$24
(1) 1116/   C991B : (MACRO)             	smpsPSGAlterVol     $FD
(1) 1116/   C991B : ECFD                        dc.b    $EC,$FD
(1) 1117/   C991D :                     
(1) 1118/   C991D :                     Credits_Jump00:
(1) 1119/   C991D : (MACRO)             	smpsPSGvoice        fTone_03
(1) 1119/   C991D : F503                        dc.b    $F5,FTONE_03
(1) 1120/   C991F : 8006                	dc.b	nRst, $06
(1) 1121/   C9921 :                     
(1) 1122/   C9921 :                     Credits_Loop3A:
(1) 1123/   C9921 : BF03 C1C3           	dc.b	nD5, $03, nE5, nFs5
(1) 1124/   C9925 : (MACRO)             	smpsPSGAlterVol     $01
(1) 1124/   C9925 : EC01                        dc.b    $EC,$01
(1) 1125/   C9927 : (MACRO)             	smpsAlterPitch      $FF
(1) 1125/   C9927 :  (MACRO-2)                  smpsChangeTransposition $FF
(1) 1125/   C9927 : FBFF                                dc.b    $FB,$FF
(1) 1126/   C9929 : (MACRO)             	smpsLoop            $00, $05, Credits_Loop3A
(1) 1126/   C9929 : F7                          dc.b    $F7
(1) 1126/   C992A : 0005                        dc.b    $00,$05
(1) 1126/   C992C : 2199                                dc.w    z80_ptr(CREDITS_LOOP3A)
(1) 1127/   C992E :                     
(1) 1128/   C992E :                     Credits_Loop3B:
(1) 1129/   C992E : BF03 C1C3           	dc.b	nD5, $03, nE5, nFs5
(1) 1130/   C9932 : (MACRO)             	smpsPSGAlterVol     $01
(1) 1130/   C9932 : EC01                        dc.b    $EC,$01
(1) 1131/   C9934 : (MACRO)             	smpsAlterPitch      $01
(1) 1131/   C9934 :  (MACRO-2)                  smpsChangeTransposition $01
(1) 1131/   C9934 : FB01                                dc.b    $FB,$01
(1) 1132/   C9936 : (MACRO)             	smpsLoop            $00, $07, Credits_Loop3B
(1) 1132/   C9936 : F7                          dc.b    $F7
(1) 1132/   C9937 : 0007                        dc.b    $00,$07
(1) 1132/   C9939 : 2E99                                dc.w    z80_ptr(CREDITS_LOOP3B)
(1) 1133/   C993B : (MACRO)             	smpsStop
(1) 1133/   C993B : F2                          dc.b    $F2
(1) 1134/   C993C :                     
(1) 1135/   C993C :                     ; PSG3 Data
(1) 1136/   C993C :                     Credits_PSG3:
(1) 1137/   C993C : (MACRO)             	smpsPSGform         $E7
(1) 1137/   C993C : F3E7                        dc.b    $F3,$E7
(1) 1138/   C993E : 8060                	dc.b	nRst, $60
(1) 1139/   C9940 : (MACRO)             	smpsPSGvoice        fTone_02
(1) 1139/   C9940 : F502                        dc.b    $F5,FTONE_02
(1) 1140/   C9942 :                     
(1) 1141/   C9942 :                     Credits_Loop27:
(1) 1142/   C9942 : C70C 0C0C 0606 0C0C 	dc.b	nMaxPSG, $0C, $0C, $0C, $06, $06, $0C, $0C, $06, $06, $0C
            C994A : 0606 0C            
(1) 1143/   C994D : (MACRO)             	smpsLoop            $00, $08, Credits_Loop27
(1) 1143/   C994D : F7                          dc.b    $F7
(1) 1143/   C994E : 0008                        dc.b    $00,$08
(1) 1143/   C9950 : 4299                                dc.w    z80_ptr(CREDITS_LOOP27)
(1) 1144/   C9952 :                     
(1) 1145/   C9952 :                     Credits_Loop28:
(1) 1146/   C9952 : 8030                	dc.b	nRst, $30
(1) 1147/   C9954 : (MACRO)             	smpsLoop            $00, $08, Credits_Loop28
(1) 1147/   C9954 : F7                          dc.b    $F7
(1) 1147/   C9955 : 0008                        dc.b    $00,$08
(1) 1147/   C9957 : 5299                                dc.w    z80_ptr(CREDITS_LOOP28)
(1) 1148/   C9959 :                     
(1) 1149/   C9959 :                     Credits_Loop29:
(1) 1150/   C9959 : C70C 0606           	dc.b	nMaxPSG, $0C, $06, $06
(1) 1151/   C995D : (MACRO)             	smpsLoop            $00, $1F, Credits_Loop29
(1) 1151/   C995D : F7                          dc.b    $F7
(1) 1151/   C995E : 001F                        dc.b    $00,$1F
(1) 1151/   C9960 : 5999                                dc.w    z80_ptr(CREDITS_LOOP29)
(1) 1152/   C9962 : 0C                  	dc.b	$0C
(1) 1153/   C9963 : (MACRO)             	smpsPSGvoice        fTone_03
(1) 1153/   C9963 : F503                        dc.b    $F5,FTONE_03
(1) 1154/   C9965 : C7                  	dc.b	nMaxPSG
(1) 1155/   C9966 : (MACRO)             	smpsPSGvoice        fTone_02
(1) 1155/   C9966 : F502                        dc.b    $F5,FTONE_02
(1) 1156/   C9968 :                     
(1) 1157/   C9968 :                     Credits_Loop2A:
(1) 1158/   C9968 : C70C 0606           	dc.b	nMaxPSG, $0C, $06, $06
(1) 1159/   C996C : (MACRO)             	smpsLoop            $00, $07, Credits_Loop2A
(1) 1159/   C996C : F7                          dc.b    $F7
(1) 1159/   C996D : 0007                        dc.b    $00,$07
(1) 1159/   C996F : 6899                                dc.w    z80_ptr(CREDITS_LOOP2A)
(1) 1160/   C9971 : 0606 0606           	dc.b	$06, $06, $06, $06
(1) 1161/   C9975 : (MACRO)             	smpsLoop            $01, $04, Credits_Loop2A
(1) 1161/   C9975 : F7                          dc.b    $F7
(1) 1161/   C9976 : 0104                        dc.b    $01,$04
(1) 1161/   C9978 : 6899                                dc.w    z80_ptr(CREDITS_LOOP2A)
(1) 1162/   C997A :                     
(1) 1163/   C997A :                     Credits_Loop2B:
(1) 1164/   C997A : 8030                	dc.b	nRst, $30
(1) 1165/   C997C : (MACRO)             	smpsLoop            $00, $0C, Credits_Loop2B
(1) 1165/   C997C : F7                          dc.b    $F7
(1) 1165/   C997D : 000C                        dc.b    $00,$0C
(1) 1165/   C997F : 7A99                                dc.w    z80_ptr(CREDITS_LOOP2B)
(1) 1166/   C9981 : (MACRO)             	smpsPSGvoice        fTone_04
(1) 1166/   C9981 : F504                        dc.b    $F5,FTONE_04
(1) 1167/   C9983 : (MACRO)             	smpsPSGAlterVol     $02
(1) 1167/   C9983 : EC02                        dc.b    $EC,$02
(1) 1168/   C9985 :                     
(1) 1169/   C9985 :                     Credits_Loop2C:
(1) 1170/   C9985 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1170/   C9985 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1170/   C9985 : E803                                dc.b    $E8,$03
(1) 1171/   C9987 : C706 06             	dc.b	nMaxPSG, $06, $06
(1) 1172/   C998A : (MACRO)             	smpsNoteFill        $00
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1172/   C998A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1172/   C998A : E800                                dc.b    $E8,$00
(1) 1173/   C998C : 0C                  	dc.b	$0C
(1) 1174/   C998D : (MACRO)             	smpsLoop            $00, $04, Credits_Loop2C
(1) 1174/   C998D : F7                          dc.b    $F7
(1) 1174/   C998E : 0004                        dc.b    $00,$04
(1) 1174/   C9990 : 8599                                dc.w    z80_ptr(CREDITS_LOOP2C)
(1) 1175/   C9992 : (MACRO)             	smpsPSGvoice        fTone_02
(1) 1175/   C9992 : F502                        dc.b    $F5,FTONE_02
(1) 1176/   C9994 : (MACRO)             	smpsPSGAlterVol     $FD
(1) 1176/   C9994 : ECFD                        dc.b    $EC,$FD
(1) 1177/   C9996 :                     
(1) 1178/   C9996 :                     Credits_Loop2D:
(1) 1179/   C9996 : 800C C706 8007 C706 	dc.b	nRst, $0C, nMaxPSG, $06, nRst, $07, nMaxPSG, $06, nRst, $11, nMaxPSG, $0C
            C999E : 8011 C70C         
(1) 1180/   C99A2 : 8006 C70C 8006 C780 	dc.b	nRst, $06, nMaxPSG, $0C, nRst, $06, nMaxPSG, nRst
(1) 1181/   C99AA : (MACRO)             	smpsLoop            $00, $07, Credits_Loop2D
(1) 1181/   C99AA : F7                          dc.b    $F7
(1) 1181/   C99AB : 0007                        dc.b    $00,$07
(1) 1181/   C99AD : 9699                                dc.w    z80_ptr(CREDITS_LOOP2D)
(1) 1182/   C99AF : (MACRO)             	smpsPSGAlterVol     $02
(1) 1182/   C99AF : EC02                        dc.b    $EC,$02
(1) 1183/   C99B1 :                     
(1) 1184/   C99B1 :                     Credits_Loop2E:
(1) 1185/   C99B1 : C70C 0804           	dc.b	nMaxPSG, $0C, $08, $04
(1) 1186/   C99B5 : (MACRO)             	smpsLoop            $00, $18, Credits_Loop2E
(1) 1186/   C99B5 : F7                          dc.b    $F7
(1) 1186/   C99B6 : 0018                        dc.b    $00,$18
(1) 1186/   C99B8 : B199                                dc.w    z80_ptr(CREDITS_LOOP2E)
(1) 1187/   C99BA :                     
(1) 1188/   C99BA :                     Credits_Loop2F:
(1) 1189/   C99BA : C70C 0C0C 0804      	dc.b	nMaxPSG, $0C, $0C, $0C, $08, $04
(1) 1190/   C99C0 : (MACRO)             	smpsLoop            $00, $08, Credits_Loop2F
(1) 1190/   C99C0 : F7                          dc.b    $F7
(1) 1190/   C99C1 : 0008                        dc.b    $00,$08
(1) 1190/   C99C3 : BA99                                dc.w    z80_ptr(CREDITS_LOOP2F)
(1) 1191/   C99C5 : 8060                	dc.b	nRst, $60
(1) 1192/   C99C7 : (MACRO)             	smpsPSGvoice        fTone_04
(1) 1192/   C99C7 : F504                        dc.b    $F5,FTONE_04
(1) 1193/   C99C9 : (MACRO)             	smpsPSGAlterVol     $02
(1) 1193/   C99C9 : EC02                        dc.b    $EC,$02
(1) 1194/   C99CB :                     
(1) 1195/   C99CB :                     Credits_Loop30:
(1) 1196/   C99CB : C706 060C           	dc.b	nMaxPSG, $06, $06, $0C
(1) 1197/   C99CF : (MACRO)             	smpsLoop            $00, $10, Credits_Loop30
(1) 1197/   C99CF : F7                          dc.b    $F7
(1) 1197/   C99D0 : 0010                        dc.b    $00,$10
(1) 1197/   C99D2 : CB99                                dc.w    z80_ptr(CREDITS_LOOP30)
(1) 1198/   C99D4 :                     
(1) 1199/   C99D4 :                     Credits_Loop31:
(1) 1200/   C99D4 : 8030                	dc.b	nRst, $30
(1) 1201/   C99D6 : (MACRO)             	smpsLoop            $00, $0A, Credits_Loop31
(1) 1201/   C99D6 : F7                          dc.b    $F7
(1) 1201/   C99D7 : 000A                        dc.b    $00,$0A
(1) 1201/   C99D9 : D499                                dc.w    z80_ptr(CREDITS_LOOP31)
(1) 1202/   C99DB : 8060                	dc.b	nRst, $60
(1) 1203/   C99DD : (MACRO)             	smpsPSGAlterVol     $FF
(1) 1203/   C99DD : ECFF                        dc.b    $EC,$FF
(1) 1204/   C99DF :                     
(1) 1205/   C99DF :                     Credits_Loop32:
(1) 1206/   C99DF : (MACRO)             	smpsPSGvoice        fTone_01
(1) 1206/   C99DF : F501                        dc.b    $F5,FTONE_01
(1) 1207/   C99E1 : C70C                	dc.b	nMaxPSG, $0C
(1) 1208/   C99E3 : (MACRO)             	smpsPSGvoice        fTone_02
(1) 1208/   C99E3 : F502                        dc.b    $F5,FTONE_02
(1) 1209/   C99E5 : (MACRO)             	smpsPSGAlterVol     $FF
(1) 1209/   C99E5 : ECFF                        dc.b    $EC,$FF
(1) 1210/   C99E7 : 08                  	dc.b	$08
(1) 1211/   C99E8 : (MACRO)             	smpsPSGvoice        fTone_01
(1) 1211/   C99E8 : F501                        dc.b    $F5,FTONE_01
(1) 1212/   C99EA : (MACRO)             	smpsPSGAlterVol     $01
(1) 1212/   C99EA : EC01                        dc.b    $EC,$01
(1) 1213/   C99EC : 04                  	dc.b	$04
(1) 1214/   C99ED : (MACRO)             	smpsLoop            $00, $27, Credits_Loop32
(1) 1214/   C99ED : F7                          dc.b    $F7
(1) 1214/   C99EE : 0027                        dc.b    $00,$27
(1) 1214/   C99F0 : DF99                                dc.w    z80_ptr(CREDITS_LOOP32)
(1) 1215/   C99F2 : (MACRO)             	smpsPSGAlterVol     $FF
(1) 1215/   C99F2 : ECFF                        dc.b    $EC,$FF
(1) 1216/   C99F4 : (MACRO)             	smpsPSGvoice        fTone_04
(1) 1216/   C99F4 : F504                        dc.b    $F5,FTONE_04
(1) 1217/   C99F6 :                     
(1) 1218/   C99F6 :                     Credits_Loop33:
(1) 1219/   C99F6 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1219/   C99F6 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1219/   C99F6 : E803                                dc.b    $E8,$03
(1) 1220/   C99F8 : C70C                	dc.b	nMaxPSG, $0C
(1) 1221/   C99FA : (MACRO)             	smpsNoteFill        $0C
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1221/   C99FA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1221/   C99FA : E80C                                dc.b    $E8,$0C
(1) 1222/   C99FC : 0C                  	dc.b	$0C
(1) 1223/   C99FD : (MACRO)             	smpsLoop            $00, $1E, Credits_Loop33
(1) 1223/   C99FD : F7                          dc.b    $F7
(1) 1223/   C99FE : 001E                        dc.b    $00,$1E
(1) 1223/   C9A00 : F699                                dc.w    z80_ptr(CREDITS_LOOP33)
(1) 1224/   C9A02 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1224/   C9A02 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1224/   C9A02 : E803                                dc.b    $E8,$03
(1) 1225/   C9A04 : C706                	dc.b	nMaxPSG, $06
(1) 1226/   C9A06 : (MACRO)             	smpsNoteFill        $0E
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1226/   C9A06 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1226/   C9A06 : E80E                                dc.b    $E8,$0E
(1) 1227/   C9A08 : 12                  	dc.b	$12
(1) 1228/   C9A09 : (MACRO)             	smpsNoteFill        $03
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1228/   C9A09 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1228/   C9A09 : E803                                dc.b    $E8,$03
(1) 1229/   C9A0B : 0C                  	dc.b	$0C
(1) 1230/   C9A0C : (MACRO)             	smpsNoteFill        $0F
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1) 1230/   C9A0C :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1) 1230/   C9A0C : E80F                                dc.b    $E8,$0F
(1) 1231/   C9A0E : 0C                  	dc.b	$0C
(1) 1232/   C9A0F : (MACRO)             	smpsStop
(1) 1232/   C9A0F : F2                          dc.b    $F2
(1) 1233/   C9A10 :                     
(1) 1234/   C9A10 :                     ; DAC Data
(1) 1235/   C9A10 :                     Credits_DAC:
(1) 1236/   C9A10 : 8206 8282 8282 0C06 	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
            C9A18 : 0C06 0C0C         
(1) 1237/   C9A1C : 0C                  	dc.b	$0C
(1) 1238/   C9A1D :                     
(1) 1239/   C9A1D :                     Credits_Loop00:
(1) 1240/   C9A1D : 8118 82             	dc.b	dKick, $18, dSnare
(1) 1241/   C9A20 : (MACRO)             	smpsLoop            $00, $0E, Credits_Loop00
(1) 1241/   C9A20 : F7                          dc.b    $F7
(1) 1241/   C9A21 : 000E                        dc.b    $00,$0E
(1) 1241/   C9A23 : 1D9A                                dc.w    z80_ptr(CREDITS_LOOP00)
(1) 1242/   C9A25 : 810C                	dc.b	dKick, $0C
(1) 1243/   C9A27 :                     
(1) 1244/   C9A27 :                     Credits_Loop01:
(1) 1245/   C9A27 : 82                  	dc.b	dSnare
(1) 1246/   C9A28 : (MACRO)             	smpsLoop            $00, $07, Credits_Loop01
(1) 1246/   C9A28 : F7                          dc.b    $F7
(1) 1246/   C9A29 : 0007                        dc.b    $00,$07
(1) 1246/   C9A2B : 279A                                dc.w    z80_ptr(CREDITS_LOOP01)
(1) 1247/   C9A2D : (MACRO)             	smpsSetTempoMod     $EA
(1) 1247/   C9A2D : FF00                                dc.b    $FF,$00
(1) 1247/   C9A2F :  (MACRO-2)                  convertMainTempoMod $EA
(1) 1247/   C9A2F : 16                                          dc.b    s2TempotoS3($EA)
(1) 1248/   C9A30 : (MACRO)             	smpsCall            Credits_Call00
(1) 1248/   C9A30 : F8                          dc.b    $F8
(1) 1248/   C9A31 : 1F9C                                dc.w    z80_ptr(CREDITS_CALL00)
(1) 1249/   C9A33 : 810C 8D82 8181 8E82 	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
            C9A3B : 8404 0602         
(1) 1250/   C9A3F : 810C 8206 8282 8281 	dc.b	dKick, $0C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dSnare, $06, dSnare
            C9A47 : 0C82 0682         
(1) 1251/   C9A4B : 8181 8282 8282      	dc.b	dKick, dKick, dSnare, dSnare, dSnare, dSnare
(1) 1252/   C9A51 :                     
(1) 1253/   C9A51 :                     Credits_Loop02:
(1) 1254/   C9A51 : 8118 8281 82        	dc.b	dKick, $18, dSnare, dKick, dSnare
(1) 1255/   C9A56 : (MACRO)             	smpsLoop            $00, $07, Credits_Loop02
(1) 1255/   C9A56 : F7                          dc.b    $F7
(1) 1255/   C9A57 : 0007                        dc.b    $00,$07
(1) 1255/   C9A59 : 519A                                dc.w    z80_ptr(CREDITS_LOOP02)
(1) 1256/   C9A5B : 810C 8282 8282 0682 	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, $06, dSnare, dMidTom, dMidTom, dLowTom, dLowTom
            C9A63 : 8C8C 8D8D         
(1) 1257/   C9A67 : 8E8E                	dc.b	dFloorTom, dFloorTom
(1) 1258/   C9A69 : (MACRO)             	smpsCall            Credits_Call01
(1) 1258/   C9A69 : F8                          dc.b    $F8
(1) 1258/   C9A6A : 359C                                dc.w    z80_ptr(CREDITS_CALL01)
(1) 1259/   C9A6C : 8118 820C 8118 820C 	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare, $06, dSnare
            C9A74 : 8282 0682         
(1) 1260/   C9A78 : (MACRO)             	smpsCall            Credits_Call01
(1) 1260/   C9A78 : F8                          dc.b    $F8
(1) 1260/   C9A79 : 359C                                dc.w    z80_ptr(CREDITS_CALL01)
(1) 1261/   C9A7B : 810C 8282 828D 068D 	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dLowTom, $06, dLowTom, dFloorTom, dFloorTom, dSnare, $06
            C9A83 : 8E8E 8206         
(1) 1262/   C9A87 : 828D 0C82 0C82 0682 	dc.b	dSnare, dLowTom, $0C, dSnare, $0C, dSnare, $06, dSnare, nRst, dSnare, dSnare, $0C
            C9A8F : 8082 820C         
(1) 1263/   C9A93 : 820C 8282 0682 8D8D 	dc.b	dSnare, $0C, dSnare, dSnare, $06, dSnare, dLowTom, dLowTom
(1) 1264/   C9A9B :                     
(1) 1265/   C9A9B :                     Credits_Loop03:
(1) 1266/   C9A9B : 810C 8F06 9082 0C90 	dc.b	dKick, $0C, dHiClap, $06, dMidClap, dSnare, $0C, dMidClap, $06, dLowClap, dKick, $0C
            C9AA3 : 0691 810C         
(1) 1267/   C9AA7 : 8F06 9182 0C8F 0691 	dc.b	dHiClap, $06, dLowClap, dSnare, $0C, dHiClap, $06, dLowClap
(1) 1268/   C9AAF : (MACRO)             	smpsLoop            $00, $04, Credits_Loop03
(1) 1268/   C9AAF : F7                          dc.b    $F7
(1) 1268/   C9AB0 : 0004                        dc.b    $00,$04
(1) 1268/   C9AB2 : 9B9A                                dc.w    z80_ptr(CREDITS_LOOP03)
(1) 1269/   C9AB4 : 810C 8F06 9182 0C8F 	dc.b	dKick, $0C, dHiClap, $06, dLowClap, dSnare, $0C, dHiClap, $06, dLowClap, dMidTom, $06
            C9ABC : 0691 8C06         
(1) 1270/   C9AC0 : 0303 8D06 8D8D 8E8E 	dc.b	$03, $03, dLowTom, $06, dLowTom, dLowTom, dFloorTom, dFloorTom, dFloorTom, dKick, $06, $0C
            C9AC8 : 8E81 060C         
(1) 1271/   C9ACC : 8206 800C 8182 8E82 	dc.b	dSnare, $06, nRst, $0C, dKick, dSnare, dFloorTom, dSnare, $06, dSnare, dSnare, dSnare
            C9AD4 : 0682 8282         
(1) 1272/   C9AD8 :                     
(1) 1273/   C9AD8 :                     Credits_Loop04:
(1) 1274/   C9AD8 : 810C 8206 8112 8106 	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dKick, $06, dKick, $12, dMidTom, $06
            C9AE0 : 8112 8C06         
(1) 1275/   C9AE4 : 820C 8306 8180      	dc.b	dSnare, $0C, dClap, $06, dKick, nRst
(1) 1276/   C9AEA : (MACRO)             	smpsLoop            $00, $06, Credits_Loop04
(1) 1276/   C9AEA : F7                          dc.b    $F7
(1) 1276/   C9AEB : 0006                        dc.b    $00,$06
(1) 1276/   C9AED : D89A                                dc.w    z80_ptr(CREDITS_LOOP04)
(1) 1277/   C9AEF : 810C 8206 8112 8106 	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dKick, $06, dKick, $06, dSnare, $06
            C9AF7 : 8106 8206         
(1) 1278/   C9AFB : 810C 0682 0C08 04   	dc.b	dKick, $0C, $06, dSnare, $0C, $08, $04
(1) 1279/   C9B02 : (MACRO)             	smpsSetTempoMod     $CD
(1) 1279/   C9B02 : FF00                                dc.b    $FF,$00
(1) 1279/   C9B04 :  (MACRO-2)                  convertMainTempoMod $CD
(1) 1279/   C9B04 : 33                                          dc.b    s2TempotoS3($CD)
(1) 1280/   C9B05 : 8230 820C 8282 8208 	dc.b	dSnare, $30, dSnare, $0C, dSnare, dSnare, dSnare, $08, $04
            C9B0D : 04               
(1) 1281/   C9B0E : (MACRO)             	smpsCall            Credits_Call02
(1) 1281/   C9B0E : F8                          dc.b    $F8
(1) 1281/   C9B0F : 509C                                dc.w    z80_ptr(CREDITS_CALL02)
(1) 1282/   C9B11 : (MACRO)             	smpsCall            Credits_Call02
(1) 1282/   C9B11 : F8                          dc.b    $F8
(1) 1282/   C9B12 : 509C                                dc.w    z80_ptr(CREDITS_CALL02)
(1) 1283/   C9B14 : 8108 0C04 820C 8108 	dc.b	dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $04, dSnare, $08, $04
            C9B1C : 0482 0804         
(1) 1284/   C9B20 : 0804 0404 0408 04   	dc.b	$08, $04, $04, $04, $04, $08, $04
(1) 1285/   C9B27 : (MACRO)             	smpsSetTempoMod     $C5
(1) 1285/   C9B27 : FF00                                dc.b    $FF,$00
(1) 1285/   C9B29 :  (MACRO-2)                  convertMainTempoMod $C5
(1) 1285/   C9B29 : 3B                                          dc.b    s2TempotoS3($C5)
(1) 1286/   C9B2A :                     
(1) 1287/   C9B2A :                     Credits_Loop05:
(1) 1288/   C9B2A : 8109 8103 0C82 8181 	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $18, dSnare
            C9B32 : 1882               
(1) 1289/   C9B34 : (MACRO)             	smpsLoop            $00, $03, Credits_Loop05
(1) 1289/   C9B34 : F7                          dc.b    $F7
(1) 1289/   C9B35 : 0003                        dc.b    $00,$03
(1) 1289/   C9B37 : 2A9B                                dc.w    z80_ptr(CREDITS_LOOP05)
(1) 1290/   C9B39 : 8109 8103 0C82 8181 	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $18, dSnare, $0C, $06
            C9B41 : 1882 0C06         
(1) 1291/   C9B45 : 0681 0C82 0682 8282 	dc.b	$06, dKick, $0C, dSnare, $06, dSnare, dSnare, dSnare, dLowTom, $0C, dSnare, $0C
            C9B4D : 8D0C 820C         
(1) 1292/   C9B51 : 0C0C 0606           	dc.b	$0C, $0C, $06, $06
(1) 1293/   C9B55 :                     
(1) 1294/   C9B55 :                     Credits_Loop06:
(1) 1295/   C9B55 : 810C 8182 8081 8182 	dc.b	dKick, $0C, dKick, dSnare, nRst, dKick, dKick, dSnare, dClap
            C9B5D : 83               
(1) 1296/   C9B5E : (MACRO)             	smpsLoop            $00, $03, Credits_Loop06
(1) 1296/   C9B5E : F7                          dc.b    $F7
(1) 1296/   C9B5F : 0003                        dc.b    $00,$03
(1) 1296/   C9B61 : 559B                                dc.w    z80_ptr(CREDITS_LOOP06)
(1) 1297/   C9B63 : 8182 8282 8206 0606 	dc.b	dKick, dSnare, dSnare, dSnare, dSnare, $06, $06, $06, $06, $0C, $06, $06
            C9B6B : 060C 0606         
(1) 1298/   C9B6F : 8106 8182 8281 8281 	dc.b	dKick, $06, dKick, dSnare, dSnare, dKick, dSnare, dKick, dKick, dSnare, $02, dSnare
            C9B77 : 8182 0282         
(1) 1299/   C9B7B : 0481 0C06 820C 0606 	dc.b	$04, dKick, $0C, $06, dSnare, $0C, $06, $06, dKick, $18, dSnare, $0C
            C9B83 : 8118 820C         
(1) 1300/   C9B87 : 8181 1882 8106 8112 	dc.b	dKick, dKick, $18, dSnare, dKick, $06, dKick, $12, dSnare, $0C, dKick, dKick
            C9B8F : 820C 8181         
(1) 1301/   C9B93 : 1882 8118 820C 8181 	dc.b	$18, dSnare, dKick, $18, dSnare, $0C, dKick, dKick, $18, dSnare, dKick, $06
            C9B9B : 1882 8106         
(1) 1302/   C9B9F : 8112 820C 0C06 0606 	dc.b	dKick, $12, dSnare, $0C, $0C, $06, $06, $06, $06, $0C, $06, $06
            C9BA7 : 060C 0606         
(1) 1303/   C9BAB : 8202 0481 0C06 0C82 	dc.b	dSnare, $02, $04, dKick, $0C, $06, $0C, dSnare, $02, $04, dKick, $0C
            C9BB3 : 0204 810C         
(1) 1304/   C9BB7 : 060C 8206 8282 82   	dc.b	$06, $0C, dSnare, $06, dSnare, dSnare, dSnare
(1) 1305/   C9BBE : (MACRO)             	smpsSetTempoMod     $C0
(1) 1305/   C9BBE : FF00                                dc.b    $FF,$00
(1) 1305/   C9BC0 :  (MACRO-2)                  convertMainTempoMod $C0
(1) 1305/   C9BC0 : 40                                          dc.b    s2TempotoS3($C0)
(1) 1306/   C9BC1 : 810C 8281 8281 8281 	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, dSnare, dKick, $08, dSnare, $04, $0C
            C9BC9 : 0882 040C         
(1) 1307/   C9BCD :                     
(1) 1308/   C9BCD :                     Credits_Loop07:
(1) 1309/   C9BCD : 810C 82             	dc.b	dKick, $0C, dSnare
(1) 1310/   C9BD0 : (MACRO)             	smpsLoop            $00, $0F, Credits_Loop07
(1) 1310/   C9BD0 : F7                          dc.b    $F7
(1) 1310/   C9BD1 : 000F                        dc.b    $00,$0F
(1) 1310/   C9BD3 : CD9B                                dc.w    z80_ptr(CREDITS_LOOP07)
(1) 1311/   C9BD5 : 8108 8204 0C        	dc.b	dKick, $08, dSnare, $04, $0C
(1) 1312/   C9BDA :                     
(1) 1313/   C9BDA :                     Credits_Loop08:
(1) 1314/   C9BDA : 810C 82             	dc.b	dKick, $0C, dSnare
(1) 1315/   C9BDD : (MACRO)             	smpsLoop            $00, $13, Credits_Loop08
(1) 1315/   C9BDD : F7                          dc.b    $F7
(1) 1315/   C9BDE : 0013                        dc.b    $00,$13
(1) 1315/   C9BE0 : DA9B                                dc.w    z80_ptr(CREDITS_LOOP08)
(1) 1316/   C9BE2 : 8208 0C04 810C 8281 	dc.b	dSnare, $08, $0C, $04, dKick, $0C, dSnare, dKick, dSnare, dKick, $0C, dSnare
            C9BEA : 8281 0C82         
(1) 1317/   C9BEE : 8106 8002 8282 8209 	dc.b	dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare, $03
            C9BF6 : 8203               
(1) 1318/   C9BF8 :                     
(1) 1319/   C9BF8 :                     Credits_Loop09:
(1) 1320/   C9BF8 : 810C 82             	dc.b	dKick, $0C, dSnare
(1) 1321/   C9BFB : (MACRO)             	smpsLoop            $00, $06, Credits_Loop09
(1) 1321/   C9BFB : F7                          dc.b    $F7
(1) 1321/   C9BFC : 0006                        dc.b    $00,$06
(1) 1321/   C9BFE : F89B                                dc.w    z80_ptr(CREDITS_LOOP09)
(1) 1322/   C9C00 : 810C 8281 0680 0282 	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
            C9C08 : 8282 0982         
(1) 1323/   C9C0C : 03                  	dc.b	$03
(1) 1324/   C9C0D : (MACRO)             	smpsLoop            $01, $03, Credits_Loop09
(1) 1324/   C9C0D : F7                          dc.b    $F7
(1) 1324/   C9C0E : 0103                        dc.b    $01,$03
(1) 1324/   C9C10 : F89B                                dc.w    z80_ptr(CREDITS_LOOP09)
(1) 1325/   C9C12 : 810C 8281 8281 0682 	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
            C9C1A : 1282 0C81         
(1) 1326/   C9C1E : (MACRO)             	smpsStop
(1) 1326/   C9C1E : F2                          dc.b    $F2
(1) 1327/   C9C1F :                     
(1) 1328/   C9C1F :                     Credits_Call00:
(1) 1329/   C9C1F : 810C 8D82 8181 8E82 	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
            C9C27 : 8404 0602         
(1) 1330/   C9C2B : 810C 8D82 8181 8E82 	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dClap
            C9C33 : 83               
(1) 1331/   C9C34 : (MACRO)             	smpsReturn
(1) 1331/   C9C34 : F9                                  dc.b    $F9
(1) 1332/   C9C35 :                     
(1) 1333/   C9C35 :                     Credits_Call01:
(1) 1334/   C9C35 : 8118 820C 8118 0C82 	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, dKick, dKick, $18, dSnare
            C9C3D : 8181 1882         
(1) 1335/   C9C41 : 0C81 1281 8218 8182 	dc.b	$0C, dKick, $12, dKick, dSnare, $18, dKick, dSnare, $0C, dKick, $18, $0C
            C9C49 : 0C81 180C         
(1) 1336/   C9C4D : 8281                	dc.b	dSnare, dKick
(1) 1337/   C9C4F : (MACRO)             	smpsReturn
(1) 1337/   C9C4F : F9                                  dc.b    $F9
(1) 1338/   C9C50 :                     
(1) 1339/   C9C50 :                     Credits_Call02:
(1) 1340/   C9C50 : 8108 0C04 820C 8108 	dc.b	dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C, dSnare, $04, dKick
            C9C58 : 0C82 0481         
(1) 1341/   C9C5C : 0C82 8181 080C 0482 	dc.b	$0C, dSnare, dKick, dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C
            C9C64 : 0C81 080C         
(1) 1342/   C9C68 : 8204 810C 8282 0804 	dc.b	dSnare, $04, dKick, $0C, dSnare, dSnare, $08, $04
(1) 1343/   C9C70 : (MACRO)             	smpsReturn
(1) 1343/   C9C70 : F9                                  dc.b    $F9
(1) 1344/   C9C71 :                     
(1) 1345/   C9C71 :                     Credits_Voices:
(1) 1346/   C9C71 :                     ;	Voice $00
(1) 1347/   C9C71 :                     ;	$3A
(1) 1348/   C9C71 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1) 1349/   C9C71 :                     ;	$00, $00, $00, $01, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
(1) 1350/   C9C71 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1350/   C9C71 : =$2                 vcAlgorithm set $02
(1) 1351/   C9C71 : (MACRO)             	smpsVcFeedback      $07
(1) 1351/   C9C71 : =$7                 vcFeedback set $07
(1) 1352/   C9C71 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1352/   C9C71 : =$0                 vcUnusedBits set $00
(1) 1352/   C9C71 : =$0                 vcD1R1Unk set 0
(1) 1352/   C9C71 : =$0                 vcD1R2Unk set 0
(1) 1352/   C9C71 : =$0                 vcD1R3Unk set 0
(1) 1352/   C9C71 : =$0                 vcD1R4Unk set 0
(1) 1353/   C9C71 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1353/   C9C71 : =$0                 vcDT1 set $00
(1) 1353/   C9C71 : =$0                 vcDT2 set $00
(1) 1353/   C9C71 : =$0                 vcDT3 set $00
(1) 1353/   C9C71 : =$0                 vcDT4 set $00
(1) 1354/   C9C71 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1) 1354/   C9C71 : =$1                 vcCF1 set $01
(1) 1354/   C9C71 : =$1                 vcCF2 set $01
(1) 1354/   C9C71 : =$7                 vcCF3 set $07
(1) 1354/   C9C71 : =$1                 vcCF4 set $01
(1) 1355/   C9C71 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1) 1355/   C9C71 : =$1                 vcRS1 set $01
(1) 1355/   C9C71 : =$2                 vcRS2 set $02
(1) 1355/   C9C71 : =$2                 vcRS3 set $02
(1) 1355/   C9C71 : =$2                 vcRS4 set $02
(1) 1356/   C9C71 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1) 1356/   C9C71 : =$13                vcAR1 set $13
(1) 1356/   C9C71 : =$D                 vcAR2 set $0D
(1) 1356/   C9C71 : =$E                 vcAR3 set $0E
(1) 1356/   C9C71 : =$E                 vcAR4 set $0E
(1) 1357/   C9C71 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1357/   C9C71 : =$0                 vcAM1 set $00<<5
(1) 1357/   C9C71 : =$0                 vcAM2 set $00<<5
(1) 1357/   C9C71 : =$0                 vcAM3 set $00<<5
(1) 1357/   C9C71 : =$0                 vcAM4 set $00<<5
(1) 1358/   C9C71 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1) 1358/   C9C71 : =$3                 vcD1R1 set $03
(1) 1358/   C9C71 : =$E                 vcD1R2 set $0E
(1) 1358/   C9C71 : =$E                 vcD1R3 set $0E
(1) 1358/   C9C71 : =$E                 vcD1R4 set $0E
(1) 1359/   C9C71 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $00
(1) 1359/   C9C71 : =$1                 vcD2R1 set $01
(1) 1359/   C9C71 : =$0                 vcD2R2 set $00
(1) 1359/   C9C71 : =$0                 vcD2R3 set $00
(1) 1359/   C9C71 : =$0                 vcD2R4 set $00
(1) 1360/   C9C71 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1) 1360/   C9C71 : =$0                 vcDL1 set $00
(1) 1360/   C9C71 : =$1                 vcDL2 set $01
(1) 1360/   C9C71 : =$F                 vcDL3 set $0F
(1) 1360/   C9C71 : =$1                 vcDL4 set $01
(1) 1361/   C9C71 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1361/   C9C71 : =$F                 vcRR1 set $0F
(1) 1361/   C9C71 : =$F                 vcRR2 set $0F
(1) 1361/   C9C71 : =$F                 vcRR3 set $0F
(1) 1361/   C9C71 : =$F                 vcRR4 set $0F
(1) 1362/   C9C71 : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $17
(1) 1362/   C9C71 : =$80                vcTL1 set $80
(1) 1362/   C9C71 : =$27                vcTL2 set $27
(1) 1362/   C9C71 : =$28                vcTL3 set $28
(1) 1362/   C9C71 : =$17                vcTL4 set $17
(1) 1362/   C9C71 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1362/   C9C72 :                     ;   0     1     2     3     4     5     6     7
(1) 1362/   C9C72 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1362/   C9C72 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1362/   C9C72 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1362/   C9C72 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1362/   C9C72 : =$80                vcTLMask1 set $80
(1) 1362/   C9C72 :                     
(1) 1362/   C9C72 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1362/   C9C72 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1362/   C9C72 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1362/   C9C72 : =$80                vcTLMask1 set $80
(1) 1362/   C9C72 : =$0                 vcTL1 set vcTL1&$7F
(1) 1362/   C9C72 : =$27                vcTL2 set vcTL2&$7F
(1) 1362/   C9C72 : =$28                vcTL3 set vcTL3&$7F
(1) 1362/   C9C72 : =$17                vcTL4 set vcTL4&$7F
(1) 1362/   C9C72 :                     
(1) 1362/   C9C72 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1362/   C9C76 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1362/   C9C7A : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1362/   C9C7E : 0000 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1362/   C9C82 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1362/   C9C86 : 1728 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1363/   C9C8A :                     
(1) 1364/   C9C8A :                     ;	Voice $01
(1) 1365/   C9C8A :                     ;	$08
(1) 1366/   C9C8A :                     ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1) 1367/   C9C8A :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $0E, $84
(1) 1368/   C9C8A : (MACRO)             	smpsVcAlgorithm     $00
(1) 1368/   C9C8A : =$0                 vcAlgorithm set $00
(1) 1369/   C9C8A : (MACRO)             	smpsVcFeedback      $01
(1) 1369/   C9C8A : =$1                 vcFeedback set $01
(1) 1370/   C9C8A : (MACRO)             	smpsVcUnusedBits    $00
(1) 1370/   C9C8A : =$0                 vcUnusedBits set $00
(1) 1370/   C9C8A : =$0                 vcD1R1Unk set 0
(1) 1370/   C9C8A : =$0                 vcD1R2Unk set 0
(1) 1370/   C9C8A : =$0                 vcD1R3Unk set 0
(1) 1370/   C9C8A : =$0                 vcD1R4Unk set 0
(1) 1371/   C9C8A : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1) 1371/   C9C8A : =$0                 vcDT1 set $00
(1) 1371/   C9C8A : =$3                 vcDT2 set $03
(1) 1371/   C9C8A : =$7                 vcDT3 set $07
(1) 1371/   C9C8A : =$0                 vcDT4 set $00
(1) 1372/   C9C8A : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1) 1372/   C9C8A : =$0                 vcCF1 set $00
(1) 1372/   C9C8A : =$0                 vcCF2 set $00
(1) 1372/   C9C8A : =$0                 vcCF3 set $00
(1) 1372/   C9C8A : =$9                 vcCF4 set $09
(1) 1373/   C9C8A : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1) 1373/   C9C8A : =$1                 vcRS1 set $01
(1) 1373/   C9C8A : =$1                 vcRS2 set $01
(1) 1373/   C9C8A : =$0                 vcRS3 set $00
(1) 1373/   C9C8A : =$0                 vcRS4 set $00
(1) 1374/   C9C8A : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 1374/   C9C8A : =$1F                vcAR1 set $1F
(1) 1374/   C9C8A : =$1F                vcAR2 set $1F
(1) 1374/   C9C8A : =$1F                vcAR3 set $1F
(1) 1374/   C9C8A : =$1F                vcAR4 set $1F
(1) 1375/   C9C8A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1375/   C9C8A : =$0                 vcAM1 set $00<<5
(1) 1375/   C9C8A : =$0                 vcAM2 set $00<<5
(1) 1375/   C9C8A : =$0                 vcAM3 set $00<<5
(1) 1375/   C9C8A : =$0                 vcAM4 set $00<<5
(1) 1376/   C9C8A : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1) 1376/   C9C8A : =$A                 vcD1R1 set $0A
(1) 1376/   C9C8A : =$A                 vcD1R2 set $0A
(1) 1376/   C9C8A : =$E                 vcD1R3 set $0E
(1) 1376/   C9C8A : =$12                vcD1R4 set $12
(1) 1377/   C9C8A : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1) 1377/   C9C8A : =$3                 vcD2R1 set $03
(1) 1377/   C9C8A : =$4                 vcD2R2 set $04
(1) 1377/   C9C8A : =$4                 vcD2R3 set $04
(1) 1377/   C9C8A : =$0                 vcD2R4 set $00
(1) 1378/   C9C8A : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1) 1378/   C9C8A : =$2                 vcDL1 set $02
(1) 1378/   C9C8A : =$2                 vcDL2 set $02
(1) 1378/   C9C8A : =$2                 vcDL3 set $02
(1) 1378/   C9C8A : =$2                 vcDL4 set $02
(1) 1379/   C9C8A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1379/   C9C8A : =$F                 vcRR1 set $0F
(1) 1379/   C9C8A : =$F                 vcRR2 set $0F
(1) 1379/   C9C8A : =$F                 vcRR3 set $0F
(1) 1379/   C9C8A : =$F                 vcRR4 set $0F
(1) 1380/   C9C8A : (MACRO)             	smpsVcTotalLevel    $84, $0E, $30, $25
(1) 1380/   C9C8A : =$84                vcTL1 set $84
(1) 1380/   C9C8A : =$E                 vcTL2 set $0E
(1) 1380/   C9C8A : =$30                vcTL3 set $30
(1) 1380/   C9C8A : =$25                vcTL4 set $25
(1) 1380/   C9C8A : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1380/   C9C8B :                     ;   0     1     2     3     4     5     6     7
(1) 1380/   C9C8B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1380/   C9C8B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1380/   C9C8B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1380/   C9C8B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1380/   C9C8B : =$80                vcTLMask1 set $80
(1) 1380/   C9C8B :                     
(1) 1380/   C9C8B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1380/   C9C8B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1380/   C9C8B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1380/   C9C8B : =$80                vcTLMask1 set $80
(1) 1380/   C9C8B : =$4                 vcTL1 set vcTL1&$7F
(1) 1380/   C9C8B : =$E                 vcTL2 set vcTL2&$7F
(1) 1380/   C9C8B : =$30                vcTL3 set vcTL3&$7F
(1) 1380/   C9C8B : =$25                vcTL4 set vcTL4&$7F
(1) 1380/   C9C8B :                     
(1) 1380/   C9C8B : 0970 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1380/   C9C8F : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1380/   C9C93 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1380/   C9C97 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1380/   C9C9B : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1380/   C9C9F : 2530 0E84                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1381/   C9CA3 :                     
(1) 1382/   C9CA3 :                     ;	Voice $02
(1) 1383/   C9CA3 :                     ;	$3C
(1) 1384/   C9CA3 :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1) 1385/   C9CA3 :                     ;	$04, $00, $04, $00, 	$10, $0B, $10, $0D, 	$19, $80, $0B, $80
(1) 1386/   C9CA3 : (MACRO)             	smpsVcAlgorithm     $04
(1) 1386/   C9CA3 : =$4                 vcAlgorithm set $04
(1) 1387/   C9CA3 : (MACRO)             	smpsVcFeedback      $07
(1) 1387/   C9CA3 : =$7                 vcFeedback set $07
(1) 1388/   C9CA3 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1388/   C9CA3 : =$0                 vcUnusedBits set $00
(1) 1388/   C9CA3 : =$0                 vcD1R1Unk set 0
(1) 1388/   C9CA3 : =$0                 vcD1R2Unk set 0
(1) 1388/   C9CA3 : =$0                 vcD1R3Unk set 0
(1) 1388/   C9CA3 : =$0                 vcD1R4Unk set 0
(1) 1389/   C9CA3 : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1) 1389/   C9CA3 : =$3                 vcDT1 set $03
(1) 1389/   C9CA3 : =$5                 vcDT2 set $05
(1) 1389/   C9CA3 : =$5                 vcDT3 set $05
(1) 1389/   C9CA3 : =$3                 vcDT4 set $03
(1) 1390/   C9CA3 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1) 1390/   C9CA3 : =$0                 vcCF1 set $00
(1) 1390/   C9CA3 : =$0                 vcCF2 set $00
(1) 1390/   C9CA3 : =$2                 vcCF3 set $02
(1) 1390/   C9CA3 : =$1                 vcCF4 set $01
(1) 1391/   C9CA3 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1) 1391/   C9CA3 : =$1                 vcRS1 set $01
(1) 1391/   C9CA3 : =$1                 vcRS2 set $01
(1) 1391/   C9CA3 : =$1                 vcRS3 set $01
(1) 1391/   C9CA3 : =$1                 vcRS4 set $01
(1) 1392/   C9CA3 : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1) 1392/   C9CA3 : =$13                vcAR1 set $13
(1) 1392/   C9CA3 : =$12                vcAR2 set $12
(1) 1392/   C9CA3 : =$13                vcAR3 set $13
(1) 1392/   C9CA3 : =$12                vcAR4 set $12
(1) 1393/   C9CA3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1393/   C9CA3 : =$0                 vcAM1 set $00<<5
(1) 1393/   C9CA3 : =$0                 vcAM2 set $00<<5
(1) 1393/   C9CA3 : =$0                 vcAM3 set $00<<5
(1) 1393/   C9CA3 : =$0                 vcAM4 set $00<<5
(1) 1394/   C9CA3 : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1) 1394/   C9CA3 : =$0                 vcD1R1 set $00
(1) 1394/   C9CA3 : =$8                 vcD1R2 set $08
(1) 1394/   C9CA3 : =$0                 vcD1R3 set $00
(1) 1394/   C9CA3 : =$8                 vcD1R4 set $08
(1) 1395/   C9CA3 : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1) 1395/   C9CA3 : =$0                 vcD2R1 set $00
(1) 1395/   C9CA3 : =$4                 vcD2R2 set $04
(1) 1395/   C9CA3 : =$0                 vcD2R3 set $00
(1) 1395/   C9CA3 : =$4                 vcD2R4 set $04
(1) 1396/   C9CA3 : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1) 1396/   C9CA3 : =$0                 vcDL1 set $00
(1) 1396/   C9CA3 : =$1                 vcDL2 set $01
(1) 1396/   C9CA3 : =$0                 vcDL3 set $00
(1) 1396/   C9CA3 : =$1                 vcDL4 set $01
(1) 1397/   C9CA3 : (MACRO)             	smpsVcReleaseRate   $0D, $00, $0B, $00
(1) 1397/   C9CA3 : =$D                 vcRR1 set $0D
(1) 1397/   C9CA3 : =$0                 vcRR2 set $00
(1) 1397/   C9CA3 : =$B                 vcRR3 set $0B
(1) 1397/   C9CA3 : =$0                 vcRR4 set $00
(1) 1398/   C9CA3 : (MACRO)             	smpsVcTotalLevel    $80, $0B, $80, $19
(1) 1398/   C9CA3 : =$80                vcTL1 set $80
(1) 1398/   C9CA3 : =$B                 vcTL2 set $0B
(1) 1398/   C9CA3 : =$80                vcTL3 set $80
(1) 1398/   C9CA3 : =$19                vcTL4 set $19
(1) 1398/   C9CA3 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1398/   C9CA4 :                     ;   0     1     2     3     4     5     6     7
(1) 1398/   C9CA4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1398/   C9CA4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1398/   C9CA4 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1398/   C9CA4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1398/   C9CA4 : =$80                vcTLMask1 set $80
(1) 1398/   C9CA4 :                     
(1) 1398/   C9CA4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1398/   C9CA4 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1398/   C9CA4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1398/   C9CA4 : =$80                vcTLMask1 set $80
(1) 1398/   C9CA4 : =$0                 vcTL1 set vcTL1&$7F
(1) 1398/   C9CA4 : =$B                 vcTL2 set vcTL2&$7F
(1) 1398/   C9CA4 : =$0                 vcTL3 set vcTL3&$7F
(1) 1398/   C9CA4 : =$19                vcTL4 set vcTL4&$7F
(1) 1398/   C9CA4 :                     
(1) 1398/   C9CA4 : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1398/   C9CA8 : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1398/   C9CAC : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1398/   C9CB0 : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1398/   C9CB4 : 100B 100D                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1398/   C9CB8 : 1980 0B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1399/   C9CBC :                     
(1) 1400/   C9CBC :                     ;	Voice $03
(1) 1401/   C9CBC :                     ;	$08
(1) 1402/   C9CBC :                     ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1) 1403/   C9CBC :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
(1) 1404/   C9CBC : (MACRO)             	smpsVcAlgorithm     $00
(1) 1404/   C9CBC : =$0                 vcAlgorithm set $00
(1) 1405/   C9CBC : (MACRO)             	smpsVcFeedback      $01
(1) 1405/   C9CBC : =$1                 vcFeedback set $01
(1) 1406/   C9CBC : (MACRO)             	smpsVcUnusedBits    $00
(1) 1406/   C9CBC : =$0                 vcUnusedBits set $00
(1) 1406/   C9CBC : =$0                 vcD1R1Unk set 0
(1) 1406/   C9CBC : =$0                 vcD1R2Unk set 0
(1) 1406/   C9CBC : =$0                 vcD1R3Unk set 0
(1) 1406/   C9CBC : =$0                 vcD1R4Unk set 0
(1) 1407/   C9CBC : (MACRO)             	smpsVcDetune        $00, $03, $07, $00
(1) 1407/   C9CBC : =$0                 vcDT1 set $00
(1) 1407/   C9CBC : =$3                 vcDT2 set $03
(1) 1407/   C9CBC : =$7                 vcDT3 set $07
(1) 1407/   C9CBC : =$0                 vcDT4 set $00
(1) 1408/   C9CBC : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $0A
(1) 1408/   C9CBC : =$0                 vcCF1 set $00
(1) 1408/   C9CBC : =$0                 vcCF2 set $00
(1) 1408/   C9CBC : =$0                 vcCF3 set $00
(1) 1408/   C9CBC : =$A                 vcCF4 set $0A
(1) 1409/   C9CBC : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1) 1409/   C9CBC : =$1                 vcRS1 set $01
(1) 1409/   C9CBC : =$1                 vcRS2 set $01
(1) 1409/   C9CBC : =$0                 vcRS3 set $00
(1) 1409/   C9CBC : =$0                 vcRS4 set $00
(1) 1410/   C9CBC : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 1410/   C9CBC : =$1F                vcAR1 set $1F
(1) 1410/   C9CBC : =$1F                vcAR2 set $1F
(1) 1410/   C9CBC : =$1F                vcAR3 set $1F
(1) 1410/   C9CBC : =$1F                vcAR4 set $1F
(1) 1411/   C9CBC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1411/   C9CBC : =$0                 vcAM1 set $00<<5
(1) 1411/   C9CBC : =$0                 vcAM2 set $00<<5
(1) 1411/   C9CBC : =$0                 vcAM3 set $00<<5
(1) 1411/   C9CBC : =$0                 vcAM4 set $00<<5
(1) 1412/   C9CBC : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1) 1412/   C9CBC : =$A                 vcD1R1 set $0A
(1) 1412/   C9CBC : =$A                 vcD1R2 set $0A
(1) 1412/   C9CBC : =$E                 vcD1R3 set $0E
(1) 1412/   C9CBC : =$12                vcD1R4 set $12
(1) 1413/   C9CBC : (MACRO)             	smpsVcDecayRate2    $03, $04, $04, $00
(1) 1413/   C9CBC : =$3                 vcD2R1 set $03
(1) 1413/   C9CBC : =$4                 vcD2R2 set $04
(1) 1413/   C9CBC : =$4                 vcD2R3 set $04
(1) 1413/   C9CBC : =$0                 vcD2R4 set $00
(1) 1414/   C9CBC : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $02
(1) 1414/   C9CBC : =$2                 vcDL1 set $02
(1) 1414/   C9CBC : =$2                 vcDL2 set $02
(1) 1414/   C9CBC : =$2                 vcDL3 set $02
(1) 1414/   C9CBC : =$2                 vcDL4 set $02
(1) 1415/   C9CBC : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1415/   C9CBC : =$F                 vcRR1 set $0F
(1) 1415/   C9CBC : =$F                 vcRR2 set $0F
(1) 1415/   C9CBC : =$F                 vcRR3 set $0F
(1) 1415/   C9CBC : =$F                 vcRR4 set $0F
(1) 1416/   C9CBC : (MACRO)             	smpsVcTotalLevel    $80, $13, $2D, $24
(1) 1416/   C9CBC : =$80                vcTL1 set $80
(1) 1416/   C9CBC : =$13                vcTL2 set $13
(1) 1416/   C9CBC : =$2D                vcTL3 set $2D
(1) 1416/   C9CBC : =$24                vcTL4 set $24
(1) 1416/   C9CBC : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1416/   C9CBD :                     ;   0     1     2     3     4     5     6     7
(1) 1416/   C9CBD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1416/   C9CBD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1416/   C9CBD : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1416/   C9CBD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1416/   C9CBD : =$80                vcTLMask1 set $80
(1) 1416/   C9CBD :                     
(1) 1416/   C9CBD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1416/   C9CBD : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1416/   C9CBD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1416/   C9CBD : =$80                vcTLMask1 set $80
(1) 1416/   C9CBD : =$0                 vcTL1 set vcTL1&$7F
(1) 1416/   C9CBD : =$13                vcTL2 set vcTL2&$7F
(1) 1416/   C9CBD : =$2D                vcTL3 set vcTL3&$7F
(1) 1416/   C9CBD : =$24                vcTL4 set vcTL4&$7F
(1) 1416/   C9CBD :                     
(1) 1416/   C9CBD : 0A70 3000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1416/   C9CC1 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1416/   C9CC5 : 120E 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1416/   C9CC9 : 0004 0403                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1416/   C9CCD : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1416/   C9CD1 : 242D 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1417/   C9CD5 :                     
(1) 1418/   C9CD5 :                     ;	Voice $04
(1) 1419/   C9CD5 :                     ;	$3D
(1) 1420/   C9CD5 :                     ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
(1) 1421/   C9CD5 :                     ;	$00, $00, $00, $00, 	$2B, $2B, $2B, $1B, 	$19, $80, $80, $80
(1) 1422/   C9CD5 : (MACRO)             	smpsVcAlgorithm     $05
(1) 1422/   C9CD5 : =$5                 vcAlgorithm set $05
(1) 1423/   C9CD5 : (MACRO)             	smpsVcFeedback      $07
(1) 1423/   C9CD5 : =$7                 vcFeedback set $07
(1) 1424/   C9CD5 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1424/   C9CD5 : =$0                 vcUnusedBits set $00
(1) 1424/   C9CD5 : =$0                 vcD1R1Unk set 0
(1) 1424/   C9CD5 : =$0                 vcD1R2Unk set 0
(1) 1424/   C9CD5 : =$0                 vcD1R3Unk set 0
(1) 1424/   C9CD5 : =$0                 vcD1R4Unk set 0
(1) 1425/   C9CD5 : (MACRO)             	smpsVcDetune        $00, $05, $02, $00
(1) 1425/   C9CD5 : =$0                 vcDT1 set $00
(1) 1425/   C9CD5 : =$5                 vcDT2 set $05
(1) 1425/   C9CD5 : =$2                 vcDT3 set $02
(1) 1425/   C9CD5 : =$0                 vcDT4 set $00
(1) 1426/   C9CD5 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1) 1426/   C9CD5 : =$1                 vcCF1 set $01
(1) 1426/   C9CD5 : =$1                 vcCF2 set $01
(1) 1426/   C9CD5 : =$1                 vcCF3 set $01
(1) 1426/   C9CD5 : =$1                 vcCF4 set $01
(1) 1427/   C9CD5 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1427/   C9CD5 : =$0                 vcRS1 set $00
(1) 1427/   C9CD5 : =$0                 vcRS2 set $00
(1) 1427/   C9CD5 : =$0                 vcRS3 set $00
(1) 1427/   C9CD5 : =$0                 vcRS4 set $00
(1) 1428/   C9CD5 : (MACRO)             	smpsVcAttackRate    $0F, $14, $14, $12
(1) 1428/   C9CD5 : =$F                 vcAR1 set $0F
(1) 1428/   C9CD5 : =$14                vcAR2 set $14
(1) 1428/   C9CD5 : =$14                vcAR3 set $14
(1) 1428/   C9CD5 : =$12                vcAR4 set $12
(1) 1429/   C9CD5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1429/   C9CD5 : =$0                 vcAM1 set $00<<5
(1) 1429/   C9CD5 : =$0                 vcAM2 set $00<<5
(1) 1429/   C9CD5 : =$0                 vcAM3 set $00<<5
(1) 1429/   C9CD5 : =$0                 vcAM4 set $00<<5
(1) 1430/   C9CD5 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1) 1430/   C9CD5 : =$5                 vcD1R1 set $05
(1) 1430/   C9CD5 : =$5                 vcD1R2 set $05
(1) 1430/   C9CD5 : =$5                 vcD1R3 set $05
(1) 1430/   C9CD5 : =$A                 vcD1R4 set $0A
(1) 1431/   C9CD5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 1431/   C9CD5 : =$0                 vcD2R1 set $00
(1) 1431/   C9CD5 : =$0                 vcD2R2 set $00
(1) 1431/   C9CD5 : =$0                 vcD2R3 set $00
(1) 1431/   C9CD5 : =$0                 vcD2R4 set $00
(1) 1432/   C9CD5 : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1) 1432/   C9CD5 : =$1                 vcDL1 set $01
(1) 1432/   C9CD5 : =$2                 vcDL2 set $02
(1) 1432/   C9CD5 : =$2                 vcDL3 set $02
(1) 1432/   C9CD5 : =$2                 vcDL4 set $02
(1) 1433/   C9CD5 : (MACRO)             	smpsVcReleaseRate   $0B, $0B, $0B, $0B
(1) 1433/   C9CD5 : =$B                 vcRR1 set $0B
(1) 1433/   C9CD5 : =$B                 vcRR2 set $0B
(1) 1433/   C9CD5 : =$B                 vcRR3 set $0B
(1) 1433/   C9CD5 : =$B                 vcRR4 set $0B
(1) 1434/   C9CD5 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $19
(1) 1434/   C9CD5 : =$80                vcTL1 set $80
(1) 1434/   C9CD5 : =$80                vcTL2 set $80
(1) 1434/   C9CD5 : =$80                vcTL3 set $80
(1) 1434/   C9CD5 : =$19                vcTL4 set $19
(1) 1434/   C9CD5 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1434/   C9CD6 :                     ;   0     1     2     3     4     5     6     7
(1) 1434/   C9CD6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1434/   C9CD6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1434/   C9CD6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1434/   C9CD6 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1434/   C9CD6 : =$80                vcTLMask1 set $80
(1) 1434/   C9CD6 :                     
(1) 1434/   C9CD6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1434/   C9CD6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1434/   C9CD6 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1434/   C9CD6 : =$80                vcTLMask1 set $80
(1) 1434/   C9CD6 : =$0                 vcTL1 set vcTL1&$7F
(1) 1434/   C9CD6 : =$0                 vcTL2 set vcTL2&$7F
(1) 1434/   C9CD6 : =$0                 vcTL3 set vcTL3&$7F
(1) 1434/   C9CD6 : =$19                vcTL4 set vcTL4&$7F
(1) 1434/   C9CD6 :                     
(1) 1434/   C9CD6 : 0121 5101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1434/   C9CDA : 1214 140F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1434/   C9CDE : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1434/   C9CE2 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1434/   C9CE6 : 2B2B 2B1B                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1434/   C9CEA : 1980 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1435/   C9CEE :                     
(1) 1436/   C9CEE :                     ;	Voice $05
(1) 1437/   C9CEE :                     ;	$04
(1) 1438/   C9CEE :                     ;	$57, $02, $70, $50, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1) 1439/   C9CEE :                     ;	$06, $0A, $00, $0A, 	$00, $0F, $00, $0F, 	$1A, $80, $10, $80
(1) 1440/   C9CEE : (MACRO)             	smpsVcAlgorithm     $04
(1) 1440/   C9CEE : =$4                 vcAlgorithm set $04
(1) 1441/   C9CEE : (MACRO)             	smpsVcFeedback      $00
(1) 1441/   C9CEE : =$0                 vcFeedback set $00
(1) 1442/   C9CEE : (MACRO)             	smpsVcUnusedBits    $00
(1) 1442/   C9CEE : =$0                 vcUnusedBits set $00
(1) 1442/   C9CEE : =$0                 vcD1R1Unk set 0
(1) 1442/   C9CEE : =$0                 vcD1R2Unk set 0
(1) 1442/   C9CEE : =$0                 vcD1R3Unk set 0
(1) 1442/   C9CEE : =$0                 vcD1R4Unk set 0
(1) 1443/   C9CEE : (MACRO)             	smpsVcDetune        $05, $07, $00, $05
(1) 1443/   C9CEE : =$5                 vcDT1 set $05
(1) 1443/   C9CEE : =$7                 vcDT2 set $07
(1) 1443/   C9CEE : =$0                 vcDT3 set $00
(1) 1443/   C9CEE : =$5                 vcDT4 set $05
(1) 1444/   C9CEE : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $07
(1) 1444/   C9CEE : =$0                 vcCF1 set $00
(1) 1444/   C9CEE : =$0                 vcCF2 set $00
(1) 1444/   C9CEE : =$2                 vcCF3 set $02
(1) 1444/   C9CEE : =$7                 vcCF4 set $07
(1) 1445/   C9CEE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1445/   C9CEE : =$0                 vcRS1 set $00
(1) 1445/   C9CEE : =$0                 vcRS2 set $00
(1) 1445/   C9CEE : =$0                 vcRS3 set $00
(1) 1445/   C9CEE : =$0                 vcRS4 set $00
(1) 1446/   C9CEE : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 1446/   C9CEE : =$1F                vcAR1 set $1F
(1) 1446/   C9CEE : =$1F                vcAR2 set $1F
(1) 1446/   C9CEE : =$1F                vcAR3 set $1F
(1) 1446/   C9CEE : =$1F                vcAR4 set $1F
(1) 1447/   C9CEE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1447/   C9CEE : =$0                 vcAM1 set $00<<5
(1) 1447/   C9CEE : =$0                 vcAM2 set $00<<5
(1) 1447/   C9CEE : =$0                 vcAM3 set $00<<5
(1) 1447/   C9CEE : =$0                 vcAM4 set $00<<5
(1) 1448/   C9CEE : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1) 1448/   C9CEE : =$0                 vcD1R1 set $00
(1) 1448/   C9CEE : =$0                 vcD1R2 set $00
(1) 1448/   C9CEE : =$0                 vcD1R3 set $00
(1) 1448/   C9CEE : =$0                 vcD1R4 set $00
(1) 1449/   C9CEE : (MACRO)             	smpsVcDecayRate2    $0A, $00, $0A, $06
(1) 1449/   C9CEE : =$A                 vcD2R1 set $0A
(1) 1449/   C9CEE : =$0                 vcD2R2 set $00
(1) 1449/   C9CEE : =$A                 vcD2R3 set $0A
(1) 1449/   C9CEE : =$6                 vcD2R4 set $06
(1) 1450/   C9CEE : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1) 1450/   C9CEE : =$0                 vcDL1 set $00
(1) 1450/   C9CEE : =$0                 vcDL2 set $00
(1) 1450/   C9CEE : =$0                 vcDL3 set $00
(1) 1450/   C9CEE : =$0                 vcDL4 set $00
(1) 1451/   C9CEE : (MACRO)             	smpsVcReleaseRate   $0F, $00, $0F, $00
(1) 1451/   C9CEE : =$F                 vcRR1 set $0F
(1) 1451/   C9CEE : =$0                 vcRR2 set $00
(1) 1451/   C9CEE : =$F                 vcRR3 set $0F
(1) 1451/   C9CEE : =$0                 vcRR4 set $00
(1) 1452/   C9CEE : (MACRO)             	smpsVcTotalLevel    $80, $10, $80, $1A
(1) 1452/   C9CEE : =$80                vcTL1 set $80
(1) 1452/   C9CEE : =$10                vcTL2 set $10
(1) 1452/   C9CEE : =$80                vcTL3 set $80
(1) 1452/   C9CEE : =$1A                vcTL4 set $1A
(1) 1452/   C9CEE : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1452/   C9CEF :                     ;   0     1     2     3     4     5     6     7
(1) 1452/   C9CEF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1452/   C9CEF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1452/   C9CEF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1452/   C9CEF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1452/   C9CEF : =$80                vcTLMask1 set $80
(1) 1452/   C9CEF :                     
(1) 1452/   C9CEF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1452/   C9CEF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1452/   C9CEF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1452/   C9CEF : =$80                vcTLMask1 set $80
(1) 1452/   C9CEF : =$0                 vcTL1 set vcTL1&$7F
(1) 1452/   C9CEF : =$10                vcTL2 set vcTL2&$7F
(1) 1452/   C9CEF : =$0                 vcTL3 set vcTL3&$7F
(1) 1452/   C9CEF : =$1A                vcTL4 set vcTL4&$7F
(1) 1452/   C9CEF :                     
(1) 1452/   C9CEF : 5702 7050                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1452/   C9CF3 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1452/   C9CF7 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1452/   C9CFB : 060A 000A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1452/   C9CFF : 000F 000F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1452/   C9D03 : 1A80 1080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1453/   C9D07 :                     
(1) 1454/   C9D07 :                     ;	Voice $06
(1) 1455/   C9D07 :                     ;	$35
(1) 1456/   C9D07 :                     ;	$01, $01, $13, $00, 	$1F, $1D, $18, $19, 	$00, $09, $06, $0D
(1) 1457/   C9D07 :                     ;	$00, $00, $02, $03, 	$00, $06, $15, $16, 	$1E, $80, $83, $80
(1) 1458/   C9D07 : (MACRO)             	smpsVcAlgorithm     $05
(1) 1458/   C9D07 : =$5                 vcAlgorithm set $05
(1) 1459/   C9D07 : (MACRO)             	smpsVcFeedback      $06
(1) 1459/   C9D07 : =$6                 vcFeedback set $06
(1) 1460/   C9D07 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1460/   C9D07 : =$0                 vcUnusedBits set $00
(1) 1460/   C9D07 : =$0                 vcD1R1Unk set 0
(1) 1460/   C9D07 : =$0                 vcD1R2Unk set 0
(1) 1460/   C9D07 : =$0                 vcD1R3Unk set 0
(1) 1460/   C9D07 : =$0                 vcD1R4Unk set 0
(1) 1461/   C9D07 : (MACRO)             	smpsVcDetune        $00, $01, $00, $00
(1) 1461/   C9D07 : =$0                 vcDT1 set $00
(1) 1461/   C9D07 : =$1                 vcDT2 set $01
(1) 1461/   C9D07 : =$0                 vcDT3 set $00
(1) 1461/   C9D07 : =$0                 vcDT4 set $00
(1) 1462/   C9D07 : (MACRO)             	smpsVcCoarseFreq    $00, $03, $01, $01
(1) 1462/   C9D07 : =$0                 vcCF1 set $00
(1) 1462/   C9D07 : =$3                 vcCF2 set $03
(1) 1462/   C9D07 : =$1                 vcCF3 set $01
(1) 1462/   C9D07 : =$1                 vcCF4 set $01
(1) 1463/   C9D07 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1463/   C9D07 : =$0                 vcRS1 set $00
(1) 1463/   C9D07 : =$0                 vcRS2 set $00
(1) 1463/   C9D07 : =$0                 vcRS3 set $00
(1) 1463/   C9D07 : =$0                 vcRS4 set $00
(1) 1464/   C9D07 : (MACRO)             	smpsVcAttackRate    $19, $18, $1D, $1F
(1) 1464/   C9D07 : =$19                vcAR1 set $19
(1) 1464/   C9D07 : =$18                vcAR2 set $18
(1) 1464/   C9D07 : =$1D                vcAR3 set $1D
(1) 1464/   C9D07 : =$1F                vcAR4 set $1F
(1) 1465/   C9D07 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1465/   C9D07 : =$0                 vcAM1 set $00<<5
(1) 1465/   C9D07 : =$0                 vcAM2 set $00<<5
(1) 1465/   C9D07 : =$0                 vcAM3 set $00<<5
(1) 1465/   C9D07 : =$0                 vcAM4 set $00<<5
(1) 1466/   C9D07 : (MACRO)             	smpsVcDecayRate1    $0D, $06, $09, $00
(1) 1466/   C9D07 : =$D                 vcD1R1 set $0D
(1) 1466/   C9D07 : =$6                 vcD1R2 set $06
(1) 1466/   C9D07 : =$9                 vcD1R3 set $09
(1) 1466/   C9D07 : =$0                 vcD1R4 set $00
(1) 1467/   C9D07 : (MACRO)             	smpsVcDecayRate2    $03, $02, $00, $00
(1) 1467/   C9D07 : =$3                 vcD2R1 set $03
(1) 1467/   C9D07 : =$2                 vcD2R2 set $02
(1) 1467/   C9D07 : =$0                 vcD2R3 set $00
(1) 1467/   C9D07 : =$0                 vcD2R4 set $00
(1) 1468/   C9D07 : (MACRO)             	smpsVcDecayLevel    $01, $01, $00, $00
(1) 1468/   C9D07 : =$1                 vcDL1 set $01
(1) 1468/   C9D07 : =$1                 vcDL2 set $01
(1) 1468/   C9D07 : =$0                 vcDL3 set $00
(1) 1468/   C9D07 : =$0                 vcDL4 set $00
(1) 1469/   C9D07 : (MACRO)             	smpsVcReleaseRate   $06, $05, $06, $00
(1) 1469/   C9D07 : =$6                 vcRR1 set $06
(1) 1469/   C9D07 : =$5                 vcRR2 set $05
(1) 1469/   C9D07 : =$6                 vcRR3 set $06
(1) 1469/   C9D07 : =$0                 vcRR4 set $00
(1) 1470/   C9D07 : (MACRO)             	smpsVcTotalLevel    $80, $83, $80, $1E
(1) 1470/   C9D07 : =$80                vcTL1 set $80
(1) 1470/   C9D07 : =$83                vcTL2 set $83
(1) 1470/   C9D07 : =$80                vcTL3 set $80
(1) 1470/   C9D07 : =$1E                vcTL4 set $1E
(1) 1470/   C9D07 : 35                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1470/   C9D08 :                     ;   0     1     2     3     4     5     6     7
(1) 1470/   C9D08 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1470/   C9D08 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1470/   C9D08 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1470/   C9D08 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1470/   C9D08 : =$80                vcTLMask1 set $80
(1) 1470/   C9D08 :                     
(1) 1470/   C9D08 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1470/   C9D08 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1470/   C9D08 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1470/   C9D08 : =$80                vcTLMask1 set $80
(1) 1470/   C9D08 : =$0                 vcTL1 set vcTL1&$7F
(1) 1470/   C9D08 : =$3                 vcTL2 set vcTL2&$7F
(1) 1470/   C9D08 : =$0                 vcTL3 set vcTL3&$7F
(1) 1470/   C9D08 : =$1E                vcTL4 set vcTL4&$7F
(1) 1470/   C9D08 :                     
(1) 1470/   C9D08 : 0101 1300                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1470/   C9D0C : 1F1D 1819                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1470/   C9D10 : 0009 060D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1470/   C9D14 : 0000 0203                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1470/   C9D18 : 0006 1516                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1470/   C9D1C : 1E80 8380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1471/   C9D20 :                     
(1) 1472/   C9D20 :                     ;	Voice $07
(1) 1473/   C9D20 :                     ;	$3C
(1) 1474/   C9D20 :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1) 1475/   C9D20 :                     ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $88, $16, $88
(1) 1476/   C9D20 : (MACRO)             	smpsVcAlgorithm     $04
(1) 1476/   C9D20 : =$4                 vcAlgorithm set $04
(1) 1477/   C9D20 : (MACRO)             	smpsVcFeedback      $07
(1) 1477/   C9D20 : =$7                 vcFeedback set $07
(1) 1478/   C9D20 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1478/   C9D20 : =$0                 vcUnusedBits set $00
(1) 1478/   C9D20 : =$0                 vcD1R1Unk set 0
(1) 1478/   C9D20 : =$0                 vcD1R2Unk set 0
(1) 1478/   C9D20 : =$0                 vcD1R3Unk set 0
(1) 1478/   C9D20 : =$0                 vcD1R4Unk set 0
(1) 1479/   C9D20 : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1) 1479/   C9D20 : =$3                 vcDT1 set $03
(1) 1479/   C9D20 : =$5                 vcDT2 set $05
(1) 1479/   C9D20 : =$5                 vcDT3 set $05
(1) 1479/   C9D20 : =$3                 vcDT4 set $03
(1) 1480/   C9D20 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1) 1480/   C9D20 : =$0                 vcCF1 set $00
(1) 1480/   C9D20 : =$0                 vcCF2 set $00
(1) 1480/   C9D20 : =$2                 vcCF3 set $02
(1) 1480/   C9D20 : =$1                 vcCF4 set $01
(1) 1481/   C9D20 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1) 1481/   C9D20 : =$1                 vcRS1 set $01
(1) 1481/   C9D20 : =$1                 vcRS2 set $01
(1) 1481/   C9D20 : =$1                 vcRS3 set $01
(1) 1481/   C9D20 : =$1                 vcRS4 set $01
(1) 1482/   C9D20 : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1) 1482/   C9D20 : =$13                vcAR1 set $13
(1) 1482/   C9D20 : =$12                vcAR2 set $12
(1) 1482/   C9D20 : =$13                vcAR3 set $13
(1) 1482/   C9D20 : =$12                vcAR4 set $12
(1) 1483/   C9D20 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1483/   C9D20 : =$0                 vcAM1 set $00<<5
(1) 1483/   C9D20 : =$0                 vcAM2 set $00<<5
(1) 1483/   C9D20 : =$0                 vcAM3 set $00<<5
(1) 1483/   C9D20 : =$0                 vcAM4 set $00<<5
(1) 1484/   C9D20 : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1) 1484/   C9D20 : =$0                 vcD1R1 set $00
(1) 1484/   C9D20 : =$8                 vcD1R2 set $08
(1) 1484/   C9D20 : =$0                 vcD1R3 set $00
(1) 1484/   C9D20 : =$8                 vcD1R4 set $08
(1) 1485/   C9D20 : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1) 1485/   C9D20 : =$0                 vcD2R1 set $00
(1) 1485/   C9D20 : =$4                 vcD2R2 set $04
(1) 1485/   C9D20 : =$0                 vcD2R3 set $00
(1) 1485/   C9D20 : =$4                 vcD2R4 set $04
(1) 1486/   C9D20 : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1) 1486/   C9D20 : =$0                 vcDL1 set $00
(1) 1486/   C9D20 : =$1                 vcDL2 set $01
(1) 1486/   C9D20 : =$0                 vcDL3 set $00
(1) 1486/   C9D20 : =$1                 vcDL4 set $01
(1) 1487/   C9D20 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1487/   C9D20 : =$F                 vcRR1 set $0F
(1) 1487/   C9D20 : =$F                 vcRR2 set $0F
(1) 1487/   C9D20 : =$F                 vcRR3 set $0F
(1) 1487/   C9D20 : =$F                 vcRR4 set $0F
(1) 1488/   C9D20 : (MACRO)             	smpsVcTotalLevel    $88, $16, $88, $1A
(1) 1488/   C9D20 : =$88                vcTL1 set $88
(1) 1488/   C9D20 : =$16                vcTL2 set $16
(1) 1488/   C9D20 : =$88                vcTL3 set $88
(1) 1488/   C9D20 : =$1A                vcTL4 set $1A
(1) 1488/   C9D20 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1488/   C9D21 :                     ;   0     1     2     3     4     5     6     7
(1) 1488/   C9D21 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1488/   C9D21 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1488/   C9D21 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1488/   C9D21 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1488/   C9D21 : =$80                vcTLMask1 set $80
(1) 1488/   C9D21 :                     
(1) 1488/   C9D21 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1488/   C9D21 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1488/   C9D21 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1488/   C9D21 : =$80                vcTLMask1 set $80
(1) 1488/   C9D21 : =$8                 vcTL1 set vcTL1&$7F
(1) 1488/   C9D21 : =$16                vcTL2 set vcTL2&$7F
(1) 1488/   C9D21 : =$8                 vcTL3 set vcTL3&$7F
(1) 1488/   C9D21 : =$1A                vcTL4 set vcTL4&$7F
(1) 1488/   C9D21 :                     
(1) 1488/   C9D21 : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1488/   C9D25 : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1488/   C9D29 : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1488/   C9D2D : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1488/   C9D31 : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1488/   C9D35 : 1A88 1688                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1489/   C9D39 :                     
(1) 1490/   C9D39 :                     ;	Voice $08
(1) 1491/   C9D39 :                     ;	$20
(1) 1492/   C9D39 :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(1) 1493/   C9D39 :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$14, $37, $0F, $80
(1) 1494/   C9D39 : (MACRO)             	smpsVcAlgorithm     $00
(1) 1494/   C9D39 : =$0                 vcAlgorithm set $00
(1) 1495/   C9D39 : (MACRO)             	smpsVcFeedback      $04
(1) 1495/   C9D39 : =$4                 vcFeedback set $04
(1) 1496/   C9D39 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1496/   C9D39 : =$0                 vcUnusedBits set $00
(1) 1496/   C9D39 : =$0                 vcD1R1Unk set 0
(1) 1496/   C9D39 : =$0                 vcD1R2Unk set 0
(1) 1496/   C9D39 : =$0                 vcD1R3Unk set 0
(1) 1496/   C9D39 : =$0                 vcD1R4Unk set 0
(1) 1497/   C9D39 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1) 1497/   C9D39 : =$3                 vcDT1 set $03
(1) 1497/   C9D39 : =$3                 vcDT2 set $03
(1) 1497/   C9D39 : =$3                 vcDT3 set $03
(1) 1497/   C9D39 : =$3                 vcDT4 set $03
(1) 1498/   C9D39 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(1) 1498/   C9D39 : =$1                 vcCF1 set $01
(1) 1498/   C9D39 : =$0                 vcCF2 set $00
(1) 1498/   C9D39 : =$5                 vcCF3 set $05
(1) 1498/   C9D39 : =$6                 vcCF4 set $06
(1) 1499/   C9D39 : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1) 1499/   C9D39 : =$2                 vcRS1 set $02
(1) 1499/   C9D39 : =$2                 vcRS2 set $02
(1) 1499/   C9D39 : =$3                 vcRS3 set $03
(1) 1499/   C9D39 : =$3                 vcRS4 set $03
(1) 1500/   C9D39 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 1500/   C9D39 : =$1F                vcAR1 set $1F
(1) 1500/   C9D39 : =$1F                vcAR2 set $1F
(1) 1500/   C9D39 : =$1F                vcAR3 set $1F
(1) 1500/   C9D39 : =$1F                vcAR4 set $1F
(1) 1501/   C9D39 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1501/   C9D39 : =$0                 vcAM1 set $00<<5
(1) 1501/   C9D39 : =$0                 vcAM2 set $00<<5
(1) 1501/   C9D39 : =$0                 vcAM3 set $00<<5
(1) 1501/   C9D39 : =$0                 vcAM4 set $00<<5
(1) 1502/   C9D39 : (MACRO)             	smpsVcDecayRate1    $06, $09, $06, $07
(1) 1502/   C9D39 : =$6                 vcD1R1 set $06
(1) 1502/   C9D39 : =$9                 vcD1R2 set $09
(1) 1502/   C9D39 : =$6                 vcD1R3 set $06
(1) 1502/   C9D39 : =$7                 vcD1R4 set $07
(1) 1503/   C9D39 : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1) 1503/   C9D39 : =$8                 vcD2R1 set $08
(1) 1503/   C9D39 : =$6                 vcD2R2 set $06
(1) 1503/   C9D39 : =$6                 vcD2R3 set $06
(1) 1503/   C9D39 : =$7                 vcD2R4 set $07
(1) 1504/   C9D39 : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1) 1504/   C9D39 : =$F                 vcDL1 set $0F
(1) 1504/   C9D39 : =$1                 vcDL2 set $01
(1) 1504/   C9D39 : =$1                 vcDL3 set $01
(1) 1504/   C9D39 : =$2                 vcDL4 set $02
(1) 1505/   C9D39 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1505/   C9D39 : =$F                 vcRR1 set $0F
(1) 1505/   C9D39 : =$F                 vcRR2 set $0F
(1) 1505/   C9D39 : =$F                 vcRR3 set $0F
(1) 1505/   C9D39 : =$F                 vcRR4 set $0F
(1) 1506/   C9D39 : (MACRO)             	smpsVcTotalLevel    $80, $0F, $37, $14
(1) 1506/   C9D39 : =$80                vcTL1 set $80
(1) 1506/   C9D39 : =$F                 vcTL2 set $0F
(1) 1506/   C9D39 : =$37                vcTL3 set $37
(1) 1506/   C9D39 : =$14                vcTL4 set $14
(1) 1506/   C9D39 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1506/   C9D3A :                     ;   0     1     2     3     4     5     6     7
(1) 1506/   C9D3A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1506/   C9D3A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1506/   C9D3A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1506/   C9D3A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1506/   C9D3A : =$80                vcTLMask1 set $80
(1) 1506/   C9D3A :                     
(1) 1506/   C9D3A : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1506/   C9D3A : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1506/   C9D3A : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1506/   C9D3A : =$80                vcTLMask1 set $80
(1) 1506/   C9D3A : =$0                 vcTL1 set vcTL1&$7F
(1) 1506/   C9D3A : =$F                 vcTL2 set vcTL2&$7F
(1) 1506/   C9D3A : =$37                vcTL3 set vcTL3&$7F
(1) 1506/   C9D3A : =$14                vcTL4 set vcTL4&$7F
(1) 1506/   C9D3A :                     
(1) 1506/   C9D3A : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1506/   C9D3E : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1506/   C9D42 : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1506/   C9D46 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1506/   C9D4A : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1506/   C9D4E : 1437 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1507/   C9D52 :                     
(1) 1508/   C9D52 :                     ;	Voice $09
(1) 1509/   C9D52 :                     ;	$3B
(1) 1510/   C9D52 :                     ;	$0F, $06, $01, $02, 	$DF, $1F, $1F, $DF, 	$0C, $00, $0A, $03
(1) 1511/   C9D52 :                     ;	$0F, $00, $00, $01, 	$F3, $05, $55, $5C, 	$22, $20, $22, $80
(1) 1512/   C9D52 : (MACRO)             	smpsVcAlgorithm     $03
(1) 1512/   C9D52 : =$3                 vcAlgorithm set $03
(1) 1513/   C9D52 : (MACRO)             	smpsVcFeedback      $07
(1) 1513/   C9D52 : =$7                 vcFeedback set $07
(1) 1514/   C9D52 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1514/   C9D52 : =$0                 vcUnusedBits set $00
(1) 1514/   C9D52 : =$0                 vcD1R1Unk set 0
(1) 1514/   C9D52 : =$0                 vcD1R2Unk set 0
(1) 1514/   C9D52 : =$0                 vcD1R3Unk set 0
(1) 1514/   C9D52 : =$0                 vcD1R4Unk set 0
(1) 1515/   C9D52 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1515/   C9D52 : =$0                 vcDT1 set $00
(1) 1515/   C9D52 : =$0                 vcDT2 set $00
(1) 1515/   C9D52 : =$0                 vcDT3 set $00
(1) 1515/   C9D52 : =$0                 vcDT4 set $00
(1) 1516/   C9D52 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $06, $0F
(1) 1516/   C9D52 : =$2                 vcCF1 set $02
(1) 1516/   C9D52 : =$1                 vcCF2 set $01
(1) 1516/   C9D52 : =$6                 vcCF3 set $06
(1) 1516/   C9D52 : =$F                 vcCF4 set $0F
(1) 1517/   C9D52 : (MACRO)             	smpsVcRateScale     $03, $00, $00, $03
(1) 1517/   C9D52 : =$3                 vcRS1 set $03
(1) 1517/   C9D52 : =$0                 vcRS2 set $00
(1) 1517/   C9D52 : =$0                 vcRS3 set $00
(1) 1517/   C9D52 : =$3                 vcRS4 set $03
(1) 1518/   C9D52 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 1518/   C9D52 : =$1F                vcAR1 set $1F
(1) 1518/   C9D52 : =$1F                vcAR2 set $1F
(1) 1518/   C9D52 : =$1F                vcAR3 set $1F
(1) 1518/   C9D52 : =$1F                vcAR4 set $1F
(1) 1519/   C9D52 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1519/   C9D52 : =$0                 vcAM1 set $00<<5
(1) 1519/   C9D52 : =$0                 vcAM2 set $00<<5
(1) 1519/   C9D52 : =$0                 vcAM3 set $00<<5
(1) 1519/   C9D52 : =$0                 vcAM4 set $00<<5
(1) 1520/   C9D52 : (MACRO)             	smpsVcDecayRate1    $03, $0A, $00, $0C
(1) 1520/   C9D52 : =$3                 vcD1R1 set $03
(1) 1520/   C9D52 : =$A                 vcD1R2 set $0A
(1) 1520/   C9D52 : =$0                 vcD1R3 set $00
(1) 1520/   C9D52 : =$C                 vcD1R4 set $0C
(1) 1521/   C9D52 : (MACRO)             	smpsVcDecayRate2    $01, $00, $00, $0F
(1) 1521/   C9D52 : =$1                 vcD2R1 set $01
(1) 1521/   C9D52 : =$0                 vcD2R2 set $00
(1) 1521/   C9D52 : =$0                 vcD2R3 set $00
(1) 1521/   C9D52 : =$F                 vcD2R4 set $0F
(1) 1522/   C9D52 : (MACRO)             	smpsVcDecayLevel    $05, $05, $00, $0F
(1) 1522/   C9D52 : =$5                 vcDL1 set $05
(1) 1522/   C9D52 : =$5                 vcDL2 set $05
(1) 1522/   C9D52 : =$0                 vcDL3 set $00
(1) 1522/   C9D52 : =$F                 vcDL4 set $0F
(1) 1523/   C9D52 : (MACRO)             	smpsVcReleaseRate   $0C, $05, $05, $03
(1) 1523/   C9D52 : =$C                 vcRR1 set $0C
(1) 1523/   C9D52 : =$5                 vcRR2 set $05
(1) 1523/   C9D52 : =$5                 vcRR3 set $05
(1) 1523/   C9D52 : =$3                 vcRR4 set $03
(1) 1524/   C9D52 : (MACRO)             	smpsVcTotalLevel    $80, $22, $20, $22
(1) 1524/   C9D52 : =$80                vcTL1 set $80
(1) 1524/   C9D52 : =$22                vcTL2 set $22
(1) 1524/   C9D52 : =$20                vcTL3 set $20
(1) 1524/   C9D52 : =$22                vcTL4 set $22
(1) 1524/   C9D52 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1524/   C9D53 :                     ;   0     1     2     3     4     5     6     7
(1) 1524/   C9D53 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1524/   C9D53 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1524/   C9D53 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1524/   C9D53 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1524/   C9D53 : =$80                vcTLMask1 set $80
(1) 1524/   C9D53 :                     
(1) 1524/   C9D53 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1524/   C9D53 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1524/   C9D53 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1524/   C9D53 : =$80                vcTLMask1 set $80
(1) 1524/   C9D53 : =$0                 vcTL1 set vcTL1&$7F
(1) 1524/   C9D53 : =$22                vcTL2 set vcTL2&$7F
(1) 1524/   C9D53 : =$20                vcTL3 set vcTL3&$7F
(1) 1524/   C9D53 : =$22                vcTL4 set vcTL4&$7F
(1) 1524/   C9D53 :                     
(1) 1524/   C9D53 : 0F06 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1524/   C9D57 : DF1F 1FDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1524/   C9D5B : 0C00 0A03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1524/   C9D5F : 0F00 0001                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1524/   C9D63 : F305 555C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1524/   C9D67 : 2220 2280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1525/   C9D6B :                     
(1) 1526/   C9D6B :                     ;	Voice $0A
(1) 1527/   C9D6B :                     ;	$3C
(1) 1528/   C9D6B :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1) 1529/   C9D6B :                     ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1C, $84, $14, $80
(1) 1530/   C9D6B : (MACRO)             	smpsVcAlgorithm     $04
(1) 1530/   C9D6B : =$4                 vcAlgorithm set $04
(1) 1531/   C9D6B : (MACRO)             	smpsVcFeedback      $07
(1) 1531/   C9D6B : =$7                 vcFeedback set $07
(1) 1532/   C9D6B : (MACRO)             	smpsVcUnusedBits    $00
(1) 1532/   C9D6B : =$0                 vcUnusedBits set $00
(1) 1532/   C9D6B : =$0                 vcD1R1Unk set 0
(1) 1532/   C9D6B : =$0                 vcD1R2Unk set 0
(1) 1532/   C9D6B : =$0                 vcD1R3Unk set 0
(1) 1532/   C9D6B : =$0                 vcD1R4Unk set 0
(1) 1533/   C9D6B : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1) 1533/   C9D6B : =$3                 vcDT1 set $03
(1) 1533/   C9D6B : =$5                 vcDT2 set $05
(1) 1533/   C9D6B : =$5                 vcDT3 set $05
(1) 1533/   C9D6B : =$3                 vcDT4 set $03
(1) 1534/   C9D6B : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1) 1534/   C9D6B : =$0                 vcCF1 set $00
(1) 1534/   C9D6B : =$0                 vcCF2 set $00
(1) 1534/   C9D6B : =$2                 vcCF3 set $02
(1) 1534/   C9D6B : =$1                 vcCF4 set $01
(1) 1535/   C9D6B : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1) 1535/   C9D6B : =$1                 vcRS1 set $01
(1) 1535/   C9D6B : =$1                 vcRS2 set $01
(1) 1535/   C9D6B : =$1                 vcRS3 set $01
(1) 1535/   C9D6B : =$1                 vcRS4 set $01
(1) 1536/   C9D6B : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1) 1536/   C9D6B : =$13                vcAR1 set $13
(1) 1536/   C9D6B : =$12                vcAR2 set $12
(1) 1536/   C9D6B : =$13                vcAR3 set $13
(1) 1536/   C9D6B : =$12                vcAR4 set $12
(1) 1537/   C9D6B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1537/   C9D6B : =$0                 vcAM1 set $00<<5
(1) 1537/   C9D6B : =$0                 vcAM2 set $00<<5
(1) 1537/   C9D6B : =$0                 vcAM3 set $00<<5
(1) 1537/   C9D6B : =$0                 vcAM4 set $00<<5
(1) 1538/   C9D6B : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1) 1538/   C9D6B : =$0                 vcD1R1 set $00
(1) 1538/   C9D6B : =$8                 vcD1R2 set $08
(1) 1538/   C9D6B : =$0                 vcD1R3 set $00
(1) 1538/   C9D6B : =$8                 vcD1R4 set $08
(1) 1539/   C9D6B : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1) 1539/   C9D6B : =$0                 vcD2R1 set $00
(1) 1539/   C9D6B : =$4                 vcD2R2 set $04
(1) 1539/   C9D6B : =$0                 vcD2R3 set $00
(1) 1539/   C9D6B : =$4                 vcD2R4 set $04
(1) 1540/   C9D6B : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1) 1540/   C9D6B : =$0                 vcDL1 set $00
(1) 1540/   C9D6B : =$1                 vcDL2 set $01
(1) 1540/   C9D6B : =$0                 vcDL3 set $00
(1) 1540/   C9D6B : =$1                 vcDL4 set $01
(1) 1541/   C9D6B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1541/   C9D6B : =$F                 vcRR1 set $0F
(1) 1541/   C9D6B : =$F                 vcRR2 set $0F
(1) 1541/   C9D6B : =$F                 vcRR3 set $0F
(1) 1541/   C9D6B : =$F                 vcRR4 set $0F
(1) 1542/   C9D6B : (MACRO)             	smpsVcTotalLevel    $80, $14, $84, $1C
(1) 1542/   C9D6B : =$80                vcTL1 set $80
(1) 1542/   C9D6B : =$14                vcTL2 set $14
(1) 1542/   C9D6B : =$84                vcTL3 set $84
(1) 1542/   C9D6B : =$1C                vcTL4 set $1C
(1) 1542/   C9D6B : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1542/   C9D6C :                     ;   0     1     2     3     4     5     6     7
(1) 1542/   C9D6C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1542/   C9D6C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1542/   C9D6C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1542/   C9D6C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1542/   C9D6C : =$80                vcTLMask1 set $80
(1) 1542/   C9D6C :                     
(1) 1542/   C9D6C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1542/   C9D6C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1542/   C9D6C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1542/   C9D6C : =$80                vcTLMask1 set $80
(1) 1542/   C9D6C : =$0                 vcTL1 set vcTL1&$7F
(1) 1542/   C9D6C : =$14                vcTL2 set vcTL2&$7F
(1) 1542/   C9D6C : =$4                 vcTL3 set vcTL3&$7F
(1) 1542/   C9D6C : =$1C                vcTL4 set vcTL4&$7F
(1) 1542/   C9D6C :                     
(1) 1542/   C9D6C : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1542/   C9D70 : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1542/   C9D74 : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1542/   C9D78 : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1542/   C9D7C : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1542/   C9D80 : 1C84 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1543/   C9D84 :                     
(1) 1544/   C9D84 :                     ;	Voice $0B
(1) 1545/   C9D84 :                     ;	$3A
(1) 1546/   C9D84 :                     ;	$69, $70, $50, $60, 	$1C, $18, $1A, $18, 	$10, $0C, $02, $09
(1) 1547/   C9D84 :                     ;	$08, $06, $06, $03, 	$F9, $56, $06, $06, 	$28, $15, $14, $00
(1) 1548/   C9D84 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1548/   C9D84 : =$2                 vcAlgorithm set $02
(1) 1549/   C9D84 : (MACRO)             	smpsVcFeedback      $07
(1) 1549/   C9D84 : =$7                 vcFeedback set $07
(1) 1550/   C9D84 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1550/   C9D84 : =$0                 vcUnusedBits set $00
(1) 1550/   C9D84 : =$0                 vcD1R1Unk set 0
(1) 1550/   C9D84 : =$0                 vcD1R2Unk set 0
(1) 1550/   C9D84 : =$0                 vcD1R3Unk set 0
(1) 1550/   C9D84 : =$0                 vcD1R4Unk set 0
(1) 1551/   C9D84 : (MACRO)             	smpsVcDetune        $06, $05, $07, $06
(1) 1551/   C9D84 : =$6                 vcDT1 set $06
(1) 1551/   C9D84 : =$5                 vcDT2 set $05
(1) 1551/   C9D84 : =$7                 vcDT3 set $07
(1) 1551/   C9D84 : =$6                 vcDT4 set $06
(1) 1552/   C9D84 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1) 1552/   C9D84 : =$0                 vcCF1 set $00
(1) 1552/   C9D84 : =$0                 vcCF2 set $00
(1) 1552/   C9D84 : =$0                 vcCF3 set $00
(1) 1552/   C9D84 : =$9                 vcCF4 set $09
(1) 1553/   C9D84 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1553/   C9D84 : =$0                 vcRS1 set $00
(1) 1553/   C9D84 : =$0                 vcRS2 set $00
(1) 1553/   C9D84 : =$0                 vcRS3 set $00
(1) 1553/   C9D84 : =$0                 vcRS4 set $00
(1) 1554/   C9D84 : (MACRO)             	smpsVcAttackRate    $18, $1A, $18, $1C
(1) 1554/   C9D84 : =$18                vcAR1 set $18
(1) 1554/   C9D84 : =$1A                vcAR2 set $1A
(1) 1554/   C9D84 : =$18                vcAR3 set $18
(1) 1554/   C9D84 : =$1C                vcAR4 set $1C
(1) 1555/   C9D84 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1555/   C9D84 : =$0                 vcAM1 set $00<<5
(1) 1555/   C9D84 : =$0                 vcAM2 set $00<<5
(1) 1555/   C9D84 : =$0                 vcAM3 set $00<<5
(1) 1555/   C9D84 : =$0                 vcAM4 set $00<<5
(1) 1556/   C9D84 : (MACRO)             	smpsVcDecayRate1    $09, $02, $0C, $10
(1) 1556/   C9D84 : =$9                 vcD1R1 set $09
(1) 1556/   C9D84 : =$2                 vcD1R2 set $02
(1) 1556/   C9D84 : =$C                 vcD1R3 set $0C
(1) 1556/   C9D84 : =$10                vcD1R4 set $10
(1) 1557/   C9D84 : (MACRO)             	smpsVcDecayRate2    $03, $06, $06, $08
(1) 1557/   C9D84 : =$3                 vcD2R1 set $03
(1) 1557/   C9D84 : =$6                 vcD2R2 set $06
(1) 1557/   C9D84 : =$6                 vcD2R3 set $06
(1) 1557/   C9D84 : =$8                 vcD2R4 set $08
(1) 1558/   C9D84 : (MACRO)             	smpsVcDecayLevel    $00, $00, $05, $0F
(1) 1558/   C9D84 : =$0                 vcDL1 set $00
(1) 1558/   C9D84 : =$0                 vcDL2 set $00
(1) 1558/   C9D84 : =$5                 vcDL3 set $05
(1) 1558/   C9D84 : =$F                 vcDL4 set $0F
(1) 1559/   C9D84 : (MACRO)             	smpsVcReleaseRate   $06, $06, $06, $09
(1) 1559/   C9D84 : =$6                 vcRR1 set $06
(1) 1559/   C9D84 : =$6                 vcRR2 set $06
(1) 1559/   C9D84 : =$6                 vcRR3 set $06
(1) 1559/   C9D84 : =$9                 vcRR4 set $09
(1) 1560/   C9D84 : (MACRO)             	smpsVcTotalLevel    $00, $14, $15, $28
(1) 1560/   C9D84 : =$0                 vcTL1 set $00
(1) 1560/   C9D84 : =$14                vcTL2 set $14
(1) 1560/   C9D84 : =$15                vcTL3 set $15
(1) 1560/   C9D84 : =$28                vcTL4 set $28
(1) 1560/   C9D84 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1560/   C9D85 :                     ;   0     1     2     3     4     5     6     7
(1) 1560/   C9D85 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1560/   C9D85 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1560/   C9D85 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1560/   C9D85 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1560/   C9D85 : =$80                vcTLMask1 set $80
(1) 1560/   C9D85 :                     
(1) 1560/   C9D85 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1560/   C9D85 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1560/   C9D85 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1560/   C9D85 : =$80                vcTLMask1 set $80
(1) 1560/   C9D85 : =$0                 vcTL1 set vcTL1&$7F
(1) 1560/   C9D85 : =$14                vcTL2 set vcTL2&$7F
(1) 1560/   C9D85 : =$15                vcTL3 set vcTL3&$7F
(1) 1560/   C9D85 : =$28                vcTL4 set vcTL4&$7F
(1) 1560/   C9D85 :                     
(1) 1560/   C9D85 : 6970 5060                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1560/   C9D89 : 1C18 1A18                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1560/   C9D8D : 100C 0209                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1560/   C9D91 : 0806 0603                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1560/   C9D95 : F956 0606                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1560/   C9D99 : 2815 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1561/   C9D9D :                     
(1) 1562/   C9D9D :                     ;	Voice $0C
(1) 1563/   C9D9D :                     ;	$3D
(1) 1564/   C9D9D :                     ;	$00, $01, $02, $01, 	$4C, $0F, $50, $12, 	$0C, $02, $00, $05
(1) 1565/   C9D9D :                     ;	$01, $00, $00, $00, 	$28, $29, $2A, $19, 	$1A, $00, $06, $00
(1) 1566/   C9D9D : (MACRO)             	smpsVcAlgorithm     $05
(1) 1566/   C9D9D : =$5                 vcAlgorithm set $05
(1) 1567/   C9D9D : (MACRO)             	smpsVcFeedback      $07
(1) 1567/   C9D9D : =$7                 vcFeedback set $07
(1) 1568/   C9D9D : (MACRO)             	smpsVcUnusedBits    $00
(1) 1568/   C9D9D : =$0                 vcUnusedBits set $00
(1) 1568/   C9D9D : =$0                 vcD1R1Unk set 0
(1) 1568/   C9D9D : =$0                 vcD1R2Unk set 0
(1) 1568/   C9D9D : =$0                 vcD1R3Unk set 0
(1) 1568/   C9D9D : =$0                 vcD1R4Unk set 0
(1) 1569/   C9D9D : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1569/   C9D9D : =$0                 vcDT1 set $00
(1) 1569/   C9D9D : =$0                 vcDT2 set $00
(1) 1569/   C9D9D : =$0                 vcDT3 set $00
(1) 1569/   C9D9D : =$0                 vcDT4 set $00
(1) 1570/   C9D9D : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $00
(1) 1570/   C9D9D : =$1                 vcCF1 set $01
(1) 1570/   C9D9D : =$2                 vcCF2 set $02
(1) 1570/   C9D9D : =$1                 vcCF3 set $01
(1) 1570/   C9D9D : =$0                 vcCF4 set $00
(1) 1571/   C9D9D : (MACRO)             	smpsVcRateScale     $00, $01, $00, $01
(1) 1571/   C9D9D : =$0                 vcRS1 set $00
(1) 1571/   C9D9D : =$1                 vcRS2 set $01
(1) 1571/   C9D9D : =$0                 vcRS3 set $00
(1) 1571/   C9D9D : =$1                 vcRS4 set $01
(1) 1572/   C9D9D : (MACRO)             	smpsVcAttackRate    $12, $10, $0F, $0C
(1) 1572/   C9D9D : =$12                vcAR1 set $12
(1) 1572/   C9D9D : =$10                vcAR2 set $10
(1) 1572/   C9D9D : =$F                 vcAR3 set $0F
(1) 1572/   C9D9D : =$C                 vcAR4 set $0C
(1) 1573/   C9D9D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1573/   C9D9D : =$0                 vcAM1 set $00<<5
(1) 1573/   C9D9D : =$0                 vcAM2 set $00<<5
(1) 1573/   C9D9D : =$0                 vcAM3 set $00<<5
(1) 1573/   C9D9D : =$0                 vcAM4 set $00<<5
(1) 1574/   C9D9D : (MACRO)             	smpsVcDecayRate1    $05, $00, $02, $0C
(1) 1574/   C9D9D : =$5                 vcD1R1 set $05
(1) 1574/   C9D9D : =$0                 vcD1R2 set $00
(1) 1574/   C9D9D : =$2                 vcD1R3 set $02
(1) 1574/   C9D9D : =$C                 vcD1R4 set $0C
(1) 1575/   C9D9D : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1) 1575/   C9D9D : =$0                 vcD2R1 set $00
(1) 1575/   C9D9D : =$0                 vcD2R2 set $00
(1) 1575/   C9D9D : =$0                 vcD2R3 set $00
(1) 1575/   C9D9D : =$1                 vcD2R4 set $01
(1) 1576/   C9D9D : (MACRO)             	smpsVcDecayLevel    $01, $02, $02, $02
(1) 1576/   C9D9D : =$1                 vcDL1 set $01
(1) 1576/   C9D9D : =$2                 vcDL2 set $02
(1) 1576/   C9D9D : =$2                 vcDL3 set $02
(1) 1576/   C9D9D : =$2                 vcDL4 set $02
(1) 1577/   C9D9D : (MACRO)             	smpsVcReleaseRate   $09, $0A, $09, $08
(1) 1577/   C9D9D : =$9                 vcRR1 set $09
(1) 1577/   C9D9D : =$A                 vcRR2 set $0A
(1) 1577/   C9D9D : =$9                 vcRR3 set $09
(1) 1577/   C9D9D : =$8                 vcRR4 set $08
(1) 1578/   C9D9D : (MACRO)             	smpsVcTotalLevel    $00, $06, $00, $1A
(1) 1578/   C9D9D : =$0                 vcTL1 set $00
(1) 1578/   C9D9D : =$6                 vcTL2 set $06
(1) 1578/   C9D9D : =$0                 vcTL3 set $00
(1) 1578/   C9D9D : =$1A                vcTL4 set $1A
(1) 1578/   C9D9D : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1578/   C9D9E :                     ;   0     1     2     3     4     5     6     7
(1) 1578/   C9D9E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1578/   C9D9E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1578/   C9D9E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1578/   C9D9E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1578/   C9D9E : =$80                vcTLMask1 set $80
(1) 1578/   C9D9E :                     
(1) 1578/   C9D9E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1578/   C9D9E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1578/   C9D9E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1578/   C9D9E : =$80                vcTLMask1 set $80
(1) 1578/   C9D9E : =$0                 vcTL1 set vcTL1&$7F
(1) 1578/   C9D9E : =$6                 vcTL2 set vcTL2&$7F
(1) 1578/   C9D9E : =$0                 vcTL3 set vcTL3&$7F
(1) 1578/   C9D9E : =$1A                vcTL4 set vcTL4&$7F
(1) 1578/   C9D9E :                     
(1) 1578/   C9D9E : 0001 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1578/   C9DA2 : 4C0F 5012                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1578/   C9DA6 : 0C02 0005                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1578/   C9DAA : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1578/   C9DAE : 2829 2A19                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1578/   C9DB2 : 1A80 8680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1579/   C9DB6 :                     
(1) 1580/   C9DB6 :                     ;	Voice $0D
(1) 1581/   C9DB6 :                     ;	$2C
(1) 1582/   C9DB6 :                     ;	$71, $71, $31, $31, 	$1F, $16, $1F, $16, 	$00, $0F, $00, $0F
(1) 1583/   C9DB6 :                     ;	$00, $0F, $00, $0F, 	$00, $FA, $00, $FA, 	$15, $00, $14, $00
(1) 1584/   C9DB6 : (MACRO)             	smpsVcAlgorithm     $04
(1) 1584/   C9DB6 : =$4                 vcAlgorithm set $04
(1) 1585/   C9DB6 : (MACRO)             	smpsVcFeedback      $05
(1) 1585/   C9DB6 : =$5                 vcFeedback set $05
(1) 1586/   C9DB6 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1586/   C9DB6 : =$0                 vcUnusedBits set $00
(1) 1586/   C9DB6 : =$0                 vcD1R1Unk set 0
(1) 1586/   C9DB6 : =$0                 vcD1R2Unk set 0
(1) 1586/   C9DB6 : =$0                 vcD1R3Unk set 0
(1) 1586/   C9DB6 : =$0                 vcD1R4Unk set 0
(1) 1587/   C9DB6 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(1) 1587/   C9DB6 : =$3                 vcDT1 set $03
(1) 1587/   C9DB6 : =$3                 vcDT2 set $03
(1) 1587/   C9DB6 : =$7                 vcDT3 set $07
(1) 1587/   C9DB6 : =$7                 vcDT4 set $07
(1) 1588/   C9DB6 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1) 1588/   C9DB6 : =$1                 vcCF1 set $01
(1) 1588/   C9DB6 : =$1                 vcCF2 set $01
(1) 1588/   C9DB6 : =$1                 vcCF3 set $01
(1) 1588/   C9DB6 : =$1                 vcCF4 set $01
(1) 1589/   C9DB6 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1589/   C9DB6 : =$0                 vcRS1 set $00
(1) 1589/   C9DB6 : =$0                 vcRS2 set $00
(1) 1589/   C9DB6 : =$0                 vcRS3 set $00
(1) 1589/   C9DB6 : =$0                 vcRS4 set $00
(1) 1590/   C9DB6 : (MACRO)             	smpsVcAttackRate    $16, $1F, $16, $1F
(1) 1590/   C9DB6 : =$16                vcAR1 set $16
(1) 1590/   C9DB6 : =$1F                vcAR2 set $1F
(1) 1590/   C9DB6 : =$16                vcAR3 set $16
(1) 1590/   C9DB6 : =$1F                vcAR4 set $1F
(1) 1591/   C9DB6 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1591/   C9DB6 : =$0                 vcAM1 set $00<<5
(1) 1591/   C9DB6 : =$0                 vcAM2 set $00<<5
(1) 1591/   C9DB6 : =$0                 vcAM3 set $00<<5
(1) 1591/   C9DB6 : =$0                 vcAM4 set $00<<5
(1) 1592/   C9DB6 : (MACRO)             	smpsVcDecayRate1    $0F, $00, $0F, $00
(1) 1592/   C9DB6 : =$F                 vcD1R1 set $0F
(1) 1592/   C9DB6 : =$0                 vcD1R2 set $00
(1) 1592/   C9DB6 : =$F                 vcD1R3 set $0F
(1) 1592/   C9DB6 : =$0                 vcD1R4 set $00
(1) 1593/   C9DB6 : (MACRO)             	smpsVcDecayRate2    $0F, $00, $0F, $00
(1) 1593/   C9DB6 : =$F                 vcD2R1 set $0F
(1) 1593/   C9DB6 : =$0                 vcD2R2 set $00
(1) 1593/   C9DB6 : =$F                 vcD2R3 set $0F
(1) 1593/   C9DB6 : =$0                 vcD2R4 set $00
(1) 1594/   C9DB6 : (MACRO)             	smpsVcDecayLevel    $0F, $00, $0F, $00
(1) 1594/   C9DB6 : =$F                 vcDL1 set $0F
(1) 1594/   C9DB6 : =$0                 vcDL2 set $00
(1) 1594/   C9DB6 : =$F                 vcDL3 set $0F
(1) 1594/   C9DB6 : =$0                 vcDL4 set $00
(1) 1595/   C9DB6 : (MACRO)             	smpsVcReleaseRate   $0A, $00, $0A, $00
(1) 1595/   C9DB6 : =$A                 vcRR1 set $0A
(1) 1595/   C9DB6 : =$0                 vcRR2 set $00
(1) 1595/   C9DB6 : =$A                 vcRR3 set $0A
(1) 1595/   C9DB6 : =$0                 vcRR4 set $00
(1) 1596/   C9DB6 : (MACRO)             	smpsVcTotalLevel    $00, $14, $00, $15
(1) 1596/   C9DB6 : =$0                 vcTL1 set $00
(1) 1596/   C9DB6 : =$14                vcTL2 set $14
(1) 1596/   C9DB6 : =$0                 vcTL3 set $00
(1) 1596/   C9DB6 : =$15                vcTL4 set $15
(1) 1596/   C9DB6 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1596/   C9DB7 :                     ;   0     1     2     3     4     5     6     7
(1) 1596/   C9DB7 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1596/   C9DB7 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1596/   C9DB7 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1596/   C9DB7 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1596/   C9DB7 : =$80                vcTLMask1 set $80
(1) 1596/   C9DB7 :                     
(1) 1596/   C9DB7 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1596/   C9DB7 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1596/   C9DB7 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1596/   C9DB7 : =$80                vcTLMask1 set $80
(1) 1596/   C9DB7 : =$0                 vcTL1 set vcTL1&$7F
(1) 1596/   C9DB7 : =$14                vcTL2 set vcTL2&$7F
(1) 1596/   C9DB7 : =$0                 vcTL3 set vcTL3&$7F
(1) 1596/   C9DB7 : =$15                vcTL4 set vcTL4&$7F
(1) 1596/   C9DB7 :                     
(1) 1596/   C9DB7 : 7171 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1596/   C9DBB : 1F16 1F16                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1596/   C9DBF : 000F 000F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1596/   C9DC3 : 000F 000F                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1596/   C9DC7 : 00FA 00FA                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1596/   C9DCB : 1580 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1597/   C9DCF :                     
(1) 1598/   C9DCF :                     ;	Voice $0E
(1) 1599/   C9DCF :                     ;	$18
(1) 1600/   C9DCF :                     ;	$37, $32, $31, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
(1) 1601/   C9DCF :                     ;	$08, $0A, $03, $05, 	$B6, $B6, $36, $28, 	$2C, $22, $14, $00
(1) 1602/   C9DCF : (MACRO)             	smpsVcAlgorithm     $00
(1) 1602/   C9DCF : =$0                 vcAlgorithm set $00
(1) 1603/   C9DCF : (MACRO)             	smpsVcFeedback      $03
(1) 1603/   C9DCF : =$3                 vcFeedback set $03
(1) 1604/   C9DCF : (MACRO)             	smpsVcUnusedBits    $00
(1) 1604/   C9DCF : =$0                 vcUnusedBits set $00
(1) 1604/   C9DCF : =$0                 vcD1R1Unk set 0
(1) 1604/   C9DCF : =$0                 vcD1R2Unk set 0
(1) 1604/   C9DCF : =$0                 vcD1R3Unk set 0
(1) 1604/   C9DCF : =$0                 vcD1R4Unk set 0
(1) 1605/   C9DCF : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1) 1605/   C9DCF : =$3                 vcDT1 set $03
(1) 1605/   C9DCF : =$3                 vcDT2 set $03
(1) 1605/   C9DCF : =$3                 vcDT3 set $03
(1) 1605/   C9DCF : =$3                 vcDT4 set $03
(1) 1606/   C9DCF : (MACRO)             	smpsVcCoarseFreq    $01, $01, $02, $07
(1) 1606/   C9DCF : =$1                 vcCF1 set $01
(1) 1606/   C9DCF : =$1                 vcCF2 set $01
(1) 1606/   C9DCF : =$2                 vcCF3 set $02
(1) 1606/   C9DCF : =$7                 vcCF4 set $07
(1) 1607/   C9DCF : (MACRO)             	smpsVcRateScale     $02, $00, $03, $02
(1) 1607/   C9DCF : =$2                 vcRS1 set $02
(1) 1607/   C9DCF : =$0                 vcRS2 set $00
(1) 1607/   C9DCF : =$3                 vcRS3 set $03
(1) 1607/   C9DCF : =$2                 vcRS4 set $02
(1) 1608/   C9DCF : (MACRO)             	smpsVcAttackRate    $1C, $1C, $1C, $1E
(1) 1608/   C9DCF : =$1C                vcAR1 set $1C
(1) 1608/   C9DCF : =$1C                vcAR2 set $1C
(1) 1608/   C9DCF : =$1C                vcAR3 set $1C
(1) 1608/   C9DCF : =$1E                vcAR4 set $1E
(1) 1609/   C9DCF : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1609/   C9DCF : =$0                 vcAM1 set $00<<5
(1) 1609/   C9DCF : =$0                 vcAM2 set $00<<5
(1) 1609/   C9DCF : =$0                 vcAM3 set $00<<5
(1) 1609/   C9DCF : =$0                 vcAM4 set $00<<5
(1) 1610/   C9DCF : (MACRO)             	smpsVcDecayRate1    $01, $04, $06, $0D
(1) 1610/   C9DCF : =$1                 vcD1R1 set $01
(1) 1610/   C9DCF : =$4                 vcD1R2 set $04
(1) 1610/   C9DCF : =$6                 vcD1R3 set $06
(1) 1610/   C9DCF : =$D                 vcD1R4 set $0D
(1) 1611/   C9DCF : (MACRO)             	smpsVcDecayRate2    $05, $03, $0A, $08
(1) 1611/   C9DCF : =$5                 vcD2R1 set $05
(1) 1611/   C9DCF : =$3                 vcD2R2 set $03
(1) 1611/   C9DCF : =$A                 vcD2R3 set $0A
(1) 1611/   C9DCF : =$8                 vcD2R4 set $08
(1) 1612/   C9DCF : (MACRO)             	smpsVcDecayLevel    $02, $03, $0B, $0B
(1) 1612/   C9DCF : =$2                 vcDL1 set $02
(1) 1612/   C9DCF : =$3                 vcDL2 set $03
(1) 1612/   C9DCF : =$B                 vcDL3 set $0B
(1) 1612/   C9DCF : =$B                 vcDL4 set $0B
(1) 1613/   C9DCF : (MACRO)             	smpsVcReleaseRate   $08, $06, $06, $06
(1) 1613/   C9DCF : =$8                 vcRR1 set $08
(1) 1613/   C9DCF : =$6                 vcRR2 set $06
(1) 1613/   C9DCF : =$6                 vcRR3 set $06
(1) 1613/   C9DCF : =$6                 vcRR4 set $06
(1) 1614/   C9DCF : (MACRO)             	smpsVcTotalLevel    $00, $14, $22, $2C
(1) 1614/   C9DCF : =$0                 vcTL1 set $00
(1) 1614/   C9DCF : =$14                vcTL2 set $14
(1) 1614/   C9DCF : =$22                vcTL3 set $22
(1) 1614/   C9DCF : =$2C                vcTL4 set $2C
(1) 1614/   C9DCF : 18                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1614/   C9DD0 :                     ;   0     1     2     3     4     5     6     7
(1) 1614/   C9DD0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1614/   C9DD0 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1614/   C9DD0 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1614/   C9DD0 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1614/   C9DD0 : =$80                vcTLMask1 set $80
(1) 1614/   C9DD0 :                     
(1) 1614/   C9DD0 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1614/   C9DD0 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1614/   C9DD0 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1614/   C9DD0 : =$80                vcTLMask1 set $80
(1) 1614/   C9DD0 : =$0                 vcTL1 set vcTL1&$7F
(1) 1614/   C9DD0 : =$14                vcTL2 set vcTL2&$7F
(1) 1614/   C9DD0 : =$22                vcTL3 set vcTL3&$7F
(1) 1614/   C9DD0 : =$2C                vcTL4 set vcTL4&$7F
(1) 1614/   C9DD0 :                     
(1) 1614/   C9DD0 : 3732 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1614/   C9DD4 : 9EDC 1C9C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1614/   C9DD8 : 0D06 0401                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1614/   C9DDC : 080A 0305                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1614/   C9DE0 : B6B6 3628                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1614/   C9DE4 : 2C22 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1615/   C9DE8 :                     
(1) 1616/   C9DE8 :                     ;	Voice $0F
(1) 1617/   C9DE8 :                     ;	$3D
(1) 1618/   C9DE8 :                     ;	$01, $02, $02, $02, 	$10, $50, $50, $50, 	$07, $08, $08, $08
(1) 1619/   C9DE8 :                     ;	$01, $00, $00, $00, 	$24, $18, $18, $18, 	$1C, $82, $82, $82
(1) 1620/   C9DE8 : (MACRO)             	smpsVcAlgorithm     $05
(1) 1620/   C9DE8 : =$5                 vcAlgorithm set $05
(1) 1621/   C9DE8 : (MACRO)             	smpsVcFeedback      $07
(1) 1621/   C9DE8 : =$7                 vcFeedback set $07
(1) 1622/   C9DE8 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1622/   C9DE8 : =$0                 vcUnusedBits set $00
(1) 1622/   C9DE8 : =$0                 vcD1R1Unk set 0
(1) 1622/   C9DE8 : =$0                 vcD1R2Unk set 0
(1) 1622/   C9DE8 : =$0                 vcD1R3Unk set 0
(1) 1622/   C9DE8 : =$0                 vcD1R4Unk set 0
(1) 1623/   C9DE8 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1623/   C9DE8 : =$0                 vcDT1 set $00
(1) 1623/   C9DE8 : =$0                 vcDT2 set $00
(1) 1623/   C9DE8 : =$0                 vcDT3 set $00
(1) 1623/   C9DE8 : =$0                 vcDT4 set $00
(1) 1624/   C9DE8 : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $01
(1) 1624/   C9DE8 : =$2                 vcCF1 set $02
(1) 1624/   C9DE8 : =$2                 vcCF2 set $02
(1) 1624/   C9DE8 : =$2                 vcCF3 set $02
(1) 1624/   C9DE8 : =$1                 vcCF4 set $01
(1) 1625/   C9DE8 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $00
(1) 1625/   C9DE8 : =$1                 vcRS1 set $01
(1) 1625/   C9DE8 : =$1                 vcRS2 set $01
(1) 1625/   C9DE8 : =$1                 vcRS3 set $01
(1) 1625/   C9DE8 : =$0                 vcRS4 set $00
(1) 1626/   C9DE8 : (MACRO)             	smpsVcAttackRate    $10, $10, $10, $10
(1) 1626/   C9DE8 : =$10                vcAR1 set $10
(1) 1626/   C9DE8 : =$10                vcAR2 set $10
(1) 1626/   C9DE8 : =$10                vcAR3 set $10
(1) 1626/   C9DE8 : =$10                vcAR4 set $10
(1) 1627/   C9DE8 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1627/   C9DE8 : =$0                 vcAM1 set $00<<5
(1) 1627/   C9DE8 : =$0                 vcAM2 set $00<<5
(1) 1627/   C9DE8 : =$0                 vcAM3 set $00<<5
(1) 1627/   C9DE8 : =$0                 vcAM4 set $00<<5
(1) 1628/   C9DE8 : (MACRO)             	smpsVcDecayRate1    $08, $08, $08, $07
(1) 1628/   C9DE8 : =$8                 vcD1R1 set $08
(1) 1628/   C9DE8 : =$8                 vcD1R2 set $08
(1) 1628/   C9DE8 : =$8                 vcD1R3 set $08
(1) 1628/   C9DE8 : =$7                 vcD1R4 set $07
(1) 1629/   C9DE8 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1) 1629/   C9DE8 : =$0                 vcD2R1 set $00
(1) 1629/   C9DE8 : =$0                 vcD2R2 set $00
(1) 1629/   C9DE8 : =$0                 vcD2R3 set $00
(1) 1629/   C9DE8 : =$1                 vcD2R4 set $01
(1) 1630/   C9DE8 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $02
(1) 1630/   C9DE8 : =$1                 vcDL1 set $01
(1) 1630/   C9DE8 : =$1                 vcDL2 set $01
(1) 1630/   C9DE8 : =$1                 vcDL3 set $01
(1) 1630/   C9DE8 : =$2                 vcDL4 set $02
(1) 1631/   C9DE8 : (MACRO)             	smpsVcReleaseRate   $08, $08, $08, $04
(1) 1631/   C9DE8 : =$8                 vcRR1 set $08
(1) 1631/   C9DE8 : =$8                 vcRR2 set $08
(1) 1631/   C9DE8 : =$8                 vcRR3 set $08
(1) 1631/   C9DE8 : =$4                 vcRR4 set $04
(1) 1632/   C9DE8 : (MACRO)             	smpsVcTotalLevel    $82, $82, $82, $1C
(1) 1632/   C9DE8 : =$82                vcTL1 set $82
(1) 1632/   C9DE8 : =$82                vcTL2 set $82
(1) 1632/   C9DE8 : =$82                vcTL3 set $82
(1) 1632/   C9DE8 : =$1C                vcTL4 set $1C
(1) 1632/   C9DE8 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1632/   C9DE9 :                     ;   0     1     2     3     4     5     6     7
(1) 1632/   C9DE9 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1632/   C9DE9 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1632/   C9DE9 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1632/   C9DE9 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1632/   C9DE9 : =$80                vcTLMask1 set $80
(1) 1632/   C9DE9 :                     
(1) 1632/   C9DE9 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1632/   C9DE9 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1632/   C9DE9 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1632/   C9DE9 : =$80                vcTLMask1 set $80
(1) 1632/   C9DE9 : =$2                 vcTL1 set vcTL1&$7F
(1) 1632/   C9DE9 : =$2                 vcTL2 set vcTL2&$7F
(1) 1632/   C9DE9 : =$2                 vcTL3 set vcTL3&$7F
(1) 1632/   C9DE9 : =$1C                vcTL4 set vcTL4&$7F
(1) 1632/   C9DE9 :                     
(1) 1632/   C9DE9 : 0102 0202                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1632/   C9DED : 1050 5050                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1632/   C9DF1 : 0708 0808                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1632/   C9DF5 : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1632/   C9DF9 : 2418 1818                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1632/   C9DFD : 1C82 8282                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1633/   C9E01 :                     
(1) 1634/   C9E01 :                     ;	Voice $10
(1) 1635/   C9E01 :                     ;	$32
(1) 1636/   C9E01 :                     ;	$71, $0D, $33, $01, 	$5F, $99, $5F, $94, 	$05, $05, $05, $07
(1) 1637/   C9E01 :                     ;	$02, $02, $02, $02, 	$11, $11, $11, $72, 	$23, $2D, $26, $80
(1) 1638/   C9E01 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1638/   C9E01 : =$2                 vcAlgorithm set $02
(1) 1639/   C9E01 : (MACRO)             	smpsVcFeedback      $06
(1) 1639/   C9E01 : =$6                 vcFeedback set $06
(1) 1640/   C9E01 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1640/   C9E01 : =$0                 vcUnusedBits set $00
(1) 1640/   C9E01 : =$0                 vcD1R1Unk set 0
(1) 1640/   C9E01 : =$0                 vcD1R2Unk set 0
(1) 1640/   C9E01 : =$0                 vcD1R3Unk set 0
(1) 1640/   C9E01 : =$0                 vcD1R4Unk set 0
(1) 1641/   C9E01 : (MACRO)             	smpsVcDetune        $00, $03, $00, $07
(1) 1641/   C9E01 : =$0                 vcDT1 set $00
(1) 1641/   C9E01 : =$3                 vcDT2 set $03
(1) 1641/   C9E01 : =$0                 vcDT3 set $00
(1) 1641/   C9E01 : =$7                 vcDT4 set $07
(1) 1642/   C9E01 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $0D, $01
(1) 1642/   C9E01 : =$1                 vcCF1 set $01
(1) 1642/   C9E01 : =$3                 vcCF2 set $03
(1) 1642/   C9E01 : =$D                 vcCF3 set $0D
(1) 1642/   C9E01 : =$1                 vcCF4 set $01
(1) 1643/   C9E01 : (MACRO)             	smpsVcRateScale     $02, $01, $02, $01
(1) 1643/   C9E01 : =$2                 vcRS1 set $02
(1) 1643/   C9E01 : =$1                 vcRS2 set $01
(1) 1643/   C9E01 : =$2                 vcRS3 set $02
(1) 1643/   C9E01 : =$1                 vcRS4 set $01
(1) 1644/   C9E01 : (MACRO)             	smpsVcAttackRate    $14, $1F, $19, $1F
(1) 1644/   C9E01 : =$14                vcAR1 set $14
(1) 1644/   C9E01 : =$1F                vcAR2 set $1F
(1) 1644/   C9E01 : =$19                vcAR3 set $19
(1) 1644/   C9E01 : =$1F                vcAR4 set $1F
(1) 1645/   C9E01 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1645/   C9E01 : =$0                 vcAM1 set $00<<5
(1) 1645/   C9E01 : =$0                 vcAM2 set $00<<5
(1) 1645/   C9E01 : =$0                 vcAM3 set $00<<5
(1) 1645/   C9E01 : =$0                 vcAM4 set $00<<5
(1) 1646/   C9E01 : (MACRO)             	smpsVcDecayRate1    $07, $05, $05, $05
(1) 1646/   C9E01 : =$7                 vcD1R1 set $07
(1) 1646/   C9E01 : =$5                 vcD1R2 set $05
(1) 1646/   C9E01 : =$5                 vcD1R3 set $05
(1) 1646/   C9E01 : =$5                 vcD1R4 set $05
(1) 1647/   C9E01 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1) 1647/   C9E01 : =$2                 vcD2R1 set $02
(1) 1647/   C9E01 : =$2                 vcD2R2 set $02
(1) 1647/   C9E01 : =$2                 vcD2R3 set $02
(1) 1647/   C9E01 : =$2                 vcD2R4 set $02
(1) 1648/   C9E01 : (MACRO)             	smpsVcDecayLevel    $07, $01, $01, $01
(1) 1648/   C9E01 : =$7                 vcDL1 set $07
(1) 1648/   C9E01 : =$1                 vcDL2 set $01
(1) 1648/   C9E01 : =$1                 vcDL3 set $01
(1) 1648/   C9E01 : =$1                 vcDL4 set $01
(1) 1649/   C9E01 : (MACRO)             	smpsVcReleaseRate   $02, $01, $01, $01
(1) 1649/   C9E01 : =$2                 vcRR1 set $02
(1) 1649/   C9E01 : =$1                 vcRR2 set $01
(1) 1649/   C9E01 : =$1                 vcRR3 set $01
(1) 1649/   C9E01 : =$1                 vcRR4 set $01
(1) 1650/   C9E01 : (MACRO)             	smpsVcTotalLevel    $80, $26, $2D, $23
(1) 1650/   C9E01 : =$80                vcTL1 set $80
(1) 1650/   C9E01 : =$26                vcTL2 set $26
(1) 1650/   C9E01 : =$2D                vcTL3 set $2D
(1) 1650/   C9E01 : =$23                vcTL4 set $23
(1) 1650/   C9E01 : 32                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1650/   C9E02 :                     ;   0     1     2     3     4     5     6     7
(1) 1650/   C9E02 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1650/   C9E02 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1650/   C9E02 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1650/   C9E02 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1650/   C9E02 : =$80                vcTLMask1 set $80
(1) 1650/   C9E02 :                     
(1) 1650/   C9E02 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1650/   C9E02 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1650/   C9E02 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1650/   C9E02 : =$80                vcTLMask1 set $80
(1) 1650/   C9E02 : =$0                 vcTL1 set vcTL1&$7F
(1) 1650/   C9E02 : =$26                vcTL2 set vcTL2&$7F
(1) 1650/   C9E02 : =$2D                vcTL3 set vcTL3&$7F
(1) 1650/   C9E02 : =$23                vcTL4 set vcTL4&$7F
(1) 1650/   C9E02 :                     
(1) 1650/   C9E02 : 710D 3301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1650/   C9E06 : 5F99 5F94                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1650/   C9E0A : 0505 0507                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1650/   C9E0E : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1650/   C9E12 : 1111 1172                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1650/   C9E16 : 232D 2680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1651/   C9E1A :                     
(1) 1652/   C9E1A :                     ;	Voice $11
(1) 1653/   C9E1A :                     ;	$3A
(1) 1654/   C9E1A :                     ;	$32, $01, $52, $31, 	$1F, $1F, $1F, $18, 	$01, $1F, $00, $00
(1) 1655/   C9E1A :                     ;	$00, $0F, $00, $00, 	$5A, $0F, $03, $1A, 	$3B, $30, $4F, $00
(1) 1656/   C9E1A : (MACRO)             	smpsVcAlgorithm     $02
(1) 1656/   C9E1A : =$2                 vcAlgorithm set $02
(1) 1657/   C9E1A : (MACRO)             	smpsVcFeedback      $07
(1) 1657/   C9E1A : =$7                 vcFeedback set $07
(1) 1658/   C9E1A : (MACRO)             	smpsVcUnusedBits    $00
(1) 1658/   C9E1A : =$0                 vcUnusedBits set $00
(1) 1658/   C9E1A : =$0                 vcD1R1Unk set 0
(1) 1658/   C9E1A : =$0                 vcD1R2Unk set 0
(1) 1658/   C9E1A : =$0                 vcD1R3Unk set 0
(1) 1658/   C9E1A : =$0                 vcD1R4Unk set 0
(1) 1659/   C9E1A : (MACRO)             	smpsVcDetune        $03, $05, $00, $03
(1) 1659/   C9E1A : =$3                 vcDT1 set $03
(1) 1659/   C9E1A : =$5                 vcDT2 set $05
(1) 1659/   C9E1A : =$0                 vcDT3 set $00
(1) 1659/   C9E1A : =$3                 vcDT4 set $03
(1) 1660/   C9E1A : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $02
(1) 1660/   C9E1A : =$1                 vcCF1 set $01
(1) 1660/   C9E1A : =$2                 vcCF2 set $02
(1) 1660/   C9E1A : =$1                 vcCF3 set $01
(1) 1660/   C9E1A : =$2                 vcCF4 set $02
(1) 1661/   C9E1A : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1661/   C9E1A : =$0                 vcRS1 set $00
(1) 1661/   C9E1A : =$0                 vcRS2 set $00
(1) 1661/   C9E1A : =$0                 vcRS3 set $00
(1) 1661/   C9E1A : =$0                 vcRS4 set $00
(1) 1662/   C9E1A : (MACRO)             	smpsVcAttackRate    $18, $1F, $1F, $1F
(1) 1662/   C9E1A : =$18                vcAR1 set $18
(1) 1662/   C9E1A : =$1F                vcAR2 set $1F
(1) 1662/   C9E1A : =$1F                vcAR3 set $1F
(1) 1662/   C9E1A : =$1F                vcAR4 set $1F
(1) 1663/   C9E1A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1663/   C9E1A : =$0                 vcAM1 set $00<<5
(1) 1663/   C9E1A : =$0                 vcAM2 set $00<<5
(1) 1663/   C9E1A : =$0                 vcAM3 set $00<<5
(1) 1663/   C9E1A : =$0                 vcAM4 set $00<<5
(1) 1664/   C9E1A : (MACRO)             	smpsVcDecayRate1    $00, $00, $1F, $01
(1) 1664/   C9E1A : =$0                 vcD1R1 set $00
(1) 1664/   C9E1A : =$0                 vcD1R2 set $00
(1) 1664/   C9E1A : =$1F                vcD1R3 set $1F
(1) 1664/   C9E1A : =$1                 vcD1R4 set $01
(1) 1665/   C9E1A : (MACRO)             	smpsVcDecayRate2    $00, $00, $0F, $00
(1) 1665/   C9E1A : =$0                 vcD2R1 set $00
(1) 1665/   C9E1A : =$0                 vcD2R2 set $00
(1) 1665/   C9E1A : =$F                 vcD2R3 set $0F
(1) 1665/   C9E1A : =$0                 vcD2R4 set $00
(1) 1666/   C9E1A : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $05
(1) 1666/   C9E1A : =$1                 vcDL1 set $01
(1) 1666/   C9E1A : =$0                 vcDL2 set $00
(1) 1666/   C9E1A : =$0                 vcDL3 set $00
(1) 1666/   C9E1A : =$5                 vcDL4 set $05
(1) 1667/   C9E1A : (MACRO)             	smpsVcReleaseRate   $0A, $03, $0F, $0A
(1) 1667/   C9E1A : =$A                 vcRR1 set $0A
(1) 1667/   C9E1A : =$3                 vcRR2 set $03
(1) 1667/   C9E1A : =$F                 vcRR3 set $0F
(1) 1667/   C9E1A : =$A                 vcRR4 set $0A
(1) 1668/   C9E1A : (MACRO)             	smpsVcTotalLevel    $00, $4F, $30, $3B
(1) 1668/   C9E1A : =$0                 vcTL1 set $00
(1) 1668/   C9E1A : =$4F                vcTL2 set $4F
(1) 1668/   C9E1A : =$30                vcTL3 set $30
(1) 1668/   C9E1A : =$3B                vcTL4 set $3B
(1) 1668/   C9E1A : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1668/   C9E1B :                     ;   0     1     2     3     4     5     6     7
(1) 1668/   C9E1B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1668/   C9E1B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1668/   C9E1B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1668/   C9E1B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1668/   C9E1B : =$80                vcTLMask1 set $80
(1) 1668/   C9E1B :                     
(1) 1668/   C9E1B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1668/   C9E1B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1668/   C9E1B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1668/   C9E1B : =$80                vcTLMask1 set $80
(1) 1668/   C9E1B : =$0                 vcTL1 set vcTL1&$7F
(1) 1668/   C9E1B : =$4F                vcTL2 set vcTL2&$7F
(1) 1668/   C9E1B : =$30                vcTL3 set vcTL3&$7F
(1) 1668/   C9E1B : =$3B                vcTL4 set vcTL4&$7F
(1) 1668/   C9E1B :                     
(1) 1668/   C9E1B : 3201 5231                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1668/   C9E1F : 1F1F 1F18                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1668/   C9E23 : 011F 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1668/   C9E27 : 000F 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1668/   C9E2B : 5A0F 031A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1668/   C9E2F : 3B30 4F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1669/   C9E33 :                     
(1) 1670/   C9E33 :                     ;	Voice $12
(1) 1671/   C9E33 :                     ;	$3C
(1) 1672/   C9E33 :                     ;	$42, $41, $32, $41, 	$12, $12, $12, $12, 	$00, $00, $00, $00
(1) 1673/   C9E33 :                     ;	$00, $00, $00, $00, 	$06, $08, $06, $08, 	$24, $08, $24, $08
(1) 1674/   C9E33 : (MACRO)             	smpsVcAlgorithm     $04
(1) 1674/   C9E33 : =$4                 vcAlgorithm set $04
(1) 1675/   C9E33 : (MACRO)             	smpsVcFeedback      $07
(1) 1675/   C9E33 : =$7                 vcFeedback set $07
(1) 1676/   C9E33 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1676/   C9E33 : =$0                 vcUnusedBits set $00
(1) 1676/   C9E33 : =$0                 vcD1R1Unk set 0
(1) 1676/   C9E33 : =$0                 vcD1R2Unk set 0
(1) 1676/   C9E33 : =$0                 vcD1R3Unk set 0
(1) 1676/   C9E33 : =$0                 vcD1R4Unk set 0
(1) 1677/   C9E33 : (MACRO)             	smpsVcDetune        $04, $03, $04, $04
(1) 1677/   C9E33 : =$4                 vcDT1 set $04
(1) 1677/   C9E33 : =$3                 vcDT2 set $03
(1) 1677/   C9E33 : =$4                 vcDT3 set $04
(1) 1677/   C9E33 : =$4                 vcDT4 set $04
(1) 1678/   C9E33 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $02
(1) 1678/   C9E33 : =$1                 vcCF1 set $01
(1) 1678/   C9E33 : =$2                 vcCF2 set $02
(1) 1678/   C9E33 : =$1                 vcCF3 set $01
(1) 1678/   C9E33 : =$2                 vcCF4 set $02
(1) 1679/   C9E33 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1679/   C9E33 : =$0                 vcRS1 set $00
(1) 1679/   C9E33 : =$0                 vcRS2 set $00
(1) 1679/   C9E33 : =$0                 vcRS3 set $00
(1) 1679/   C9E33 : =$0                 vcRS4 set $00
(1) 1680/   C9E33 : (MACRO)             	smpsVcAttackRate    $12, $12, $12, $12
(1) 1680/   C9E33 : =$12                vcAR1 set $12
(1) 1680/   C9E33 : =$12                vcAR2 set $12
(1) 1680/   C9E33 : =$12                vcAR3 set $12
(1) 1680/   C9E33 : =$12                vcAR4 set $12
(1) 1681/   C9E33 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1681/   C9E33 : =$0                 vcAM1 set $00<<5
(1) 1681/   C9E33 : =$0                 vcAM2 set $00<<5
(1) 1681/   C9E33 : =$0                 vcAM3 set $00<<5
(1) 1681/   C9E33 : =$0                 vcAM4 set $00<<5
(1) 1682/   C9E33 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1) 1682/   C9E33 : =$0                 vcD1R1 set $00
(1) 1682/   C9E33 : =$0                 vcD1R2 set $00
(1) 1682/   C9E33 : =$0                 vcD1R3 set $00
(1) 1682/   C9E33 : =$0                 vcD1R4 set $00
(1) 1683/   C9E33 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 1683/   C9E33 : =$0                 vcD2R1 set $00
(1) 1683/   C9E33 : =$0                 vcD2R2 set $00
(1) 1683/   C9E33 : =$0                 vcD2R3 set $00
(1) 1683/   C9E33 : =$0                 vcD2R4 set $00
(1) 1684/   C9E33 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1) 1684/   C9E33 : =$0                 vcDL1 set $00
(1) 1684/   C9E33 : =$0                 vcDL2 set $00
(1) 1684/   C9E33 : =$0                 vcDL3 set $00
(1) 1684/   C9E33 : =$0                 vcDL4 set $00
(1) 1685/   C9E33 : (MACRO)             	smpsVcReleaseRate   $08, $06, $08, $06
(1) 1685/   C9E33 : =$8                 vcRR1 set $08
(1) 1685/   C9E33 : =$6                 vcRR2 set $06
(1) 1685/   C9E33 : =$8                 vcRR3 set $08
(1) 1685/   C9E33 : =$6                 vcRR4 set $06
(1) 1686/   C9E33 : (MACRO)             	smpsVcTotalLevel    $08, $24, $08, $24
(1) 1686/   C9E33 : =$8                 vcTL1 set $08
(1) 1686/   C9E33 : =$24                vcTL2 set $24
(1) 1686/   C9E33 : =$8                 vcTL3 set $08
(1) 1686/   C9E33 : =$24                vcTL4 set $24
(1) 1686/   C9E33 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1686/   C9E34 :                     ;   0     1     2     3     4     5     6     7
(1) 1686/   C9E34 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1686/   C9E34 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1686/   C9E34 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1686/   C9E34 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1686/   C9E34 : =$80                vcTLMask1 set $80
(1) 1686/   C9E34 :                     
(1) 1686/   C9E34 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1686/   C9E34 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1686/   C9E34 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1686/   C9E34 : =$80                vcTLMask1 set $80
(1) 1686/   C9E34 : =$8                 vcTL1 set vcTL1&$7F
(1) 1686/   C9E34 : =$24                vcTL2 set vcTL2&$7F
(1) 1686/   C9E34 : =$8                 vcTL3 set vcTL3&$7F
(1) 1686/   C9E34 : =$24                vcTL4 set vcTL4&$7F
(1) 1686/   C9E34 :                     
(1) 1686/   C9E34 : 4241 3241                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1686/   C9E38 : 1212 1212                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1686/   C9E3C : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1686/   C9E40 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1686/   C9E44 : 0608 0608                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1686/   C9E48 : 2488 2488                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1687/   C9E4C :                     
(1) 1688/   C9E4C :                     ;	Voice $13
(1) 1689/   C9E4C :                     ;	$31
(1) 1690/   C9E4C :                     ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
(1) 1691/   C9E4C :                     ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
(1) 1692/   C9E4C : (MACRO)             	smpsVcAlgorithm     $01
(1) 1692/   C9E4C : =$1                 vcAlgorithm set $01
(1) 1693/   C9E4C : (MACRO)             	smpsVcFeedback      $06
(1) 1693/   C9E4C : =$6                 vcFeedback set $06
(1) 1694/   C9E4C : (MACRO)             	smpsVcUnusedBits    $00
(1) 1694/   C9E4C : =$0                 vcUnusedBits set $00
(1) 1694/   C9E4C : =$0                 vcD1R1Unk set 0
(1) 1694/   C9E4C : =$0                 vcD1R2Unk set 0
(1) 1694/   C9E4C : =$0                 vcD1R3Unk set 0
(1) 1694/   C9E4C : =$0                 vcD1R4Unk set 0
(1) 1695/   C9E4C : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1) 1695/   C9E4C : =$3                 vcDT1 set $03
(1) 1695/   C9E4C : =$3                 vcDT2 set $03
(1) 1695/   C9E4C : =$3                 vcDT3 set $03
(1) 1695/   C9E4C : =$3                 vcDT4 set $03
(1) 1696/   C9E4C : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $04
(1) 1696/   C9E4C : =$1                 vcCF1 set $01
(1) 1696/   C9E4C : =$0                 vcCF2 set $00
(1) 1696/   C9E4C : =$5                 vcCF3 set $05
(1) 1696/   C9E4C : =$4                 vcCF4 set $04
(1) 1697/   C9E4C : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1) 1697/   C9E4C : =$2                 vcRS1 set $02
(1) 1697/   C9E4C : =$2                 vcRS2 set $02
(1) 1697/   C9E4C : =$3                 vcRS3 set $03
(1) 1697/   C9E4C : =$3                 vcRS4 set $03
(1) 1698/   C9E4C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 1698/   C9E4C : =$1F                vcAR1 set $1F
(1) 1698/   C9E4C : =$1F                vcAR2 set $1F
(1) 1698/   C9E4C : =$1F                vcAR3 set $1F
(1) 1698/   C9E4C : =$1F                vcAR4 set $1F
(1) 1699/   C9E4C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1699/   C9E4C : =$0                 vcAM1 set $00<<5
(1) 1699/   C9E4C : =$0                 vcAM2 set $00<<5
(1) 1699/   C9E4C : =$0                 vcAM3 set $00<<5
(1) 1699/   C9E4C : =$0                 vcAM4 set $00<<5
(1) 1700/   C9E4C : (MACRO)             	smpsVcDecayRate1    $09, $0C, $07, $0C
(1) 1700/   C9E4C : =$9                 vcD1R1 set $09
(1) 1700/   C9E4C : =$C                 vcD1R2 set $0C
(1) 1700/   C9E4C : =$7                 vcD1R3 set $07
(1) 1700/   C9E4C : =$C                 vcD1R4 set $0C
(1) 1701/   C9E4C : (MACRO)             	smpsVcDecayRate2    $08, $07, $07, $07
(1) 1701/   C9E4C : =$8                 vcD2R1 set $08
(1) 1701/   C9E4C : =$7                 vcD2R2 set $07
(1) 1701/   C9E4C : =$7                 vcD2R3 set $07
(1) 1701/   C9E4C : =$7                 vcD2R4 set $07
(1) 1702/   C9E4C : (MACRO)             	smpsVcDecayLevel    $02, $01, $01, $02
(1) 1702/   C9E4C : =$2                 vcDL1 set $02
(1) 1702/   C9E4C : =$1                 vcDL2 set $01
(1) 1702/   C9E4C : =$1                 vcDL3 set $01
(1) 1702/   C9E4C : =$2                 vcDL4 set $02
(1) 1703/   C9E4C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1703/   C9E4C : =$F                 vcRR1 set $0F
(1) 1703/   C9E4C : =$F                 vcRR2 set $0F
(1) 1703/   C9E4C : =$F                 vcRR3 set $0F
(1) 1703/   C9E4C : =$F                 vcRR4 set $0F
(1) 1704/   C9E4C : (MACRO)             	smpsVcTotalLevel    $80, $14, $32, $17
(1) 1704/   C9E4C : =$80                vcTL1 set $80
(1) 1704/   C9E4C : =$14                vcTL2 set $14
(1) 1704/   C9E4C : =$32                vcTL3 set $32
(1) 1704/   C9E4C : =$17                vcTL4 set $17
(1) 1704/   C9E4C : 31                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1704/   C9E4D :                     ;   0     1     2     3     4     5     6     7
(1) 1704/   C9E4D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1704/   C9E4D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1704/   C9E4D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1704/   C9E4D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1704/   C9E4D : =$80                vcTLMask1 set $80
(1) 1704/   C9E4D :                     
(1) 1704/   C9E4D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1704/   C9E4D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1704/   C9E4D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1704/   C9E4D : =$80                vcTLMask1 set $80
(1) 1704/   C9E4D : =$0                 vcTL1 set vcTL1&$7F
(1) 1704/   C9E4D : =$14                vcTL2 set vcTL2&$7F
(1) 1704/   C9E4D : =$32                vcTL3 set vcTL3&$7F
(1) 1704/   C9E4D : =$17                vcTL4 set vcTL4&$7F
(1) 1704/   C9E4D :                     
(1) 1704/   C9E4D : 3435 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1704/   C9E51 : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1704/   C9E55 : 0C07 0C09                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1704/   C9E59 : 0707 0708                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1704/   C9E5D : 2F1F 1F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1704/   C9E61 : 1732 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1705/   C9E65 :                     
(1) 1706/   C9E65 :                     ;	Voice $14
(1) 1707/   C9E65 :                     ;	$3D
(1) 1708/   C9E65 :                     ;	$01, $01, $01, $01, 	$10, $50, $50, $50, 	$07, $08, $08, $08
(1) 1709/   C9E65 :                     ;	$01, $00, $00, $00, 	$20, $1A, $1A, $1A, 	$19, $84, $84, $84
(1) 1710/   C9E65 : (MACRO)             	smpsVcAlgorithm     $05
(1) 1710/   C9E65 : =$5                 vcAlgorithm set $05
(1) 1711/   C9E65 : (MACRO)             	smpsVcFeedback      $07
(1) 1711/   C9E65 : =$7                 vcFeedback set $07
(1) 1712/   C9E65 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1712/   C9E65 : =$0                 vcUnusedBits set $00
(1) 1712/   C9E65 : =$0                 vcD1R1Unk set 0
(1) 1712/   C9E65 : =$0                 vcD1R2Unk set 0
(1) 1712/   C9E65 : =$0                 vcD1R3Unk set 0
(1) 1712/   C9E65 : =$0                 vcD1R4Unk set 0
(1) 1713/   C9E65 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1713/   C9E65 : =$0                 vcDT1 set $00
(1) 1713/   C9E65 : =$0                 vcDT2 set $00
(1) 1713/   C9E65 : =$0                 vcDT3 set $00
(1) 1713/   C9E65 : =$0                 vcDT4 set $00
(1) 1714/   C9E65 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(1) 1714/   C9E65 : =$1                 vcCF1 set $01
(1) 1714/   C9E65 : =$1                 vcCF2 set $01
(1) 1714/   C9E65 : =$1                 vcCF3 set $01
(1) 1714/   C9E65 : =$1                 vcCF4 set $01
(1) 1715/   C9E65 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $00
(1) 1715/   C9E65 : =$1                 vcRS1 set $01
(1) 1715/   C9E65 : =$1                 vcRS2 set $01
(1) 1715/   C9E65 : =$1                 vcRS3 set $01
(1) 1715/   C9E65 : =$0                 vcRS4 set $00
(1) 1716/   C9E65 : (MACRO)             	smpsVcAttackRate    $10, $10, $10, $10
(1) 1716/   C9E65 : =$10                vcAR1 set $10
(1) 1716/   C9E65 : =$10                vcAR2 set $10
(1) 1716/   C9E65 : =$10                vcAR3 set $10
(1) 1716/   C9E65 : =$10                vcAR4 set $10
(1) 1717/   C9E65 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1717/   C9E65 : =$0                 vcAM1 set $00<<5
(1) 1717/   C9E65 : =$0                 vcAM2 set $00<<5
(1) 1717/   C9E65 : =$0                 vcAM3 set $00<<5
(1) 1717/   C9E65 : =$0                 vcAM4 set $00<<5
(1) 1718/   C9E65 : (MACRO)             	smpsVcDecayRate1    $08, $08, $08, $07
(1) 1718/   C9E65 : =$8                 vcD1R1 set $08
(1) 1718/   C9E65 : =$8                 vcD1R2 set $08
(1) 1718/   C9E65 : =$8                 vcD1R3 set $08
(1) 1718/   C9E65 : =$7                 vcD1R4 set $07
(1) 1719/   C9E65 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $01
(1) 1719/   C9E65 : =$0                 vcD2R1 set $00
(1) 1719/   C9E65 : =$0                 vcD2R2 set $00
(1) 1719/   C9E65 : =$0                 vcD2R3 set $00
(1) 1719/   C9E65 : =$1                 vcD2R4 set $01
(1) 1720/   C9E65 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $02
(1) 1720/   C9E65 : =$1                 vcDL1 set $01
(1) 1720/   C9E65 : =$1                 vcDL2 set $01
(1) 1720/   C9E65 : =$1                 vcDL3 set $01
(1) 1720/   C9E65 : =$2                 vcDL4 set $02
(1) 1721/   C9E65 : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $00
(1) 1721/   C9E65 : =$A                 vcRR1 set $0A
(1) 1721/   C9E65 : =$A                 vcRR2 set $0A
(1) 1721/   C9E65 : =$A                 vcRR3 set $0A
(1) 1721/   C9E65 : =$0                 vcRR4 set $00
(1) 1722/   C9E65 : (MACRO)             	smpsVcTotalLevel    $84, $84, $84, $19
(1) 1722/   C9E65 : =$84                vcTL1 set $84
(1) 1722/   C9E65 : =$84                vcTL2 set $84
(1) 1722/   C9E65 : =$84                vcTL3 set $84
(1) 1722/   C9E65 : =$19                vcTL4 set $19
(1) 1722/   C9E65 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1722/   C9E66 :                     ;   0     1     2     3     4     5     6     7
(1) 1722/   C9E66 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1722/   C9E66 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1722/   C9E66 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1722/   C9E66 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1722/   C9E66 : =$80                vcTLMask1 set $80
(1) 1722/   C9E66 :                     
(1) 1722/   C9E66 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1722/   C9E66 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1722/   C9E66 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1722/   C9E66 : =$80                vcTLMask1 set $80
(1) 1722/   C9E66 : =$4                 vcTL1 set vcTL1&$7F
(1) 1722/   C9E66 : =$4                 vcTL2 set vcTL2&$7F
(1) 1722/   C9E66 : =$4                 vcTL3 set vcTL3&$7F
(1) 1722/   C9E66 : =$19                vcTL4 set vcTL4&$7F
(1) 1722/   C9E66 :                     
(1) 1722/   C9E66 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1722/   C9E6A : 1050 5050                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1722/   C9E6E : 0708 0808                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1722/   C9E72 : 0100 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1722/   C9E76 : 201A 1A1A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1722/   C9E7A : 1984 8484                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1723/   C9E7E :                     
(1) 1724/   C9E7E :                     ;	Voice $15
(1) 1725/   C9E7E :                     ;	$24
(1) 1726/   C9E7E :                     ;	$70, $74, $30, $38, 	$12, $1F, $1F, $1F, 	$05, $03, $05, $03
(1) 1727/   C9E7E :                     ;	$05, $03, $05, $03, 	$36, $2C, $26, $2C, 	$0A, $08, $06, $08
(1) 1728/   C9E7E : (MACRO)             	smpsVcAlgorithm     $04
(1) 1728/   C9E7E : =$4                 vcAlgorithm set $04
(1) 1729/   C9E7E : (MACRO)             	smpsVcFeedback      $04
(1) 1729/   C9E7E : =$4                 vcFeedback set $04
(1) 1730/   C9E7E : (MACRO)             	smpsVcUnusedBits    $00
(1) 1730/   C9E7E : =$0                 vcUnusedBits set $00
(1) 1730/   C9E7E : =$0                 vcD1R1Unk set 0
(1) 1730/   C9E7E : =$0                 vcD1R2Unk set 0
(1) 1730/   C9E7E : =$0                 vcD1R3Unk set 0
(1) 1730/   C9E7E : =$0                 vcD1R4Unk set 0
(1) 1731/   C9E7E : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(1) 1731/   C9E7E : =$3                 vcDT1 set $03
(1) 1731/   C9E7E : =$3                 vcDT2 set $03
(1) 1731/   C9E7E : =$7                 vcDT3 set $07
(1) 1731/   C9E7E : =$7                 vcDT4 set $07
(1) 1732/   C9E7E : (MACRO)             	smpsVcCoarseFreq    $08, $00, $04, $00
(1) 1732/   C9E7E : =$8                 vcCF1 set $08
(1) 1732/   C9E7E : =$0                 vcCF2 set $00
(1) 1732/   C9E7E : =$4                 vcCF3 set $04
(1) 1732/   C9E7E : =$0                 vcCF4 set $00
(1) 1733/   C9E7E : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1733/   C9E7E : =$0                 vcRS1 set $00
(1) 1733/   C9E7E : =$0                 vcRS2 set $00
(1) 1733/   C9E7E : =$0                 vcRS3 set $00
(1) 1733/   C9E7E : =$0                 vcRS4 set $00
(1) 1734/   C9E7E : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $12
(1) 1734/   C9E7E : =$1F                vcAR1 set $1F
(1) 1734/   C9E7E : =$1F                vcAR2 set $1F
(1) 1734/   C9E7E : =$1F                vcAR3 set $1F
(1) 1734/   C9E7E : =$12                vcAR4 set $12
(1) 1735/   C9E7E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1735/   C9E7E : =$0                 vcAM1 set $00<<5
(1) 1735/   C9E7E : =$0                 vcAM2 set $00<<5
(1) 1735/   C9E7E : =$0                 vcAM3 set $00<<5
(1) 1735/   C9E7E : =$0                 vcAM4 set $00<<5
(1) 1736/   C9E7E : (MACRO)             	smpsVcDecayRate1    $03, $05, $03, $05
(1) 1736/   C9E7E : =$3                 vcD1R1 set $03
(1) 1736/   C9E7E : =$5                 vcD1R2 set $05
(1) 1736/   C9E7E : =$3                 vcD1R3 set $03
(1) 1736/   C9E7E : =$5                 vcD1R4 set $05
(1) 1737/   C9E7E : (MACRO)             	smpsVcDecayRate2    $03, $05, $03, $05
(1) 1737/   C9E7E : =$3                 vcD2R1 set $03
(1) 1737/   C9E7E : =$5                 vcD2R2 set $05
(1) 1737/   C9E7E : =$3                 vcD2R3 set $03
(1) 1737/   C9E7E : =$5                 vcD2R4 set $05
(1) 1738/   C9E7E : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $03
(1) 1738/   C9E7E : =$2                 vcDL1 set $02
(1) 1738/   C9E7E : =$2                 vcDL2 set $02
(1) 1738/   C9E7E : =$2                 vcDL3 set $02
(1) 1738/   C9E7E : =$3                 vcDL4 set $03
(1) 1739/   C9E7E : (MACRO)             	smpsVcReleaseRate   $0C, $06, $0C, $06
(1) 1739/   C9E7E : =$C                 vcRR1 set $0C
(1) 1739/   C9E7E : =$6                 vcRR2 set $06
(1) 1739/   C9E7E : =$C                 vcRR3 set $0C
(1) 1739/   C9E7E : =$6                 vcRR4 set $06
(1) 1740/   C9E7E : (MACRO)             	smpsVcTotalLevel    $08, $06, $08, $0A
(1) 1740/   C9E7E : =$8                 vcTL1 set $08
(1) 1740/   C9E7E : =$6                 vcTL2 set $06
(1) 1740/   C9E7E : =$8                 vcTL3 set $08
(1) 1740/   C9E7E : =$A                 vcTL4 set $0A
(1) 1740/   C9E7E : 24                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1740/   C9E7F :                     ;   0     1     2     3     4     5     6     7
(1) 1740/   C9E7F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1740/   C9E7F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1740/   C9E7F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1740/   C9E7F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1740/   C9E7F : =$80                vcTLMask1 set $80
(1) 1740/   C9E7F :                     
(1) 1740/   C9E7F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1740/   C9E7F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1740/   C9E7F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1740/   C9E7F : =$80                vcTLMask1 set $80
(1) 1740/   C9E7F : =$8                 vcTL1 set vcTL1&$7F
(1) 1740/   C9E7F : =$6                 vcTL2 set vcTL2&$7F
(1) 1740/   C9E7F : =$8                 vcTL3 set vcTL3&$7F
(1) 1740/   C9E7F : =$A                 vcTL4 set vcTL4&$7F
(1) 1740/   C9E7F :                     
(1) 1740/   C9E7F : 7074 3038                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1740/   C9E83 : 121F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1740/   C9E87 : 0503 0503                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1740/   C9E8B : 0503 0503                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1740/   C9E8F : 362C 262C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1740/   C9E93 : 0A88 0688                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1741/   C9E97 :                     
(1) 1742/   C9E97 :                     ;	Voice $16
(1) 1743/   C9E97 :                     ;	$3A
(1) 1744/   C9E97 :                     ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
(1) 1745/   C9E97 :                     ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
(1) 1746/   C9E97 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1746/   C9E97 : =$2                 vcAlgorithm set $02
(1) 1747/   C9E97 : (MACRO)             	smpsVcFeedback      $07
(1) 1747/   C9E97 : =$7                 vcFeedback set $07
(1) 1748/   C9E97 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1748/   C9E97 : =$0                 vcUnusedBits set $00
(1) 1748/   C9E97 : =$0                 vcD1R1Unk set 0
(1) 1748/   C9E97 : =$0                 vcD1R2Unk set 0
(1) 1748/   C9E97 : =$0                 vcD1R3Unk set 0
(1) 1748/   C9E97 : =$0                 vcD1R4Unk set 0
(1) 1749/   C9E97 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1749/   C9E97 : =$0                 vcDT1 set $00
(1) 1749/   C9E97 : =$0                 vcDT2 set $00
(1) 1749/   C9E97 : =$0                 vcDT3 set $00
(1) 1749/   C9E97 : =$0                 vcDT4 set $00
(1) 1750/   C9E97 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $01, $01
(1) 1750/   C9E97 : =$2                 vcCF1 set $02
(1) 1750/   C9E97 : =$1                 vcCF2 set $01
(1) 1750/   C9E97 : =$1                 vcCF3 set $01
(1) 1750/   C9E97 : =$1                 vcCF4 set $01
(1) 1751/   C9E97 : (MACRO)             	smpsVcRateScale     $01, $00, $00, $02
(1) 1751/   C9E97 : =$1                 vcRS1 set $01
(1) 1751/   C9E97 : =$0                 vcRS2 set $00
(1) 1751/   C9E97 : =$0                 vcRS3 set $00
(1) 1751/   C9E97 : =$2                 vcRS4 set $02
(1) 1752/   C9E97 : (MACRO)             	smpsVcAttackRate    $12, $07, $07, $0D
(1) 1752/   C9E97 : =$12                vcAR1 set $12
(1) 1752/   C9E97 : =$7                 vcAR2 set $07
(1) 1752/   C9E97 : =$7                 vcAR3 set $07
(1) 1752/   C9E97 : =$D                 vcAR4 set $0D
(1) 1753/   C9E97 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1753/   C9E97 : =$0                 vcAM1 set $00<<5
(1) 1753/   C9E97 : =$0                 vcAM2 set $00<<5
(1) 1753/   C9E97 : =$0                 vcAM3 set $00<<5
(1) 1753/   C9E97 : =$0                 vcAM4 set $00<<5
(1) 1754/   C9E97 : (MACRO)             	smpsVcDecayRate1    $03, $00, $00, $09
(1) 1754/   C9E97 : =$3                 vcD1R1 set $03
(1) 1754/   C9E97 : =$0                 vcD1R2 set $00
(1) 1754/   C9E97 : =$0                 vcD1R3 set $00
(1) 1754/   C9E97 : =$9                 vcD1R4 set $09
(1) 1755/   C9E97 : (MACRO)             	smpsVcDecayRate2    $00, $02, $02, $01
(1) 1755/   C9E97 : =$0                 vcD2R1 set $00
(1) 1755/   C9E97 : =$2                 vcD2R2 set $02
(1) 1755/   C9E97 : =$2                 vcD2R3 set $02
(1) 1755/   C9E97 : =$1                 vcD2R4 set $01
(1) 1756/   C9E97 : (MACRO)             	smpsVcDecayLevel    $02, $00, $00, $05
(1) 1756/   C9E97 : =$2                 vcDL1 set $02
(1) 1756/   C9E97 : =$0                 vcDL2 set $00
(1) 1756/   C9E97 : =$0                 vcDL3 set $00
(1) 1756/   C9E97 : =$5                 vcDL4 set $05
(1) 1757/   C9E97 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1757/   C9E97 : =$F                 vcRR1 set $0F
(1) 1757/   C9E97 : =$F                 vcRR2 set $0F
(1) 1757/   C9E97 : =$F                 vcRR3 set $0F
(1) 1757/   C9E97 : =$F                 vcRR4 set $0F
(1) 1758/   C9E97 : (MACRO)             	smpsVcTotalLevel    $80, $18, $22, $18
(1) 1758/   C9E97 : =$80                vcTL1 set $80
(1) 1758/   C9E97 : =$18                vcTL2 set $18
(1) 1758/   C9E97 : =$22                vcTL3 set $22
(1) 1758/   C9E97 : =$18                vcTL4 set $18
(1) 1758/   C9E97 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1758/   C9E98 :                     ;   0     1     2     3     4     5     6     7
(1) 1758/   C9E98 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1758/   C9E98 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1758/   C9E98 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1758/   C9E98 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1758/   C9E98 : =$80                vcTLMask1 set $80
(1) 1758/   C9E98 :                     
(1) 1758/   C9E98 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1758/   C9E98 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1758/   C9E98 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1758/   C9E98 : =$80                vcTLMask1 set $80
(1) 1758/   C9E98 : =$0                 vcTL1 set vcTL1&$7F
(1) 1758/   C9E98 : =$18                vcTL2 set vcTL2&$7F
(1) 1758/   C9E98 : =$22                vcTL3 set vcTL3&$7F
(1) 1758/   C9E98 : =$18                vcTL4 set vcTL4&$7F
(1) 1758/   C9E98 :                     
(1) 1758/   C9E98 : 0101 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1758/   C9E9C : 8D07 0752                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1758/   C9EA0 : 0900 0003                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1758/   C9EA4 : 0102 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1758/   C9EA8 : 5F0F 0F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1758/   C9EAC : 1822 1880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1759/   C9EB0 :                     
(1) 1760/   C9EB0 :                     ;	Voice $17
(1) 1761/   C9EB0 :                     ;	$3A
(1) 1762/   C9EB0 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1) 1763/   C9EB0 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $4E, $16, $80
(1) 1764/   C9EB0 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1764/   C9EB0 : =$2                 vcAlgorithm set $02
(1) 1765/   C9EB0 : (MACRO)             	smpsVcFeedback      $07
(1) 1765/   C9EB0 : =$7                 vcFeedback set $07
(1) 1766/   C9EB0 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1766/   C9EB0 : =$0                 vcUnusedBits set $00
(1) 1766/   C9EB0 : =$0                 vcD1R1Unk set 0
(1) 1766/   C9EB0 : =$0                 vcD1R2Unk set 0
(1) 1766/   C9EB0 : =$0                 vcD1R3Unk set 0
(1) 1766/   C9EB0 : =$0                 vcD1R4Unk set 0
(1) 1767/   C9EB0 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1767/   C9EB0 : =$0                 vcDT1 set $00
(1) 1767/   C9EB0 : =$0                 vcDT2 set $00
(1) 1767/   C9EB0 : =$0                 vcDT3 set $00
(1) 1767/   C9EB0 : =$0                 vcDT4 set $00
(1) 1768/   C9EB0 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1) 1768/   C9EB0 : =$1                 vcCF1 set $01
(1) 1768/   C9EB0 : =$1                 vcCF2 set $01
(1) 1768/   C9EB0 : =$7                 vcCF3 set $07
(1) 1768/   C9EB0 : =$1                 vcCF4 set $01
(1) 1769/   C9EB0 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1) 1769/   C9EB0 : =$1                 vcRS1 set $01
(1) 1769/   C9EB0 : =$2                 vcRS2 set $02
(1) 1769/   C9EB0 : =$2                 vcRS3 set $02
(1) 1769/   C9EB0 : =$2                 vcRS4 set $02
(1) 1770/   C9EB0 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1) 1770/   C9EB0 : =$13                vcAR1 set $13
(1) 1770/   C9EB0 : =$D                 vcAR2 set $0D
(1) 1770/   C9EB0 : =$E                 vcAR3 set $0E
(1) 1770/   C9EB0 : =$E                 vcAR4 set $0E
(1) 1771/   C9EB0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1771/   C9EB0 : =$0                 vcAM1 set $00<<5
(1) 1771/   C9EB0 : =$0                 vcAM2 set $00<<5
(1) 1771/   C9EB0 : =$0                 vcAM3 set $00<<5
(1) 1771/   C9EB0 : =$0                 vcAM4 set $00<<5
(1) 1772/   C9EB0 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1) 1772/   C9EB0 : =$3                 vcD1R1 set $03
(1) 1772/   C9EB0 : =$E                 vcD1R2 set $0E
(1) 1772/   C9EB0 : =$E                 vcD1R3 set $0E
(1) 1772/   C9EB0 : =$E                 vcD1R4 set $0E
(1) 1773/   C9EB0 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 1773/   C9EB0 : =$0                 vcD2R1 set $00
(1) 1773/   C9EB0 : =$0                 vcD2R2 set $00
(1) 1773/   C9EB0 : =$0                 vcD2R3 set $00
(1) 1773/   C9EB0 : =$0                 vcD2R4 set $00
(1) 1774/   C9EB0 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1) 1774/   C9EB0 : =$0                 vcDL1 set $00
(1) 1774/   C9EB0 : =$1                 vcDL2 set $01
(1) 1774/   C9EB0 : =$F                 vcDL3 set $0F
(1) 1774/   C9EB0 : =$1                 vcDL4 set $01
(1) 1775/   C9EB0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1775/   C9EB0 : =$F                 vcRR1 set $0F
(1) 1775/   C9EB0 : =$F                 vcRR2 set $0F
(1) 1775/   C9EB0 : =$F                 vcRR3 set $0F
(1) 1775/   C9EB0 : =$F                 vcRR4 set $0F
(1) 1776/   C9EB0 : (MACRO)             	smpsVcTotalLevel    $80, $16, $4E, $18
(1) 1776/   C9EB0 : =$80                vcTL1 set $80
(1) 1776/   C9EB0 : =$16                vcTL2 set $16
(1) 1776/   C9EB0 : =$4E                vcTL3 set $4E
(1) 1776/   C9EB0 : =$18                vcTL4 set $18
(1) 1776/   C9EB0 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1776/   C9EB1 :                     ;   0     1     2     3     4     5     6     7
(1) 1776/   C9EB1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1776/   C9EB1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1776/   C9EB1 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1776/   C9EB1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1776/   C9EB1 : =$80                vcTLMask1 set $80
(1) 1776/   C9EB1 :                     
(1) 1776/   C9EB1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1776/   C9EB1 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1776/   C9EB1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1776/   C9EB1 : =$80                vcTLMask1 set $80
(1) 1776/   C9EB1 : =$0                 vcTL1 set vcTL1&$7F
(1) 1776/   C9EB1 : =$16                vcTL2 set vcTL2&$7F
(1) 1776/   C9EB1 : =$4E                vcTL3 set vcTL3&$7F
(1) 1776/   C9EB1 : =$18                vcTL4 set vcTL4&$7F
(1) 1776/   C9EB1 :                     
(1) 1776/   C9EB1 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1776/   C9EB5 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1776/   C9EB9 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1776/   C9EBD : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1776/   C9EC1 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1776/   C9EC5 : 184E 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1777/   C9EC9 :                     
(1) 1778/   C9EC9 :                     ;	Voice $18
(1) 1779/   C9EC9 :                     ;	$3A
(1) 1780/   C9EC9 :                     ;	$03, $08, $03, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1) 1781/   C9EC9 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $20, $80
(1) 1782/   C9EC9 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1782/   C9EC9 : =$2                 vcAlgorithm set $02
(1) 1783/   C9EC9 : (MACRO)             	smpsVcFeedback      $07
(1) 1783/   C9EC9 : =$7                 vcFeedback set $07
(1) 1784/   C9EC9 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1784/   C9EC9 : =$0                 vcUnusedBits set $00
(1) 1784/   C9EC9 : =$0                 vcD1R1Unk set 0
(1) 1784/   C9EC9 : =$0                 vcD1R2Unk set 0
(1) 1784/   C9EC9 : =$0                 vcD1R3Unk set 0
(1) 1784/   C9EC9 : =$0                 vcD1R4Unk set 0
(1) 1785/   C9EC9 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 1785/   C9EC9 : =$0                 vcDT1 set $00
(1) 1785/   C9EC9 : =$0                 vcDT2 set $00
(1) 1785/   C9EC9 : =$0                 vcDT3 set $00
(1) 1785/   C9EC9 : =$0                 vcDT4 set $00
(1) 1786/   C9EC9 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $08, $03
(1) 1786/   C9EC9 : =$1                 vcCF1 set $01
(1) 1786/   C9EC9 : =$3                 vcCF2 set $03
(1) 1786/   C9EC9 : =$8                 vcCF3 set $08
(1) 1786/   C9EC9 : =$3                 vcCF4 set $03
(1) 1787/   C9EC9 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1) 1787/   C9EC9 : =$1                 vcRS1 set $01
(1) 1787/   C9EC9 : =$2                 vcRS2 set $02
(1) 1787/   C9EC9 : =$2                 vcRS3 set $02
(1) 1787/   C9EC9 : =$2                 vcRS4 set $02
(1) 1788/   C9EC9 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1) 1788/   C9EC9 : =$13                vcAR1 set $13
(1) 1788/   C9EC9 : =$D                 vcAR2 set $0D
(1) 1788/   C9EC9 : =$E                 vcAR3 set $0E
(1) 1788/   C9EC9 : =$E                 vcAR4 set $0E
(1) 1789/   C9EC9 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1789/   C9EC9 : =$0                 vcAM1 set $00<<5
(1) 1789/   C9EC9 : =$0                 vcAM2 set $00<<5
(1) 1789/   C9EC9 : =$0                 vcAM3 set $00<<5
(1) 1789/   C9EC9 : =$0                 vcAM4 set $00<<5
(1) 1790/   C9EC9 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1) 1790/   C9EC9 : =$3                 vcD1R1 set $03
(1) 1790/   C9EC9 : =$E                 vcD1R2 set $0E
(1) 1790/   C9EC9 : =$E                 vcD1R3 set $0E
(1) 1790/   C9EC9 : =$E                 vcD1R4 set $0E
(1) 1791/   C9EC9 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 1791/   C9EC9 : =$0                 vcD2R1 set $00
(1) 1791/   C9EC9 : =$0                 vcD2R2 set $00
(1) 1791/   C9EC9 : =$0                 vcD2R3 set $00
(1) 1791/   C9EC9 : =$0                 vcD2R4 set $00
(1) 1792/   C9EC9 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1) 1792/   C9EC9 : =$0                 vcDL1 set $00
(1) 1792/   C9EC9 : =$1                 vcDL2 set $01
(1) 1792/   C9EC9 : =$F                 vcDL3 set $0F
(1) 1792/   C9EC9 : =$1                 vcDL4 set $01
(1) 1793/   C9EC9 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1793/   C9EC9 : =$F                 vcRR1 set $0F
(1) 1793/   C9EC9 : =$F                 vcRR2 set $0F
(1) 1793/   C9EC9 : =$F                 vcRR3 set $0F
(1) 1793/   C9EC9 : =$F                 vcRR4 set $0F
(1) 1794/   C9EC9 : (MACRO)             	smpsVcTotalLevel    $80, $20, $28, $17
(1) 1794/   C9EC9 : =$80                vcTL1 set $80
(1) 1794/   C9EC9 : =$20                vcTL2 set $20
(1) 1794/   C9EC9 : =$28                vcTL3 set $28
(1) 1794/   C9EC9 : =$17                vcTL4 set $17
(1) 1794/   C9EC9 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1794/   C9ECA :                     ;   0     1     2     3     4     5     6     7
(1) 1794/   C9ECA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1794/   C9ECA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1794/   C9ECA : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1794/   C9ECA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1794/   C9ECA : =$80                vcTLMask1 set $80
(1) 1794/   C9ECA :                     
(1) 1794/   C9ECA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1794/   C9ECA : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1794/   C9ECA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1794/   C9ECA : =$80                vcTLMask1 set $80
(1) 1794/   C9ECA : =$0                 vcTL1 set vcTL1&$7F
(1) 1794/   C9ECA : =$20                vcTL2 set vcTL2&$7F
(1) 1794/   C9ECA : =$28                vcTL3 set vcTL3&$7F
(1) 1794/   C9ECA : =$17                vcTL4 set vcTL4&$7F
(1) 1794/   C9ECA :                     
(1) 1794/   C9ECA : 0308 0301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1794/   C9ECE : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1794/   C9ED2 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1794/   C9ED6 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1794/   C9EDA : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1794/   C9EDE : 1728 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1795/   C9EE2 :                     
(1) 1796/   C9EE2 :                     ;	Voice $19
(1) 1797/   C9EE2 :                     ;	$20
(1) 1798/   C9EE2 :                     ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
(1) 1799/   C9EE2 :                     ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
(1) 1800/   C9EE2 : (MACRO)             	smpsVcAlgorithm     $00
(1) 1800/   C9EE2 : =$0                 vcAlgorithm set $00
(1) 1801/   C9EE2 : (MACRO)             	smpsVcFeedback      $04
(1) 1801/   C9EE2 : =$4                 vcFeedback set $04
(1) 1802/   C9EE2 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1802/   C9EE2 : =$0                 vcUnusedBits set $00
(1) 1802/   C9EE2 : =$0                 vcD1R1Unk set 0
(1) 1802/   C9EE2 : =$0                 vcD1R2Unk set 0
(1) 1802/   C9EE2 : =$0                 vcD1R3Unk set 0
(1) 1802/   C9EE2 : =$0                 vcD1R4Unk set 0
(1) 1803/   C9EE2 : (MACRO)             	smpsVcDetune        $00, $00, $03, $07
(1) 1803/   C9EE2 : =$0                 vcDT1 set $00
(1) 1803/   C9EE2 : =$0                 vcDT2 set $00
(1) 1803/   C9EE2 : =$3                 vcDT3 set $03
(1) 1803/   C9EE2 : =$7                 vcDT4 set $07
(1) 1804/   C9EE2 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $01, $0A
(1) 1804/   C9EE2 : =$0                 vcCF1 set $00
(1) 1804/   C9EE2 : =$0                 vcCF2 set $00
(1) 1804/   C9EE2 : =$1                 vcCF3 set $01
(1) 1804/   C9EE2 : =$A                 vcCF4 set $0A
(1) 1805/   C9EE2 : (MACRO)             	smpsVcRateScale     $03, $03, $03, $02
(1) 1805/   C9EE2 : =$3                 vcRS1 set $03
(1) 1805/   C9EE2 : =$3                 vcRS2 set $03
(1) 1805/   C9EE2 : =$3                 vcRS3 set $03
(1) 1805/   C9EE2 : =$2                 vcRS4 set $02
(1) 1806/   C9EE2 : (MACRO)             	smpsVcAttackRate    $1F, $1C, $18, $1F
(1) 1806/   C9EE2 : =$1F                vcAR1 set $1F
(1) 1806/   C9EE2 : =$1C                vcAR2 set $1C
(1) 1806/   C9EE2 : =$18                vcAR3 set $18
(1) 1806/   C9EE2 : =$1F                vcAR4 set $1F
(1) 1807/   C9EE2 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1807/   C9EE2 : =$0                 vcAM1 set $00<<5
(1) 1807/   C9EE2 : =$0                 vcAM2 set $00<<5
(1) 1807/   C9EE2 : =$0                 vcAM3 set $00<<5
(1) 1807/   C9EE2 : =$0                 vcAM4 set $00<<5
(1) 1808/   C9EE2 : (MACRO)             	smpsVcDecayRate1    $04, $04, $0A, $10
(1) 1808/   C9EE2 : =$4                 vcD1R1 set $04
(1) 1808/   C9EE2 : =$4                 vcD1R2 set $04
(1) 1808/   C9EE2 : =$A                 vcD1R3 set $0A
(1) 1808/   C9EE2 : =$10                vcD1R4 set $10
(1) 1809/   C9EE2 : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $0F
(1) 1809/   C9EE2 : =$8                 vcD2R1 set $08
(1) 1809/   C9EE2 : =$8                 vcD2R2 set $08
(1) 1809/   C9EE2 : =$8                 vcD2R3 set $08
(1) 1809/   C9EE2 : =$F                 vcD2R4 set $0F
(1) 1810/   C9EE2 : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $05, $05
(1) 1810/   C9EE2 : =$B                 vcDL1 set $0B
(1) 1810/   C9EE2 : =$B                 vcDL2 set $0B
(1) 1810/   C9EE2 : =$5                 vcDL3 set $05
(1) 1810/   C9EE2 : =$5                 vcDL4 set $05
(1) 1811/   C9EE2 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1811/   C9EE2 : =$F                 vcRR1 set $0F
(1) 1811/   C9EE2 : =$F                 vcRR2 set $0F
(1) 1811/   C9EE2 : =$F                 vcRR3 set $0F
(1) 1811/   C9EE2 : =$F                 vcRR4 set $0F
(1) 1812/   C9EE2 : (MACRO)             	smpsVcTotalLevel    $80, $17, $2B, $14
(1) 1812/   C9EE2 : =$80                vcTL1 set $80
(1) 1812/   C9EE2 : =$17                vcTL2 set $17
(1) 1812/   C9EE2 : =$2B                vcTL3 set $2B
(1) 1812/   C9EE2 : =$14                vcTL4 set $14
(1) 1812/   C9EE2 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1812/   C9EE3 :                     ;   0     1     2     3     4     5     6     7
(1) 1812/   C9EE3 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1812/   C9EE3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1812/   C9EE3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1812/   C9EE3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1812/   C9EE3 : =$80                vcTLMask1 set $80
(1) 1812/   C9EE3 :                     
(1) 1812/   C9EE3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1812/   C9EE3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1812/   C9EE3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1812/   C9EE3 : =$80                vcTLMask1 set $80
(1) 1812/   C9EE3 : =$0                 vcTL1 set vcTL1&$7F
(1) 1812/   C9EE3 : =$17                vcTL2 set vcTL2&$7F
(1) 1812/   C9EE3 : =$2B                vcTL3 set vcTL3&$7F
(1) 1812/   C9EE3 : =$14                vcTL4 set vcTL4&$7F
(1) 1812/   C9EE3 :                     
(1) 1812/   C9EE3 : 7A31 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1812/   C9EE7 : 9FD8 DCDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1812/   C9EEB : 100A 0404                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1812/   C9EEF : 0F08 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1812/   C9EF3 : 5F5F BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1812/   C9EF7 : 142B 1780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1813/   C9EFB :                     
(1) 1814/   C9EFB :                     ;	Voice $1A
(1) 1815/   C9EFB :                     ;	$3A
(1) 1816/   C9EFB :                     ;	$61, $08, $51, $02, 	$5D, $5D, $5D, $50, 	$04, $0F, $1F, $1F
(1) 1817/   C9EFB :                     ;	$00, $00, $00, $00, 	$1F, $5F, $0F, $0F, 	$22, $1E, $22, $80
(1) 1818/   C9EFB : (MACRO)             	smpsVcAlgorithm     $02
(1) 1818/   C9EFB : =$2                 vcAlgorithm set $02
(1) 1819/   C9EFB : (MACRO)             	smpsVcFeedback      $07
(1) 1819/   C9EFB : =$7                 vcFeedback set $07
(1) 1820/   C9EFB : (MACRO)             	smpsVcUnusedBits    $00
(1) 1820/   C9EFB : =$0                 vcUnusedBits set $00
(1) 1820/   C9EFB : =$0                 vcD1R1Unk set 0
(1) 1820/   C9EFB : =$0                 vcD1R2Unk set 0
(1) 1820/   C9EFB : =$0                 vcD1R3Unk set 0
(1) 1820/   C9EFB : =$0                 vcD1R4Unk set 0
(1) 1821/   C9EFB : (MACRO)             	smpsVcDetune        $00, $05, $00, $06
(1) 1821/   C9EFB : =$0                 vcDT1 set $00
(1) 1821/   C9EFB : =$5                 vcDT2 set $05
(1) 1821/   C9EFB : =$0                 vcDT3 set $00
(1) 1821/   C9EFB : =$6                 vcDT4 set $06
(1) 1822/   C9EFB : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $01
(1) 1822/   C9EFB : =$2                 vcCF1 set $02
(1) 1822/   C9EFB : =$1                 vcCF2 set $01
(1) 1822/   C9EFB : =$8                 vcCF3 set $08
(1) 1822/   C9EFB : =$1                 vcCF4 set $01
(1) 1823/   C9EFB : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1) 1823/   C9EFB : =$1                 vcRS1 set $01
(1) 1823/   C9EFB : =$1                 vcRS2 set $01
(1) 1823/   C9EFB : =$1                 vcRS3 set $01
(1) 1823/   C9EFB : =$1                 vcRS4 set $01
(1) 1824/   C9EFB : (MACRO)             	smpsVcAttackRate    $10, $1D, $1D, $1D
(1) 1824/   C9EFB : =$10                vcAR1 set $10
(1) 1824/   C9EFB : =$1D                vcAR2 set $1D
(1) 1824/   C9EFB : =$1D                vcAR3 set $1D
(1) 1824/   C9EFB : =$1D                vcAR4 set $1D
(1) 1825/   C9EFB : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1825/   C9EFB : =$0                 vcAM1 set $00<<5
(1) 1825/   C9EFB : =$0                 vcAM2 set $00<<5
(1) 1825/   C9EFB : =$0                 vcAM3 set $00<<5
(1) 1825/   C9EFB : =$0                 vcAM4 set $00<<5
(1) 1826/   C9EFB : (MACRO)             	smpsVcDecayRate1    $1F, $1F, $0F, $04
(1) 1826/   C9EFB : =$1F                vcD1R1 set $1F
(1) 1826/   C9EFB : =$1F                vcD1R2 set $1F
(1) 1826/   C9EFB : =$F                 vcD1R3 set $0F
(1) 1826/   C9EFB : =$4                 vcD1R4 set $04
(1) 1827/   C9EFB : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 1827/   C9EFB : =$0                 vcD2R1 set $00
(1) 1827/   C9EFB : =$0                 vcD2R2 set $00
(1) 1827/   C9EFB : =$0                 vcD2R3 set $00
(1) 1827/   C9EFB : =$0                 vcD2R4 set $00
(1) 1828/   C9EFB : (MACRO)             	smpsVcDecayLevel    $00, $00, $05, $01
(1) 1828/   C9EFB : =$0                 vcDL1 set $00
(1) 1828/   C9EFB : =$0                 vcDL2 set $00
(1) 1828/   C9EFB : =$5                 vcDL3 set $05
(1) 1828/   C9EFB : =$1                 vcDL4 set $01
(1) 1829/   C9EFB : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1829/   C9EFB : =$F                 vcRR1 set $0F
(1) 1829/   C9EFB : =$F                 vcRR2 set $0F
(1) 1829/   C9EFB : =$F                 vcRR3 set $0F
(1) 1829/   C9EFB : =$F                 vcRR4 set $0F
(1) 1830/   C9EFB : (MACRO)             	smpsVcTotalLevel    $80, $22, $1E, $22
(1) 1830/   C9EFB : =$80                vcTL1 set $80
(1) 1830/   C9EFB : =$22                vcTL2 set $22
(1) 1830/   C9EFB : =$1E                vcTL3 set $1E
(1) 1830/   C9EFB : =$22                vcTL4 set $22
(1) 1830/   C9EFB : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1830/   C9EFC :                     ;   0     1     2     3     4     5     6     7
(1) 1830/   C9EFC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1830/   C9EFC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1830/   C9EFC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1830/   C9EFC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1830/   C9EFC : =$80                vcTLMask1 set $80
(1) 1830/   C9EFC :                     
(1) 1830/   C9EFC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1830/   C9EFC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1830/   C9EFC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1830/   C9EFC : =$80                vcTLMask1 set $80
(1) 1830/   C9EFC : =$0                 vcTL1 set vcTL1&$7F
(1) 1830/   C9EFC : =$22                vcTL2 set vcTL2&$7F
(1) 1830/   C9EFC : =$1E                vcTL3 set vcTL3&$7F
(1) 1830/   C9EFC : =$22                vcTL4 set vcTL4&$7F
(1) 1830/   C9EFC :                     
(1) 1830/   C9EFC : 6108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1830/   C9F00 : 5D5D 5D50                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1830/   C9F04 : 040F 1F1F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1830/   C9F08 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1830/   C9F0C : 1F5F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1830/   C9F10 : 221E 2280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1831/   C9F14 :                     
(1) 1832/   C9F14 :                     ;	Voice $1B
(1) 1833/   C9F14 :                     ;	$02
(1) 1834/   C9F14 :                     ;	$01, $55, $02, $04, 	$92, $8D, $8E, $54, 	$0D, $0C, $00, $03
(1) 1835/   C9F14 :                     ;	$00, $00, $00, $00, 	$FF, $2F, $0F, $5F, 	$16, $2A, $1D, $80
(1) 1836/   C9F14 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1836/   C9F14 : =$2                 vcAlgorithm set $02
(1) 1837/   C9F14 : (MACRO)             	smpsVcFeedback      $00
(1) 1837/   C9F14 : =$0                 vcFeedback set $00
(1) 1838/   C9F14 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1838/   C9F14 : =$0                 vcUnusedBits set $00
(1) 1838/   C9F14 : =$0                 vcD1R1Unk set 0
(1) 1838/   C9F14 : =$0                 vcD1R2Unk set 0
(1) 1838/   C9F14 : =$0                 vcD1R3Unk set 0
(1) 1838/   C9F14 : =$0                 vcD1R4Unk set 0
(1) 1839/   C9F14 : (MACRO)             	smpsVcDetune        $00, $00, $05, $00
(1) 1839/   C9F14 : =$0                 vcDT1 set $00
(1) 1839/   C9F14 : =$0                 vcDT2 set $00
(1) 1839/   C9F14 : =$5                 vcDT3 set $05
(1) 1839/   C9F14 : =$0                 vcDT4 set $00
(1) 1840/   C9F14 : (MACRO)             	smpsVcCoarseFreq    $04, $02, $05, $01
(1) 1840/   C9F14 : =$4                 vcCF1 set $04
(1) 1840/   C9F14 : =$2                 vcCF2 set $02
(1) 1840/   C9F14 : =$5                 vcCF3 set $05
(1) 1840/   C9F14 : =$1                 vcCF4 set $01
(1) 1841/   C9F14 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1) 1841/   C9F14 : =$1                 vcRS1 set $01
(1) 1841/   C9F14 : =$2                 vcRS2 set $02
(1) 1841/   C9F14 : =$2                 vcRS3 set $02
(1) 1841/   C9F14 : =$2                 vcRS4 set $02
(1) 1842/   C9F14 : (MACRO)             	smpsVcAttackRate    $14, $0E, $0D, $12
(1) 1842/   C9F14 : =$14                vcAR1 set $14
(1) 1842/   C9F14 : =$E                 vcAR2 set $0E
(1) 1842/   C9F14 : =$D                 vcAR3 set $0D
(1) 1842/   C9F14 : =$12                vcAR4 set $12
(1) 1843/   C9F14 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1843/   C9F14 : =$0                 vcAM1 set $00<<5
(1) 1843/   C9F14 : =$0                 vcAM2 set $00<<5
(1) 1843/   C9F14 : =$0                 vcAM3 set $00<<5
(1) 1843/   C9F14 : =$0                 vcAM4 set $00<<5
(1) 1844/   C9F14 : (MACRO)             	smpsVcDecayRate1    $03, $00, $0C, $0D
(1) 1844/   C9F14 : =$3                 vcD1R1 set $03
(1) 1844/   C9F14 : =$0                 vcD1R2 set $00
(1) 1844/   C9F14 : =$C                 vcD1R3 set $0C
(1) 1844/   C9F14 : =$D                 vcD1R4 set $0D
(1) 1845/   C9F14 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 1845/   C9F14 : =$0                 vcD2R1 set $00
(1) 1845/   C9F14 : =$0                 vcD2R2 set $00
(1) 1845/   C9F14 : =$0                 vcD2R3 set $00
(1) 1845/   C9F14 : =$0                 vcD2R4 set $00
(1) 1846/   C9F14 : (MACRO)             	smpsVcDecayLevel    $05, $00, $02, $0F
(1) 1846/   C9F14 : =$5                 vcDL1 set $05
(1) 1846/   C9F14 : =$0                 vcDL2 set $00
(1) 1846/   C9F14 : =$2                 vcDL3 set $02
(1) 1846/   C9F14 : =$F                 vcDL4 set $0F
(1) 1847/   C9F14 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1847/   C9F14 : =$F                 vcRR1 set $0F
(1) 1847/   C9F14 : =$F                 vcRR2 set $0F
(1) 1847/   C9F14 : =$F                 vcRR3 set $0F
(1) 1847/   C9F14 : =$F                 vcRR4 set $0F
(1) 1848/   C9F14 : (MACRO)             	smpsVcTotalLevel    $80, $1D, $2A, $16
(1) 1848/   C9F14 : =$80                vcTL1 set $80
(1) 1848/   C9F14 : =$1D                vcTL2 set $1D
(1) 1848/   C9F14 : =$2A                vcTL3 set $2A
(1) 1848/   C9F14 : =$16                vcTL4 set $16
(1) 1848/   C9F14 : 02                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1848/   C9F15 :                     ;   0     1     2     3     4     5     6     7
(1) 1848/   C9F15 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1848/   C9F15 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1848/   C9F15 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1848/   C9F15 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1848/   C9F15 : =$80                vcTLMask1 set $80
(1) 1848/   C9F15 :                     
(1) 1848/   C9F15 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1848/   C9F15 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1848/   C9F15 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1848/   C9F15 : =$80                vcTLMask1 set $80
(1) 1848/   C9F15 : =$0                 vcTL1 set vcTL1&$7F
(1) 1848/   C9F15 : =$1D                vcTL2 set vcTL2&$7F
(1) 1848/   C9F15 : =$2A                vcTL3 set vcTL3&$7F
(1) 1848/   C9F15 : =$16                vcTL4 set vcTL4&$7F
(1) 1848/   C9F15 :                     
(1) 1848/   C9F15 : 0155 0204                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1848/   C9F19 : 928D 8E54                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1848/   C9F1D : 0D0C 0003                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1848/   C9F21 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1848/   C9F25 : FF2F 0F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1848/   C9F29 : 162A 1D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1849/   C9F2D :                     
(1) 1850/   C9F2D :                     ;	Voice $1C
(1) 1851/   C9F2D :                     ;	$02
(1) 1852/   C9F2D :                     ;	$75, $71, $73, $31, 	$1F, $58, $96, $9F, 	$01, $1B, $03, $08
(1) 1853/   C9F2D :                     ;	$01, $04, $01, $05, 	$FF, $2F, $3F, $2F, 	$24, $29, $30, $80
(1) 1854/   C9F2D : (MACRO)             	smpsVcAlgorithm     $02
(1) 1854/   C9F2D : =$2                 vcAlgorithm set $02
(1) 1855/   C9F2D : (MACRO)             	smpsVcFeedback      $00
(1) 1855/   C9F2D : =$0                 vcFeedback set $00
(1) 1856/   C9F2D : (MACRO)             	smpsVcUnusedBits    $00
(1) 1856/   C9F2D : =$0                 vcUnusedBits set $00
(1) 1856/   C9F2D : =$0                 vcD1R1Unk set 0
(1) 1856/   C9F2D : =$0                 vcD1R2Unk set 0
(1) 1856/   C9F2D : =$0                 vcD1R3Unk set 0
(1) 1856/   C9F2D : =$0                 vcD1R4Unk set 0
(1) 1857/   C9F2D : (MACRO)             	smpsVcDetune        $03, $07, $07, $07
(1) 1857/   C9F2D : =$3                 vcDT1 set $03
(1) 1857/   C9F2D : =$7                 vcDT2 set $07
(1) 1857/   C9F2D : =$7                 vcDT3 set $07
(1) 1857/   C9F2D : =$7                 vcDT4 set $07
(1) 1858/   C9F2D : (MACRO)             	smpsVcCoarseFreq    $01, $03, $01, $05
(1) 1858/   C9F2D : =$1                 vcCF1 set $01
(1) 1858/   C9F2D : =$3                 vcCF2 set $03
(1) 1858/   C9F2D : =$1                 vcCF3 set $01
(1) 1858/   C9F2D : =$5                 vcCF4 set $05
(1) 1859/   C9F2D : (MACRO)             	smpsVcRateScale     $02, $02, $01, $00
(1) 1859/   C9F2D : =$2                 vcRS1 set $02
(1) 1859/   C9F2D : =$2                 vcRS2 set $02
(1) 1859/   C9F2D : =$1                 vcRS3 set $01
(1) 1859/   C9F2D : =$0                 vcRS4 set $00
(1) 1860/   C9F2D : (MACRO)             	smpsVcAttackRate    $1F, $16, $18, $1F
(1) 1860/   C9F2D : =$1F                vcAR1 set $1F
(1) 1860/   C9F2D : =$16                vcAR2 set $16
(1) 1860/   C9F2D : =$18                vcAR3 set $18
(1) 1860/   C9F2D : =$1F                vcAR4 set $1F
(1) 1861/   C9F2D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1861/   C9F2D : =$0                 vcAM1 set $00<<5
(1) 1861/   C9F2D : =$0                 vcAM2 set $00<<5
(1) 1861/   C9F2D : =$0                 vcAM3 set $00<<5
(1) 1861/   C9F2D : =$0                 vcAM4 set $00<<5
(1) 1862/   C9F2D : (MACRO)             	smpsVcDecayRate1    $08, $03, $1B, $01
(1) 1862/   C9F2D : =$8                 vcD1R1 set $08
(1) 1862/   C9F2D : =$3                 vcD1R2 set $03
(1) 1862/   C9F2D : =$1B                vcD1R3 set $1B
(1) 1862/   C9F2D : =$1                 vcD1R4 set $01
(1) 1863/   C9F2D : (MACRO)             	smpsVcDecayRate2    $05, $01, $04, $01
(1) 1863/   C9F2D : =$5                 vcD2R1 set $05
(1) 1863/   C9F2D : =$1                 vcD2R2 set $01
(1) 1863/   C9F2D : =$4                 vcD2R3 set $04
(1) 1863/   C9F2D : =$1                 vcD2R4 set $01
(1) 1864/   C9F2D : (MACRO)             	smpsVcDecayLevel    $02, $03, $02, $0F
(1) 1864/   C9F2D : =$2                 vcDL1 set $02
(1) 1864/   C9F2D : =$3                 vcDL2 set $03
(1) 1864/   C9F2D : =$2                 vcDL3 set $02
(1) 1864/   C9F2D : =$F                 vcDL4 set $0F
(1) 1865/   C9F2D : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1865/   C9F2D : =$F                 vcRR1 set $0F
(1) 1865/   C9F2D : =$F                 vcRR2 set $0F
(1) 1865/   C9F2D : =$F                 vcRR3 set $0F
(1) 1865/   C9F2D : =$F                 vcRR4 set $0F
(1) 1866/   C9F2D : (MACRO)             	smpsVcTotalLevel    $80, $30, $29, $24
(1) 1866/   C9F2D : =$80                vcTL1 set $80
(1) 1866/   C9F2D : =$30                vcTL2 set $30
(1) 1866/   C9F2D : =$29                vcTL3 set $29
(1) 1866/   C9F2D : =$24                vcTL4 set $24
(1) 1866/   C9F2D : 02                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1866/   C9F2E :                     ;   0     1     2     3     4     5     6     7
(1) 1866/   C9F2E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1866/   C9F2E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1866/   C9F2E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1866/   C9F2E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1866/   C9F2E : =$80                vcTLMask1 set $80
(1) 1866/   C9F2E :                     
(1) 1866/   C9F2E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1866/   C9F2E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1866/   C9F2E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1866/   C9F2E : =$80                vcTLMask1 set $80
(1) 1866/   C9F2E : =$0                 vcTL1 set vcTL1&$7F
(1) 1866/   C9F2E : =$30                vcTL2 set vcTL2&$7F
(1) 1866/   C9F2E : =$29                vcTL3 set vcTL3&$7F
(1) 1866/   C9F2E : =$24                vcTL4 set vcTL4&$7F
(1) 1866/   C9F2E :                     
(1) 1866/   C9F2E : 7571 7331                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1866/   C9F32 : 1F58 969F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1866/   C9F36 : 011B 0308                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1866/   C9F3A : 0104 0105                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1866/   C9F3E : FF2F 3F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1866/   C9F42 : 2429 3080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1867/   C9F46 :                     
(1) 1868/   C9F46 :                     ;	Voice $1D
(1) 1869/   C9F46 :                     ;	$20
(1) 1870/   C9F46 :                     ;	$66, $65, $60, $60, 	$DF, $DF, $9F, $1F, 	$00, $06, $09, $0C
(1) 1871/   C9F46 :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$1C, $3A, $16, $80
(1) 1872/   C9F46 : (MACRO)             	smpsVcAlgorithm     $00
(1) 1872/   C9F46 : =$0                 vcAlgorithm set $00
(1) 1873/   C9F46 : (MACRO)             	smpsVcFeedback      $04
(1) 1873/   C9F46 : =$4                 vcFeedback set $04
(1) 1874/   C9F46 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1874/   C9F46 : =$0                 vcUnusedBits set $00
(1) 1874/   C9F46 : =$0                 vcD1R1Unk set 0
(1) 1874/   C9F46 : =$0                 vcD1R2Unk set 0
(1) 1874/   C9F46 : =$0                 vcD1R3Unk set 0
(1) 1874/   C9F46 : =$0                 vcD1R4Unk set 0
(1) 1875/   C9F46 : (MACRO)             	smpsVcDetune        $06, $06, $06, $06
(1) 1875/   C9F46 : =$6                 vcDT1 set $06
(1) 1875/   C9F46 : =$6                 vcDT2 set $06
(1) 1875/   C9F46 : =$6                 vcDT3 set $06
(1) 1875/   C9F46 : =$6                 vcDT4 set $06
(1) 1876/   C9F46 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $05, $06
(1) 1876/   C9F46 : =$0                 vcCF1 set $00
(1) 1876/   C9F46 : =$0                 vcCF2 set $00
(1) 1876/   C9F46 : =$5                 vcCF3 set $05
(1) 1876/   C9F46 : =$6                 vcCF4 set $06
(1) 1877/   C9F46 : (MACRO)             	smpsVcRateScale     $00, $02, $03, $03
(1) 1877/   C9F46 : =$0                 vcRS1 set $00
(1) 1877/   C9F46 : =$2                 vcRS2 set $02
(1) 1877/   C9F46 : =$3                 vcRS3 set $03
(1) 1877/   C9F46 : =$3                 vcRS4 set $03
(1) 1878/   C9F46 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 1878/   C9F46 : =$1F                vcAR1 set $1F
(1) 1878/   C9F46 : =$1F                vcAR2 set $1F
(1) 1878/   C9F46 : =$1F                vcAR3 set $1F
(1) 1878/   C9F46 : =$1F                vcAR4 set $1F
(1) 1879/   C9F46 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1879/   C9F46 : =$0                 vcAM1 set $00<<5
(1) 1879/   C9F46 : =$0                 vcAM2 set $00<<5
(1) 1879/   C9F46 : =$0                 vcAM3 set $00<<5
(1) 1879/   C9F46 : =$0                 vcAM4 set $00<<5
(1) 1880/   C9F46 : (MACRO)             	smpsVcDecayRate1    $0C, $09, $06, $00
(1) 1880/   C9F46 : =$C                 vcD1R1 set $0C
(1) 1880/   C9F46 : =$9                 vcD1R2 set $09
(1) 1880/   C9F46 : =$6                 vcD1R3 set $06
(1) 1880/   C9F46 : =$0                 vcD1R4 set $00
(1) 1881/   C9F46 : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1) 1881/   C9F46 : =$8                 vcD2R1 set $08
(1) 1881/   C9F46 : =$6                 vcD2R2 set $06
(1) 1881/   C9F46 : =$6                 vcD2R3 set $06
(1) 1881/   C9F46 : =$7                 vcD2R4 set $07
(1) 1882/   C9F46 : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1) 1882/   C9F46 : =$F                 vcDL1 set $0F
(1) 1882/   C9F46 : =$1                 vcDL2 set $01
(1) 1882/   C9F46 : =$1                 vcDL3 set $01
(1) 1882/   C9F46 : =$2                 vcDL4 set $02
(1) 1883/   C9F46 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1883/   C9F46 : =$F                 vcRR1 set $0F
(1) 1883/   C9F46 : =$F                 vcRR2 set $0F
(1) 1883/   C9F46 : =$F                 vcRR3 set $0F
(1) 1883/   C9F46 : =$F                 vcRR4 set $0F
(1) 1884/   C9F46 : (MACRO)             	smpsVcTotalLevel    $80, $16, $3A, $1C
(1) 1884/   C9F46 : =$80                vcTL1 set $80
(1) 1884/   C9F46 : =$16                vcTL2 set $16
(1) 1884/   C9F46 : =$3A                vcTL3 set $3A
(1) 1884/   C9F46 : =$1C                vcTL4 set $1C
(1) 1884/   C9F46 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1884/   C9F47 :                     ;   0     1     2     3     4     5     6     7
(1) 1884/   C9F47 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1884/   C9F47 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1884/   C9F47 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1884/   C9F47 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1884/   C9F47 : =$80                vcTLMask1 set $80
(1) 1884/   C9F47 :                     
(1) 1884/   C9F47 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1884/   C9F47 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1884/   C9F47 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1884/   C9F47 : =$80                vcTLMask1 set $80
(1) 1884/   C9F47 : =$0                 vcTL1 set vcTL1&$7F
(1) 1884/   C9F47 : =$16                vcTL2 set vcTL2&$7F
(1) 1884/   C9F47 : =$3A                vcTL3 set vcTL3&$7F
(1) 1884/   C9F47 : =$1C                vcTL4 set vcTL4&$7F
(1) 1884/   C9F47 :                     
(1) 1884/   C9F47 : 6665 6060                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1884/   C9F4B : DFDF 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1884/   C9F4F : 0006 090C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1884/   C9F53 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1884/   C9F57 : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1884/   C9F5B : 1C3A 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1885/   C9F5F :                     
(1) 1886/   C9F5F :                     ;	Voice $1E
(1) 1887/   C9F5F :                     ;	$0D
(1) 1888/   C9F5F :                     ;	$32, $08, $06, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
(1) 1889/   C9F5F :                     ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $80, $86, $8D
(1) 1890/   C9F5F : (MACRO)             	smpsVcAlgorithm     $05
(1) 1890/   C9F5F : =$5                 vcAlgorithm set $05
(1) 1891/   C9F5F : (MACRO)             	smpsVcFeedback      $01
(1) 1891/   C9F5F : =$1                 vcFeedback set $01
(1) 1892/   C9F5F : (MACRO)             	smpsVcUnusedBits    $00
(1) 1892/   C9F5F : =$0                 vcUnusedBits set $00
(1) 1892/   C9F5F : =$0                 vcD1R1Unk set 0
(1) 1892/   C9F5F : =$0                 vcD1R2Unk set 0
(1) 1892/   C9F5F : =$0                 vcD1R3Unk set 0
(1) 1892/   C9F5F : =$0                 vcD1R4Unk set 0
(1) 1893/   C9F5F : (MACRO)             	smpsVcDetune        $00, $00, $00, $03
(1) 1893/   C9F5F : =$0                 vcDT1 set $00
(1) 1893/   C9F5F : =$0                 vcDT2 set $00
(1) 1893/   C9F5F : =$0                 vcDT3 set $00
(1) 1893/   C9F5F : =$3                 vcDT4 set $03
(1) 1894/   C9F5F : (MACRO)             	smpsVcCoarseFreq    $01, $06, $08, $02
(1) 1894/   C9F5F : =$1                 vcCF1 set $01
(1) 1894/   C9F5F : =$6                 vcCF2 set $06
(1) 1894/   C9F5F : =$8                 vcCF3 set $08
(1) 1894/   C9F5F : =$2                 vcCF4 set $02
(1) 1895/   C9F5F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1895/   C9F5F : =$0                 vcRS1 set $00
(1) 1895/   C9F5F : =$0                 vcRS2 set $00
(1) 1895/   C9F5F : =$0                 vcRS3 set $00
(1) 1895/   C9F5F : =$0                 vcRS4 set $00
(1) 1896/   C9F5F : (MACRO)             	smpsVcAttackRate    $19, $19, $19, $1F
(1) 1896/   C9F5F : =$19                vcAR1 set $19
(1) 1896/   C9F5F : =$19                vcAR2 set $19
(1) 1896/   C9F5F : =$19                vcAR3 set $19
(1) 1896/   C9F5F : =$1F                vcAR4 set $1F
(1) 1897/   C9F5F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1897/   C9F5F : =$0                 vcAM1 set $00<<5
(1) 1897/   C9F5F : =$0                 vcAM2 set $00<<5
(1) 1897/   C9F5F : =$0                 vcAM3 set $00<<5
(1) 1897/   C9F5F : =$0                 vcAM4 set $00<<5
(1) 1898/   C9F5F : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1) 1898/   C9F5F : =$5                 vcD1R1 set $05
(1) 1898/   C9F5F : =$5                 vcD1R2 set $05
(1) 1898/   C9F5F : =$5                 vcD1R3 set $05
(1) 1898/   C9F5F : =$A                 vcD1R4 set $0A
(1) 1899/   C9F5F : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $00
(1) 1899/   C9F5F : =$2                 vcD2R1 set $02
(1) 1899/   C9F5F : =$2                 vcD2R2 set $02
(1) 1899/   C9F5F : =$2                 vcD2R3 set $02
(1) 1899/   C9F5F : =$0                 vcD2R4 set $00
(1) 1900/   C9F5F : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $03
(1) 1900/   C9F5F : =$2                 vcDL1 set $02
(1) 1900/   C9F5F : =$2                 vcDL2 set $02
(1) 1900/   C9F5F : =$2                 vcDL3 set $02
(1) 1900/   C9F5F : =$3                 vcDL4 set $03
(1) 1901/   C9F5F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1901/   C9F5F : =$F                 vcRR1 set $0F
(1) 1901/   C9F5F : =$F                 vcRR2 set $0F
(1) 1901/   C9F5F : =$F                 vcRR3 set $0F
(1) 1901/   C9F5F : =$F                 vcRR4 set $0F
(1) 1902/   C9F5F : (MACRO)             	smpsVcTotalLevel    $8D, $86, $80, $28
(1) 1902/   C9F5F : =$8D                vcTL1 set $8D
(1) 1902/   C9F5F : =$86                vcTL2 set $86
(1) 1902/   C9F5F : =$80                vcTL3 set $80
(1) 1902/   C9F5F : =$28                vcTL4 set $28
(1) 1902/   C9F5F : 0D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1902/   C9F60 :                     ;   0     1     2     3     4     5     6     7
(1) 1902/   C9F60 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1902/   C9F60 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1902/   C9F60 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1902/   C9F60 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1902/   C9F60 : =$80                vcTLMask1 set $80
(1) 1902/   C9F60 :                     
(1) 1902/   C9F60 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1902/   C9F60 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1902/   C9F60 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1902/   C9F60 : =$80                vcTLMask1 set $80
(1) 1902/   C9F60 : =$D                 vcTL1 set vcTL1&$7F
(1) 1902/   C9F60 : =$6                 vcTL2 set vcTL2&$7F
(1) 1902/   C9F60 : =$0                 vcTL3 set vcTL3&$7F
(1) 1902/   C9F60 : =$28                vcTL4 set vcTL4&$7F
(1) 1902/   C9F60 :                     
(1) 1902/   C9F60 : 3208 0601                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1902/   C9F64 : 1F19 1919                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1902/   C9F68 : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1902/   C9F6C : 0002 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1902/   C9F70 : 3F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1902/   C9F74 : 2880 868D                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1903/   C9F78 :                     
(1) 1904/   C9F78 :                     ;	Voice $1F
(1) 1905/   C9F78 :                     ;	$38
(1) 1906/   C9F78 :                     ;	$3A, $0A, $11, $02, 	$D4, $14, $50, $0E, 	$05, $08, $02, $88
(1) 1907/   C9F78 :                     ;	$00, $00, $00, $00, 	$99, $09, $09, $1A, 	$2D, $2C, $19, $86
(1) 1908/   C9F78 : (MACRO)             	smpsVcAlgorithm     $00
(1) 1908/   C9F78 : =$0                 vcAlgorithm set $00
(1) 1909/   C9F78 : (MACRO)             	smpsVcFeedback      $07
(1) 1909/   C9F78 : =$7                 vcFeedback set $07
(1) 1910/   C9F78 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1910/   C9F78 : =$0                 vcUnusedBits set $00
(1) 1910/   C9F78 : =$0                 vcD1R1Unk set 0
(1) 1910/   C9F78 : =$0                 vcD1R2Unk set 0
(1) 1910/   C9F78 : =$0                 vcD1R3Unk set 0
(1) 1910/   C9F78 : =$0                 vcD1R4Unk set 0
(1) 1911/   C9F78 : (MACRO)             	smpsVcDetune        $00, $01, $00, $03
(1) 1911/   C9F78 : =$0                 vcDT1 set $00
(1) 1911/   C9F78 : =$1                 vcDT2 set $01
(1) 1911/   C9F78 : =$0                 vcDT3 set $00
(1) 1911/   C9F78 : =$3                 vcDT4 set $03
(1) 1912/   C9F78 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $0A, $0A
(1) 1912/   C9F78 : =$2                 vcCF1 set $02
(1) 1912/   C9F78 : =$1                 vcCF2 set $01
(1) 1912/   C9F78 : =$A                 vcCF3 set $0A
(1) 1912/   C9F78 : =$A                 vcCF4 set $0A
(1) 1913/   C9F78 : (MACRO)             	smpsVcRateScale     $00, $01, $00, $03
(1) 1913/   C9F78 : =$0                 vcRS1 set $00
(1) 1913/   C9F78 : =$1                 vcRS2 set $01
(1) 1913/   C9F78 : =$0                 vcRS3 set $00
(1) 1913/   C9F78 : =$3                 vcRS4 set $03
(1) 1914/   C9F78 : (MACRO)             	smpsVcAttackRate    $0E, $10, $14, $14
(1) 1914/   C9F78 : =$E                 vcAR1 set $0E
(1) 1914/   C9F78 : =$10                vcAR2 set $10
(1) 1914/   C9F78 : =$14                vcAR3 set $14
(1) 1914/   C9F78 : =$14                vcAR4 set $14
(1) 1915/   C9F78 : (MACRO)             	smpsVcAmpMod        $01, $00, $00, $00
(1) 1915/   C9F78 : =$20                vcAM1 set $01<<5
(1) 1915/   C9F78 : =$0                 vcAM2 set $00<<5
(1) 1915/   C9F78 : =$0                 vcAM3 set $00<<5
(1) 1915/   C9F78 : =$0                 vcAM4 set $00<<5
(1) 1916/   C9F78 : (MACRO)             	smpsVcDecayRate1    $08, $02, $08, $05
(1) 1916/   C9F78 : =$8                 vcD1R1 set $08
(1) 1916/   C9F78 : =$2                 vcD1R2 set $02
(1) 1916/   C9F78 : =$8                 vcD1R3 set $08
(1) 1916/   C9F78 : =$5                 vcD1R4 set $05
(1) 1917/   C9F78 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 1917/   C9F78 : =$0                 vcD2R1 set $00
(1) 1917/   C9F78 : =$0                 vcD2R2 set $00
(1) 1917/   C9F78 : =$0                 vcD2R3 set $00
(1) 1917/   C9F78 : =$0                 vcD2R4 set $00
(1) 1918/   C9F78 : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $09
(1) 1918/   C9F78 : =$1                 vcDL1 set $01
(1) 1918/   C9F78 : =$0                 vcDL2 set $00
(1) 1918/   C9F78 : =$0                 vcDL3 set $00
(1) 1918/   C9F78 : =$9                 vcDL4 set $09
(1) 1919/   C9F78 : (MACRO)             	smpsVcReleaseRate   $0A, $09, $09, $09
(1) 1919/   C9F78 : =$A                 vcRR1 set $0A
(1) 1919/   C9F78 : =$9                 vcRR2 set $09
(1) 1919/   C9F78 : =$9                 vcRR3 set $09
(1) 1919/   C9F78 : =$9                 vcRR4 set $09
(1) 1920/   C9F78 : (MACRO)             	smpsVcTotalLevel    $86, $19, $2C, $2D
(1) 1920/   C9F78 : =$86                vcTL1 set $86
(1) 1920/   C9F78 : =$19                vcTL2 set $19
(1) 1920/   C9F78 : =$2C                vcTL3 set $2C
(1) 1920/   C9F78 : =$2D                vcTL4 set $2D
(1) 1920/   C9F78 : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1920/   C9F79 :                     ;   0     1     2     3     4     5     6     7
(1) 1920/   C9F79 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1920/   C9F79 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1920/   C9F79 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1920/   C9F79 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1920/   C9F79 : =$80                vcTLMask1 set $80
(1) 1920/   C9F79 :                     
(1) 1920/   C9F79 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1920/   C9F79 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1920/   C9F79 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1920/   C9F79 : =$80                vcTLMask1 set $80
(1) 1920/   C9F79 : =$6                 vcTL1 set vcTL1&$7F
(1) 1920/   C9F79 : =$19                vcTL2 set vcTL2&$7F
(1) 1920/   C9F79 : =$2C                vcTL3 set vcTL3&$7F
(1) 1920/   C9F79 : =$2D                vcTL4 set vcTL4&$7F
(1) 1920/   C9F79 :                     
(1) 1920/   C9F79 : 3A0A 1102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1920/   C9F7D : D414 500E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1920/   C9F81 : 0508 0228                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1920/   C9F85 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1920/   C9F89 : 9909 091A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1920/   C9F8D : 2D2C 1986                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1921/   C9F91 :                     
(1) 1922/   C9F91 :                     ;	Voice $20
(1) 1923/   C9F91 :                     ;	$0D
(1) 1924/   C9F91 :                     ;	$32, $04, $02, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
(1) 1925/   C9F91 :                     ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $86, $8B, $93
(1) 1926/   C9F91 : (MACRO)             	smpsVcAlgorithm     $05
(1) 1926/   C9F91 : =$5                 vcAlgorithm set $05
(1) 1927/   C9F91 : (MACRO)             	smpsVcFeedback      $01
(1) 1927/   C9F91 : =$1                 vcFeedback set $01
(1) 1928/   C9F91 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1928/   C9F91 : =$0                 vcUnusedBits set $00
(1) 1928/   C9F91 : =$0                 vcD1R1Unk set 0
(1) 1928/   C9F91 : =$0                 vcD1R2Unk set 0
(1) 1928/   C9F91 : =$0                 vcD1R3Unk set 0
(1) 1928/   C9F91 : =$0                 vcD1R4Unk set 0
(1) 1929/   C9F91 : (MACRO)             	smpsVcDetune        $00, $00, $00, $03
(1) 1929/   C9F91 : =$0                 vcDT1 set $00
(1) 1929/   C9F91 : =$0                 vcDT2 set $00
(1) 1929/   C9F91 : =$0                 vcDT3 set $00
(1) 1929/   C9F91 : =$3                 vcDT4 set $03
(1) 1930/   C9F91 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $04, $02
(1) 1930/   C9F91 : =$1                 vcCF1 set $01
(1) 1930/   C9F91 : =$2                 vcCF2 set $02
(1) 1930/   C9F91 : =$4                 vcCF3 set $04
(1) 1930/   C9F91 : =$2                 vcCF4 set $02
(1) 1931/   C9F91 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1931/   C9F91 : =$0                 vcRS1 set $00
(1) 1931/   C9F91 : =$0                 vcRS2 set $00
(1) 1931/   C9F91 : =$0                 vcRS3 set $00
(1) 1931/   C9F91 : =$0                 vcRS4 set $00
(1) 1932/   C9F91 : (MACRO)             	smpsVcAttackRate    $19, $19, $19, $1F
(1) 1932/   C9F91 : =$19                vcAR1 set $19
(1) 1932/   C9F91 : =$19                vcAR2 set $19
(1) 1932/   C9F91 : =$19                vcAR3 set $19
(1) 1932/   C9F91 : =$1F                vcAR4 set $1F
(1) 1933/   C9F91 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1933/   C9F91 : =$0                 vcAM1 set $00<<5
(1) 1933/   C9F91 : =$0                 vcAM2 set $00<<5
(1) 1933/   C9F91 : =$0                 vcAM3 set $00<<5
(1) 1933/   C9F91 : =$0                 vcAM4 set $00<<5
(1) 1934/   C9F91 : (MACRO)             	smpsVcDecayRate1    $05, $05, $05, $0A
(1) 1934/   C9F91 : =$5                 vcD1R1 set $05
(1) 1934/   C9F91 : =$5                 vcD1R2 set $05
(1) 1934/   C9F91 : =$5                 vcD1R3 set $05
(1) 1934/   C9F91 : =$A                 vcD1R4 set $0A
(1) 1935/   C9F91 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $00
(1) 1935/   C9F91 : =$2                 vcD2R1 set $02
(1) 1935/   C9F91 : =$2                 vcD2R2 set $02
(1) 1935/   C9F91 : =$2                 vcD2R3 set $02
(1) 1935/   C9F91 : =$0                 vcD2R4 set $00
(1) 1936/   C9F91 : (MACRO)             	smpsVcDecayLevel    $02, $02, $02, $03
(1) 1936/   C9F91 : =$2                 vcDL1 set $02
(1) 1936/   C9F91 : =$2                 vcDL2 set $02
(1) 1936/   C9F91 : =$2                 vcDL3 set $02
(1) 1936/   C9F91 : =$3                 vcDL4 set $03
(1) 1937/   C9F91 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1937/   C9F91 : =$F                 vcRR1 set $0F
(1) 1937/   C9F91 : =$F                 vcRR2 set $0F
(1) 1937/   C9F91 : =$F                 vcRR3 set $0F
(1) 1937/   C9F91 : =$F                 vcRR4 set $0F
(1) 1938/   C9F91 : (MACRO)             	smpsVcTotalLevel    $93, $8B, $86, $28
(1) 1938/   C9F91 : =$93                vcTL1 set $93
(1) 1938/   C9F91 : =$8B                vcTL2 set $8B
(1) 1938/   C9F91 : =$86                vcTL3 set $86
(1) 1938/   C9F91 : =$28                vcTL4 set $28
(1) 1938/   C9F91 : 0D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1938/   C9F92 :                     ;   0     1     2     3     4     5     6     7
(1) 1938/   C9F92 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1938/   C9F92 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1938/   C9F92 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1938/   C9F92 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1938/   C9F92 : =$80                vcTLMask1 set $80
(1) 1938/   C9F92 :                     
(1) 1938/   C9F92 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1938/   C9F92 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1938/   C9F92 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1938/   C9F92 : =$80                vcTLMask1 set $80
(1) 1938/   C9F92 : =$13                vcTL1 set vcTL1&$7F
(1) 1938/   C9F92 : =$B                 vcTL2 set vcTL2&$7F
(1) 1938/   C9F92 : =$6                 vcTL3 set vcTL3&$7F
(1) 1938/   C9F92 : =$28                vcTL4 set vcTL4&$7F
(1) 1938/   C9F92 :                     
(1) 1938/   C9F92 : 3204 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1938/   C9F96 : 1F19 1919                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1938/   C9F9A : 0A05 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1938/   C9F9E : 0002 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1938/   C9FA2 : 3F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1938/   C9FA6 : 2886 8B93                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1939/   C9FAA :                     
(1) 1940/   C9FAA :                     ;	Voice $21
(1) 1941/   C9FAA :                     ;	$3A
(1) 1942/   C9FAA :                     ;	$20, $23, $60, $01, 	$1E, $1F, $1F, $1F, 	$0A, $0A, $0B, $0A
(1) 1943/   C9FAA :                     ;	$05, $07, $0A, $08, 	$A4, $85, $96, $78, 	$21, $25, $28, $00
(1) 1944/   C9FAA : (MACRO)             	smpsVcAlgorithm     $02
(1) 1944/   C9FAA : =$2                 vcAlgorithm set $02
(1) 1945/   C9FAA : (MACRO)             	smpsVcFeedback      $07
(1) 1945/   C9FAA : =$7                 vcFeedback set $07
(1) 1946/   C9FAA : (MACRO)             	smpsVcUnusedBits    $00
(1) 1946/   C9FAA : =$0                 vcUnusedBits set $00
(1) 1946/   C9FAA : =$0                 vcD1R1Unk set 0
(1) 1946/   C9FAA : =$0                 vcD1R2Unk set 0
(1) 1946/   C9FAA : =$0                 vcD1R3Unk set 0
(1) 1946/   C9FAA : =$0                 vcD1R4Unk set 0
(1) 1947/   C9FAA : (MACRO)             	smpsVcDetune        $00, $06, $02, $02
(1) 1947/   C9FAA : =$0                 vcDT1 set $00
(1) 1947/   C9FAA : =$6                 vcDT2 set $06
(1) 1947/   C9FAA : =$2                 vcDT3 set $02
(1) 1947/   C9FAA : =$2                 vcDT4 set $02
(1) 1948/   C9FAA : (MACRO)             	smpsVcCoarseFreq    $01, $00, $03, $00
(1) 1948/   C9FAA : =$1                 vcCF1 set $01
(1) 1948/   C9FAA : =$0                 vcCF2 set $00
(1) 1948/   C9FAA : =$3                 vcCF3 set $03
(1) 1948/   C9FAA : =$0                 vcCF4 set $00
(1) 1949/   C9FAA : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1949/   C9FAA : =$0                 vcRS1 set $00
(1) 1949/   C9FAA : =$0                 vcRS2 set $00
(1) 1949/   C9FAA : =$0                 vcRS3 set $00
(1) 1949/   C9FAA : =$0                 vcRS4 set $00
(1) 1950/   C9FAA : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1E
(1) 1950/   C9FAA : =$1F                vcAR1 set $1F
(1) 1950/   C9FAA : =$1F                vcAR2 set $1F
(1) 1950/   C9FAA : =$1F                vcAR3 set $1F
(1) 1950/   C9FAA : =$1E                vcAR4 set $1E
(1) 1951/   C9FAA : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1951/   C9FAA : =$0                 vcAM1 set $00<<5
(1) 1951/   C9FAA : =$0                 vcAM2 set $00<<5
(1) 1951/   C9FAA : =$0                 vcAM3 set $00<<5
(1) 1951/   C9FAA : =$0                 vcAM4 set $00<<5
(1) 1952/   C9FAA : (MACRO)             	smpsVcDecayRate1    $0A, $0B, $0A, $0A
(1) 1952/   C9FAA : =$A                 vcD1R1 set $0A
(1) 1952/   C9FAA : =$B                 vcD1R2 set $0B
(1) 1952/   C9FAA : =$A                 vcD1R3 set $0A
(1) 1952/   C9FAA : =$A                 vcD1R4 set $0A
(1) 1953/   C9FAA : (MACRO)             	smpsVcDecayRate2    $08, $0A, $07, $05
(1) 1953/   C9FAA : =$8                 vcD2R1 set $08
(1) 1953/   C9FAA : =$A                 vcD2R2 set $0A
(1) 1953/   C9FAA : =$7                 vcD2R3 set $07
(1) 1953/   C9FAA : =$5                 vcD2R4 set $05
(1) 1954/   C9FAA : (MACRO)             	smpsVcDecayLevel    $07, $09, $08, $0A
(1) 1954/   C9FAA : =$7                 vcDL1 set $07
(1) 1954/   C9FAA : =$9                 vcDL2 set $09
(1) 1954/   C9FAA : =$8                 vcDL3 set $08
(1) 1954/   C9FAA : =$A                 vcDL4 set $0A
(1) 1955/   C9FAA : (MACRO)             	smpsVcReleaseRate   $08, $06, $05, $04
(1) 1955/   C9FAA : =$8                 vcRR1 set $08
(1) 1955/   C9FAA : =$6                 vcRR2 set $06
(1) 1955/   C9FAA : =$5                 vcRR3 set $05
(1) 1955/   C9FAA : =$4                 vcRR4 set $04
(1) 1956/   C9FAA : (MACRO)             	smpsVcTotalLevel    $00, $28, $25, $21
(1) 1956/   C9FAA : =$0                 vcTL1 set $00
(1) 1956/   C9FAA : =$28                vcTL2 set $28
(1) 1956/   C9FAA : =$25                vcTL3 set $25
(1) 1956/   C9FAA : =$21                vcTL4 set $21
(1) 1956/   C9FAA : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1956/   C9FAB :                     ;   0     1     2     3     4     5     6     7
(1) 1956/   C9FAB :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1956/   C9FAB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1956/   C9FAB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1956/   C9FAB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1956/   C9FAB : =$80                vcTLMask1 set $80
(1) 1956/   C9FAB :                     
(1) 1956/   C9FAB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1956/   C9FAB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1956/   C9FAB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1956/   C9FAB : =$80                vcTLMask1 set $80
(1) 1956/   C9FAB : =$0                 vcTL1 set vcTL1&$7F
(1) 1956/   C9FAB : =$28                vcTL2 set vcTL2&$7F
(1) 1956/   C9FAB : =$25                vcTL3 set vcTL3&$7F
(1) 1956/   C9FAB : =$21                vcTL4 set vcTL4&$7F
(1) 1956/   C9FAB :                     
(1) 1956/   C9FAB : 2023 6001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1956/   C9FAF : 1E1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1956/   C9FB3 : 0A0A 0B0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1956/   C9FB7 : 0507 0A08                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1956/   C9FBB : A485 9678                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1956/   C9FBF : 2125 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1957/   C9FC3 :                     
(1) 1958/   C9FC3 :                     ;	Voice $22
(1) 1959/   C9FC3 :                     ;	$3A
(1) 1960/   C9FC3 :                     ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
(1) 1961/   C9FC3 :                     ;	$02, $00, $00, $00, 	$18, $18, $28, $28, 	$19, $20, $2A, $00
(1) 1962/   C9FC3 : (MACRO)             	smpsVcAlgorithm     $02
(1) 1962/   C9FC3 : =$2                 vcAlgorithm set $02
(1) 1963/   C9FC3 : (MACRO)             	smpsVcFeedback      $07
(1) 1963/   C9FC3 : =$7                 vcFeedback set $07
(1) 1964/   C9FC3 : (MACRO)             	smpsVcUnusedBits    $00
(1) 1964/   C9FC3 : =$0                 vcUnusedBits set $00
(1) 1964/   C9FC3 : =$0                 vcD1R1Unk set 0
(1) 1964/   C9FC3 : =$0                 vcD1R2Unk set 0
(1) 1964/   C9FC3 : =$0                 vcD1R3Unk set 0
(1) 1964/   C9FC3 : =$0                 vcD1R4Unk set 0
(1) 1965/   C9FC3 : (MACRO)             	smpsVcDetune        $04, $03, $05, $03
(1) 1965/   C9FC3 : =$4                 vcDT1 set $04
(1) 1965/   C9FC3 : =$3                 vcDT2 set $03
(1) 1965/   C9FC3 : =$5                 vcDT3 set $05
(1) 1965/   C9FC3 : =$3                 vcDT4 set $03
(1) 1966/   C9FC3 : (MACRO)             	smpsVcCoarseFreq    $02, $02, $06, $02
(1) 1966/   C9FC3 : =$2                 vcCF1 set $02
(1) 1966/   C9FC3 : =$2                 vcCF2 set $02
(1) 1966/   C9FC3 : =$6                 vcCF3 set $06
(1) 1966/   C9FC3 : =$2                 vcCF4 set $02
(1) 1967/   C9FC3 : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(1) 1967/   C9FC3 : =$1                 vcRS1 set $01
(1) 1967/   C9FC3 : =$0                 vcRS2 set $00
(1) 1967/   C9FC3 : =$1                 vcRS3 set $01
(1) 1967/   C9FC3 : =$2                 vcRS4 set $02
(1) 1968/   C9FC3 : (MACRO)             	smpsVcAttackRate    $12, $15, $0F, $0D
(1) 1968/   C9FC3 : =$12                vcAR1 set $12
(1) 1968/   C9FC3 : =$15                vcAR2 set $15
(1) 1968/   C9FC3 : =$F                 vcAR3 set $0F
(1) 1968/   C9FC3 : =$D                 vcAR4 set $0D
(1) 1969/   C9FC3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1969/   C9FC3 : =$0                 vcAM1 set $00<<5
(1) 1969/   C9FC3 : =$0                 vcAM2 set $00<<5
(1) 1969/   C9FC3 : =$0                 vcAM3 set $00<<5
(1) 1969/   C9FC3 : =$0                 vcAM4 set $00<<5
(1) 1970/   C9FC3 : (MACRO)             	smpsVcDecayRate1    $04, $07, $08, $06
(1) 1970/   C9FC3 : =$4                 vcD1R1 set $04
(1) 1970/   C9FC3 : =$7                 vcD1R2 set $07
(1) 1970/   C9FC3 : =$8                 vcD1R3 set $08
(1) 1970/   C9FC3 : =$6                 vcD1R4 set $06
(1) 1971/   C9FC3 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $02
(1) 1971/   C9FC3 : =$0                 vcD2R1 set $00
(1) 1971/   C9FC3 : =$0                 vcD2R2 set $00
(1) 1971/   C9FC3 : =$0                 vcD2R3 set $00
(1) 1971/   C9FC3 : =$2                 vcD2R4 set $02
(1) 1972/   C9FC3 : (MACRO)             	smpsVcDecayLevel    $02, $02, $01, $01
(1) 1972/   C9FC3 : =$2                 vcDL1 set $02
(1) 1972/   C9FC3 : =$2                 vcDL2 set $02
(1) 1972/   C9FC3 : =$1                 vcDL3 set $01
(1) 1972/   C9FC3 : =$1                 vcDL4 set $01
(1) 1973/   C9FC3 : (MACRO)             	smpsVcReleaseRate   $08, $08, $08, $08
(1) 1973/   C9FC3 : =$8                 vcRR1 set $08
(1) 1973/   C9FC3 : =$8                 vcRR2 set $08
(1) 1973/   C9FC3 : =$8                 vcRR3 set $08
(1) 1973/   C9FC3 : =$8                 vcRR4 set $08
(1) 1974/   C9FC3 : (MACRO)             	smpsVcTotalLevel    $00, $2A, $20, $19
(1) 1974/   C9FC3 : =$0                 vcTL1 set $00
(1) 1974/   C9FC3 : =$2A                vcTL2 set $2A
(1) 1974/   C9FC3 : =$20                vcTL3 set $20
(1) 1974/   C9FC3 : =$19                vcTL4 set $19
(1) 1974/   C9FC3 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1974/   C9FC4 :                     ;   0     1     2     3     4     5     6     7
(1) 1974/   C9FC4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1974/   C9FC4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1974/   C9FC4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1974/   C9FC4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1974/   C9FC4 : =$80                vcTLMask1 set $80
(1) 1974/   C9FC4 :                     
(1) 1974/   C9FC4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1974/   C9FC4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1974/   C9FC4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1974/   C9FC4 : =$80                vcTLMask1 set $80
(1) 1974/   C9FC4 : =$0                 vcTL1 set vcTL1&$7F
(1) 1974/   C9FC4 : =$2A                vcTL2 set vcTL2&$7F
(1) 1974/   C9FC4 : =$20                vcTL3 set vcTL3&$7F
(1) 1974/   C9FC4 : =$19                vcTL4 set vcTL4&$7F
(1) 1974/   C9FC4 :                     
(1) 1974/   C9FC4 : 3256 3242                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1974/   C9FC8 : 8D4F 1552                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1974/   C9FCC : 0608 0704                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1974/   C9FD0 : 0200 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1974/   C9FD4 : 1818 2828                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1974/   C9FD8 : 1920 2A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1975/   C9FDC :                     
(1) 1976/   C9FDC :                     ;	Voice $23
(1) 1977/   C9FDC :                     ;	$3A
(1) 1978/   C9FDC :                     ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
(1) 1979/   C9FDC :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
(1) 1980/   C9FDC : (MACRO)             	smpsVcAlgorithm     $02
(1) 1980/   C9FDC : =$2                 vcAlgorithm set $02
(1) 1981/   C9FDC : (MACRO)             	smpsVcFeedback      $07
(1) 1981/   C9FDC : =$7                 vcFeedback set $07
(1) 1982/   C9FDC : (MACRO)             	smpsVcUnusedBits    $00
(1) 1982/   C9FDC : =$0                 vcUnusedBits set $00
(1) 1982/   C9FDC : =$0                 vcD1R1Unk set 0
(1) 1982/   C9FDC : =$0                 vcD1R2Unk set 0
(1) 1982/   C9FDC : =$0                 vcD1R3Unk set 0
(1) 1982/   C9FDC : =$0                 vcD1R4Unk set 0
(1) 1983/   C9FDC : (MACRO)             	smpsVcDetune        $00, $05, $00, $05
(1) 1983/   C9FDC : =$0                 vcDT1 set $00
(1) 1983/   C9FDC : =$5                 vcDT2 set $05
(1) 1983/   C9FDC : =$0                 vcDT3 set $00
(1) 1983/   C9FDC : =$5                 vcDT4 set $05
(1) 1984/   C9FDC : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $01
(1) 1984/   C9FDC : =$2                 vcCF1 set $02
(1) 1984/   C9FDC : =$1                 vcCF2 set $01
(1) 1984/   C9FDC : =$8                 vcCF3 set $08
(1) 1984/   C9FDC : =$1                 vcCF4 set $01
(1) 1985/   C9FDC : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1) 1985/   C9FDC : =$0                 vcRS1 set $00
(1) 1985/   C9FDC : =$0                 vcRS2 set $00
(1) 1985/   C9FDC : =$0                 vcRS3 set $00
(1) 1985/   C9FDC : =$0                 vcRS4 set $00
(1) 1986/   C9FDC : (MACRO)             	smpsVcAttackRate    $10, $1E, $1E, $1E
(1) 1986/   C9FDC : =$10                vcAR1 set $10
(1) 1986/   C9FDC : =$1E                vcAR2 set $1E
(1) 1986/   C9FDC : =$1E                vcAR3 set $1E
(1) 1986/   C9FDC : =$1E                vcAR4 set $1E
(1) 1987/   C9FDC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 1987/   C9FDC : =$0                 vcAM1 set $00<<5
(1) 1987/   C9FDC : =$0                 vcAM2 set $00<<5
(1) 1987/   C9FDC : =$0                 vcAM3 set $00<<5
(1) 1987/   C9FDC : =$0                 vcAM4 set $00<<5
(1) 1988/   C9FDC : (MACRO)             	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1) 1988/   C9FDC : =$F                 vcD1R1 set $0F
(1) 1988/   C9FDC : =$1F                vcD1R2 set $1F
(1) 1988/   C9FDC : =$1F                vcD1R3 set $1F
(1) 1988/   C9FDC : =$1F                vcD1R4 set $1F
(1) 1989/   C9FDC : (MACRO)             	smpsVcDecayRate2    $02, $00, $00, $00
(1) 1989/   C9FDC : =$2                 vcD2R1 set $02
(1) 1989/   C9FDC : =$0                 vcD2R2 set $00
(1) 1989/   C9FDC : =$0                 vcD2R3 set $00
(1) 1989/   C9FDC : =$0                 vcD2R4 set $00
(1) 1990/   C9FDC : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1) 1990/   C9FDC : =$1                 vcDL1 set $01
(1) 1990/   C9FDC : =$0                 vcDL2 set $00
(1) 1990/   C9FDC : =$0                 vcDL3 set $00
(1) 1990/   C9FDC : =$0                 vcDL4 set $00
(1) 1991/   C9FDC : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 1991/   C9FDC : =$F                 vcRR1 set $0F
(1) 1991/   C9FDC : =$F                 vcRR2 set $0F
(1) 1991/   C9FDC : =$F                 vcRR3 set $0F
(1) 1991/   C9FDC : =$F                 vcRR4 set $0F
(1) 1992/   C9FDC : (MACRO)             	smpsVcTotalLevel    $81, $22, $24, $18
(1) 1992/   C9FDC : =$81                vcTL1 set $81
(1) 1992/   C9FDC : =$22                vcTL2 set $22
(1) 1992/   C9FDC : =$24                vcTL3 set $24
(1) 1992/   C9FDC : =$18                vcTL4 set $18
(1) 1992/   C9FDC : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 1992/   C9FDD :                     ;   0     1     2     3     4     5     6     7
(1) 1992/   C9FDD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 1992/   C9FDD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1992/   C9FDD : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1992/   C9FDD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1992/   C9FDD : =$80                vcTLMask1 set $80
(1) 1992/   C9FDD :                     
(1) 1992/   C9FDD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 1992/   C9FDD : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 1992/   C9FDD : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 1992/   C9FDD : =$80                vcTLMask1 set $80
(1) 1992/   C9FDD : =$1                 vcTL1 set vcTL1&$7F
(1) 1992/   C9FDD : =$22                vcTL2 set vcTL2&$7F
(1) 1992/   C9FDD : =$24                vcTL3 set vcTL3&$7F
(1) 1992/   C9FDD : =$18                vcTL4 set vcTL4&$7F
(1) 1992/   C9FDD :                     
(1) 1992/   C9FDD : 5108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 1992/   C9FE1 : 1E1E 1E10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 1992/   C9FE5 : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 1992/   C9FE9 : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 1992/   C9FED : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 1992/   C9FF1 : 1824 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 1993/   C9FF5 :                     
(1) 1994/   C9FF5 :                     ;	Voice $24
(1) 1995/   C9FF5 :                     ;	$20
(1) 1996/   C9FF5 :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(1) 1997/   C9FF5 :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
(1) 1998/   C9FF5 : (MACRO)             	smpsVcAlgorithm     $00
(1) 1998/   C9FF5 : =$0                 vcAlgorithm set $00
(1) 1999/   C9FF5 : (MACRO)             	smpsVcFeedback      $04
(1) 1999/   C9FF5 : =$4                 vcFeedback set $04
(1) 2000/   C9FF5 : (MACRO)             	smpsVcUnusedBits    $00
(1) 2000/   C9FF5 : =$0                 vcUnusedBits set $00
(1) 2000/   C9FF5 : =$0                 vcD1R1Unk set 0
(1) 2000/   C9FF5 : =$0                 vcD1R2Unk set 0
(1) 2000/   C9FF5 : =$0                 vcD1R3Unk set 0
(1) 2000/   C9FF5 : =$0                 vcD1R4Unk set 0
(1) 2001/   C9FF5 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1) 2001/   C9FF5 : =$3                 vcDT1 set $03
(1) 2001/   C9FF5 : =$3                 vcDT2 set $03
(1) 2001/   C9FF5 : =$3                 vcDT3 set $03
(1) 2001/   C9FF5 : =$3                 vcDT4 set $03
(1) 2002/   C9FF5 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(1) 2002/   C9FF5 : =$1                 vcCF1 set $01
(1) 2002/   C9FF5 : =$0                 vcCF2 set $00
(1) 2002/   C9FF5 : =$5                 vcCF3 set $05
(1) 2002/   C9FF5 : =$6                 vcCF4 set $06
(1) 2003/   C9FF5 : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1) 2003/   C9FF5 : =$2                 vcRS1 set $02
(1) 2003/   C9FF5 : =$2                 vcRS2 set $02
(1) 2003/   C9FF5 : =$3                 vcRS3 set $03
(1) 2003/   C9FF5 : =$3                 vcRS4 set $03
(1) 2004/   C9FF5 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1) 2004/   C9FF5 : =$1F                vcAR1 set $1F
(1) 2004/   C9FF5 : =$1F                vcAR2 set $1F
(1) 2004/   C9FF5 : =$1F                vcAR3 set $1F
(1) 2004/   C9FF5 : =$1F                vcAR4 set $1F
(1) 2005/   C9FF5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 2005/   C9FF5 : =$0                 vcAM1 set $00<<5
(1) 2005/   C9FF5 : =$0                 vcAM2 set $00<<5
(1) 2005/   C9FF5 : =$0                 vcAM3 set $00<<5
(1) 2005/   C9FF5 : =$0                 vcAM4 set $00<<5
(1) 2006/   C9FF5 : (MACRO)             	smpsVcDecayRate1    $06, $09, $06, $07
(1) 2006/   C9FF5 : =$6                 vcD1R1 set $06
(1) 2006/   C9FF5 : =$9                 vcD1R2 set $09
(1) 2006/   C9FF5 : =$6                 vcD1R3 set $06
(1) 2006/   C9FF5 : =$7                 vcD1R4 set $07
(1) 2007/   C9FF5 : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1) 2007/   C9FF5 : =$8                 vcD2R1 set $08
(1) 2007/   C9FF5 : =$6                 vcD2R2 set $06
(1) 2007/   C9FF5 : =$6                 vcD2R3 set $06
(1) 2007/   C9FF5 : =$7                 vcD2R4 set $07
(1) 2008/   C9FF5 : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1) 2008/   C9FF5 : =$F                 vcDL1 set $0F
(1) 2008/   C9FF5 : =$1                 vcDL2 set $01
(1) 2008/   C9FF5 : =$1                 vcDL3 set $01
(1) 2008/   C9FF5 : =$2                 vcDL4 set $02
(1) 2009/   C9FF5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 2009/   C9FF5 : =$F                 vcRR1 set $0F
(1) 2009/   C9FF5 : =$F                 vcRR2 set $0F
(1) 2009/   C9FF5 : =$F                 vcRR3 set $0F
(1) 2009/   C9FF5 : =$F                 vcRR4 set $0F
(1) 2010/   C9FF5 : (MACRO)             	smpsVcTotalLevel    $80, $13, $37, $19
(1) 2010/   C9FF5 : =$80                vcTL1 set $80
(1) 2010/   C9FF5 : =$13                vcTL2 set $13
(1) 2010/   C9FF5 : =$37                vcTL3 set $37
(1) 2010/   C9FF5 : =$19                vcTL4 set $19
(1) 2010/   C9FF5 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 2010/   C9FF6 :                     ;   0     1     2     3     4     5     6     7
(1) 2010/   C9FF6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 2010/   C9FF6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 2010/   C9FF6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 2010/   C9FF6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 2010/   C9FF6 : =$80                vcTLMask1 set $80
(1) 2010/   C9FF6 :                     
(1) 2010/   C9FF6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 2010/   C9FF6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 2010/   C9FF6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 2010/   C9FF6 : =$80                vcTLMask1 set $80
(1) 2010/   C9FF6 : =$0                 vcTL1 set vcTL1&$7F
(1) 2010/   C9FF6 : =$13                vcTL2 set vcTL2&$7F
(1) 2010/   C9FF6 : =$37                vcTL3 set vcTL3&$7F
(1) 2010/   C9FF6 : =$19                vcTL4 set vcTL4&$7F
(1) 2010/   C9FF6 :                     
(1) 2010/   C9FF6 : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 2010/   C9FFA : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 2010/   C9FFE : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 2010/   CA002 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 2010/   CA006 : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 2010/   CA00A : 1937 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 2011/   CA00E :                     
(1) 2012/   CA00E :                     ;	Voice $25
(1) 2013/   CA00E :                     ;	$3D
(1) 2014/   CA00E :                     ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
(1) 2015/   CA00E :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
(1) 2016/   CA00E : (MACRO)             	smpsVcAlgorithm     $05
(1) 2016/   CA00E : =$5                 vcAlgorithm set $05
(1) 2017/   CA00E : (MACRO)             	smpsVcFeedback      $07
(1) 2017/   CA00E : =$7                 vcFeedback set $07
(1) 2018/   CA00E : (MACRO)             	smpsVcUnusedBits    $00
(1) 2018/   CA00E : =$0                 vcUnusedBits set $00
(1) 2018/   CA00E : =$0                 vcD1R1Unk set 0
(1) 2018/   CA00E : =$0                 vcD1R2Unk set 0
(1) 2018/   CA00E : =$0                 vcD1R3Unk set 0
(1) 2018/   CA00E : =$0                 vcD1R4Unk set 0
(1) 2019/   CA00E : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1) 2019/   CA00E : =$0                 vcDT1 set $00
(1) 2019/   CA00E : =$0                 vcDT2 set $00
(1) 2019/   CA00E : =$0                 vcDT3 set $00
(1) 2019/   CA00E : =$0                 vcDT4 set $00
(1) 2020/   CA00E : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $01
(1) 2020/   CA00E : =$2                 vcCF1 set $02
(1) 2020/   CA00E : =$2                 vcCF2 set $02
(1) 2020/   CA00E : =$2                 vcCF3 set $02
(1) 2020/   CA00E : =$1                 vcCF4 set $01
(1) 2021/   CA00E : (MACRO)             	smpsVcRateScale     $00, $02, $00, $00
(1) 2021/   CA00E : =$0                 vcRS1 set $00
(1) 2021/   CA00E : =$2                 vcRS2 set $02
(1) 2021/   CA00E : =$0                 vcRS3 set $00
(1) 2021/   CA00E : =$0                 vcRS4 set $00
(1) 2022/   CA00E : (MACRO)             	smpsVcAttackRate    $0E, $0C, $0E, $14
(1) 2022/   CA00E : =$E                 vcAR1 set $0E
(1) 2022/   CA00E : =$C                 vcAR2 set $0C
(1) 2022/   CA00E : =$E                 vcAR3 set $0E
(1) 2022/   CA00E : =$14                vcAR4 set $14
(1) 2023/   CA00E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1) 2023/   CA00E : =$0                 vcAM1 set $00<<5
(1) 2023/   CA00E : =$0                 vcAM2 set $00<<5
(1) 2023/   CA00E : =$0                 vcAM3 set $00<<5
(1) 2023/   CA00E : =$0                 vcAM4 set $00<<5
(1) 2024/   CA00E : (MACRO)             	smpsVcDecayRate1    $05, $02, $05, $08
(1) 2024/   CA00E : =$5                 vcD1R1 set $05
(1) 2024/   CA00E : =$2                 vcD1R2 set $02
(1) 2024/   CA00E : =$5                 vcD1R3 set $05
(1) 2024/   CA00E : =$8                 vcD1R4 set $08
(1) 2025/   CA00E : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1) 2025/   CA00E : =$0                 vcD2R1 set $00
(1) 2025/   CA00E : =$0                 vcD2R2 set $00
(1) 2025/   CA00E : =$0                 vcD2R3 set $00
(1) 2025/   CA00E : =$0                 vcD2R4 set $00
(1) 2026/   CA00E : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(1) 2026/   CA00E : =$1                 vcDL1 set $01
(1) 2026/   CA00E : =$1                 vcDL2 set $01
(1) 2026/   CA00E : =$1                 vcDL3 set $01
(1) 2026/   CA00E : =$1                 vcDL4 set $01
(1) 2027/   CA00E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1) 2027/   CA00E : =$F                 vcRR1 set $0F
(1) 2027/   CA00E : =$F                 vcRR2 set $0F
(1) 2027/   CA00E : =$F                 vcRR3 set $0F
(1) 2027/   CA00E : =$F                 vcRR4 set $0F
(1) 2028/   CA00E : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $1A
(1) 2028/   CA00E : =$80                vcTL1 set $80
(1) 2028/   CA00E : =$80                vcTL2 set $80
(1) 2028/   CA00E : =$80                vcTL3 set $80
(1) 2028/   CA00E : =$1A                vcTL4 set $1A
(1) 2028/   CA00E : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1) 2028/   CA00F :                     ;   0     1     2     3     4     5     6     7
(1) 2028/   CA00F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1) 2028/   CA00F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 2028/   CA00F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 2028/   CA00F : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 2028/   CA00F : =$80                vcTLMask1 set $80
(1) 2028/   CA00F :                     
(1) 2028/   CA00F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1) 2028/   CA00F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1) 2028/   CA00F : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1) 2028/   CA00F : =$80                vcTLMask1 set $80
(1) 2028/   CA00F : =$0                 vcTL1 set vcTL1&$7F
(1) 2028/   CA00F : =$0                 vcTL2 set vcTL2&$7F
(1) 2028/   CA00F : =$0                 vcTL3 set vcTL3&$7F
(1) 2028/   CA00F : =$1A                vcTL4 set vcTL4&$7F
(1) 2028/   CA00F :                     
(1) 2028/   CA00F : 0102 0202                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1) 2028/   CA013 : 140E 8C0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1) 2028/   CA017 : 0805 0205                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1) 2028/   CA01B : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1) 2028/   CA01F : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1) 2028/   CA023 : 1A80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1) 2029/   CA027 :                     
(1) 2030/   CA027 :                     
   72/   CA027 :                        Music_1F:	include		"music-improved/9F - Drowning.asm"      
(1)    1/   CA027 :                     Drowning_Header:
(1)    2/   CA027 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   CA027 :                     
(1)    2/   CA027 : =$2                 SourceDriver set 2
(1)    2/   CA027 :                     
(1)    2/   CA027 : =$0                 SourceSMPS2ASM set 0
(1)    2/   CA027 :                     
(1)    2/   CA027 : =$CA027             songStart set *
(1)    2/   CA027 :                     
(1)    2/   CA027 :                     
(1)    3/   CA027 : (MACRO)             	smpsHeaderVoice     Drowning_Voices
(1)    3/   CA027 : EDA0                                dc.w    z80_ptr(DROWNING_VOICES)
(1)    4/   CA029 : (MACRO)             	smpsHeaderChan      $06, $00
(1)    4/   CA029 : 0600                        dc.b    $06,$00
(1)    5/   CA02B : (MACRO)             	smpsHeaderTempo     $01, $80
(1)    5/   CA02B : 01                          dc.b    $01
(1)    5/   CA02C :  (MACRO-2)                  convertMainTempoMod $80
(1)    5/   CA02C : 80                                          dc.b    s2TempotoS3($80)
(1)    6/   CA02D :                     
(1)    7/   CA02D : (MACRO)             	smpsHeaderDAC       Drowning_DAC
(1)    7/   CA02D :  (MACRO-2)                  CheckedChannelPointer DROWNING_DAC
(1)    7/   CA02D : CDA0                                dc.w    z80_ptr(DROWNING_DAC)
(1)    7/   CA02F : 0000                                dc.w    $00
(1)    8/   CA031 : (MACRO)             	smpsHeaderFM        Drowning_FM1,	$0C, $08
(1)    8/   CA031 :  (MACRO-2)                  CheckedChannelPointer DROWNING_FM1
(1)    8/   CA031 : 45A0                                dc.w    z80_ptr(DROWNING_FM1)
(1)    8/   CA033 : 0C08                        dc.b    $0C,$08
(1)    9/   CA035 : (MACRO)             	smpsHeaderFM        Drowning_FM2,	$E8, $0E
(1)    9/   CA035 :  (MACRO-2)                  CheckedChannelPointer DROWNING_FM2
(1)    9/   CA035 : 67A0                                dc.w    z80_ptr(DROWNING_FM2)
(1)    9/   CA037 : E80E                        dc.b    $E8,$0E
(1)   10/   CA039 : (MACRO)             	smpsHeaderFM        Drowning_FM3,	$F4, $40
(1)   10/   CA039 :  (MACRO-2)                  CheckedChannelPointer DROWNING_FM3
(1)   10/   CA039 : 76A0                                dc.w    z80_ptr(DROWNING_FM3)
(1)   10/   CA03B : F440                        dc.b    $F4,$40
(1)   11/   CA03D : (MACRO)             	smpsHeaderFM        Drowning_FM4,	$06, $11
(1)   11/   CA03D :  (MACRO-2)                  CheckedChannelPointer DROWNING_FM4
(1)   11/   CA03D : 93A0                                dc.w    z80_ptr(DROWNING_FM4)
(1)   11/   CA03F : 0611                        dc.b    $06,$11
(1)   12/   CA041 : (MACRO)             	smpsHeaderFM        Drowning_FM5,	$0C, $19
(1)   12/   CA041 :  (MACRO-2)                  CheckedChannelPointer DROWNING_FM5
(1)   12/   CA041 : B0A0                                dc.w    z80_ptr(DROWNING_FM5)
(1)   12/   CA043 : 0C19                        dc.b    $0C,$19
(1)   13/   CA045 :                     
(1)   14/   CA045 :                     ; FM1 Data
(1)   15/   CA045 :                     Drowning_FM1:
(1)   16/   CA045 : (MACRO)             	smpsSetvoice        $00
(1)   16/   CA045 :  (MACRO-2)                  smpsFMvoice $00
(1)   16/   CA045 : EF00                                dc.b    $EF,$00
(1)   17/   CA047 : (MACRO)             	smpsNop             $01
(1)   18/   CA047 : (MACRO)             	smpsNoteFill        $05
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   18/   CA047 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   18/   CA047 : E805                                dc.b    $E8,$05
(1)   19/   CA049 : (MACRO)             	smpsCall            Drowning_Call01
(1)   19/   CA049 : F8                          dc.b    $F8
(1)   19/   CA04A : DAA0                                dc.w    z80_ptr(DROWNING_CALL01)
(1)   20/   CA04C : (MACRO)             	smpsSetTempoMod     $AB
(1)   20/   CA04C : FF00                                dc.b    $FF,$00
(1)   20/   CA04E :  (MACRO-2)                  convertMainTempoMod $AB
(1)   20/   CA04E : 55                                          dc.b    s2TempotoS3($AB)
(1)   21/   CA04F : (MACRO)             	smpsCall            Drowning_Call01
(1)   21/   CA04F : F8                          dc.b    $F8
(1)   21/   CA050 : DAA0                                dc.w    z80_ptr(DROWNING_CALL01)
(1)   22/   CA052 : (MACRO)             	smpsSetTempoMod     $C0
(1)   22/   CA052 : FF00                                dc.b    $FF,$00
(1)   22/   CA054 :  (MACRO-2)                  convertMainTempoMod $C0
(1)   22/   CA054 : 40                                          dc.b    s2TempotoS3($C0)
(1)   23/   CA055 : (MACRO)             	smpsCall            Drowning_Call01
(1)   23/   CA055 : F8                          dc.b    $F8
(1)   23/   CA056 : DAA0                                dc.w    z80_ptr(DROWNING_CALL01)
(1)   24/   CA058 : (MACRO)             	smpsSetTempoMod     $D6
(1)   24/   CA058 : FF00                                dc.b    $FF,$00
(1)   24/   CA05A :  (MACRO-2)                  convertMainTempoMod $D6
(1)   24/   CA05A : 2A                                          dc.b    s2TempotoS3($D6)
(1)   25/   CA05B : (MACRO)             	smpsCall            Drowning_Call01
(1)   25/   CA05B : F8                          dc.b    $F8
(1)   25/   CA05C : DAA0                                dc.w    z80_ptr(DROWNING_CALL01)
(1)   26/   CA05E : (MACRO)             	smpsSetTempoMod     $E7
(1)   26/   CA05E : FF00                                dc.b    $FF,$00
(1)   26/   CA060 :  (MACRO-2)                  convertMainTempoMod $E7
(1)   26/   CA060 : 19                                          dc.b    s2TempotoS3($E7)
(1)   27/   CA061 : (MACRO)             	smpsCall            Drowning_Call01
(1)   27/   CA061 : F8                          dc.b    $F8
(1)   27/   CA062 : DAA0                                dc.w    z80_ptr(DROWNING_CALL01)
(1)   28/   CA064 : BD06                	dc.b	nC5, $06
(1)   29/   CA066 : (MACRO)             	smpsNop             $01
(1)   30/   CA066 : (MACRO)             	smpsStop
(1)   30/   CA066 : F2                          dc.b    $F2
(1)   31/   CA067 :                     
(1)   32/   CA067 :                     ; FM2 Data
(1)   33/   CA067 :                     Drowning_FM2:
(1)   34/   CA067 : (MACRO)             	smpsSetvoice        $01
(1)   34/   CA067 :  (MACRO-2)                  smpsFMvoice $01
(1)   34/   CA067 : EF01                                dc.b    $EF,$01
(1)   35/   CA069 :                     
(1)   36/   CA069 :                     Drowning_Loop03:
(1)   37/   CA069 : (MACRO)             	smpsAlterVol        $FF
(1)   37/   CA069 : E6FF                        dc.b    $E6,$FF
(1)   38/   CA06B : (MACRO)             	smpsCall            Drowning_Call00
(1)   38/   CA06B : F8                          dc.b    $F8
(1)   38/   CA06C : E3A0                                dc.w    z80_ptr(DROWNING_CALL00)
(1)   39/   CA06E : (MACRO)             	smpsLoop            $00, $0A, Drowning_Loop03
(1)   39/   CA06E : F7                          dc.b    $F7
(1)   39/   CA06F : 000A                        dc.b    $00,$0A
(1)   39/   CA071 : 69A0                                dc.w    z80_ptr(DROWNING_LOOP03)
(1)   40/   CA073 : BD06                	dc.b	nC5, $06
(1)   41/   CA075 : (MACRO)             	smpsStop
(1)   41/   CA075 : F2                          dc.b    $F2
(1)   42/   CA076 :                     
(1)   43/   CA076 :                     ; FM3 Data
(1)   44/   CA076 :                     Drowning_FM3:
(1)   45/   CA076 : (MACRO)             	smpsSetvoice        $02
(1)   45/   CA076 :  (MACRO-2)                  smpsFMvoice $02
(1)   45/   CA076 : EF02                                dc.b    $EF,$02
(1)   46/   CA078 :                     
(1)   47/   CA078 :                     Drowning_Loop02:
(1)   48/   CA078 : (MACRO)             	smpsAlterVol        $FE
(1)   48/   CA078 : E6FE                        dc.b    $E6,$FE
(1)   49/   CA07A : E7C9 02E7 CAE7 C9E7 	dc.b	smpsNoAttack, nC6, $02, smpsNoAttack, nCs6, smpsNoAttack, nC6, smpsNoAttack, nCs6, smpsNoAttack, nC6, smpsNoAttack
            CA082 : CAE7 C9E7         
(1)   50/   CA086 : CAE7 C9E7 CA        	dc.b	nCs6, smpsNoAttack, nC6, smpsNoAttack, nCs6
(1)   51/   CA08B : (MACRO)             	smpsLoop            $00, $1E, Drowning_Loop02
(1)   51/   CA08B : F7                          dc.b    $F7
(1)   51/   CA08C : 001E                        dc.b    $00,$1E
(1)   51/   CA08E : 78A0                                dc.w    z80_ptr(DROWNING_LOOP02)
(1)   52/   CA090 : C906                	dc.b	nC6, $06
(1)   53/   CA092 : (MACRO)             	smpsStop
(1)   53/   CA092 : F2                          dc.b    $F2
(1)   54/   CA093 :                     
(1)   55/   CA093 :                     ; FM4 Data
(1)   56/   CA093 :                     Drowning_FM4:
(1)   57/   CA093 : (MACRO)             	smpsSetvoice        $03
(1)   57/   CA093 :  (MACRO-2)                  smpsFMvoice $03
(1)   57/   CA093 : EF03                                dc.b    $EF,$03
(1)   58/   CA095 : (MACRO)             	smpsNoteFill        $05
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   58/   CA095 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   58/   CA095 : E805                                dc.b    $E8,$05
(1)   59/   CA097 : 8003                	dc.b	nRst, $03
(1)   60/   CA099 :                     
(1)   61/   CA099 :                     Drowning_Loop01:
(1)   62/   CA099 : (MACRO)             	smpsPan             panRight, $00
(1)   62/   CA099 : =$0                 panNone set $00
(1)   62/   CA099 : =$40                panRight set $40
(1)   62/   CA099 : =$80                panLeft set $80
(1)   62/   CA099 : =$C0                panCentre set $C0
(1)   62/   CA099 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   62/   CA099 : E040                        dc.b $E0,PANRIGHT+$00
(1)   63/   CA09B : B106 BD             	dc.b	nC4, $06, nC5
(1)   64/   CA09E : (MACRO)             	smpsPan             panCenter, $00
(1)   64/   CA09E : =$0                 panNone set $00
(1)   64/   CA09E : =$40                panRight set $40
(1)   64/   CA09E : =$80                panLeft set $80
(1)   64/   CA09E : =$C0                panCentre set $C0
(1)   64/   CA09E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   64/   CA09E : E0C0                        dc.b $E0,PANCENTER+$00
(1)   65/   CA0A0 : B1BD                	dc.b	nC4, nC5
(1)   66/   CA0A2 : (MACRO)             	smpsPan             panLeft, $00
(1)   66/   CA0A2 : =$0                 panNone set $00
(1)   66/   CA0A2 : =$40                panRight set $40
(1)   66/   CA0A2 : =$80                panLeft set $80
(1)   66/   CA0A2 : =$C0                panCentre set $C0
(1)   66/   CA0A2 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   66/   CA0A2 : E080                        dc.b $E0,PANLEFT+$00
(1)   67/   CA0A4 : B2BE                	dc.b	nCs4, nCs5
(1)   68/   CA0A6 : (MACRO)             	smpsPan             panCenter, $00
(1)   68/   CA0A6 : =$0                 panNone set $00
(1)   68/   CA0A6 : =$40                panRight set $40
(1)   68/   CA0A6 : =$80                panLeft set $80
(1)   68/   CA0A6 : =$C0                panCentre set $C0
(1)   68/   CA0A6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   68/   CA0A6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   69/   CA0A8 : B2BE                	dc.b	nCs4, nCs5
(1)   70/   CA0AA : (MACRO)             	smpsLoop            $00, $0A, Drowning_Loop01
(1)   70/   CA0AA : F7                          dc.b    $F7
(1)   70/   CA0AB : 000A                        dc.b    $00,$0A
(1)   70/   CA0AD : 99A0                                dc.w    z80_ptr(DROWNING_LOOP01)
(1)   71/   CA0AF : (MACRO)             	smpsStop
(1)   71/   CA0AF : F2                          dc.b    $F2
(1)   72/   CA0B0 :                     
(1)   73/   CA0B0 :                     ; FM5 Data
(1)   74/   CA0B0 :                     Drowning_FM5:
(1)   75/   CA0B0 : (MACRO)             	smpsSetvoice        $00
(1)   75/   CA0B0 :  (MACRO-2)                  smpsFMvoice $00
(1)   75/   CA0B0 : EF00                                dc.b    $EF,$00
(1)   76/   CA0B2 : (MACRO)             	smpsNoteFill        $05
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   76/   CA0B2 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   76/   CA0B2 : E805                                dc.b    $E8,$05
(1)   77/   CA0B4 : 8004                	dc.b	nRst, $04
(1)   78/   CA0B6 :                     
(1)   79/   CA0B6 :                     Drowning_Loop00:
(1)   80/   CA0B6 : (MACRO)             	smpsPan             panLeft, $00
(1)   80/   CA0B6 : =$0                 panNone set $00
(1)   80/   CA0B6 : =$40                panRight set $40
(1)   80/   CA0B6 : =$80                panLeft set $80
(1)   80/   CA0B6 : =$C0                panCentre set $C0
(1)   80/   CA0B6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   80/   CA0B6 : E080                        dc.b $E0,PANLEFT+$00
(1)   81/   CA0B8 : B106 BD             	dc.b	nC4, $06, nC5
(1)   82/   CA0BB : (MACRO)             	smpsPan             panLeft, $00
(1)   82/   CA0BB : =$0                 panNone set $00
(1)   82/   CA0BB : =$40                panRight set $40
(1)   82/   CA0BB : =$80                panLeft set $80
(1)   82/   CA0BB : =$C0                panCentre set $C0
(1)   82/   CA0BB : =$C0                panCenter set $C0 ; silly Americans :U
(1)   82/   CA0BB : E080                        dc.b $E0,PANLEFT+$00
(1)   83/   CA0BD : B1BD                	dc.b	nC4, nC5
(1)   84/   CA0BF : (MACRO)             	smpsPan             panRight, $00
(1)   84/   CA0BF : =$0                 panNone set $00
(1)   84/   CA0BF : =$40                panRight set $40
(1)   84/   CA0BF : =$80                panLeft set $80
(1)   84/   CA0BF : =$C0                panCentre set $C0
(1)   84/   CA0BF : =$C0                panCenter set $C0 ; silly Americans :U
(1)   84/   CA0BF : E040                        dc.b $E0,PANRIGHT+$00
(1)   85/   CA0C1 : B2BE                	dc.b	nCs4, nCs5
(1)   86/   CA0C3 : (MACRO)             	smpsPan             panRight, $00
(1)   86/   CA0C3 : =$0                 panNone set $00
(1)   86/   CA0C3 : =$40                panRight set $40
(1)   86/   CA0C3 : =$80                panLeft set $80
(1)   86/   CA0C3 : =$C0                panCentre set $C0
(1)   86/   CA0C3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   86/   CA0C3 : E040                        dc.b $E0,PANRIGHT+$00
(1)   87/   CA0C5 : B2BE                	dc.b	nCs4, nCs5
(1)   88/   CA0C7 : (MACRO)             	smpsLoop            $00, $0A, Drowning_Loop00
(1)   88/   CA0C7 : F7                          dc.b    $F7
(1)   88/   CA0C8 : 000A                        dc.b    $00,$0A
(1)   88/   CA0CA : B6A0                                dc.w    z80_ptr(DROWNING_LOOP00)
(1)   89/   CA0CC : (MACRO)             	smpsStop
(1)   89/   CA0CC : F2                          dc.b    $F2
(1)   90/   CA0CD :                     
(1)   91/   CA0CD :                     ; DAC Data
(1)   92/   CA0CD :                     Drowning_DAC:
(1)   93/   CA0CD : 820C 8282 82        	dc.b	dSnare, $0C, dSnare, dSnare, dSnare
(1)   94/   CA0D2 : (MACRO)             	smpsLoop            $00, $0A, Drowning_DAC
(1)   94/   CA0D2 : F7                          dc.b    $F7
(1)   94/   CA0D3 : 000A                        dc.b    $00,$0A
(1)   94/   CA0D5 : CDA0                                dc.w    z80_ptr(DROWNING_DAC)
(1)   95/   CA0D7 : 8206                	dc.b	dSnare, $06
(1)   96/   CA0D9 : (MACRO)             	smpsStop
(1)   96/   CA0D9 : F2                          dc.b    $F2
(1)   97/   CA0DA :                     
(1)   98/   CA0DA :                     Drowning_Call01:
(1)   99/   CA0DA : B106 BDB1 BDB2 BEB2 	dc.b	nC4, $06, nC5, nC4, nC5, nCs4, nCs5, nCs4, nCs5
            CA0E2 : BE               
(1)  100/   CA0E3 :                     
(1)  101/   CA0E3 :                     Drowning_Call00:
(1)  102/   CA0E3 : B106 BDB1 BDB2 BEB2 	dc.b	nC4, $06, nC5, nC4, nC5, nCs4, nCs5, nCs4, nCs5
            CA0EB : BE               
(1)  103/   CA0EC : (MACRO)             	smpsReturn
(1)  103/   CA0EC : F9                                  dc.b    $F9
(1)  104/   CA0ED :                     
(1)  105/   CA0ED :                     Drowning_Voices:
(1)  106/   CA0ED :                     ;	Voice $00
(1)  107/   CA0ED :                     ;	$3C
(1)  108/   CA0ED :                     ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
(1)  109/   CA0ED :                     ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
(1)  110/   CA0ED : (MACRO)             	smpsVcAlgorithm     $04
(1)  110/   CA0ED : =$4                 vcAlgorithm set $04
(1)  111/   CA0ED : (MACRO)             	smpsVcFeedback      $07
(1)  111/   CA0ED : =$7                 vcFeedback set $07
(1)  112/   CA0ED : (MACRO)             	smpsVcUnusedBits    $00
(1)  112/   CA0ED : =$0                 vcUnusedBits set $00
(1)  112/   CA0ED : =$0                 vcD1R1Unk set 0
(1)  112/   CA0ED : =$0                 vcD1R2Unk set 0
(1)  112/   CA0ED : =$0                 vcD1R3Unk set 0
(1)  112/   CA0ED : =$0                 vcD1R4Unk set 0
(1)  113/   CA0ED : (MACRO)             	smpsVcDetune        $03, $05, $05, $03
(1)  113/   CA0ED : =$3                 vcDT1 set $03
(1)  113/   CA0ED : =$5                 vcDT2 set $05
(1)  113/   CA0ED : =$5                 vcDT3 set $05
(1)  113/   CA0ED : =$3                 vcDT4 set $03
(1)  114/   CA0ED : (MACRO)             	smpsVcCoarseFreq    $00, $00, $02, $01
(1)  114/   CA0ED : =$0                 vcCF1 set $00
(1)  114/   CA0ED : =$0                 vcCF2 set $00
(1)  114/   CA0ED : =$2                 vcCF3 set $02
(1)  114/   CA0ED : =$1                 vcCF4 set $01
(1)  115/   CA0ED : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  115/   CA0ED : =$1                 vcRS1 set $01
(1)  115/   CA0ED : =$1                 vcRS2 set $01
(1)  115/   CA0ED : =$1                 vcRS3 set $01
(1)  115/   CA0ED : =$1                 vcRS4 set $01
(1)  116/   CA0ED : (MACRO)             	smpsVcAttackRate    $13, $12, $13, $12
(1)  116/   CA0ED : =$13                vcAR1 set $13
(1)  116/   CA0ED : =$12                vcAR2 set $12
(1)  116/   CA0ED : =$13                vcAR3 set $13
(1)  116/   CA0ED : =$12                vcAR4 set $12
(1)  117/   CA0ED : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  117/   CA0ED : =$0                 vcAM1 set $00<<5
(1)  117/   CA0ED : =$0                 vcAM2 set $00<<5
(1)  117/   CA0ED : =$0                 vcAM3 set $00<<5
(1)  117/   CA0ED : =$0                 vcAM4 set $00<<5
(1)  118/   CA0ED : (MACRO)             	smpsVcDecayRate1    $00, $08, $00, $08
(1)  118/   CA0ED : =$0                 vcD1R1 set $00
(1)  118/   CA0ED : =$8                 vcD1R2 set $08
(1)  118/   CA0ED : =$0                 vcD1R3 set $00
(1)  118/   CA0ED : =$8                 vcD1R4 set $08
(1)  119/   CA0ED : (MACRO)             	smpsVcDecayRate2    $00, $04, $00, $04
(1)  119/   CA0ED : =$0                 vcD2R1 set $00
(1)  119/   CA0ED : =$4                 vcD2R2 set $04
(1)  119/   CA0ED : =$0                 vcD2R3 set $00
(1)  119/   CA0ED : =$4                 vcD2R4 set $04
(1)  120/   CA0ED : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)  120/   CA0ED : =$0                 vcDL1 set $00
(1)  120/   CA0ED : =$1                 vcDL2 set $01
(1)  120/   CA0ED : =$0                 vcDL3 set $00
(1)  120/   CA0ED : =$1                 vcDL4 set $01
(1)  121/   CA0ED : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  121/   CA0ED : =$F                 vcRR1 set $0F
(1)  121/   CA0ED : =$F                 vcRR2 set $0F
(1)  121/   CA0ED : =$F                 vcRR3 set $0F
(1)  121/   CA0ED : =$F                 vcRR4 set $0F
(1)  122/   CA0ED : (MACRO)             	smpsVcTotalLevel    $00, $16, $00, $1A
(1)  122/   CA0ED : =$0                 vcTL1 set $00
(1)  122/   CA0ED : =$16                vcTL2 set $16
(1)  122/   CA0ED : =$0                 vcTL3 set $00
(1)  122/   CA0ED : =$1A                vcTL4 set $1A
(1)  122/   CA0ED : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  122/   CA0EE :                     ;   0     1     2     3     4     5     6     7
(1)  122/   CA0EE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  122/   CA0EE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  122/   CA0EE : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  122/   CA0EE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  122/   CA0EE : =$80                vcTLMask1 set $80
(1)  122/   CA0EE :                     
(1)  122/   CA0EE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  122/   CA0EE : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  122/   CA0EE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  122/   CA0EE : =$80                vcTLMask1 set $80
(1)  122/   CA0EE : =$0                 vcTL1 set vcTL1&$7F
(1)  122/   CA0EE : =$16                vcTL2 set vcTL2&$7F
(1)  122/   CA0EE : =$0                 vcTL3 set vcTL3&$7F
(1)  122/   CA0EE : =$1A                vcTL4 set vcTL4&$7F
(1)  122/   CA0EE :                     
(1)  122/   CA0EE : 3152 5030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  122/   CA0F2 : 5253 5253                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  122/   CA0F6 : 0800 0800                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  122/   CA0FA : 0400 0400                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  122/   CA0FE : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  122/   CA102 : 1A80 1680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  123/   CA106 :                     
(1)  124/   CA106 :                     ;	Voice $01
(1)  125/   CA106 :                     ;	$18
(1)  126/   CA106 :                     ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
(1)  127/   CA106 :                     ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
(1)  128/   CA106 : (MACRO)             	smpsVcAlgorithm     $00
(1)  128/   CA106 : =$0                 vcAlgorithm set $00
(1)  129/   CA106 : (MACRO)             	smpsVcFeedback      $03
(1)  129/   CA106 : =$3                 vcFeedback set $03
(1)  130/   CA106 : (MACRO)             	smpsVcUnusedBits    $00
(1)  130/   CA106 : =$0                 vcUnusedBits set $00
(1)  130/   CA106 : =$0                 vcD1R1Unk set 0
(1)  130/   CA106 : =$0                 vcD1R2Unk set 0
(1)  130/   CA106 : =$0                 vcD1R3Unk set 0
(1)  130/   CA106 : =$0                 vcD1R4Unk set 0
(1)  131/   CA106 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)  131/   CA106 : =$3                 vcDT1 set $03
(1)  131/   CA106 : =$3                 vcDT2 set $03
(1)  131/   CA106 : =$3                 vcDT3 set $03
(1)  131/   CA106 : =$3                 vcDT4 set $03
(1)  132/   CA106 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $00, $07
(1)  132/   CA106 : =$1                 vcCF1 set $01
(1)  132/   CA106 : =$0                 vcCF2 set $00
(1)  132/   CA106 : =$0                 vcCF3 set $00
(1)  132/   CA106 : =$7                 vcCF4 set $07
(1)  133/   CA106 : (MACRO)             	smpsVcRateScale     $02, $00, $03, $02
(1)  133/   CA106 : =$2                 vcRS1 set $02
(1)  133/   CA106 : =$0                 vcRS2 set $00
(1)  133/   CA106 : =$3                 vcRS3 set $03
(1)  133/   CA106 : =$2                 vcRS4 set $02
(1)  134/   CA106 : (MACRO)             	smpsVcAttackRate    $1C, $1C, $1C, $1E
(1)  134/   CA106 : =$1C                vcAR1 set $1C
(1)  134/   CA106 : =$1C                vcAR2 set $1C
(1)  134/   CA106 : =$1C                vcAR3 set $1C
(1)  134/   CA106 : =$1E                vcAR4 set $1E
(1)  135/   CA106 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  135/   CA106 : =$0                 vcAM1 set $00<<5
(1)  135/   CA106 : =$0                 vcAM2 set $00<<5
(1)  135/   CA106 : =$0                 vcAM3 set $00<<5
(1)  135/   CA106 : =$0                 vcAM4 set $00<<5
(1)  136/   CA106 : (MACRO)             	smpsVcDecayRate1    $01, $04, $06, $0D
(1)  136/   CA106 : =$1                 vcD1R1 set $01
(1)  136/   CA106 : =$4                 vcD1R2 set $04
(1)  136/   CA106 : =$6                 vcD1R3 set $06
(1)  136/   CA106 : =$D                 vcD1R4 set $0D
(1)  137/   CA106 : (MACRO)             	smpsVcDecayRate2    $05, $03, $0A, $08
(1)  137/   CA106 : =$5                 vcD2R1 set $05
(1)  137/   CA106 : =$3                 vcD2R2 set $03
(1)  137/   CA106 : =$A                 vcD2R3 set $0A
(1)  137/   CA106 : =$8                 vcD2R4 set $08
(1)  138/   CA106 : (MACRO)             	smpsVcDecayLevel    $02, $03, $0B, $0B
(1)  138/   CA106 : =$2                 vcDL1 set $02
(1)  138/   CA106 : =$3                 vcDL2 set $03
(1)  138/   CA106 : =$B                 vcDL3 set $0B
(1)  138/   CA106 : =$B                 vcDL4 set $0B
(1)  139/   CA106 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  139/   CA106 : =$F                 vcRR1 set $0F
(1)  139/   CA106 : =$F                 vcRR2 set $0F
(1)  139/   CA106 : =$F                 vcRR3 set $0F
(1)  139/   CA106 : =$F                 vcRR4 set $0F
(1)  140/   CA106 : (MACRO)             	smpsVcTotalLevel    $00, $14, $22, $2C
(1)  140/   CA106 : =$0                 vcTL1 set $00
(1)  140/   CA106 : =$14                vcTL2 set $14
(1)  140/   CA106 : =$22                vcTL3 set $22
(1)  140/   CA106 : =$2C                vcTL4 set $2C
(1)  140/   CA106 : 18                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  140/   CA107 :                     ;   0     1     2     3     4     5     6     7
(1)  140/   CA107 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  140/   CA107 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  140/   CA107 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  140/   CA107 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  140/   CA107 : =$80                vcTLMask1 set $80
(1)  140/   CA107 :                     
(1)  140/   CA107 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  140/   CA107 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  140/   CA107 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  140/   CA107 : =$80                vcTLMask1 set $80
(1)  140/   CA107 : =$0                 vcTL1 set vcTL1&$7F
(1)  140/   CA107 : =$14                vcTL2 set vcTL2&$7F
(1)  140/   CA107 : =$22                vcTL3 set vcTL3&$7F
(1)  140/   CA107 : =$2C                vcTL4 set vcTL4&$7F
(1)  140/   CA107 :                     
(1)  140/   CA107 : 3730 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  140/   CA10B : 9EDC 1C9C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  140/   CA10F : 0D06 0401                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  140/   CA113 : 080A 0305                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  140/   CA117 : BFBF 3F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  140/   CA11B : 2C22 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  141/   CA11F :                     
(1)  142/   CA11F :                     ;	Voice $02
(1)  143/   CA11F :                     ;	$2C
(1)  144/   CA11F :                     ;	$52, $58, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
(1)  145/   CA11F :                     ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$15, $82, $14, $82
(1)  146/   CA11F : (MACRO)             	smpsVcAlgorithm     $04
(1)  146/   CA11F : =$4                 vcAlgorithm set $04
(1)  147/   CA11F : (MACRO)             	smpsVcFeedback      $05
(1)  147/   CA11F : =$5                 vcFeedback set $05
(1)  148/   CA11F : (MACRO)             	smpsVcUnusedBits    $00
(1)  148/   CA11F : =$0                 vcUnusedBits set $00
(1)  148/   CA11F : =$0                 vcD1R1Unk set 0
(1)  148/   CA11F : =$0                 vcD1R2Unk set 0
(1)  148/   CA11F : =$0                 vcD1R3Unk set 0
(1)  148/   CA11F : =$0                 vcD1R4Unk set 0
(1)  149/   CA11F : (MACRO)             	smpsVcDetune        $03, $03, $05, $05
(1)  149/   CA11F : =$3                 vcDT1 set $03
(1)  149/   CA11F : =$3                 vcDT2 set $03
(1)  149/   CA11F : =$5                 vcDT3 set $05
(1)  149/   CA11F : =$5                 vcDT4 set $05
(1)  150/   CA11F : (MACRO)             	smpsVcCoarseFreq    $04, $04, $08, $02
(1)  150/   CA11F : =$4                 vcCF1 set $04
(1)  150/   CA11F : =$4                 vcCF2 set $04
(1)  150/   CA11F : =$8                 vcCF3 set $08
(1)  150/   CA11F : =$2                 vcCF4 set $02
(1)  151/   CA11F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  151/   CA11F : =$0                 vcRS1 set $00
(1)  151/   CA11F : =$0                 vcRS2 set $00
(1)  151/   CA11F : =$0                 vcRS3 set $00
(1)  151/   CA11F : =$0                 vcRS4 set $00
(1)  152/   CA11F : (MACRO)             	smpsVcAttackRate    $12, $1F, $12, $1F
(1)  152/   CA11F : =$12                vcAR1 set $12
(1)  152/   CA11F : =$1F                vcAR2 set $1F
(1)  152/   CA11F : =$12                vcAR3 set $12
(1)  152/   CA11F : =$1F                vcAR4 set $1F
(1)  153/   CA11F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  153/   CA11F : =$0                 vcAM1 set $00<<5
(1)  153/   CA11F : =$0                 vcAM2 set $00<<5
(1)  153/   CA11F : =$0                 vcAM3 set $00<<5
(1)  153/   CA11F : =$0                 vcAM4 set $00<<5
(1)  154/   CA11F : (MACRO)             	smpsVcDecayRate1    $0A, $00, $0A, $00
(1)  154/   CA11F : =$A                 vcD1R1 set $0A
(1)  154/   CA11F : =$0                 vcD1R2 set $00
(1)  154/   CA11F : =$A                 vcD1R3 set $0A
(1)  154/   CA11F : =$0                 vcD1R4 set $00
(1)  155/   CA11F : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  155/   CA11F : =$0                 vcD2R1 set $00
(1)  155/   CA11F : =$0                 vcD2R2 set $00
(1)  155/   CA11F : =$0                 vcD2R3 set $00
(1)  155/   CA11F : =$0                 vcD2R4 set $00
(1)  156/   CA11F : (MACRO)             	smpsVcDecayLevel    $01, $00, $01, $00
(1)  156/   CA11F : =$1                 vcDL1 set $01
(1)  156/   CA11F : =$0                 vcDL2 set $00
(1)  156/   CA11F : =$1                 vcDL3 set $01
(1)  156/   CA11F : =$0                 vcDL4 set $00
(1)  157/   CA11F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  157/   CA11F : =$F                 vcRR1 set $0F
(1)  157/   CA11F : =$F                 vcRR2 set $0F
(1)  157/   CA11F : =$F                 vcRR3 set $0F
(1)  157/   CA11F : =$F                 vcRR4 set $0F
(1)  158/   CA11F : (MACRO)             	smpsVcTotalLevel    $02, $14, $02, $15
(1)  158/   CA11F : =$2                 vcTL1 set $02
(1)  158/   CA11F : =$14                vcTL2 set $14
(1)  158/   CA11F : =$2                 vcTL3 set $02
(1)  158/   CA11F : =$15                vcTL4 set $15
(1)  158/   CA11F : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  158/   CA120 :                     ;   0     1     2     3     4     5     6     7
(1)  158/   CA120 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  158/   CA120 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  158/   CA120 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  158/   CA120 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  158/   CA120 : =$80                vcTLMask1 set $80
(1)  158/   CA120 :                     
(1)  158/   CA120 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  158/   CA120 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  158/   CA120 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  158/   CA120 : =$80                vcTLMask1 set $80
(1)  158/   CA120 : =$2                 vcTL1 set vcTL1&$7F
(1)  158/   CA120 : =$14                vcTL2 set vcTL2&$7F
(1)  158/   CA120 : =$2                 vcTL3 set vcTL3&$7F
(1)  158/   CA120 : =$15                vcTL4 set vcTL4&$7F
(1)  158/   CA120 :                     
(1)  158/   CA120 : 5258 3434                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  158/   CA124 : 1F12 1F12                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  158/   CA128 : 000A 000A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  158/   CA12C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  158/   CA130 : 0F1F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  158/   CA134 : 1582 1482                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  159/   CA138 :                     
(1)  160/   CA138 :                     ;	Voice $03
(1)  161/   CA138 :                     ;	$07
(1)  162/   CA138 :                     ;	$34, $31, $54, $51, 	$14, $14, $14, $14, 	$00, $00, $00, $00
(1)  163/   CA138 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$91, $91, $91, $91
(1)  164/   CA138 : (MACRO)             	smpsVcAlgorithm     $07
(1)  164/   CA138 : =$7                 vcAlgorithm set $07
(1)  165/   CA138 : (MACRO)             	smpsVcFeedback      $00
(1)  165/   CA138 : =$0                 vcFeedback set $00
(1)  166/   CA138 : (MACRO)             	smpsVcUnusedBits    $00
(1)  166/   CA138 : =$0                 vcUnusedBits set $00
(1)  166/   CA138 : =$0                 vcD1R1Unk set 0
(1)  166/   CA138 : =$0                 vcD1R2Unk set 0
(1)  166/   CA138 : =$0                 vcD1R3Unk set 0
(1)  166/   CA138 : =$0                 vcD1R4Unk set 0
(1)  167/   CA138 : (MACRO)             	smpsVcDetune        $05, $05, $03, $03
(1)  167/   CA138 : =$5                 vcDT1 set $05
(1)  167/   CA138 : =$5                 vcDT2 set $05
(1)  167/   CA138 : =$3                 vcDT3 set $03
(1)  167/   CA138 : =$3                 vcDT4 set $03
(1)  168/   CA138 : (MACRO)             	smpsVcCoarseFreq    $01, $04, $01, $04
(1)  168/   CA138 : =$1                 vcCF1 set $01
(1)  168/   CA138 : =$4                 vcCF2 set $04
(1)  168/   CA138 : =$1                 vcCF3 set $01
(1)  168/   CA138 : =$4                 vcCF4 set $04
(1)  169/   CA138 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  169/   CA138 : =$0                 vcRS1 set $00
(1)  169/   CA138 : =$0                 vcRS2 set $00
(1)  169/   CA138 : =$0                 vcRS3 set $00
(1)  169/   CA138 : =$0                 vcRS4 set $00
(1)  170/   CA138 : (MACRO)             	smpsVcAttackRate    $14, $14, $14, $14
(1)  170/   CA138 : =$14                vcAR1 set $14
(1)  170/   CA138 : =$14                vcAR2 set $14
(1)  170/   CA138 : =$14                vcAR3 set $14
(1)  170/   CA138 : =$14                vcAR4 set $14
(1)  171/   CA138 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  171/   CA138 : =$0                 vcAM1 set $00<<5
(1)  171/   CA138 : =$0                 vcAM2 set $00<<5
(1)  171/   CA138 : =$0                 vcAM3 set $00<<5
(1)  171/   CA138 : =$0                 vcAM4 set $00<<5
(1)  172/   CA138 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  172/   CA138 : =$0                 vcD1R1 set $00
(1)  172/   CA138 : =$0                 vcD1R2 set $00
(1)  172/   CA138 : =$0                 vcD1R3 set $00
(1)  172/   CA138 : =$0                 vcD1R4 set $00
(1)  173/   CA138 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  173/   CA138 : =$0                 vcD2R1 set $00
(1)  173/   CA138 : =$0                 vcD2R2 set $00
(1)  173/   CA138 : =$0                 vcD2R3 set $00
(1)  173/   CA138 : =$0                 vcD2R4 set $00
(1)  174/   CA138 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  174/   CA138 : =$0                 vcDL1 set $00
(1)  174/   CA138 : =$0                 vcDL2 set $00
(1)  174/   CA138 : =$0                 vcDL3 set $00
(1)  174/   CA138 : =$0                 vcDL4 set $00
(1)  175/   CA138 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  175/   CA138 : =$F                 vcRR1 set $0F
(1)  175/   CA138 : =$F                 vcRR2 set $0F
(1)  175/   CA138 : =$F                 vcRR3 set $0F
(1)  175/   CA138 : =$F                 vcRR4 set $0F
(1)  176/   CA138 : (MACRO)             	smpsVcTotalLevel    $11, $11, $11, $11
(1)  176/   CA138 : =$11                vcTL1 set $11
(1)  176/   CA138 : =$11                vcTL2 set $11
(1)  176/   CA138 : =$11                vcTL3 set $11
(1)  176/   CA138 : =$11                vcTL4 set $11
(1)  176/   CA138 : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  176/   CA139 :                     ;   0     1     2     3     4     5     6     7
(1)  176/   CA139 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  176/   CA139 : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  176/   CA139 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  176/   CA139 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  176/   CA139 : =$80                vcTLMask1 set $80
(1)  176/   CA139 :                     
(1)  176/   CA139 : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  176/   CA139 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  176/   CA139 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  176/   CA139 : =$80                vcTLMask1 set $80
(1)  176/   CA139 : =$11                vcTL1 set vcTL1&$7F
(1)  176/   CA139 : =$11                vcTL2 set vcTL2&$7F
(1)  176/   CA139 : =$11                vcTL3 set vcTL3&$7F
(1)  176/   CA139 : =$11                vcTL4 set vcTL4&$7F
(1)  176/   CA139 :                     
(1)  176/   CA139 : 3431 5451                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  176/   CA13D : 1414 1414                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  176/   CA141 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  176/   CA145 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  176/   CA149 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  176/   CA14D : 9191 9191                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  177/   CA151 :                     
(1)  178/   CA151 :                     
   73/   CA151 :                        ; Z80 Bank $1B
   74/   CA151 : (MACRO)                                align   $8000
   74/   CA151 :  (MACRO-2)                     cnop 0,$8000
   74/   CA151 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   74/   D0000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   75/   D0000 :                        
   76/   D0000 :                        ;-------------------------------------------------------------------------------
   77/   D0000 :                        ; Offset_0x0D86C0:
   78/   D0000 : (MACRO)                		align	$20000
   78/   D0000 :  (MACRO-2)                     cnop 0,$20000
   78/   D0000 :   (MACRO-3)                            org (*-1+($20000)-((*-1+(-(0)))#($20000)))
   78/   E0000 :                                                !org (*-1+($20000)-((*-1+(-(0)))#($20000)))
   79/   E0000 :                        ;-------------------------------------------------------------------------------                                
   80/   E0000 :                        Z80_Driver:                                                    ; Offset_0x0E0000
   81/   E0000 :                                        binclude  "sounds\z80_drv.bin"
   82/   E16A0 :                        				
   83/   E16A0 : =$8000                 Music_01_Ptr equ (Music_01&$FFFF)|$8000
   84/   E16A0 : =$8463                 Music_02_Ptr equ (Music_02&$FFFF)|$8000
   85/   E16A0 : =$8BD5                 Music_03_Ptr equ (Music_03&$FFFF)|$8000
   86/   E16A0 : =$90C6                 Music_04_Ptr equ (Music_04&$FFFF)|$8000
   87/   E16A0 : =$954B                 Music_05_Ptr equ (Music_05&$FFFF)|$8000
   88/   E16A0 : =$9AC6                 Music_06_Ptr equ (Music_06&$FFFF)|$8000
   89/   E16A0 : =$8000                 Music_07_Ptr equ (Music_07&$FFFF)|$8000
   90/   E16A0 : =$878F                 Music_08_Ptr equ (Music_08&$FFFF)|$8000
   91/   E16A0 : =$8D14                 Music_09_Ptr equ (Music_09&$FFFF)|$8000
   92/   E16A0 : =$9430                 Music_0A_Ptr equ (Music_0A&$FFFF)|$8000
   93/   E16A0 : =$9917                 Music_0B_Ptr equ (Music_0B&$FFFF)|$8000
   94/   E16A0 : =$9FBB                 Music_0C_Ptr equ (Music_0C&$FFFF)|$8000
   95/   E16A0 : =$A4D4                 Music_0D_Ptr equ (Music_0D&$FFFF)|$8000
   96/   E16A0 : =$8000                 Music_0E_Ptr equ (Music_0E&$FFFF)|$8000
   97/   E16A0 : =$864B                 Music_0F_Ptr equ (Music_0F&$FFFF)|$8000
   98/   E16A0 : =$8A78                 Music_10_Ptr equ (Music_10&$FFFF)|$8000
   99/   E16A0 : =$8CD7                 Music_11_Ptr equ (Music_11&$FFFF)|$8000
  100/   E16A0 : =$8E52                 Music_12_Ptr equ (Music_12&$FFFF)|$8000
  101/   E16A0 : =$9460                 Music_13_Ptr equ (Music_13&$FFFF)|$8000
  102/   E16A0 : =$9733                 Music_14_Ptr equ (Music_14&$FFFF)|$8000
  103/   E16A0 : =$9A6B                 Music_15_Ptr equ (Music_15&$FFFF)|$8000
  104/   E16A0 : =$A064                 Music_16_Ptr equ (Music_16&$FFFF)|$8000
  105/   E16A0 : =$8000                 Music_17_Ptr equ (Music_17&$FFFF)|$8000
  106/   E16A0 : =$81C6                 Music_18_Ptr equ (Music_18&$FFFF)|$8000
  107/   E16A0 : =$82B1                 Music_19_Ptr equ (Music_19&$FFFF)|$8000
  108/   E16A0 : =$849F                 Music_1A_Ptr equ (Music_1A&$FFFF)|$8000
  109/   E16A0 : =$85D7                 Music_1B_Ptr equ (Music_1B&$FFFF)|$8000
  110/   E16A0 : =$8722                 Music_1C_Ptr equ (Music_1C&$FFFF)|$8000
  111/   E16A0 : =$887B                 Music_1D_Ptr equ (Music_1D&$FFFF)|$8000
  112/   E16A0 : =$8945                 Music_1E_Ptr equ (Music_1E&$FFFF)|$8000
  113/   E16A0 : =$A027                 Music_1F_Ptr equ (Music_1F&$FFFF)|$8000
  114/   E16A0 :                        				
  115/   E16A0 :                        ; Offset_0x0E16A0               
  116/   E16A0 : 0080                                   dc.w    (((Music_01_Ptr>>$08)|(Music_01_Ptr<<$08))&$FFFF) ;$8000
  117/   E16A2 : 6384                                   dc.w    (((Music_02_Ptr>>$08)|(Music_02_Ptr<<$08))&$FFFF) ;$A210
  118/   E16A4 : D58B                                   dc.w    (((Music_03_Ptr>>$08)|(Music_03_Ptr<<$08))&$FFFF) ;$BF24
  119/   E16A6 : C690                                   dc.w    (((Music_04_Ptr>>$08)|(Music_04_Ptr<<$08))&$FFFF) ;$D492
  120/   E16A8 : 4B95                                   dc.w    (((Music_05_Ptr>>$08)|(Music_05_Ptr<<$08))&$FFFF) ;$EE51
  121/   E16AA : C69A                                   dc.w    (((Music_06_Ptr>>$08)|(Music_06_Ptr<<$08))&$FFFF) ;$F468
  122/   E16AC :                                        
  123/   E16AC : 0080                                   dc.w    (((Music_07_Ptr>>$08)|(Music_07_Ptr<<$08))&$FFFF) ;$8000
  124/   E16AE : 8F87                                   dc.w    (((Music_08_Ptr>>$08)|(Music_08_Ptr<<$08))&$FFFF) ;$9BBB
  125/   E16B0 : 148D                                   dc.w    (((Music_09_Ptr>>$08)|(Music_09_Ptr<<$08))&$FFFF) ;$B99E
  126/   E16B2 : 3094                                   dc.w    (((Music_0A_Ptr>>$08)|(Music_0A_Ptr<<$08))&$FFFF) ;$BF36
  127/   E16B4 : 1799                                   dc.w    (((Music_0B_Ptr>>$08)|(Music_0B_Ptr<<$08))&$FFFF) ;$C499
  128/   E16B6 : BB9F                                   dc.w    (((Music_0C_Ptr>>$08)|(Music_0C_Ptr<<$08))&$FFFF) ;$CA37
  129/   E16B8 : D4A4                                   dc.w    (((Music_0D_Ptr>>$08)|(Music_0D_Ptr<<$08))&$FFFF) ;$D04B
  130/   E16BA :                                        
  131/   E16BA : 0080                                   dc.w    (((Music_0E_Ptr>>$08)|(Music_0E_Ptr<<$08))&$FFFF) ;$8000
  132/   E16BC : 4B86                                   dc.w    (((Music_0F_Ptr>>$08)|(Music_0F_Ptr<<$08))&$FFFF) ;$A52A
  133/   E16BE : 788A                                   dc.w    (((Music_10_Ptr>>$08)|(Music_10_Ptr<<$08))&$FFFF) ;$AA9C
  134/   E16C0 : D78C                                   dc.w    (((Music_11_Ptr>>$08)|(Music_11_Ptr<<$08))&$FFFF) ;$B005
  135/   E16C2 : 528E                                   dc.w    (((Music_12_Ptr>>$08)|(Music_12_Ptr<<$08))&$FFFF) ;$B66F
  136/   E16C4 : 6094                                   dc.w    (((Music_13_Ptr>>$08)|(Music_13_Ptr<<$08))&$FFFF) ;$BC62
  137/   E16C6 : 3397                                   dc.w    (((Music_14_Ptr>>$08)|(Music_14_Ptr<<$08))&$FFFF) ;$D04F
  138/   E16C8 : 6B9A                                   dc.w    (((Music_15_Ptr>>$08)|(Music_15_Ptr<<$08))&$FFFF) ;$E642
  139/   E16CA : 64A0                                   dc.w    (((Music_16_Ptr>>$08)|(Music_16_Ptr<<$08))&$FFFF) ;$F954
  140/   E16CC :                                        
  141/   E16CC : 0080                                   dc.w    (((Music_17_Ptr>>$08)|(Music_17_Ptr<<$08))&$FFFF) ;$8000
  142/   E16CE : C681                                   dc.w    (((Music_18_Ptr>>$08)|(Music_18_Ptr<<$08))&$FFFF) ;$8412
  143/   E16D0 : B182                                   dc.w    (((Music_19_Ptr>>$08)|(Music_19_Ptr<<$08))&$FFFF) ;$8742
  144/   E16D2 : 9F84                                   dc.w    (((Music_1A_Ptr>>$08)|(Music_1A_Ptr<<$08))&$FFFF) ;$8C3E
  145/   E16D4 : D785                                   dc.w    (((Music_1B_Ptr>>$08)|(Music_1B_Ptr<<$08))&$FFFF) ;$9521
  146/   E16D6 : 2287                                   dc.w    (((Music_1C_Ptr>>$08)|(Music_1C_Ptr<<$08))&$FFFF) ;$9A84
  147/   E16D8 : 7B88                                   dc.w    (((Music_1D_Ptr>>$08)|(Music_1D_Ptr<<$08))&$FFFF) ;$A31C
  148/   E16DA : 4589                                   dc.w    (((Music_1E_Ptr>>$08)|(Music_1E_Ptr<<$08))&$FFFF) ;$AE04
  149/   E16DC : 27A0                                   dc.w    (((Music_1F_Ptr>>$08)|(Music_1F_Ptr<<$08))&$FFFF) ;$BB19
  150/   E16DE :                        
  151/   E16DE :                        
  152/   E16DE :                        ; Offset_0x0E1702:
  153/   E16DE :                        
  154/   E16DE : =$800B                 Sfx_20_Ptr   equ     (Sound20&$FFFF)|$8000   
  155/   E16DE : =$8021                 Sfx_21_Ptr   equ     (Sound21&$FFFF)|$8000   
  156/   E16DE : =$804B                 Sfx_22_Ptr   equ     (Sound22&$FFFF)|$8000   
  157/   E16DE : =$806A                 Sfx_23_Ptr   equ     (Sound23&$FFFF)|$8000   
  158/   E16DE : =$809C                 Sfx_24_Ptr   equ     (Sound24&$FFFF)|$8000   
  159/   E16DE : =$80D1                 Sfx_25_Ptr   equ     (Sound25&$FFFF)|$8000   
  160/   E16DE : =$80FD                 Sfx_26_Ptr   equ     (Sound26&$FFFF)|$8000   
  161/   E16DE : =$812C                 Sfx_27_Ptr   equ     (Sound27&$FFFF)|$8000   
  162/   E16DE : =$8158                 Sfx_28_Ptr   equ     (Sound28&$FFFF)|$8000   
  163/   E16DE : =$8167                 Sfx_29_Ptr   equ     (Sound29&$FFFF)|$8000   
  164/   E16DE : =$8179                 Sfx_2A_Ptr   equ     (Sound2A&$FFFF)|$8000   
  165/   E16DE : =$81BA                 Sfx_2B_Ptr   equ     (Sound2B&$FFFF)|$8000   
  166/   E16DE : =$81D9                 Sfx_2C_Ptr   equ     (Sound2C&$FFFF)|$8000   
  167/   E16DE : =$820D                 Sfx_2D_Ptr   equ     (Sound2D&$FFFF)|$8000   
  168/   E16DE : =$8243                 Sfx_2E_Ptr   equ     (Sound2E&$FFFF)|$8000   
  169/   E16DE : =$828D                 Sfx_2F_Ptr   equ     (Sound2F&$FFFF)|$8000   
  170/   E16DE : =$82BA                 Sfx_30_Ptr   equ     (Sound30&$FFFF)|$8000   
  171/   E16DE : =$82EB                 Sfx_31_Ptr   equ     (Sound31&$FFFF)|$8000   
  172/   E16DE : =$8317                 Sfx_32_Ptr   equ     (Sound32&$FFFF)|$8000   
  173/   E16DE : =$8366                 Sfx_33_Ptr   equ     (Sound33&$FFFF)|$8000   
  174/   E16DE : =$8397                 Sfx_34_Ptr   equ     (Sound34&$FFFF)|$8000   
  175/   E16DE : =$83F2                 Sfx_35_Ptr   equ     (Sound35&$FFFF)|$8000   
  176/   E16DE : =$8407                 Sfx_36_Ptr   equ     (Sound36&$FFFF)|$8000   
  177/   E16DE : =$8424                 Sfx_37_Ptr   equ     (Sound37&$FFFF)|$8000   
  178/   E16DE : =$845F                 Sfx_38_Ptr   equ     (Sound38&$FFFF)|$8000   
  179/   E16DE : =$847C                 Sfx_39_Ptr   equ     (Sound39&$FFFF)|$8000   
  180/   E16DE : =$84C6                 Sfx_3A_Ptr   equ     (Sound3A&$FFFF)|$8000   
  181/   E16DE : =$84EE                 Sfx_3B_Ptr   equ     (Sound3B&$FFFF)|$8000   
  182/   E16DE : =$8519                 Sfx_3C_Ptr   equ     (Sound3C&$FFFF)|$8000   
  183/   E16DE : =$855A                 Sfx_3D_Ptr   equ     (Sound3D&$FFFF)|$8000   
  184/   E16DE : =$85AD                 Sfx_3E_Ptr   equ     (Sound3E&$FFFF)|$8000   
  185/   E16DE : =$85E7                 Sfx_3F_Ptr   equ     (Sound3F&$FFFF)|$8000   
  186/   E16DE : =$8659                 Sfx_40_Ptr   equ     (Sound40&$FFFF)|$8000   
  187/   E16DE : =$8672                 Sfx_41_Ptr   equ     (Sound41&$FFFF)|$8000   
  188/   E16DE : =$86AC                 Sfx_42_Ptr   equ     (Sound42&$FFFF)|$8000   
  189/   E16DE : =$86BD                 Sfx_43_Ptr   equ     (Sound43&$FFFF)|$8000   
  190/   E16DE : =$8737                 Sfx_44_Ptr   equ     (Sound44&$FFFF)|$8000   
  191/   E16DE : =$875F                 Sfx_45_Ptr   equ     (Sound45&$FFFF)|$8000   
  192/   E16DE : =$87C6                 Sfx_46_Ptr   equ     (Sound46&$FFFF)|$8000   
  193/   E16DE : =$87EE                 Sfx_47_Ptr   equ     (Sound47&$FFFF)|$8000   
  194/   E16DE : =$881C                 Sfx_48_Ptr   equ     (Sound48&$FFFF)|$8000   
  195/   E16DE : =$882D                 Sfx_49_Ptr   equ     (Sound49&$FFFF)|$8000   
  196/   E16DE : =$885A                 Sfx_4A_Ptr   equ     (Sound4A&$FFFF)|$8000   
  197/   E16DE : =$8887                 Sfx_4B_Ptr   equ     (Sound4B&$FFFF)|$8000   
  198/   E16DE : =$88BA                 Sfx_4C_Ptr   equ     (Sound4C&$FFFF)|$8000   
  199/   E16DE : =$88F4                 Sfx_4D_Ptr   equ     (Sound4D&$FFFF)|$8000   
  200/   E16DE : =$8901                 Sfx_4E_Ptr   equ     (Sound4E&$FFFF)|$8000   
  201/   E16DE : =$8916                 Sfx_4F_Ptr   equ     (Sound4F&$FFFF)|$8000   
  202/   E16DE : =$894D                 Sfx_50_Ptr   equ     (Sound50&$FFFF)|$8000   
  203/   E16DE : =$8980                 Sfx_51_Ptr   equ     (Sound51&$FFFF)|$8000   
  204/   E16DE : =$89B9                 Sfx_52_Ptr   equ     (Sound52&$FFFF)|$8000   
  205/   E16DE : =$89F6                 Sfx_53_Ptr   equ     (Sound53&$FFFF)|$8000   
  206/   E16DE : =$8A35                 Sfx_54_Ptr   equ     (Sound54&$FFFF)|$8000   
  207/   E16DE : =$8A76                 Sfx_55_Ptr   equ     (Sound55&$FFFF)|$8000   
  208/   E16DE : =$8AA0                 Sfx_56_Ptr   equ     (Sound56&$FFFF)|$8000   
  209/   E16DE : =$8AE5                 Sfx_57_Ptr   equ     (Sound57&$FFFF)|$8000   
  210/   E16DE : =$8B0D                 Sfx_58_Ptr   equ     (Sound58&$FFFF)|$8000   
  211/   E16DE : =$8B37                 Sfx_59_Ptr   equ     (Sound59&$FFFF)|$8000   
  212/   E16DE : =$8B90                 Sfx_5A_Ptr   equ     (Sound5A&$FFFF)|$8000   
  213/   E16DE : =$8BBD                 Sfx_5B_Ptr   equ     (Sound5B&$FFFF)|$8000   
  214/   E16DE : =$8BF1                 Sfx_5C_Ptr   equ     (Sound5C&$FFFF)|$8000   
  215/   E16DE : =$8C38                 Sfx_5D_Ptr   equ     (Sound5D&$FFFF)|$8000   
  216/   E16DE : =$8C60                 Sfx_5E_Ptr   equ     (Sound5E&$FFFF)|$8000   
  217/   E16DE : =$8C9A                 Sfx_5F_Ptr   equ     (Sound5F&$FFFF)|$8000   
  218/   E16DE : =$8D36                 Sfx_60_Ptr   equ     (Sound60&$FFFF)|$8000   
  219/   E16DE : =$8D71                 Sfx_61_Ptr   equ     (Sound61&$FFFF)|$8000   
  220/   E16DE : =$8DCE                 Sfx_62_Ptr   equ     (Sound62&$FFFF)|$8000   
  221/   E16DE : =$8E05                 Sfx_63_Ptr   equ     (Sound63&$FFFF)|$8000   
  222/   E16DE : =$8E34                 Sfx_64_Ptr   equ     (Sound64&$FFFF)|$8000   
  223/   E16DE : =$8E5C                 Sfx_65_Ptr   equ     (Sound65&$FFFF)|$8000   
  224/   E16DE : =$8E7D                 Sfx_66_Ptr   equ     (Sound66&$FFFF)|$8000   
  225/   E16DE : =$8EB7                 Sfx_67_Ptr   equ     (Sound67&$FFFF)|$8000   
  226/   E16DE : =$8ED8                 Sfx_68_Ptr   equ     (Sound68&$FFFF)|$8000   
  227/   E16DE : =$8F02                 Sfx_69_Ptr   equ     (Sound69&$FFFF)|$8000   
  228/   E16DE : =$8F3F                 Sfx_6A_Ptr   equ     (Sound6A&$FFFF)|$8000   
  229/   E16DE : =$8F6A                 Sfx_6B_Ptr   equ     (Sound6B&$FFFF)|$8000   
  230/   E16DE : =$8F94                 Sfx_6C_Ptr   equ     (Sound6C&$FFFF)|$8000   
  231/   E16DE : =$8FFF                 Sfx_6D_Ptr   equ     (Sound6D&$FFFF)|$8000   
  232/   E16DE : =$902B                 Sfx_6E_Ptr   equ     (Sound6E&$FFFF)|$8000   
  233/   E16DE : =$9069                 Sfx_6F_Ptr   equ     (Sound6F&$FFFF)|$8000   
  234/   E16DE : =$90AC                 Sfx_70_Ptr   equ     (Sound70&$FFFF)|$8000   
  235/   E16DE : =$8000                 Sfx_NN_Ptr   equ     (SoundNN&$FFFF)|$8000   
  236/   E16DE :                        
  237/   E16DE :                        
  238/   E16DE : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  239/   E16E0 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  240/   E16E2 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  241/   E16E4 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  242/   E16E6 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  243/   E16E8 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  244/   E16EA : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  245/   E16EC : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  246/   E16EE : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  247/   E16F0 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  248/   E16F2 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  249/   E16F4 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  250/   E16F6 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  251/   E16F8 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  252/   E16FA : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  253/   E16FC : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  254/   E16FE : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  255/   E1700 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  256/   E1702 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  257/   E1704 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  258/   E1706 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  259/   E1708 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  260/   E170A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  261/   E170C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  262/   E170E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  263/   E1710 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  264/   E1712 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  265/   E1714 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  266/   E1716 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  267/   E1718 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  268/   E171A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  269/   E171C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  270/   E171E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  271/   E1720 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  272/   E1722 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  273/   E1724 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  274/   E1726 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  275/   E1728 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  276/   E172A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  277/   E172C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  278/   E172E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  279/   E1730 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  280/   E1732 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  281/   E1734 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  282/   E1736 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  283/   E1738 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  284/   E173A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  285/   E173C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  286/   E173E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  287/   E1740 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  288/   E1742 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  289/   E1744 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  290/   E1746 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  291/   E1748 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  292/   E174A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  293/   E174C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  294/   E174E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  295/   E1750 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  296/   E1752 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  297/   E1754 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  298/   E1756 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  299/   E1758 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  300/   E175A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  301/   E175C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  302/   E175E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  303/   E1760 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  304/   E1762 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  305/   E1764 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  306/   E1766 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  307/   E1768 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  308/   E176A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  309/   E176C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  310/   E176E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  311/   E1770 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  312/   E1772 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  313/   E1774 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  314/   E1776 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  315/   E1778 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  316/   E177A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  317/   E177C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  318/   E177E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  319/   E1780 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  320/   E1782 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  321/   E1784 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  322/   E1786 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  323/   E1788 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  324/   E178A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  325/   E178C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  326/   E178E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  327/   E1790 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  328/   E1792 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  329/   E1794 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  330/   E1796 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  331/   E1798 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  332/   E179A : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  333/   E179C : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  334/   E179E : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  335/   E17A0 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  336/   E17A2 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  337/   E17A4 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  338/   E17A6 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  339/   E17A8 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  340/   E17AA : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  341/   E17AC : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  342/   E17AE : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  343/   E17B0 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  344/   E17B2 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  345/   E17B4 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  346/   E17B6 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  347/   E17B8 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  348/   E17BA : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  349/   E17BC : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  350/   E17BE : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  351/   E17C0 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  352/   E17C2 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  353/   E17C4 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  354/   E17C6 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  355/   E17C8 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  356/   E17CA : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  357/   E17CC : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  358/   E17CE : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  359/   E17D0 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  360/   E17D2 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  361/   E17D4 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  362/   E17D6 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  363/   E17D8 : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  364/   E17DA : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  365/   E17DC : 0080                                   dc.w    (((Sfx_NN_Ptr>>$08)|(Sfx_NN_Ptr<<$08))&$FFFF)      
  366/   E17DE :                        
  367/   E17DE : 0B80                                   dc.w    (((Sfx_20_Ptr>>$08)|(Sfx_20_Ptr<<$08))&$FFFF)      
  368/   E17E0 : 2180                                   dc.w    (((Sfx_21_Ptr>>$08)|(Sfx_21_Ptr<<$08))&$FFFF)      
  369/   E17E2 : 4B80                                   dc.w    (((Sfx_22_Ptr>>$08)|(Sfx_22_Ptr<<$08))&$FFFF)      
  370/   E17E4 : 6A80                                   dc.w    (((Sfx_23_Ptr>>$08)|(Sfx_23_Ptr<<$08))&$FFFF)      
  371/   E17E6 : 9C80                                   dc.w    (((Sfx_24_Ptr>>$08)|(Sfx_24_Ptr<<$08))&$FFFF)      
  372/   E17E8 : D180                                   dc.w    (((Sfx_25_Ptr>>$08)|(Sfx_25_Ptr<<$08))&$FFFF)      
  373/   E17EA : FD80                                   dc.w    (((Sfx_26_Ptr>>$08)|(Sfx_26_Ptr<<$08))&$FFFF)      
  374/   E17EC : 2C81                                   dc.w    (((Sfx_27_Ptr>>$08)|(Sfx_27_Ptr<<$08))&$FFFF)      
  375/   E17EE : 5881                                   dc.w    (((Sfx_28_Ptr>>$08)|(Sfx_28_Ptr<<$08))&$FFFF)      
  376/   E17F0 : 6781                                   dc.w    (((Sfx_29_Ptr>>$08)|(Sfx_29_Ptr<<$08))&$FFFF)      
  377/   E17F2 : 7981                                   dc.w    (((Sfx_2A_Ptr>>$08)|(Sfx_2A_Ptr<<$08))&$FFFF)      
  378/   E17F4 : BA81                                   dc.w    (((Sfx_2B_Ptr>>$08)|(Sfx_2B_Ptr<<$08))&$FFFF)      
  379/   E17F6 : D981                                   dc.w    (((Sfx_2C_Ptr>>$08)|(Sfx_2C_Ptr<<$08))&$FFFF)      
  380/   E17F8 : 0D82                                   dc.w    (((Sfx_2D_Ptr>>$08)|(Sfx_2D_Ptr<<$08))&$FFFF)      
  381/   E17FA : 4382                                   dc.w    (((Sfx_2E_Ptr>>$08)|(Sfx_2E_Ptr<<$08))&$FFFF)      
  382/   E17FC : 8D82                                   dc.w    (((Sfx_2F_Ptr>>$08)|(Sfx_2F_Ptr<<$08))&$FFFF)      
  383/   E17FE : BA82                                   dc.w    (((Sfx_30_Ptr>>$08)|(Sfx_30_Ptr<<$08))&$FFFF)      
  384/   E1800 : EB82                                   dc.w    (((Sfx_31_Ptr>>$08)|(Sfx_31_Ptr<<$08))&$FFFF)      
  385/   E1802 : 1783                                   dc.w    (((Sfx_32_Ptr>>$08)|(Sfx_32_Ptr<<$08))&$FFFF)      
  386/   E1804 : 6683                                   dc.w    (((Sfx_33_Ptr>>$08)|(Sfx_33_Ptr<<$08))&$FFFF)      
  387/   E1806 : 9783                                   dc.w    (((Sfx_34_Ptr>>$08)|(Sfx_34_Ptr<<$08))&$FFFF)      
  388/   E1808 : F283                                   dc.w    (((Sfx_35_Ptr>>$08)|(Sfx_35_Ptr<<$08))&$FFFF)      
  389/   E180A : 0784                                   dc.w    (((Sfx_36_Ptr>>$08)|(Sfx_36_Ptr<<$08))&$FFFF)      
  390/   E180C : 2484                                   dc.w    (((Sfx_37_Ptr>>$08)|(Sfx_37_Ptr<<$08))&$FFFF)      
  391/   E180E : 5F84                                   dc.w    (((Sfx_38_Ptr>>$08)|(Sfx_38_Ptr<<$08))&$FFFF)      
  392/   E1810 : 7C84                                   dc.w    (((Sfx_39_Ptr>>$08)|(Sfx_39_Ptr<<$08))&$FFFF)      
  393/   E1812 : C684                                   dc.w    (((Sfx_3A_Ptr>>$08)|(Sfx_3A_Ptr<<$08))&$FFFF)      
  394/   E1814 : EE84                                   dc.w    (((Sfx_3B_Ptr>>$08)|(Sfx_3B_Ptr<<$08))&$FFFF)      
  395/   E1816 : 1985                                   dc.w    (((Sfx_3C_Ptr>>$08)|(Sfx_3C_Ptr<<$08))&$FFFF)      
  396/   E1818 : 5A85                                   dc.w    (((Sfx_3D_Ptr>>$08)|(Sfx_3D_Ptr<<$08))&$FFFF)      
  397/   E181A : AD85                                   dc.w    (((Sfx_3E_Ptr>>$08)|(Sfx_3E_Ptr<<$08))&$FFFF)      
  398/   E181C : E785                                   dc.w    (((Sfx_3F_Ptr>>$08)|(Sfx_3F_Ptr<<$08))&$FFFF)     
  399/   E181E : 5986                                   dc.w    (((Sfx_40_Ptr>>$08)|(Sfx_40_Ptr<<$08))&$FFFF)      
  400/   E1820 : 7286                                   dc.w    (((Sfx_41_Ptr>>$08)|(Sfx_41_Ptr<<$08))&$FFFF)      
  401/   E1822 : AC86                                   dc.w    (((Sfx_42_Ptr>>$08)|(Sfx_42_Ptr<<$08))&$FFFF)      
  402/   E1824 : BD86                                   dc.w    (((Sfx_43_Ptr>>$08)|(Sfx_43_Ptr<<$08))&$FFFF)      
  403/   E1826 : 3787                                   dc.w    (((Sfx_44_Ptr>>$08)|(Sfx_44_Ptr<<$08))&$FFFF)      
  404/   E1828 : 5F87                                   dc.w    (((Sfx_45_Ptr>>$08)|(Sfx_45_Ptr<<$08))&$FFFF)      
  405/   E182A : C687                                   dc.w    (((Sfx_46_Ptr>>$08)|(Sfx_46_Ptr<<$08))&$FFFF)      
  406/   E182C : EE87                                   dc.w    (((Sfx_47_Ptr>>$08)|(Sfx_47_Ptr<<$08))&$FFFF)      
  407/   E182E : 1C88                                   dc.w    (((Sfx_48_Ptr>>$08)|(Sfx_48_Ptr<<$08))&$FFFF)      
  408/   E1830 : 2D88                                   dc.w    (((Sfx_49_Ptr>>$08)|(Sfx_49_Ptr<<$08))&$FFFF)      
  409/   E1832 : 5A88                                   dc.w    (((Sfx_4A_Ptr>>$08)|(Sfx_4A_Ptr<<$08))&$FFFF)      
  410/   E1834 : 8788                                   dc.w    (((Sfx_4B_Ptr>>$08)|(Sfx_4B_Ptr<<$08))&$FFFF)      
  411/   E1836 : BA88                                   dc.w    (((Sfx_4C_Ptr>>$08)|(Sfx_4C_Ptr<<$08))&$FFFF)      
  412/   E1838 : F488                                   dc.w    (((Sfx_4D_Ptr>>$08)|(Sfx_4D_Ptr<<$08))&$FFFF)      
  413/   E183A : 0189                                   dc.w    (((Sfx_4E_Ptr>>$08)|(Sfx_4E_Ptr<<$08))&$FFFF)      
  414/   E183C : 1689                                   dc.w    (((Sfx_4F_Ptr>>$08)|(Sfx_4F_Ptr<<$08))&$FFFF)    
  415/   E183E : 4D89                                   dc.w    (((Sfx_50_Ptr>>$08)|(Sfx_50_Ptr<<$08))&$FFFF)      
  416/   E1840 : 8089                                   dc.w    (((Sfx_51_Ptr>>$08)|(Sfx_51_Ptr<<$08))&$FFFF)      
  417/   E1842 : B989                                   dc.w    (((Sfx_52_Ptr>>$08)|(Sfx_52_Ptr<<$08))&$FFFF)      
  418/   E1844 : F689                                   dc.w    (((Sfx_53_Ptr>>$08)|(Sfx_53_Ptr<<$08))&$FFFF)      
  419/   E1846 : 358A                                   dc.w    (((Sfx_54_Ptr>>$08)|(Sfx_54_Ptr<<$08))&$FFFF)      
  420/   E1848 : 768A                                   dc.w    (((Sfx_55_Ptr>>$08)|(Sfx_55_Ptr<<$08))&$FFFF)      
  421/   E184A : A08A                                   dc.w    (((Sfx_56_Ptr>>$08)|(Sfx_56_Ptr<<$08))&$FFFF)      
  422/   E184C : E58A                                   dc.w    (((Sfx_57_Ptr>>$08)|(Sfx_57_Ptr<<$08))&$FFFF)      
  423/   E184E : 0D8B                                   dc.w    (((Sfx_58_Ptr>>$08)|(Sfx_58_Ptr<<$08))&$FFFF)      
  424/   E1850 : 378B                                   dc.w    (((Sfx_59_Ptr>>$08)|(Sfx_59_Ptr<<$08))&$FFFF)      
  425/   E1852 : 908B                                   dc.w    (((Sfx_5A_Ptr>>$08)|(Sfx_5A_Ptr<<$08))&$FFFF)      
  426/   E1854 : BD8B                                   dc.w    (((Sfx_5B_Ptr>>$08)|(Sfx_5B_Ptr<<$08))&$FFFF)      
  427/   E1856 : F18B                                   dc.w    (((Sfx_5C_Ptr>>$08)|(Sfx_5C_Ptr<<$08))&$FFFF)      
  428/   E1858 : 388C                                   dc.w    (((Sfx_5D_Ptr>>$08)|(Sfx_5D_Ptr<<$08))&$FFFF)      
  429/   E185A : 608C                                   dc.w    (((Sfx_5E_Ptr>>$08)|(Sfx_5E_Ptr<<$08))&$FFFF)      
  430/   E185C : 9A90                                   dc.w    (((Sfx_6F_Ptr>>$08)|(Sfx_5F_Ptr<<$08))&$FFFF)        
  431/   E185E : 368D                                   dc.w    (((Sfx_60_Ptr>>$08)|(Sfx_60_Ptr<<$08))&$FFFF)      
  432/   E1860 : 718D                                   dc.w    (((Sfx_61_Ptr>>$08)|(Sfx_61_Ptr<<$08))&$FFFF)      
  433/   E1862 : CE8D                                   dc.w    (((Sfx_62_Ptr>>$08)|(Sfx_62_Ptr<<$08))&$FFFF)      
  434/   E1864 : 058E                                   dc.w    (((Sfx_63_Ptr>>$08)|(Sfx_63_Ptr<<$08))&$FFFF)      
  435/   E1866 : 348E                                   dc.w    (((Sfx_64_Ptr>>$08)|(Sfx_64_Ptr<<$08))&$FFFF)      
  436/   E1868 : 5C8E                                   dc.w    (((Sfx_65_Ptr>>$08)|(Sfx_65_Ptr<<$08))&$FFFF)      
  437/   E186A : 7D8E                                   dc.w    (((Sfx_66_Ptr>>$08)|(Sfx_66_Ptr<<$08))&$FFFF)      
  438/   E186C : B78E                                   dc.w    (((Sfx_67_Ptr>>$08)|(Sfx_67_Ptr<<$08))&$FFFF)      
  439/   E186E : D88E                                   dc.w    (((Sfx_68_Ptr>>$08)|(Sfx_68_Ptr<<$08))&$FFFF)      
  440/   E1870 : 028F                                   dc.w    (((Sfx_69_Ptr>>$08)|(Sfx_69_Ptr<<$08))&$FFFF)      
  441/   E1872 : 3F8F                                   dc.w    (((Sfx_6A_Ptr>>$08)|(Sfx_6A_Ptr<<$08))&$FFFF)      
  442/   E1874 : 6A8F                                   dc.w    (((Sfx_6B_Ptr>>$08)|(Sfx_6B_Ptr<<$08))&$FFFF)      
  443/   E1876 : 948F                                   dc.w    (((Sfx_6C_Ptr>>$08)|(Sfx_6C_Ptr<<$08))&$FFFF)      
  444/   E1878 : FF8F                                   dc.w    (((Sfx_6D_Ptr>>$08)|(Sfx_6D_Ptr<<$08))&$FFFF)      
  445/   E187A : 2B90                                   dc.w    (((Sfx_6E_Ptr>>$08)|(Sfx_6E_Ptr<<$08))&$FFFF)      
  446/   E187C : 6990                                   dc.w    (((Sfx_6F_Ptr>>$08)|(Sfx_6F_Ptr<<$08))&$FFFF)       
  447/   E187E : AC90                                   dc.w    (((Sfx_70_Ptr>>$08)|(Sfx_70_Ptr<<$08))&$FFFF)       
  448/   E1880 :                        
  449/   E1880 :                        
  450/   E1880 :                        ;-------------------------------------------------------------------------------
  451/   E1880 : (MACRO)                	align	$8000
  451/   E1880 :  (MACRO-2)                     cnop 0,$8000
  451/   E1880 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
  451/   E8000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
  452/   E8000 :                        ;-------------------------------------------------------------------------------                 
  453/   E8000 :                        SoundNN:	include "sfx-improved/NULL.asm"
(1)    1/   E8000 :                     Sound20_Null_Header:
(1)    2/   E8000 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8000 :                     
(1)    2/   E8000 : =$2                 SourceDriver set 2
(1)    2/   E8000 :                     
(1)    2/   E8000 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8000 :                     
(1)    2/   E8000 : =$E8000             songStart set *
(1)    2/   E8000 :                     
(1)    2/   E8000 :                     
(1)    3/   E8000 : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E8000 : 0000                        dc.w    $0000
(1)    4/   E8002 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8002 : 01                          dc.b    $01
(1)    5/   E8003 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8003 : 01                          dc.b    $01
(1)    6/   E8004 :                     
(1)    7/   E8004 : (MACRO)             	smpsHeaderSFXChannel cPSG1, Sound20_Null_PSG1,	$F4, $00
(1)    7/   E8004 : 8080                        dc.b    $80,CPSG1
(1)    7/   E8006 :  (MACRO-2)                  CheckedChannelPointer SOUND20_NULL_PSG1
(1)    7/   E8006 : 0A80                                dc.w    z80_ptr(SOUND20_NULL_PSG1)
(1)    7/   E8008 :  (MACRO-2)                          PSGPitchConvert $F4
(1)    7/   E8008 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)    7/   E8009 : 00                          dc.b    $00
(1)    8/   E800A :                     
(1)    9/   E800A :                     ; PSG1 Data
(1)   10/   E800A :                     Sound20_Null_PSG1:
(1)   11/   E800A : (MACRO)             	smpsStop
(1)   11/   E800A : F2                          dc.b    $F2
(1)   12/   E800B :                     	
(1)   13/   E800B :                     
  454/   E800B :                        Sound20:	include "sfx-improved/A0 - Jump.asm"
(1)    1/   E800B :                     Sound20_Jump_Header:
(1)    2/   E800B : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E800B :                     
(1)    2/   E800B : =$2                 SourceDriver set 2
(1)    2/   E800B :                     
(1)    2/   E800B : =$0                 SourceSMPS2ASM set 0
(1)    2/   E800B :                     
(1)    2/   E800B : =$E800B             songStart set *
(1)    2/   E800B :                     
(1)    2/   E800B :                     
(1)    3/   E800B : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E800B : 0000                        dc.w    $0000
(1)    4/   E800D : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E800D : 01                          dc.b    $01
(1)    5/   E800E : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E800E : 01                          dc.b    $01
(1)    6/   E800F :                     
(1)    7/   E800F : (MACRO)             	smpsHeaderSFXChannel cPSG1, Sound20_Jump_PSG1,	$F4, $00
(1)    7/   E800F : 8080                        dc.b    $80,CPSG1
(1)    7/   E8011 :  (MACRO-2)                  CheckedChannelPointer SOUND20_JUMP_PSG1
(1)    7/   E8011 : 1580                                dc.w    z80_ptr(SOUND20_JUMP_PSG1)
(1)    7/   E8013 :  (MACRO-2)                          PSGPitchConvert $F4
(1)    7/   E8013 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)    7/   E8014 : 00                          dc.b    $00
(1)    8/   E8015 :                     
(1)    9/   E8015 :                     ; PSG1 Data
(1)   10/   E8015 :                     Sound20_Jump_PSG1:
(1)   11/   E8015 : (MACRO)             	smpsPSGvoice        $00
(1)   11/   E8015 : F500                        dc.b    $F5,$00
(1)   12/   E8017 : 9E05                	dc.b	nF2, $05
(1)   13/   E8019 : (MACRO)             	smpsModSet          $02, $01, $F8, $65
(1)   13/   E8019 : F0                          dc.b    $F0
(1)   13/   E801A : 0301 F866                           dc.b    $02+1,$01,$F8,(($65+1) * $01) & $FF
(1)   13/   E801E :                             ;dc.b   $01,$F8,$65
(1)   14/   E801E : A315                	dc.b	nBb2, $15
(1)   15/   E8020 : (MACRO)             	smpsStop
(1)   15/   E8020 : F2                          dc.b    $F2
(1)   16/   E8021 :                     
  455/   E8021 :                        Sound21:	include "sfx-improved/A1 - Checkpoint.asm"
(1)    1/   E8021 :                     Sound21_Checkpoint_Header:
(1)    2/   E8021 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8021 :                     
(1)    2/   E8021 : =$2                 SourceDriver set 2
(1)    2/   E8021 :                     
(1)    2/   E8021 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8021 :                     
(1)    2/   E8021 : =$E8021             songStart set *
(1)    2/   E8021 :                     
(1)    2/   E8021 :                     
(1)    3/   E8021 : (MACRO)             	smpsHeaderVoice     Sound21_Checkpoint_Voices
(1)    3/   E8021 : 2B80                                dc.w    z80_ptr(SOUND21_CHECKPOINT_VOICES)
(1)    4/   E8023 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8023 : 01                          dc.b    $01
(1)    5/   E8024 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8024 : 01                          dc.b    $01
(1)    6/   E8025 :                     
(1)    7/   E8025 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound21_Checkpoint_FM5,	$00, $01
(1)    7/   E8025 : 8005                        dc.b    $80,CFM5
(1)    7/   E8027 :  (MACRO-2)                  CheckedChannelPointer SOUND21_CHECKPOINT_FM5
(1)    7/   E8027 : 4480                                dc.w    z80_ptr(SOUND21_CHECKPOINT_FM5)
(1)    7/   E8029 : 00                                  dc.b    $00
(1)    7/   E802A : 01                          dc.b    $01
(1)    8/   E802B :                     
(1)    9/   E802B :                     Sound21_Checkpoint_Voices:
(1)   10/   E802B :                     ;	Voice $00
(1)   11/   E802B :                     ;	$3C
(1)   12/   E802B :                     ;	$05, $01, $0A, $01, 	$56, $5C, $5C, $5C, 	$0E, $11, $11, $11
(1)   13/   E802B :                     ;	$09, $0A, $06, $0A, 	$4F, $3F, $3F, $3F, 	$17, $80, $20, $80
(1)   14/   E802B : (MACRO)             	smpsVcAlgorithm     $04
(1)   14/   E802B : =$4                 vcAlgorithm set $04
(1)   15/   E802B : (MACRO)             	smpsVcFeedback      $07
(1)   15/   E802B : =$7                 vcFeedback set $07
(1)   16/   E802B : (MACRO)             	smpsVcUnusedBits    $00
(1)   16/   E802B : =$0                 vcUnusedBits set $00
(1)   16/   E802B : =$0                 vcD1R1Unk set 0
(1)   16/   E802B : =$0                 vcD1R2Unk set 0
(1)   16/   E802B : =$0                 vcD1R3Unk set 0
(1)   16/   E802B : =$0                 vcD1R4Unk set 0
(1)   17/   E802B : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   17/   E802B : =$0                 vcDT1 set $00
(1)   17/   E802B : =$0                 vcDT2 set $00
(1)   17/   E802B : =$0                 vcDT3 set $00
(1)   17/   E802B : =$0                 vcDT4 set $00
(1)   18/   E802B : (MACRO)             	smpsVcCoarseFreq    $01, $0A, $01, $05
(1)   18/   E802B : =$1                 vcCF1 set $01
(1)   18/   E802B : =$A                 vcCF2 set $0A
(1)   18/   E802B : =$1                 vcCF3 set $01
(1)   18/   E802B : =$5                 vcCF4 set $05
(1)   19/   E802B : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)   19/   E802B : =$1                 vcRS1 set $01
(1)   19/   E802B : =$1                 vcRS2 set $01
(1)   19/   E802B : =$1                 vcRS3 set $01
(1)   19/   E802B : =$1                 vcRS4 set $01
(1)   20/   E802B : (MACRO)             	smpsVcAttackRate    $1C, $1C, $1C, $16
(1)   20/   E802B : =$1C                vcAR1 set $1C
(1)   20/   E802B : =$1C                vcAR2 set $1C
(1)   20/   E802B : =$1C                vcAR3 set $1C
(1)   20/   E802B : =$16                vcAR4 set $16
(1)   21/   E802B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   21/   E802B : =$0                 vcAM1 set $00<<5
(1)   21/   E802B : =$0                 vcAM2 set $00<<5
(1)   21/   E802B : =$0                 vcAM3 set $00<<5
(1)   21/   E802B : =$0                 vcAM4 set $00<<5
(1)   22/   E802B : (MACRO)             	smpsVcDecayRate1    $11, $11, $11, $0E
(1)   22/   E802B : =$11                vcD1R1 set $11
(1)   22/   E802B : =$11                vcD1R2 set $11
(1)   22/   E802B : =$11                vcD1R3 set $11
(1)   22/   E802B : =$E                 vcD1R4 set $0E
(1)   23/   E802B : (MACRO)             	smpsVcDecayRate2    $0A, $06, $0A, $09
(1)   23/   E802B : =$A                 vcD2R1 set $0A
(1)   23/   E802B : =$6                 vcD2R2 set $06
(1)   23/   E802B : =$A                 vcD2R3 set $0A
(1)   23/   E802B : =$9                 vcD2R4 set $09
(1)   24/   E802B : (MACRO)             	smpsVcDecayLevel    $03, $03, $03, $04
(1)   24/   E802B : =$3                 vcDL1 set $03
(1)   24/   E802B : =$3                 vcDL2 set $03
(1)   24/   E802B : =$3                 vcDL3 set $03
(1)   24/   E802B : =$4                 vcDL4 set $04
(1)   25/   E802B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   25/   E802B : =$F                 vcRR1 set $0F
(1)   25/   E802B : =$F                 vcRR2 set $0F
(1)   25/   E802B : =$F                 vcRR3 set $0F
(1)   25/   E802B : =$F                 vcRR4 set $0F
(1)   26/   E802B : (MACRO)             	smpsVcTotalLevel    $00, $20, $00, $17
(1)   26/   E802B : =$0                 vcTL1 set $00
(1)   26/   E802B : =$20                vcTL2 set $20
(1)   26/   E802B : =$0                 vcTL3 set $00
(1)   26/   E802B : =$17                vcTL4 set $17
(1)   26/   E802B : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   26/   E802C :                     ;   0     1     2     3     4     5     6     7
(1)   26/   E802C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   26/   E802C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   26/   E802C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   26/   E802C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   26/   E802C : =$80                vcTLMask1 set $80
(1)   26/   E802C :                     
(1)   26/   E802C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   26/   E802C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   26/   E802C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   26/   E802C : =$80                vcTLMask1 set $80
(1)   26/   E802C : =$0                 vcTL1 set vcTL1&$7F
(1)   26/   E802C : =$20                vcTL2 set vcTL2&$7F
(1)   26/   E802C : =$0                 vcTL3 set vcTL3&$7F
(1)   26/   E802C : =$17                vcTL4 set vcTL4&$7F
(1)   26/   E802C :                     
(1)   26/   E802C : 0501 0A01                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   26/   E8030 : 565C 5C5C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   26/   E8034 : 0E11 1111                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   26/   E8038 : 090A 060A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   26/   E803C : 4F3F 3F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   26/   E8040 : 1780 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   27/   E8044 :                     
(1)   28/   E8044 :                     ; FM5 Data
(1)   29/   E8044 :                     Sound21_Checkpoint_FM5:
(1)   30/   E8044 : (MACRO)             	smpsSetvoice        $00
(1)   30/   E8044 :  (MACRO-2)                  smpsFMvoice $00
(1)   30/   E8044 : EF00                                dc.b    $EF,$00
(1)   31/   E8046 : BD06 BA16           	dc.b	nC5, $06, nA4, $16
(1)   32/   E804A : (MACRO)             	smpsStop
(1)   32/   E804A : F2                          dc.b    $F2
(1)   33/   E804B :                     
  456/   E804B :                        Sound22:	include "sfx-improved/A2 - Spike Switch.asm"
(1)    1/   E804B :                     Sound22_SpikeSwitch_Header:
(1)    2/   E804B : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E804B :                     
(1)    2/   E804B : =$2                 SourceDriver set 2
(1)    2/   E804B :                     
(1)    2/   E804B : =$0                 SourceSMPS2ASM set 0
(1)    2/   E804B :                     
(1)    2/   E804B : =$E804B             songStart set *
(1)    2/   E804B :                     
(1)    2/   E804B :                     
(1)    3/   E804B : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E804B : 0000                        dc.w    $0000
(1)    4/   E804D : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E804D : 01                          dc.b    $01
(1)    5/   E804E : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E804E : 01                          dc.b    $01
(1)    6/   E804F :                     
(1)    7/   E804F : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound22_SpikeSwitch_PSG3,	$00, $00
(1)    7/   E804F : 80C0                        dc.b    $80,CPSG3
(1)    7/   E8051 :  (MACRO-2)                  CheckedChannelPointer SOUND22_SPIKESWITCH_PSG3
(1)    7/   E8051 : 5580                                dc.w    z80_ptr(SOUND22_SPIKESWITCH_PSG3)
(1)    7/   E8053 :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E8053 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8054 : 00                          dc.b    $00
(1)    8/   E8055 :                     
(1)    9/   E8055 :                     ; PSG3 Data
(1)   10/   E8055 :                     Sound22_SpikeSwitch_PSG3:
(1)   11/   E8055 : (MACRO)             	smpsModSet          $01, $01, $F0, $08
(1)   11/   E8055 : F0                          dc.b    $F0
(1)   11/   E8056 : 0201 F009                           dc.b    $01+1,$01,$F0,(($08+1) * $01) & $FF
(1)   11/   E805A :                             ;dc.b   $01,$F0,$08
(1)   12/   E805A : (MACRO)             	smpsPSGform         $E7
(1)   12/   E805A : F3E7                        dc.b    $F3,$E7
(1)   13/   E805C : C004 CA04           	dc.b	nEb5, $04, nCs6, $04
(1)   14/   E8060 :                     
(1)   15/   E8060 :                     Sound22_SpikeSwitch_Loop00:
(1)   16/   E8060 : C001                	dc.b	nEb5, $01
(1)   17/   E8062 : (MACRO)             	smpsPSGAlterVol     $01
(1)   17/   E8062 : EC01                        dc.b    $EC,$01
(1)   18/   E8064 : (MACRO)             	smpsLoop            $00, $06, Sound22_SpikeSwitch_Loop00
(1)   18/   E8064 : F7                          dc.b    $F7
(1)   18/   E8065 : 0006                        dc.b    $00,$06
(1)   18/   E8067 : 6080                                dc.w    z80_ptr(SOUND22_SPIKESWITCH_LOOP00)
(1)   19/   E8069 : (MACRO)             	smpsStop
(1)   19/   E8069 : F2                          dc.b    $F2
(1)   20/   E806A :                     
  457/   E806A :                        Sound23:	include "sfx-improved/A3 - Hurt.asm"
(1)    1/   E806A :                     Sound23_Hurt_Header:
(1)    2/   E806A : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E806A :                     
(1)    2/   E806A : =$2                 SourceDriver set 2
(1)    2/   E806A :                     
(1)    2/   E806A : =$0                 SourceSMPS2ASM set 0
(1)    2/   E806A :                     
(1)    2/   E806A : =$E806A             songStart set *
(1)    2/   E806A :                     
(1)    2/   E806A :                     
(1)    3/   E806A : (MACRO)             	smpsHeaderVoice     Sound23_Hurt_Voices
(1)    3/   E806A : 8380                                dc.w    z80_ptr(SOUND23_HURT_VOICES)
(1)    4/   E806C : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E806C : 01                          dc.b    $01
(1)    5/   E806D : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E806D : 01                          dc.b    $01
(1)    6/   E806E :                     
(1)    7/   E806E : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound23_Hurt_FM5,	$F4, $00
(1)    7/   E806E : 8005                        dc.b    $80,CFM5
(1)    7/   E8070 :  (MACRO-2)                  CheckedChannelPointer SOUND23_HURT_FM5
(1)    7/   E8070 : 7480                                dc.w    z80_ptr(SOUND23_HURT_FM5)
(1)    7/   E8072 : F4                                  dc.b    $F4
(1)    7/   E8073 : 00                          dc.b    $00
(1)    8/   E8074 :                     
(1)    9/   E8074 :                     ; FM5 Data
(1)   10/   E8074 :                     Sound23_Hurt_FM5:
(1)   11/   E8074 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8074 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8074 : EF00                                dc.b    $EF,$00
(1)   12/   E8076 : B007 E7AD           	dc.b	nB3, $07, smpsNoAttack, nAb3
(1)   13/   E807A :                     
(1)   14/   E807A :                     Sound23_Hurt_Loop00:
(1)   15/   E807A : 01                  	dc.b	$01
(1)   16/   E807B : (MACRO)             	smpsAlterVol        $01
(1)   16/   E807B : E601                        dc.b    $E6,$01
(1)   17/   E807D : (MACRO)             	smpsLoop            $00, $2F, Sound23_Hurt_Loop00
(1)   17/   E807D : F7                          dc.b    $F7
(1)   17/   E807E : 002F                        dc.b    $00,$2F
(1)   17/   E8080 : 7A80                                dc.w    z80_ptr(SOUND23_HURT_LOOP00)
(1)   18/   E8082 : (MACRO)             	smpsStop
(1)   18/   E8082 : F2                          dc.b    $F2
(1)   19/   E8083 :                     
(1)   20/   E8083 :                     Sound23_Hurt_Voices:
(1)   21/   E8083 :                     ;	Voice $00
(1)   22/   E8083 :                     ;	$30
(1)   23/   E8083 :                     ;	$30, $30, $30, $30, 	$9E, $D8, $DC, $DC, 	$0E, $0A, $04, $05
(1)   24/   E8083 :                     ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$14, $3C, $14, $80
(1)   25/   E8083 : (MACRO)             	smpsVcAlgorithm     $00
(1)   25/   E8083 : =$0                 vcAlgorithm set $00
(1)   26/   E8083 : (MACRO)             	smpsVcFeedback      $06
(1)   26/   E8083 : =$6                 vcFeedback set $06
(1)   27/   E8083 : (MACRO)             	smpsVcUnusedBits    $00
(1)   27/   E8083 : =$0                 vcUnusedBits set $00
(1)   27/   E8083 : =$0                 vcD1R1Unk set 0
(1)   27/   E8083 : =$0                 vcD1R2Unk set 0
(1)   27/   E8083 : =$0                 vcD1R3Unk set 0
(1)   27/   E8083 : =$0                 vcD1R4Unk set 0
(1)   28/   E8083 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)   28/   E8083 : =$3                 vcDT1 set $03
(1)   28/   E8083 : =$3                 vcDT2 set $03
(1)   28/   E8083 : =$3                 vcDT3 set $03
(1)   28/   E8083 : =$3                 vcDT4 set $03
(1)   29/   E8083 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   29/   E8083 : =$0                 vcCF1 set $00
(1)   29/   E8083 : =$0                 vcCF2 set $00
(1)   29/   E8083 : =$0                 vcCF3 set $00
(1)   29/   E8083 : =$0                 vcCF4 set $00
(1)   30/   E8083 : (MACRO)             	smpsVcRateScale     $03, $03, $03, $02
(1)   30/   E8083 : =$3                 vcRS1 set $03
(1)   30/   E8083 : =$3                 vcRS2 set $03
(1)   30/   E8083 : =$3                 vcRS3 set $03
(1)   30/   E8083 : =$2                 vcRS4 set $02
(1)   31/   E8083 : (MACRO)             	smpsVcAttackRate    $1C, $1C, $18, $1E
(1)   31/   E8083 : =$1C                vcAR1 set $1C
(1)   31/   E8083 : =$1C                vcAR2 set $1C
(1)   31/   E8083 : =$18                vcAR3 set $18
(1)   31/   E8083 : =$1E                vcAR4 set $1E
(1)   32/   E8083 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   32/   E8083 : =$0                 vcAM1 set $00<<5
(1)   32/   E8083 : =$0                 vcAM2 set $00<<5
(1)   32/   E8083 : =$0                 vcAM3 set $00<<5
(1)   32/   E8083 : =$0                 vcAM4 set $00<<5
(1)   33/   E8083 : (MACRO)             	smpsVcDecayRate1    $05, $04, $0A, $0E
(1)   33/   E8083 : =$5                 vcD1R1 set $05
(1)   33/   E8083 : =$4                 vcD1R2 set $04
(1)   33/   E8083 : =$A                 vcD1R3 set $0A
(1)   33/   E8083 : =$E                 vcD1R4 set $0E
(1)   34/   E8083 : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $08
(1)   34/   E8083 : =$8                 vcD2R1 set $08
(1)   34/   E8083 : =$8                 vcD2R2 set $08
(1)   34/   E8083 : =$8                 vcD2R3 set $08
(1)   34/   E8083 : =$8                 vcD2R4 set $08
(1)   35/   E8083 : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $0B, $0B
(1)   35/   E8083 : =$B                 vcDL1 set $0B
(1)   35/   E8083 : =$B                 vcDL2 set $0B
(1)   35/   E8083 : =$B                 vcDL3 set $0B
(1)   35/   E8083 : =$B                 vcDL4 set $0B
(1)   36/   E8083 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   36/   E8083 : =$F                 vcRR1 set $0F
(1)   36/   E8083 : =$F                 vcRR2 set $0F
(1)   36/   E8083 : =$F                 vcRR3 set $0F
(1)   36/   E8083 : =$F                 vcRR4 set $0F
(1)   37/   E8083 : (MACRO)             	smpsVcTotalLevel    $00, $14, $3C, $14
(1)   37/   E8083 : =$0                 vcTL1 set $00
(1)   37/   E8083 : =$14                vcTL2 set $14
(1)   37/   E8083 : =$3C                vcTL3 set $3C
(1)   37/   E8083 : =$14                vcTL4 set $14
(1)   37/   E8083 : 30                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   37/   E8084 :                     ;   0     1     2     3     4     5     6     7
(1)   37/   E8084 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   37/   E8084 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E8084 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E8084 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E8084 : =$80                vcTLMask1 set $80
(1)   37/   E8084 :                     
(1)   37/   E8084 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E8084 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E8084 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E8084 : =$80                vcTLMask1 set $80
(1)   37/   E8084 : =$0                 vcTL1 set vcTL1&$7F
(1)   37/   E8084 : =$14                vcTL2 set vcTL2&$7F
(1)   37/   E8084 : =$3C                vcTL3 set vcTL3&$7F
(1)   37/   E8084 : =$14                vcTL4 set vcTL4&$7F
(1)   37/   E8084 :                     
(1)   37/   E8084 : 3030 3030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   37/   E8088 : 9ED8 DCDC                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   37/   E808C : 0E0A 0405                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   37/   E8090 : 0808 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   37/   E8094 : BFBF BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   37/   E8098 : 143C 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   E809C :                     
(1)   39/   E809C :                     
  458/   E809C :                        Sound24:	include "sfx-improved/A4 - Skidding.asm"
(1)    1/   E809C :                     Sound24_Skidding_Header:
(1)    2/   E809C : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E809C :                     
(1)    2/   E809C : =$2                 SourceDriver set 2
(1)    2/   E809C :                     
(1)    2/   E809C : =$0                 SourceSMPS2ASM set 0
(1)    2/   E809C :                     
(1)    2/   E809C : =$E809C             songStart set *
(1)    2/   E809C :                     
(1)    2/   E809C :                     
(1)    3/   E809C : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E809C : 0000                        dc.w    $0000
(1)    4/   E809E : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E809E : 01                          dc.b    $01
(1)    5/   E809F : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E809F : 02                          dc.b    $02
(1)    6/   E80A0 :                     
(1)    7/   E80A0 : (MACRO)             	smpsHeaderSFXChannel cPSG2, Sound24_Skidding_PSG2,	$F4, $00
(1)    7/   E80A0 : 80A0                        dc.b    $80,CPSG2
(1)    7/   E80A2 :  (MACRO-2)                  CheckedChannelPointer SOUND24_SKIDDING_PSG2
(1)    7/   E80A2 : AC80                                dc.w    z80_ptr(SOUND24_SKIDDING_PSG2)
(1)    7/   E80A4 :  (MACRO-2)                          PSGPitchConvert $F4
(1)    7/   E80A4 : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)    7/   E80A5 : 00                          dc.b    $00
(1)    8/   E80A6 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound24_Skidding_PSG3,	$F4, $00
(1)    8/   E80A6 : 80C0                        dc.b    $80,CPSG3
(1)    8/   E80A8 :  (MACRO-2)                  CheckedChannelPointer SOUND24_SKIDDING_PSG3
(1)    8/   E80A8 : BE80                                dc.w    z80_ptr(SOUND24_SKIDDING_PSG3)
(1)    8/   E80AA :  (MACRO-2)                          PSGPitchConvert $F4
(1)    8/   E80AA : 00                                  dc.b    ($F4+psgdelta)&$FF
(1)    8/   E80AB : 00                          dc.b    $00
(1)    9/   E80AC :                     
(1)   10/   E80AC :                     ; PSG2 Data
(1)   11/   E80AC :                     Sound24_Skidding_PSG2:
(1)   12/   E80AC : (MACRO)             	smpsPSGvoice        $00
(1)   12/   E80AC : F500                        dc.b    $F5,$00
(1)   13/   E80AE : AF01 80AF 8003      	dc.b	nBb3, $01, nRst, nBb3, nRst, $03
(1)   14/   E80B4 :                     
(1)   15/   E80B4 :                     Sound24_Skidding_Loop01:
(1)   16/   E80B4 : AF01 8001           	dc.b	nBb3, $01, nRst, $01
(1)   17/   E80B8 : (MACRO)             	smpsLoop            $00, $0B, Sound24_Skidding_Loop01
(1)   17/   E80B8 : F7                          dc.b    $F7
(1)   17/   E80B9 : 000B                        dc.b    $00,$0B
(1)   17/   E80BB : B480                                dc.w    z80_ptr(SOUND24_SKIDDING_LOOP01)
(1)   18/   E80BD : (MACRO)             	smpsStop
(1)   18/   E80BD : F2                          dc.b    $F2
(1)   19/   E80BE :                     
(1)   20/   E80BE :                     ; PSG3 Data
(1)   21/   E80BE :                     Sound24_Skidding_PSG3:
(1)   22/   E80BE : (MACRO)             	smpsPSGvoice        $00
(1)   22/   E80BE : F500                        dc.b    $F5,$00
(1)   23/   E80C0 : 8001 AD80 AD80 03   	dc.b	nRst, $01, nAb3, nRst, nAb3, nRst, $03
(1)   24/   E80C7 :                     
(1)   25/   E80C7 :                     Sound24_Skidding_Loop00:
(1)   26/   E80C7 : AD01 8001           	dc.b	nAb3, $01, nRst, $01
(1)   27/   E80CB : (MACRO)             	smpsLoop            $00, $0B, Sound24_Skidding_Loop00
(1)   27/   E80CB : F7                          dc.b    $F7
(1)   27/   E80CC : 000B                        dc.b    $00,$0B
(1)   27/   E80CE : C780                                dc.w    z80_ptr(SOUND24_SKIDDING_LOOP00)
(1)   28/   E80D0 : (MACRO)             	smpsStop
(1)   28/   E80D0 : F2                          dc.b    $F2
(1)   29/   E80D1 :                     
  459/   E80D1 :                        Sound25:	include "sfx-improved/A5 - Block Push.asm"
(1)    1/   E80D1 :                     Sound25_BlockPush_Header:
(1)    2/   E80D1 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E80D1 :                     
(1)    2/   E80D1 : =$2                 SourceDriver set 2
(1)    2/   E80D1 :                     
(1)    2/   E80D1 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E80D1 :                     
(1)    2/   E80D1 : =$E80D1             songStart set *
(1)    2/   E80D1 :                     
(1)    2/   E80D1 :                     
(1)    3/   E80D1 : (MACRO)             	smpsHeaderVoice     Sound25_BlockPush_Voices
(1)    3/   E80D1 : E480                                dc.w    z80_ptr(SOUND25_BLOCKPUSH_VOICES)
(1)    4/   E80D3 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E80D3 : 01                          dc.b    $01
(1)    5/   E80D4 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E80D4 : 01                          dc.b    $01
(1)    6/   E80D5 :                     
(1)    7/   E80D5 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound25_BlockPush_FM5,	$00, $00
(1)    7/   E80D5 : 8005                        dc.b    $80,CFM5
(1)    7/   E80D7 :  (MACRO-2)                  CheckedChannelPointer SOUND25_BLOCKPUSH_FM5
(1)    7/   E80D7 : DB80                                dc.w    z80_ptr(SOUND25_BLOCKPUSH_FM5)
(1)    7/   E80D9 : 00                                  dc.b    $00
(1)    7/   E80DA : 00                          dc.b    $00
(1)    8/   E80DB :                     
(1)    9/   E80DB :                     ; FM5 Data
(1)   10/   E80DB :                     Sound25_BlockPush_FM5:
(1)   11/   E80DB : (MACRO)             	smpsSetvoice        $00
(1)   11/   E80DB :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E80DB : EF00                                dc.b    $EF,$00
(1)   12/   E80DD : 8001 8B0A 8002      	dc.b	nRst, $01, nBb0, $0A, nRst, $02
(1)   13/   E80E3 : (MACRO)             	smpsStop
(1)   13/   E80E3 : F2                          dc.b    $F2
(1)   14/   E80E4 :                     
(1)   15/   E80E4 :                     Sound25_BlockPush_Voices:
(1)   16/   E80E4 :                     ;	Voice $00
(1)   17/   E80E4 :                     ;	$FA
(1)   18/   E80E4 :                     ;	$21, $30, $10, $32, 	$2F, $1F, $2F, $2F, 	$05, $08, $09, $02
(1)   19/   E80E4 :                     ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$0F, $1A, $0E, $80
(1)   20/   E80E4 : (MACRO)             	smpsVcAlgorithm     $02
(1)   20/   E80E4 : =$2                 vcAlgorithm set $02
(1)   21/   E80E4 : (MACRO)             	smpsVcFeedback      $07
(1)   21/   E80E4 : =$7                 vcFeedback set $07
(1)   22/   E80E4 : (MACRO)             	smpsVcUnusedBits    $03
(1)   22/   E80E4 : =$3                 vcUnusedBits set $03
(1)   22/   E80E4 : =$0                 vcD1R1Unk set 0
(1)   22/   E80E4 : =$0                 vcD1R2Unk set 0
(1)   22/   E80E4 : =$0                 vcD1R3Unk set 0
(1)   22/   E80E4 : =$0                 vcD1R4Unk set 0
(1)   23/   E80E4 : (MACRO)             	smpsVcDetune        $03, $01, $03, $02
(1)   23/   E80E4 : =$3                 vcDT1 set $03
(1)   23/   E80E4 : =$1                 vcDT2 set $01
(1)   23/   E80E4 : =$3                 vcDT3 set $03
(1)   23/   E80E4 : =$2                 vcDT4 set $02
(1)   24/   E80E4 : (MACRO)             	smpsVcCoarseFreq    $02, $00, $00, $01
(1)   24/   E80E4 : =$2                 vcCF1 set $02
(1)   24/   E80E4 : =$0                 vcCF2 set $00
(1)   24/   E80E4 : =$0                 vcCF3 set $00
(1)   24/   E80E4 : =$1                 vcCF4 set $01
(1)   25/   E80E4 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E80E4 : =$0                 vcRS1 set $00
(1)   25/   E80E4 : =$0                 vcRS2 set $00
(1)   25/   E80E4 : =$0                 vcRS3 set $00
(1)   25/   E80E4 : =$0                 vcRS4 set $00
(1)   26/   E80E4 : (MACRO)             	smpsVcAttackRate    $2F, $2F, $1F, $2F
(1)   26/   E80E4 : =$2F                vcAR1 set $2F
(1)   26/   E80E4 : =$2F                vcAR2 set $2F
(1)   26/   E80E4 : =$1F                vcAR3 set $1F
(1)   26/   E80E4 : =$2F                vcAR4 set $2F
(1)   27/   E80E4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E80E4 : =$0                 vcAM1 set $00<<5
(1)   27/   E80E4 : =$0                 vcAM2 set $00<<5
(1)   27/   E80E4 : =$0                 vcAM3 set $00<<5
(1)   27/   E80E4 : =$0                 vcAM4 set $00<<5
(1)   28/   E80E4 : (MACRO)             	smpsVcDecayRate1    $02, $09, $08, $05
(1)   28/   E80E4 : =$2                 vcD1R1 set $02
(1)   28/   E80E4 : =$9                 vcD1R2 set $09
(1)   28/   E80E4 : =$8                 vcD1R3 set $08
(1)   28/   E80E4 : =$5                 vcD1R4 set $05
(1)   29/   E80E4 : (MACRO)             	smpsVcDecayRate2    $02, $06, $0F, $06
(1)   29/   E80E4 : =$2                 vcD2R1 set $02
(1)   29/   E80E4 : =$6                 vcD2R2 set $06
(1)   29/   E80E4 : =$F                 vcD2R3 set $0F
(1)   29/   E80E4 : =$6                 vcD2R4 set $06
(1)   30/   E80E4 : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   30/   E80E4 : =$2                 vcDL1 set $02
(1)   30/   E80E4 : =$4                 vcDL2 set $04
(1)   30/   E80E4 : =$2                 vcDL3 set $02
(1)   30/   E80E4 : =$1                 vcDL4 set $01
(1)   31/   E80E4 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E80E4 : =$F                 vcRR1 set $0F
(1)   31/   E80E4 : =$F                 vcRR2 set $0F
(1)   31/   E80E4 : =$F                 vcRR3 set $0F
(1)   31/   E80E4 : =$F                 vcRR4 set $0F
(1)   32/   E80E4 : (MACRO)             	smpsVcTotalLevel    $00, $0E, $1A, $0F
(1)   32/   E80E4 : =$0                 vcTL1 set $00
(1)   32/   E80E4 : =$E                 vcTL2 set $0E
(1)   32/   E80E4 : =$1A                vcTL3 set $1A
(1)   32/   E80E4 : =$F                 vcTL4 set $0F
(1)   32/   E80E4 : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E80E5 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E80E5 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E80E5 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E80E5 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E80E5 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E80E5 : =$80                vcTLMask1 set $80
(1)   32/   E80E5 :                     
(1)   32/   E80E5 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E80E5 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E80E5 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E80E5 : =$80                vcTLMask1 set $80
(1)   32/   E80E5 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E80E5 : =$E                 vcTL2 set vcTL2&$7F
(1)   32/   E80E5 : =$1A                vcTL3 set vcTL3&$7F
(1)   32/   E80E5 : =$F                 vcTL4 set vcTL4&$7F
(1)   32/   E80E5 :                     
(1)   32/   E80E5 : 2130 1032                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E80E9 : 2F1F 2F2F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E80ED : 0508 0902                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E80F1 : 060F 0602                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E80F5 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E80F9 : 0F1A 0E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E80FD :                     
(1)   34/   E80FD :                     
  460/   E80FD :                        Sound26:	include "sfx-improved/A6 - Hurt by Spikes.asm"
(1)    1/   E80FD :                     Sound26_HurtBySpikes_Header:
(1)    2/   E80FD : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E80FD :                     
(1)    2/   E80FD : =$2                 SourceDriver set 2
(1)    2/   E80FD :                     
(1)    2/   E80FD : =$0                 SourceSMPS2ASM set 0
(1)    2/   E80FD :                     
(1)    2/   E80FD : =$E80FD             songStart set *
(1)    2/   E80FD :                     
(1)    2/   E80FD :                     
(1)    3/   E80FD : (MACRO)             	smpsHeaderVoice     Sound26_HurtBySpikes_Voices
(1)    3/   E80FD : 1381                                dc.w    z80_ptr(SOUND26_HURTBYSPIKES_VOICES)
(1)    4/   E80FF : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E80FF : 01                          dc.b    $01
(1)    5/   E8100 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8100 : 01                          dc.b    $01
(1)    6/   E8101 :                     
(1)    7/   E8101 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound26_HurtBySpikes_FM5,	$F2, $00
(1)    7/   E8101 : 8005                        dc.b    $80,CFM5
(1)    7/   E8103 :  (MACRO-2)                  CheckedChannelPointer SOUND26_HURTBYSPIKES_FM5
(1)    7/   E8103 : 0781                                dc.w    z80_ptr(SOUND26_HURTBYSPIKES_FM5)
(1)    7/   E8105 : F2                                  dc.b    $F2
(1)    7/   E8106 : 00                          dc.b    $00
(1)    8/   E8107 :                     
(1)    9/   E8107 :                     ; FM5 Data
(1)   10/   E8107 :                     Sound26_HurtBySpikes_FM5:
(1)   11/   E8107 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8107 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8107 : EF00                                dc.b    $EF,$00
(1)   12/   E8109 : (MACRO)             	smpsModSet          $01, $01, $10, $FF
(1)   12/   E8109 : F0                          dc.b    $F0
(1)   12/   E810A : 0201 1000                           dc.b    $01+1,$01,$10,(($FF+1) * $01) & $FF
(1)   12/   E810E :                             ;dc.b   $01,$10,$FF
(1)   13/   E810E : CF05 D725           	dc.b	nFs6, $05, nD7, $25
(1)   14/   E8112 : (MACRO)             	smpsStop
(1)   14/   E8112 : F2                          dc.b    $F2
(1)   15/   E8113 :                     
(1)   16/   E8113 :                     Sound26_HurtBySpikes_Voices:
(1)   17/   E8113 :                     ;	Voice $00
(1)   18/   E8113 :                     ;	$3B
(1)   19/   E8113 :                     ;	$3C, $39, $30, $31, 	$DF, $1F, $1F, $DF, 	$04, $05, $04, $01
(1)   20/   E8113 :                     ;	$04, $04, $04, $02, 	$FF, $0F, $1F, $AF, 	$29, $20, $0F, $80
(1)   21/   E8113 : (MACRO)             	smpsVcAlgorithm     $03
(1)   21/   E8113 : =$3                 vcAlgorithm set $03
(1)   22/   E8113 : (MACRO)             	smpsVcFeedback      $07
(1)   22/   E8113 : =$7                 vcFeedback set $07
(1)   23/   E8113 : (MACRO)             	smpsVcUnusedBits    $00
(1)   23/   E8113 : =$0                 vcUnusedBits set $00
(1)   23/   E8113 : =$0                 vcD1R1Unk set 0
(1)   23/   E8113 : =$0                 vcD1R2Unk set 0
(1)   23/   E8113 : =$0                 vcD1R3Unk set 0
(1)   23/   E8113 : =$0                 vcD1R4Unk set 0
(1)   24/   E8113 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)   24/   E8113 : =$3                 vcDT1 set $03
(1)   24/   E8113 : =$3                 vcDT2 set $03
(1)   24/   E8113 : =$3                 vcDT3 set $03
(1)   24/   E8113 : =$3                 vcDT4 set $03
(1)   25/   E8113 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $09, $0C
(1)   25/   E8113 : =$1                 vcCF1 set $01
(1)   25/   E8113 : =$0                 vcCF2 set $00
(1)   25/   E8113 : =$9                 vcCF3 set $09
(1)   25/   E8113 : =$C                 vcCF4 set $0C
(1)   26/   E8113 : (MACRO)             	smpsVcRateScale     $03, $00, $00, $03
(1)   26/   E8113 : =$3                 vcRS1 set $03
(1)   26/   E8113 : =$0                 vcRS2 set $00
(1)   26/   E8113 : =$0                 vcRS3 set $00
(1)   26/   E8113 : =$3                 vcRS4 set $03
(1)   27/   E8113 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   27/   E8113 : =$1F                vcAR1 set $1F
(1)   27/   E8113 : =$1F                vcAR2 set $1F
(1)   27/   E8113 : =$1F                vcAR3 set $1F
(1)   27/   E8113 : =$1F                vcAR4 set $1F
(1)   28/   E8113 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   28/   E8113 : =$0                 vcAM1 set $00<<5
(1)   28/   E8113 : =$0                 vcAM2 set $00<<5
(1)   28/   E8113 : =$0                 vcAM3 set $00<<5
(1)   28/   E8113 : =$0                 vcAM4 set $00<<5
(1)   29/   E8113 : (MACRO)             	smpsVcDecayRate1    $01, $04, $05, $04
(1)   29/   E8113 : =$1                 vcD1R1 set $01
(1)   29/   E8113 : =$4                 vcD1R2 set $04
(1)   29/   E8113 : =$5                 vcD1R3 set $05
(1)   29/   E8113 : =$4                 vcD1R4 set $04
(1)   30/   E8113 : (MACRO)             	smpsVcDecayRate2    $02, $04, $04, $04
(1)   30/   E8113 : =$2                 vcD2R1 set $02
(1)   30/   E8113 : =$4                 vcD2R2 set $04
(1)   30/   E8113 : =$4                 vcD2R3 set $04
(1)   30/   E8113 : =$4                 vcD2R4 set $04
(1)   31/   E8113 : (MACRO)             	smpsVcDecayLevel    $0A, $01, $00, $0F
(1)   31/   E8113 : =$A                 vcDL1 set $0A
(1)   31/   E8113 : =$1                 vcDL2 set $01
(1)   31/   E8113 : =$0                 vcDL3 set $00
(1)   31/   E8113 : =$F                 vcDL4 set $0F
(1)   32/   E8113 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   32/   E8113 : =$F                 vcRR1 set $0F
(1)   32/   E8113 : =$F                 vcRR2 set $0F
(1)   32/   E8113 : =$F                 vcRR3 set $0F
(1)   32/   E8113 : =$F                 vcRR4 set $0F
(1)   33/   E8113 : (MACRO)             	smpsVcTotalLevel    $00, $0F, $20, $29
(1)   33/   E8113 : =$0                 vcTL1 set $00
(1)   33/   E8113 : =$F                 vcTL2 set $0F
(1)   33/   E8113 : =$20                vcTL3 set $20
(1)   33/   E8113 : =$29                vcTL4 set $29
(1)   33/   E8113 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   33/   E8114 :                     ;   0     1     2     3     4     5     6     7
(1)   33/   E8114 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   33/   E8114 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E8114 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E8114 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E8114 : =$80                vcTLMask1 set $80
(1)   33/   E8114 :                     
(1)   33/   E8114 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E8114 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E8114 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E8114 : =$80                vcTLMask1 set $80
(1)   33/   E8114 : =$0                 vcTL1 set vcTL1&$7F
(1)   33/   E8114 : =$F                 vcTL2 set vcTL2&$7F
(1)   33/   E8114 : =$20                vcTL3 set vcTL3&$7F
(1)   33/   E8114 : =$29                vcTL4 set vcTL4&$7F
(1)   33/   E8114 :                     
(1)   33/   E8114 : 3C39 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   33/   E8118 : DF1F 1FDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   33/   E811C : 0405 0401                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   33/   E8120 : 0404 0402                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   33/   E8124 : FF0F 1FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   33/   E8128 : 2920 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   34/   E812C :                     
(1)   35/   E812C :                     
  461/   E812C :                        Sound27:	include "sfx-improved/A7 - Sparkle.asm"
(1)    1/   E812C :                     Sound27_Sparkle_Header:
(1)    2/   E812C : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E812C :                     
(1)    2/   E812C : =$2                 SourceDriver set 2
(1)    2/   E812C :                     
(1)    2/   E812C : =$1                 SourceSMPS2ASM set 1
(1)    2/   E812C :                     
(1)    2/   E812C : =$E812C             songStart set *
(1)    2/   E812C :                     
(1)    2/   E812C :                     
(1)    3/   E812C : (MACRO)             	smpsHeaderVoice     Sound27_Sparkle_Voices
(1)    3/   E812C : 3F81                                dc.w    z80_ptr(SOUND27_SPARKLE_VOICES)
(1)    4/   E812E : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E812E : 01                          dc.b    $01
(1)    5/   E812F : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E812F : 01                          dc.b    $01
(1)    6/   E8130 :                     
(1)    7/   E8130 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound27_Sparkle_FM4,	$0C, $1C
(1)    7/   E8130 : 8004                        dc.b    $80,CFM4
(1)    7/   E8132 :  (MACRO-2)                  CheckedChannelPointer SOUND27_SPARKLE_FM4
(1)    7/   E8132 : 3681                                dc.w    z80_ptr(SOUND27_SPARKLE_FM4)
(1)    7/   E8134 : 0C                                  dc.b    $0C
(1)    7/   E8135 : 1C                          dc.b    $1C
(1)    8/   E8136 :                     
(1)    9/   E8136 :                     ; FM4 Data
(1)   10/   E8136 :                     Sound27_Sparkle_FM4:
(1)   11/   E8136 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8136 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8136 : EF00                                dc.b    $EF,$00
(1)   12/   E8138 : C105 C405 C92B      	dc.b	nE5, $05, nG5, $05, nC6, $2B
(1)   13/   E813E : (MACRO)             	smpsStop
(1)   13/   E813E : F2                          dc.b    $F2
(1)   14/   E813F :                     
(1)   15/   E813F :                     Sound27_Sparkle_Voices:
(1)   16/   E813F :                     ;	Voice $00
(1)   17/   E813F :                     ;	$07
(1)   18/   E813F :                     ;	$73, $33, $33, $73, 	$0F, $14, $19, $1A, 	$0A, $0A, $0A, $0A
(1)   19/   E813F :                     ;	$0A, $0A, $0A, $0A, 	$57, $57, $57, $57, 	$00, $00, $00, $00
(1)   20/   E813F : (MACRO)             	smpsVcAlgorithm     $07
(1)   20/   E813F : =$7                 vcAlgorithm set $07
(1)   21/   E813F : (MACRO)             	smpsVcFeedback      $00
(1)   21/   E813F : =$0                 vcFeedback set $00
(1)   22/   E813F : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E813F : =$0                 vcUnusedBits set $00
(1)   22/   E813F : =$0                 vcD1R1Unk set 0
(1)   22/   E813F : =$0                 vcD1R2Unk set 0
(1)   22/   E813F : =$0                 vcD1R3Unk set 0
(1)   22/   E813F : =$0                 vcD1R4Unk set 0
(1)   23/   E813F : (MACRO)             	smpsVcDetune        $07, $03, $03, $07
(1)   23/   E813F : =$7                 vcDT1 set $07
(1)   23/   E813F : =$3                 vcDT2 set $03
(1)   23/   E813F : =$3                 vcDT3 set $03
(1)   23/   E813F : =$7                 vcDT4 set $07
(1)   24/   E813F : (MACRO)             	smpsVcCoarseFreq    $03, $03, $03, $03
(1)   24/   E813F : =$3                 vcCF1 set $03
(1)   24/   E813F : =$3                 vcCF2 set $03
(1)   24/   E813F : =$3                 vcCF3 set $03
(1)   24/   E813F : =$3                 vcCF4 set $03
(1)   25/   E813F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E813F : =$0                 vcRS1 set $00
(1)   25/   E813F : =$0                 vcRS2 set $00
(1)   25/   E813F : =$0                 vcRS3 set $00
(1)   25/   E813F : =$0                 vcRS4 set $00
(1)   26/   E813F : (MACRO)             	smpsVcAttackRate    $1A, $19, $14, $0F
(1)   26/   E813F : =$1A                vcAR1 set $1A
(1)   26/   E813F : =$19                vcAR2 set $19
(1)   26/   E813F : =$14                vcAR3 set $14
(1)   26/   E813F : =$F                 vcAR4 set $0F
(1)   27/   E813F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E813F : =$0                 vcAM1 set $00<<7
(1)   27/   E813F : =$0                 vcAM2 set $00<<7
(1)   27/   E813F : =$0                 vcAM3 set $00<<7
(1)   27/   E813F : =$0                 vcAM4 set $00<<7
(1)   28/   E813F : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0A, $0A
(1)   28/   E813F : =$A                 vcD1R1 set $0A
(1)   28/   E813F : =$A                 vcD1R2 set $0A
(1)   28/   E813F : =$A                 vcD1R3 set $0A
(1)   28/   E813F : =$A                 vcD1R4 set $0A
(1)   29/   E813F : (MACRO)             	smpsVcDecayRate2    $0A, $0A, $0A, $0A
(1)   29/   E813F : =$A                 vcD2R1 set $0A
(1)   29/   E813F : =$A                 vcD2R2 set $0A
(1)   29/   E813F : =$A                 vcD2R3 set $0A
(1)   29/   E813F : =$A                 vcD2R4 set $0A
(1)   30/   E813F : (MACRO)             	smpsVcDecayLevel    $05, $05, $05, $05
(1)   30/   E813F : =$5                 vcDL1 set $05
(1)   30/   E813F : =$5                 vcDL2 set $05
(1)   30/   E813F : =$5                 vcDL3 set $05
(1)   30/   E813F : =$5                 vcDL4 set $05
(1)   31/   E813F : (MACRO)             	smpsVcReleaseRate   $07, $07, $07, $07
(1)   31/   E813F : =$7                 vcRR1 set $07
(1)   31/   E813F : =$7                 vcRR2 set $07
(1)   31/   E813F : =$7                 vcRR3 set $07
(1)   31/   E813F : =$7                 vcRR4 set $07
(1)   32/   E813F : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $00
(1)   32/   E813F : =$0                 vcTL1 set $00
(1)   32/   E813F : =$0                 vcTL2 set $00
(1)   32/   E813F : =$0                 vcTL3 set $00
(1)   32/   E813F : =$0                 vcTL4 set $00
(1)   32/   E813F : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8140 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8140 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8140 : =$0                 vcTLMask4 set 0
(1)   32/   E8140 : =$0                 vcTLMask3 set 0
(1)   32/   E8140 : =$0                 vcTLMask2 set 0
(1)   32/   E8140 : =$0                 vcTLMask1 set 0
(1)   32/   E8140 :                     
(1)   32/   E8140 : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8140 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8140 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8140 : =$80                vcTLMask1 set $80
(1)   32/   E8140 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8140 : =$0                 vcTL2 set vcTL2&$7F
(1)   32/   E8140 : =$0                 vcTL3 set vcTL3&$7F
(1)   32/   E8140 : =$0                 vcTL4 set vcTL4&$7F
(1)   32/   E8140 :                     
(1)   32/   E8140 : 7333 3373                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8144 : 0F14 191A                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8148 : 0A0A 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E814C : 0A0A 0A0A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8150 : 5757 5757                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8154 : 8080 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8158 :                     
(1)   34/   E8158 :                     
  462/   E8158 :                        Sound28:	include "sfx-improved/A8 - Beep.asm"
(1)    1/   E8158 :                     Sound28_Beep_Header:
(1)    2/   E8158 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8158 :                     
(1)    2/   E8158 : =$2                 SourceDriver set 2
(1)    2/   E8158 :                     
(1)    2/   E8158 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8158 :                     
(1)    2/   E8158 : =$E8158             songStart set *
(1)    2/   E8158 :                     
(1)    2/   E8158 :                     
(1)    3/   E8158 : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E8158 : 0000                        dc.w    $0000
(1)    4/   E815A : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E815A : 01                          dc.b    $01
(1)    5/   E815B : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E815B : 01                          dc.b    $01
(1)    6/   E815C :                     
(1)    7/   E815C : (MACRO)             	smpsHeaderSFXChannel cPSG1, Sound28_Beep_PSG1,	$E8, $03
(1)    7/   E815C : 8080                        dc.b    $80,CPSG1
(1)    7/   E815E :  (MACRO-2)                  CheckedChannelPointer SOUND28_BEEP_PSG1
(1)    7/   E815E : 6281                                dc.w    z80_ptr(SOUND28_BEEP_PSG1)
(1)    7/   E8160 :  (MACRO-2)                          PSGPitchConvert $E8
(1)    7/   E8160 : F4                                  dc.b    ($E8+psgdelta)&$FF
(1)    7/   E8161 : 03                          dc.b    $03
(1)    8/   E8162 :                     
(1)    9/   E8162 :                     ; PSG1 Data
(1)   10/   E8162 :                     Sound28_Beep_PSG1:
(1)   11/   E8162 : (MACRO)             	smpsPSGvoice        fTone_04
(1)   11/   E8162 : F504                        dc.b    $F5,FTONE_04
(1)   12/   E8164 : CB04                	dc.b	nD6, $04
(1)   13/   E8166 : (MACRO)             	smpsStop
(1)   13/   E8166 : F2                          dc.b    $F2
(1)   14/   E8167 :                     
  463/   E8167 :                        Sound29:	include "sfx-improved/A9 - Special Stage Item (Unused).asm"
(1)    1/   E8167 :                     Sound29_Bwoop_Header:
(1)    2/   E8167 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8167 :                     
(1)    2/   E8167 : =$2                 SourceDriver set 2
(1)    2/   E8167 :                     
(1)    2/   E8167 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8167 :                     
(1)    2/   E8167 : =$E8167             songStart set *
(1)    2/   E8167 :                     
(1)    2/   E8167 :                     
(1)    3/   E8167 : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E8167 : 0000                        dc.w    $0000
(1)    4/   E8169 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8169 : 01                          dc.b    $01
(1)    5/   E816A : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E816A : 01                          dc.b    $01
(1)    6/   E816B :                     
(1)    7/   E816B : (MACRO)             	smpsHeaderSFXChannel cPSG2, Sound29_Bwoop_PSG2,	$00, $00
(1)    7/   E816B : 80A0                        dc.b    $80,CPSG2
(1)    7/   E816D :  (MACRO-2)                  CheckedChannelPointer SOUND29_BWOOP_PSG2
(1)    7/   E816D : 7181                                dc.w    z80_ptr(SOUND29_BWOOP_PSG2)
(1)    7/   E816F :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E816F : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8170 : 00                          dc.b    $00
(1)    8/   E8171 :                     
(1)    9/   E8171 :                     ; PSG2 Data
(1)   10/   E8171 :                     Sound29_Bwoop_PSG2:
(1)   11/   E8171 : (MACRO)             	smpsModSet          $01, $01, $E6, $35
(1)   11/   E8171 : F0                          dc.b    $F0
(1)   11/   E8172 : 0201 E636                           dc.b    $01+1,$01,$E6,(($35+1) * $01) & $FF
(1)   11/   E8176 :                             ;dc.b   $01,$E6,$35
(1)   12/   E8176 : 8E06                	dc.b	nCs1, $06
(1)   13/   E8178 : (MACRO)             	smpsStop
(1)   13/   E8178 : F2                          dc.b    $F2
(1)   14/   E8179 :                     
  464/   E8179 :                        Sound2A:	include "sfx-improved/AA - Splash.asm"
(1)    1/   E8179 :                     Sound2A_Splash_Header:
(1)    2/   E8179 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8179 :                     
(1)    2/   E8179 : =$2                 SourceDriver set 2
(1)    2/   E8179 :                     
(1)    2/   E8179 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8179 :                     
(1)    2/   E8179 : =$E8179             songStart set *
(1)    2/   E8179 :                     
(1)    2/   E8179 :                     
(1)    3/   E8179 : (MACRO)             	smpsHeaderVoice     Sound2A_Splash_Voices
(1)    3/   E8179 : A181                                dc.w    z80_ptr(SOUND2A_SPLASH_VOICES)
(1)    4/   E817B : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E817B : 01                          dc.b    $01
(1)    5/   E817C : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E817C : 02                          dc.b    $02
(1)    6/   E817D :                     
(1)    7/   E817D : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound2A_Splash_PSG3,	$00, $00
(1)    7/   E817D : 80C0                        dc.b    $80,CPSG3
(1)    7/   E817F :  (MACRO-2)                  CheckedChannelPointer SOUND2A_SPLASH_PSG3
(1)    7/   E817F : 8981                                dc.w    z80_ptr(SOUND2A_SPLASH_PSG3)
(1)    7/   E8181 :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E8181 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8182 : 00                          dc.b    $00
(1)    8/   E8183 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound2A_Splash_FM5,	$00, $03
(1)    8/   E8183 : 8005                        dc.b    $80,CFM5
(1)    8/   E8185 :  (MACRO-2)                  CheckedChannelPointer SOUND2A_SPLASH_FM5
(1)    8/   E8185 : 9C81                                dc.w    z80_ptr(SOUND2A_SPLASH_FM5)
(1)    8/   E8187 : 00                                  dc.b    $00
(1)    8/   E8188 : 03                          dc.b    $03
(1)    9/   E8189 :                     
(1)   10/   E8189 :                     ; PSG3 Data
(1)   11/   E8189 :                     Sound2A_Splash_PSG3:
(1)   12/   E8189 : (MACRO)             	smpsPSGvoice        $00
(1)   12/   E8189 : F500                        dc.b    $F5,$00
(1)   13/   E818B : (MACRO)             	smpsPSGform         $E7
(1)   13/   E818B : F3E7                        dc.b    $F3,$E7
(1)   14/   E818D : C205 C705 E7        	dc.b	nF5, $05, nMaxPSG, $05, smpsNoAttack
(1)   15/   E8192 :                     
(1)   16/   E8192 :                     Sound2A_Splash_Loop00:
(1)   17/   E8192 : 07                  	dc.b	$07
(1)   18/   E8193 : (MACRO)             	smpsPSGAlterVol     $01
(1)   18/   E8193 : EC01                        dc.b    $EC,$01
(1)   19/   E8195 : E7                  	dc.b	smpsNoAttack
(1)   20/   E8196 : (MACRO)             	smpsLoop            $00, $0F, Sound2A_Splash_Loop00
(1)   20/   E8196 : F7                          dc.b    $F7
(1)   20/   E8197 : 000F                        dc.b    $00,$0F
(1)   20/   E8199 : 9281                                dc.w    z80_ptr(SOUND2A_SPLASH_LOOP00)
(1)   21/   E819B : (MACRO)             	smpsStop
(1)   21/   E819B : F2                          dc.b    $F2
(1)   22/   E819C :                     
(1)   23/   E819C :                     ; FM5 Data
(1)   24/   E819C :                     Sound2A_Splash_FM5:
(1)   25/   E819C : (MACRO)             	smpsSetvoice        $00
(1)   25/   E819C :  (MACRO-2)                  smpsFMvoice $00
(1)   25/   E819C : EF00                                dc.b    $EF,$00
(1)   26/   E819E : A614                	dc.b	nCs3, $14
(1)   27/   E81A0 : (MACRO)             	smpsStop
(1)   27/   E81A0 : F2                          dc.b    $F2
(1)   28/   E81A1 :                     
(1)   29/   E81A1 :                     Sound2A_Splash_Voices:
(1)   30/   E81A1 :                     ;	Voice $00
(1)   31/   E81A1 :                     ;	$00
(1)   32/   E81A1 :                     ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
(1)   33/   E81A1 :                     ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
(1)   34/   E81A1 : (MACRO)             	smpsVcAlgorithm     $00
(1)   34/   E81A1 : =$0                 vcAlgorithm set $00
(1)   35/   E81A1 : (MACRO)             	smpsVcFeedback      $00
(1)   35/   E81A1 : =$0                 vcFeedback set $00
(1)   36/   E81A1 : (MACRO)             	smpsVcUnusedBits    $00
(1)   36/   E81A1 : =$0                 vcUnusedBits set $00
(1)   36/   E81A1 : =$0                 vcD1R1Unk set 0
(1)   36/   E81A1 : =$0                 vcD1R2Unk set 0
(1)   36/   E81A1 : =$0                 vcD1R3Unk set 0
(1)   36/   E81A1 : =$0                 vcD1R4Unk set 0
(1)   37/   E81A1 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   37/   E81A1 : =$0                 vcDT1 set $00
(1)   37/   E81A1 : =$0                 vcDT2 set $00
(1)   37/   E81A1 : =$0                 vcDT3 set $00
(1)   37/   E81A1 : =$0                 vcDT4 set $00
(1)   38/   E81A1 : (MACRO)             	smpsVcCoarseFreq    $00, $02, $03, $00
(1)   38/   E81A1 : =$0                 vcCF1 set $00
(1)   38/   E81A1 : =$2                 vcCF2 set $02
(1)   38/   E81A1 : =$3                 vcCF3 set $03
(1)   38/   E81A1 : =$0                 vcCF4 set $00
(1)   39/   E81A1 : (MACRO)             	smpsVcRateScale     $00, $00, $03, $03
(1)   39/   E81A1 : =$0                 vcRS1 set $00
(1)   39/   E81A1 : =$0                 vcRS2 set $00
(1)   39/   E81A1 : =$3                 vcRS3 set $03
(1)   39/   E81A1 : =$3                 vcRS4 set $03
(1)   40/   E81A1 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $19
(1)   40/   E81A1 : =$1F                vcAR1 set $1F
(1)   40/   E81A1 : =$1F                vcAR2 set $1F
(1)   40/   E81A1 : =$1F                vcAR3 set $1F
(1)   40/   E81A1 : =$19                vcAR4 set $19
(1)   41/   E81A1 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   41/   E81A1 : =$0                 vcAM1 set $00<<5
(1)   41/   E81A1 : =$0                 vcAM2 set $00<<5
(1)   41/   E81A1 : =$0                 vcAM3 set $00<<5
(1)   41/   E81A1 : =$0                 vcAM4 set $00<<5
(1)   42/   E81A1 : (MACRO)             	smpsVcDecayRate1    $0F, $14, $11, $12
(1)   42/   E81A1 : =$F                 vcD1R1 set $0F
(1)   42/   E81A1 : =$14                vcD1R2 set $14
(1)   42/   E81A1 : =$11                vcD1R3 set $11
(1)   42/   E81A1 : =$12                vcD1R4 set $12
(1)   43/   E81A1 : (MACRO)             	smpsVcDecayRate2    $0D, $0A, $00, $0A
(1)   43/   E81A1 : =$D                 vcD2R1 set $0D
(1)   43/   E81A1 : =$A                 vcD2R2 set $0A
(1)   43/   E81A1 : =$0                 vcD2R3 set $00
(1)   43/   E81A1 : =$A                 vcD2R4 set $0A
(1)   44/   E81A1 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   44/   E81A1 : =$F                 vcDL1 set $0F
(1)   44/   E81A1 : =$F                 vcDL2 set $0F
(1)   44/   E81A1 : =$F                 vcDL3 set $0F
(1)   44/   E81A1 : =$F                 vcDL4 set $0F
(1)   45/   E81A1 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   45/   E81A1 : =$F                 vcRR1 set $0F
(1)   45/   E81A1 : =$F                 vcRR2 set $0F
(1)   45/   E81A1 : =$F                 vcRR3 set $0F
(1)   45/   E81A1 : =$F                 vcRR4 set $0F
(1)   46/   E81A1 : (MACRO)             	smpsVcTotalLevel    $00, $27, $07, $22
(1)   46/   E81A1 : =$0                 vcTL1 set $00
(1)   46/   E81A1 : =$27                vcTL2 set $27
(1)   46/   E81A1 : =$7                 vcTL3 set $07
(1)   46/   E81A1 : =$22                vcTL4 set $22
(1)   46/   E81A1 : 00                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   46/   E81A2 :                     ;   0     1     2     3     4     5     6     7
(1)   46/   E81A2 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   46/   E81A2 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   46/   E81A2 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   46/   E81A2 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   46/   E81A2 : =$80                vcTLMask1 set $80
(1)   46/   E81A2 :                     
(1)   46/   E81A2 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   46/   E81A2 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   46/   E81A2 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   46/   E81A2 : =$80                vcTLMask1 set $80
(1)   46/   E81A2 : =$0                 vcTL1 set vcTL1&$7F
(1)   46/   E81A2 : =$27                vcTL2 set vcTL2&$7F
(1)   46/   E81A2 : =$7                 vcTL3 set vcTL3&$7F
(1)   46/   E81A2 : =$22                vcTL4 set vcTL4&$7F
(1)   46/   E81A2 :                     
(1)   46/   E81A2 : 0003 0200                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   46/   E81A6 : D9DF 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   46/   E81AA : 1211 140F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   46/   E81AE : 0A00 0A0D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   46/   E81B2 : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   46/   E81B6 : 2207 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   47/   E81BA :                     
(1)   48/   E81BA :                     
  465/   E81BA :                        Sound2B:	include "sfx-improved/AB - Swish.asm"
(1)    1/   E81BA :                     Sound2B_Swish_Header:
(1)    2/   E81BA : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E81BA :                     
(1)    2/   E81BA : =$2                 SourceDriver set 2
(1)    2/   E81BA :                     
(1)    2/   E81BA : =$0                 SourceSMPS2ASM set 0
(1)    2/   E81BA :                     
(1)    2/   E81BA : =$E81BA             songStart set *
(1)    2/   E81BA :                     
(1)    2/   E81BA :                     
(1)    3/   E81BA : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E81BA : 0000                        dc.w    $0000
(1)    4/   E81BC : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E81BC : 01                          dc.b    $01
(1)    5/   E81BD : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E81BD : 01                          dc.b    $01
(1)    6/   E81BE :                     
(1)    7/   E81BE : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound2B_Swish_PSG3,	$00, $00
(1)    7/   E81BE : 80C0                        dc.b    $80,CPSG3
(1)    7/   E81C0 :  (MACRO-2)                  CheckedChannelPointer SOUND2B_SWISH_PSG3
(1)    7/   E81C0 : C481                                dc.w    z80_ptr(SOUND2B_SWISH_PSG3)
(1)    7/   E81C2 :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E81C2 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E81C3 : 00                          dc.b    $00
(1)    8/   E81C4 :                     
(1)    9/   E81C4 :                     ; PSG3 Data
(1)   10/   E81C4 :                     Sound2B_Swish_PSG3:
(1)   11/   E81C4 : (MACRO)             	smpsPSGvoice        $00
(1)   11/   E81C4 : F500                        dc.b    $F5,$00
(1)   12/   E81C6 : (MACRO)             	smpsPSGform         $E7
(1)   12/   E81C6 : F3E7                        dc.b    $F3,$E7
(1)   13/   E81C8 : C703 8003 C701 E7   	dc.b	nMaxPSG, $03, nRst, $03, nMaxPSG, $01, smpsNoAttack
(1)   14/   E81CF :                     
(1)   15/   E81CF :                     Sound2B_Swish_Loop00:
(1)   16/   E81CF : 01                  	dc.b	$01
(1)   17/   E81D0 : (MACRO)             	smpsPSGAlterVol     $01
(1)   17/   E81D0 : EC01                        dc.b    $EC,$01
(1)   18/   E81D2 : E7                  	dc.b	smpsNoAttack
(1)   19/   E81D3 : (MACRO)             	smpsLoop            $00, $15, Sound2B_Swish_Loop00
(1)   19/   E81D3 : F7                          dc.b    $F7
(1)   19/   E81D4 : 0015                        dc.b    $00,$15
(1)   19/   E81D6 : CF81                                dc.w    z80_ptr(SOUND2B_SWISH_LOOP00)
(1)   20/   E81D8 : (MACRO)             	smpsStop
(1)   20/   E81D8 : F2                          dc.b    $F2
(1)   21/   E81D9 :                     
  466/   E81D9 :                        Sound2C:	include "sfx-improved/AC - Boss Hit.asm"
(1)    1/   E81D9 :                     Sound2C_BossHit_Header:
(1)    2/   E81D9 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E81D9 :                     
(1)    2/   E81D9 : =$2                 SourceDriver set 2
(1)    2/   E81D9 :                     
(1)    2/   E81D9 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E81D9 :                     
(1)    2/   E81D9 : =$E81D9             songStart set *
(1)    2/   E81D9 :                     
(1)    2/   E81D9 :                     
(1)    3/   E81D9 : (MACRO)             	smpsHeaderVoice     Sound2C_39_4B_Voices
(1)    3/   E81D9 : F481                                dc.w    z80_ptr(SOUND2C_39_4B_VOICES)
(1)    4/   E81DB : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E81DB : 01                          dc.b    $01
(1)    5/   E81DC : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E81DC : 01                          dc.b    $01
(1)    6/   E81DD :                     
(1)    7/   E81DD : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound2C_BossHit_FM5,	$00, $00
(1)    7/   E81DD : 8005                        dc.b    $80,CFM5
(1)    7/   E81DF :  (MACRO-2)                  CheckedChannelPointer SOUND2C_BOSSHIT_FM5
(1)    7/   E81DF : E381                                dc.w    z80_ptr(SOUND2C_BOSSHIT_FM5)
(1)    7/   E81E1 : 00                                  dc.b    $00
(1)    7/   E81E2 : 00                          dc.b    $00
(1)    8/   E81E3 :                     
(1)    9/   E81E3 :                     ; FM5 Data
(1)   10/   E81E3 :                     Sound2C_BossHit_FM5:
(1)   11/   E81E3 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E81E3 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E81E3 : EF00                                dc.b    $EF,$00
(1)   12/   E81E5 : (MACRO)             	smpsModSet          $01, $01, $0C, $01
(1)   12/   E81E5 : F0                          dc.b    $F0
(1)   12/   E81E6 : 0201 0C02                           dc.b    $01+1,$01,$0C,(($01+1) * $01) & $FF
(1)   12/   E81EA :                             ;dc.b   $01,$0C,$01
(1)   13/   E81EA :                     
(1)   14/   E81EA :                     Sound2C_BossHit_Loop00:
(1)   15/   E81EA : 810A                	dc.b	nC0, $0A
(1)   16/   E81EC : (MACRO)             	smpsAlterVol        $10
(1)   16/   E81EC : E610                        dc.b    $E6,$10
(1)   17/   E81EE : (MACRO)             	smpsLoop            $00, $04, Sound2C_BossHit_Loop00
(1)   17/   E81EE : F7                          dc.b    $F7
(1)   17/   E81EF : 0004                        dc.b    $00,$04
(1)   17/   E81F1 : EA81                                dc.w    z80_ptr(SOUND2C_BOSSHIT_LOOP00)
(1)   18/   E81F3 : (MACRO)             	smpsStop
(1)   18/   E81F3 : F2                          dc.b    $F2
(1)   19/   E81F4 :                     
(1)   20/   E81F4 :                     Sound2C_39_4B_Voices:
(1)   21/   E81F4 :                     ;	Voice $00
(1)   22/   E81F4 :                     ;	$F9
(1)   23/   E81F4 :                     ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
(1)   24/   E81F4 :                     ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
(1)   25/   E81F4 : (MACRO)             	smpsVcAlgorithm     $01
(1)   25/   E81F4 : =$1                 vcAlgorithm set $01
(1)   26/   E81F4 : (MACRO)             	smpsVcFeedback      $07
(1)   26/   E81F4 : =$7                 vcFeedback set $07
(1)   27/   E81F4 : (MACRO)             	smpsVcUnusedBits    $03
(1)   27/   E81F4 : =$3                 vcUnusedBits set $03
(1)   27/   E81F4 : =$0                 vcD1R1Unk set 0
(1)   27/   E81F4 : =$0                 vcD1R2Unk set 0
(1)   27/   E81F4 : =$0                 vcD1R3Unk set 0
(1)   27/   E81F4 : =$0                 vcD1R4Unk set 0
(1)   28/   E81F4 : (MACRO)             	smpsVcDetune        $03, $01, $03, $02
(1)   28/   E81F4 : =$3                 vcDT1 set $03
(1)   28/   E81F4 : =$1                 vcDT2 set $01
(1)   28/   E81F4 : =$3                 vcDT3 set $03
(1)   28/   E81F4 : =$2                 vcDT4 set $02
(1)   29/   E81F4 : (MACRO)             	smpsVcCoarseFreq    $02, $00, $00, $01
(1)   29/   E81F4 : =$2                 vcCF1 set $02
(1)   29/   E81F4 : =$0                 vcCF2 set $00
(1)   29/   E81F4 : =$0                 vcCF3 set $00
(1)   29/   E81F4 : =$1                 vcCF4 set $01
(1)   30/   E81F4 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   30/   E81F4 : =$0                 vcRS1 set $00
(1)   30/   E81F4 : =$0                 vcRS2 set $00
(1)   30/   E81F4 : =$0                 vcRS3 set $00
(1)   30/   E81F4 : =$0                 vcRS4 set $00
(1)   31/   E81F4 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   31/   E81F4 : =$1F                vcAR1 set $1F
(1)   31/   E81F4 : =$1F                vcAR2 set $1F
(1)   31/   E81F4 : =$1F                vcAR3 set $1F
(1)   31/   E81F4 : =$1F                vcAR4 set $1F
(1)   32/   E81F4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   32/   E81F4 : =$0                 vcAM1 set $00<<5
(1)   32/   E81F4 : =$0                 vcAM2 set $00<<5
(1)   32/   E81F4 : =$0                 vcAM3 set $00<<5
(1)   32/   E81F4 : =$0                 vcAM4 set $00<<5
(1)   33/   E81F4 : (MACRO)             	smpsVcDecayRate1    $02, $09, $18, $05
(1)   33/   E81F4 : =$2                 vcD1R1 set $02
(1)   33/   E81F4 : =$9                 vcD1R2 set $09
(1)   33/   E81F4 : =$18                vcD1R3 set $18
(1)   33/   E81F4 : =$5                 vcD1R4 set $05
(1)   34/   E81F4 : (MACRO)             	smpsVcDecayRate2    $05, $10, $1F, $0B
(1)   34/   E81F4 : =$5                 vcD2R1 set $05
(1)   34/   E81F4 : =$10                vcD2R2 set $10
(1)   34/   E81F4 : =$1F                vcD2R3 set $1F
(1)   34/   E81F4 : =$B                 vcD2R4 set $0B
(1)   35/   E81F4 : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   35/   E81F4 : =$2                 vcDL1 set $02
(1)   35/   E81F4 : =$4                 vcDL2 set $04
(1)   35/   E81F4 : =$2                 vcDL3 set $02
(1)   35/   E81F4 : =$1                 vcDL4 set $01
(1)   36/   E81F4 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   36/   E81F4 : =$F                 vcRR1 set $0F
(1)   36/   E81F4 : =$F                 vcRR2 set $0F
(1)   36/   E81F4 : =$F                 vcRR3 set $0F
(1)   36/   E81F4 : =$F                 vcRR4 set $0F
(1)   37/   E81F4 : (MACRO)             	smpsVcTotalLevel    $00, $04, $07, $0E
(1)   37/   E81F4 : =$0                 vcTL1 set $00
(1)   37/   E81F4 : =$4                 vcTL2 set $04
(1)   37/   E81F4 : =$7                 vcTL3 set $07
(1)   37/   E81F4 : =$E                 vcTL4 set $0E
(1)   37/   E81F4 : F9                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   37/   E81F5 :                     ;   0     1     2     3     4     5     6     7
(1)   37/   E81F5 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   37/   E81F5 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E81F5 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E81F5 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E81F5 : =$80                vcTLMask1 set $80
(1)   37/   E81F5 :                     
(1)   37/   E81F5 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E81F5 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E81F5 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E81F5 : =$80                vcTLMask1 set $80
(1)   37/   E81F5 : =$0                 vcTL1 set vcTL1&$7F
(1)   37/   E81F5 : =$4                 vcTL2 set vcTL2&$7F
(1)   37/   E81F5 : =$7                 vcTL3 set vcTL3&$7F
(1)   37/   E81F5 : =$E                 vcTL4 set vcTL4&$7F
(1)   37/   E81F5 :                     
(1)   37/   E81F5 : 2130 1032                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   37/   E81F9 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   37/   E81FD : 0518 0902                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   37/   E8201 : 0B1F 1005                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   37/   E8205 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   37/   E8209 : 0E07 0480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   E820D :                     
(1)   39/   E820D :                     
  467/   E820D :                        Sound2D:	include "sfx-improved/AD - Inhaling Bubble.asm"
(1)    1/   E820D :                     Sound2D_InhalingBubble_Header:
(1)    2/   E820D : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E820D :                     
(1)    2/   E820D : =$2                 SourceDriver set 2
(1)    2/   E820D :                     
(1)    2/   E820D : =$1                 SourceSMPS2ASM set 1
(1)    2/   E820D :                     
(1)    2/   E820D : =$E820D             songStart set *
(1)    2/   E820D :                     
(1)    2/   E820D :                     
(1)    3/   E820D : (MACRO)             	smpsHeaderVoice     Sound2D_InhalingBubble_Voices
(1)    3/   E820D : 2A82                                dc.w    z80_ptr(SOUND2D_INHALINGBUBBLE_VOICES)
(1)    4/   E820F : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E820F : 01                          dc.b    $01
(1)    5/   E8210 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8210 : 01                          dc.b    $01
(1)    6/   E8211 :                     
(1)    7/   E8211 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound2D_InhalingBubble_FM5,	$0E, $00
(1)    7/   E8211 : 8005                        dc.b    $80,CFM5
(1)    7/   E8213 :  (MACRO-2)                  CheckedChannelPointer SOUND2D_INHALINGBUBBLE_FM5
(1)    7/   E8213 : 1782                                dc.w    z80_ptr(SOUND2D_INHALINGBUBBLE_FM5)
(1)    7/   E8215 : 0E                                  dc.b    $0E
(1)    7/   E8216 : 00                          dc.b    $00
(1)    8/   E8217 :                     
(1)    9/   E8217 :                     ; FM5 Data
(1)   10/   E8217 :                     Sound2D_InhalingBubble_FM5:
(1)   11/   E8217 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8217 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8217 : EF00                                dc.b    $EF,$00
(1)   12/   E8219 : (MACRO)             	smpsModSet          $01, $01, $21, $6E
(1)   12/   E8219 : F0                          dc.b    $F0
(1)   12/   E821A : 0201 216F                           dc.b    $01+1,$01,$21,(($6E+1) * $01) & $FF
(1)   12/   E821E :                             ;dc.b   $01,$21,$6E
(1)   13/   E821E : A607 8006           	dc.b	nCs3, $07, nRst, $06
(1)   14/   E8222 : (MACRO)             	smpsModSet          $01, $01, $44, $1E
(1)   14/   E8222 : F0                          dc.b    $F0
(1)   14/   E8223 : 0201 441F                           dc.b    $01+1,$01,$44,(($1E+1) * $01) & $FF
(1)   14/   E8227 :                             ;dc.b   $01,$44,$1E
(1)   15/   E8227 : AD08                	dc.b	nAb3, $08
(1)   16/   E8229 : (MACRO)             	smpsStop
(1)   16/   E8229 : F2                          dc.b    $F2
(1)   17/   E822A :                     
(1)   18/   E822A :                     Sound2D_InhalingBubble_Voices:
(1)   19/   E822A :                     ;	Voice $00
(1)   20/   E822A :                     ;	$35
(1)   21/   E822A :                     ;	$05, $09, $08, $07, 	$1E, $0D, $0D, $0E, 	$0C, $15, $03, $06
(1)   22/   E822A :                     ;	$16, $0E, $09, $10, 	$2F, $2F, $1F, $1F, 	$15, $12, $12, $80
(1)   23/   E822A : (MACRO)             	smpsVcAlgorithm     $05
(1)   23/   E822A : =$5                 vcAlgorithm set $05
(1)   24/   E822A : (MACRO)             	smpsVcFeedback      $06
(1)   24/   E822A : =$6                 vcFeedback set $06
(1)   25/   E822A : (MACRO)             	smpsVcUnusedBits    $00
(1)   25/   E822A : =$0                 vcUnusedBits set $00
(1)   25/   E822A : =$0                 vcD1R1Unk set 0
(1)   25/   E822A : =$0                 vcD1R2Unk set 0
(1)   25/   E822A : =$0                 vcD1R3Unk set 0
(1)   25/   E822A : =$0                 vcD1R4Unk set 0
(1)   26/   E822A : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   26/   E822A : =$0                 vcDT1 set $00
(1)   26/   E822A : =$0                 vcDT2 set $00
(1)   26/   E822A : =$0                 vcDT3 set $00
(1)   26/   E822A : =$0                 vcDT4 set $00
(1)   27/   E822A : (MACRO)             	smpsVcCoarseFreq    $07, $08, $09, $05
(1)   27/   E822A : =$7                 vcCF1 set $07
(1)   27/   E822A : =$8                 vcCF2 set $08
(1)   27/   E822A : =$9                 vcCF3 set $09
(1)   27/   E822A : =$5                 vcCF4 set $05
(1)   28/   E822A : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   28/   E822A : =$0                 vcRS1 set $00
(1)   28/   E822A : =$0                 vcRS2 set $00
(1)   28/   E822A : =$0                 vcRS3 set $00
(1)   28/   E822A : =$0                 vcRS4 set $00
(1)   29/   E822A : (MACRO)             	smpsVcAttackRate    $0E, $0D, $0D, $1E
(1)   29/   E822A : =$E                 vcAR1 set $0E
(1)   29/   E822A : =$D                 vcAR2 set $0D
(1)   29/   E822A : =$D                 vcAR3 set $0D
(1)   29/   E822A : =$1E                vcAR4 set $1E
(1)   30/   E822A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   30/   E822A : =$0                 vcAM1 set $00<<7
(1)   30/   E822A : =$0                 vcAM2 set $00<<7
(1)   30/   E822A : =$0                 vcAM3 set $00<<7
(1)   30/   E822A : =$0                 vcAM4 set $00<<7
(1)   31/   E822A : (MACRO)             	smpsVcDecayRate1    $06, $03, $15, $0C
(1)   31/   E822A : =$6                 vcD1R1 set $06
(1)   31/   E822A : =$3                 vcD1R2 set $03
(1)   31/   E822A : =$15                vcD1R3 set $15
(1)   31/   E822A : =$C                 vcD1R4 set $0C
(1)   32/   E822A : (MACRO)             	smpsVcDecayRate2    $10, $09, $0E, $16
(1)   32/   E822A : =$10                vcD2R1 set $10
(1)   32/   E822A : =$9                 vcD2R2 set $09
(1)   32/   E822A : =$E                 vcD2R3 set $0E
(1)   32/   E822A : =$16                vcD2R4 set $16
(1)   33/   E822A : (MACRO)             	smpsVcDecayLevel    $01, $01, $02, $02
(1)   33/   E822A : =$1                 vcDL1 set $01
(1)   33/   E822A : =$1                 vcDL2 set $01
(1)   33/   E822A : =$2                 vcDL3 set $02
(1)   33/   E822A : =$2                 vcDL4 set $02
(1)   34/   E822A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   34/   E822A : =$F                 vcRR1 set $0F
(1)   34/   E822A : =$F                 vcRR2 set $0F
(1)   34/   E822A : =$F                 vcRR3 set $0F
(1)   34/   E822A : =$F                 vcRR4 set $0F
(1)   35/   E822A : (MACRO)             	smpsVcTotalLevel    $80, $12, $12, $15
(1)   35/   E822A : =$80                vcTL1 set $80
(1)   35/   E822A : =$12                vcTL2 set $12
(1)   35/   E822A : =$12                vcTL3 set $12
(1)   35/   E822A : =$15                vcTL4 set $15
(1)   35/   E822A : 35                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   35/   E822B :                     ;   0     1     2     3     4     5     6     7
(1)   35/   E822B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   35/   E822B : =$0                 vcTLMask4 set 0
(1)   35/   E822B : =$0                 vcTLMask3 set 0
(1)   35/   E822B : =$0                 vcTLMask2 set 0
(1)   35/   E822B : =$0                 vcTLMask1 set 0
(1)   35/   E822B :                     
(1)   35/   E822B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   35/   E822B : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   35/   E822B : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   35/   E822B : =$80                vcTLMask1 set $80
(1)   35/   E822B : =$0                 vcTL1 set vcTL1&$7F
(1)   35/   E822B : =$12                vcTL2 set vcTL2&$7F
(1)   35/   E822B : =$12                vcTL3 set vcTL3&$7F
(1)   35/   E822B : =$15                vcTL4 set vcTL4&$7F
(1)   35/   E822B :                     
(1)   35/   E822B : 0509 0807                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   35/   E822F : 1E0D 0D0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   35/   E8233 : 0C15 0306                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   35/   E8237 : 160E 0910                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   35/   E823B : 2F2F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   35/   E823F : 1592 9280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   36/   E8243 :                     
(1)   37/   E8243 :                     
  468/   E8243 :                        Sound2E:	include "sfx-improved/AE - Lava Ball.asm"
(1)    1/   E8243 :                     Sound2E_LavaBall_Header:
(1)    2/   E8243 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8243 :                     
(1)    2/   E8243 : =$2                 SourceDriver set 2
(1)    2/   E8243 :                     
(1)    2/   E8243 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8243 :                     
(1)    2/   E8243 : =$E8243             songStart set *
(1)    2/   E8243 :                     
(1)    2/   E8243 :                     
(1)    3/   E8243 : (MACRO)             	smpsHeaderVoice     Sound2E_33_Voices
(1)    3/   E8243 : 7482                                dc.w    z80_ptr(SOUND2E_33_VOICES)
(1)    4/   E8245 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8245 : 01                          dc.b    $01
(1)    5/   E8246 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8246 : 02                          dc.b    $02
(1)    6/   E8247 :                     
(1)    7/   E8247 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound2E_LavaBall_FM5,	$00, $00
(1)    7/   E8247 : 8005                        dc.b    $80,CFM5
(1)    7/   E8249 :  (MACRO-2)                  CheckedChannelPointer SOUND2E_LAVABALL_FM5
(1)    7/   E8249 : 5382                                dc.w    z80_ptr(SOUND2E_LAVABALL_FM5)
(1)    7/   E824B : 00                                  dc.b    $00
(1)    7/   E824C : 00                          dc.b    $00
(1)    8/   E824D : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound2E_LavaBall_PSG3,	$00, $00
(1)    8/   E824D : 80C0                        dc.b    $80,CPSG3
(1)    8/   E824F :  (MACRO-2)                  CheckedChannelPointer SOUND2E_LAVABALL_PSG3
(1)    8/   E824F : 6182                                dc.w    z80_ptr(SOUND2E_LAVABALL_PSG3)
(1)    8/   E8251 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8251 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8252 : 00                          dc.b    $00
(1)    9/   E8253 :                     
(1)   10/   E8253 :                     ; FM5 Data
(1)   11/   E8253 :                     Sound2E_LavaBall_FM5:
(1)   12/   E8253 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8253 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8253 : EF00                                dc.b    $EF,$00
(1)   13/   E8255 : 8001                	dc.b	nRst, $01
(1)   14/   E8257 : (MACRO)             	smpsModSet          $01, $01, $40, $48
(1)   14/   E8257 : F0                          dc.b    $F0
(1)   14/   E8258 : 0201 4049                           dc.b    $01+1,$01,$40,(($48+1) * $01) & $FF
(1)   14/   E825C :                             ;dc.b   $01,$40,$48
(1)   15/   E825C : 8306 8502           	dc.b	nD0, $06, nE0, $02
(1)   16/   E8260 : (MACRO)             	smpsStop
(1)   16/   E8260 : F2                          dc.b    $F2
(1)   17/   E8261 :                     
(1)   18/   E8261 :                     ; PSG3 Data
(1)   19/   E8261 :                     Sound2E_LavaBall_PSG3:
(1)   20/   E8261 : (MACRO)             	smpsPSGvoice        $00
(1)   20/   E8261 : F500                        dc.b    $F5,$00
(1)   21/   E8263 : 800B                	dc.b	nRst, $0B
(1)   22/   E8265 : (MACRO)             	smpsPSGform         $E7
(1)   22/   E8265 : F3E7                        dc.b    $F3,$E7
(1)   23/   E8267 : C701 E7             	dc.b	nMaxPSG, $01, smpsNoAttack
(1)   24/   E826A :                     
(1)   25/   E826A :                     Sound2E_LavaBall_Loop00:
(1)   26/   E826A : 02                  	dc.b	$02
(1)   27/   E826B : (MACRO)             	smpsPSGAlterVol     $01
(1)   27/   E826B : EC01                        dc.b    $EC,$01
(1)   28/   E826D : E7                  	dc.b	smpsNoAttack
(1)   29/   E826E : (MACRO)             	smpsLoop            $00, $10, Sound2E_LavaBall_Loop00
(1)   29/   E826E : F7                          dc.b    $F7
(1)   29/   E826F : 0010                        dc.b    $00,$10
(1)   29/   E8271 : 6A82                                dc.w    z80_ptr(SOUND2E_LAVABALL_LOOP00)
(1)   30/   E8273 : (MACRO)             	smpsStop
(1)   30/   E8273 : F2                          dc.b    $F2
(1)   31/   E8274 :                     
(1)   32/   E8274 :                     Sound2E_33_Voices:
(1)   33/   E8274 :                     ;	Voice $00
(1)   34/   E8274 :                     ;	$FA
(1)   35/   E8274 :                     ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
(1)   36/   E8274 :                     ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
(1)   37/   E8274 : (MACRO)             	smpsVcAlgorithm     $02
(1)   37/   E8274 : =$2                 vcAlgorithm set $02
(1)   38/   E8274 : (MACRO)             	smpsVcFeedback      $07
(1)   38/   E8274 : =$7                 vcFeedback set $07
(1)   39/   E8274 : (MACRO)             	smpsVcUnusedBits    $03
(1)   39/   E8274 : =$3                 vcUnusedBits set $03
(1)   39/   E8274 : =$0                 vcD1R1Unk set 0
(1)   39/   E8274 : =$0                 vcD1R2Unk set 0
(1)   39/   E8274 : =$0                 vcD1R3Unk set 0
(1)   39/   E8274 : =$0                 vcD1R4Unk set 0
(1)   40/   E8274 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   40/   E8274 : =$0                 vcDT1 set $00
(1)   40/   E8274 : =$0                 vcDT2 set $00
(1)   40/   E8274 : =$0                 vcDT3 set $00
(1)   40/   E8274 : =$0                 vcDT4 set $00
(1)   41/   E8274 : (MACRO)             	smpsVcCoarseFreq    $05, $00, $03, $02
(1)   41/   E8274 : =$5                 vcCF1 set $05
(1)   41/   E8274 : =$0                 vcCF2 set $00
(1)   41/   E8274 : =$3                 vcCF3 set $03
(1)   41/   E8274 : =$2                 vcCF4 set $02
(1)   42/   E8274 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   42/   E8274 : =$0                 vcRS1 set $00
(1)   42/   E8274 : =$0                 vcRS2 set $00
(1)   42/   E8274 : =$0                 vcRS3 set $00
(1)   42/   E8274 : =$0                 vcRS4 set $00
(1)   43/   E8274 : (MACRO)             	smpsVcAttackRate    $13, $0F, $11, $12
(1)   43/   E8274 : =$13                vcAR1 set $13
(1)   43/   E8274 : =$F                 vcAR2 set $0F
(1)   43/   E8274 : =$11                vcAR3 set $11
(1)   43/   E8274 : =$12                vcAR4 set $12
(1)   44/   E8274 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   44/   E8274 : =$0                 vcAM1 set $00<<5
(1)   44/   E8274 : =$0                 vcAM2 set $00<<5
(1)   44/   E8274 : =$0                 vcAM3 set $00<<5
(1)   44/   E8274 : =$0                 vcAM4 set $00<<5
(1)   45/   E8274 : (MACRO)             	smpsVcDecayRate1    $02, $09, $18, $05
(1)   45/   E8274 : =$2                 vcD1R1 set $02
(1)   45/   E8274 : =$9                 vcD1R2 set $09
(1)   45/   E8274 : =$18                vcD1R3 set $18
(1)   45/   E8274 : =$5                 vcD1R4 set $05
(1)   46/   E8274 : (MACRO)             	smpsVcDecayRate2    $02, $06, $0F, $06
(1)   46/   E8274 : =$2                 vcD2R1 set $02
(1)   46/   E8274 : =$6                 vcD2R2 set $06
(1)   46/   E8274 : =$F                 vcD2R3 set $0F
(1)   46/   E8274 : =$6                 vcD2R4 set $06
(1)   47/   E8274 : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   47/   E8274 : =$2                 vcDL1 set $02
(1)   47/   E8274 : =$4                 vcDL2 set $04
(1)   47/   E8274 : =$2                 vcDL3 set $02
(1)   47/   E8274 : =$1                 vcDL4 set $01
(1)   48/   E8274 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   48/   E8274 : =$F                 vcRR1 set $0F
(1)   48/   E8274 : =$F                 vcRR2 set $0F
(1)   48/   E8274 : =$F                 vcRR3 set $0F
(1)   48/   E8274 : =$F                 vcRR4 set $0F
(1)   49/   E8274 : (MACRO)             	smpsVcTotalLevel    $00, $0E, $1A, $2F
(1)   49/   E8274 : =$0                 vcTL1 set $00
(1)   49/   E8274 : =$E                 vcTL2 set $0E
(1)   49/   E8274 : =$1A                vcTL3 set $1A
(1)   49/   E8274 : =$2F                vcTL4 set $2F
(1)   49/   E8274 : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   49/   E8275 :                     ;   0     1     2     3     4     5     6     7
(1)   49/   E8275 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   49/   E8275 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   49/   E8275 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   49/   E8275 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   49/   E8275 : =$80                vcTLMask1 set $80
(1)   49/   E8275 :                     
(1)   49/   E8275 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   49/   E8275 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   49/   E8275 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   49/   E8275 : =$80                vcTLMask1 set $80
(1)   49/   E8275 : =$0                 vcTL1 set vcTL1&$7F
(1)   49/   E8275 : =$E                 vcTL2 set vcTL2&$7F
(1)   49/   E8275 : =$1A                vcTL3 set vcTL3&$7F
(1)   49/   E8275 : =$2F                vcTL4 set vcTL4&$7F
(1)   49/   E8275 :                     
(1)   49/   E8275 : 0203 0005                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   49/   E8279 : 1211 0F13                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   49/   E827D : 0518 0902                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   49/   E8281 : 060F 0602                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   49/   E8285 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   49/   E8289 : 2F1A 0E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   50/   E828D :                     
(1)   51/   E828D :                     
  469/   E828D :                        Sound2F:	include "sfx-improved/AF - Shield.asm"
(1)    1/   E828D :                     Sound2F_Shield_Header:
(1)    2/   E828D : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E828D :                     
(1)    2/   E828D : =$2                 SourceDriver set 2
(1)    2/   E828D :                     
(1)    2/   E828D : =$0                 SourceSMPS2ASM set 0
(1)    2/   E828D :                     
(1)    2/   E828D : =$E828D             songStart set *
(1)    2/   E828D :                     
(1)    2/   E828D :                     
(1)    3/   E828D : (MACRO)             	smpsHeaderVoice     Sound2F_Shield_Voices
(1)    3/   E828D : A182                                dc.w    z80_ptr(SOUND2F_SHIELD_VOICES)
(1)    4/   E828F : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E828F : 01                          dc.b    $01
(1)    5/   E8290 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8290 : 01                          dc.b    $01
(1)    6/   E8291 :                     
(1)    7/   E8291 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound2F_Shield_FM5,	$0C, $00
(1)    7/   E8291 : 8005                        dc.b    $80,CFM5
(1)    7/   E8293 :  (MACRO-2)                  CheckedChannelPointer SOUND2F_SHIELD_FM5
(1)    7/   E8293 : 9782                                dc.w    z80_ptr(SOUND2F_SHIELD_FM5)
(1)    7/   E8295 : 0C                                  dc.b    $0C
(1)    7/   E8296 : 00                          dc.b    $00
(1)    8/   E8297 :                     
(1)    9/   E8297 :                     ; FM5 Data
(1)   10/   E8297 :                     Sound2F_Shield_FM5:
(1)   11/   E8297 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8297 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8297 : EF00                                dc.b    $EF,$00
(1)   12/   E8299 : 8001 A305 E7A4 26   	dc.b	nRst, $01, nBb2, $05, smpsNoAttack, nB2, $26
(1)   13/   E82A0 : (MACRO)             	smpsStop
(1)   13/   E82A0 : F2                          dc.b    $F2
(1)   14/   E82A1 :                     
(1)   15/   E82A1 :                     Sound2F_Shield_Voices:
(1)   16/   E82A1 :                     ;	Voice $00
(1)   17/   E82A1 :                     ;	$30
(1)   18/   E82A1 :                     ;	$30, $30, $30, $30, 	$9E, $A8, $AC, $DC, 	$0E, $0A, $04, $05
(1)   19/   E82A1 :                     ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$04, $2C, $14, $80
(1)   20/   E82A1 : (MACRO)             	smpsVcAlgorithm     $00
(1)   20/   E82A1 : =$0                 vcAlgorithm set $00
(1)   21/   E82A1 : (MACRO)             	smpsVcFeedback      $06
(1)   21/   E82A1 : =$6                 vcFeedback set $06
(1)   22/   E82A1 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E82A1 : =$0                 vcUnusedBits set $00
(1)   22/   E82A1 : =$0                 vcD1R1Unk set 0
(1)   22/   E82A1 : =$0                 vcD1R2Unk set 0
(1)   22/   E82A1 : =$0                 vcD1R3Unk set 0
(1)   22/   E82A1 : =$0                 vcD1R4Unk set 0
(1)   23/   E82A1 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)   23/   E82A1 : =$3                 vcDT1 set $03
(1)   23/   E82A1 : =$3                 vcDT2 set $03
(1)   23/   E82A1 : =$3                 vcDT3 set $03
(1)   23/   E82A1 : =$3                 vcDT4 set $03
(1)   24/   E82A1 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   24/   E82A1 : =$0                 vcCF1 set $00
(1)   24/   E82A1 : =$0                 vcCF2 set $00
(1)   24/   E82A1 : =$0                 vcCF3 set $00
(1)   24/   E82A1 : =$0                 vcCF4 set $00
(1)   25/   E82A1 : (MACRO)             	smpsVcRateScale     $03, $02, $02, $02
(1)   25/   E82A1 : =$3                 vcRS1 set $03
(1)   25/   E82A1 : =$2                 vcRS2 set $02
(1)   25/   E82A1 : =$2                 vcRS3 set $02
(1)   25/   E82A1 : =$2                 vcRS4 set $02
(1)   26/   E82A1 : (MACRO)             	smpsVcAttackRate    $1C, $2C, $28, $1E
(1)   26/   E82A1 : =$1C                vcAR1 set $1C
(1)   26/   E82A1 : =$2C                vcAR2 set $2C
(1)   26/   E82A1 : =$28                vcAR3 set $28
(1)   26/   E82A1 : =$1E                vcAR4 set $1E
(1)   27/   E82A1 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E82A1 : =$0                 vcAM1 set $00<<5
(1)   27/   E82A1 : =$0                 vcAM2 set $00<<5
(1)   27/   E82A1 : =$0                 vcAM3 set $00<<5
(1)   27/   E82A1 : =$0                 vcAM4 set $00<<5
(1)   28/   E82A1 : (MACRO)             	smpsVcDecayRate1    $05, $04, $0A, $0E
(1)   28/   E82A1 : =$5                 vcD1R1 set $05
(1)   28/   E82A1 : =$4                 vcD1R2 set $04
(1)   28/   E82A1 : =$A                 vcD1R3 set $0A
(1)   28/   E82A1 : =$E                 vcD1R4 set $0E
(1)   29/   E82A1 : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $08
(1)   29/   E82A1 : =$8                 vcD2R1 set $08
(1)   29/   E82A1 : =$8                 vcD2R2 set $08
(1)   29/   E82A1 : =$8                 vcD2R3 set $08
(1)   29/   E82A1 : =$8                 vcD2R4 set $08
(1)   30/   E82A1 : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $0B, $0B
(1)   30/   E82A1 : =$B                 vcDL1 set $0B
(1)   30/   E82A1 : =$B                 vcDL2 set $0B
(1)   30/   E82A1 : =$B                 vcDL3 set $0B
(1)   30/   E82A1 : =$B                 vcDL4 set $0B
(1)   31/   E82A1 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E82A1 : =$F                 vcRR1 set $0F
(1)   31/   E82A1 : =$F                 vcRR2 set $0F
(1)   31/   E82A1 : =$F                 vcRR3 set $0F
(1)   31/   E82A1 : =$F                 vcRR4 set $0F
(1)   32/   E82A1 : (MACRO)             	smpsVcTotalLevel    $00, $14, $2C, $04
(1)   32/   E82A1 : =$0                 vcTL1 set $00
(1)   32/   E82A1 : =$14                vcTL2 set $14
(1)   32/   E82A1 : =$2C                vcTL3 set $2C
(1)   32/   E82A1 : =$4                 vcTL4 set $04
(1)   32/   E82A1 : 30                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E82A2 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E82A2 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E82A2 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E82A2 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E82A2 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E82A2 : =$80                vcTLMask1 set $80
(1)   32/   E82A2 :                     
(1)   32/   E82A2 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E82A2 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E82A2 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E82A2 : =$80                vcTLMask1 set $80
(1)   32/   E82A2 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E82A2 : =$14                vcTL2 set vcTL2&$7F
(1)   32/   E82A2 : =$2C                vcTL3 set vcTL3&$7F
(1)   32/   E82A2 : =$4                 vcTL4 set vcTL4&$7F
(1)   32/   E82A2 :                     
(1)   32/   E82A2 : 3030 3030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E82A6 : 9EA8 ACDC                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E82AA : 0E0A 0405                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E82AE : 0808 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E82B2 : BFBF BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E82B6 : 042C 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E82BA :                     
(1)   34/   E82BA :                     
  470/   E82BA :                        Sound30:	include "sfx-improved/B0 - Laser Beam.asm"
(1)    1/   E82BA :                     Sound30_LaserBeam_Header:
(1)    2/   E82BA : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E82BA :                     
(1)    2/   E82BA : =$2                 SourceDriver set 2
(1)    2/   E82BA :                     
(1)    2/   E82BA : =$0                 SourceSMPS2ASM set 0
(1)    2/   E82BA :                     
(1)    2/   E82BA : =$E82BA             songStart set *
(1)    2/   E82BA :                     
(1)    2/   E82BA :                     
(1)    3/   E82BA : (MACRO)             	smpsHeaderVoice     Sound30_LaserBeam_Voices
(1)    3/   E82BA : D282                                dc.w    z80_ptr(SOUND30_LASERBEAM_VOICES)
(1)    4/   E82BC : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E82BC : 01                          dc.b    $01
(1)    5/   E82BD : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E82BD : 01                          dc.b    $01
(1)    6/   E82BE :                     
(1)    7/   E82BE : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound30_LaserBeam_FM5,	$FB, $05
(1)    7/   E82BE : 8005                        dc.b    $80,CFM5
(1)    7/   E82C0 :  (MACRO-2)                  CheckedChannelPointer SOUND30_LASERBEAM_FM5
(1)    7/   E82C0 : C482                                dc.w    z80_ptr(SOUND30_LASERBEAM_FM5)
(1)    7/   E82C2 : FB                                  dc.b    $FB
(1)    7/   E82C3 : 05                          dc.b    $05
(1)    8/   E82C4 :                     
(1)    9/   E82C4 :                     ; FM5 Data
(1)   10/   E82C4 :                     Sound30_LaserBeam_FM5:
(1)   11/   E82C4 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E82C4 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E82C4 : EF00                                dc.b    $EF,$00
(1)   12/   E82C6 : DF7F                	dc.b	nBb7, $7F
(1)   13/   E82C8 :                     
(1)   14/   E82C8 :                     Sound30_LaserBeam_Loop00:
(1)   15/   E82C8 : DF02                	dc.b	nBb7, $02
(1)   16/   E82CA : (MACRO)             	smpsAlterVol        $01
(1)   16/   E82CA : E601                        dc.b    $E6,$01
(1)   17/   E82CC : (MACRO)             	smpsLoop            $00, $1B, Sound30_LaserBeam_Loop00
(1)   17/   E82CC : F7                          dc.b    $F7
(1)   17/   E82CD : 001B                        dc.b    $00,$1B
(1)   17/   E82CF : C882                                dc.w    z80_ptr(SOUND30_LASERBEAM_LOOP00)
(1)   18/   E82D1 : (MACRO)             	smpsStop
(1)   18/   E82D1 : F2                          dc.b    $F2
(1)   19/   E82D2 :                     
(1)   20/   E82D2 :                     Sound30_LaserBeam_Voices:
(1)   21/   E82D2 :                     ;	Voice $00
(1)   22/   E82D2 :                     ;	$83
(1)   23/   E82D2 :                     ;	$1F, $15, $1F, $1F, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   24/   E82D2 :                     ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$0B, $16, $01, $82
(1)   25/   E82D2 : (MACRO)             	smpsVcAlgorithm     $03
(1)   25/   E82D2 : =$3                 vcAlgorithm set $03
(1)   26/   E82D2 : (MACRO)             	smpsVcFeedback      $00
(1)   26/   E82D2 : =$0                 vcFeedback set $00
(1)   27/   E82D2 : (MACRO)             	smpsVcUnusedBits    $02
(1)   27/   E82D2 : =$2                 vcUnusedBits set $02
(1)   27/   E82D2 : =$0                 vcD1R1Unk set 0
(1)   27/   E82D2 : =$0                 vcD1R2Unk set 0
(1)   27/   E82D2 : =$0                 vcD1R3Unk set 0
(1)   27/   E82D2 : =$0                 vcD1R4Unk set 0
(1)   28/   E82D2 : (MACRO)             	smpsVcDetune        $01, $01, $01, $01
(1)   28/   E82D2 : =$1                 vcDT1 set $01
(1)   28/   E82D2 : =$1                 vcDT2 set $01
(1)   28/   E82D2 : =$1                 vcDT3 set $01
(1)   28/   E82D2 : =$1                 vcDT4 set $01
(1)   29/   E82D2 : (MACRO)             	smpsVcCoarseFreq    $0F, $0F, $05, $0F
(1)   29/   E82D2 : =$F                 vcCF1 set $0F
(1)   29/   E82D2 : =$F                 vcCF2 set $0F
(1)   29/   E82D2 : =$5                 vcCF3 set $05
(1)   29/   E82D2 : =$F                 vcCF4 set $0F
(1)   30/   E82D2 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   30/   E82D2 : =$0                 vcRS1 set $00
(1)   30/   E82D2 : =$0                 vcRS2 set $00
(1)   30/   E82D2 : =$0                 vcRS3 set $00
(1)   30/   E82D2 : =$0                 vcRS4 set $00
(1)   31/   E82D2 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   31/   E82D2 : =$1F                vcAR1 set $1F
(1)   31/   E82D2 : =$1F                vcAR2 set $1F
(1)   31/   E82D2 : =$1F                vcAR3 set $1F
(1)   31/   E82D2 : =$1F                vcAR4 set $1F
(1)   32/   E82D2 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   32/   E82D2 : =$0                 vcAM1 set $00<<5
(1)   32/   E82D2 : =$0                 vcAM2 set $00<<5
(1)   32/   E82D2 : =$0                 vcAM3 set $00<<5
(1)   32/   E82D2 : =$0                 vcAM4 set $00<<5
(1)   33/   E82D2 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   33/   E82D2 : =$0                 vcD1R1 set $00
(1)   33/   E82D2 : =$0                 vcD1R2 set $00
(1)   33/   E82D2 : =$0                 vcD1R3 set $00
(1)   33/   E82D2 : =$0                 vcD1R4 set $00
(1)   34/   E82D2 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)   34/   E82D2 : =$2                 vcD2R1 set $02
(1)   34/   E82D2 : =$2                 vcD2R2 set $02
(1)   34/   E82D2 : =$2                 vcD2R3 set $02
(1)   34/   E82D2 : =$2                 vcD2R4 set $02
(1)   35/   E82D2 : (MACRO)             	smpsVcDecayLevel    $03, $0F, $02, $02
(1)   35/   E82D2 : =$3                 vcDL1 set $03
(1)   35/   E82D2 : =$F                 vcDL2 set $0F
(1)   35/   E82D2 : =$2                 vcDL3 set $02
(1)   35/   E82D2 : =$2                 vcDL4 set $02
(1)   36/   E82D2 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   36/   E82D2 : =$F                 vcRR1 set $0F
(1)   36/   E82D2 : =$F                 vcRR2 set $0F
(1)   36/   E82D2 : =$F                 vcRR3 set $0F
(1)   36/   E82D2 : =$F                 vcRR4 set $0F
(1)   37/   E82D2 : (MACRO)             	smpsVcTotalLevel    $02, $01, $16, $0B
(1)   37/   E82D2 : =$2                 vcTL1 set $02
(1)   37/   E82D2 : =$1                 vcTL2 set $01
(1)   37/   E82D2 : =$16                vcTL3 set $16
(1)   37/   E82D2 : =$B                 vcTL4 set $0B
(1)   37/   E82D2 : 83                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   37/   E82D3 :                     ;   0     1     2     3     4     5     6     7
(1)   37/   E82D3 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   37/   E82D3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E82D3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E82D3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E82D3 : =$80                vcTLMask1 set $80
(1)   37/   E82D3 :                     
(1)   37/   E82D3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E82D3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E82D3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E82D3 : =$80                vcTLMask1 set $80
(1)   37/   E82D3 : =$2                 vcTL1 set vcTL1&$7F
(1)   37/   E82D3 : =$1                 vcTL2 set vcTL2&$7F
(1)   37/   E82D3 : =$16                vcTL3 set vcTL3&$7F
(1)   37/   E82D3 : =$B                 vcTL4 set vcTL4&$7F
(1)   37/   E82D3 :                     
(1)   37/   E82D3 : 1F15 1F1F                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   37/   E82D7 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   37/   E82DB : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   37/   E82DF : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   37/   E82E3 : 2F2F FF3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   37/   E82E7 : 0B16 0182                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   E82EB :                     
(1)   39/   E82EB :                     
  471/   E82EB :                        Sound31:	include "sfx-improved/B1 - Electricity (Unused).asm"
(1)    1/   E82EB :                     Sound31_Zap_Header:
(1)    2/   E82EB : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E82EB :                     
(1)    2/   E82EB : =$2                 SourceDriver set 2
(1)    2/   E82EB :                     
(1)    2/   E82EB : =$0                 SourceSMPS2ASM set 0
(1)    2/   E82EB :                     
(1)    2/   E82EB : =$E82EB             songStart set *
(1)    2/   E82EB :                     
(1)    2/   E82EB :                     
(1)    3/   E82EB : (MACRO)             	smpsHeaderVoice     Sound31_Zap_Voices
(1)    3/   E82EB : FE82                                dc.w    z80_ptr(SOUND31_ZAP_VOICES)
(1)    4/   E82ED : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E82ED : 01                          dc.b    $01
(1)    5/   E82EE : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E82EE : 01                          dc.b    $01
(1)    6/   E82EF :                     
(1)    7/   E82EF : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound31_Zap_FM5,	$FB, $02
(1)    7/   E82EF : 8005                        dc.b    $80,CFM5
(1)    7/   E82F1 :  (MACRO-2)                  CheckedChannelPointer SOUND31_ZAP_FM5
(1)    7/   E82F1 : F582                                dc.w    z80_ptr(SOUND31_ZAP_FM5)
(1)    7/   E82F3 : FB                                  dc.b    $FB
(1)    7/   E82F4 : 02                          dc.b    $02
(1)    8/   E82F5 :                     
(1)    9/   E82F5 :                     ; FM5 Data
(1)   10/   E82F5 :                     Sound31_Zap_FM5:
(1)   11/   E82F5 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E82F5 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E82F5 : EF00                                dc.b    $EF,$00
(1)   12/   E82F7 : B305 8001 B309      	dc.b	nD4, $05, nRst, $01, nD4, $09
(1)   13/   E82FD : (MACRO)             	smpsStop
(1)   13/   E82FD : F2                          dc.b    $F2
(1)   14/   E82FE :                     
(1)   15/   E82FE :                     Sound31_Zap_Voices:
(1)   16/   E82FE :                     ;	Voice $00
(1)   17/   E82FE :                     ;	$83
(1)   18/   E82FE :                     ;	$12, $10, $13, $1E, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   19/   E82FE :                     ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$05, $10, $34, $87
(1)   20/   E82FE : (MACRO)             	smpsVcAlgorithm     $03
(1)   20/   E82FE : =$3                 vcAlgorithm set $03
(1)   21/   E82FE : (MACRO)             	smpsVcFeedback      $00
(1)   21/   E82FE : =$0                 vcFeedback set $00
(1)   22/   E82FE : (MACRO)             	smpsVcUnusedBits    $02
(1)   22/   E82FE : =$2                 vcUnusedBits set $02
(1)   22/   E82FE : =$0                 vcD1R1Unk set 0
(1)   22/   E82FE : =$0                 vcD1R2Unk set 0
(1)   22/   E82FE : =$0                 vcD1R3Unk set 0
(1)   22/   E82FE : =$0                 vcD1R4Unk set 0
(1)   23/   E82FE : (MACRO)             	smpsVcDetune        $01, $01, $01, $01
(1)   23/   E82FE : =$1                 vcDT1 set $01
(1)   23/   E82FE : =$1                 vcDT2 set $01
(1)   23/   E82FE : =$1                 vcDT3 set $01
(1)   23/   E82FE : =$1                 vcDT4 set $01
(1)   24/   E82FE : (MACRO)             	smpsVcCoarseFreq    $0E, $03, $00, $02
(1)   24/   E82FE : =$E                 vcCF1 set $0E
(1)   24/   E82FE : =$3                 vcCF2 set $03
(1)   24/   E82FE : =$0                 vcCF3 set $00
(1)   24/   E82FE : =$2                 vcCF4 set $02
(1)   25/   E82FE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E82FE : =$0                 vcRS1 set $00
(1)   25/   E82FE : =$0                 vcRS2 set $00
(1)   25/   E82FE : =$0                 vcRS3 set $00
(1)   25/   E82FE : =$0                 vcRS4 set $00
(1)   26/   E82FE : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E82FE : =$1F                vcAR1 set $1F
(1)   26/   E82FE : =$1F                vcAR2 set $1F
(1)   26/   E82FE : =$1F                vcAR3 set $1F
(1)   26/   E82FE : =$1F                vcAR4 set $1F
(1)   27/   E82FE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E82FE : =$0                 vcAM1 set $00<<5
(1)   27/   E82FE : =$0                 vcAM2 set $00<<5
(1)   27/   E82FE : =$0                 vcAM3 set $00<<5
(1)   27/   E82FE : =$0                 vcAM4 set $00<<5
(1)   28/   E82FE : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   28/   E82FE : =$0                 vcD1R1 set $00
(1)   28/   E82FE : =$0                 vcD1R2 set $00
(1)   28/   E82FE : =$0                 vcD1R3 set $00
(1)   28/   E82FE : =$0                 vcD1R4 set $00
(1)   29/   E82FE : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)   29/   E82FE : =$2                 vcD2R1 set $02
(1)   29/   E82FE : =$2                 vcD2R2 set $02
(1)   29/   E82FE : =$2                 vcD2R3 set $02
(1)   29/   E82FE : =$2                 vcD2R4 set $02
(1)   30/   E82FE : (MACRO)             	smpsVcDecayLevel    $03, $0F, $02, $02
(1)   30/   E82FE : =$3                 vcDL1 set $03
(1)   30/   E82FE : =$F                 vcDL2 set $0F
(1)   30/   E82FE : =$2                 vcDL3 set $02
(1)   30/   E82FE : =$2                 vcDL4 set $02
(1)   31/   E82FE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E82FE : =$F                 vcRR1 set $0F
(1)   31/   E82FE : =$F                 vcRR2 set $0F
(1)   31/   E82FE : =$F                 vcRR3 set $0F
(1)   31/   E82FE : =$F                 vcRR4 set $0F
(1)   32/   E82FE : (MACRO)             	smpsVcTotalLevel    $07, $34, $10, $05
(1)   32/   E82FE : =$7                 vcTL1 set $07
(1)   32/   E82FE : =$34                vcTL2 set $34
(1)   32/   E82FE : =$10                vcTL3 set $10
(1)   32/   E82FE : =$5                 vcTL4 set $05
(1)   32/   E82FE : 83                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E82FF :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E82FF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E82FF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E82FF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E82FF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E82FF : =$80                vcTLMask1 set $80
(1)   32/   E82FF :                     
(1)   32/   E82FF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E82FF : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E82FF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E82FF : =$80                vcTLMask1 set $80
(1)   32/   E82FF : =$7                 vcTL1 set vcTL1&$7F
(1)   32/   E82FF : =$34                vcTL2 set vcTL2&$7F
(1)   32/   E82FF : =$10                vcTL3 set vcTL3&$7F
(1)   32/   E82FF : =$5                 vcTL4 set vcTL4&$7F
(1)   32/   E82FF :                     
(1)   32/   E82FF : 1210 131E                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8303 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8307 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E830B : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E830F : 2F2F FF3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8313 : 0510 3487                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8317 :                     
(1)   34/   E8317 :                     
  472/   E8317 :                        Sound32:	include "sfx-improved/B2 - Drown.asm"
(1)    1/   E8317 :                     Sound32_Drown_Header:
(1)    2/   E8317 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8317 :                     
(1)    2/   E8317 : =$2                 SourceDriver set 2
(1)    2/   E8317 :                     
(1)    2/   E8317 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8317 :                     
(1)    2/   E8317 : =$E8317             songStart set *
(1)    2/   E8317 :                     
(1)    2/   E8317 :                     
(1)    3/   E8317 : (MACRO)             	smpsHeaderVoice     Sound32_Drown_Voices
(1)    3/   E8317 : 4D83                                dc.w    z80_ptr(SOUND32_DROWN_VOICES)
(1)    4/   E8319 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8319 : 01                          dc.b    $01
(1)    5/   E831A : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E831A : 02                          dc.b    $02
(1)    6/   E831B :                     
(1)    7/   E831B : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound32_Drown_FM4,	$0C, $04
(1)    7/   E831B : 8004                        dc.b    $80,CFM4
(1)    7/   E831D :  (MACRO-2)                  CheckedChannelPointer SOUND32_DROWN_FM4
(1)    7/   E831D : 3983                                dc.w    z80_ptr(SOUND32_DROWN_FM4)
(1)    7/   E831F : 0C                                  dc.b    $0C
(1)    7/   E8320 : 04                          dc.b    $04
(1)    8/   E8321 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound32_Drown_FM5,	$0E, $02
(1)    8/   E8321 : 8005                        dc.b    $80,CFM5
(1)    8/   E8323 :  (MACRO-2)                  CheckedChannelPointer SOUND32_DROWN_FM5
(1)    8/   E8323 : 2783                                dc.w    z80_ptr(SOUND32_DROWN_FM5)
(1)    8/   E8325 : 0E                                  dc.b    $0E
(1)    8/   E8326 : 02                          dc.b    $02
(1)    9/   E8327 :                     
(1)   10/   E8327 :                     ; FM5 Data
(1)   11/   E8327 :                     Sound32_Drown_FM5:
(1)   12/   E8327 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8327 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8327 : EF00                                dc.b    $EF,$00
(1)   13/   E8329 : (MACRO)             	smpsModSet          $01, $01, $83, $0C
(1)   13/   E8329 : F0                          dc.b    $F0
(1)   13/   E832A : 0201 830D                           dc.b    $01+1,$01,$83,(($0C+1) * $01) & $FF
(1)   13/   E832E :                             ;dc.b   $01,$83,$0C
(1)   14/   E832E :                     
(1)   15/   E832E :                     Sound32_Drown_Loop01:
(1)   16/   E832E : 8A05 05             	dc.b	nA0, $05, $05
(1)   17/   E8331 : (MACRO)             	smpsAlterVol        $03
(1)   17/   E8331 : E603                        dc.b    $E6,$03
(1)   18/   E8333 : (MACRO)             	smpsLoop            $00, $0A, Sound32_Drown_Loop01
(1)   18/   E8333 : F7                          dc.b    $F7
(1)   18/   E8334 : 000A                        dc.b    $00,$0A
(1)   18/   E8336 : 2E83                                dc.w    z80_ptr(SOUND32_DROWN_LOOP01)
(1)   19/   E8338 : (MACRO)             	smpsStop
(1)   19/   E8338 : F2                          dc.b    $F2
(1)   20/   E8339 :                     
(1)   21/   E8339 :                     ; FM4 Data
(1)   22/   E8339 :                     Sound32_Drown_FM4:
(1)   23/   E8339 : 8006                	dc.b	nRst, $06
(1)   24/   E833B : (MACRO)             	smpsSetvoice        $00
(1)   24/   E833B :  (MACRO-2)                  smpsFMvoice $00
(1)   24/   E833B : EF00                                dc.b    $EF,$00
(1)   25/   E833D : (MACRO)             	smpsModSet          $01, $01, $6F, $0E
(1)   25/   E833D : F0                          dc.b    $F0
(1)   25/   E833E : 0201 6F0F                           dc.b    $01+1,$01,$6F,(($0E+1) * $01) & $FF
(1)   25/   E8342 :                             ;dc.b   $01,$6F,$0E
(1)   26/   E8342 :                     
(1)   27/   E8342 :                     Sound32_Drown_Loop00:
(1)   28/   E8342 : 8D04 05             	dc.b	nC1, $04, $05
(1)   29/   E8345 : (MACRO)             	smpsAlterVol        $03
(1)   29/   E8345 : E603                        dc.b    $E6,$03
(1)   30/   E8347 : (MACRO)             	smpsLoop            $00, $0A, Sound32_Drown_Loop00
(1)   30/   E8347 : F7                          dc.b    $F7
(1)   30/   E8348 : 000A                        dc.b    $00,$0A
(1)   30/   E834A : 4283                                dc.w    z80_ptr(SOUND32_DROWN_LOOP00)
(1)   31/   E834C : (MACRO)             	smpsStop
(1)   31/   E834C : F2                          dc.b    $F2
(1)   32/   E834D :                     
(1)   33/   E834D :                     Sound32_Drown_Voices:
(1)   34/   E834D :                     ;	Voice $00
(1)   35/   E834D :                     ;	$35
(1)   36/   E834D :                     ;	$14, $1A, $04, $09, 	$0E, $10, $11, $0E, 	$0C, $15, $03, $06
(1)   37/   E834D :                     ;	$16, $0E, $09, $10, 	$2F, $2F, $4F, $4F, 	$2F, $12, $12, $80
(1)   38/   E834D : (MACRO)             	smpsVcAlgorithm     $05
(1)   38/   E834D : =$5                 vcAlgorithm set $05
(1)   39/   E834D : (MACRO)             	smpsVcFeedback      $06
(1)   39/   E834D : =$6                 vcFeedback set $06
(1)   40/   E834D : (MACRO)             	smpsVcUnusedBits    $00
(1)   40/   E834D : =$0                 vcUnusedBits set $00
(1)   40/   E834D : =$0                 vcD1R1Unk set 0
(1)   40/   E834D : =$0                 vcD1R2Unk set 0
(1)   40/   E834D : =$0                 vcD1R3Unk set 0
(1)   40/   E834D : =$0                 vcD1R4Unk set 0
(1)   41/   E834D : (MACRO)             	smpsVcDetune        $00, $00, $01, $01
(1)   41/   E834D : =$0                 vcDT1 set $00
(1)   41/   E834D : =$0                 vcDT2 set $00
(1)   41/   E834D : =$1                 vcDT3 set $01
(1)   41/   E834D : =$1                 vcDT4 set $01
(1)   42/   E834D : (MACRO)             	smpsVcCoarseFreq    $09, $04, $0A, $04
(1)   42/   E834D : =$9                 vcCF1 set $09
(1)   42/   E834D : =$4                 vcCF2 set $04
(1)   42/   E834D : =$A                 vcCF3 set $0A
(1)   42/   E834D : =$4                 vcCF4 set $04
(1)   43/   E834D : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   43/   E834D : =$0                 vcRS1 set $00
(1)   43/   E834D : =$0                 vcRS2 set $00
(1)   43/   E834D : =$0                 vcRS3 set $00
(1)   43/   E834D : =$0                 vcRS4 set $00
(1)   44/   E834D : (MACRO)             	smpsVcAttackRate    $0E, $11, $10, $0E
(1)   44/   E834D : =$E                 vcAR1 set $0E
(1)   44/   E834D : =$11                vcAR2 set $11
(1)   44/   E834D : =$10                vcAR3 set $10
(1)   44/   E834D : =$E                 vcAR4 set $0E
(1)   45/   E834D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   45/   E834D : =$0                 vcAM1 set $00<<7
(1)   45/   E834D : =$0                 vcAM2 set $00<<7
(1)   45/   E834D : =$0                 vcAM3 set $00<<7
(1)   45/   E834D : =$0                 vcAM4 set $00<<7
(1)   46/   E834D : (MACRO)             	smpsVcDecayRate1    $06, $03, $15, $0C
(1)   46/   E834D : =$6                 vcD1R1 set $06
(1)   46/   E834D : =$3                 vcD1R2 set $03
(1)   46/   E834D : =$15                vcD1R3 set $15
(1)   46/   E834D : =$C                 vcD1R4 set $0C
(1)   47/   E834D : (MACRO)             	smpsVcDecayRate2    $10, $09, $0E, $16
(1)   47/   E834D : =$10                vcD2R1 set $10
(1)   47/   E834D : =$9                 vcD2R2 set $09
(1)   47/   E834D : =$E                 vcD2R3 set $0E
(1)   47/   E834D : =$16                vcD2R4 set $16
(1)   48/   E834D : (MACRO)             	smpsVcDecayLevel    $04, $04, $02, $02
(1)   48/   E834D : =$4                 vcDL1 set $04
(1)   48/   E834D : =$4                 vcDL2 set $04
(1)   48/   E834D : =$2                 vcDL3 set $02
(1)   48/   E834D : =$2                 vcDL4 set $02
(1)   49/   E834D : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   49/   E834D : =$F                 vcRR1 set $0F
(1)   49/   E834D : =$F                 vcRR2 set $0F
(1)   49/   E834D : =$F                 vcRR3 set $0F
(1)   49/   E834D : =$F                 vcRR4 set $0F
(1)   50/   E834D : (MACRO)             	smpsVcTotalLevel    $80, $12, $12, $2F
(1)   50/   E834D : =$80                vcTL1 set $80
(1)   50/   E834D : =$12                vcTL2 set $12
(1)   50/   E834D : =$12                vcTL3 set $12
(1)   50/   E834D : =$2F                vcTL4 set $2F
(1)   50/   E834D : 35                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   50/   E834E :                     ;   0     1     2     3     4     5     6     7
(1)   50/   E834E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   50/   E834E : =$0                 vcTLMask4 set 0
(1)   50/   E834E : =$0                 vcTLMask3 set 0
(1)   50/   E834E : =$0                 vcTLMask2 set 0
(1)   50/   E834E : =$0                 vcTLMask1 set 0
(1)   50/   E834E :                     
(1)   50/   E834E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   50/   E834E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   50/   E834E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   50/   E834E : =$80                vcTLMask1 set $80
(1)   50/   E834E : =$0                 vcTL1 set vcTL1&$7F
(1)   50/   E834E : =$12                vcTL2 set vcTL2&$7F
(1)   50/   E834E : =$12                vcTL3 set vcTL3&$7F
(1)   50/   E834E : =$2F                vcTL4 set vcTL4&$7F
(1)   50/   E834E :                     
(1)   50/   E834E : 141A 0409                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   50/   E8352 : 0E10 110E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   50/   E8356 : 0C15 0306                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   50/   E835A : 160E 0910                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   50/   E835E : 2F2F 4F4F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   50/   E8362 : 2F92 9280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   51/   E8366 :                     
(1)   52/   E8366 :                     
  473/   E8366 :                        Sound33:	include "sfx-improved/B3 - Fire Burn.asm"
(1)    1/   E8366 :                     Sound33_FireBurn_Header:
(1)    2/   E8366 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8366 :                     
(1)    2/   E8366 : =$2                 SourceDriver set 2
(1)    2/   E8366 :                     
(1)    2/   E8366 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8366 :                     
(1)    2/   E8366 : =$E8366             songStart set *
(1)    2/   E8366 :                     
(1)    2/   E8366 :                     
(1)    3/   E8366 : (MACRO)             	smpsHeaderVoice     Sound2E_33_Voices
(1)    3/   E8366 : 7482                                dc.w    z80_ptr(SOUND2E_33_VOICES)
(1)    4/   E8368 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8368 : 01                          dc.b    $01
(1)    5/   E8369 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8369 : 02                          dc.b    $02
(1)    6/   E836A :                     
(1)    7/   E836A : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound33_FireBurn_FM5,	$00, $00
(1)    7/   E836A : 8005                        dc.b    $80,CFM5
(1)    7/   E836C :  (MACRO-2)                  CheckedChannelPointer SOUND33_FIREBURN_FM5
(1)    7/   E836C : 7683                                dc.w    z80_ptr(SOUND33_FIREBURN_FM5)
(1)    7/   E836E : 00                                  dc.b    $00
(1)    7/   E836F : 00                          dc.b    $00
(1)    8/   E8370 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound33_FireBurn_PSG3,	$00, $00
(1)    8/   E8370 : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8372 :  (MACRO-2)                  CheckedChannelPointer SOUND33_FIREBURN_PSG3
(1)    8/   E8372 : 8483                                dc.w    z80_ptr(SOUND33_FIREBURN_PSG3)
(1)    8/   E8374 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8374 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8375 : 00                          dc.b    $00
(1)    9/   E8376 :                     
(1)   10/   E8376 :                     ; FM5 Data
(1)   11/   E8376 :                     Sound33_FireBurn_FM5:
(1)   12/   E8376 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8376 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8376 : EF00                                dc.b    $EF,$00
(1)   13/   E8378 : 8001                	dc.b	nRst, $01
(1)   14/   E837A : (MACRO)             	smpsModSet          $01, $01, $40, $48
(1)   14/   E837A : F0                          dc.b    $F0
(1)   14/   E837B : 0201 4049                           dc.b    $01+1,$01,$40,(($48+1) * $01) & $FF
(1)   14/   E837F :                             ;dc.b   $01,$40,$48
(1)   15/   E837F : 8306 8502           	dc.b	nD0, $06, nE0, $02
(1)   16/   E8383 : (MACRO)             	smpsStop
(1)   16/   E8383 : F2                          dc.b    $F2
(1)   17/   E8384 :                     
(1)   18/   E8384 :                     ; PSG3 Data
(1)   19/   E8384 :                     Sound33_FireBurn_PSG3:
(1)   20/   E8384 : (MACRO)             	smpsPSGvoice        $00
(1)   20/   E8384 : F500                        dc.b    $F5,$00
(1)   21/   E8386 : 800B                	dc.b	nRst, $0B
(1)   22/   E8388 : (MACRO)             	smpsPSGform         $E7
(1)   22/   E8388 : F3E7                        dc.b    $F3,$E7
(1)   23/   E838A : A725 E7             	dc.b	nD3, $25, smpsNoAttack
(1)   24/   E838D :                     
(1)   25/   E838D :                     Sound33_FireBurn_Loop00:
(1)   26/   E838D : 02                  	dc.b	$02
(1)   27/   E838E : (MACRO)             	smpsPSGAlterVol     $01
(1)   27/   E838E : EC01                        dc.b    $EC,$01
(1)   28/   E8390 : E7                  	dc.b	smpsNoAttack
(1)   29/   E8391 : (MACRO)             	smpsLoop            $00, $10, Sound33_FireBurn_Loop00
(1)   29/   E8391 : F7                          dc.b    $F7
(1)   29/   E8392 : 0010                        dc.b    $00,$10
(1)   29/   E8394 : 8D83                                dc.w    z80_ptr(SOUND33_FIREBURN_LOOP00)
(1)   30/   E8396 : (MACRO)             	smpsStop
(1)   30/   E8396 : F2                          dc.b    $F2
(1)   31/   E8397 :                     
  474/   E8397 :                        Sound34:	include "sfx-improved/B4 - Bumper.asm"
(1)    1/   E8397 :                     Sound34_Bumper_Header:
(1)    2/   E8397 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8397 :                     
(1)    2/   E8397 : =$2                 SourceDriver set 2
(1)    2/   E8397 :                     
(1)    2/   E8397 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8397 :                     
(1)    2/   E8397 : =$E8397             songStart set *
(1)    2/   E8397 :                     
(1)    2/   E8397 :                     
(1)    3/   E8397 : (MACRO)             	smpsHeaderVoice     Sound34_Bumper_Voices
(1)    3/   E8397 : C083                                dc.w    z80_ptr(SOUND34_BUMPER_VOICES)
(1)    4/   E8399 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8399 : 01                          dc.b    $01
(1)    5/   E839A : (MACRO)             	smpsHeaderChanSFX   $03
(1)    5/   E839A : 03                          dc.b    $03
(1)    6/   E839B :                     
(1)    7/   E839B : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound34_Bumper_FM5,	$00, $00
(1)    7/   E839B : 8005                        dc.b    $80,CFM5
(1)    7/   E839D :  (MACRO-2)                  CheckedChannelPointer SOUND34_BUMPER_FM5
(1)    7/   E839D : AD83                                dc.w    z80_ptr(SOUND34_BUMPER_FM5)
(1)    7/   E839F : 00                                  dc.b    $00
(1)    7/   E83A0 : 00                          dc.b    $00
(1)    8/   E83A1 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound34_Bumper_FM4,	$00, $00
(1)    8/   E83A1 : 8004                        dc.b    $80,CFM4
(1)    8/   E83A3 :  (MACRO-2)                  CheckedChannelPointer SOUND34_BUMPER_FM4
(1)    8/   E83A3 : B283                                dc.w    z80_ptr(SOUND34_BUMPER_FM4)
(1)    8/   E83A5 : 00                                  dc.b    $00
(1)    8/   E83A6 : 00                          dc.b    $00
(1)    9/   E83A7 : (MACRO)             	smpsHeaderSFXChannel cFM3, Sound34_Bumper_FM3,	$00, $02
(1)    9/   E83A7 : 8002                        dc.b    $80,CFM3
(1)    9/   E83A9 :  (MACRO-2)                  CheckedChannelPointer SOUND34_BUMPER_FM3
(1)    9/   E83A9 : BB83                                dc.w    z80_ptr(SOUND34_BUMPER_FM3)
(1)    9/   E83AB : 00                                  dc.b    $00
(1)    9/   E83AC : 02                          dc.b    $02
(1)   10/   E83AD :                     
(1)   11/   E83AD :                     ; FM5 Data
(1)   12/   E83AD :                     Sound34_Bumper_FM5:
(1)   13/   E83AD : (MACRO)             	smpsSetvoice        $00
(1)   13/   E83AD :  (MACRO-2)                  smpsFMvoice $00
(1)   13/   E83AD : EF00                                dc.b    $EF,$00
(1)   14/   E83AF : (MACRO)             	smpsJump            Sound34_Bumper_Jump00
(1)   14/   E83AF : F6                          dc.b    $F6
(1)   14/   E83B0 : B883                                dc.w    z80_ptr(SOUND34_BUMPER_JUMP00)
(1)   15/   E83B2 :                     
(1)   16/   E83B2 :                     ; FM4 Data
(1)   17/   E83B2 :                     Sound34_Bumper_FM4:
(1)   18/   E83B2 : (MACRO)             	smpsSetvoice        $00
(1)   18/   E83B2 :  (MACRO-2)                  smpsFMvoice $00
(1)   18/   E83B2 : EF00                                dc.b    $EF,$00
(1)   19/   E83B4 : (MACRO)             	smpsAlterNote       $07
(1)   19/   E83B4 :  (MACRO-2)                  smpsDetune      $07
(1)   19/   E83B4 : E107                        dc.b    $E1,$07
(1)   20/   E83B6 : 8001                	dc.b	nRst, $01
(1)   21/   E83B8 :                     
(1)   22/   E83B8 :                     Sound34_Bumper_Jump00:
(1)   23/   E83B8 : BA20                	dc.b	nA4, $20
(1)   24/   E83BA : (MACRO)             	smpsStop
(1)   24/   E83BA : F2                          dc.b    $F2
(1)   25/   E83BB :                     
(1)   26/   E83BB :                     ; FM3 Data
(1)   27/   E83BB :                     Sound34_Bumper_FM3:
(1)   28/   E83BB : (MACRO)             	smpsSetvoice        $01
(1)   28/   E83BB :  (MACRO-2)                  smpsFMvoice $01
(1)   28/   E83BB : EF01                                dc.b    $EF,$01
(1)   29/   E83BD : 9A03                	dc.b	nCs2, $03
(1)   30/   E83BF : (MACRO)             	smpsStop
(1)   30/   E83BF : F2                          dc.b    $F2
(1)   31/   E83C0 :                     
(1)   32/   E83C0 :                     Sound34_Bumper_Voices:
(1)   33/   E83C0 :                     ;	Voice $00
(1)   34/   E83C0 :                     ;	$3C
(1)   35/   E83C0 :                     ;	$05, $01, $0A, $01, 	$56, $5C, $5C, $5C, 	$0E, $11, $11, $11
(1)   36/   E83C0 :                     ;	$09, $0A, $06, $0A, 	$4F, $3F, $3F, $3F, 	$1F, $80, $2B, $80
(1)   37/   E83C0 : (MACRO)             	smpsVcAlgorithm     $04
(1)   37/   E83C0 : =$4                 vcAlgorithm set $04
(1)   38/   E83C0 : (MACRO)             	smpsVcFeedback      $07
(1)   38/   E83C0 : =$7                 vcFeedback set $07
(1)   39/   E83C0 : (MACRO)             	smpsVcUnusedBits    $00
(1)   39/   E83C0 : =$0                 vcUnusedBits set $00
(1)   39/   E83C0 : =$0                 vcD1R1Unk set 0
(1)   39/   E83C0 : =$0                 vcD1R2Unk set 0
(1)   39/   E83C0 : =$0                 vcD1R3Unk set 0
(1)   39/   E83C0 : =$0                 vcD1R4Unk set 0
(1)   40/   E83C0 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   40/   E83C0 : =$0                 vcDT1 set $00
(1)   40/   E83C0 : =$0                 vcDT2 set $00
(1)   40/   E83C0 : =$0                 vcDT3 set $00
(1)   40/   E83C0 : =$0                 vcDT4 set $00
(1)   41/   E83C0 : (MACRO)             	smpsVcCoarseFreq    $01, $0A, $01, $05
(1)   41/   E83C0 : =$1                 vcCF1 set $01
(1)   41/   E83C0 : =$A                 vcCF2 set $0A
(1)   41/   E83C0 : =$1                 vcCF3 set $01
(1)   41/   E83C0 : =$5                 vcCF4 set $05
(1)   42/   E83C0 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)   42/   E83C0 : =$1                 vcRS1 set $01
(1)   42/   E83C0 : =$1                 vcRS2 set $01
(1)   42/   E83C0 : =$1                 vcRS3 set $01
(1)   42/   E83C0 : =$1                 vcRS4 set $01
(1)   43/   E83C0 : (MACRO)             	smpsVcAttackRate    $1C, $1C, $1C, $16
(1)   43/   E83C0 : =$1C                vcAR1 set $1C
(1)   43/   E83C0 : =$1C                vcAR2 set $1C
(1)   43/   E83C0 : =$1C                vcAR3 set $1C
(1)   43/   E83C0 : =$16                vcAR4 set $16
(1)   44/   E83C0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   44/   E83C0 : =$0                 vcAM1 set $00<<5
(1)   44/   E83C0 : =$0                 vcAM2 set $00<<5
(1)   44/   E83C0 : =$0                 vcAM3 set $00<<5
(1)   44/   E83C0 : =$0                 vcAM4 set $00<<5
(1)   45/   E83C0 : (MACRO)             	smpsVcDecayRate1    $11, $11, $11, $0E
(1)   45/   E83C0 : =$11                vcD1R1 set $11
(1)   45/   E83C0 : =$11                vcD1R2 set $11
(1)   45/   E83C0 : =$11                vcD1R3 set $11
(1)   45/   E83C0 : =$E                 vcD1R4 set $0E
(1)   46/   E83C0 : (MACRO)             	smpsVcDecayRate2    $0A, $06, $0A, $09
(1)   46/   E83C0 : =$A                 vcD2R1 set $0A
(1)   46/   E83C0 : =$6                 vcD2R2 set $06
(1)   46/   E83C0 : =$A                 vcD2R3 set $0A
(1)   46/   E83C0 : =$9                 vcD2R4 set $09
(1)   47/   E83C0 : (MACRO)             	smpsVcDecayLevel    $03, $03, $03, $04
(1)   47/   E83C0 : =$3                 vcDL1 set $03
(1)   47/   E83C0 : =$3                 vcDL2 set $03
(1)   47/   E83C0 : =$3                 vcDL3 set $03
(1)   47/   E83C0 : =$4                 vcDL4 set $04
(1)   48/   E83C0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   48/   E83C0 : =$F                 vcRR1 set $0F
(1)   48/   E83C0 : =$F                 vcRR2 set $0F
(1)   48/   E83C0 : =$F                 vcRR3 set $0F
(1)   48/   E83C0 : =$F                 vcRR4 set $0F
(1)   49/   E83C0 : (MACRO)             	smpsVcTotalLevel    $00, $2B, $00, $1F
(1)   49/   E83C0 : =$0                 vcTL1 set $00
(1)   49/   E83C0 : =$2B                vcTL2 set $2B
(1)   49/   E83C0 : =$0                 vcTL3 set $00
(1)   49/   E83C0 : =$1F                vcTL4 set $1F
(1)   49/   E83C0 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   49/   E83C1 :                     ;   0     1     2     3     4     5     6     7
(1)   49/   E83C1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   49/   E83C1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   49/   E83C1 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   49/   E83C1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   49/   E83C1 : =$80                vcTLMask1 set $80
(1)   49/   E83C1 :                     
(1)   49/   E83C1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   49/   E83C1 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   49/   E83C1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   49/   E83C1 : =$80                vcTLMask1 set $80
(1)   49/   E83C1 : =$0                 vcTL1 set vcTL1&$7F
(1)   49/   E83C1 : =$2B                vcTL2 set vcTL2&$7F
(1)   49/   E83C1 : =$0                 vcTL3 set vcTL3&$7F
(1)   49/   E83C1 : =$1F                vcTL4 set vcTL4&$7F
(1)   49/   E83C1 :                     
(1)   49/   E83C1 : 0501 0A01                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   49/   E83C5 : 565C 5C5C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   49/   E83C9 : 0E11 1111                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   49/   E83CD : 090A 060A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   49/   E83D1 : 4F3F 3F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   49/   E83D5 : 1F80 2B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   50/   E83D9 :                     
(1)   51/   E83D9 :                     ;	Voice $01
(1)   52/   E83D9 :                     ;	$05
(1)   53/   E83D9 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$12, $0C, $0C, $0C
(1)   54/   E83D9 :                     ;	$12, $08, $08, $08, 	$1F, $5F, $5F, $5F, 	$07, $80, $80, $80
(1)   55/   E83D9 : (MACRO)             	smpsVcAlgorithm     $05
(1)   55/   E83D9 : =$5                 vcAlgorithm set $05
(1)   56/   E83D9 : (MACRO)             	smpsVcFeedback      $00
(1)   56/   E83D9 : =$0                 vcFeedback set $00
(1)   57/   E83D9 : (MACRO)             	smpsVcUnusedBits    $00
(1)   57/   E83D9 : =$0                 vcUnusedBits set $00
(1)   57/   E83D9 : =$0                 vcD1R1Unk set 0
(1)   57/   E83D9 : =$0                 vcD1R2Unk set 0
(1)   57/   E83D9 : =$0                 vcD1R3Unk set 0
(1)   57/   E83D9 : =$0                 vcD1R4Unk set 0
(1)   58/   E83D9 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   58/   E83D9 : =$0                 vcDT1 set $00
(1)   58/   E83D9 : =$0                 vcDT2 set $00
(1)   58/   E83D9 : =$0                 vcDT3 set $00
(1)   58/   E83D9 : =$0                 vcDT4 set $00
(1)   59/   E83D9 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   59/   E83D9 : =$0                 vcCF1 set $00
(1)   59/   E83D9 : =$0                 vcCF2 set $00
(1)   59/   E83D9 : =$0                 vcCF3 set $00
(1)   59/   E83D9 : =$0                 vcCF4 set $00
(1)   60/   E83D9 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   60/   E83D9 : =$0                 vcRS1 set $00
(1)   60/   E83D9 : =$0                 vcRS2 set $00
(1)   60/   E83D9 : =$0                 vcRS3 set $00
(1)   60/   E83D9 : =$0                 vcRS4 set $00
(1)   61/   E83D9 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   61/   E83D9 : =$1F                vcAR1 set $1F
(1)   61/   E83D9 : =$1F                vcAR2 set $1F
(1)   61/   E83D9 : =$1F                vcAR3 set $1F
(1)   61/   E83D9 : =$1F                vcAR4 set $1F
(1)   62/   E83D9 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   62/   E83D9 : =$0                 vcAM1 set $00<<5
(1)   62/   E83D9 : =$0                 vcAM2 set $00<<5
(1)   62/   E83D9 : =$0                 vcAM3 set $00<<5
(1)   62/   E83D9 : =$0                 vcAM4 set $00<<5
(1)   63/   E83D9 : (MACRO)             	smpsVcDecayRate1    $0C, $0C, $0C, $12
(1)   63/   E83D9 : =$C                 vcD1R1 set $0C
(1)   63/   E83D9 : =$C                 vcD1R2 set $0C
(1)   63/   E83D9 : =$C                 vcD1R3 set $0C
(1)   63/   E83D9 : =$12                vcD1R4 set $12
(1)   64/   E83D9 : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $12
(1)   64/   E83D9 : =$8                 vcD2R1 set $08
(1)   64/   E83D9 : =$8                 vcD2R2 set $08
(1)   64/   E83D9 : =$8                 vcD2R3 set $08
(1)   64/   E83D9 : =$12                vcD2R4 set $12
(1)   65/   E83D9 : (MACRO)             	smpsVcDecayLevel    $05, $05, $05, $01
(1)   65/   E83D9 : =$5                 vcDL1 set $05
(1)   65/   E83D9 : =$5                 vcDL2 set $05
(1)   65/   E83D9 : =$5                 vcDL3 set $05
(1)   65/   E83D9 : =$1                 vcDL4 set $01
(1)   66/   E83D9 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   66/   E83D9 : =$F                 vcRR1 set $0F
(1)   66/   E83D9 : =$F                 vcRR2 set $0F
(1)   66/   E83D9 : =$F                 vcRR3 set $0F
(1)   66/   E83D9 : =$F                 vcRR4 set $0F
(1)   67/   E83D9 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $07
(1)   67/   E83D9 : =$0                 vcTL1 set $00
(1)   67/   E83D9 : =$0                 vcTL2 set $00
(1)   67/   E83D9 : =$0                 vcTL3 set $00
(1)   67/   E83D9 : =$7                 vcTL4 set $07
(1)   67/   E83D9 : 05                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   67/   E83DA :                     ;   0     1     2     3     4     5     6     7
(1)   67/   E83DA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   67/   E83DA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   67/   E83DA : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   67/   E83DA : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   67/   E83DA : =$80                vcTLMask1 set $80
(1)   67/   E83DA :                     
(1)   67/   E83DA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   67/   E83DA : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   67/   E83DA : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   67/   E83DA : =$80                vcTLMask1 set $80
(1)   67/   E83DA : =$0                 vcTL1 set vcTL1&$7F
(1)   67/   E83DA : =$0                 vcTL2 set vcTL2&$7F
(1)   67/   E83DA : =$0                 vcTL3 set vcTL3&$7F
(1)   67/   E83DA : =$7                 vcTL4 set vcTL4&$7F
(1)   67/   E83DA :                     
(1)   67/   E83DA : 0000 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   67/   E83DE : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   67/   E83E2 : 120C 0C0C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   67/   E83E6 : 1208 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   67/   E83EA : 1F5F 5F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   67/   E83EE : 0780 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   68/   E83F2 :                     
(1)   69/   E83F2 :                     
  475/   E83F2 :                        Sound35:	include "sfx-improved/B5 - Ring.asm"
(1)    1/   E83F2 :                     Sound35_RingRight_Header:
(1)    2/   E83F2 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E83F2 :                     
(1)    2/   E83F2 : =$2                 SourceDriver set 2
(1)    2/   E83F2 :                     
(1)    2/   E83F2 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E83F2 :                     
(1)    2/   E83F2 : =$E83F2             songStart set *
(1)    2/   E83F2 :                     
(1)    2/   E83F2 :                     
(1)    3/   E83F2 : (MACRO)             	smpsHeaderVoice     Sound_Ring_Voices
(1)    3/   E83F2 : AD87                                dc.w    z80_ptr(SOUND_RING_VOICES)
(1)    4/   E83F4 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E83F4 : 01                          dc.b    $01
(1)    5/   E83F5 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E83F5 : 01                          dc.b    $01
(1)    6/   E83F6 :                     
(1)    7/   E83F6 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound35_RingRight_FM5,	$00, $05
(1)    7/   E83F6 : 8005                        dc.b    $80,CFM5
(1)    7/   E83F8 :  (MACRO-2)                  CheckedChannelPointer SOUND35_RINGRIGHT_FM5
(1)    7/   E83F8 : FC83                                dc.w    z80_ptr(SOUND35_RINGRIGHT_FM5)
(1)    7/   E83FA : 00                                  dc.b    $00
(1)    7/   E83FB : 05                          dc.b    $05
(1)    8/   E83FC :                     
(1)    9/   E83FC :                     ; FM5 Data
(1)   10/   E83FC :                     Sound35_RingRight_FM5:
(1)   11/   E83FC : (MACRO)             	smpsSetvoice        $00
(1)   11/   E83FC :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E83FC : EF00                                dc.b    $EF,$00
(1)   12/   E83FE : (MACRO)             	smpsPan             panRight, $00
(1)   12/   E83FE : =$0                 panNone set $00
(1)   12/   E83FE : =$40                panRight set $40
(1)   12/   E83FE : =$80                panLeft set $80
(1)   12/   E83FE : =$C0                panCentre set $C0
(1)   12/   E83FE : =$C0                panCenter set $C0 ; silly Americans :U
(1)   12/   E83FE : E040                        dc.b $E0,PANRIGHT+$00
(1)   13/   E8400 : C105 C405 C91B      	dc.b	nE5, $05, nG5, $05, nC6, $1B
(1)   14/   E8406 : (MACRO)             	smpsStop
(1)   14/   E8406 : F2                          dc.b    $F2
(1)   15/   E8407 :                     
(1)   16/   E8407 :                     
  476/   E8407 :                        Sound36:	include "sfx-improved/B6 - Spikes Move.asm"
(1)    1/   E8407 :                     Sound36_SpikesMove_Header:
(1)    2/   E8407 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8407 :                     
(1)    2/   E8407 : =$2                 SourceDriver set 2
(1)    2/   E8407 :                     
(1)    2/   E8407 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8407 :                     
(1)    2/   E8407 : =$E8407             songStart set *
(1)    2/   E8407 :                     
(1)    2/   E8407 :                     
(1)    3/   E8407 : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E8407 : 0000                        dc.w    $0000
(1)    4/   E8409 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8409 : 01                          dc.b    $01
(1)    5/   E840A : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E840A : 01                          dc.b    $01
(1)    6/   E840B :                     
(1)    7/   E840B : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound36_SpikesMove_PSG3,	$00, $00
(1)    7/   E840B : 80C0                        dc.b    $80,CPSG3
(1)    7/   E840D :  (MACRO-2)                  CheckedChannelPointer SOUND36_SPIKESMOVE_PSG3
(1)    7/   E840D : 1184                                dc.w    z80_ptr(SOUND36_SPIKESMOVE_PSG3)
(1)    7/   E840F :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E840F : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8410 : 00                          dc.b    $00
(1)    8/   E8411 :                     
(1)    9/   E8411 :                     ; PSG3 Data
(1)   10/   E8411 :                     Sound36_SpikesMove_PSG3:
(1)   11/   E8411 : (MACRO)             	smpsModSet          $01, $01, $F0, $08
(1)   11/   E8411 : F0                          dc.b    $F0
(1)   11/   E8412 : 0201 F009                           dc.b    $01+1,$01,$F0,(($08+1) * $01) & $FF
(1)   11/   E8416 :                             ;dc.b   $01,$F0,$08
(1)   12/   E8416 : (MACRO)             	smpsPSGform         $E7
(1)   12/   E8416 : F3E7                        dc.b    $F3,$E7
(1)   13/   E8418 : C107                	dc.b	nE5, $07
(1)   14/   E841A :                     
(1)   15/   E841A :                     Sound36_SpikesMove_Loop00:
(1)   16/   E841A : D001                	dc.b	nG6, $01
(1)   17/   E841C : (MACRO)             	smpsPSGAlterVol     $01
(1)   17/   E841C : EC01                        dc.b    $EC,$01
(1)   18/   E841E : (MACRO)             	smpsLoop            $00, $0C, Sound36_SpikesMove_Loop00
(1)   18/   E841E : F7                          dc.b    $F7
(1)   18/   E841F : 000C                        dc.b    $00,$0C
(1)   18/   E8421 : 1A84                                dc.w    z80_ptr(SOUND36_SPIKESMOVE_LOOP00)
(1)   19/   E8423 : (MACRO)             	smpsStop
(1)   19/   E8423 : F2                          dc.b    $F2
(1)   20/   E8424 :                     
  477/   E8424 :                        Sound37:	include "sfx-improved/B7 - Rumbling.asm"
(1)    1/   E8424 :                     Sound37_Rumbling_Header:
(1)    2/   E8424 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8424 :                     
(1)    2/   E8424 : =$2                 SourceDriver set 2
(1)    2/   E8424 :                     
(1)    2/   E8424 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8424 :                     
(1)    2/   E8424 : =$E8424             songStart set *
(1)    2/   E8424 :                     
(1)    2/   E8424 :                     
(1)    3/   E8424 : (MACRO)             	smpsHeaderVoice     Sound37_Rumbling_Voices
(1)    3/   E8424 : 4684                                dc.w    z80_ptr(SOUND37_RUMBLING_VOICES)
(1)    4/   E8426 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8426 : 01                          dc.b    $01
(1)    5/   E8427 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8427 : 01                          dc.b    $01
(1)    6/   E8428 :                     
(1)    7/   E8428 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound37_Rumbling_FM5,	$00, $00
(1)    7/   E8428 : 8005                        dc.b    $80,CFM5
(1)    7/   E842A :  (MACRO-2)                  CheckedChannelPointer SOUND37_RUMBLING_FM5
(1)    7/   E842A : 2E84                                dc.w    z80_ptr(SOUND37_RUMBLING_FM5)
(1)    7/   E842C : 00                                  dc.b    $00
(1)    7/   E842D : 00                          dc.b    $00
(1)    8/   E842E :                     
(1)    9/   E842E :                     ; FM5 Data
(1)   10/   E842E :                     Sound37_Rumbling_FM5:
(1)   11/   E842E : (MACRO)             	smpsSetvoice        $00
(1)   11/   E842E :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E842E : EF00                                dc.b    $EF,$00
(1)   12/   E8430 : (MACRO)             	smpsModSet          $01, $01, $20, $08
(1)   12/   E8430 : F0                          dc.b    $F0
(1)   12/   E8431 : 0201 2009                           dc.b    $01+1,$01,$20,(($08+1) * $01) & $FF
(1)   12/   E8435 :                             ;dc.b   $01,$20,$08
(1)   13/   E8435 :                     
(1)   14/   E8435 :                     Sound37_Rumbling_Loop00:
(1)   15/   E8435 : 8B0A                	dc.b	nBb0, $0A
(1)   16/   E8437 : (MACRO)             	smpsLoop            $00, $08, Sound37_Rumbling_Loop00
(1)   16/   E8437 : F7                          dc.b    $F7
(1)   16/   E8438 : 0008                        dc.b    $00,$08
(1)   16/   E843A : 3584                                dc.w    z80_ptr(SOUND37_RUMBLING_LOOP00)
(1)   17/   E843C :                     
(1)   18/   E843C :                     Sound37_Rumbling_Loop01:
(1)   19/   E843C : 8B10                	dc.b	nBb0, $10
(1)   20/   E843E : (MACRO)             	smpsAlterVol        $03
(1)   20/   E843E : E603                        dc.b    $E6,$03
(1)   21/   E8440 : (MACRO)             	smpsLoop            $00, $09, Sound37_Rumbling_Loop01
(1)   21/   E8440 : F7                          dc.b    $F7
(1)   21/   E8441 : 0009                        dc.b    $00,$09
(1)   21/   E8443 : 3C84                                dc.w    z80_ptr(SOUND37_RUMBLING_LOOP01)
(1)   22/   E8445 : (MACRO)             	smpsStop
(1)   22/   E8445 : F2                          dc.b    $F2
(1)   23/   E8446 :                     
(1)   24/   E8446 :                     Sound37_Rumbling_Voices:
(1)   25/   E8446 :                     ;	Voice $00
(1)   26/   E8446 :                     ;	$FA
(1)   27/   E8446 :                     ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
(1)   28/   E8446 :                     ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$0F, $1A, $0E, $80
(1)   29/   E8446 : (MACRO)             	smpsVcAlgorithm     $02
(1)   29/   E8446 : =$2                 vcAlgorithm set $02
(1)   30/   E8446 : (MACRO)             	smpsVcFeedback      $07
(1)   30/   E8446 : =$7                 vcFeedback set $07
(1)   31/   E8446 : (MACRO)             	smpsVcUnusedBits    $03
(1)   31/   E8446 : =$3                 vcUnusedBits set $03
(1)   31/   E8446 : =$0                 vcD1R1Unk set 0
(1)   31/   E8446 : =$0                 vcD1R2Unk set 0
(1)   31/   E8446 : =$0                 vcD1R3Unk set 0
(1)   31/   E8446 : =$0                 vcD1R4Unk set 0
(1)   32/   E8446 : (MACRO)             	smpsVcDetune        $03, $01, $03, $02
(1)   32/   E8446 : =$3                 vcDT1 set $03
(1)   32/   E8446 : =$1                 vcDT2 set $01
(1)   32/   E8446 : =$3                 vcDT3 set $03
(1)   32/   E8446 : =$2                 vcDT4 set $02
(1)   33/   E8446 : (MACRO)             	smpsVcCoarseFreq    $02, $00, $00, $01
(1)   33/   E8446 : =$2                 vcCF1 set $02
(1)   33/   E8446 : =$0                 vcCF2 set $00
(1)   33/   E8446 : =$0                 vcCF3 set $00
(1)   33/   E8446 : =$1                 vcCF4 set $01
(1)   34/   E8446 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E8446 : =$0                 vcRS1 set $00
(1)   34/   E8446 : =$0                 vcRS2 set $00
(1)   34/   E8446 : =$0                 vcRS3 set $00
(1)   34/   E8446 : =$0                 vcRS4 set $00
(1)   35/   E8446 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E8446 : =$1F                vcAR1 set $1F
(1)   35/   E8446 : =$1F                vcAR2 set $1F
(1)   35/   E8446 : =$1F                vcAR3 set $1F
(1)   35/   E8446 : =$1F                vcAR4 set $1F
(1)   36/   E8446 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E8446 : =$0                 vcAM1 set $00<<5
(1)   36/   E8446 : =$0                 vcAM2 set $00<<5
(1)   36/   E8446 : =$0                 vcAM3 set $00<<5
(1)   36/   E8446 : =$0                 vcAM4 set $00<<5
(1)   37/   E8446 : (MACRO)             	smpsVcDecayRate1    $02, $09, $18, $05
(1)   37/   E8446 : =$2                 vcD1R1 set $02
(1)   37/   E8446 : =$9                 vcD1R2 set $09
(1)   37/   E8446 : =$18                vcD1R3 set $18
(1)   37/   E8446 : =$5                 vcD1R4 set $05
(1)   38/   E8446 : (MACRO)             	smpsVcDecayRate2    $02, $06, $0F, $06
(1)   38/   E8446 : =$2                 vcD2R1 set $02
(1)   38/   E8446 : =$6                 vcD2R2 set $06
(1)   38/   E8446 : =$F                 vcD2R3 set $0F
(1)   38/   E8446 : =$6                 vcD2R4 set $06
(1)   39/   E8446 : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   39/   E8446 : =$2                 vcDL1 set $02
(1)   39/   E8446 : =$4                 vcDL2 set $04
(1)   39/   E8446 : =$2                 vcDL3 set $02
(1)   39/   E8446 : =$1                 vcDL4 set $01
(1)   40/   E8446 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E8446 : =$F                 vcRR1 set $0F
(1)   40/   E8446 : =$F                 vcRR2 set $0F
(1)   40/   E8446 : =$F                 vcRR3 set $0F
(1)   40/   E8446 : =$F                 vcRR4 set $0F
(1)   41/   E8446 : (MACRO)             	smpsVcTotalLevel    $00, $0E, $1A, $0F
(1)   41/   E8446 : =$0                 vcTL1 set $00
(1)   41/   E8446 : =$E                 vcTL2 set $0E
(1)   41/   E8446 : =$1A                vcTL3 set $1A
(1)   41/   E8446 : =$F                 vcTL4 set $0F
(1)   41/   E8446 : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E8447 :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E8447 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E8447 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8447 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8447 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8447 : =$80                vcTLMask1 set $80
(1)   41/   E8447 :                     
(1)   41/   E8447 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8447 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8447 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8447 : =$80                vcTLMask1 set $80
(1)   41/   E8447 : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E8447 : =$E                 vcTL2 set vcTL2&$7F
(1)   41/   E8447 : =$1A                vcTL3 set vcTL3&$7F
(1)   41/   E8447 : =$F                 vcTL4 set vcTL4&$7F
(1)   41/   E8447 :                     
(1)   41/   E8447 : 2130 1032                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E844B : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E844F : 0518 0902                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E8453 : 060F 0602                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E8457 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E845B : 0F1A 0E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E845F :                     
(1)   43/   E845F :                     
  478/   E845F :                        Sound38:	include "sfx-improved/B8 - Unknown (Unused).asm"
(1)    1/   E845F :                     Sound38_Header:
(1)    2/   E845F : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E845F :                     
(1)    2/   E845F : =$2                 SourceDriver set 2
(1)    2/   E845F :                     
(1)    2/   E845F : =$0                 SourceSMPS2ASM set 0
(1)    2/   E845F :                     
(1)    2/   E845F : =$E845F             songStart set *
(1)    2/   E845F :                     
(1)    2/   E845F :                     
(1)    3/   E845F : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E845F : 0000                        dc.w    $0000
(1)    4/   E8461 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8461 : 01                          dc.b    $01
(1)    5/   E8462 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8462 : 01                          dc.b    $01
(1)    6/   E8463 :                     
(1)    7/   E8463 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound38_PSG3,	$00, $00
(1)    7/   E8463 : 80C0                        dc.b    $80,CPSG3
(1)    7/   E8465 :  (MACRO-2)                  CheckedChannelPointer SOUND38_PSG3
(1)    7/   E8465 : 6984                                dc.w    z80_ptr(SOUND38_PSG3)
(1)    7/   E8467 :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E8467 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8468 : 00                          dc.b    $00
(1)    8/   E8469 :                     
(1)    9/   E8469 :                     ; PSG3 Data
(1)   10/   E8469 :                     Sound38_PSG3:
(1)   11/   E8469 : (MACRO)             	smpsModSet          $01, $01, $F0, $08
(1)   11/   E8469 : F0                          dc.b    $F0
(1)   11/   E846A : 0201 F009                           dc.b    $01+1,$01,$F0,(($08+1) * $01) & $FF
(1)   11/   E846E :                             ;dc.b   $01,$F0,$08
(1)   12/   E846E : (MACRO)             	smpsPSGform         $E7
(1)   12/   E846E : F3E7                        dc.b    $F3,$E7
(1)   13/   E8470 : B408                	dc.b	nEb4, $08
(1)   14/   E8472 :                     
(1)   15/   E8472 :                     Sound38_Loop00:
(1)   16/   E8472 : B002                	dc.b	nB3, $02
(1)   17/   E8474 : (MACRO)             	smpsPSGAlterVol     $01
(1)   17/   E8474 : EC01                        dc.b    $EC,$01
(1)   18/   E8476 : (MACRO)             	smpsLoop            $00, $03, Sound38_Loop00
(1)   18/   E8476 : F7                          dc.b    $F7
(1)   18/   E8477 : 0003                        dc.b    $00,$03
(1)   18/   E8479 : 7284                                dc.w    z80_ptr(SOUND38_LOOP00)
(1)   19/   E847B : (MACRO)             	smpsStop
(1)   19/   E847B : F2                          dc.b    $F2
(1)   20/   E847C :                     
  479/   E847C :                        Sound39:	include "sfx-improved/B9 - Smash.asm"
(1)    1/   E847C :                     Sound39_Smash_Header:
(1)    2/   E847C : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E847C :                     
(1)    2/   E847C : =$2                 SourceDriver set 2
(1)    2/   E847C :                     
(1)    2/   E847C : =$0                 SourceSMPS2ASM set 0
(1)    2/   E847C :                     
(1)    2/   E847C : =$E847C             songStart set *
(1)    2/   E847C :                     
(1)    2/   E847C :                     
(1)    3/   E847C : (MACRO)             	smpsHeaderVoice     Sound2C_39_4B_Voices
(1)    3/   E847C : F481                                dc.w    z80_ptr(SOUND2C_39_4B_VOICES)
(1)    4/   E847E : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E847E : 01                          dc.b    $01
(1)    5/   E847F : (MACRO)             	smpsHeaderChanSFX   $04
(1)    5/   E847F : 04                          dc.b    $04
(1)    6/   E8480 :                     
(1)    7/   E8480 : (MACRO)             	smpsHeaderSFXChannel cFM3, Sound39_Smash_FM3,	$10, $00
(1)    7/   E8480 : 8002                        dc.b    $80,CFM3
(1)    7/   E8482 :  (MACRO-2)                  CheckedChannelPointer SOUND39_SMASH_FM3
(1)    7/   E8482 : 9884                                dc.w    z80_ptr(SOUND39_SMASH_FM3)
(1)    7/   E8484 : 10                                  dc.b    $10
(1)    7/   E8485 : 00                          dc.b    $00
(1)    8/   E8486 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound39_Smash_FM4,	$00, $00
(1)    8/   E8486 : 8004                        dc.b    $80,CFM4
(1)    8/   E8488 :  (MACRO-2)                  CheckedChannelPointer SOUND39_SMASH_FM4
(1)    8/   E8488 : A384                                dc.w    z80_ptr(SOUND39_SMASH_FM4)
(1)    8/   E848A : 00                                  dc.b    $00
(1)    8/   E848B : 00                          dc.b    $00
(1)    9/   E848C : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound39_Smash_FM5,	$10, $00
(1)    9/   E848C : 8005                        dc.b    $80,CFM5
(1)    9/   E848E :  (MACRO-2)                  CheckedChannelPointer SOUND39_SMASH_FM5
(1)    9/   E848E : 9F84                                dc.w    z80_ptr(SOUND39_SMASH_FM5)
(1)    9/   E8490 : 10                                  dc.b    $10
(1)    9/   E8491 : 00                          dc.b    $00
(1)   10/   E8492 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound39_Smash_PSG3,	$00, $00
(1)   10/   E8492 : 80C0                        dc.b    $80,CPSG3
(1)   10/   E8494 :  (MACRO-2)                  CheckedChannelPointer SOUND39_SMASH_PSG3
(1)   10/   E8494 : B484                                dc.w    z80_ptr(SOUND39_SMASH_PSG3)
(1)   10/   E8496 :  (MACRO-2)                          PSGPitchConvert $00
(1)   10/   E8496 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   10/   E8497 : 00                          dc.b    $00
(1)   11/   E8498 :                     
(1)   12/   E8498 :                     ; FM3 Data
(1)   13/   E8498 :                     Sound39_Smash_FM3:
(1)   14/   E8498 : (MACRO)             	smpsPan             panRight, $00
(1)   14/   E8498 : =$0                 panNone set $00
(1)   14/   E8498 : =$40                panRight set $40
(1)   14/   E8498 : =$80                panLeft set $80
(1)   14/   E8498 : =$C0                panCentre set $C0
(1)   14/   E8498 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   14/   E8498 : E040                        dc.b $E0,PANRIGHT+$00
(1)   15/   E849A : 8002                	dc.b	nRst, $02
(1)   16/   E849C : (MACRO)             	smpsJump            Sound39_Smash_FM4
(1)   16/   E849C : F6                          dc.b    $F6
(1)   16/   E849D : A384                                dc.w    z80_ptr(SOUND39_SMASH_FM4)
(1)   17/   E849F :                     
(1)   18/   E849F :                     ; FM5 Data
(1)   19/   E849F :                     Sound39_Smash_FM5:
(1)   20/   E849F : (MACRO)             	smpsPan             panLeft, $00
(1)   20/   E849F : =$0                 panNone set $00
(1)   20/   E849F : =$40                panRight set $40
(1)   20/   E849F : =$80                panLeft set $80
(1)   20/   E849F : =$C0                panCentre set $C0
(1)   20/   E849F : =$C0                panCenter set $C0 ; silly Americans :U
(1)   20/   E849F : E080                        dc.b $E0,PANLEFT+$00
(1)   21/   E84A1 : 8001                	dc.b	nRst, $01
(1)   22/   E84A3 :                     
(1)   23/   E84A3 :                     ; FM4 Data
(1)   24/   E84A3 :                     Sound39_Smash_FM4:
(1)   25/   E84A3 : (MACRO)             	smpsSetvoice        $00
(1)   25/   E84A3 :  (MACRO-2)                  smpsFMvoice $00
(1)   25/   E84A3 : EF00                                dc.b    $EF,$00
(1)   26/   E84A5 : (MACRO)             	smpsModSet          $03, $01, $20, $04
(1)   26/   E84A5 : F0                          dc.b    $F0
(1)   26/   E84A6 : 0401 2005                           dc.b    $03+1,$01,$20,(($04+1) * $01) & $FF
(1)   26/   E84AA :                             ;dc.b   $01,$20,$04
(1)   27/   E84AA :                     
(1)   28/   E84AA :                     Sound39_Smash_Loop00:
(1)   29/   E84AA : 8118                	dc.b	nC0, $18
(1)   30/   E84AC : (MACRO)             	smpsAlterVol        $0A
(1)   30/   E84AC : E60A                        dc.b    $E6,$0A
(1)   31/   E84AE : (MACRO)             	smpsLoop            $00, $06, Sound39_Smash_Loop00
(1)   31/   E84AE : F7                          dc.b    $F7
(1)   31/   E84AF : 0006                        dc.b    $00,$06
(1)   31/   E84B1 : AA84                                dc.w    z80_ptr(SOUND39_SMASH_LOOP00)
(1)   32/   E84B3 : (MACRO)             	smpsStop
(1)   32/   E84B3 : F2                          dc.b    $F2
(1)   33/   E84B4 :                     
(1)   34/   E84B4 :                     ; PSG3 Data
(1)   35/   E84B4 :                     Sound39_Smash_PSG3:
(1)   36/   E84B4 : (MACRO)             	smpsModSet          $01, $01, $0F, $05
(1)   36/   E84B4 : F0                          dc.b    $F0
(1)   36/   E84B5 : 0201 0F06                           dc.b    $01+1,$01,$0F,(($05+1) * $01) & $FF
(1)   36/   E84B9 :                             ;dc.b   $01,$0F,$05
(1)   37/   E84B9 : (MACRO)             	smpsPSGform         $E7
(1)   37/   E84B9 : F3E7                        dc.b    $F3,$E7
(1)   38/   E84BB :                     
(1)   39/   E84BB :                     Sound39_Smash_Loop01:
(1)   40/   E84BB : B018 E7             	dc.b	nB3, $18, smpsNoAttack
(1)   41/   E84BE : (MACRO)             	smpsPSGAlterVol     $03
(1)   41/   E84BE : EC03                        dc.b    $EC,$03
(1)   42/   E84C0 : (MACRO)             	smpsLoop            $00, $05, Sound39_Smash_Loop01
(1)   42/   E84C0 : F7                          dc.b    $F7
(1)   42/   E84C1 : 0005                        dc.b    $00,$05
(1)   42/   E84C3 : BB84                                dc.w    z80_ptr(SOUND39_SMASH_LOOP01)
(1)   43/   E84C5 : (MACRO)             	smpsStop
(1)   43/   E84C5 : F2                          dc.b    $F2
(1)   44/   E84C6 :                     
  480/   E84C6 :                        Sound3A:	include "sfx-improved/BA - Special Stage Glass (Unused).asm"
(1)    1/   E84C6 :                     Sound3A_Header:
(1)    2/   E84C6 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E84C6 :                     
(1)    2/   E84C6 : =$2                 SourceDriver set 2
(1)    2/   E84C6 :                     
(1)    2/   E84C6 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E84C6 :                     
(1)    2/   E84C6 : =$E84C6             songStart set *
(1)    2/   E84C6 :                     
(1)    2/   E84C6 :                     
(1)    3/   E84C6 : (MACRO)             	smpsHeaderVoice     Sound3A_Voices
(1)    3/   E84C6 : D584                                dc.w    z80_ptr(SOUND3A_VOICES)
(1)    4/   E84C8 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E84C8 : 01                          dc.b    $01
(1)    5/   E84C9 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E84C9 : 01                          dc.b    $01
(1)    6/   E84CA :                     
(1)    7/   E84CA : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound3A_FM5,	$00, $07
(1)    7/   E84CA : 8005                        dc.b    $80,CFM5
(1)    7/   E84CC :  (MACRO-2)                  CheckedChannelPointer SOUND3A_FM5
(1)    7/   E84CC : D084                                dc.w    z80_ptr(SOUND3A_FM5)
(1)    7/   E84CE : 00                                  dc.b    $00
(1)    7/   E84CF : 07                          dc.b    $07
(1)    8/   E84D0 :                     
(1)    9/   E84D0 :                     ; FM5 Data
(1)   10/   E84D0 :                     Sound3A_FM5:
(1)   11/   E84D0 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E84D0 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E84D0 : EF00                                dc.b    $EF,$00
(1)   12/   E84D2 : AE08                	dc.b	nA3, $08
(1)   13/   E84D4 : (MACRO)             	smpsStop
(1)   13/   E84D4 : F2                          dc.b    $F2
(1)   14/   E84D5 :                     
(1)   15/   E84D5 :                     Sound3A_Voices:
(1)   16/   E84D5 :                     ;	Voice $00
(1)   17/   E84D5 :                     ;	$1C
(1)   18/   E84D5 :                     ;	$2E, $02, $0F, $02, 	$1F, $1F, $1F, $1F, 	$18, $0F, $14, $0E
(1)   19/   E84D5 :                     ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$20, $80, $1B, $80
(1)   20/   E84D5 : (MACRO)             	smpsVcAlgorithm     $04
(1)   20/   E84D5 : =$4                 vcAlgorithm set $04
(1)   21/   E84D5 : (MACRO)             	smpsVcFeedback      $03
(1)   21/   E84D5 : =$3                 vcFeedback set $03
(1)   22/   E84D5 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E84D5 : =$0                 vcUnusedBits set $00
(1)   22/   E84D5 : =$0                 vcD1R1Unk set 0
(1)   22/   E84D5 : =$0                 vcD1R2Unk set 0
(1)   22/   E84D5 : =$0                 vcD1R3Unk set 0
(1)   22/   E84D5 : =$0                 vcD1R4Unk set 0
(1)   23/   E84D5 : (MACRO)             	smpsVcDetune        $00, $00, $00, $02
(1)   23/   E84D5 : =$0                 vcDT1 set $00
(1)   23/   E84D5 : =$0                 vcDT2 set $00
(1)   23/   E84D5 : =$0                 vcDT3 set $00
(1)   23/   E84D5 : =$2                 vcDT4 set $02
(1)   24/   E84D5 : (MACRO)             	smpsVcCoarseFreq    $02, $0F, $02, $0E
(1)   24/   E84D5 : =$2                 vcCF1 set $02
(1)   24/   E84D5 : =$F                 vcCF2 set $0F
(1)   24/   E84D5 : =$2                 vcCF3 set $02
(1)   24/   E84D5 : =$E                 vcCF4 set $0E
(1)   25/   E84D5 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E84D5 : =$0                 vcRS1 set $00
(1)   25/   E84D5 : =$0                 vcRS2 set $00
(1)   25/   E84D5 : =$0                 vcRS3 set $00
(1)   25/   E84D5 : =$0                 vcRS4 set $00
(1)   26/   E84D5 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E84D5 : =$1F                vcAR1 set $1F
(1)   26/   E84D5 : =$1F                vcAR2 set $1F
(1)   26/   E84D5 : =$1F                vcAR3 set $1F
(1)   26/   E84D5 : =$1F                vcAR4 set $1F
(1)   27/   E84D5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E84D5 : =$0                 vcAM1 set $00<<5
(1)   27/   E84D5 : =$0                 vcAM2 set $00<<5
(1)   27/   E84D5 : =$0                 vcAM3 set $00<<5
(1)   27/   E84D5 : =$0                 vcAM4 set $00<<5
(1)   28/   E84D5 : (MACRO)             	smpsVcDecayRate1    $0E, $14, $0F, $18
(1)   28/   E84D5 : =$E                 vcD1R1 set $0E
(1)   28/   E84D5 : =$14                vcD1R2 set $14
(1)   28/   E84D5 : =$F                 vcD1R3 set $0F
(1)   28/   E84D5 : =$18                vcD1R4 set $18
(1)   29/   E84D5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   29/   E84D5 : =$0                 vcD2R1 set $00
(1)   29/   E84D5 : =$0                 vcD2R2 set $00
(1)   29/   E84D5 : =$0                 vcD2R3 set $00
(1)   29/   E84D5 : =$0                 vcD2R4 set $00
(1)   30/   E84D5 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   30/   E84D5 : =$F                 vcDL1 set $0F
(1)   30/   E84D5 : =$F                 vcDL2 set $0F
(1)   30/   E84D5 : =$F                 vcDL3 set $0F
(1)   30/   E84D5 : =$F                 vcDL4 set $0F
(1)   31/   E84D5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E84D5 : =$F                 vcRR1 set $0F
(1)   31/   E84D5 : =$F                 vcRR2 set $0F
(1)   31/   E84D5 : =$F                 vcRR3 set $0F
(1)   31/   E84D5 : =$F                 vcRR4 set $0F
(1)   32/   E84D5 : (MACRO)             	smpsVcTotalLevel    $00, $1B, $00, $20
(1)   32/   E84D5 : =$0                 vcTL1 set $00
(1)   32/   E84D5 : =$1B                vcTL2 set $1B
(1)   32/   E84D5 : =$0                 vcTL3 set $00
(1)   32/   E84D5 : =$20                vcTL4 set $20
(1)   32/   E84D5 : 1C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E84D6 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E84D6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E84D6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E84D6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E84D6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E84D6 : =$80                vcTLMask1 set $80
(1)   32/   E84D6 :                     
(1)   32/   E84D6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E84D6 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E84D6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E84D6 : =$80                vcTLMask1 set $80
(1)   32/   E84D6 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E84D6 : =$1B                vcTL2 set vcTL2&$7F
(1)   32/   E84D6 : =$0                 vcTL3 set vcTL3&$7F
(1)   32/   E84D6 : =$20                vcTL4 set vcTL4&$7F
(1)   32/   E84D6 :                     
(1)   32/   E84D6 : 2E02 0F02                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E84DA : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E84DE : 180F 140E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E84E2 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E84E6 : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E84EA : 2080 1B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E84EE :                     
(1)   34/   E84EE :                     
  481/   E84EE :                        Sound3B:	include "sfx-improved/BB - Door Slam.asm"
(1)    1/   E84EE :                     Sound3B_DoorSlam_Header:
(1)    2/   E84EE : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E84EE :                     
(1)    2/   E84EE : =$2                 SourceDriver set 2
(1)    2/   E84EE :                     
(1)    2/   E84EE : =$0                 SourceSMPS2ASM set 0
(1)    2/   E84EE :                     
(1)    2/   E84EE : =$E84EE             songStart set *
(1)    2/   E84EE :                     
(1)    2/   E84EE :                     
(1)    3/   E84EE : (MACRO)             	smpsHeaderVoice     Sound3B_DoorSlam_Voices
(1)    3/   E84EE : 0085                                dc.w    z80_ptr(SOUND3B_DOORSLAM_VOICES)
(1)    4/   E84F0 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E84F0 : 01                          dc.b    $01
(1)    5/   E84F1 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E84F1 : 01                          dc.b    $01
(1)    6/   E84F2 :                     
(1)    7/   E84F2 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound3B_DoorSlam_FM5,	$F4, $00
(1)    7/   E84F2 : 8005                        dc.b    $80,CFM5
(1)    7/   E84F4 :  (MACRO-2)                  CheckedChannelPointer SOUND3B_DOORSLAM_FM5
(1)    7/   E84F4 : F884                                dc.w    z80_ptr(SOUND3B_DOORSLAM_FM5)
(1)    7/   E84F6 : F4                                  dc.b    $F4
(1)    7/   E84F7 : 00                          dc.b    $00
(1)    8/   E84F8 :                     
(1)    9/   E84F8 :                     ; FM5 Data
(1)   10/   E84F8 :                     Sound3B_DoorSlam_FM5:
(1)   11/   E84F8 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E84F8 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E84F8 : EF00                                dc.b    $EF,$00
(1)   12/   E84FA : 9B04 80A0 06        	dc.b	nD2, $04, nRst, nG2, $06
(1)   13/   E84FF : (MACRO)             	smpsStop
(1)   13/   E84FF : F2                          dc.b    $F2
(1)   14/   E8500 :                     
(1)   15/   E8500 :                     Sound3B_DoorSlam_Voices:
(1)   16/   E8500 :                     ;	Voice $00
(1)   17/   E8500 :                     ;	$3C
(1)   18/   E8500 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $16, $0F, $0F
(1)   19/   E8500 :                     ;	$00, $00, $00, $00, 	$0F, $AF, $FF, $FF, 	$00, $80, $0A, $80
(1)   20/   E8500 : (MACRO)             	smpsVcAlgorithm     $04
(1)   20/   E8500 : =$4                 vcAlgorithm set $04
(1)   21/   E8500 : (MACRO)             	smpsVcFeedback      $07
(1)   21/   E8500 : =$7                 vcFeedback set $07
(1)   22/   E8500 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8500 : =$0                 vcUnusedBits set $00
(1)   22/   E8500 : =$0                 vcD1R1Unk set 0
(1)   22/   E8500 : =$0                 vcD1R2Unk set 0
(1)   22/   E8500 : =$0                 vcD1R3Unk set 0
(1)   22/   E8500 : =$0                 vcD1R4Unk set 0
(1)   23/   E8500 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   23/   E8500 : =$0                 vcDT1 set $00
(1)   23/   E8500 : =$0                 vcDT2 set $00
(1)   23/   E8500 : =$0                 vcDT3 set $00
(1)   23/   E8500 : =$0                 vcDT4 set $00
(1)   24/   E8500 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   24/   E8500 : =$0                 vcCF1 set $00
(1)   24/   E8500 : =$0                 vcCF2 set $00
(1)   24/   E8500 : =$0                 vcCF3 set $00
(1)   24/   E8500 : =$0                 vcCF4 set $00
(1)   25/   E8500 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8500 : =$0                 vcRS1 set $00
(1)   25/   E8500 : =$0                 vcRS2 set $00
(1)   25/   E8500 : =$0                 vcRS3 set $00
(1)   25/   E8500 : =$0                 vcRS4 set $00
(1)   26/   E8500 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E8500 : =$1F                vcAR1 set $1F
(1)   26/   E8500 : =$1F                vcAR2 set $1F
(1)   26/   E8500 : =$1F                vcAR3 set $1F
(1)   26/   E8500 : =$1F                vcAR4 set $1F
(1)   27/   E8500 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8500 : =$0                 vcAM1 set $00<<5
(1)   27/   E8500 : =$0                 vcAM2 set $00<<5
(1)   27/   E8500 : =$0                 vcAM3 set $00<<5
(1)   27/   E8500 : =$0                 vcAM4 set $00<<5
(1)   28/   E8500 : (MACRO)             	smpsVcDecayRate1    $0F, $0F, $16, $00
(1)   28/   E8500 : =$F                 vcD1R1 set $0F
(1)   28/   E8500 : =$F                 vcD1R2 set $0F
(1)   28/   E8500 : =$16                vcD1R3 set $16
(1)   28/   E8500 : =$0                 vcD1R4 set $00
(1)   29/   E8500 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   29/   E8500 : =$0                 vcD2R1 set $00
(1)   29/   E8500 : =$0                 vcD2R2 set $00
(1)   29/   E8500 : =$0                 vcD2R3 set $00
(1)   29/   E8500 : =$0                 vcD2R4 set $00
(1)   30/   E8500 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0A, $00
(1)   30/   E8500 : =$F                 vcDL1 set $0F
(1)   30/   E8500 : =$F                 vcDL2 set $0F
(1)   30/   E8500 : =$A                 vcDL3 set $0A
(1)   30/   E8500 : =$0                 vcDL4 set $00
(1)   31/   E8500 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E8500 : =$F                 vcRR1 set $0F
(1)   31/   E8500 : =$F                 vcRR2 set $0F
(1)   31/   E8500 : =$F                 vcRR3 set $0F
(1)   31/   E8500 : =$F                 vcRR4 set $0F
(1)   32/   E8500 : (MACRO)             	smpsVcTotalLevel    $00, $0A, $00, $00
(1)   32/   E8500 : =$0                 vcTL1 set $00
(1)   32/   E8500 : =$A                 vcTL2 set $0A
(1)   32/   E8500 : =$0                 vcTL3 set $00
(1)   32/   E8500 : =$0                 vcTL4 set $00
(1)   32/   E8500 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8501 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8501 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8501 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8501 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8501 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8501 : =$80                vcTLMask1 set $80
(1)   32/   E8501 :                     
(1)   32/   E8501 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8501 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8501 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8501 : =$80                vcTLMask1 set $80
(1)   32/   E8501 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8501 : =$A                 vcTL2 set vcTL2&$7F
(1)   32/   E8501 : =$0                 vcTL3 set vcTL3&$7F
(1)   32/   E8501 : =$0                 vcTL4 set vcTL4&$7F
(1)   32/   E8501 :                     
(1)   32/   E8501 : 0000 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8505 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8509 : 0016 0F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E850D : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8511 : 0FAF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8515 : 0080 0A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8519 :                     
(1)   34/   E8519 :                     
  482/   E8519 :                        Sound3C:	include "sfx-improved/BC - Spin Dash Release.asm"
(1)    1/   E8519 :                     Sound3C_SpindashRelease_Header:
(1)    2/   E8519 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8519 :                     
(1)    2/   E8519 : =$2                 SourceDriver set 2
(1)    2/   E8519 :                     
(1)    2/   E8519 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8519 :                     
(1)    2/   E8519 : =$E8519             songStart set *
(1)    2/   E8519 :                     
(1)    2/   E8519 :                     
(1)    3/   E8519 : (MACRO)             	smpsHeaderVoice     Sound3C_SpindashRelease_Voices
(1)    3/   E8519 : 4185                                dc.w    z80_ptr(SOUND3C_SPINDASHRELEASE_VOICES)
(1)    4/   E851B : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E851B : 01                          dc.b    $01
(1)    5/   E851C : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E851C : 02                          dc.b    $02
(1)    6/   E851D :                     
(1)    7/   E851D : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound3C_SpindashRelease_FM5,	$10, $00
(1)    7/   E851D : 8005                        dc.b    $80,CFM5
(1)    7/   E851F :  (MACRO-2)                  CheckedChannelPointer SOUND3C_SPINDASHRELEASE_FM5
(1)    7/   E851F : 2985                                dc.w    z80_ptr(SOUND3C_SPINDASHRELEASE_FM5)
(1)    7/   E8521 : 10                                  dc.b    $10
(1)    7/   E8522 : 00                          dc.b    $00
(1)    8/   E8523 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound3C_SpindashRelease_PSG3,	$00, $00
(1)    8/   E8523 : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8525 :  (MACRO-2)                  CheckedChannelPointer SOUND3C_SPINDASHRELEASE_PSG3
(1)    8/   E8525 : 3385                                dc.w    z80_ptr(SOUND3C_SPINDASHRELEASE_PSG3)
(1)    8/   E8527 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8527 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8528 : 00                          dc.b    $00
(1)    9/   E8529 :                     
(1)   10/   E8529 :                     ; FM5 Data
(1)   11/   E8529 :                     Sound3C_SpindashRelease_FM5:
(1)   12/   E8529 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8529 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8529 : EF00                                dc.b    $EF,$00
(1)   13/   E852B : (MACRO)             	smpsModSet          $01, $01, $C5, $1A
(1)   13/   E852B : F0                          dc.b    $F0
(1)   13/   E852C : 0201 C51B                           dc.b    $01+1,$01,$C5,(($1A+1) * $01) & $FF
(1)   13/   E8530 :                             ;dc.b   $01,$C5,$1A
(1)   14/   E8530 : CD07                	dc.b	nE6, $07
(1)   15/   E8532 : (MACRO)             	smpsStop
(1)   15/   E8532 : F2                          dc.b    $F2
(1)   16/   E8533 :                     
(1)   17/   E8533 :                     ; PSG3 Data
(1)   18/   E8533 :                     Sound3C_SpindashRelease_PSG3:
(1)   19/   E8533 : (MACRO)             	smpsPSGvoice        fTone_07
(1)   19/   E8533 : F507                        dc.b    $F5,FTONE_07
(1)   20/   E8535 : 8007                	dc.b	nRst, $07
(1)   21/   E8537 : (MACRO)             	smpsModSet          $01, $02, $05, $FF
(1)   21/   E8537 : F0                          dc.b    $F0
(1)   21/   E8538 : 0202 0500                           dc.b    $01+1,$02,$05,(($FF+1) * $02) & $FF
(1)   21/   E853C :                             ;dc.b   $02,$05,$FF
(1)   22/   E853C : (MACRO)             	smpsPSGform         $E7
(1)   22/   E853C : F3E7                        dc.b    $F3,$E7
(1)   23/   E853E : BB4F                	dc.b	nBb4, $4F
(1)   24/   E8540 : (MACRO)             	smpsStop
(1)   24/   E8540 : F2                          dc.b    $F2
(1)   25/   E8541 :                     
(1)   26/   E8541 :                     Sound3C_SpindashRelease_Voices:
(1)   27/   E8541 :                     ;	Voice $00
(1)   28/   E8541 :                     ;	$FD
(1)   29/   E8541 :                     ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
(1)   30/   E8541 :                     ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
(1)   31/   E8541 : (MACRO)             	smpsVcAlgorithm     $05
(1)   31/   E8541 : =$5                 vcAlgorithm set $05
(1)   32/   E8541 : (MACRO)             	smpsVcFeedback      $07
(1)   32/   E8541 : =$7                 vcFeedback set $07
(1)   33/   E8541 : (MACRO)             	smpsVcUnusedBits    $03
(1)   33/   E8541 : =$3                 vcUnusedBits set $03
(1)   33/   E8541 : =$0                 vcD1R1Unk set 0
(1)   33/   E8541 : =$0                 vcD1R2Unk set 0
(1)   33/   E8541 : =$0                 vcD1R3Unk set 0
(1)   33/   E8541 : =$0                 vcD1R4Unk set 0
(1)   34/   E8541 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   34/   E8541 : =$0                 vcDT1 set $00
(1)   34/   E8541 : =$0                 vcDT2 set $00
(1)   34/   E8541 : =$0                 vcDT3 set $00
(1)   34/   E8541 : =$0                 vcDT4 set $00
(1)   35/   E8541 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $03, $09
(1)   35/   E8541 : =$0                 vcCF1 set $00
(1)   35/   E8541 : =$0                 vcCF2 set $00
(1)   35/   E8541 : =$3                 vcCF3 set $03
(1)   35/   E8541 : =$9                 vcCF4 set $09
(1)   36/   E8541 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   36/   E8541 : =$0                 vcRS1 set $00
(1)   36/   E8541 : =$0                 vcRS2 set $00
(1)   36/   E8541 : =$0                 vcRS3 set $00
(1)   36/   E8541 : =$0                 vcRS4 set $00
(1)   37/   E8541 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   37/   E8541 : =$1F                vcAR1 set $1F
(1)   37/   E8541 : =$1F                vcAR2 set $1F
(1)   37/   E8541 : =$1F                vcAR3 set $1F
(1)   37/   E8541 : =$1F                vcAR4 set $1F
(1)   38/   E8541 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   38/   E8541 : =$0                 vcAM1 set $00<<5
(1)   38/   E8541 : =$0                 vcAM2 set $00<<5
(1)   38/   E8541 : =$0                 vcAM3 set $00<<5
(1)   38/   E8541 : =$0                 vcAM4 set $00<<5
(1)   39/   E8541 : (MACRO)             	smpsVcDecayRate1    $0C, $0C, $0C, $10
(1)   39/   E8541 : =$C                 vcD1R1 set $0C
(1)   39/   E8541 : =$C                 vcD1R2 set $0C
(1)   39/   E8541 : =$C                 vcD1R3 set $0C
(1)   39/   E8541 : =$10                vcD1R4 set $10
(1)   40/   E8541 : (MACRO)             	smpsVcDecayRate2    $05, $10, $1F, $0B
(1)   40/   E8541 : =$5                 vcD2R1 set $05
(1)   40/   E8541 : =$10                vcD2R2 set $10
(1)   40/   E8541 : =$1F                vcD2R3 set $1F
(1)   40/   E8541 : =$B                 vcD2R4 set $0B
(1)   41/   E8541 : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   41/   E8541 : =$2                 vcDL1 set $02
(1)   41/   E8541 : =$4                 vcDL2 set $04
(1)   41/   E8541 : =$2                 vcDL3 set $02
(1)   41/   E8541 : =$1                 vcDL4 set $01
(1)   42/   E8541 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   42/   E8541 : =$F                 vcRR1 set $0F
(1)   42/   E8541 : =$F                 vcRR2 set $0F
(1)   42/   E8541 : =$F                 vcRR3 set $0F
(1)   42/   E8541 : =$F                 vcRR4 set $0F
(1)   43/   E8541 : (MACRO)             	smpsVcTotalLevel    $0E, $12, $04, $09
(1)   43/   E8541 : =$E                 vcTL1 set $0E
(1)   43/   E8541 : =$12                vcTL2 set $12
(1)   43/   E8541 : =$4                 vcTL3 set $04
(1)   43/   E8541 : =$9                 vcTL4 set $09
(1)   43/   E8541 : FD                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   43/   E8542 :                     ;   0     1     2     3     4     5     6     7
(1)   43/   E8542 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   43/   E8542 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   43/   E8542 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   43/   E8542 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   43/   E8542 : =$80                vcTLMask1 set $80
(1)   43/   E8542 :                     
(1)   43/   E8542 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   43/   E8542 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   43/   E8542 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   43/   E8542 : =$80                vcTLMask1 set $80
(1)   43/   E8542 : =$E                 vcTL1 set vcTL1&$7F
(1)   43/   E8542 : =$12                vcTL2 set vcTL2&$7F
(1)   43/   E8542 : =$4                 vcTL3 set vcTL3&$7F
(1)   43/   E8542 : =$9                 vcTL4 set vcTL4&$7F
(1)   43/   E8542 :                     
(1)   43/   E8542 : 0903 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   43/   E8546 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   43/   E854A : 100C 0C0C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   43/   E854E : 0B1F 1005                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   43/   E8552 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   43/   E8556 : 0984 928E                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   44/   E855A :                     
(1)   45/   E855A :                     
  483/   E855A :                        Sound3D:	include "sfx-improved/BD - Hammer.asm"
(1)    1/   E855A :                     Sound3D_Hammer_Header:
(1)    2/   E855A : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E855A :                     
(1)    2/   E855A : =$2                 SourceDriver set 2
(1)    2/   E855A :                     
(1)    2/   E855A : =$0                 SourceSMPS2ASM set 0
(1)    2/   E855A :                     
(1)    2/   E855A : =$E855A             songStart set *
(1)    2/   E855A :                     
(1)    2/   E855A :                     
(1)    3/   E855A : (MACRO)             	smpsHeaderVoice     Sound3D_Hammer_Voices
(1)    3/   E855A : 7B85                                dc.w    z80_ptr(SOUND3D_HAMMER_VOICES)
(1)    4/   E855C : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E855C : 01                          dc.b    $01
(1)    5/   E855D : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E855D : 02                          dc.b    $02
(1)    6/   E855E :                     
(1)    7/   E855E : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound3D_Hammer_FM5,	$10, $0A
(1)    7/   E855E : 8005                        dc.b    $80,CFM5
(1)    7/   E8560 :  (MACRO-2)                  CheckedChannelPointer SOUND3D_HAMMER_FM5
(1)    7/   E8560 : 6A85                                dc.w    z80_ptr(SOUND3D_HAMMER_FM5)
(1)    7/   E8562 : 10                                  dc.b    $10
(1)    7/   E8563 : 0A                          dc.b    $0A
(1)    8/   E8564 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound3D_Hammer_FM4,	$00, $00
(1)    8/   E8564 : 8004                        dc.b    $80,CFM4
(1)    8/   E8566 :  (MACRO-2)                  CheckedChannelPointer SOUND3D_HAMMER_FM4
(1)    8/   E8566 : 7485                                dc.w    z80_ptr(SOUND3D_HAMMER_FM4)
(1)    8/   E8568 : 00                                  dc.b    $00
(1)    8/   E8569 : 00                          dc.b    $00
(1)    9/   E856A :                     
(1)   10/   E856A :                     ; FM5 Data
(1)   11/   E856A :                     Sound3D_Hammer_FM5:
(1)   12/   E856A : (MACRO)             	smpsSetvoice        $00
(1)   12/   E856A :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E856A : EF00                                dc.b    $EF,$00
(1)   13/   E856C : (MACRO)             	smpsModSet          $01, $01, $60, $01
(1)   13/   E856C : F0                          dc.b    $F0
(1)   13/   E856D : 0201 6002                           dc.b    $01+1,$01,$60,(($01+1) * $01) & $FF
(1)   13/   E8571 :                             ;dc.b   $01,$60,$01
(1)   14/   E8571 : A708                	dc.b	nD3, $08
(1)   15/   E8573 : (MACRO)             	smpsStop
(1)   15/   E8573 : F2                          dc.b    $F2
(1)   16/   E8574 :                     
(1)   17/   E8574 :                     ; FM4 Data
(1)   18/   E8574 :                     Sound3D_Hammer_FM4:
(1)   19/   E8574 : 8008                	dc.b	nRst, $08
(1)   20/   E8576 : (MACRO)             	smpsSetvoice        $01
(1)   20/   E8576 :  (MACRO-2)                  smpsFMvoice $01
(1)   20/   E8576 : EF01                                dc.b    $EF,$01
(1)   21/   E8578 : 8422                	dc.b	nEb0, $22
(1)   22/   E857A : (MACRO)             	smpsStop
(1)   22/   E857A : F2                          dc.b    $F2
(1)   23/   E857B :                     
(1)   24/   E857B :                     Sound3D_Hammer_Voices:
(1)   25/   E857B :                     ;	Voice $00
(1)   26/   E857B :                     ;	$FA
(1)   27/   E857B :                     ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
(1)   28/   E857B :                     ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
(1)   29/   E857B : (MACRO)             	smpsVcAlgorithm     $02
(1)   29/   E857B : =$2                 vcAlgorithm set $02
(1)   30/   E857B : (MACRO)             	smpsVcFeedback      $07
(1)   30/   E857B : =$7                 vcFeedback set $07
(1)   31/   E857B : (MACRO)             	smpsVcUnusedBits    $03
(1)   31/   E857B : =$3                 vcUnusedBits set $03
(1)   31/   E857B : =$0                 vcD1R1Unk set 0
(1)   31/   E857B : =$0                 vcD1R2Unk set 0
(1)   31/   E857B : =$0                 vcD1R3Unk set 0
(1)   31/   E857B : =$0                 vcD1R4Unk set 0
(1)   32/   E857B : (MACRO)             	smpsVcDetune        $03, $01, $03, $02
(1)   32/   E857B : =$3                 vcDT1 set $03
(1)   32/   E857B : =$1                 vcDT2 set $01
(1)   32/   E857B : =$3                 vcDT3 set $03
(1)   32/   E857B : =$2                 vcDT4 set $02
(1)   33/   E857B : (MACRO)             	smpsVcCoarseFreq    $00, $09, $0A, $01
(1)   33/   E857B : =$0                 vcCF1 set $00
(1)   33/   E857B : =$9                 vcCF2 set $09
(1)   33/   E857B : =$A                 vcCF3 set $0A
(1)   33/   E857B : =$1                 vcCF4 set $01
(1)   34/   E857B : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E857B : =$0                 vcRS1 set $00
(1)   34/   E857B : =$0                 vcRS2 set $00
(1)   34/   E857B : =$0                 vcRS3 set $00
(1)   34/   E857B : =$0                 vcRS4 set $00
(1)   35/   E857B : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E857B : =$1F                vcAR1 set $1F
(1)   35/   E857B : =$1F                vcAR2 set $1F
(1)   35/   E857B : =$1F                vcAR3 set $1F
(1)   35/   E857B : =$1F                vcAR4 set $1F
(1)   36/   E857B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E857B : =$0                 vcAM1 set $00<<5
(1)   36/   E857B : =$0                 vcAM2 set $00<<5
(1)   36/   E857B : =$0                 vcAM3 set $00<<5
(1)   36/   E857B : =$0                 vcAM4 set $00<<5
(1)   37/   E857B : (MACRO)             	smpsVcDecayRate1    $02, $09, $18, $05
(1)   37/   E857B : =$2                 vcD1R1 set $02
(1)   37/   E857B : =$9                 vcD1R2 set $09
(1)   37/   E857B : =$18                vcD1R3 set $18
(1)   37/   E857B : =$5                 vcD1R4 set $05
(1)   38/   E857B : (MACRO)             	smpsVcDecayRate2    $05, $10, $1F, $0B
(1)   38/   E857B : =$5                 vcD2R1 set $05
(1)   38/   E857B : =$10                vcD2R2 set $10
(1)   38/   E857B : =$1F                vcD2R3 set $1F
(1)   38/   E857B : =$B                 vcD2R4 set $0B
(1)   39/   E857B : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   39/   E857B : =$2                 vcDL1 set $02
(1)   39/   E857B : =$4                 vcDL2 set $04
(1)   39/   E857B : =$2                 vcDL3 set $02
(1)   39/   E857B : =$1                 vcDL4 set $01
(1)   40/   E857B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E857B : =$F                 vcRR1 set $0F
(1)   40/   E857B : =$F                 vcRR2 set $0F
(1)   40/   E857B : =$F                 vcRR3 set $0F
(1)   40/   E857B : =$F                 vcRR4 set $0F
(1)   41/   E857B : (MACRO)             	smpsVcTotalLevel    $00, $04, $07, $0E
(1)   41/   E857B : =$0                 vcTL1 set $00
(1)   41/   E857B : =$4                 vcTL2 set $04
(1)   41/   E857B : =$7                 vcTL3 set $07
(1)   41/   E857B : =$E                 vcTL4 set $0E
(1)   41/   E857B : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E857C :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E857C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E857C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E857C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E857C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E857C : =$80                vcTLMask1 set $80
(1)   41/   E857C :                     
(1)   41/   E857C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E857C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E857C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E857C : =$80                vcTLMask1 set $80
(1)   41/   E857C : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E857C : =$4                 vcTL2 set vcTL2&$7F
(1)   41/   E857C : =$7                 vcTL3 set vcTL3&$7F
(1)   41/   E857C : =$E                 vcTL4 set vcTL4&$7F
(1)   41/   E857C :                     
(1)   41/   E857C : 213A 1930                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E8580 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E8584 : 0518 0902                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E8588 : 0B1F 1005                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E858C : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E8590 : 0E07 0480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E8594 :                     
(1)   43/   E8594 :                     ;	Voice $01
(1)   44/   E8594 :                     ;	$FA
(1)   45/   E8594 :                     ;	$31, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $05, $10
(1)   46/   E8594 :                     ;	$0B, $1F, $10, $10, 	$1F, $2F, $1F, $2F, 	$0D, $00, $01, $80
(1)   47/   E8594 : (MACRO)             	smpsVcAlgorithm     $02
(1)   47/   E8594 : =$2                 vcAlgorithm set $02
(1)   48/   E8594 : (MACRO)             	smpsVcFeedback      $07
(1)   48/   E8594 : =$7                 vcFeedback set $07
(1)   49/   E8594 : (MACRO)             	smpsVcUnusedBits    $03
(1)   49/   E8594 : =$3                 vcUnusedBits set $03
(1)   49/   E8594 : =$0                 vcD1R1Unk set 0
(1)   49/   E8594 : =$0                 vcD1R2Unk set 0
(1)   49/   E8594 : =$0                 vcD1R3Unk set 0
(1)   49/   E8594 : =$0                 vcD1R4Unk set 0
(1)   50/   E8594 : (MACRO)             	smpsVcDetune        $03, $01, $03, $03
(1)   50/   E8594 : =$3                 vcDT1 set $03
(1)   50/   E8594 : =$1                 vcDT2 set $01
(1)   50/   E8594 : =$3                 vcDT3 set $03
(1)   50/   E8594 : =$3                 vcDT4 set $03
(1)   51/   E8594 : (MACRO)             	smpsVcCoarseFreq    $02, $00, $00, $01
(1)   51/   E8594 : =$2                 vcCF1 set $02
(1)   51/   E8594 : =$0                 vcCF2 set $00
(1)   51/   E8594 : =$0                 vcCF3 set $00
(1)   51/   E8594 : =$1                 vcCF4 set $01
(1)   52/   E8594 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   52/   E8594 : =$0                 vcRS1 set $00
(1)   52/   E8594 : =$0                 vcRS2 set $00
(1)   52/   E8594 : =$0                 vcRS3 set $00
(1)   52/   E8594 : =$0                 vcRS4 set $00
(1)   53/   E8594 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   53/   E8594 : =$1F                vcAR1 set $1F
(1)   53/   E8594 : =$1F                vcAR2 set $1F
(1)   53/   E8594 : =$1F                vcAR3 set $1F
(1)   53/   E8594 : =$1F                vcAR4 set $1F
(1)   54/   E8594 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   54/   E8594 : =$0                 vcAM1 set $00<<5
(1)   54/   E8594 : =$0                 vcAM2 set $00<<5
(1)   54/   E8594 : =$0                 vcAM3 set $00<<5
(1)   54/   E8594 : =$0                 vcAM4 set $00<<5
(1)   55/   E8594 : (MACRO)             	smpsVcDecayRate1    $10, $05, $18, $05
(1)   55/   E8594 : =$10                vcD1R1 set $10
(1)   55/   E8594 : =$5                 vcD1R2 set $05
(1)   55/   E8594 : =$18                vcD1R3 set $18
(1)   55/   E8594 : =$5                 vcD1R4 set $05
(1)   56/   E8594 : (MACRO)             	smpsVcDecayRate2    $10, $10, $1F, $0B
(1)   56/   E8594 : =$10                vcD2R1 set $10
(1)   56/   E8594 : =$10                vcD2R2 set $10
(1)   56/   E8594 : =$1F                vcD2R3 set $1F
(1)   56/   E8594 : =$B                 vcD2R4 set $0B
(1)   57/   E8594 : (MACRO)             	smpsVcDecayLevel    $02, $01, $02, $01
(1)   57/   E8594 : =$2                 vcDL1 set $02
(1)   57/   E8594 : =$1                 vcDL2 set $01
(1)   57/   E8594 : =$2                 vcDL3 set $02
(1)   57/   E8594 : =$1                 vcDL4 set $01
(1)   58/   E8594 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   58/   E8594 : =$F                 vcRR1 set $0F
(1)   58/   E8594 : =$F                 vcRR2 set $0F
(1)   58/   E8594 : =$F                 vcRR3 set $0F
(1)   58/   E8594 : =$F                 vcRR4 set $0F
(1)   59/   E8594 : (MACRO)             	smpsVcTotalLevel    $00, $01, $00, $0D
(1)   59/   E8594 : =$0                 vcTL1 set $00
(1)   59/   E8594 : =$1                 vcTL2 set $01
(1)   59/   E8594 : =$0                 vcTL3 set $00
(1)   59/   E8594 : =$D                 vcTL4 set $0D
(1)   59/   E8594 : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   59/   E8595 :                     ;   0     1     2     3     4     5     6     7
(1)   59/   E8595 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   59/   E8595 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   59/   E8595 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   59/   E8595 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   59/   E8595 : =$80                vcTLMask1 set $80
(1)   59/   E8595 :                     
(1)   59/   E8595 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   59/   E8595 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   59/   E8595 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   59/   E8595 : =$80                vcTLMask1 set $80
(1)   59/   E8595 : =$0                 vcTL1 set vcTL1&$7F
(1)   59/   E8595 : =$1                 vcTL2 set vcTL2&$7F
(1)   59/   E8595 : =$0                 vcTL3 set vcTL3&$7F
(1)   59/   E8595 : =$D                 vcTL4 set vcTL4&$7F
(1)   59/   E8595 :                     
(1)   59/   E8595 : 3130 1032                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   59/   E8599 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   59/   E859D : 0518 0510                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   59/   E85A1 : 0B1F 1010                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   59/   E85A5 : 1F2F 1F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   59/   E85A9 : 0D00 0180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   60/   E85AD :                     
(1)   61/   E85AD :                     
  484/   E85AD :                        Sound3E:	include "sfx-improved/BE - Roll.asm"
(1)    1/   E85AD :                     Sound3E_Roll_Header:
(1)    2/   E85AD : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E85AD :                     
(1)    2/   E85AD : =$2                 SourceDriver set 2
(1)    2/   E85AD :                     
(1)    2/   E85AD : =$1                 SourceSMPS2ASM set 1
(1)    2/   E85AD :                     
(1)    2/   E85AD : =$E85AD             songStart set *
(1)    2/   E85AD :                     
(1)    2/   E85AD :                     
(1)    3/   E85AD : (MACRO)             	smpsHeaderVoice     Sound3E_Roll_Voices
(1)    3/   E85AD : CE85                                dc.w    z80_ptr(SOUND3E_ROLL_VOICES)
(1)    4/   E85AF : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E85AF : 01                          dc.b    $01
(1)    5/   E85B0 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E85B0 : 01                          dc.b    $01
(1)    6/   E85B1 :                     
(1)    7/   E85B1 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound3E_Roll_FM4,	$0C, $05
(1)    7/   E85B1 : 8004                        dc.b    $80,CFM4
(1)    7/   E85B3 :  (MACRO-2)                  CheckedChannelPointer SOUND3E_ROLL_FM4
(1)    7/   E85B3 : B785                                dc.w    z80_ptr(SOUND3E_ROLL_FM4)
(1)    7/   E85B5 : 0C                                  dc.b    $0C
(1)    7/   E85B6 : 05                          dc.b    $05
(1)    8/   E85B7 :                     
(1)    9/   E85B7 :                     ; FM4 Data
(1)   10/   E85B7 :                     Sound3E_Roll_FM4:
(1)   11/   E85B7 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E85B7 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E85B7 : EF00                                dc.b    $EF,$00
(1)   12/   E85B9 : 8001                	dc.b	nRst, $01
(1)   13/   E85BB : (MACRO)             	smpsModSet          $03, $01, $09, $FF
(1)   13/   E85BB : F0                          dc.b    $F0
(1)   13/   E85BC : 0401 0900                           dc.b    $03+1,$01,$09,(($FF+1) * $01) & $FF
(1)   13/   E85C0 :                             ;dc.b   $01,$09,$FF
(1)   14/   E85C0 : CA25                	dc.b	nCs6, $25
(1)   15/   E85C2 : (MACRO)             	smpsModOff
(1)   15/   E85C2 : FA                                  dc.b    $FA
(1)   16/   E85C3 :                     
(1)   17/   E85C3 :                     Sound3E_Roll_Loop00:
(1)   18/   E85C3 : E7                  	dc.b	smpsNoAttack
(1)   19/   E85C4 : (MACRO)             	smpsAlterVol        $01
(1)   19/   E85C4 : E601                        dc.b    $E6,$01
(1)   20/   E85C6 : D002                	dc.b	nG6, $02
(1)   21/   E85C8 : (MACRO)             	smpsLoop            $00, $2A, Sound3E_Roll_Loop00
(1)   21/   E85C8 : F7                          dc.b    $F7
(1)   21/   E85C9 : 002A                        dc.b    $00,$2A
(1)   21/   E85CB : C385                                dc.w    z80_ptr(SOUND3E_ROLL_LOOP00)
(1)   22/   E85CD : (MACRO)             	smpsStop
(1)   22/   E85CD : F2                          dc.b    $F2
(1)   23/   E85CE :                     
(1)   24/   E85CE :                     Sound3E_Roll_Voices:
(1)   25/   E85CE :                     ;	Voice $00
(1)   26/   E85CE :                     ;	$3C
(1)   27/   E85CE :                     ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
(1)   28/   E85CE :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $00, $28, $00
(1)   29/   E85CE : (MACRO)             	smpsVcAlgorithm     $04
(1)   29/   E85CE : =$4                 vcAlgorithm set $04
(1)   30/   E85CE : (MACRO)             	smpsVcFeedback      $07
(1)   30/   E85CE : =$7                 vcFeedback set $07
(1)   31/   E85CE : (MACRO)             	smpsVcUnusedBits    $00
(1)   31/   E85CE : =$0                 vcUnusedBits set $00
(1)   31/   E85CE : =$0                 vcD1R1Unk set 0
(1)   31/   E85CE : =$0                 vcD1R2Unk set 0
(1)   31/   E85CE : =$0                 vcD1R3Unk set 0
(1)   31/   E85CE : =$0                 vcD1R4Unk set 0
(1)   32/   E85CE : (MACRO)             	smpsVcDetune        $00, $00, $04, $00
(1)   32/   E85CE : =$0                 vcDT1 set $00
(1)   32/   E85CE : =$0                 vcDT2 set $00
(1)   32/   E85CE : =$4                 vcDT3 set $04
(1)   32/   E85CE : =$0                 vcDT4 set $00
(1)   33/   E85CE : (MACRO)             	smpsVcCoarseFreq    $02, $02, $04, $00
(1)   33/   E85CE : =$2                 vcCF1 set $02
(1)   33/   E85CE : =$2                 vcCF2 set $02
(1)   33/   E85CE : =$4                 vcCF3 set $04
(1)   33/   E85CE : =$0                 vcCF4 set $00
(1)   34/   E85CE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E85CE : =$0                 vcRS1 set $00
(1)   34/   E85CE : =$0                 vcRS2 set $00
(1)   34/   E85CE : =$0                 vcRS3 set $00
(1)   34/   E85CE : =$0                 vcRS4 set $00
(1)   35/   E85CE : (MACRO)             	smpsVcAttackRate    $15, $1F, $1F, $1F
(1)   35/   E85CE : =$15                vcAR1 set $15
(1)   35/   E85CE : =$1F                vcAR2 set $1F
(1)   35/   E85CE : =$1F                vcAR3 set $1F
(1)   35/   E85CE : =$1F                vcAR4 set $1F
(1)   36/   E85CE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E85CE : =$0                 vcAM1 set $00<<7
(1)   36/   E85CE : =$0                 vcAM2 set $00<<7
(1)   36/   E85CE : =$0                 vcAM3 set $00<<7
(1)   36/   E85CE : =$0                 vcAM4 set $00<<7
(1)   37/   E85CE : (MACRO)             	smpsVcDecayRate1    $00, $00, $1F, $00
(1)   37/   E85CE : =$0                 vcD1R1 set $00
(1)   37/   E85CE : =$0                 vcD1R2 set $00
(1)   37/   E85CE : =$1F                vcD1R3 set $1F
(1)   37/   E85CE : =$0                 vcD1R4 set $00
(1)   38/   E85CE : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   38/   E85CE : =$0                 vcD2R1 set $00
(1)   38/   E85CE : =$0                 vcD2R2 set $00
(1)   38/   E85CE : =$0                 vcD2R3 set $00
(1)   38/   E85CE : =$0                 vcD2R4 set $00
(1)   39/   E85CE : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   39/   E85CE : =$0                 vcDL1 set $00
(1)   39/   E85CE : =$0                 vcDL2 set $00
(1)   39/   E85CE : =$0                 vcDL3 set $00
(1)   39/   E85CE : =$0                 vcDL4 set $00
(1)   40/   E85CE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E85CE : =$F                 vcRR1 set $0F
(1)   40/   E85CE : =$F                 vcRR2 set $0F
(1)   40/   E85CE : =$F                 vcRR3 set $0F
(1)   40/   E85CE : =$F                 vcRR4 set $0F
(1)   41/   E85CE : (MACRO)             	smpsVcTotalLevel    $00, $28, $00, $0D
(1)   41/   E85CE : =$0                 vcTL1 set $00
(1)   41/   E85CE : =$28                vcTL2 set $28
(1)   41/   E85CE : =$0                 vcTL3 set $00
(1)   41/   E85CE : =$D                 vcTL4 set $0D
(1)   41/   E85CE : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E85CF :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E85CF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E85CF : =$0                 vcTLMask4 set 0
(1)   41/   E85CF : =$0                 vcTLMask3 set 0
(1)   41/   E85CF : =$0                 vcTLMask2 set 0
(1)   41/   E85CF : =$0                 vcTLMask1 set 0
(1)   41/   E85CF :                     
(1)   41/   E85CF : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E85CF : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E85CF : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E85CF : =$80                vcTLMask1 set $80
(1)   41/   E85CF : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E85CF : =$28                vcTL2 set vcTL2&$7F
(1)   41/   E85CF : =$0                 vcTL3 set vcTL3&$7F
(1)   41/   E85CF : =$D                 vcTL4 set vcTL4&$7F
(1)   41/   E85CF :                     
(1)   41/   E85CF : 0044 0202                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E85D3 : 1F1F 1F15                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E85D7 : 001F 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E85DB : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E85DF : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E85E3 : 0D80 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E85E7 :                     
(1)   43/   E85E7 :                     
  485/   E85E7 :                        Sound3F:	include "sfx-improved/BF - Continue Jingle.asm"
(1)    1/   E85E7 :                     Sound3F_ContinueJingle_Header:
(1)    2/   E85E7 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E85E7 :                     
(1)    2/   E85E7 : =$2                 SourceDriver set 2
(1)    2/   E85E7 :                     
(1)    2/   E85E7 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E85E7 :                     
(1)    2/   E85E7 : =$E85E7             songStart set *
(1)    2/   E85E7 :                     
(1)    2/   E85E7 :                     
(1)    3/   E85E7 : (MACRO)             	smpsHeaderVoice     Sound3F_40_42_Voices
(1)    3/   E85E7 : 4086                                dc.w    z80_ptr(SOUND3F_40_42_VOICES)
(1)    4/   E85E9 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E85E9 : 01                          dc.b    $01
(1)    5/   E85EA : (MACRO)             	smpsHeaderChanSFX   $03
(1)    5/   E85EA : 03                          dc.b    $03
(1)    6/   E85EB :                     
(1)    7/   E85EB : (MACRO)             	smpsHeaderSFXChannel cFM3, Sound3F_ContinueJingle_FM3,	$F4, $06
(1)    7/   E85EB : 8002                        dc.b    $80,CFM3
(1)    7/   E85ED :  (MACRO-2)                  CheckedChannelPointer SOUND3F_CONTINUEJINGLE_FM3
(1)    7/   E85ED : FD85                                dc.w    z80_ptr(SOUND3F_CONTINUEJINGLE_FM3)
(1)    7/   E85EF : F4                                  dc.b    $F4
(1)    7/   E85F0 : 06                          dc.b    $06
(1)    8/   E85F1 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound3F_ContinueJingle_FM4,	$F4, $06
(1)    8/   E85F1 : 8004                        dc.b    $80,CFM4
(1)    8/   E85F3 :  (MACRO-2)                  CheckedChannelPointer SOUND3F_CONTINUEJINGLE_FM4
(1)    8/   E85F3 : 1886                                dc.w    z80_ptr(SOUND3F_CONTINUEJINGLE_FM4)
(1)    8/   E85F5 : F4                                  dc.b    $F4
(1)    8/   E85F6 : 06                          dc.b    $06
(1)    9/   E85F7 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound3F_ContinueJingle_FM5,	$F4, $06
(1)    9/   E85F7 : 8005                        dc.b    $80,CFM5
(1)    9/   E85F9 :  (MACRO-2)                  CheckedChannelPointer SOUND3F_CONTINUEJINGLE_FM5
(1)    9/   E85F9 : 2D86                                dc.w    z80_ptr(SOUND3F_CONTINUEJINGLE_FM5)
(1)    9/   E85FB : F4                                  dc.b    $F4
(1)    9/   E85FC : 06                          dc.b    $06
(1)   10/   E85FD :                     
(1)   11/   E85FD :                     ; FM3 Data
(1)   12/   E85FD :                     Sound3F_ContinueJingle_FM3:
(1)   13/   E85FD : (MACRO)             	smpsSetvoice        $00
(1)   13/   E85FD :  (MACRO-2)                  smpsFMvoice $00
(1)   13/   E85FD : EF00                                dc.b    $EF,$00
(1)   14/   E85FF : C907 CDD0 CBCE D2CD 	dc.b	nC6, $07, nE6, nG6, nD6, nF6, nA6, nE6, nG6, nB6, nF6, nA6
            E8607 : D0D4 CED2         
(1)   15/   E860B : D5                  	dc.b	nC7
(1)   16/   E860C :                     
(1)   17/   E860C :                     Sound3F_ContinueJingle_Loop02:
(1)   18/   E860C : D007 D4D7           	dc.b	nG6, $07, nB6, nD7
(1)   19/   E8610 : (MACRO)             	smpsAlterVol        $05
(1)   19/   E8610 : E605                        dc.b    $E6,$05
(1)   20/   E8612 : (MACRO)             	smpsLoop            $00, $08, Sound3F_ContinueJingle_Loop02
(1)   20/   E8612 : F7                          dc.b    $F7
(1)   20/   E8613 : 0008                        dc.b    $00,$08
(1)   20/   E8615 : 0C86                                dc.w    z80_ptr(SOUND3F_CONTINUEJINGLE_LOOP02)
(1)   21/   E8617 : (MACRO)             	smpsStop
(1)   21/   E8617 : F2                          dc.b    $F2
(1)   22/   E8618 :                     
(1)   23/   E8618 :                     ; FM4 Data
(1)   24/   E8618 :                     Sound3F_ContinueJingle_FM4:
(1)   25/   E8618 : (MACRO)             	smpsSetvoice        $00
(1)   25/   E8618 :  (MACRO-2)                  smpsFMvoice $00
(1)   25/   E8618 : EF00                                dc.b    $EF,$00
(1)   26/   E861A : (MACRO)             	smpsAlterNote       $01
(1)   26/   E861A :  (MACRO-2)                  smpsDetune      $01
(1)   26/   E861A : E101                        dc.b    $E1,$01
(1)   27/   E861C : 8007 CD15 CED0 D2   	dc.b	nRst, $07, nE6, $15, nF6, nG6, nA6
(1)   28/   E8623 :                     
(1)   29/   E8623 :                     Sound3F_ContinueJingle_Loop01:
(1)   30/   E8623 : D415                	dc.b	nB6, $15
(1)   31/   E8625 : (MACRO)             	smpsAlterVol        $05
(1)   31/   E8625 : E605                        dc.b    $E6,$05
(1)   32/   E8627 : (MACRO)             	smpsLoop            $00, $08, Sound3F_ContinueJingle_Loop01
(1)   32/   E8627 : F7                          dc.b    $F7
(1)   32/   E8628 : 0008                        dc.b    $00,$08
(1)   32/   E862A : 2386                                dc.w    z80_ptr(SOUND3F_CONTINUEJINGLE_LOOP01)
(1)   33/   E862C : (MACRO)             	smpsStop
(1)   33/   E862C : F2                          dc.b    $F2
(1)   34/   E862D :                     
(1)   35/   E862D :                     ; FM5 Data
(1)   36/   E862D :                     Sound3F_ContinueJingle_FM5:
(1)   37/   E862D : (MACRO)             	smpsSetvoice        $00
(1)   37/   E862D :  (MACRO-2)                  smpsFMvoice $00
(1)   37/   E862D : EF00                                dc.b    $EF,$00
(1)   38/   E862F : (MACRO)             	smpsAlterNote       $01
(1)   38/   E862F :  (MACRO-2)                  smpsDetune      $01
(1)   38/   E862F : E101                        dc.b    $E1,$01
(1)   39/   E8631 : C915 CBCD CE        	dc.b	nC6, $15, nD6, nE6, nF6
(1)   40/   E8636 :                     
(1)   41/   E8636 :                     Sound3F_ContinueJingle_Loop00:
(1)   42/   E8636 : D015                	dc.b	nG6, $15
(1)   43/   E8638 : (MACRO)             	smpsAlterVol        $05
(1)   43/   E8638 : E605                        dc.b    $E6,$05
(1)   44/   E863A : (MACRO)             	smpsLoop            $00, $08, Sound3F_ContinueJingle_Loop00
(1)   44/   E863A : F7                          dc.b    $F7
(1)   44/   E863B : 0008                        dc.b    $00,$08
(1)   44/   E863D : 3686                                dc.w    z80_ptr(SOUND3F_CONTINUEJINGLE_LOOP00)
(1)   45/   E863F : (MACRO)             	smpsStop
(1)   45/   E863F : F2                          dc.b    $F2
(1)   46/   E8640 :                     
(1)   47/   E8640 :                     Sound3F_40_42_Voices:
(1)   48/   E8640 :                     ;	Voice $00
(1)   49/   E8640 :                     ;	$14
(1)   50/   E8640 :                     ;	$25, $33, $36, $11, 	$1F, $1F, $1F, $1F, 	$15, $18, $1C, $13
(1)   51/   E8640 :                     ;	$0B, $08, $0D, $09, 	$0F, $9F, $8F, $0F, 	$24, $05, $0A, $80
(1)   52/   E8640 : (MACRO)             	smpsVcAlgorithm     $04
(1)   52/   E8640 : =$4                 vcAlgorithm set $04
(1)   53/   E8640 : (MACRO)             	smpsVcFeedback      $02
(1)   53/   E8640 : =$2                 vcFeedback set $02
(1)   54/   E8640 : (MACRO)             	smpsVcUnusedBits    $00
(1)   54/   E8640 : =$0                 vcUnusedBits set $00
(1)   54/   E8640 : =$0                 vcD1R1Unk set 0
(1)   54/   E8640 : =$0                 vcD1R2Unk set 0
(1)   54/   E8640 : =$0                 vcD1R3Unk set 0
(1)   54/   E8640 : =$0                 vcD1R4Unk set 0
(1)   55/   E8640 : (MACRO)             	smpsVcDetune        $01, $03, $03, $02
(1)   55/   E8640 : =$1                 vcDT1 set $01
(1)   55/   E8640 : =$3                 vcDT2 set $03
(1)   55/   E8640 : =$3                 vcDT3 set $03
(1)   55/   E8640 : =$2                 vcDT4 set $02
(1)   56/   E8640 : (MACRO)             	smpsVcCoarseFreq    $01, $06, $03, $05
(1)   56/   E8640 : =$1                 vcCF1 set $01
(1)   56/   E8640 : =$6                 vcCF2 set $06
(1)   56/   E8640 : =$3                 vcCF3 set $03
(1)   56/   E8640 : =$5                 vcCF4 set $05
(1)   57/   E8640 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   57/   E8640 : =$0                 vcRS1 set $00
(1)   57/   E8640 : =$0                 vcRS2 set $00
(1)   57/   E8640 : =$0                 vcRS3 set $00
(1)   57/   E8640 : =$0                 vcRS4 set $00
(1)   58/   E8640 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   58/   E8640 : =$1F                vcAR1 set $1F
(1)   58/   E8640 : =$1F                vcAR2 set $1F
(1)   58/   E8640 : =$1F                vcAR3 set $1F
(1)   58/   E8640 : =$1F                vcAR4 set $1F
(1)   59/   E8640 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   59/   E8640 : =$0                 vcAM1 set $00<<7
(1)   59/   E8640 : =$0                 vcAM2 set $00<<7
(1)   59/   E8640 : =$0                 vcAM3 set $00<<7
(1)   59/   E8640 : =$0                 vcAM4 set $00<<7
(1)   60/   E8640 : (MACRO)             	smpsVcDecayRate1    $13, $1C, $18, $15
(1)   60/   E8640 : =$13                vcD1R1 set $13
(1)   60/   E8640 : =$1C                vcD1R2 set $1C
(1)   60/   E8640 : =$18                vcD1R3 set $18
(1)   60/   E8640 : =$15                vcD1R4 set $15
(1)   61/   E8640 : (MACRO)             	smpsVcDecayRate2    $09, $0D, $08, $0B
(1)   61/   E8640 : =$9                 vcD2R1 set $09
(1)   61/   E8640 : =$D                 vcD2R2 set $0D
(1)   61/   E8640 : =$8                 vcD2R3 set $08
(1)   61/   E8640 : =$B                 vcD2R4 set $0B
(1)   62/   E8640 : (MACRO)             	smpsVcDecayLevel    $00, $08, $09, $00
(1)   62/   E8640 : =$0                 vcDL1 set $00
(1)   62/   E8640 : =$8                 vcDL2 set $08
(1)   62/   E8640 : =$9                 vcDL3 set $09
(1)   62/   E8640 : =$0                 vcDL4 set $00
(1)   63/   E8640 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   63/   E8640 : =$F                 vcRR1 set $0F
(1)   63/   E8640 : =$F                 vcRR2 set $0F
(1)   63/   E8640 : =$F                 vcRR3 set $0F
(1)   63/   E8640 : =$F                 vcRR4 set $0F
(1)   64/   E8640 : (MACRO)             	smpsVcTotalLevel    $80, $0A, $05, $24
(1)   64/   E8640 : =$80                vcTL1 set $80
(1)   64/   E8640 : =$A                 vcTL2 set $0A
(1)   64/   E8640 : =$5                 vcTL3 set $05
(1)   64/   E8640 : =$24                vcTL4 set $24
(1)   64/   E8640 : 14                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   64/   E8641 :                     ;   0     1     2     3     4     5     6     7
(1)   64/   E8641 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   64/   E8641 : =$0                 vcTLMask4 set 0
(1)   64/   E8641 : =$0                 vcTLMask3 set 0
(1)   64/   E8641 : =$0                 vcTLMask2 set 0
(1)   64/   E8641 : =$0                 vcTLMask1 set 0
(1)   64/   E8641 :                     
(1)   64/   E8641 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   64/   E8641 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   64/   E8641 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   64/   E8641 : =$80                vcTLMask1 set $80
(1)   64/   E8641 : =$0                 vcTL1 set vcTL1&$7F
(1)   64/   E8641 : =$A                 vcTL2 set vcTL2&$7F
(1)   64/   E8641 : =$5                 vcTL3 set vcTL3&$7F
(1)   64/   E8641 : =$24                vcTL4 set vcTL4&$7F
(1)   64/   E8641 :                     
(1)   64/   E8641 : 2533 3611                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   64/   E8645 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   64/   E8649 : 1518 1C13                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   64/   E864D : 0B08 0D09                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   64/   E8651 : 0F9F 8F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   64/   E8655 : 2485 0A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   65/   E8659 :                     
(1)   66/   E8659 :                     
  486/   E8659 :                        Sound40:	include "sfx-improved/C0 - Casino Bonus.asm"
(1)    1/   E8659 :                     Sound40_CasinoBonus_Header:
(1)    2/   E8659 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8659 :                     
(1)    2/   E8659 : =$2                 SourceDriver set 2
(1)    2/   E8659 :                     
(1)    2/   E8659 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8659 :                     
(1)    2/   E8659 : =$E8659             songStart set *
(1)    2/   E8659 :                     
(1)    2/   E8659 :                     
(1)    3/   E8659 : (MACRO)             	smpsHeaderVoice     Sound3F_40_42_Voices
(1)    3/   E8659 : 4086                                dc.w    z80_ptr(SOUND3F_40_42_VOICES)
(1)    4/   E865B : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E865B : 01                          dc.b    $01
(1)    5/   E865C : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E865C : 02                          dc.b    $02
(1)    6/   E865D :                     
(1)    7/   E865D : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound40_CasinoBonus_FM5,	$00, $08
(1)    7/   E865D : 8005                        dc.b    $80,CFM5
(1)    7/   E865F :  (MACRO-2)                  CheckedChannelPointer SOUND40_CASINOBONUS_FM5
(1)    7/   E865F : 6D86                                dc.w    z80_ptr(SOUND40_CASINOBONUS_FM5)
(1)    7/   E8661 : 00                                  dc.b    $00
(1)    7/   E8662 : 08                          dc.b    $08
(1)    8/   E8663 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound40_CasinoBonus_FM4,	$00, $08
(1)    8/   E8663 : 8004                        dc.b    $80,CFM4
(1)    8/   E8665 :  (MACRO-2)                  CheckedChannelPointer SOUND40_CASINOBONUS_FM4
(1)    8/   E8665 : 6986                                dc.w    z80_ptr(SOUND40_CASINOBONUS_FM4)
(1)    8/   E8667 : 00                                  dc.b    $00
(1)    8/   E8668 : 08                          dc.b    $08
(1)    9/   E8669 :                     
(1)   10/   E8669 :                     ; FM4 Data
(1)   11/   E8669 :                     Sound40_CasinoBonus_FM4:
(1)   12/   E8669 : (MACRO)             	smpsAlterNote       $03
(1)   12/   E8669 :  (MACRO-2)                  smpsDetune      $03
(1)   12/   E8669 : E103                        dc.b    $E1,$03
(1)   13/   E866B : 8002                	dc.b	nRst, $02
(1)   14/   E866D :                     
(1)   15/   E866D :                     ; FM5 Data
(1)   16/   E866D :                     Sound40_CasinoBonus_FM5:
(1)   17/   E866D : (MACRO)             	smpsSetvoice        $00
(1)   17/   E866D :  (MACRO-2)                  smpsFMvoice $00
(1)   17/   E866D : EF00                                dc.b    $EF,$00
(1)   18/   E866F : C416                	dc.b	nG5, $16
(1)   19/   E8671 : (MACRO)             	smpsStop
(1)   19/   E8671 : F2                          dc.b    $F2
(1)   20/   E8672 :                     
  487/   E8672 :                        Sound41:	include "sfx-improved/C1 - Explosion.asm"
(1)    1/   E8672 :                     Sound41_Explosion_Header:
(1)    2/   E8672 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8672 :                     
(1)    2/   E8672 : =$2                 SourceDriver set 2
(1)    2/   E8672 :                     
(1)    2/   E8672 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8672 :                     
(1)    2/   E8672 : =$E8672             songStart set *
(1)    2/   E8672 :                     
(1)    2/   E8672 :                     
(1)    3/   E8672 : (MACRO)             	smpsHeaderVoice     Sound41_Explosion_Voices
(1)    3/   E8672 : 9386                                dc.w    z80_ptr(SOUND41_EXPLOSION_VOICES)
(1)    4/   E8674 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8674 : 01                          dc.b    $01
(1)    5/   E8675 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8675 : 02                          dc.b    $02
(1)    6/   E8676 :                     
(1)    7/   E8676 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound41_Explosion_FM5,	$00, $00
(1)    7/   E8676 : 8005                        dc.b    $80,CFM5
(1)    7/   E8678 :  (MACRO-2)                  CheckedChannelPointer SOUND41_EXPLOSION_FM5
(1)    7/   E8678 : 8286                                dc.w    z80_ptr(SOUND41_EXPLOSION_FM5)
(1)    7/   E867A : 00                                  dc.b    $00
(1)    7/   E867B : 00                          dc.b    $00
(1)    8/   E867C : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound41_Explosion_PSG3,	$00, $02
(1)    8/   E867C : 80C0                        dc.b    $80,CPSG3
(1)    8/   E867E :  (MACRO-2)                  CheckedChannelPointer SOUND41_EXPLOSION_PSG3
(1)    8/   E867E : 8C86                                dc.w    z80_ptr(SOUND41_EXPLOSION_PSG3)
(1)    8/   E8680 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8680 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8681 : 02                          dc.b    $02
(1)    9/   E8682 :                     
(1)   10/   E8682 :                     ; FM5 Data
(1)   11/   E8682 :                     Sound41_Explosion_FM5:
(1)   12/   E8682 : (MACRO)             	smpsModSet          $03, $01, $72, $0B
(1)   12/   E8682 : F0                          dc.b    $F0
(1)   12/   E8683 : 0401 720C                           dc.b    $03+1,$01,$72,(($0B+1) * $01) & $FF
(1)   12/   E8687 :                             ;dc.b   $01,$72,$0B
(1)   13/   E8687 : (MACRO)             	smpsSetvoice        $00
(1)   13/   E8687 :  (MACRO-2)                  smpsFMvoice $00
(1)   13/   E8687 : EF00                                dc.b    $EF,$00
(1)   14/   E8689 : BA16                	dc.b	nA4, $16
(1)   15/   E868B : (MACRO)             	smpsStop
(1)   15/   E868B : F2                          dc.b    $F2
(1)   16/   E868C :                     
(1)   17/   E868C :                     ; PSG3 Data
(1)   18/   E868C :                     Sound41_Explosion_PSG3:
(1)   19/   E868C : (MACRO)             	smpsPSGvoice        fTone_01
(1)   19/   E868C : F501                        dc.b    $F5,FTONE_01
(1)   20/   E868E : (MACRO)             	smpsPSGform         $E7
(1)   20/   E868E : F3E7                        dc.b    $F3,$E7
(1)   21/   E8690 : B01B                	dc.b	nB3, $1B
(1)   22/   E8692 : (MACRO)             	smpsStop
(1)   22/   E8692 : F2                          dc.b    $F2
(1)   23/   E8693 :                     
(1)   24/   E8693 :                     Sound41_Explosion_Voices:
(1)   25/   E8693 :                     ;	Voice $00
(1)   26/   E8693 :                     ;	$3C
(1)   27/   E8693 :                     ;	$0F, $01, $03, $01, 	$1F, $1F, $1F, $1F, 	$19, $12, $19, $0E
(1)   28/   E8693 :                     ;	$05, $12, $00, $0F, 	$0F, $7F, $FF, $FF, 	$00, $80, $00, $80
(1)   29/   E8693 : (MACRO)             	smpsVcAlgorithm     $04
(1)   29/   E8693 : =$4                 vcAlgorithm set $04
(1)   30/   E8693 : (MACRO)             	smpsVcFeedback      $07
(1)   30/   E8693 : =$7                 vcFeedback set $07
(1)   31/   E8693 : (MACRO)             	smpsVcUnusedBits    $00
(1)   31/   E8693 : =$0                 vcUnusedBits set $00
(1)   31/   E8693 : =$0                 vcD1R1Unk set 0
(1)   31/   E8693 : =$0                 vcD1R2Unk set 0
(1)   31/   E8693 : =$0                 vcD1R3Unk set 0
(1)   31/   E8693 : =$0                 vcD1R4Unk set 0
(1)   32/   E8693 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   32/   E8693 : =$0                 vcDT1 set $00
(1)   32/   E8693 : =$0                 vcDT2 set $00
(1)   32/   E8693 : =$0                 vcDT3 set $00
(1)   32/   E8693 : =$0                 vcDT4 set $00
(1)   33/   E8693 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $01, $0F
(1)   33/   E8693 : =$1                 vcCF1 set $01
(1)   33/   E8693 : =$3                 vcCF2 set $03
(1)   33/   E8693 : =$1                 vcCF3 set $01
(1)   33/   E8693 : =$F                 vcCF4 set $0F
(1)   34/   E8693 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E8693 : =$0                 vcRS1 set $00
(1)   34/   E8693 : =$0                 vcRS2 set $00
(1)   34/   E8693 : =$0                 vcRS3 set $00
(1)   34/   E8693 : =$0                 vcRS4 set $00
(1)   35/   E8693 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E8693 : =$1F                vcAR1 set $1F
(1)   35/   E8693 : =$1F                vcAR2 set $1F
(1)   35/   E8693 : =$1F                vcAR3 set $1F
(1)   35/   E8693 : =$1F                vcAR4 set $1F
(1)   36/   E8693 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E8693 : =$0                 vcAM1 set $00<<5
(1)   36/   E8693 : =$0                 vcAM2 set $00<<5
(1)   36/   E8693 : =$0                 vcAM3 set $00<<5
(1)   36/   E8693 : =$0                 vcAM4 set $00<<5
(1)   37/   E8693 : (MACRO)             	smpsVcDecayRate1    $0E, $19, $12, $19
(1)   37/   E8693 : =$E                 vcD1R1 set $0E
(1)   37/   E8693 : =$19                vcD1R2 set $19
(1)   37/   E8693 : =$12                vcD1R3 set $12
(1)   37/   E8693 : =$19                vcD1R4 set $19
(1)   38/   E8693 : (MACRO)             	smpsVcDecayRate2    $0F, $00, $12, $05
(1)   38/   E8693 : =$F                 vcD2R1 set $0F
(1)   38/   E8693 : =$0                 vcD2R2 set $00
(1)   38/   E8693 : =$12                vcD2R3 set $12
(1)   38/   E8693 : =$5                 vcD2R4 set $05
(1)   39/   E8693 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $07, $00
(1)   39/   E8693 : =$F                 vcDL1 set $0F
(1)   39/   E8693 : =$F                 vcDL2 set $0F
(1)   39/   E8693 : =$7                 vcDL3 set $07
(1)   39/   E8693 : =$0                 vcDL4 set $00
(1)   40/   E8693 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E8693 : =$F                 vcRR1 set $0F
(1)   40/   E8693 : =$F                 vcRR2 set $0F
(1)   40/   E8693 : =$F                 vcRR3 set $0F
(1)   40/   E8693 : =$F                 vcRR4 set $0F
(1)   41/   E8693 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $00
(1)   41/   E8693 : =$0                 vcTL1 set $00
(1)   41/   E8693 : =$0                 vcTL2 set $00
(1)   41/   E8693 : =$0                 vcTL3 set $00
(1)   41/   E8693 : =$0                 vcTL4 set $00
(1)   41/   E8693 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E8694 :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E8694 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E8694 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8694 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8694 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8694 : =$80                vcTLMask1 set $80
(1)   41/   E8694 :                     
(1)   41/   E8694 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8694 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8694 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8694 : =$80                vcTLMask1 set $80
(1)   41/   E8694 : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E8694 : =$0                 vcTL2 set vcTL2&$7F
(1)   41/   E8694 : =$0                 vcTL3 set vcTL3&$7F
(1)   41/   E8694 : =$0                 vcTL4 set vcTL4&$7F
(1)   41/   E8694 :                     
(1)   41/   E8694 : 0F01 0301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E8698 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E869C : 1912 190E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E86A0 : 0512 000F                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E86A4 : 0F7F FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E86A8 : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E86AC :                     
(1)   43/   E86AC :                     
  488/   E86AC :                        Sound42:	include "sfx-improved/C2 - Water Warning.asm"
(1)    1/   E86AC :                     Sound42_WaterWarning_Header:
(1)    2/   E86AC : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E86AC :                     
(1)    2/   E86AC : =$2                 SourceDriver set 2
(1)    2/   E86AC :                     
(1)    2/   E86AC : =$0                 SourceSMPS2ASM set 0
(1)    2/   E86AC :                     
(1)    2/   E86AC : =$E86AC             songStart set *
(1)    2/   E86AC :                     
(1)    2/   E86AC :                     
(1)    3/   E86AC : (MACRO)             	smpsHeaderVoice     Sound3F_40_42_Voices
(1)    3/   E86AC : 4086                                dc.w    z80_ptr(SOUND3F_40_42_VOICES)
(1)    4/   E86AE : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E86AE : 01                          dc.b    $01
(1)    5/   E86AF : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E86AF : 01                          dc.b    $01
(1)    6/   E86B0 :                     
(1)    7/   E86B0 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound42_WaterWarning_FM5,	$0C, $08
(1)    7/   E86B0 : 8005                        dc.b    $80,CFM5
(1)    7/   E86B2 :  (MACRO-2)                  CheckedChannelPointer SOUND42_WATERWARNING_FM5
(1)    7/   E86B2 : B686                                dc.w    z80_ptr(SOUND42_WATERWARNING_FM5)
(1)    7/   E86B4 : 0C                                  dc.b    $0C
(1)    7/   E86B5 : 08                          dc.b    $08
(1)    8/   E86B6 :                     
(1)    9/   E86B6 :                     ; FM5 Data
(1)   10/   E86B6 :                     Sound42_WaterWarning_FM5:
(1)   11/   E86B6 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E86B6 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E86B6 : EF00                                dc.b    $EF,$00
(1)   12/   E86B8 : BA08 BA25           	dc.b	nA4, $08, nA4, $25
(1)   13/   E86BC : (MACRO)             	smpsStop
(1)   13/   E86BC : F2                          dc.b    $F2
(1)   14/   E86BD :                     
  489/   E86BD :                        Sound43:	include "sfx-improved/C3 - Enter Giant Ring (Unused).asm"
(1)    1/   E86BD :                     Sound43_EnterGiantRing_Header:
(1)    2/   E86BD : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E86BD :                     
(1)    2/   E86BD : =$2                 SourceDriver set 2
(1)    2/   E86BD :                     
(1)    2/   E86BD : =$0                 SourceSMPS2ASM set 0
(1)    2/   E86BD :                     
(1)    2/   E86BD : =$E86BD             songStart set *
(1)    2/   E86BD :                     
(1)    2/   E86BD :                     
(1)    3/   E86BD : (MACRO)             	smpsHeaderVoice     Sound43_EnterGiantRing_Voices
(1)    3/   E86BD : EC86                                dc.w    z80_ptr(SOUND43_ENTERGIANTRING_VOICES)
(1)    4/   E86BF : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E86BF : 01                          dc.b    $01
(1)    5/   E86C0 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E86C0 : 02                          dc.b    $02
(1)    6/   E86C1 :                     
(1)    7/   E86C1 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound43_EnterGiantRing_FM4,	$0C, $00
(1)    7/   E86C1 : 8004                        dc.b    $80,CFM4
(1)    7/   E86C3 :  (MACRO-2)                  CheckedChannelPointer SOUND43_ENTERGIANTRING_FM4
(1)    7/   E86C3 : CD86                                dc.w    z80_ptr(SOUND43_ENTERGIANTRING_FM4)
(1)    7/   E86C5 : 0C                                  dc.b    $0C
(1)    7/   E86C6 : 00                          dc.b    $00
(1)    8/   E86C7 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound43_EnterGiantRing_FM5,	$00, $13
(1)    8/   E86C7 : 8005                        dc.b    $80,CFM5
(1)    8/   E86C9 :  (MACRO-2)                  CheckedChannelPointer SOUND43_ENTERGIANTRING_FM5
(1)    8/   E86C9 : D986                                dc.w    z80_ptr(SOUND43_ENTERGIANTRING_FM5)
(1)    8/   E86CB : 00                                  dc.b    $00
(1)    8/   E86CC : 13                          dc.b    $13
(1)    9/   E86CD :                     
(1)   10/   E86CD :                     ; FM4 Data
(1)   11/   E86CD :                     Sound43_EnterGiantRing_FM4:
(1)   12/   E86CD : (MACRO)             	smpsSetvoice        $01
(1)   12/   E86CD :  (MACRO-2)                  smpsFMvoice $01
(1)   12/   E86CD : EF01                                dc.b    $EF,$01
(1)   13/   E86CF : 8001 A208           	dc.b	nRst, $01, nA2, $08
(1)   14/   E86D3 : (MACRO)             	smpsSetvoice        $00
(1)   14/   E86D3 :  (MACRO-2)                  smpsFMvoice $00
(1)   14/   E86D3 : EF00                                dc.b    $EF,$00
(1)   15/   E86D5 : E7AD 26             	dc.b	smpsNoAttack, nAb3, $26
(1)   16/   E86D8 : (MACRO)             	smpsStop
(1)   16/   E86D8 : F2                          dc.b    $F2
(1)   17/   E86D9 :                     
(1)   18/   E86D9 :                     ; FM5 Data
(1)   19/   E86D9 :                     Sound43_EnterGiantRing_FM5:
(1)   20/   E86D9 : (MACRO)             	smpsSetvoice        $02
(1)   20/   E86D9 :  (MACRO-2)                  smpsFMvoice $02
(1)   20/   E86D9 : EF02                                dc.b    $EF,$02
(1)   21/   E86DB : (MACRO)             	smpsModSet          $06, $01, $03, $FF
(1)   21/   E86DB : F0                          dc.b    $F0
(1)   21/   E86DC : 0701 0300                           dc.b    $06+1,$01,$03,(($FF+1) * $01) & $FF
(1)   21/   E86E0 :                             ;dc.b   $01,$03,$FF
(1)   22/   E86E0 : 800A                	dc.b	nRst, $0A
(1)   23/   E86E2 :                     
(1)   24/   E86E2 :                     Sound43_EnterGiantRing_Loop00:
(1)   25/   E86E2 : C306                	dc.b	nFs5, $06
(1)   26/   E86E4 : (MACRO)             	smpsLoop            $00, $05, Sound43_EnterGiantRing_Loop00
(1)   26/   E86E4 : F7                          dc.b    $F7
(1)   26/   E86E5 : 0005                        dc.b    $00,$05
(1)   26/   E86E7 : E286                                dc.w    z80_ptr(SOUND43_ENTERGIANTRING_LOOP00)
(1)   27/   E86E9 : C317                	dc.b	nFs5, $17
(1)   28/   E86EB : (MACRO)             	smpsStop
(1)   28/   E86EB : F2                          dc.b    $F2
(1)   29/   E86EC :                     
(1)   30/   E86EC :                     Sound43_EnterGiantRing_Voices:
(1)   31/   E86EC :                     ;	Voice $00
(1)   32/   E86EC :                     ;	$30
(1)   33/   E86EC :                     ;	$30, $5C, $34, $30, 	$9E, $A8, $AC, $DC, 	$0E, $0A, $04, $05
(1)   34/   E86EC :                     ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$24, $1C, $04, $80
(1)   35/   E86EC : (MACRO)             	smpsVcAlgorithm     $00
(1)   35/   E86EC : =$0                 vcAlgorithm set $00
(1)   36/   E86EC : (MACRO)             	smpsVcFeedback      $06
(1)   36/   E86EC : =$6                 vcFeedback set $06
(1)   37/   E86EC : (MACRO)             	smpsVcUnusedBits    $00
(1)   37/   E86EC : =$0                 vcUnusedBits set $00
(1)   37/   E86EC : =$0                 vcD1R1Unk set 0
(1)   37/   E86EC : =$0                 vcD1R2Unk set 0
(1)   37/   E86EC : =$0                 vcD1R3Unk set 0
(1)   37/   E86EC : =$0                 vcD1R4Unk set 0
(1)   38/   E86EC : (MACRO)             	smpsVcDetune        $03, $03, $05, $03
(1)   38/   E86EC : =$3                 vcDT1 set $03
(1)   38/   E86EC : =$3                 vcDT2 set $03
(1)   38/   E86EC : =$5                 vcDT3 set $05
(1)   38/   E86EC : =$3                 vcDT4 set $03
(1)   39/   E86EC : (MACRO)             	smpsVcCoarseFreq    $00, $04, $0C, $00
(1)   39/   E86EC : =$0                 vcCF1 set $00
(1)   39/   E86EC : =$4                 vcCF2 set $04
(1)   39/   E86EC : =$C                 vcCF3 set $0C
(1)   39/   E86EC : =$0                 vcCF4 set $00
(1)   40/   E86EC : (MACRO)             	smpsVcRateScale     $03, $02, $02, $02
(1)   40/   E86EC : =$3                 vcRS1 set $03
(1)   40/   E86EC : =$2                 vcRS2 set $02
(1)   40/   E86EC : =$2                 vcRS3 set $02
(1)   40/   E86EC : =$2                 vcRS4 set $02
(1)   41/   E86EC : (MACRO)             	smpsVcAttackRate    $1C, $2C, $28, $1E
(1)   41/   E86EC : =$1C                vcAR1 set $1C
(1)   41/   E86EC : =$2C                vcAR2 set $2C
(1)   41/   E86EC : =$28                vcAR3 set $28
(1)   41/   E86EC : =$1E                vcAR4 set $1E
(1)   42/   E86EC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   42/   E86EC : =$0                 vcAM1 set $00<<5
(1)   42/   E86EC : =$0                 vcAM2 set $00<<5
(1)   42/   E86EC : =$0                 vcAM3 set $00<<5
(1)   42/   E86EC : =$0                 vcAM4 set $00<<5
(1)   43/   E86EC : (MACRO)             	smpsVcDecayRate1    $05, $04, $0A, $0E
(1)   43/   E86EC : =$5                 vcD1R1 set $05
(1)   43/   E86EC : =$4                 vcD1R2 set $04
(1)   43/   E86EC : =$A                 vcD1R3 set $0A
(1)   43/   E86EC : =$E                 vcD1R4 set $0E
(1)   44/   E86EC : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $08
(1)   44/   E86EC : =$8                 vcD2R1 set $08
(1)   44/   E86EC : =$8                 vcD2R2 set $08
(1)   44/   E86EC : =$8                 vcD2R3 set $08
(1)   44/   E86EC : =$8                 vcD2R4 set $08
(1)   45/   E86EC : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $0B, $0B
(1)   45/   E86EC : =$B                 vcDL1 set $0B
(1)   45/   E86EC : =$B                 vcDL2 set $0B
(1)   45/   E86EC : =$B                 vcDL3 set $0B
(1)   45/   E86EC : =$B                 vcDL4 set $0B
(1)   46/   E86EC : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   46/   E86EC : =$F                 vcRR1 set $0F
(1)   46/   E86EC : =$F                 vcRR2 set $0F
(1)   46/   E86EC : =$F                 vcRR3 set $0F
(1)   46/   E86EC : =$F                 vcRR4 set $0F
(1)   47/   E86EC : (MACRO)             	smpsVcTotalLevel    $00, $04, $1C, $24
(1)   47/   E86EC : =$0                 vcTL1 set $00
(1)   47/   E86EC : =$4                 vcTL2 set $04
(1)   47/   E86EC : =$1C                vcTL3 set $1C
(1)   47/   E86EC : =$24                vcTL4 set $24
(1)   47/   E86EC : 30                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   47/   E86ED :                     ;   0     1     2     3     4     5     6     7
(1)   47/   E86ED :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   47/   E86ED : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   47/   E86ED : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   47/   E86ED : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   47/   E86ED : =$80                vcTLMask1 set $80
(1)   47/   E86ED :                     
(1)   47/   E86ED : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   47/   E86ED : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   47/   E86ED : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   47/   E86ED : =$80                vcTLMask1 set $80
(1)   47/   E86ED : =$0                 vcTL1 set vcTL1&$7F
(1)   47/   E86ED : =$4                 vcTL2 set vcTL2&$7F
(1)   47/   E86ED : =$1C                vcTL3 set vcTL3&$7F
(1)   47/   E86ED : =$24                vcTL4 set vcTL4&$7F
(1)   47/   E86ED :                     
(1)   47/   E86ED : 305C 3430                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   47/   E86F1 : 9EA8 ACDC                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   47/   E86F5 : 0E0A 0405                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   47/   E86F9 : 0808 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   47/   E86FD : BFBF BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   47/   E8701 : 241C 0480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   48/   E8705 :                     
(1)   49/   E8705 :                     ;	Voice $01
(1)   50/   E8705 :                     ;	$30
(1)   51/   E8705 :                     ;	$30, $5C, $34, $30, 	$9E, $A8, $AC, $DC, 	$0E, $0A, $04, $05
(1)   52/   E8705 :                     ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$24, $2C, $04, $80
(1)   53/   E8705 : (MACRO)             	smpsVcAlgorithm     $00
(1)   53/   E8705 : =$0                 vcAlgorithm set $00
(1)   54/   E8705 : (MACRO)             	smpsVcFeedback      $06
(1)   54/   E8705 : =$6                 vcFeedback set $06
(1)   55/   E8705 : (MACRO)             	smpsVcUnusedBits    $00
(1)   55/   E8705 : =$0                 vcUnusedBits set $00
(1)   55/   E8705 : =$0                 vcD1R1Unk set 0
(1)   55/   E8705 : =$0                 vcD1R2Unk set 0
(1)   55/   E8705 : =$0                 vcD1R3Unk set 0
(1)   55/   E8705 : =$0                 vcD1R4Unk set 0
(1)   56/   E8705 : (MACRO)             	smpsVcDetune        $03, $03, $05, $03
(1)   56/   E8705 : =$3                 vcDT1 set $03
(1)   56/   E8705 : =$3                 vcDT2 set $03
(1)   56/   E8705 : =$5                 vcDT3 set $05
(1)   56/   E8705 : =$3                 vcDT4 set $03
(1)   57/   E8705 : (MACRO)             	smpsVcCoarseFreq    $00, $04, $0C, $00
(1)   57/   E8705 : =$0                 vcCF1 set $00
(1)   57/   E8705 : =$4                 vcCF2 set $04
(1)   57/   E8705 : =$C                 vcCF3 set $0C
(1)   57/   E8705 : =$0                 vcCF4 set $00
(1)   58/   E8705 : (MACRO)             	smpsVcRateScale     $03, $02, $02, $02
(1)   58/   E8705 : =$3                 vcRS1 set $03
(1)   58/   E8705 : =$2                 vcRS2 set $02
(1)   58/   E8705 : =$2                 vcRS3 set $02
(1)   58/   E8705 : =$2                 vcRS4 set $02
(1)   59/   E8705 : (MACRO)             	smpsVcAttackRate    $1C, $2C, $28, $1E
(1)   59/   E8705 : =$1C                vcAR1 set $1C
(1)   59/   E8705 : =$2C                vcAR2 set $2C
(1)   59/   E8705 : =$28                vcAR3 set $28
(1)   59/   E8705 : =$1E                vcAR4 set $1E
(1)   60/   E8705 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   60/   E8705 : =$0                 vcAM1 set $00<<5
(1)   60/   E8705 : =$0                 vcAM2 set $00<<5
(1)   60/   E8705 : =$0                 vcAM3 set $00<<5
(1)   60/   E8705 : =$0                 vcAM4 set $00<<5
(1)   61/   E8705 : (MACRO)             	smpsVcDecayRate1    $05, $04, $0A, $0E
(1)   61/   E8705 : =$5                 vcD1R1 set $05
(1)   61/   E8705 : =$4                 vcD1R2 set $04
(1)   61/   E8705 : =$A                 vcD1R3 set $0A
(1)   61/   E8705 : =$E                 vcD1R4 set $0E
(1)   62/   E8705 : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $08
(1)   62/   E8705 : =$8                 vcD2R1 set $08
(1)   62/   E8705 : =$8                 vcD2R2 set $08
(1)   62/   E8705 : =$8                 vcD2R3 set $08
(1)   62/   E8705 : =$8                 vcD2R4 set $08
(1)   63/   E8705 : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $0B, $0B
(1)   63/   E8705 : =$B                 vcDL1 set $0B
(1)   63/   E8705 : =$B                 vcDL2 set $0B
(1)   63/   E8705 : =$B                 vcDL3 set $0B
(1)   63/   E8705 : =$B                 vcDL4 set $0B
(1)   64/   E8705 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   64/   E8705 : =$F                 vcRR1 set $0F
(1)   64/   E8705 : =$F                 vcRR2 set $0F
(1)   64/   E8705 : =$F                 vcRR3 set $0F
(1)   64/   E8705 : =$F                 vcRR4 set $0F
(1)   65/   E8705 : (MACRO)             	smpsVcTotalLevel    $00, $04, $2C, $24
(1)   65/   E8705 : =$0                 vcTL1 set $00
(1)   65/   E8705 : =$4                 vcTL2 set $04
(1)   65/   E8705 : =$2C                vcTL3 set $2C
(1)   65/   E8705 : =$24                vcTL4 set $24
(1)   65/   E8705 : 30                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   65/   E8706 :                     ;   0     1     2     3     4     5     6     7
(1)   65/   E8706 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   65/   E8706 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   65/   E8706 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   65/   E8706 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   65/   E8706 : =$80                vcTLMask1 set $80
(1)   65/   E8706 :                     
(1)   65/   E8706 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   65/   E8706 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   65/   E8706 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   65/   E8706 : =$80                vcTLMask1 set $80
(1)   65/   E8706 : =$0                 vcTL1 set vcTL1&$7F
(1)   65/   E8706 : =$4                 vcTL2 set vcTL2&$7F
(1)   65/   E8706 : =$2C                vcTL3 set vcTL3&$7F
(1)   65/   E8706 : =$24                vcTL4 set vcTL4&$7F
(1)   65/   E8706 :                     
(1)   65/   E8706 : 305C 3430                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   65/   E870A : 9EA8 ACDC                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   65/   E870E : 0E0A 0405                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   65/   E8712 : 0808 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   65/   E8716 : BFBF BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   65/   E871A : 242C 0480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   66/   E871E :                     
(1)   67/   E871E :                     ;	Voice $02
(1)   68/   E871E :                     ;	$04
(1)   69/   E871E :                     ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
(1)   70/   E871E :                     ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$13, $81, $13, $88
(1)   71/   E871E : (MACRO)             	smpsVcAlgorithm     $04
(1)   71/   E871E : =$4                 vcAlgorithm set $04
(1)   72/   E871E : (MACRO)             	smpsVcFeedback      $00
(1)   72/   E871E : =$0                 vcFeedback set $00
(1)   73/   E871E : (MACRO)             	smpsVcUnusedBits    $00
(1)   73/   E871E : =$0                 vcUnusedBits set $00
(1)   73/   E871E : =$0                 vcD1R1Unk set 0
(1)   73/   E871E : =$0                 vcD1R2Unk set 0
(1)   73/   E871E : =$0                 vcD1R3Unk set 0
(1)   73/   E871E : =$0                 vcD1R4Unk set 0
(1)   74/   E871E : (MACRO)             	smpsVcDetune        $04, $07, $07, $03
(1)   74/   E871E : =$4                 vcDT1 set $04
(1)   74/   E871E : =$7                 vcDT2 set $07
(1)   74/   E871E : =$7                 vcDT3 set $07
(1)   74/   E871E : =$3                 vcDT4 set $03
(1)   75/   E871E : (MACRO)             	smpsVcCoarseFreq    $09, $07, $02, $07
(1)   75/   E871E : =$9                 vcCF1 set $09
(1)   75/   E871E : =$7                 vcCF2 set $07
(1)   75/   E871E : =$2                 vcCF3 set $02
(1)   75/   E871E : =$7                 vcCF4 set $07
(1)   76/   E871E : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   76/   E871E : =$0                 vcRS1 set $00
(1)   76/   E871E : =$0                 vcRS2 set $00
(1)   76/   E871E : =$0                 vcRS3 set $00
(1)   76/   E871E : =$0                 vcRS4 set $00
(1)   77/   E871E : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   77/   E871E : =$1F                vcAR1 set $1F
(1)   77/   E871E : =$1F                vcAR2 set $1F
(1)   77/   E871E : =$1F                vcAR3 set $1F
(1)   77/   E871E : =$1F                vcAR4 set $1F
(1)   78/   E871E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   78/   E871E : =$0                 vcAM1 set $00<<5
(1)   78/   E871E : =$0                 vcAM2 set $00<<5
(1)   78/   E871E : =$0                 vcAM3 set $00<<5
(1)   78/   E871E : =$0                 vcAM4 set $00<<5
(1)   79/   E871E : (MACRO)             	smpsVcDecayRate1    $0D, $07, $0A, $07
(1)   79/   E871E : =$D                 vcD1R1 set $0D
(1)   79/   E871E : =$7                 vcD1R2 set $07
(1)   79/   E871E : =$A                 vcD1R3 set $0A
(1)   79/   E871E : =$7                 vcD1R4 set $07
(1)   80/   E871E : (MACRO)             	smpsVcDecayRate2    $0B, $00, $0B, $00
(1)   80/   E871E : =$B                 vcD2R1 set $0B
(1)   80/   E871E : =$0                 vcD2R2 set $00
(1)   80/   E871E : =$B                 vcD2R3 set $0B
(1)   80/   E871E : =$0                 vcD2R4 set $00
(1)   81/   E871E : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)   81/   E871E : =$0                 vcDL1 set $00
(1)   81/   E871E : =$1                 vcDL2 set $01
(1)   81/   E871E : =$0                 vcDL3 set $00
(1)   81/   E871E : =$1                 vcDL4 set $01
(1)   82/   E871E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   82/   E871E : =$F                 vcRR1 set $0F
(1)   82/   E871E : =$F                 vcRR2 set $0F
(1)   82/   E871E : =$F                 vcRR3 set $0F
(1)   82/   E871E : =$F                 vcRR4 set $0F
(1)   83/   E871E : (MACRO)             	smpsVcTotalLevel    $08, $13, $01, $13
(1)   83/   E871E : =$8                 vcTL1 set $08
(1)   83/   E871E : =$13                vcTL2 set $13
(1)   83/   E871E : =$1                 vcTL3 set $01
(1)   83/   E871E : =$13                vcTL4 set $13
(1)   83/   E871E : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   83/   E871F :                     ;   0     1     2     3     4     5     6     7
(1)   83/   E871F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   83/   E871F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   83/   E871F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   83/   E871F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   83/   E871F : =$80                vcTLMask1 set $80
(1)   83/   E871F :                     
(1)   83/   E871F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   83/   E871F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   83/   E871F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   83/   E871F : =$80                vcTLMask1 set $80
(1)   83/   E871F : =$8                 vcTL1 set vcTL1&$7F
(1)   83/   E871F : =$13                vcTL2 set vcTL2&$7F
(1)   83/   E871F : =$1                 vcTL3 set vcTL3&$7F
(1)   83/   E871F : =$13                vcTL4 set vcTL4&$7F
(1)   83/   E871F :                     
(1)   83/   E871F : 3772 7749                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   83/   E8723 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   83/   E8727 : 070A 070D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   83/   E872B : 000B 000B                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   83/   E872F : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   83/   E8733 : 1381 1388                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   84/   E8737 :                     
(1)   85/   E8737 :                     
  490/   E8737 :                        Sound44:	include "sfx-improved/C4 - Boss Explosion.asm"
(1)    1/   E8737 :                     Sound44_BossExplosion_Header:
(1)    2/   E8737 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8737 :                     
(1)    2/   E8737 : =$2                 SourceDriver set 2
(1)    2/   E8737 :                     
(1)    2/   E8737 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8737 :                     
(1)    2/   E8737 : =$E8737             songStart set *
(1)    2/   E8737 :                     
(1)    2/   E8737 :                     
(1)    3/   E8737 : (MACRO)             	smpsHeaderVoice     Sound44_BossExplosion_Voices
(1)    3/   E8737 : 4687                                dc.w    z80_ptr(SOUND44_BOSSEXPLOSION_VOICES)
(1)    4/   E8739 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8739 : 01                          dc.b    $01
(1)    5/   E873A : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E873A : 01                          dc.b    $01
(1)    6/   E873B :                     
(1)    7/   E873B : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound44_BossExplosion_FM5,	$00, $00
(1)    7/   E873B : 8005                        dc.b    $80,CFM5
(1)    7/   E873D :  (MACRO-2)                  CheckedChannelPointer SOUND44_BOSSEXPLOSION_FM5
(1)    7/   E873D : 4187                                dc.w    z80_ptr(SOUND44_BOSSEXPLOSION_FM5)
(1)    7/   E873F : 00                                  dc.b    $00
(1)    7/   E8740 : 00                          dc.b    $00
(1)    8/   E8741 :                     
(1)    9/   E8741 :                     ; FM5 Data
(1)   10/   E8741 :                     Sound44_BossExplosion_FM5:
(1)   11/   E8741 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8741 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8741 : EF00                                dc.b    $EF,$00
(1)   12/   E8743 : 8A22                	dc.b	nA0, $22
(1)   13/   E8745 : (MACRO)             	smpsStop
(1)   13/   E8745 : F2                          dc.b    $F2
(1)   14/   E8746 :                     
(1)   15/   E8746 :                     Sound44_BossExplosion_Voices:
(1)   16/   E8746 :                     ;	Voice $00
(1)   17/   E8746 :                     ;	$FA
(1)   18/   E8746 :                     ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $05, $10
(1)   19/   E8746 :                     ;	$0B, $1F, $10, $10, 	$1F, $2F, $4F, $2F, 	$0D, $07, $04, $80
(1)   20/   E8746 : (MACRO)             	smpsVcAlgorithm     $02
(1)   20/   E8746 : =$2                 vcAlgorithm set $02
(1)   21/   E8746 : (MACRO)             	smpsVcFeedback      $07
(1)   21/   E8746 : =$7                 vcFeedback set $07
(1)   22/   E8746 : (MACRO)             	smpsVcUnusedBits    $03
(1)   22/   E8746 : =$3                 vcUnusedBits set $03
(1)   22/   E8746 : =$0                 vcD1R1Unk set 0
(1)   22/   E8746 : =$0                 vcD1R2Unk set 0
(1)   22/   E8746 : =$0                 vcD1R3Unk set 0
(1)   22/   E8746 : =$0                 vcD1R4Unk set 0
(1)   23/   E8746 : (MACRO)             	smpsVcDetune        $03, $01, $03, $02
(1)   23/   E8746 : =$3                 vcDT1 set $03
(1)   23/   E8746 : =$1                 vcDT2 set $01
(1)   23/   E8746 : =$3                 vcDT3 set $03
(1)   23/   E8746 : =$2                 vcDT4 set $02
(1)   24/   E8746 : (MACRO)             	smpsVcCoarseFreq    $02, $00, $00, $01
(1)   24/   E8746 : =$2                 vcCF1 set $02
(1)   24/   E8746 : =$0                 vcCF2 set $00
(1)   24/   E8746 : =$0                 vcCF3 set $00
(1)   24/   E8746 : =$1                 vcCF4 set $01
(1)   25/   E8746 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8746 : =$0                 vcRS1 set $00
(1)   25/   E8746 : =$0                 vcRS2 set $00
(1)   25/   E8746 : =$0                 vcRS3 set $00
(1)   25/   E8746 : =$0                 vcRS4 set $00
(1)   26/   E8746 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E8746 : =$1F                vcAR1 set $1F
(1)   26/   E8746 : =$1F                vcAR2 set $1F
(1)   26/   E8746 : =$1F                vcAR3 set $1F
(1)   26/   E8746 : =$1F                vcAR4 set $1F
(1)   27/   E8746 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8746 : =$0                 vcAM1 set $00<<5
(1)   27/   E8746 : =$0                 vcAM2 set $00<<5
(1)   27/   E8746 : =$0                 vcAM3 set $00<<5
(1)   27/   E8746 : =$0                 vcAM4 set $00<<5
(1)   28/   E8746 : (MACRO)             	smpsVcDecayRate1    $10, $05, $18, $05
(1)   28/   E8746 : =$10                vcD1R1 set $10
(1)   28/   E8746 : =$5                 vcD1R2 set $05
(1)   28/   E8746 : =$18                vcD1R3 set $18
(1)   28/   E8746 : =$5                 vcD1R4 set $05
(1)   29/   E8746 : (MACRO)             	smpsVcDecayRate2    $10, $10, $1F, $0B
(1)   29/   E8746 : =$10                vcD2R1 set $10
(1)   29/   E8746 : =$10                vcD2R2 set $10
(1)   29/   E8746 : =$1F                vcD2R3 set $1F
(1)   29/   E8746 : =$B                 vcD2R4 set $0B
(1)   30/   E8746 : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   30/   E8746 : =$2                 vcDL1 set $02
(1)   30/   E8746 : =$4                 vcDL2 set $04
(1)   30/   E8746 : =$2                 vcDL3 set $02
(1)   30/   E8746 : =$1                 vcDL4 set $01
(1)   31/   E8746 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E8746 : =$F                 vcRR1 set $0F
(1)   31/   E8746 : =$F                 vcRR2 set $0F
(1)   31/   E8746 : =$F                 vcRR3 set $0F
(1)   31/   E8746 : =$F                 vcRR4 set $0F
(1)   32/   E8746 : (MACRO)             	smpsVcTotalLevel    $00, $04, $07, $0D
(1)   32/   E8746 : =$0                 vcTL1 set $00
(1)   32/   E8746 : =$4                 vcTL2 set $04
(1)   32/   E8746 : =$7                 vcTL3 set $07
(1)   32/   E8746 : =$D                 vcTL4 set $0D
(1)   32/   E8746 : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8747 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8747 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8747 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8747 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8747 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8747 : =$80                vcTLMask1 set $80
(1)   32/   E8747 :                     
(1)   32/   E8747 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8747 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8747 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8747 : =$80                vcTLMask1 set $80
(1)   32/   E8747 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8747 : =$4                 vcTL2 set vcTL2&$7F
(1)   32/   E8747 : =$7                 vcTL3 set vcTL3&$7F
(1)   32/   E8747 : =$D                 vcTL4 set vcTL4&$7F
(1)   32/   E8747 :                     
(1)   32/   E8747 : 2130 1032                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E874B : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E874F : 0518 0510                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8753 : 0B1F 1010                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8757 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E875B : 0D07 0480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E875F :                     
(1)   34/   E875F :                     
  491/   E875F :                        Sound45:	include "sfx-improved/C5 - Tally End.asm"
(1)    1/   E875F :                     Sound45_TallyEnd_Header:
(1)    2/   E875F : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E875F :                     
(1)    2/   E875F : =$2                 SourceDriver set 2
(1)    2/   E875F :                     
(1)    2/   E875F : =$0                 SourceSMPS2ASM set 0
(1)    2/   E875F :                     
(1)    2/   E875F : =$E875F             songStart set *
(1)    2/   E875F :                     
(1)    2/   E875F :                     
(1)    3/   E875F : (MACRO)             	smpsHeaderVoice     Sound45_TallyEnd_Voices
(1)    3/   E875F : 9487                                dc.w    z80_ptr(SOUND45_TALLYEND_VOICES)
(1)    4/   E8761 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8761 : 01                          dc.b    $01
(1)    5/   E8762 : (MACRO)             	smpsHeaderChanSFX   $03
(1)    5/   E8762 : 03                          dc.b    $03
(1)    6/   E8763 :                     
(1)    7/   E8763 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound45_TallyEnd_FM5,	$00, $00
(1)    7/   E8763 : 8005                        dc.b    $80,CFM5
(1)    7/   E8765 :  (MACRO-2)                  CheckedChannelPointer SOUND45_TALLYEND_FM5
(1)    7/   E8765 : 7587                                dc.w    z80_ptr(SOUND45_TALLYEND_FM5)
(1)    7/   E8767 : 00                                  dc.b    $00
(1)    7/   E8768 : 00                          dc.b    $00
(1)    8/   E8769 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound45_TallyEnd_FM4,	$00, $00
(1)    8/   E8769 : 8004                        dc.b    $80,CFM4
(1)    8/   E876B :  (MACRO-2)                  CheckedChannelPointer SOUND45_TALLYEND_FM4
(1)    8/   E876B : 7E87                                dc.w    z80_ptr(SOUND45_TALLYEND_FM4)
(1)    8/   E876D : 00                                  dc.b    $00
(1)    8/   E876E : 00                          dc.b    $00
(1)    9/   E876F : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound45_TallyEnd_PSG3,	$00, $00
(1)    9/   E876F : 80C0                        dc.b    $80,CPSG3
(1)    9/   E8771 :  (MACRO-2)                  CheckedChannelPointer SOUND45_TALLYEND_PSG3
(1)    9/   E8771 : 8587                                dc.w    z80_ptr(SOUND45_TALLYEND_PSG3)
(1)    9/   E8773 :  (MACRO-2)                          PSGPitchConvert $00
(1)    9/   E8773 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    9/   E8774 : 00                          dc.b    $00
(1)   10/   E8775 :                     
(1)   11/   E8775 :                     ; FM5 Data
(1)   12/   E8775 :                     Sound45_TallyEnd_FM5:
(1)   13/   E8775 : (MACRO)             	smpsSetvoice        $00
(1)   13/   E8775 :  (MACRO-2)                  smpsFMvoice $00
(1)   13/   E8775 : EF00                                dc.b    $EF,$00
(1)   14/   E8777 : 8A08 8002 8A08      	dc.b	nA0, $08, nRst, $02, nA0, $08
(1)   15/   E877D : (MACRO)             	smpsStop
(1)   15/   E877D : F2                          dc.b    $F2
(1)   16/   E877E :                     
(1)   17/   E877E :                     ; FM4 Data
(1)   18/   E877E :                     Sound45_TallyEnd_FM4:
(1)   19/   E877E : (MACRO)             	smpsSetvoice        $01
(1)   19/   E877E :  (MACRO-2)                  smpsFMvoice $01
(1)   19/   E877E : EF01                                dc.b    $EF,$01
(1)   20/   E8780 : 8012 C655           	dc.b	nRst, $12, nA5, $55
(1)   21/   E8784 : (MACRO)             	smpsStop
(1)   21/   E8784 : F2                          dc.b    $F2
(1)   22/   E8785 :                     
(1)   23/   E8785 :                     ; PSG3 Data
(1)   24/   E8785 :                     Sound45_TallyEnd_PSG3:
(1)   25/   E8785 : (MACRO)             	smpsPSGvoice        fTone_02
(1)   25/   E8785 : F502                        dc.b    $F5,FTONE_02
(1)   26/   E8787 : (MACRO)             	smpsPSGform         $E7
(1)   26/   E8787 : F3E7                        dc.b    $F3,$E7
(1)   27/   E8789 : 8002 C205 C404 C205 	dc.b	nRst, $02, nF5, $05, nG5, $04, nF5, $05, nG5, $04
            E8791 : C404               
(1)   28/   E8793 : (MACRO)             	smpsStop
(1)   28/   E8793 : F2                          dc.b    $F2
(1)   29/   E8794 :                     
(1)   30/   E8794 :                     Sound45_TallyEnd_Voices:
(1)   31/   E8794 :                     ;	Voice $00
(1)   32/   E8794 :                     ;	$3B
(1)   33/   E8794 :                     ;	$03, $02, $02, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
(1)   34/   E8794 :                     ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
(1)   35/   E8794 : (MACRO)             	smpsVcAlgorithm     $03
(1)   35/   E8794 : =$3                 vcAlgorithm set $03
(1)   36/   E8794 : (MACRO)             	smpsVcFeedback      $07
(1)   36/   E8794 : =$7                 vcFeedback set $07
(1)   37/   E8794 : (MACRO)             	smpsVcUnusedBits    $00
(1)   37/   E8794 : =$0                 vcUnusedBits set $00
(1)   37/   E8794 : =$0                 vcD1R1Unk set 0
(1)   37/   E8794 : =$0                 vcD1R2Unk set 0
(1)   37/   E8794 : =$0                 vcD1R3Unk set 0
(1)   37/   E8794 : =$0                 vcD1R4Unk set 0
(1)   38/   E8794 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   38/   E8794 : =$0                 vcDT1 set $00
(1)   38/   E8794 : =$0                 vcDT2 set $00
(1)   38/   E8794 : =$0                 vcDT3 set $00
(1)   38/   E8794 : =$0                 vcDT4 set $00
(1)   39/   E8794 : (MACRO)             	smpsVcCoarseFreq    $06, $02, $02, $03
(1)   39/   E8794 : =$6                 vcCF1 set $06
(1)   39/   E8794 : =$2                 vcCF2 set $02
(1)   39/   E8794 : =$2                 vcCF3 set $02
(1)   39/   E8794 : =$3                 vcCF4 set $03
(1)   40/   E8794 : (MACRO)             	smpsVcRateScale     $02, $00, $00, $00
(1)   40/   E8794 : =$2                 vcRS1 set $02
(1)   40/   E8794 : =$0                 vcRS2 set $00
(1)   40/   E8794 : =$0                 vcRS3 set $00
(1)   40/   E8794 : =$0                 vcRS4 set $00
(1)   41/   E8794 : (MACRO)             	smpsVcAttackRate    $16, $1A, $1A, $18
(1)   41/   E8794 : =$16                vcAR1 set $16
(1)   41/   E8794 : =$1A                vcAR2 set $1A
(1)   41/   E8794 : =$1A                vcAR3 set $1A
(1)   41/   E8794 : =$18                vcAR4 set $18
(1)   42/   E8794 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   42/   E8794 : =$0                 vcAM1 set $00<<5
(1)   42/   E8794 : =$0                 vcAM2 set $00<<5
(1)   42/   E8794 : =$0                 vcAM3 set $00<<5
(1)   42/   E8794 : =$0                 vcAM4 set $00<<5
(1)   43/   E8794 : (MACRO)             	smpsVcDecayRate1    $10, $0A, $0E, $17
(1)   43/   E8794 : =$10                vcD1R1 set $10
(1)   43/   E8794 : =$A                 vcD1R2 set $0A
(1)   43/   E8794 : =$E                 vcD1R3 set $0E
(1)   43/   E8794 : =$17                vcD1R4 set $17
(1)   44/   E8794 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   44/   E8794 : =$0                 vcD2R1 set $00
(1)   44/   E8794 : =$0                 vcD2R2 set $00
(1)   44/   E8794 : =$0                 vcD2R3 set $00
(1)   44/   E8794 : =$0                 vcD2R4 set $00
(1)   45/   E8794 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   45/   E8794 : =$F                 vcDL1 set $0F
(1)   45/   E8794 : =$F                 vcDL2 set $0F
(1)   45/   E8794 : =$F                 vcDL3 set $0F
(1)   45/   E8794 : =$F                 vcDL4 set $0F
(1)   46/   E8794 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   46/   E8794 : =$F                 vcRR1 set $0F
(1)   46/   E8794 : =$F                 vcRR2 set $0F
(1)   46/   E8794 : =$F                 vcRR3 set $0F
(1)   46/   E8794 : =$F                 vcRR4 set $0F
(1)   47/   E8794 : (MACRO)             	smpsVcTotalLevel    $00, $39, $28, $00
(1)   47/   E8794 : =$0                 vcTL1 set $00
(1)   47/   E8794 : =$39                vcTL2 set $39
(1)   47/   E8794 : =$28                vcTL3 set $28
(1)   47/   E8794 : =$0                 vcTL4 set $00
(1)   47/   E8794 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   47/   E8795 :                     ;   0     1     2     3     4     5     6     7
(1)   47/   E8795 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   47/   E8795 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   47/   E8795 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   47/   E8795 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   47/   E8795 : =$80                vcTLMask1 set $80
(1)   47/   E8795 :                     
(1)   47/   E8795 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   47/   E8795 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   47/   E8795 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   47/   E8795 : =$80                vcTLMask1 set $80
(1)   47/   E8795 : =$0                 vcTL1 set vcTL1&$7F
(1)   47/   E8795 : =$39                vcTL2 set vcTL2&$7F
(1)   47/   E8795 : =$28                vcTL3 set vcTL3&$7F
(1)   47/   E8795 : =$0                 vcTL4 set vcTL4&$7F
(1)   47/   E8795 :                     
(1)   47/   E8795 : 0302 0206                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   47/   E8799 : 181A 1A96                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   47/   E879D : 170E 0A10                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   47/   E87A1 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   47/   E87A5 : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   47/   E87A9 : 0028 3980                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   48/   E87AD :                     
(1)   49/   E87AD :                     Sound_Ring_Voices:
(1)   50/   E87AD :                     ;	Voice $01
(1)   51/   E87AD :                     ;	$04
(1)   52/   E87AD :                     ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
(1)   53/   E87AD :                     ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
(1)   54/   E87AD : (MACRO)             	smpsVcAlgorithm     $04
(1)   54/   E87AD : =$4                 vcAlgorithm set $04
(1)   55/   E87AD : (MACRO)             	smpsVcFeedback      $00
(1)   55/   E87AD : =$0                 vcFeedback set $00
(1)   56/   E87AD : (MACRO)             	smpsVcUnusedBits    $00
(1)   56/   E87AD : =$0                 vcUnusedBits set $00
(1)   56/   E87AD : =$0                 vcD1R1Unk set 0
(1)   56/   E87AD : =$0                 vcD1R2Unk set 0
(1)   56/   E87AD : =$0                 vcD1R3Unk set 0
(1)   56/   E87AD : =$0                 vcD1R4Unk set 0
(1)   57/   E87AD : (MACRO)             	smpsVcDetune        $04, $07, $07, $03
(1)   57/   E87AD : =$4                 vcDT1 set $04
(1)   57/   E87AD : =$7                 vcDT2 set $07
(1)   57/   E87AD : =$7                 vcDT3 set $07
(1)   57/   E87AD : =$3                 vcDT4 set $03
(1)   58/   E87AD : (MACRO)             	smpsVcCoarseFreq    $09, $07, $02, $07
(1)   58/   E87AD : =$9                 vcCF1 set $09
(1)   58/   E87AD : =$7                 vcCF2 set $07
(1)   58/   E87AD : =$2                 vcCF3 set $02
(1)   58/   E87AD : =$7                 vcCF4 set $07
(1)   59/   E87AD : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   59/   E87AD : =$0                 vcRS1 set $00
(1)   59/   E87AD : =$0                 vcRS2 set $00
(1)   59/   E87AD : =$0                 vcRS3 set $00
(1)   59/   E87AD : =$0                 vcRS4 set $00
(1)   60/   E87AD : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   60/   E87AD : =$1F                vcAR1 set $1F
(1)   60/   E87AD : =$1F                vcAR2 set $1F
(1)   60/   E87AD : =$1F                vcAR3 set $1F
(1)   60/   E87AD : =$1F                vcAR4 set $1F
(1)   61/   E87AD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   61/   E87AD : =$0                 vcAM1 set $00<<5
(1)   61/   E87AD : =$0                 vcAM2 set $00<<5
(1)   61/   E87AD : =$0                 vcAM3 set $00<<5
(1)   61/   E87AD : =$0                 vcAM4 set $00<<5
(1)   62/   E87AD : (MACRO)             	smpsVcDecayRate1    $0D, $07, $0A, $07
(1)   62/   E87AD : =$D                 vcD1R1 set $0D
(1)   62/   E87AD : =$7                 vcD1R2 set $07
(1)   62/   E87AD : =$A                 vcD1R3 set $0A
(1)   62/   E87AD : =$7                 vcD1R4 set $07
(1)   63/   E87AD : (MACRO)             	smpsVcDecayRate2    $0B, $00, $0B, $00
(1)   63/   E87AD : =$B                 vcD2R1 set $0B
(1)   63/   E87AD : =$0                 vcD2R2 set $00
(1)   63/   E87AD : =$B                 vcD2R3 set $0B
(1)   63/   E87AD : =$0                 vcD2R4 set $00
(1)   64/   E87AD : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(1)   64/   E87AD : =$0                 vcDL1 set $00
(1)   64/   E87AD : =$1                 vcDL2 set $01
(1)   64/   E87AD : =$0                 vcDL3 set $00
(1)   64/   E87AD : =$1                 vcDL4 set $01
(1)   65/   E87AD : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   65/   E87AD : =$F                 vcRR1 set $0F
(1)   65/   E87AD : =$F                 vcRR2 set $0F
(1)   65/   E87AD : =$F                 vcRR3 set $0F
(1)   65/   E87AD : =$F                 vcRR4 set $0F
(1)   66/   E87AD : (MACRO)             	smpsVcTotalLevel    $00, $23, $00, $23
(1)   66/   E87AD : =$0                 vcTL1 set $00
(1)   66/   E87AD : =$23                vcTL2 set $23
(1)   66/   E87AD : =$0                 vcTL3 set $00
(1)   66/   E87AD : =$23                vcTL4 set $23
(1)   66/   E87AD : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   66/   E87AE :                     ;   0     1     2     3     4     5     6     7
(1)   66/   E87AE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   66/   E87AE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   66/   E87AE : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   66/   E87AE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   66/   E87AE : =$80                vcTLMask1 set $80
(1)   66/   E87AE :                     
(1)   66/   E87AE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   66/   E87AE : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   66/   E87AE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   66/   E87AE : =$80                vcTLMask1 set $80
(1)   66/   E87AE : =$0                 vcTL1 set vcTL1&$7F
(1)   66/   E87AE : =$23                vcTL2 set vcTL2&$7F
(1)   66/   E87AE : =$0                 vcTL3 set vcTL3&$7F
(1)   66/   E87AE : =$23                vcTL4 set vcTL4&$7F
(1)   66/   E87AE :                     
(1)   66/   E87AE : 3772 7749                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   66/   E87B2 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   66/   E87B6 : 070A 070D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   66/   E87BA : 000B 000B                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   66/   E87BE : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   66/   E87C2 : 2380 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   67/   E87C6 :                     
(1)   68/   E87C6 :                     
  492/   E87C6 :                        Sound46:	include "sfx-improved/C6 - Ring Spill.asm"
(1)    1/   E87C6 :                     Sound46_RingSpill_Header:
(1)    2/   E87C6 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E87C6 :                     
(1)    2/   E87C6 : =$2                 SourceDriver set 2
(1)    2/   E87C6 :                     
(1)    2/   E87C6 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E87C6 :                     
(1)    2/   E87C6 : =$E87C6             songStart set *
(1)    2/   E87C6 :                     
(1)    2/   E87C6 :                     
(1)    3/   E87C6 : (MACRO)             	smpsHeaderVoice     Sound_Ring_Voices
(1)    3/   E87C6 : AD87                                dc.w    z80_ptr(SOUND_RING_VOICES)
(1)    4/   E87C8 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E87C8 : 01                          dc.b    $01
(1)    5/   E87C9 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E87C9 : 02                          dc.b    $02
(1)    6/   E87CA :                     
(1)    7/   E87CA : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound46_RingSpill_FM4,	$00, $05
(1)    7/   E87CA : 8004                        dc.b    $80,CFM4
(1)    7/   E87CC :  (MACRO-2)                  CheckedChannelPointer SOUND46_RINGSPILL_FM4
(1)    7/   E87CC : D687                                dc.w    z80_ptr(SOUND46_RINGSPILL_FM4)
(1)    7/   E87CE : 00                                  dc.b    $00
(1)    7/   E87CF : 05                          dc.b    $05
(1)    8/   E87D0 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound46_RingSpill_FM5,	$00, $08
(1)    8/   E87D0 : 8005                        dc.b    $80,CFM5
(1)    8/   E87D2 :  (MACRO-2)                  CheckedChannelPointer SOUND46_RINGSPILL_FM5
(1)    8/   E87D2 : E287                                dc.w    z80_ptr(SOUND46_RINGSPILL_FM5)
(1)    8/   E87D4 : 00                                  dc.b    $00
(1)    8/   E87D5 : 08                          dc.b    $08
(1)    9/   E87D6 :                     
(1)   10/   E87D6 :                     ; FM4 Data
(1)   11/   E87D6 :                     Sound46_RingSpill_FM4:
(1)   12/   E87D6 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E87D6 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E87D6 : EF00                                dc.b    $EF,$00
(1)   13/   E87D8 : C602 0505 0505 0505 	dc.b	nA5, $02, $05, $05, $05, $05, $05, $05, $3A
            E87E0 : 3A               
(1)   14/   E87E1 : (MACRO)             	smpsStop
(1)   14/   E87E1 : F2                          dc.b    $F2
(1)   15/   E87E2 :                     
(1)   16/   E87E2 :                     ; FM5 Data
(1)   17/   E87E2 :                     Sound46_RingSpill_FM5:
(1)   18/   E87E2 : (MACRO)             	smpsSetvoice        $00
(1)   18/   E87E2 :  (MACRO-2)                  smpsFMvoice $00
(1)   18/   E87E2 : EF00                                dc.b    $EF,$00
(1)   19/   E87E4 : 8002 C402 0515 0205 	dc.b	nRst, $02, nG5, $02, $05, $15, $02, $05, $32
            E87EC : 32               
(1)   20/   E87ED : (MACRO)             	smpsStop
(1)   20/   E87ED : F2                          dc.b    $F2
(1)   21/   E87EE :                     
  493/   E87EE :                        Sound47:	include "sfx-improved/C7 - Chain Rise (Unused).asm"
(1)    1/   E87EE :                     Sound47_Header:
(1)    2/   E87EE : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E87EE :                     
(1)    2/   E87EE : =$2                 SourceDriver set 2
(1)    2/   E87EE :                     
(1)    2/   E87EE : =$0                 SourceSMPS2ASM set 0
(1)    2/   E87EE :                     
(1)    2/   E87EE : =$E87EE             songStart set *
(1)    2/   E87EE :                     
(1)    2/   E87EE :                     
(1)    3/   E87EE : (MACRO)             	smpsHeaderVoice     Sound47_Voices
(1)    3/   E87EE : 0388                                dc.w    z80_ptr(SOUND47_VOICES)
(1)    4/   E87F0 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E87F0 : 01                          dc.b    $01
(1)    5/   E87F1 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E87F1 : 01                          dc.b    $01
(1)    6/   E87F2 :                     
(1)    7/   E87F2 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound47_FM5,	$00, $00
(1)    7/   E87F2 : 8005                        dc.b    $80,CFM5
(1)    7/   E87F4 :  (MACRO-2)                  CheckedChannelPointer SOUND47_FM5
(1)    7/   E87F4 : F887                                dc.w    z80_ptr(SOUND47_FM5)
(1)    7/   E87F6 : 00                                  dc.b    $00
(1)    7/   E87F7 : 00                          dc.b    $00
(1)    8/   E87F8 :                     
(1)    9/   E87F8 :                     ; FM5 Data
(1)   10/   E87F8 :                     Sound47_FM5:
(1)   11/   E87F8 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E87F8 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E87F8 : EF00                                dc.b    $EF,$00
(1)   12/   E87FA : BE05 8004 BE04 8004 	dc.b	nCs5, $05, nRst, $04, nCs5, $04, nRst, $04
(1)   13/   E8802 : (MACRO)             	smpsStop
(1)   13/   E8802 : F2                          dc.b    $F2
(1)   14/   E8803 :                     
(1)   15/   E8803 :                     Sound47_Voices:
(1)   16/   E8803 :                     ;	Voice $00
(1)   17/   E8803 :                     ;	$28
(1)   18/   E8803 :                     ;	$2F, $5F, $37, $2B, 	$1F, $1F, $1F, $1F, 	$15, $15, $15, $13
(1)   19/   E8803 :                     ;	$13, $0C, $0D, $10, 	$2F, $2F, $3F, $2F, 	$00, $10, $1F, $80
(1)   20/   E8803 : (MACRO)             	smpsVcAlgorithm     $00
(1)   20/   E8803 : =$0                 vcAlgorithm set $00
(1)   21/   E8803 : (MACRO)             	smpsVcFeedback      $05
(1)   21/   E8803 : =$5                 vcFeedback set $05
(1)   22/   E8803 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8803 : =$0                 vcUnusedBits set $00
(1)   22/   E8803 : =$0                 vcD1R1Unk set 0
(1)   22/   E8803 : =$0                 vcD1R2Unk set 0
(1)   22/   E8803 : =$0                 vcD1R3Unk set 0
(1)   22/   E8803 : =$0                 vcD1R4Unk set 0
(1)   23/   E8803 : (MACRO)             	smpsVcDetune        $02, $03, $05, $02
(1)   23/   E8803 : =$2                 vcDT1 set $02
(1)   23/   E8803 : =$3                 vcDT2 set $03
(1)   23/   E8803 : =$5                 vcDT3 set $05
(1)   23/   E8803 : =$2                 vcDT4 set $02
(1)   24/   E8803 : (MACRO)             	smpsVcCoarseFreq    $0B, $07, $0F, $0F
(1)   24/   E8803 : =$B                 vcCF1 set $0B
(1)   24/   E8803 : =$7                 vcCF2 set $07
(1)   24/   E8803 : =$F                 vcCF3 set $0F
(1)   24/   E8803 : =$F                 vcCF4 set $0F
(1)   25/   E8803 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8803 : =$0                 vcRS1 set $00
(1)   25/   E8803 : =$0                 vcRS2 set $00
(1)   25/   E8803 : =$0                 vcRS3 set $00
(1)   25/   E8803 : =$0                 vcRS4 set $00
(1)   26/   E8803 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E8803 : =$1F                vcAR1 set $1F
(1)   26/   E8803 : =$1F                vcAR2 set $1F
(1)   26/   E8803 : =$1F                vcAR3 set $1F
(1)   26/   E8803 : =$1F                vcAR4 set $1F
(1)   27/   E8803 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8803 : =$0                 vcAM1 set $00<<5
(1)   27/   E8803 : =$0                 vcAM2 set $00<<5
(1)   27/   E8803 : =$0                 vcAM3 set $00<<5
(1)   27/   E8803 : =$0                 vcAM4 set $00<<5
(1)   28/   E8803 : (MACRO)             	smpsVcDecayRate1    $13, $15, $15, $15
(1)   28/   E8803 : =$13                vcD1R1 set $13
(1)   28/   E8803 : =$15                vcD1R2 set $15
(1)   28/   E8803 : =$15                vcD1R3 set $15
(1)   28/   E8803 : =$15                vcD1R4 set $15
(1)   29/   E8803 : (MACRO)             	smpsVcDecayRate2    $10, $0D, $0C, $13
(1)   29/   E8803 : =$10                vcD2R1 set $10
(1)   29/   E8803 : =$D                 vcD2R2 set $0D
(1)   29/   E8803 : =$C                 vcD2R3 set $0C
(1)   29/   E8803 : =$13                vcD2R4 set $13
(1)   30/   E8803 : (MACRO)             	smpsVcDecayLevel    $02, $03, $02, $02
(1)   30/   E8803 : =$2                 vcDL1 set $02
(1)   30/   E8803 : =$3                 vcDL2 set $03
(1)   30/   E8803 : =$2                 vcDL3 set $02
(1)   30/   E8803 : =$2                 vcDL4 set $02
(1)   31/   E8803 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E8803 : =$F                 vcRR1 set $0F
(1)   31/   E8803 : =$F                 vcRR2 set $0F
(1)   31/   E8803 : =$F                 vcRR3 set $0F
(1)   31/   E8803 : =$F                 vcRR4 set $0F
(1)   32/   E8803 : (MACRO)             	smpsVcTotalLevel    $00, $1F, $10, $00
(1)   32/   E8803 : =$0                 vcTL1 set $00
(1)   32/   E8803 : =$1F                vcTL2 set $1F
(1)   32/   E8803 : =$10                vcTL3 set $10
(1)   32/   E8803 : =$0                 vcTL4 set $00
(1)   32/   E8803 : 28                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8804 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8804 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8804 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8804 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8804 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8804 : =$80                vcTLMask1 set $80
(1)   32/   E8804 :                     
(1)   32/   E8804 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8804 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8804 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8804 : =$80                vcTLMask1 set $80
(1)   32/   E8804 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8804 : =$1F                vcTL2 set vcTL2&$7F
(1)   32/   E8804 : =$10                vcTL3 set vcTL3&$7F
(1)   32/   E8804 : =$0                 vcTL4 set vcTL4&$7F
(1)   32/   E8804 :                     
(1)   32/   E8804 : 2F5F 372B                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8808 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E880C : 1515 1513                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8810 : 130C 0D10                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8814 : 2F2F 3F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8818 : 0010 1F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E881C :                     
(1)   34/   E881C :                     
  494/   E881C :                        Sound48:	include "sfx-improved/C8 - Flamethrower.asm"
(1)    1/   E881C :                     Sound48_Flamethrower_Header:
(1)    2/   E881C : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E881C :                     
(1)    2/   E881C : =$2                 SourceDriver set 2
(1)    2/   E881C :                     
(1)    2/   E881C : =$0                 SourceSMPS2ASM set 0
(1)    2/   E881C :                     
(1)    2/   E881C : =$E881C             songStart set *
(1)    2/   E881C :                     
(1)    2/   E881C :                     
(1)    3/   E881C : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E881C : 0000                        dc.w    $0000
(1)    4/   E881E : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E881E : 01                          dc.b    $01
(1)    5/   E881F : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E881F : 01                          dc.b    $01
(1)    6/   E8820 :                     
(1)    7/   E8820 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound48_Flamethrower_PSG3,	$00, $00
(1)    7/   E8820 : 80C0                        dc.b    $80,CPSG3
(1)    7/   E8822 :  (MACRO-2)                  CheckedChannelPointer SOUND48_FLAMETHROWER_PSG3
(1)    7/   E8822 : 2688                                dc.w    z80_ptr(SOUND48_FLAMETHROWER_PSG3)
(1)    7/   E8824 :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E8824 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8825 : 00                          dc.b    $00
(1)    8/   E8826 :                     
(1)    9/   E8826 :                     ; PSG3 Data
(1)   10/   E8826 :                     Sound48_Flamethrower_PSG3:
(1)   11/   E8826 : (MACRO)             	smpsPSGvoice        $00
(1)   11/   E8826 : F500                        dc.b    $F5,$00
(1)   12/   E8828 : (MACRO)             	smpsPSGform         $E7
(1)   12/   E8828 : F3E7                        dc.b    $F3,$E7
(1)   13/   E882A : A725                	dc.b	nD3, $25
(1)   14/   E882C : (MACRO)             	smpsStop
(1)   14/   E882C : F2                          dc.b    $F2
(1)   15/   E882D :                     
  495/   E882D :                        Sound49:	include "sfx-improved/C9 - Hidden Bonus (Unused).asm"
(1)    1/   E882D :                     Sound49_Bonus_Header:
(1)    2/   E882D : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E882D :                     
(1)    2/   E882D : =$2                 SourceDriver set 2
(1)    2/   E882D :                     
(1)    2/   E882D : =$0                 SourceSMPS2ASM set 0
(1)    2/   E882D :                     
(1)    2/   E882D : =$E882D             songStart set *
(1)    2/   E882D :                     
(1)    2/   E882D :                     
(1)    3/   E882D : (MACRO)             	smpsHeaderVoice     Sound49_Bonus_Voices
(1)    3/   E882D : 4188                                dc.w    z80_ptr(SOUND49_BONUS_VOICES)
(1)    4/   E882F : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E882F : 01                          dc.b    $01
(1)    5/   E8830 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8830 : 01                          dc.b    $01
(1)    6/   E8831 :                     
(1)    7/   E8831 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound49_Bonus_FM5,	$0E, $00
(1)    7/   E8831 : 8005                        dc.b    $80,CFM5
(1)    7/   E8833 :  (MACRO-2)                  CheckedChannelPointer SOUND49_BONUS_FM5
(1)    7/   E8833 : 3788                                dc.w    z80_ptr(SOUND49_BONUS_FM5)
(1)    7/   E8835 : 0E                                  dc.b    $0E
(1)    7/   E8836 : 00                          dc.b    $00
(1)    8/   E8837 :                     
(1)    9/   E8837 :                     ; FM5 Data
(1)   10/   E8837 :                     Sound49_Bonus_FM5:
(1)   11/   E8837 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8837 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8837 : EF00                                dc.b    $EF,$00
(1)   12/   E8839 : (MACRO)             	smpsModSet          $01, $01, $33, $18
(1)   12/   E8839 : F0                          dc.b    $F0
(1)   12/   E883A : 0201 3319                           dc.b    $01+1,$01,$33,(($18+1) * $01) & $FF
(1)   12/   E883E :                             ;dc.b   $01,$33,$18
(1)   13/   E883E : B91A                	dc.b	nAb4, $1A
(1)   14/   E8840 : (MACRO)             	smpsStop
(1)   14/   E8840 : F2                          dc.b    $F2
(1)   15/   E8841 :                     
(1)   16/   E8841 :                     Sound49_Bonus_Voices:
(1)   17/   E8841 :                     ;	Voice $00
(1)   18/   E8841 :                     ;	$3B
(1)   19/   E8841 :                     ;	$0A, $31, $05, $02, 	$5F, $5F, $5F, $5F, 	$04, $14, $16, $0C
(1)   20/   E8841 :                     ;	$00, $04, $00, $00, 	$1F, $6F, $D8, $FF, 	$03, $25, $00, $80
(1)   21/   E8841 : (MACRO)             	smpsVcAlgorithm     $03
(1)   21/   E8841 : =$3                 vcAlgorithm set $03
(1)   22/   E8841 : (MACRO)             	smpsVcFeedback      $07
(1)   22/   E8841 : =$7                 vcFeedback set $07
(1)   23/   E8841 : (MACRO)             	smpsVcUnusedBits    $00
(1)   23/   E8841 : =$0                 vcUnusedBits set $00
(1)   23/   E8841 : =$0                 vcD1R1Unk set 0
(1)   23/   E8841 : =$0                 vcD1R2Unk set 0
(1)   23/   E8841 : =$0                 vcD1R3Unk set 0
(1)   23/   E8841 : =$0                 vcD1R4Unk set 0
(1)   24/   E8841 : (MACRO)             	smpsVcDetune        $00, $00, $03, $00
(1)   24/   E8841 : =$0                 vcDT1 set $00
(1)   24/   E8841 : =$0                 vcDT2 set $00
(1)   24/   E8841 : =$3                 vcDT3 set $03
(1)   24/   E8841 : =$0                 vcDT4 set $00
(1)   25/   E8841 : (MACRO)             	smpsVcCoarseFreq    $02, $05, $01, $0A
(1)   25/   E8841 : =$2                 vcCF1 set $02
(1)   25/   E8841 : =$5                 vcCF2 set $05
(1)   25/   E8841 : =$1                 vcCF3 set $01
(1)   25/   E8841 : =$A                 vcCF4 set $0A
(1)   26/   E8841 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)   26/   E8841 : =$1                 vcRS1 set $01
(1)   26/   E8841 : =$1                 vcRS2 set $01
(1)   26/   E8841 : =$1                 vcRS3 set $01
(1)   26/   E8841 : =$1                 vcRS4 set $01
(1)   27/   E8841 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   27/   E8841 : =$1F                vcAR1 set $1F
(1)   27/   E8841 : =$1F                vcAR2 set $1F
(1)   27/   E8841 : =$1F                vcAR3 set $1F
(1)   27/   E8841 : =$1F                vcAR4 set $1F
(1)   28/   E8841 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   28/   E8841 : =$0                 vcAM1 set $00<<5
(1)   28/   E8841 : =$0                 vcAM2 set $00<<5
(1)   28/   E8841 : =$0                 vcAM3 set $00<<5
(1)   28/   E8841 : =$0                 vcAM4 set $00<<5
(1)   29/   E8841 : (MACRO)             	smpsVcDecayRate1    $0C, $16, $14, $04
(1)   29/   E8841 : =$C                 vcD1R1 set $0C
(1)   29/   E8841 : =$16                vcD1R2 set $16
(1)   29/   E8841 : =$14                vcD1R3 set $14
(1)   29/   E8841 : =$4                 vcD1R4 set $04
(1)   30/   E8841 : (MACRO)             	smpsVcDecayRate2    $00, $00, $04, $00
(1)   30/   E8841 : =$0                 vcD2R1 set $00
(1)   30/   E8841 : =$0                 vcD2R2 set $00
(1)   30/   E8841 : =$4                 vcD2R3 set $04
(1)   30/   E8841 : =$0                 vcD2R4 set $00
(1)   31/   E8841 : (MACRO)             	smpsVcDecayLevel    $0F, $0D, $06, $01
(1)   31/   E8841 : =$F                 vcDL1 set $0F
(1)   31/   E8841 : =$D                 vcDL2 set $0D
(1)   31/   E8841 : =$6                 vcDL3 set $06
(1)   31/   E8841 : =$1                 vcDL4 set $01
(1)   32/   E8841 : (MACRO)             	smpsVcReleaseRate   $0F, $08, $0F, $0F
(1)   32/   E8841 : =$F                 vcRR1 set $0F
(1)   32/   E8841 : =$8                 vcRR2 set $08
(1)   32/   E8841 : =$F                 vcRR3 set $0F
(1)   32/   E8841 : =$F                 vcRR4 set $0F
(1)   33/   E8841 : (MACRO)             	smpsVcTotalLevel    $00, $00, $25, $03
(1)   33/   E8841 : =$0                 vcTL1 set $00
(1)   33/   E8841 : =$0                 vcTL2 set $00
(1)   33/   E8841 : =$25                vcTL3 set $25
(1)   33/   E8841 : =$3                 vcTL4 set $03
(1)   33/   E8841 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   33/   E8842 :                     ;   0     1     2     3     4     5     6     7
(1)   33/   E8842 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   33/   E8842 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E8842 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E8842 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E8842 : =$80                vcTLMask1 set $80
(1)   33/   E8842 :                     
(1)   33/   E8842 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E8842 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E8842 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E8842 : =$80                vcTLMask1 set $80
(1)   33/   E8842 : =$0                 vcTL1 set vcTL1&$7F
(1)   33/   E8842 : =$0                 vcTL2 set vcTL2&$7F
(1)   33/   E8842 : =$25                vcTL3 set vcTL3&$7F
(1)   33/   E8842 : =$3                 vcTL4 set vcTL4&$7F
(1)   33/   E8842 :                     
(1)   33/   E8842 : 0A31 0502                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   33/   E8846 : 5F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   33/   E884A : 0414 160C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   33/   E884E : 0004 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   33/   E8852 : 1F6F D8FF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   33/   E8856 : 0325 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   34/   E885A :                     
(1)   35/   E885A :                     
  496/   E885A :                        Sound4A:	include "sfx-improved/CA - Special Stage Entry.asm"
(1)    1/   E885A :                     Sound4A_SpecStageEntry_Header:
(1)    2/   E885A : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E885A :                     
(1)    2/   E885A : =$2                 SourceDriver set 2
(1)    2/   E885A :                     
(1)    2/   E885A : =$0                 SourceSMPS2ASM set 0
(1)    2/   E885A :                     
(1)    2/   E885A : =$E885A             songStart set *
(1)    2/   E885A :                     
(1)    2/   E885A :                     
(1)    3/   E885A : (MACRO)             	smpsHeaderVoice     Sound4A_SpecStageEntry_Voices
(1)    3/   E885A : 6E88                                dc.w    z80_ptr(SOUND4A_SPECSTAGEENTRY_VOICES)
(1)    4/   E885C : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E885C : 01                          dc.b    $01
(1)    5/   E885D : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E885D : 01                          dc.b    $01
(1)    6/   E885E :                     
(1)    7/   E885E : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound4A_SpecStageEntry_FM5,	$00, $02
(1)    7/   E885E : 8005                        dc.b    $80,CFM5
(1)    7/   E8860 :  (MACRO-2)                  CheckedChannelPointer SOUND4A_SPECSTAGEENTRY_FM5
(1)    7/   E8860 : 6488                                dc.w    z80_ptr(SOUND4A_SPECSTAGEENTRY_FM5)
(1)    7/   E8862 : 00                                  dc.b    $00
(1)    7/   E8863 : 02                          dc.b    $02
(1)    8/   E8864 :                     
(1)    9/   E8864 :                     ; FM5 Data
(1)   10/   E8864 :                     Sound4A_SpecStageEntry_FM5:
(1)   11/   E8864 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8864 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8864 : EF00                                dc.b    $EF,$00
(1)   12/   E8866 : (MACRO)             	smpsModSet          $01, $01, $5B, $02
(1)   12/   E8866 : F0                          dc.b    $F0
(1)   12/   E8867 : 0201 5B03                           dc.b    $01+1,$01,$5B,(($02+1) * $01) & $FF
(1)   12/   E886B :                             ;dc.b   $01,$5B,$02
(1)   13/   E886B : CC65                	dc.b	nEb6, $65
(1)   14/   E886D : (MACRO)             	smpsStop
(1)   14/   E886D : F2                          dc.b    $F2
(1)   15/   E886E :                     
(1)   16/   E886E :                     Sound4A_SpecStageEntry_Voices:
(1)   17/   E886E :                     ;	Voice $00
(1)   18/   E886E :                     ;	$20
(1)   19/   E886E :                     ;	$36, $35, $30, $31, 	$41, $49, $3B, $4B, 	$09, $06, $09, $08
(1)   20/   E886E :                     ;	$01, $03, $02, $A9, 	$0F, $0F, $0F, $0F, 	$29, $27, $23, $80
(1)   21/   E886E : (MACRO)             	smpsVcAlgorithm     $00
(1)   21/   E886E : =$0                 vcAlgorithm set $00
(1)   22/   E886E : (MACRO)             	smpsVcFeedback      $04
(1)   22/   E886E : =$4                 vcFeedback set $04
(1)   23/   E886E : (MACRO)             	smpsVcUnusedBits    $00
(1)   23/   E886E : =$0                 vcUnusedBits set $00
(1)   23/   E886E : =$0                 vcD1R1Unk set 0
(1)   23/   E886E : =$0                 vcD1R2Unk set 0
(1)   23/   E886E : =$0                 vcD1R3Unk set 0
(1)   23/   E886E : =$0                 vcD1R4Unk set 0
(1)   24/   E886E : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)   24/   E886E : =$3                 vcDT1 set $03
(1)   24/   E886E : =$3                 vcDT2 set $03
(1)   24/   E886E : =$3                 vcDT3 set $03
(1)   24/   E886E : =$3                 vcDT4 set $03
(1)   25/   E886E : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(1)   25/   E886E : =$1                 vcCF1 set $01
(1)   25/   E886E : =$0                 vcCF2 set $00
(1)   25/   E886E : =$5                 vcCF3 set $05
(1)   25/   E886E : =$6                 vcCF4 set $06
(1)   26/   E886E : (MACRO)             	smpsVcRateScale     $01, $00, $01, $01
(1)   26/   E886E : =$1                 vcRS1 set $01
(1)   26/   E886E : =$0                 vcRS2 set $00
(1)   26/   E886E : =$1                 vcRS3 set $01
(1)   26/   E886E : =$1                 vcRS4 set $01
(1)   27/   E886E : (MACRO)             	smpsVcAttackRate    $0B, $3B, $09, $01
(1)   27/   E886E : =$B                 vcAR1 set $0B
(1)   27/   E886E : =$3B                vcAR2 set $3B
(1)   27/   E886E : =$9                 vcAR3 set $09
(1)   27/   E886E : =$1                 vcAR4 set $01
(1)   28/   E886E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   28/   E886E : =$0                 vcAM1 set $00<<5
(1)   28/   E886E : =$0                 vcAM2 set $00<<5
(1)   28/   E886E : =$0                 vcAM3 set $00<<5
(1)   28/   E886E : =$0                 vcAM4 set $00<<5
(1)   29/   E886E : (MACRO)             	smpsVcDecayRate1    $08, $09, $06, $09
(1)   29/   E886E : =$8                 vcD1R1 set $08
(1)   29/   E886E : =$9                 vcD1R2 set $09
(1)   29/   E886E : =$6                 vcD1R3 set $06
(1)   29/   E886E : =$9                 vcD1R4 set $09
(1)   30/   E886E : (MACRO)             	smpsVcDecayRate2    $A9, $02, $03, $01
(1)   30/   E886E : =$A9                vcD2R1 set $A9
(1)   30/   E886E : =$2                 vcD2R2 set $02
(1)   30/   E886E : =$3                 vcD2R3 set $03
(1)   30/   E886E : =$1                 vcD2R4 set $01
(1)   31/   E886E : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   31/   E886E : =$0                 vcDL1 set $00
(1)   31/   E886E : =$0                 vcDL2 set $00
(1)   31/   E886E : =$0                 vcDL3 set $00
(1)   31/   E886E : =$0                 vcDL4 set $00
(1)   32/   E886E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   32/   E886E : =$F                 vcRR1 set $0F
(1)   32/   E886E : =$F                 vcRR2 set $0F
(1)   32/   E886E : =$F                 vcRR3 set $0F
(1)   32/   E886E : =$F                 vcRR4 set $0F
(1)   33/   E886E : (MACRO)             	smpsVcTotalLevel    $00, $23, $27, $29
(1)   33/   E886E : =$0                 vcTL1 set $00
(1)   33/   E886E : =$23                vcTL2 set $23
(1)   33/   E886E : =$27                vcTL3 set $27
(1)   33/   E886E : =$29                vcTL4 set $29
(1)   33/   E886E : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   33/   E886F :                     ;   0     1     2     3     4     5     6     7
(1)   33/   E886F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   33/   E886F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E886F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E886F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E886F : =$80                vcTLMask1 set $80
(1)   33/   E886F :                     
(1)   33/   E886F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E886F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E886F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E886F : =$80                vcTLMask1 set $80
(1)   33/   E886F : =$0                 vcTL1 set vcTL1&$7F
(1)   33/   E886F : =$23                vcTL2 set vcTL2&$7F
(1)   33/   E886F : =$27                vcTL3 set vcTL3&$7F
(1)   33/   E886F : =$29                vcTL4 set vcTL4&$7F
(1)   33/   E886F :                     
(1)   33/   E886F : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   33/   E8873 : 4149 3B4B                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   33/   E8877 : 0906 0908                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   33/   E887B : 0103 02A9                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   33/   E887F : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   33/   E8883 : 2927 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   34/   E8887 :                     
(1)   35/   E8887 :                     
  497/   E8887 :                        Sound4B:	include "sfx-improved/CB - Slow Smash.asm"
(1)    1/   E8887 :                     Sound4B_SlowSmash_Header:
(1)    2/   E8887 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8887 :                     
(1)    2/   E8887 : =$2                 SourceDriver set 2
(1)    2/   E8887 :                     
(1)    2/   E8887 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8887 :                     
(1)    2/   E8887 : =$E8887             songStart set *
(1)    2/   E8887 :                     
(1)    2/   E8887 :                     
(1)    3/   E8887 : (MACRO)             	smpsHeaderVoice     Sound2C_39_4B_Voices
(1)    3/   E8887 : F481                                dc.w    z80_ptr(SOUND2C_39_4B_VOICES)
(1)    4/   E8889 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8889 : 01                          dc.b    $01
(1)    5/   E888A : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E888A : 02                          dc.b    $02
(1)    6/   E888B :                     
(1)    7/   E888B : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound4B_SlowSmash_FM5,	$00, $00
(1)    7/   E888B : 8005                        dc.b    $80,CFM5
(1)    7/   E888D :  (MACRO-2)                  CheckedChannelPointer SOUND4B_SLOWSMASH_FM5
(1)    7/   E888D : 9788                                dc.w    z80_ptr(SOUND4B_SLOWSMASH_FM5)
(1)    7/   E888F : 00                                  dc.b    $00
(1)    7/   E8890 : 00                          dc.b    $00
(1)    8/   E8891 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound4B_SlowSmash_PSG3,	$00, $00
(1)    8/   E8891 : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8893 :  (MACRO-2)                  CheckedChannelPointer SOUND4B_SLOWSMASH_PSG3
(1)    8/   E8893 : A888                                dc.w    z80_ptr(SOUND4B_SLOWSMASH_PSG3)
(1)    8/   E8895 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8895 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8896 : 00                          dc.b    $00
(1)    9/   E8897 :                     
(1)   10/   E8897 :                     ; FM5 Data
(1)   11/   E8897 :                     Sound4B_SlowSmash_FM5:
(1)   12/   E8897 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8897 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8897 : EF00                                dc.b    $EF,$00
(1)   13/   E8899 : (MACRO)             	smpsModSet          $03, $01, $20, $04
(1)   13/   E8899 : F0                          dc.b    $F0
(1)   13/   E889A : 0401 2005                           dc.b    $03+1,$01,$20,(($04+1) * $01) & $FF
(1)   13/   E889E :                             ;dc.b   $01,$20,$04
(1)   14/   E889E :                     
(1)   15/   E889E :                     Sound4B_SlowSmash_Loop00:
(1)   16/   E889E : 8118                	dc.b	nC0, $18
(1)   17/   E88A0 : (MACRO)             	smpsAlterVol        $0A
(1)   17/   E88A0 : E60A                        dc.b    $E6,$0A
(1)   18/   E88A2 : (MACRO)             	smpsLoop            $00, $06, Sound4B_SlowSmash_Loop00
(1)   18/   E88A2 : F7                          dc.b    $F7
(1)   18/   E88A3 : 0006                        dc.b    $00,$06
(1)   18/   E88A5 : 9E88                                dc.w    z80_ptr(SOUND4B_SLOWSMASH_LOOP00)
(1)   19/   E88A7 : (MACRO)             	smpsStop
(1)   19/   E88A7 : F2                          dc.b    $F2
(1)   20/   E88A8 :                     
(1)   21/   E88A8 :                     ; PSG3 Data
(1)   22/   E88A8 :                     Sound4B_SlowSmash_PSG3:
(1)   23/   E88A8 : (MACRO)             	smpsModSet          $01, $01, $0F, $05
(1)   23/   E88A8 : F0                          dc.b    $F0
(1)   23/   E88A9 : 0201 0F06                           dc.b    $01+1,$01,$0F,(($05+1) * $01) & $FF
(1)   23/   E88AD :                             ;dc.b   $01,$0F,$05
(1)   24/   E88AD : (MACRO)             	smpsPSGform         $E7
(1)   24/   E88AD : F3E7                        dc.b    $F3,$E7
(1)   25/   E88AF :                     
(1)   26/   E88AF :                     Sound4B_SlowSmash_Loop01:
(1)   27/   E88AF : B018 E7             	dc.b	nB3, $18, smpsNoAttack
(1)   28/   E88B2 : (MACRO)             	smpsPSGAlterVol     $03
(1)   28/   E88B2 : EC03                        dc.b    $EC,$03
(1)   29/   E88B4 : (MACRO)             	smpsLoop            $00, $05, Sound4B_SlowSmash_Loop01
(1)   29/   E88B4 : F7                          dc.b    $F7
(1)   29/   E88B5 : 0005                        dc.b    $00,$05
(1)   29/   E88B7 : AF88                                dc.w    z80_ptr(SOUND4B_SLOWSMASH_LOOP01)
(1)   30/   E88B9 : (MACRO)             	smpsStop
(1)   30/   E88B9 : F2                          dc.b    $F2
(1)   31/   E88BA :                     
  498/   E88BA :                        Sound4C:	include "sfx-improved/CC - Spring.asm"
(1)    1/   E88BA :                     Sound4C_Spring_Header:
(1)    2/   E88BA : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E88BA :                     
(1)    2/   E88BA : =$2                 SourceDriver set 2
(1)    2/   E88BA :                     
(1)    2/   E88BA : =$0                 SourceSMPS2ASM set 0
(1)    2/   E88BA :                     
(1)    2/   E88BA : =$E88BA             songStart set *
(1)    2/   E88BA :                     
(1)    2/   E88BA :                     
(1)    3/   E88BA : (MACRO)             	smpsHeaderVoice     Sound4C_Spring_Voices
(1)    3/   E88BA : DB88                                dc.w    z80_ptr(SOUND4C_SPRING_VOICES)
(1)    4/   E88BC : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E88BC : 01                          dc.b    $01
(1)    5/   E88BD : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E88BD : 01                          dc.b    $01
(1)    6/   E88BE :                     
(1)    7/   E88BE : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound4C_Spring_FM4,	$00, $02
(1)    7/   E88BE : 8004                        dc.b    $80,CFM4
(1)    7/   E88C0 :  (MACRO-2)                  CheckedChannelPointer SOUND4C_SPRING_FM4
(1)    7/   E88C0 : C488                                dc.w    z80_ptr(SOUND4C_SPRING_FM4)
(1)    7/   E88C2 : 00                                  dc.b    $00
(1)    7/   E88C3 : 02                          dc.b    $02
(1)    8/   E88C4 :                     
(1)    9/   E88C4 :                     ; FM4 Data
(1)   10/   E88C4 :                     Sound4C_Spring_FM4:
(1)   11/   E88C4 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E88C4 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E88C4 : EF00                                dc.b    $EF,$00
(1)   12/   E88C6 : 8001                	dc.b	nRst, $01
(1)   13/   E88C8 : (MACRO)             	smpsModSet          $03, $01, $5D, $0F
(1)   13/   E88C8 : F0                          dc.b    $F0
(1)   13/   E88C9 : 0401 5D10                           dc.b    $03+1,$01,$5D,(($0F+1) * $01) & $FF
(1)   13/   E88CD :                             ;dc.b   $01,$5D,$0F
(1)   14/   E88CD : B00C                	dc.b	nB3, $0C
(1)   15/   E88CF : (MACRO)             	smpsModOff
(1)   15/   E88CF : FA                                  dc.b    $FA
(1)   16/   E88D0 :                     
(1)   17/   E88D0 :                     Sound4C_Spring_Loop00:
(1)   18/   E88D0 : E7                  	dc.b	smpsNoAttack
(1)   19/   E88D1 : (MACRO)             	smpsAlterVol        $02
(1)   19/   E88D1 : E602                        dc.b    $E6,$02
(1)   20/   E88D3 : BD02                	dc.b	nC5, $02
(1)   21/   E88D5 : (MACRO)             	smpsLoop            $00, $19, Sound4C_Spring_Loop00
(1)   21/   E88D5 : F7                          dc.b    $F7
(1)   21/   E88D6 : 0019                        dc.b    $00,$19
(1)   21/   E88D8 : D088                                dc.w    z80_ptr(SOUND4C_SPRING_LOOP00)
(1)   22/   E88DA : (MACRO)             	smpsStop
(1)   22/   E88DA : F2                          dc.b    $F2
(1)   23/   E88DB :                     
(1)   24/   E88DB :                     Sound4C_Spring_Voices:
(1)   25/   E88DB :                     ;	Voice $00
(1)   26/   E88DB :                     ;	$20
(1)   27/   E88DB :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(1)   28/   E88DB :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
(1)   29/   E88DB : (MACRO)             	smpsVcAlgorithm     $00
(1)   29/   E88DB : =$0                 vcAlgorithm set $00
(1)   30/   E88DB : (MACRO)             	smpsVcFeedback      $04
(1)   30/   E88DB : =$4                 vcFeedback set $04
(1)   31/   E88DB : (MACRO)             	smpsVcUnusedBits    $00
(1)   31/   E88DB : =$0                 vcUnusedBits set $00
(1)   31/   E88DB : =$0                 vcD1R1Unk set 0
(1)   31/   E88DB : =$0                 vcD1R2Unk set 0
(1)   31/   E88DB : =$0                 vcD1R3Unk set 0
(1)   31/   E88DB : =$0                 vcD1R4Unk set 0
(1)   32/   E88DB : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(1)   32/   E88DB : =$3                 vcDT1 set $03
(1)   32/   E88DB : =$3                 vcDT2 set $03
(1)   32/   E88DB : =$3                 vcDT3 set $03
(1)   32/   E88DB : =$3                 vcDT4 set $03
(1)   33/   E88DB : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(1)   33/   E88DB : =$1                 vcCF1 set $01
(1)   33/   E88DB : =$0                 vcCF2 set $00
(1)   33/   E88DB : =$5                 vcCF3 set $05
(1)   33/   E88DB : =$6                 vcCF4 set $06
(1)   34/   E88DB : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1)   34/   E88DB : =$2                 vcRS1 set $02
(1)   34/   E88DB : =$2                 vcRS2 set $02
(1)   34/   E88DB : =$3                 vcRS3 set $03
(1)   34/   E88DB : =$3                 vcRS4 set $03
(1)   35/   E88DB : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E88DB : =$1F                vcAR1 set $1F
(1)   35/   E88DB : =$1F                vcAR2 set $1F
(1)   35/   E88DB : =$1F                vcAR3 set $1F
(1)   35/   E88DB : =$1F                vcAR4 set $1F
(1)   36/   E88DB : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E88DB : =$0                 vcAM1 set $00<<5
(1)   36/   E88DB : =$0                 vcAM2 set $00<<5
(1)   36/   E88DB : =$0                 vcAM3 set $00<<5
(1)   36/   E88DB : =$0                 vcAM4 set $00<<5
(1)   37/   E88DB : (MACRO)             	smpsVcDecayRate1    $06, $09, $06, $07
(1)   37/   E88DB : =$6                 vcD1R1 set $06
(1)   37/   E88DB : =$9                 vcD1R2 set $09
(1)   37/   E88DB : =$6                 vcD1R3 set $06
(1)   37/   E88DB : =$7                 vcD1R4 set $07
(1)   38/   E88DB : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(1)   38/   E88DB : =$8                 vcD2R1 set $08
(1)   38/   E88DB : =$6                 vcD2R2 set $06
(1)   38/   E88DB : =$6                 vcD2R3 set $06
(1)   38/   E88DB : =$7                 vcD2R4 set $07
(1)   39/   E88DB : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(1)   39/   E88DB : =$F                 vcDL1 set $0F
(1)   39/   E88DB : =$1                 vcDL2 set $01
(1)   39/   E88DB : =$1                 vcDL3 set $01
(1)   39/   E88DB : =$2                 vcDL4 set $02
(1)   40/   E88DB : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E88DB : =$F                 vcRR1 set $0F
(1)   40/   E88DB : =$F                 vcRR2 set $0F
(1)   40/   E88DB : =$F                 vcRR3 set $0F
(1)   40/   E88DB : =$F                 vcRR4 set $0F
(1)   41/   E88DB : (MACRO)             	smpsVcTotalLevel    $00, $13, $30, $16
(1)   41/   E88DB : =$0                 vcTL1 set $00
(1)   41/   E88DB : =$13                vcTL2 set $13
(1)   41/   E88DB : =$30                vcTL3 set $30
(1)   41/   E88DB : =$16                vcTL4 set $16
(1)   41/   E88DB : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E88DC :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E88DC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E88DC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E88DC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E88DC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E88DC : =$80                vcTLMask1 set $80
(1)   41/   E88DC :                     
(1)   41/   E88DC : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E88DC : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E88DC : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E88DC : =$80                vcTLMask1 set $80
(1)   41/   E88DC : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E88DC : =$13                vcTL2 set vcTL2&$7F
(1)   41/   E88DC : =$30                vcTL3 set vcTL3&$7F
(1)   41/   E88DC : =$16                vcTL4 set vcTL4&$7F
(1)   41/   E88DC :                     
(1)   41/   E88DC : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E88E0 : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E88E4 : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E88E8 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E88EC : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E88F0 : 1630 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E88F4 :                     
(1)   43/   E88F4 :                     
  499/   E88F4 :                        Sound4D:	include "sfx-improved/CD - Switch.asm"
(1)    1/   E88F4 :                     Sound4D_Blip_Header:
(1)    2/   E88F4 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E88F4 :                     
(1)    2/   E88F4 : =$2                 SourceDriver set 2
(1)    2/   E88F4 :                     
(1)    2/   E88F4 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E88F4 :                     
(1)    2/   E88F4 : =$E88F4             songStart set *
(1)    2/   E88F4 :                     
(1)    2/   E88F4 :                     
(1)    3/   E88F4 : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E88F4 : 0000                        dc.w    $0000
(1)    4/   E88F6 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E88F6 : 01                          dc.b    $01
(1)    5/   E88F7 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E88F7 : 01                          dc.b    $01
(1)    6/   E88F8 :                     
(1)    7/   E88F8 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound4D_Blip_PSG3,	$00, $00
(1)    7/   E88F8 : 80C0                        dc.b    $80,CPSG3
(1)    7/   E88FA :  (MACRO-2)                  CheckedChannelPointer SOUND4D_BLIP_PSG3
(1)    7/   E88FA : FE88                                dc.w    z80_ptr(SOUND4D_BLIP_PSG3)
(1)    7/   E88FC :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E88FC : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E88FD : 00                          dc.b    $00
(1)    8/   E88FE :                     
(1)    9/   E88FE :                     ; PSG3 Data
(1)   10/   E88FE :                     Sound4D_Blip_PSG3:
(1)   11/   E88FE : BB02                	dc.b	nBb4, $02
(1)   12/   E8900 : (MACRO)             	smpsStop
(1)   12/   E8900 : F2                          dc.b    $F2
(1)   13/   E8901 :                     
  500/   E8901 :                        Sound4E:	include "sfx-improved/CE - Ring Left Speaker.asm"
(1)    1/   E8901 :                     Sound4E_RingLeft_Header:
(1)    2/   E8901 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8901 :                     
(1)    2/   E8901 : =$2                 SourceDriver set 2
(1)    2/   E8901 :                     
(1)    2/   E8901 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8901 :                     
(1)    2/   E8901 : =$E8901             songStart set *
(1)    2/   E8901 :                     
(1)    2/   E8901 :                     
(1)    3/   E8901 : (MACRO)             	smpsHeaderVoice     Sound_Ring_Voices
(1)    3/   E8901 : AD87                                dc.w    z80_ptr(SOUND_RING_VOICES)
(1)    4/   E8903 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8903 : 01                          dc.b    $01
(1)    5/   E8904 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8904 : 01                          dc.b    $01
(1)    6/   E8905 :                     
(1)    7/   E8905 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound4E_RingLeft_FM4,	$00, $05
(1)    7/   E8905 : 8004                        dc.b    $80,CFM4
(1)    7/   E8907 :  (MACRO-2)                  CheckedChannelPointer SOUND4E_RINGLEFT_FM4
(1)    7/   E8907 : 0B89                                dc.w    z80_ptr(SOUND4E_RINGLEFT_FM4)
(1)    7/   E8909 : 00                                  dc.b    $00
(1)    7/   E890A : 05                          dc.b    $05
(1)    8/   E890B :                     
(1)    9/   E890B :                     ; FM4 Data
(1)   10/   E890B :                     Sound4E_RingLeft_FM4:
(1)   11/   E890B : (MACRO)             	smpsSetvoice        $00
(1)   11/   E890B :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E890B : EF00                                dc.b    $EF,$00
(1)   12/   E890D : (MACRO)             	smpsPan             panLeft, $00
(1)   12/   E890D : =$0                 panNone set $00
(1)   12/   E890D : =$40                panRight set $40
(1)   12/   E890D : =$80                panLeft set $80
(1)   12/   E890D : =$C0                panCentre set $C0
(1)   12/   E890D : =$C0                panCenter set $C0 ; silly Americans :U
(1)   12/   E890D : E080                        dc.b $E0,PANLEFT+$00
(1)   13/   E890F : C104 C405 C91B      	dc.b	nE5, $04, nG5, $05, nC6, $1B
(1)   14/   E8915 : (MACRO)             	smpsStop
(1)   14/   E8915 : F2                          dc.b    $F2
(1)   15/   E8916 :                     
  501/   E8916 :                        Sound4F:	include "sfx-improved/CF - Signpost.asm"
(1)    1/   E8916 :                     Sound4F_Signpost_Header:
(1)    2/   E8916 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8916 :                     
(1)    2/   E8916 : =$2                 SourceDriver set 2
(1)    2/   E8916 :                     
(1)    2/   E8916 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8916 :                     
(1)    2/   E8916 : =$E8916             songStart set *
(1)    2/   E8916 :                     
(1)    2/   E8916 :                     
(1)    3/   E8916 : (MACRO)             	smpsHeaderVoice     Sound4F_Signpost_Voices
(1)    3/   E8916 : 3489                                dc.w    z80_ptr(SOUND4F_SIGNPOST_VOICES)
(1)    4/   E8918 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8918 : 01                          dc.b    $01
(1)    5/   E8919 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8919 : 02                          dc.b    $02
(1)    6/   E891A :                     
(1)    7/   E891A : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound4F_Signpost_FM4,	$27, $03
(1)    7/   E891A : 8004                        dc.b    $80,CFM4
(1)    7/   E891C :  (MACRO-2)                  CheckedChannelPointer SOUND4F_SIGNPOST_FM4
(1)    7/   E891C : 2689                                dc.w    z80_ptr(SOUND4F_SIGNPOST_FM4)
(1)    7/   E891E : 27                                  dc.b    $27
(1)    7/   E891F : 03                          dc.b    $03
(1)    8/   E8920 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound4F_Signpost_FM5,	$27, $00
(1)    8/   E8920 : 8005                        dc.b    $80,CFM5
(1)    8/   E8922 :  (MACRO-2)                  CheckedChannelPointer SOUND4F_SIGNPOST_FM5
(1)    8/   E8922 : 2889                                dc.w    z80_ptr(SOUND4F_SIGNPOST_FM5)
(1)    8/   E8924 : 27                                  dc.b    $27
(1)    8/   E8925 : 00                          dc.b    $00
(1)    9/   E8926 :                     
(1)   10/   E8926 :                     ; FM4 Data
(1)   11/   E8926 :                     Sound4F_Signpost_FM4:
(1)   12/   E8926 : 8004                	dc.b	nRst, $04
(1)   13/   E8928 :                     
(1)   14/   E8928 :                     ; FM5 Data
(1)   15/   E8928 :                     Sound4F_Signpost_FM5:
(1)   16/   E8928 : (MACRO)             	smpsSetvoice        $00
(1)   16/   E8928 :  (MACRO-2)                  smpsFMvoice $00
(1)   16/   E8928 : EF00                                dc.b    $EF,$00
(1)   17/   E892A :                     
(1)   18/   E892A :                     Sound4F_Signpost_Loop00:
(1)   19/   E892A : B405                	dc.b	nEb4, $05
(1)   20/   E892C : (MACRO)             	smpsAlterVol        $02
(1)   20/   E892C : E602                        dc.b    $E6,$02
(1)   21/   E892E : (MACRO)             	smpsLoop            $00, $15, Sound4F_Signpost_Loop00
(1)   21/   E892E : F7                          dc.b    $F7
(1)   21/   E892F : 0015                        dc.b    $00,$15
(1)   21/   E8931 : 2A89                                dc.w    z80_ptr(SOUND4F_SIGNPOST_LOOP00)
(1)   22/   E8933 : (MACRO)             	smpsStop
(1)   22/   E8933 : F2                          dc.b    $F2
(1)   23/   E8934 :                     
(1)   24/   E8934 :                     Sound4F_Signpost_Voices:
(1)   25/   E8934 :                     ;	Voice $00
(1)   26/   E8934 :                     ;	$F4
(1)   27/   E8934 :                     ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
(1)   28/   E8934 :                     ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $8B, $03, $80
(1)   29/   E8934 : (MACRO)             	smpsVcAlgorithm     $04
(1)   29/   E8934 : =$4                 vcAlgorithm set $04
(1)   30/   E8934 : (MACRO)             	smpsVcFeedback      $06
(1)   30/   E8934 : =$6                 vcFeedback set $06
(1)   31/   E8934 : (MACRO)             	smpsVcUnusedBits    $03
(1)   31/   E8934 : =$3                 vcUnusedBits set $03
(1)   31/   E8934 : =$0                 vcD1R1Unk set 0
(1)   31/   E8934 : =$0                 vcD1R2Unk set 0
(1)   31/   E8934 : =$0                 vcD1R3Unk set 0
(1)   31/   E8934 : =$0                 vcD1R4Unk set 0
(1)   32/   E8934 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   32/   E8934 : =$0                 vcDT1 set $00
(1)   32/   E8934 : =$0                 vcDT2 set $00
(1)   32/   E8934 : =$0                 vcDT3 set $00
(1)   32/   E8934 : =$0                 vcDT4 set $00
(1)   33/   E8934 : (MACRO)             	smpsVcCoarseFreq    $0E, $0F, $04, $06
(1)   33/   E8934 : =$E                 vcCF1 set $0E
(1)   33/   E8934 : =$F                 vcCF2 set $0F
(1)   33/   E8934 : =$4                 vcCF3 set $04
(1)   33/   E8934 : =$6                 vcCF4 set $06
(1)   34/   E8934 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E8934 : =$0                 vcRS1 set $00
(1)   34/   E8934 : =$0                 vcRS2 set $00
(1)   34/   E8934 : =$0                 vcRS3 set $00
(1)   34/   E8934 : =$0                 vcRS4 set $00
(1)   35/   E8934 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E8934 : =$1F                vcAR1 set $1F
(1)   35/   E8934 : =$1F                vcAR2 set $1F
(1)   35/   E8934 : =$1F                vcAR3 set $1F
(1)   35/   E8934 : =$1F                vcAR4 set $1F
(1)   36/   E8934 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E8934 : =$0                 vcAM1 set $00<<5
(1)   36/   E8934 : =$0                 vcAM2 set $00<<5
(1)   36/   E8934 : =$0                 vcAM3 set $00<<5
(1)   36/   E8934 : =$0                 vcAM4 set $00<<5
(1)   37/   E8934 : (MACRO)             	smpsVcDecayRate1    $0B, $0B, $00, $00
(1)   37/   E8934 : =$B                 vcD1R1 set $0B
(1)   37/   E8934 : =$B                 vcD1R2 set $0B
(1)   37/   E8934 : =$0                 vcD1R3 set $00
(1)   37/   E8934 : =$0                 vcD1R4 set $00
(1)   38/   E8934 : (MACRO)             	smpsVcDecayRate2    $08, $05, $00, $00
(1)   38/   E8934 : =$8                 vcD2R1 set $08
(1)   38/   E8934 : =$5                 vcD2R2 set $05
(1)   38/   E8934 : =$0                 vcD2R3 set $00
(1)   38/   E8934 : =$0                 vcD2R4 set $00
(1)   39/   E8934 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $00, $00
(1)   39/   E8934 : =$F                 vcDL1 set $0F
(1)   39/   E8934 : =$F                 vcDL2 set $0F
(1)   39/   E8934 : =$0                 vcDL3 set $00
(1)   39/   E8934 : =$0                 vcDL4 set $00
(1)   40/   E8934 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E8934 : =$F                 vcRR1 set $0F
(1)   40/   E8934 : =$F                 vcRR2 set $0F
(1)   40/   E8934 : =$F                 vcRR3 set $0F
(1)   40/   E8934 : =$F                 vcRR4 set $0F
(1)   41/   E8934 : (MACRO)             	smpsVcTotalLevel    $00, $03, $0B, $0C
(1)   41/   E8934 : =$0                 vcTL1 set $00
(1)   41/   E8934 : =$3                 vcTL2 set $03
(1)   41/   E8934 : =$B                 vcTL3 set $0B
(1)   41/   E8934 : =$C                 vcTL4 set $0C
(1)   41/   E8934 : F4                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E8935 :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E8935 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E8935 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8935 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8935 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8935 : =$80                vcTLMask1 set $80
(1)   41/   E8935 :                     
(1)   41/   E8935 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8935 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8935 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8935 : =$80                vcTLMask1 set $80
(1)   41/   E8935 : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E8935 : =$3                 vcTL2 set vcTL2&$7F
(1)   41/   E8935 : =$B                 vcTL3 set vcTL3&$7F
(1)   41/   E8935 : =$C                 vcTL4 set vcTL4&$7F
(1)   41/   E8935 :                     
(1)   41/   E8935 : 0604 0F0E                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E8939 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E893D : 0000 0B0B                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E8941 : 0000 0508                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E8945 : 0F0F FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E8949 : 0C8B 0380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E894D :                     
(1)   43/   E894D :                     
  502/   E894D :                        Sound50:	include "sfx-improved/D0 - CNZ Boss Zap.asm"
(1)    1/   E894D :                     Sound50_CNZBossZap_Header:
(1)    2/   E894D : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E894D :                     
(1)    2/   E894D : =$2                 SourceDriver set 2
(1)    2/   E894D :                     
(1)    2/   E894D : =$0                 SourceSMPS2ASM set 0
(1)    2/   E894D :                     
(1)    2/   E894D : =$E894D             songStart set *
(1)    2/   E894D :                     
(1)    2/   E894D :                     
(1)    3/   E894D : (MACRO)             	smpsHeaderVoice     Sound50_CNZBossZap_Voices
(1)    3/   E894D : 6789                                dc.w    z80_ptr(SOUND50_CNZBOSSZAP_VOICES)
(1)    4/   E894F : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E894F : 01                          dc.b    $01
(1)    5/   E8950 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8950 : 01                          dc.b    $01
(1)    6/   E8951 :                     
(1)    7/   E8951 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound50_CNZBossZap_FM5,	$F4, $00
(1)    7/   E8951 : 8005                        dc.b    $80,CFM5
(1)    7/   E8953 :  (MACRO-2)                  CheckedChannelPointer SOUND50_CNZBOSSZAP_FM5
(1)    7/   E8953 : 5789                                dc.w    z80_ptr(SOUND50_CNZBOSSZAP_FM5)
(1)    7/   E8955 : F4                                  dc.b    $F4
(1)    7/   E8956 : 00                          dc.b    $00
(1)    8/   E8957 :                     
(1)    9/   E8957 :                     ; FM5 Data
(1)   10/   E8957 :                     Sound50_CNZBossZap_FM5:
(1)   11/   E8957 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8957 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8957 : EF00                                dc.b    $EF,$00
(1)   12/   E8959 : B304 8001           	dc.b	nD4, $04, nRst, $01
(1)   13/   E895D :                     
(1)   14/   E895D :                     Sound50_CNZBossZap_Loop00:
(1)   15/   E895D : B404 8001           	dc.b	nEb4, $04, nRst, $01
(1)   16/   E8961 : (MACRO)             	smpsLoop            $00, $04, Sound50_CNZBossZap_Loop00
(1)   16/   E8961 : F7                          dc.b    $F7
(1)   16/   E8962 : 0004                        dc.b    $00,$04
(1)   16/   E8964 : 5D89                                dc.w    z80_ptr(SOUND50_CNZBOSSZAP_LOOP00)
(1)   17/   E8966 : (MACRO)             	smpsStop
(1)   17/   E8966 : F2                          dc.b    $F2
(1)   18/   E8967 :                     
(1)   19/   E8967 :                     Sound50_CNZBossZap_Voices:
(1)   20/   E8967 :                     ;	Voice $00
(1)   21/   E8967 :                     ;	$83
(1)   22/   E8967 :                     ;	$12, $10, $13, $1E, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   23/   E8967 :                     ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$06, $10, $34, $87
(1)   24/   E8967 : (MACRO)             	smpsVcAlgorithm     $03
(1)   24/   E8967 : =$3                 vcAlgorithm set $03
(1)   25/   E8967 : (MACRO)             	smpsVcFeedback      $00
(1)   25/   E8967 : =$0                 vcFeedback set $00
(1)   26/   E8967 : (MACRO)             	smpsVcUnusedBits    $02
(1)   26/   E8967 : =$2                 vcUnusedBits set $02
(1)   26/   E8967 : =$0                 vcD1R1Unk set 0
(1)   26/   E8967 : =$0                 vcD1R2Unk set 0
(1)   26/   E8967 : =$0                 vcD1R3Unk set 0
(1)   26/   E8967 : =$0                 vcD1R4Unk set 0
(1)   27/   E8967 : (MACRO)             	smpsVcDetune        $01, $01, $01, $01
(1)   27/   E8967 : =$1                 vcDT1 set $01
(1)   27/   E8967 : =$1                 vcDT2 set $01
(1)   27/   E8967 : =$1                 vcDT3 set $01
(1)   27/   E8967 : =$1                 vcDT4 set $01
(1)   28/   E8967 : (MACRO)             	smpsVcCoarseFreq    $0E, $03, $00, $02
(1)   28/   E8967 : =$E                 vcCF1 set $0E
(1)   28/   E8967 : =$3                 vcCF2 set $03
(1)   28/   E8967 : =$0                 vcCF3 set $00
(1)   28/   E8967 : =$2                 vcCF4 set $02
(1)   29/   E8967 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   29/   E8967 : =$0                 vcRS1 set $00
(1)   29/   E8967 : =$0                 vcRS2 set $00
(1)   29/   E8967 : =$0                 vcRS3 set $00
(1)   29/   E8967 : =$0                 vcRS4 set $00
(1)   30/   E8967 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   30/   E8967 : =$1F                vcAR1 set $1F
(1)   30/   E8967 : =$1F                vcAR2 set $1F
(1)   30/   E8967 : =$1F                vcAR3 set $1F
(1)   30/   E8967 : =$1F                vcAR4 set $1F
(1)   31/   E8967 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   31/   E8967 : =$0                 vcAM1 set $00<<5
(1)   31/   E8967 : =$0                 vcAM2 set $00<<5
(1)   31/   E8967 : =$0                 vcAM3 set $00<<5
(1)   31/   E8967 : =$0                 vcAM4 set $00<<5
(1)   32/   E8967 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   32/   E8967 : =$0                 vcD1R1 set $00
(1)   32/   E8967 : =$0                 vcD1R2 set $00
(1)   32/   E8967 : =$0                 vcD1R3 set $00
(1)   32/   E8967 : =$0                 vcD1R4 set $00
(1)   33/   E8967 : (MACRO)             	smpsVcDecayRate2    $02, $02, $02, $02
(1)   33/   E8967 : =$2                 vcD2R1 set $02
(1)   33/   E8967 : =$2                 vcD2R2 set $02
(1)   33/   E8967 : =$2                 vcD2R3 set $02
(1)   33/   E8967 : =$2                 vcD2R4 set $02
(1)   34/   E8967 : (MACRO)             	smpsVcDecayLevel    $03, $0F, $02, $02
(1)   34/   E8967 : =$3                 vcDL1 set $03
(1)   34/   E8967 : =$F                 vcDL2 set $0F
(1)   34/   E8967 : =$2                 vcDL3 set $02
(1)   34/   E8967 : =$2                 vcDL4 set $02
(1)   35/   E8967 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   35/   E8967 : =$F                 vcRR1 set $0F
(1)   35/   E8967 : =$F                 vcRR2 set $0F
(1)   35/   E8967 : =$F                 vcRR3 set $0F
(1)   35/   E8967 : =$F                 vcRR4 set $0F
(1)   36/   E8967 : (MACRO)             	smpsVcTotalLevel    $07, $34, $10, $06
(1)   36/   E8967 : =$7                 vcTL1 set $07
(1)   36/   E8967 : =$34                vcTL2 set $34
(1)   36/   E8967 : =$10                vcTL3 set $10
(1)   36/   E8967 : =$6                 vcTL4 set $06
(1)   36/   E8967 : 83                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   36/   E8968 :                     ;   0     1     2     3     4     5     6     7
(1)   36/   E8968 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   36/   E8968 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   36/   E8968 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   36/   E8968 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   36/   E8968 : =$80                vcTLMask1 set $80
(1)   36/   E8968 :                     
(1)   36/   E8968 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   36/   E8968 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   36/   E8968 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   36/   E8968 : =$80                vcTLMask1 set $80
(1)   36/   E8968 : =$7                 vcTL1 set vcTL1&$7F
(1)   36/   E8968 : =$34                vcTL2 set vcTL2&$7F
(1)   36/   E8968 : =$10                vcTL3 set vcTL3&$7F
(1)   36/   E8968 : =$6                 vcTL4 set vcTL4&$7F
(1)   36/   E8968 :                     
(1)   36/   E8968 : 1210 131E                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   36/   E896C : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   36/   E8970 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   36/   E8974 : 0202 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   36/   E8978 : 2F2F FF3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   36/   E897C : 0610 3487                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   37/   E8980 :                     
(1)   38/   E8980 :                     
  503/   E8980 :                        Sound51:	include "sfx-improved/D1 - Unknown (Unused).asm"
(1)    1/   E8980 :                     Sound51_Header:
(1)    2/   E8980 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8980 :                     
(1)    2/   E8980 : =$2                 SourceDriver set 2
(1)    2/   E8980 :                     
(1)    2/   E8980 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8980 :                     
(1)    2/   E8980 : =$E8980             songStart set *
(1)    2/   E8980 :                     
(1)    2/   E8980 :                     
(1)    3/   E8980 : (MACRO)             	smpsHeaderVoice     Sound51_Voices
(1)    3/   E8980 : A089                                dc.w    z80_ptr(SOUND51_VOICES)
(1)    4/   E8982 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8982 : 01                          dc.b    $01
(1)    5/   E8983 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8983 : 02                          dc.b    $02
(1)    6/   E8984 :                     
(1)    7/   E8984 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound51_PSG3,	$00, $01
(1)    7/   E8984 : 80C0                        dc.b    $80,CPSG3
(1)    7/   E8986 :  (MACRO-2)                  CheckedChannelPointer SOUND51_PSG3
(1)    7/   E8986 : 9089                                dc.w    z80_ptr(SOUND51_PSG3)
(1)    7/   E8988 :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E8988 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8989 : 01                          dc.b    $01
(1)    8/   E898A : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound51_FM5,	$00, $0B
(1)    8/   E898A : 8005                        dc.b    $80,CFM5
(1)    8/   E898C :  (MACRO-2)                  CheckedChannelPointer SOUND51_FM5
(1)    8/   E898C : 9989                                dc.w    z80_ptr(SOUND51_FM5)
(1)    8/   E898E : 00                                  dc.b    $00
(1)    8/   E898F : 0B                          dc.b    $0B
(1)    9/   E8990 :                     
(1)   10/   E8990 :                     ; PSG3 Data
(1)   11/   E8990 :                     Sound51_PSG3:
(1)   12/   E8990 : (MACRO)             	smpsPSGvoice        fTone_02
(1)   12/   E8990 : F502                        dc.b    $F5,FTONE_02
(1)   13/   E8992 : (MACRO)             	smpsPSGform         $E4
(1)   13/   E8992 : F3E4                        dc.b    $F3,$E4
(1)   14/   E8994 : B004 8502           	dc.b	nB3, $04, nE0, $02
(1)   15/   E8998 : (MACRO)             	smpsStop
(1)   15/   E8998 : F2                          dc.b    $F2
(1)   16/   E8999 :                     
(1)   17/   E8999 :                     ; FM5 Data
(1)   18/   E8999 :                     Sound51_FM5:
(1)   19/   E8999 : (MACRO)             	smpsSetvoice        $00
(1)   19/   E8999 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   E8999 : EF00                                dc.b    $EF,$00
(1)   20/   E899B : (MACRO)             	smpsNoteFill        $04
Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it.
(1)   20/   E899B :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   20/   E899B : E804                                dc.b    $E8,$04
(1)   21/   E899D : A506                	dc.b	nC3, $06
(1)   22/   E899F : (MACRO)             	smpsStop
(1)   22/   E899F : F2                          dc.b    $F2
(1)   23/   E89A0 :                     
(1)   24/   E89A0 :                     Sound51_Voices:
(1)   25/   E89A0 :                     ;	Voice $00
(1)   26/   E89A0 :                     ;	$3C
(1)   27/   E89A0 :                     ;	$02, $00, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $0E, $19, $10
(1)   28/   E89A0 :                     ;	$00, $0C, $00, $0F, 	$0F, $EF, $FF, $FF, 	$05, $80, $00, $80
(1)   29/   E89A0 : (MACRO)             	smpsVcAlgorithm     $04
(1)   29/   E89A0 : =$4                 vcAlgorithm set $04
(1)   30/   E89A0 : (MACRO)             	smpsVcFeedback      $07
(1)   30/   E89A0 : =$7                 vcFeedback set $07
(1)   31/   E89A0 : (MACRO)             	smpsVcUnusedBits    $00
(1)   31/   E89A0 : =$0                 vcUnusedBits set $00
(1)   31/   E89A0 : =$0                 vcD1R1Unk set 0
(1)   31/   E89A0 : =$0                 vcD1R2Unk set 0
(1)   31/   E89A0 : =$0                 vcD1R3Unk set 0
(1)   31/   E89A0 : =$0                 vcD1R4Unk set 0
(1)   32/   E89A0 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   32/   E89A0 : =$0                 vcDT1 set $00
(1)   32/   E89A0 : =$0                 vcDT2 set $00
(1)   32/   E89A0 : =$0                 vcDT3 set $00
(1)   32/   E89A0 : =$0                 vcDT4 set $00
(1)   33/   E89A0 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $00, $02
(1)   33/   E89A0 : =$1                 vcCF1 set $01
(1)   33/   E89A0 : =$1                 vcCF2 set $01
(1)   33/   E89A0 : =$0                 vcCF3 set $00
(1)   33/   E89A0 : =$2                 vcCF4 set $02
(1)   34/   E89A0 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E89A0 : =$0                 vcRS1 set $00
(1)   34/   E89A0 : =$0                 vcRS2 set $00
(1)   34/   E89A0 : =$0                 vcRS3 set $00
(1)   34/   E89A0 : =$0                 vcRS4 set $00
(1)   35/   E89A0 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E89A0 : =$1F                vcAR1 set $1F
(1)   35/   E89A0 : =$1F                vcAR2 set $1F
(1)   35/   E89A0 : =$1F                vcAR3 set $1F
(1)   35/   E89A0 : =$1F                vcAR4 set $1F
(1)   36/   E89A0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E89A0 : =$0                 vcAM1 set $00<<5
(1)   36/   E89A0 : =$0                 vcAM2 set $00<<5
(1)   36/   E89A0 : =$0                 vcAM3 set $00<<5
(1)   36/   E89A0 : =$0                 vcAM4 set $00<<5
(1)   37/   E89A0 : (MACRO)             	smpsVcDecayRate1    $10, $19, $0E, $00
(1)   37/   E89A0 : =$10                vcD1R1 set $10
(1)   37/   E89A0 : =$19                vcD1R2 set $19
(1)   37/   E89A0 : =$E                 vcD1R3 set $0E
(1)   37/   E89A0 : =$0                 vcD1R4 set $00
(1)   38/   E89A0 : (MACRO)             	smpsVcDecayRate2    $0F, $00, $0C, $00
(1)   38/   E89A0 : =$F                 vcD2R1 set $0F
(1)   38/   E89A0 : =$0                 vcD2R2 set $00
(1)   38/   E89A0 : =$C                 vcD2R3 set $0C
(1)   38/   E89A0 : =$0                 vcD2R4 set $00
(1)   39/   E89A0 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0E, $00
(1)   39/   E89A0 : =$F                 vcDL1 set $0F
(1)   39/   E89A0 : =$F                 vcDL2 set $0F
(1)   39/   E89A0 : =$E                 vcDL3 set $0E
(1)   39/   E89A0 : =$0                 vcDL4 set $00
(1)   40/   E89A0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E89A0 : =$F                 vcRR1 set $0F
(1)   40/   E89A0 : =$F                 vcRR2 set $0F
(1)   40/   E89A0 : =$F                 vcRR3 set $0F
(1)   40/   E89A0 : =$F                 vcRR4 set $0F
(1)   41/   E89A0 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $05
(1)   41/   E89A0 : =$0                 vcTL1 set $00
(1)   41/   E89A0 : =$0                 vcTL2 set $00
(1)   41/   E89A0 : =$0                 vcTL3 set $00
(1)   41/   E89A0 : =$5                 vcTL4 set $05
(1)   41/   E89A0 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E89A1 :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E89A1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E89A1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E89A1 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E89A1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E89A1 : =$80                vcTLMask1 set $80
(1)   41/   E89A1 :                     
(1)   41/   E89A1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E89A1 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E89A1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E89A1 : =$80                vcTLMask1 set $80
(1)   41/   E89A1 : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E89A1 : =$0                 vcTL2 set vcTL2&$7F
(1)   41/   E89A1 : =$0                 vcTL3 set vcTL3&$7F
(1)   41/   E89A1 : =$5                 vcTL4 set vcTL4&$7F
(1)   41/   E89A1 :                     
(1)   41/   E89A1 : 0200 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E89A5 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E89A9 : 000E 1910                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E89AD : 000C 000F                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E89B1 : 0FEF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E89B5 : 0580 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E89B9 :                     
(1)   43/   E89B9 :                     
  504/   E89B9 :                        Sound52:	include "sfx-improved/D2 - Unknown (Unused).asm"
(1)    1/   E89B9 :                     Sound52_Header:
(1)    2/   E89B9 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E89B9 :                     
(1)    2/   E89B9 : =$2                 SourceDriver set 2
(1)    2/   E89B9 :                     
(1)    2/   E89B9 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E89B9 :                     
(1)    2/   E89B9 : =$E89B9             songStart set *
(1)    2/   E89B9 :                     
(1)    2/   E89B9 :                     
(1)    3/   E89B9 : (MACRO)             	smpsHeaderVoice     Sound52_Voices
(1)    3/   E89B9 : DD89                                dc.w    z80_ptr(SOUND52_VOICES)
(1)    4/   E89BB : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E89BB : 01                          dc.b    $01
(1)    5/   E89BC : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E89BC : 01                          dc.b    $01
(1)    6/   E89BD :                     
(1)    7/   E89BD : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound52_FM5,	$00, $02
(1)    7/   E89BD : 8005                        dc.b    $80,CFM5
(1)    7/   E89BF :  (MACRO-2)                  CheckedChannelPointer SOUND52_FM5
(1)    7/   E89BF : C389                                dc.w    z80_ptr(SOUND52_FM5)
(1)    7/   E89C1 : 00                                  dc.b    $00
(1)    7/   E89C2 : 02                          dc.b    $02
(1)    8/   E89C3 :                     
(1)    9/   E89C3 :                     ; FM5 Data
(1)   10/   E89C3 :                     Sound52_FM5:
(1)   11/   E89C3 : (MACRO)             	smpsModSet          $01, $01, $2A, $07
(1)   11/   E89C3 : F0                          dc.b    $F0
(1)   11/   E89C4 : 0201 2A08                           dc.b    $01+1,$01,$2A,(($07+1) * $01) & $FF
(1)   11/   E89C8 :                             ;dc.b   $01,$2A,$07
(1)   12/   E89C8 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E89C8 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E89C8 : EF00                                dc.b    $EF,$00
(1)   13/   E89CA :                     
(1)   14/   E89CA :                     Sound52_Loop00:
(1)   15/   E89CA : A503 E7             	dc.b	nC3, $03, smpsNoAttack
(1)   16/   E89CD : (MACRO)             	smpsLoop            $00, $13, Sound52_Loop00
(1)   16/   E89CD : F7                          dc.b    $F7
(1)   16/   E89CE : 0013                        dc.b    $00,$13
(1)   16/   E89D0 : CA89                                dc.w    z80_ptr(SOUND52_LOOP00)
(1)   17/   E89D2 :                     
(1)   18/   E89D2 :                     Sound52_Loop01:
(1)   19/   E89D2 : A503 E7             	dc.b	nC3, $03, smpsNoAttack
(1)   20/   E89D5 : (MACRO)             	smpsAlterVol        $02
(1)   20/   E89D5 : E602                        dc.b    $E6,$02
(1)   21/   E89D7 : (MACRO)             	smpsLoop            $00, $13, Sound52_Loop01
(1)   21/   E89D7 : F7                          dc.b    $F7
(1)   21/   E89D8 : 0013                        dc.b    $00,$13
(1)   21/   E89DA : D289                                dc.w    z80_ptr(SOUND52_LOOP01)
(1)   22/   E89DC : (MACRO)             	smpsStop
(1)   22/   E89DC : F2                          dc.b    $F2
(1)   23/   E89DD :                     
(1)   24/   E89DD :                     Sound52_Voices:
(1)   25/   E89DD :                     ;	Voice $00
(1)   26/   E89DD :                     ;	$28
(1)   27/   E89DD :                     ;	$21, $21, $21, $30, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   28/   E89DD :                     ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$29, $29, $20, $80
(1)   29/   E89DD : (MACRO)             	smpsVcAlgorithm     $00
(1)   29/   E89DD : =$0                 vcAlgorithm set $00
(1)   30/   E89DD : (MACRO)             	smpsVcFeedback      $05
(1)   30/   E89DD : =$5                 vcFeedback set $05
(1)   31/   E89DD : (MACRO)             	smpsVcUnusedBits    $00
(1)   31/   E89DD : =$0                 vcUnusedBits set $00
(1)   31/   E89DD : =$0                 vcD1R1Unk set 0
(1)   31/   E89DD : =$0                 vcD1R2Unk set 0
(1)   31/   E89DD : =$0                 vcD1R3Unk set 0
(1)   31/   E89DD : =$0                 vcD1R4Unk set 0
(1)   32/   E89DD : (MACRO)             	smpsVcDetune        $03, $02, $02, $02
(1)   32/   E89DD : =$3                 vcDT1 set $03
(1)   32/   E89DD : =$2                 vcDT2 set $02
(1)   32/   E89DD : =$2                 vcDT3 set $02
(1)   32/   E89DD : =$2                 vcDT4 set $02
(1)   33/   E89DD : (MACRO)             	smpsVcCoarseFreq    $00, $01, $01, $01
(1)   33/   E89DD : =$0                 vcCF1 set $00
(1)   33/   E89DD : =$1                 vcCF2 set $01
(1)   33/   E89DD : =$1                 vcCF3 set $01
(1)   33/   E89DD : =$1                 vcCF4 set $01
(1)   34/   E89DD : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E89DD : =$0                 vcRS1 set $00
(1)   34/   E89DD : =$0                 vcRS2 set $00
(1)   34/   E89DD : =$0                 vcRS3 set $00
(1)   34/   E89DD : =$0                 vcRS4 set $00
(1)   35/   E89DD : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E89DD : =$1F                vcAR1 set $1F
(1)   35/   E89DD : =$1F                vcAR2 set $1F
(1)   35/   E89DD : =$1F                vcAR3 set $1F
(1)   35/   E89DD : =$1F                vcAR4 set $1F
(1)   36/   E89DD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E89DD : =$0                 vcAM1 set $00<<5
(1)   36/   E89DD : =$0                 vcAM2 set $00<<5
(1)   36/   E89DD : =$0                 vcAM3 set $00<<5
(1)   36/   E89DD : =$0                 vcAM4 set $00<<5
(1)   37/   E89DD : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   37/   E89DD : =$0                 vcD1R1 set $00
(1)   37/   E89DD : =$0                 vcD1R2 set $00
(1)   37/   E89DD : =$0                 vcD1R3 set $00
(1)   37/   E89DD : =$0                 vcD1R4 set $00
(1)   38/   E89DD : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   38/   E89DD : =$0                 vcD2R1 set $00
(1)   38/   E89DD : =$0                 vcD2R2 set $00
(1)   38/   E89DD : =$0                 vcD2R3 set $00
(1)   38/   E89DD : =$0                 vcD2R4 set $00
(1)   39/   E89DD : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   39/   E89DD : =$F                 vcDL1 set $0F
(1)   39/   E89DD : =$F                 vcDL2 set $0F
(1)   39/   E89DD : =$F                 vcDL3 set $0F
(1)   39/   E89DD : =$F                 vcDL4 set $0F
(1)   40/   E89DD : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E89DD : =$F                 vcRR1 set $0F
(1)   40/   E89DD : =$F                 vcRR2 set $0F
(1)   40/   E89DD : =$F                 vcRR3 set $0F
(1)   40/   E89DD : =$F                 vcRR4 set $0F
(1)   41/   E89DD : (MACRO)             	smpsVcTotalLevel    $00, $20, $29, $29
(1)   41/   E89DD : =$0                 vcTL1 set $00
(1)   41/   E89DD : =$20                vcTL2 set $20
(1)   41/   E89DD : =$29                vcTL3 set $29
(1)   41/   E89DD : =$29                vcTL4 set $29
(1)   41/   E89DD : 28                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E89DE :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E89DE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E89DE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E89DE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E89DE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E89DE : =$80                vcTLMask1 set $80
(1)   41/   E89DE :                     
(1)   41/   E89DE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E89DE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E89DE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E89DE : =$80                vcTLMask1 set $80
(1)   41/   E89DE : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E89DE : =$20                vcTL2 set vcTL2&$7F
(1)   41/   E89DE : =$29                vcTL3 set vcTL3&$7F
(1)   41/   E89DE : =$29                vcTL4 set vcTL4&$7F
(1)   41/   E89DE :                     
(1)   41/   E89DE : 2121 2130                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E89E2 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E89E6 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E89EA : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E89EE : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E89F2 : 2929 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E89F6 :                     
(1)   43/   E89F6 :                     
  505/   E89F6 :                        Sound53:	include "sfx-improved/D3 - Signpost 2P.asm"
(1)    1/   E89F6 :                     Sound53_Signpost2P_Header:
(1)    2/   E89F6 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E89F6 :                     
(1)    2/   E89F6 : =$2                 SourceDriver set 2
(1)    2/   E89F6 :                     
(1)    2/   E89F6 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E89F6 :                     
(1)    2/   E89F6 : =$E89F6             songStart set *
(1)    2/   E89F6 :                     
(1)    2/   E89F6 :                     
(1)    3/   E89F6 : (MACRO)             	smpsHeaderVoice     Sound53_Signpost2P_Voices
(1)    3/   E89F6 : 1C8A                                dc.w    z80_ptr(SOUND53_SIGNPOST2P_VOICES)
(1)    4/   E89F8 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E89F8 : 01                          dc.b    $01
(1)    5/   E89F9 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E89F9 : 01                          dc.b    $01
(1)    6/   E89FA :                     
(1)    7/   E89FA : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound53_Signpost2P_FM5,	$F5, $03
(1)    7/   E89FA : 8005                        dc.b    $80,CFM5
(1)    7/   E89FC :  (MACRO-2)                  CheckedChannelPointer SOUND53_SIGNPOST2P_FM5
(1)    7/   E89FC : 008A                                dc.w    z80_ptr(SOUND53_SIGNPOST2P_FM5)
(1)    7/   E89FE : F5                                  dc.b    $F5
(1)    7/   E89FF : 03                          dc.b    $03
(1)    8/   E8A00 :                     
(1)    9/   E8A00 :                     ; FM5 Data
(1)   10/   E8A00 :                     Sound53_Signpost2P_FM5:
(1)   11/   E8A00 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8A00 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8A00 : EF00                                dc.b    $EF,$00
(1)   12/   E8A02 : (MACRO)             	smpsModSet          $01, $01, $46, $09
(1)   12/   E8A02 : F0                          dc.b    $F0
(1)   12/   E8A03 : 0201 460A                           dc.b    $01+1,$01,$46,(($09+1) * $01) & $FF
(1)   12/   E8A07 :                             ;dc.b   $01,$46,$09
(1)   13/   E8A07 : A714 E714 E7        	dc.b	nD3, $14, smpsNoAttack, $14, smpsNoAttack
(1)   14/   E8A0C : (MACRO)             	smpsAlterVol        $04
(1)   14/   E8A0C : E604                        dc.b    $E6,$04
(1)   15/   E8A0E : 14E7                	dc.b	$14, smpsNoAttack
(1)   16/   E8A10 : (MACRO)             	smpsAlterVol        $04
(1)   16/   E8A10 : E604                        dc.b    $E6,$04
(1)   17/   E8A12 : 14E7                	dc.b	$14, smpsNoAttack
(1)   18/   E8A14 : (MACRO)             	smpsAlterVol        $04
(1)   18/   E8A14 : E604                        dc.b    $E6,$04
(1)   19/   E8A16 : 0AE7                	dc.b	$0A, smpsNoAttack
(1)   20/   E8A18 : (MACRO)             	smpsAlterVol        $04
(1)   20/   E8A18 : E604                        dc.b    $E6,$04
(1)   21/   E8A1A : 0A                  	dc.b	$0A
(1)   22/   E8A1B : (MACRO)             	smpsStop
(1)   22/   E8A1B : F2                          dc.b    $F2
(1)   23/   E8A1C :                     
(1)   24/   E8A1C :                     Sound53_Signpost2P_Voices:
(1)   25/   E8A1C :                     ;	Voice $00
(1)   26/   E8A1C :                     ;	$07
(1)   27/   E8A1C :                     ;	$0A, $0C, $0C, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   28/   E8A1C :                     ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$2A, $0F, $0F, $80
(1)   29/   E8A1C : (MACRO)             	smpsVcAlgorithm     $07
(1)   29/   E8A1C : =$7                 vcAlgorithm set $07
(1)   30/   E8A1C : (MACRO)             	smpsVcFeedback      $00
(1)   30/   E8A1C : =$0                 vcFeedback set $00
(1)   31/   E8A1C : (MACRO)             	smpsVcUnusedBits    $00
(1)   31/   E8A1C : =$0                 vcUnusedBits set $00
(1)   31/   E8A1C : =$0                 vcD1R1Unk set 0
(1)   31/   E8A1C : =$0                 vcD1R2Unk set 0
(1)   31/   E8A1C : =$0                 vcD1R3Unk set 0
(1)   31/   E8A1C : =$0                 vcD1R4Unk set 0
(1)   32/   E8A1C : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   32/   E8A1C : =$0                 vcDT1 set $00
(1)   32/   E8A1C : =$0                 vcDT2 set $00
(1)   32/   E8A1C : =$0                 vcDT3 set $00
(1)   32/   E8A1C : =$0                 vcDT4 set $00
(1)   33/   E8A1C : (MACRO)             	smpsVcCoarseFreq    $0C, $0C, $0C, $0A
(1)   33/   E8A1C : =$C                 vcCF1 set $0C
(1)   33/   E8A1C : =$C                 vcCF2 set $0C
(1)   33/   E8A1C : =$C                 vcCF3 set $0C
(1)   33/   E8A1C : =$A                 vcCF4 set $0A
(1)   34/   E8A1C : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   E8A1C : =$0                 vcRS1 set $00
(1)   34/   E8A1C : =$0                 vcRS2 set $00
(1)   34/   E8A1C : =$0                 vcRS3 set $00
(1)   34/   E8A1C : =$0                 vcRS4 set $00
(1)   35/   E8A1C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   E8A1C : =$1F                vcAR1 set $1F
(1)   35/   E8A1C : =$1F                vcAR2 set $1F
(1)   35/   E8A1C : =$1F                vcAR3 set $1F
(1)   35/   E8A1C : =$1F                vcAR4 set $1F
(1)   36/   E8A1C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E8A1C : =$0                 vcAM1 set $00<<7
(1)   36/   E8A1C : =$0                 vcAM2 set $00<<7
(1)   36/   E8A1C : =$0                 vcAM3 set $00<<7
(1)   36/   E8A1C : =$0                 vcAM4 set $00<<7
(1)   37/   E8A1C : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   37/   E8A1C : =$0                 vcD1R1 set $00
(1)   37/   E8A1C : =$0                 vcD1R2 set $00
(1)   37/   E8A1C : =$0                 vcD1R3 set $00
(1)   37/   E8A1C : =$0                 vcD1R4 set $00
(1)   38/   E8A1C : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   38/   E8A1C : =$0                 vcD2R1 set $00
(1)   38/   E8A1C : =$0                 vcD2R2 set $00
(1)   38/   E8A1C : =$0                 vcD2R3 set $00
(1)   38/   E8A1C : =$0                 vcD2R4 set $00
(1)   39/   E8A1C : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   39/   E8A1C : =$F                 vcDL1 set $0F
(1)   39/   E8A1C : =$F                 vcDL2 set $0F
(1)   39/   E8A1C : =$F                 vcDL3 set $0F
(1)   39/   E8A1C : =$F                 vcDL4 set $0F
(1)   40/   E8A1C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E8A1C : =$F                 vcRR1 set $0F
(1)   40/   E8A1C : =$F                 vcRR2 set $0F
(1)   40/   E8A1C : =$F                 vcRR3 set $0F
(1)   40/   E8A1C : =$F                 vcRR4 set $0F
(1)   41/   E8A1C : (MACRO)             	smpsVcTotalLevel    $80, $0F, $0F, $2A
(1)   41/   E8A1C : =$80                vcTL1 set $80
(1)   41/   E8A1C : =$F                 vcTL2 set $0F
(1)   41/   E8A1C : =$F                 vcTL3 set $0F
(1)   41/   E8A1C : =$2A                vcTL4 set $2A
(1)   41/   E8A1C : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E8A1D :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E8A1D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E8A1D : =$0                 vcTLMask4 set 0
(1)   41/   E8A1D : =$0                 vcTLMask3 set 0
(1)   41/   E8A1D : =$0                 vcTLMask2 set 0
(1)   41/   E8A1D : =$0                 vcTLMask1 set 0
(1)   41/   E8A1D :                     
(1)   41/   E8A1D : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8A1D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8A1D : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8A1D : =$80                vcTLMask1 set $80
(1)   41/   E8A1D : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E8A1D : =$F                 vcTL2 set vcTL2&$7F
(1)   41/   E8A1D : =$F                 vcTL3 set vcTL3&$7F
(1)   41/   E8A1D : =$2A                vcTL4 set vcTL4&$7F
(1)   41/   E8A1D :                     
(1)   41/   E8A1D : 0A0C 0C0C                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E8A21 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E8A25 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E8A29 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E8A2D : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E8A31 : AA8F 8F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E8A35 :                     
(1)   43/   E8A35 :                     
  506/   E8A35 :                        Sound54:	include "sfx-improved/D4 - OOZ Lid Pop.asm"
(1)    1/   E8A35 :                     Sound54_OOZLidPop_Header:
(1)    2/   E8A35 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8A35 :                     
(1)    2/   E8A35 : =$2                 SourceDriver set 2
(1)    2/   E8A35 :                     
(1)    2/   E8A35 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8A35 :                     
(1)    2/   E8A35 : =$E8A35             songStart set *
(1)    2/   E8A35 :                     
(1)    2/   E8A35 :                     
(1)    3/   E8A35 : (MACRO)             	smpsHeaderVoice     Sound54_OOZLidPop_Voices
(1)    3/   E8A35 : 5D8A                                dc.w    z80_ptr(SOUND54_OOZLIDPOP_VOICES)
(1)    4/   E8A37 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8A37 : 01                          dc.b    $01
(1)    5/   E8A38 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8A38 : 02                          dc.b    $02
(1)    6/   E8A39 :                     
(1)    7/   E8A39 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound54_OOZLidPop_FM5,	$00, $00
(1)    7/   E8A39 : 8005                        dc.b    $80,CFM5
(1)    7/   E8A3B :  (MACRO-2)                  CheckedChannelPointer SOUND54_OOZLIDPOP_FM5
(1)    7/   E8A3B : 458A                                dc.w    z80_ptr(SOUND54_OOZLIDPOP_FM5)
(1)    7/   E8A3D : 00                                  dc.b    $00
(1)    7/   E8A3E : 00                          dc.b    $00
(1)    8/   E8A3F : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound54_OOZLidPop_PSG3,	$00, $06
(1)    8/   E8A3F : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8A41 :  (MACRO-2)                  CheckedChannelPointer SOUND54_OOZLIDPOP_PSG3
(1)    8/   E8A41 : 4A8A                                dc.w    z80_ptr(SOUND54_OOZLIDPOP_PSG3)
(1)    8/   E8A43 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8A43 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8A44 : 06                          dc.b    $06
(1)    9/   E8A45 :                     
(1)   10/   E8A45 :                     ; FM5 Data
(1)   11/   E8A45 :                     Sound54_OOZLidPop_FM5:
(1)   12/   E8A45 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8A45 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8A45 : EF00                                dc.b    $EF,$00
(1)   13/   E8A47 : B615                	dc.b	nF4, $15
(1)   14/   E8A49 : (MACRO)             	smpsStop
(1)   14/   E8A49 : F2                          dc.b    $F2
(1)   15/   E8A4A :                     
(1)   16/   E8A4A :                     ; PSG3 Data
(1)   17/   E8A4A :                     Sound54_OOZLidPop_PSG3:
(1)   18/   E8A4A : (MACRO)             	smpsPSGform         $E7
(1)   18/   E8A4A : F3E7                        dc.b    $F3,$E7
(1)   19/   E8A4C : (MACRO)             	smpsPSGvoice        fTone_04
(1)   19/   E8A4C : F504                        dc.b    $F5,FTONE_04
(1)   20/   E8A4E : C703 E7C5 E7C4 E7C3 	dc.b	nMaxPSG, $03, smpsNoAttack, nAb5, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack, nE5
            E8A56 : E7C2 E7C1         
(1)   21/   E8A5A : E7C0                	dc.b	smpsNoAttack, nEb5
(1)   22/   E8A5C : (MACRO)             	smpsStop
(1)   22/   E8A5C : F2                          dc.b    $F2
(1)   23/   E8A5D :                     
(1)   24/   E8A5D :                     Sound54_OOZLidPop_Voices:
(1)   25/   E8A5D :                     ;	Voice $00
(1)   26/   E8A5D :                     ;	$07
(1)   27/   E8A5D :                     ;	$03, $03, $02, $00, 	$FF, $6F, $6F, $3F, 	$12, $11, $14, $0E
(1)   28/   E8A5D :                     ;	$1A, $03, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$03, $07, $07, $80
(1)   29/   E8A5D : (MACRO)             	smpsVcAlgorithm     $07
(1)   29/   E8A5D : =$7                 vcAlgorithm set $07
(1)   30/   E8A5D : (MACRO)             	smpsVcFeedback      $00
(1)   30/   E8A5D : =$0                 vcFeedback set $00
(1)   31/   E8A5D : (MACRO)             	smpsVcUnusedBits    $00
(1)   31/   E8A5D : =$0                 vcUnusedBits set $00
(1)   31/   E8A5D : =$0                 vcD1R1Unk set 0
(1)   31/   E8A5D : =$0                 vcD1R2Unk set 0
(1)   31/   E8A5D : =$0                 vcD1R3Unk set 0
(1)   31/   E8A5D : =$0                 vcD1R4Unk set 0
(1)   32/   E8A5D : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   32/   E8A5D : =$0                 vcDT1 set $00
(1)   32/   E8A5D : =$0                 vcDT2 set $00
(1)   32/   E8A5D : =$0                 vcDT3 set $00
(1)   32/   E8A5D : =$0                 vcDT4 set $00
(1)   33/   E8A5D : (MACRO)             	smpsVcCoarseFreq    $00, $02, $03, $03
(1)   33/   E8A5D : =$0                 vcCF1 set $00
(1)   33/   E8A5D : =$2                 vcCF2 set $02
(1)   33/   E8A5D : =$3                 vcCF3 set $03
(1)   33/   E8A5D : =$3                 vcCF4 set $03
(1)   34/   E8A5D : (MACRO)             	smpsVcRateScale     $00, $01, $01, $03
(1)   34/   E8A5D : =$0                 vcRS1 set $00
(1)   34/   E8A5D : =$1                 vcRS2 set $01
(1)   34/   E8A5D : =$1                 vcRS3 set $01
(1)   34/   E8A5D : =$3                 vcRS4 set $03
(1)   35/   E8A5D : (MACRO)             	smpsVcAttackRate    $3F, $2F, $2F, $3F
(1)   35/   E8A5D : =$3F                vcAR1 set $3F
(1)   35/   E8A5D : =$2F                vcAR2 set $2F
(1)   35/   E8A5D : =$2F                vcAR3 set $2F
(1)   35/   E8A5D : =$3F                vcAR4 set $3F
(1)   36/   E8A5D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   E8A5D : =$0                 vcAM1 set $00<<7
(1)   36/   E8A5D : =$0                 vcAM2 set $00<<7
(1)   36/   E8A5D : =$0                 vcAM3 set $00<<7
(1)   36/   E8A5D : =$0                 vcAM4 set $00<<7
(1)   37/   E8A5D : (MACRO)             	smpsVcDecayRate1    $0E, $14, $11, $12
(1)   37/   E8A5D : =$E                 vcD1R1 set $0E
(1)   37/   E8A5D : =$14                vcD1R2 set $14
(1)   37/   E8A5D : =$11                vcD1R3 set $11
(1)   37/   E8A5D : =$12                vcD1R4 set $12
(1)   38/   E8A5D : (MACRO)             	smpsVcDecayRate2    $0D, $0A, $03, $1A
(1)   38/   E8A5D : =$D                 vcD2R1 set $0D
(1)   38/   E8A5D : =$A                 vcD2R2 set $0A
(1)   38/   E8A5D : =$3                 vcD2R3 set $03
(1)   38/   E8A5D : =$1A                vcD2R4 set $1A
(1)   39/   E8A5D : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   39/   E8A5D : =$F                 vcDL1 set $0F
(1)   39/   E8A5D : =$F                 vcDL2 set $0F
(1)   39/   E8A5D : =$F                 vcDL3 set $0F
(1)   39/   E8A5D : =$F                 vcDL4 set $0F
(1)   40/   E8A5D : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   E8A5D : =$F                 vcRR1 set $0F
(1)   40/   E8A5D : =$F                 vcRR2 set $0F
(1)   40/   E8A5D : =$F                 vcRR3 set $0F
(1)   40/   E8A5D : =$F                 vcRR4 set $0F
(1)   41/   E8A5D : (MACRO)             	smpsVcTotalLevel    $80, $07, $07, $03
(1)   41/   E8A5D : =$80                vcTL1 set $80
(1)   41/   E8A5D : =$7                 vcTL2 set $07
(1)   41/   E8A5D : =$7                 vcTL3 set $07
(1)   41/   E8A5D : =$3                 vcTL4 set $03
(1)   41/   E8A5D : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   E8A5E :                     ;   0     1     2     3     4     5     6     7
(1)   41/   E8A5E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   E8A5E : =$0                 vcTLMask4 set 0
(1)   41/   E8A5E : =$0                 vcTLMask3 set 0
(1)   41/   E8A5E : =$0                 vcTLMask2 set 0
(1)   41/   E8A5E : =$0                 vcTLMask1 set 0
(1)   41/   E8A5E :                     
(1)   41/   E8A5E : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   41/   E8A5E : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   41/   E8A5E : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   41/   E8A5E : =$80                vcTLMask1 set $80
(1)   41/   E8A5E : =$0                 vcTL1 set vcTL1&$7F
(1)   41/   E8A5E : =$7                 vcTL2 set vcTL2&$7F
(1)   41/   E8A5E : =$7                 vcTL3 set vcTL3&$7F
(1)   41/   E8A5E : =$3                 vcTL4 set vcTL4&$7F
(1)   41/   E8A5E :                     
(1)   41/   E8A5E : 0303 0200                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   E8A62 : FF6F 6F3F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   E8A66 : 1211 140E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   E8A6A : 1A03 0A0D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   E8A6E : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   E8A72 : 8387 8780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   42/   E8A76 :                     
(1)   43/   E8A76 :                     
  507/   E8A76 :                        Sound55:	include "sfx-improved/D5 - Sliding Spike.asm"
(1)    1/   E8A76 :                     Sound55_SlidingSpike_Header:
(1)    2/   E8A76 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8A76 :                     
(1)    2/   E8A76 : =$2                 SourceDriver set 2
(1)    2/   E8A76 :                     
(1)    2/   E8A76 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8A76 :                     
(1)    2/   E8A76 : =$E8A76             songStart set *
(1)    2/   E8A76 :                     
(1)    2/   E8A76 :                     
(1)    3/   E8A76 : (MACRO)             	smpsHeaderVoice     Sound55_SlidingSpike_Voices
(1)    3/   E8A76 : 878A                                dc.w    z80_ptr(SOUND55_SLIDINGSPIKE_VOICES)
(1)    4/   E8A78 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8A78 : 01                          dc.b    $01
(1)    5/   E8A79 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8A79 : 01                          dc.b    $01
(1)    6/   E8A7A :                     
(1)    7/   E8A7A : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound55_SlidingSpike_FM5,	$00, $00
(1)    7/   E8A7A : 8005                        dc.b    $80,CFM5
(1)    7/   E8A7C :  (MACRO-2)                  CheckedChannelPointer SOUND55_SLIDINGSPIKE_FM5
(1)    7/   E8A7C : 808A                                dc.w    z80_ptr(SOUND55_SLIDINGSPIKE_FM5)
(1)    7/   E8A7E : 00                                  dc.b    $00
(1)    7/   E8A7F : 00                          dc.b    $00
(1)    8/   E8A80 :                     
(1)    9/   E8A80 :                     ; FM5 Data
(1)   10/   E8A80 :                     Sound55_SlidingSpike_FM5:
(1)   11/   E8A80 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8A80 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8A80 : EF00                                dc.b    $EF,$00
(1)   12/   E8A82 : AA07 B615           	dc.b	nF3, $07, nF4, $15
(1)   13/   E8A86 : (MACRO)             	smpsStop
(1)   13/   E8A86 : F2                          dc.b    $F2
(1)   14/   E8A87 :                     
(1)   15/   E8A87 :                     Sound55_SlidingSpike_Voices:
(1)   16/   E8A87 :                     ;	Voice $00
(1)   17/   E8A87 :                     ;	$42
(1)   18/   E8A87 :                     ;	$20, $0F, $0E, $0F, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
(1)   19/   E8A87 :                     ;	$0F, $0F, $0E, $0E, 	$0F, $0F, $0F, $0F, 	$2E, $20, $80, $80
(1)   20/   E8A87 : (MACRO)             	smpsVcAlgorithm     $02
(1)   20/   E8A87 : =$2                 vcAlgorithm set $02
(1)   21/   E8A87 : (MACRO)             	smpsVcFeedback      $00
(1)   21/   E8A87 : =$0                 vcFeedback set $00
(1)   22/   E8A87 : (MACRO)             	smpsVcUnusedBits    $01
(1)   22/   E8A87 : =$1                 vcUnusedBits set $01
(1)   22/   E8A87 : =$0                 vcD1R1Unk set 0
(1)   22/   E8A87 : =$0                 vcD1R2Unk set 0
(1)   22/   E8A87 : =$0                 vcD1R3Unk set 0
(1)   22/   E8A87 : =$0                 vcD1R4Unk set 0
(1)   23/   E8A87 : (MACRO)             	smpsVcDetune        $00, $00, $00, $02
(1)   23/   E8A87 : =$0                 vcDT1 set $00
(1)   23/   E8A87 : =$0                 vcDT2 set $00
(1)   23/   E8A87 : =$0                 vcDT3 set $00
(1)   23/   E8A87 : =$2                 vcDT4 set $02
(1)   24/   E8A87 : (MACRO)             	smpsVcCoarseFreq    $0F, $0E, $0F, $00
(1)   24/   E8A87 : =$F                 vcCF1 set $0F
(1)   24/   E8A87 : =$E                 vcCF2 set $0E
(1)   24/   E8A87 : =$F                 vcCF3 set $0F
(1)   24/   E8A87 : =$0                 vcCF4 set $00
(1)   25/   E8A87 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8A87 : =$0                 vcRS1 set $00
(1)   25/   E8A87 : =$0                 vcRS2 set $00
(1)   25/   E8A87 : =$0                 vcRS3 set $00
(1)   25/   E8A87 : =$0                 vcRS4 set $00
(1)   26/   E8A87 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E8A87 : =$1F                vcAR1 set $1F
(1)   26/   E8A87 : =$1F                vcAR2 set $1F
(1)   26/   E8A87 : =$1F                vcAR3 set $1F
(1)   26/   E8A87 : =$1F                vcAR4 set $1F
(1)   27/   E8A87 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8A87 : =$0                 vcAM1 set $00<<5
(1)   27/   E8A87 : =$0                 vcAM2 set $00<<5
(1)   27/   E8A87 : =$0                 vcAM3 set $00<<5
(1)   27/   E8A87 : =$0                 vcAM4 set $00<<5
(1)   28/   E8A87 : (MACRO)             	smpsVcDecayRate1    $1F, $1F, $1F, $1F
(1)   28/   E8A87 : =$1F                vcD1R1 set $1F
(1)   28/   E8A87 : =$1F                vcD1R2 set $1F
(1)   28/   E8A87 : =$1F                vcD1R3 set $1F
(1)   28/   E8A87 : =$1F                vcD1R4 set $1F
(1)   29/   E8A87 : (MACRO)             	smpsVcDecayRate2    $0E, $0E, $0F, $0F
(1)   29/   E8A87 : =$E                 vcD2R1 set $0E
(1)   29/   E8A87 : =$E                 vcD2R2 set $0E
(1)   29/   E8A87 : =$F                 vcD2R3 set $0F
(1)   29/   E8A87 : =$F                 vcD2R4 set $0F
(1)   30/   E8A87 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   30/   E8A87 : =$0                 vcDL1 set $00
(1)   30/   E8A87 : =$0                 vcDL2 set $00
(1)   30/   E8A87 : =$0                 vcDL3 set $00
(1)   30/   E8A87 : =$0                 vcDL4 set $00
(1)   31/   E8A87 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E8A87 : =$F                 vcRR1 set $0F
(1)   31/   E8A87 : =$F                 vcRR2 set $0F
(1)   31/   E8A87 : =$F                 vcRR3 set $0F
(1)   31/   E8A87 : =$F                 vcRR4 set $0F
(1)   32/   E8A87 : (MACRO)             	smpsVcTotalLevel    $00, $80, $20, $2E
(1)   32/   E8A87 : =$0                 vcTL1 set $00
(1)   32/   E8A87 : =$80                vcTL2 set $80
(1)   32/   E8A87 : =$20                vcTL3 set $20
(1)   32/   E8A87 : =$2E                vcTL4 set $2E
(1)   32/   E8A87 : 42                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8A88 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8A88 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8A88 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8A88 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8A88 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8A88 : =$80                vcTLMask1 set $80
(1)   32/   E8A88 :                     
(1)   32/   E8A88 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8A88 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8A88 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8A88 : =$80                vcTLMask1 set $80
(1)   32/   E8A88 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8A88 : =$0                 vcTL2 set vcTL2&$7F
(1)   32/   E8A88 : =$20                vcTL3 set vcTL3&$7F
(1)   32/   E8A88 : =$2E                vcTL4 set vcTL4&$7F
(1)   32/   E8A88 :                     
(1)   32/   E8A88 : 200F 0E0F                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8A8C : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8A90 : 1F1F 1F1F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8A94 : 0F0F 0E0E                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8A98 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8A9C : 2E20 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8AA0 :                     
(1)   34/   E8AA0 :                     
  508/   E8AA0 :                        Sound56:	include "sfx-improved/D6 - CNZ Elevator.asm"
(1)    1/   E8AA0 :                     Sound56_CNZElevator_Header:
(1)    2/   E8AA0 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8AA0 :                     
(1)    2/   E8AA0 : =$2                 SourceDriver set 2
(1)    2/   E8AA0 :                     
(1)    2/   E8AA0 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8AA0 :                     
(1)    2/   E8AA0 : =$E8AA0             songStart set *
(1)    2/   E8AA0 :                     
(1)    2/   E8AA0 :                     
(1)    3/   E8AA0 : (MACRO)             	smpsHeaderVoice     Sound56_CNZElevator_Voices
(1)    3/   E8AA0 : CC8A                                dc.w    z80_ptr(SOUND56_CNZELEVATOR_VOICES)
(1)    4/   E8AA2 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8AA2 : 01                          dc.b    $01
(1)    5/   E8AA3 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8AA3 : 01                          dc.b    $01
(1)    6/   E8AA4 :                     
(1)    7/   E8AA4 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound56_CNZElevator_FM5,	$10, $0E
(1)    7/   E8AA4 : 8005                        dc.b    $80,CFM5
(1)    7/   E8AA6 :  (MACRO-2)                  CheckedChannelPointer SOUND56_CNZELEVATOR_FM5
(1)    7/   E8AA6 : AA8A                                dc.w    z80_ptr(SOUND56_CNZELEVATOR_FM5)
(1)    7/   E8AA8 : 10                                  dc.b    $10
(1)    7/   E8AA9 : 0E                          dc.b    $0E
(1)    8/   E8AAA :                     
(1)    9/   E8AAA :                     ; FM5 Data
(1)   10/   E8AAA :                     Sound56_CNZElevator_FM5:
(1)   11/   E8AAA : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8AAA :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8AAA : EF00                                dc.b    $EF,$00
(1)   12/   E8AAC : (MACRO)             	smpsModSet          $01, $01, $1E, $FF
(1)   12/   E8AAC : F0                          dc.b    $F0
(1)   12/   E8AAD : 0201 1E00                           dc.b    $01+1,$01,$1E,(($FF+1) * $01) & $FF
(1)   12/   E8AB1 :                             ;dc.b   $01,$1E,$FF
(1)   13/   E8AB1 : 8F1C                	dc.b	nD1, $1C
(1)   14/   E8AB3 : (MACRO)             	smpsModOff
(1)   14/   E8AB3 : FA                                  dc.b    $FA
(1)   15/   E8AB4 :                     
(1)   16/   E8AB4 :                     Sound56_CNZElevator_Loop00:
(1)   17/   E8AB4 : E79A 05             	dc.b	smpsNoAttack, nCs2, $05
(1)   18/   E8AB7 : (MACRO)             	smpsLoop            $00, $09, Sound56_CNZElevator_Loop00
(1)   18/   E8AB7 : F7                          dc.b    $F7
(1)   18/   E8AB8 : 0009                        dc.b    $00,$09
(1)   18/   E8ABA : B48A                                dc.w    z80_ptr(SOUND56_CNZELEVATOR_LOOP00)
(1)   19/   E8ABC :                     
(1)   20/   E8ABC :                     Sound56_CNZElevator_Loop01:
(1)   21/   E8ABC : E79A 04             	dc.b	smpsNoAttack, nCs2, $04
(1)   22/   E8ABF : (MACRO)             	smpsAlterVol        $02
(1)   22/   E8ABF : E602                        dc.b    $E6,$02
(1)   23/   E8AC1 : E79A 04             	dc.b	smpsNoAttack, nCs2, $04
(1)   24/   E8AC4 : (MACRO)             	smpsAlterVol        $02
(1)   24/   E8AC4 : E602                        dc.b    $E6,$02
(1)   25/   E8AC6 : (MACRO)             	smpsLoop            $00, $08, Sound56_CNZElevator_Loop01
(1)   25/   E8AC6 : F7                          dc.b    $F7
(1)   25/   E8AC7 : 0008                        dc.b    $00,$08
(1)   25/   E8AC9 : BC8A                                dc.w    z80_ptr(SOUND56_CNZELEVATOR_LOOP01)
(1)   26/   E8ACB : (MACRO)             	smpsStop
(1)   26/   E8ACB : F2                          dc.b    $F2
(1)   27/   E8ACC :                     
(1)   28/   E8ACC :                     Sound56_CNZElevator_Voices:
(1)   29/   E8ACC :                     ;	Voice $00
(1)   30/   E8ACC :                     ;	$0D
(1)   31/   E8ACC :                     ;	$06, $00, $00, $E5, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   32/   E8ACC :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$27, $80, $80, $80
(1)   33/   E8ACC : (MACRO)             	smpsVcAlgorithm     $05
(1)   33/   E8ACC : =$5                 vcAlgorithm set $05
(1)   34/   E8ACC : (MACRO)             	smpsVcFeedback      $01
(1)   34/   E8ACC : =$1                 vcFeedback set $01
(1)   35/   E8ACC : (MACRO)             	smpsVcUnusedBits    $00
(1)   35/   E8ACC : =$0                 vcUnusedBits set $00
(1)   35/   E8ACC : =$0                 vcD1R1Unk set 0
(1)   35/   E8ACC : =$0                 vcD1R2Unk set 0
(1)   35/   E8ACC : =$0                 vcD1R3Unk set 0
(1)   35/   E8ACC : =$0                 vcD1R4Unk set 0
(1)   36/   E8ACC : (MACRO)             	smpsVcDetune        $0E, $00, $00, $00
(1)   36/   E8ACC : =$E                 vcDT1 set $0E
(1)   36/   E8ACC : =$0                 vcDT2 set $00
(1)   36/   E8ACC : =$0                 vcDT3 set $00
(1)   36/   E8ACC : =$0                 vcDT4 set $00
(1)   37/   E8ACC : (MACRO)             	smpsVcCoarseFreq    $05, $00, $00, $06
(1)   37/   E8ACC : =$5                 vcCF1 set $05
(1)   37/   E8ACC : =$0                 vcCF2 set $00
(1)   37/   E8ACC : =$0                 vcCF3 set $00
(1)   37/   E8ACC : =$6                 vcCF4 set $06
(1)   38/   E8ACC : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   38/   E8ACC : =$0                 vcRS1 set $00
(1)   38/   E8ACC : =$0                 vcRS2 set $00
(1)   38/   E8ACC : =$0                 vcRS3 set $00
(1)   38/   E8ACC : =$0                 vcRS4 set $00
(1)   39/   E8ACC : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   39/   E8ACC : =$1F                vcAR1 set $1F
(1)   39/   E8ACC : =$1F                vcAR2 set $1F
(1)   39/   E8ACC : =$1F                vcAR3 set $1F
(1)   39/   E8ACC : =$1F                vcAR4 set $1F
(1)   40/   E8ACC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   40/   E8ACC : =$0                 vcAM1 set $00<<5
(1)   40/   E8ACC : =$0                 vcAM2 set $00<<5
(1)   40/   E8ACC : =$0                 vcAM3 set $00<<5
(1)   40/   E8ACC : =$0                 vcAM4 set $00<<5
(1)   41/   E8ACC : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   41/   E8ACC : =$0                 vcD1R1 set $00
(1)   41/   E8ACC : =$0                 vcD1R2 set $00
(1)   41/   E8ACC : =$0                 vcD1R3 set $00
(1)   41/   E8ACC : =$0                 vcD1R4 set $00
(1)   42/   E8ACC : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   42/   E8ACC : =$0                 vcD2R1 set $00
(1)   42/   E8ACC : =$0                 vcD2R2 set $00
(1)   42/   E8ACC : =$0                 vcD2R3 set $00
(1)   42/   E8ACC : =$0                 vcD2R4 set $00
(1)   43/   E8ACC : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   43/   E8ACC : =$0                 vcDL1 set $00
(1)   43/   E8ACC : =$0                 vcDL2 set $00
(1)   43/   E8ACC : =$0                 vcDL3 set $00
(1)   43/   E8ACC : =$0                 vcDL4 set $00
(1)   44/   E8ACC : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   44/   E8ACC : =$F                 vcRR1 set $0F
(1)   44/   E8ACC : =$F                 vcRR2 set $0F
(1)   44/   E8ACC : =$F                 vcRR3 set $0F
(1)   44/   E8ACC : =$F                 vcRR4 set $0F
(1)   45/   E8ACC : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $27
(1)   45/   E8ACC : =$0                 vcTL1 set $00
(1)   45/   E8ACC : =$0                 vcTL2 set $00
(1)   45/   E8ACC : =$0                 vcTL3 set $00
(1)   45/   E8ACC : =$27                vcTL4 set $27
(1)   45/   E8ACC : 0D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   45/   E8ACD :                     ;   0     1     2     3     4     5     6     7
(1)   45/   E8ACD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   45/   E8ACD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   45/   E8ACD : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   45/   E8ACD : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   45/   E8ACD : =$80                vcTLMask1 set $80
(1)   45/   E8ACD :                     
(1)   45/   E8ACD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   45/   E8ACD : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   45/   E8ACD : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   45/   E8ACD : =$80                vcTLMask1 set $80
(1)   45/   E8ACD : =$0                 vcTL1 set vcTL1&$7F
(1)   45/   E8ACD : =$0                 vcTL2 set vcTL2&$7F
(1)   45/   E8ACD : =$0                 vcTL3 set vcTL3&$7F
(1)   45/   E8ACD : =$27                vcTL4 set vcTL4&$7F
(1)   45/   E8ACD :                     
(1)   45/   E8ACD : 0600 00E5                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   45/   E8AD1 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   45/   E8AD5 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   45/   E8AD9 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   45/   E8ADD : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   45/   E8AE1 : 2780 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   46/   E8AE5 :                     
(1)   47/   E8AE5 :                     
  509/   E8AE5 :                        Sound57:	include "sfx-improved/D7 - Platform Knock.asm"
(1)    1/   E8AE5 :                     Sound57_PlatformKnock_Header:
(1)    2/   E8AE5 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8AE5 :                     
(1)    2/   E8AE5 : =$2                 SourceDriver set 2
(1)    2/   E8AE5 :                     
(1)    2/   E8AE5 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8AE5 :                     
(1)    2/   E8AE5 : =$E8AE5             songStart set *
(1)    2/   E8AE5 :                     
(1)    2/   E8AE5 :                     
(1)    3/   E8AE5 : (MACRO)             	smpsHeaderVoice     Sound57_PlatformKnock_Voices
(1)    3/   E8AE5 : F48A                                dc.w    z80_ptr(SOUND57_PLATFORMKNOCK_VOICES)
(1)    4/   E8AE7 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8AE7 : 01                          dc.b    $01
(1)    5/   E8AE8 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8AE8 : 01                          dc.b    $01
(1)    6/   E8AE9 :                     
(1)    7/   E8AE9 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound57_PlatformKnock_FM5,	$00, $00
(1)    7/   E8AE9 : 8005                        dc.b    $80,CFM5
(1)    7/   E8AEB :  (MACRO-2)                  CheckedChannelPointer SOUND57_PLATFORMKNOCK_FM5
(1)    7/   E8AEB : EF8A                                dc.w    z80_ptr(SOUND57_PLATFORMKNOCK_FM5)
(1)    7/   E8AED : 00                                  dc.b    $00
(1)    7/   E8AEE : 00                          dc.b    $00
(1)    8/   E8AEF :                     
(1)    9/   E8AEF :                     ; FM5 Data
(1)   10/   E8AEF :                     Sound57_PlatformKnock_FM5:
(1)   11/   E8AEF : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8AEF :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8AEF : EF00                                dc.b    $EF,$00
(1)   12/   E8AF1 : CA15                	dc.b	nCs6, $15
(1)   13/   E8AF3 : (MACRO)             	smpsStop
(1)   13/   E8AF3 : F2                          dc.b    $F2
(1)   14/   E8AF4 :                     
(1)   15/   E8AF4 :                     Sound57_PlatformKnock_Voices:
(1)   16/   E8AF4 :                     ;	Voice $00
(1)   17/   E8AF4 :                     ;	$04
(1)   18/   E8AF4 :                     ;	$09, $00, $70, $30, 	$1C, $DF, $1F, $1F, 	$15, $0B, $12, $0F
(1)   19/   E8AF4 :                     ;	$0C, $00, $0D, $0D, 	$07, $FA, $2F, $FA, 	$00, $00, $29, $00
(1)   20/   E8AF4 : (MACRO)             	smpsVcAlgorithm     $04
(1)   20/   E8AF4 : =$4                 vcAlgorithm set $04
(1)   21/   E8AF4 : (MACRO)             	smpsVcFeedback      $00
(1)   21/   E8AF4 : =$0                 vcFeedback set $00
(1)   22/   E8AF4 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8AF4 : =$0                 vcUnusedBits set $00
(1)   22/   E8AF4 : =$0                 vcD1R1Unk set 0
(1)   22/   E8AF4 : =$0                 vcD1R2Unk set 0
(1)   22/   E8AF4 : =$0                 vcD1R3Unk set 0
(1)   22/   E8AF4 : =$0                 vcD1R4Unk set 0
(1)   23/   E8AF4 : (MACRO)             	smpsVcDetune        $03, $07, $00, $00
(1)   23/   E8AF4 : =$3                 vcDT1 set $03
(1)   23/   E8AF4 : =$7                 vcDT2 set $07
(1)   23/   E8AF4 : =$0                 vcDT3 set $00
(1)   23/   E8AF4 : =$0                 vcDT4 set $00
(1)   24/   E8AF4 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $09
(1)   24/   E8AF4 : =$0                 vcCF1 set $00
(1)   24/   E8AF4 : =$0                 vcCF2 set $00
(1)   24/   E8AF4 : =$0                 vcCF3 set $00
(1)   24/   E8AF4 : =$9                 vcCF4 set $09
(1)   25/   E8AF4 : (MACRO)             	smpsVcRateScale     $00, $00, $03, $00
(1)   25/   E8AF4 : =$0                 vcRS1 set $00
(1)   25/   E8AF4 : =$0                 vcRS2 set $00
(1)   25/   E8AF4 : =$3                 vcRS3 set $03
(1)   25/   E8AF4 : =$0                 vcRS4 set $00
(1)   26/   E8AF4 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1C
(1)   26/   E8AF4 : =$1F                vcAR1 set $1F
(1)   26/   E8AF4 : =$1F                vcAR2 set $1F
(1)   26/   E8AF4 : =$1F                vcAR3 set $1F
(1)   26/   E8AF4 : =$1C                vcAR4 set $1C
(1)   27/   E8AF4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8AF4 : =$0                 vcAM1 set $00<<7
(1)   27/   E8AF4 : =$0                 vcAM2 set $00<<7
(1)   27/   E8AF4 : =$0                 vcAM3 set $00<<7
(1)   27/   E8AF4 : =$0                 vcAM4 set $00<<7
(1)   28/   E8AF4 : (MACRO)             	smpsVcDecayRate1    $0F, $12, $0B, $15
(1)   28/   E8AF4 : =$F                 vcD1R1 set $0F
(1)   28/   E8AF4 : =$12                vcD1R2 set $12
(1)   28/   E8AF4 : =$B                 vcD1R3 set $0B
(1)   28/   E8AF4 : =$15                vcD1R4 set $15
(1)   29/   E8AF4 : (MACRO)             	smpsVcDecayRate2    $0D, $0D, $00, $0C
(1)   29/   E8AF4 : =$D                 vcD2R1 set $0D
(1)   29/   E8AF4 : =$D                 vcD2R2 set $0D
(1)   29/   E8AF4 : =$0                 vcD2R3 set $00
(1)   29/   E8AF4 : =$C                 vcD2R4 set $0C
(1)   30/   E8AF4 : (MACRO)             	smpsVcDecayLevel    $0F, $02, $0F, $00
(1)   30/   E8AF4 : =$F                 vcDL1 set $0F
(1)   30/   E8AF4 : =$2                 vcDL2 set $02
(1)   30/   E8AF4 : =$F                 vcDL3 set $0F
(1)   30/   E8AF4 : =$0                 vcDL4 set $00
(1)   31/   E8AF4 : (MACRO)             	smpsVcReleaseRate   $0A, $0F, $0A, $07
(1)   31/   E8AF4 : =$A                 vcRR1 set $0A
(1)   31/   E8AF4 : =$F                 vcRR2 set $0F
(1)   31/   E8AF4 : =$A                 vcRR3 set $0A
(1)   31/   E8AF4 : =$7                 vcRR4 set $07
(1)   32/   E8AF4 : (MACRO)             	smpsVcTotalLevel    $00, $29, $00, $00
(1)   32/   E8AF4 : =$0                 vcTL1 set $00
(1)   32/   E8AF4 : =$29                vcTL2 set $29
(1)   32/   E8AF4 : =$0                 vcTL3 set $00
(1)   32/   E8AF4 : =$0                 vcTL4 set $00
(1)   32/   E8AF4 : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8AF5 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8AF5 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8AF5 : =$0                 vcTLMask4 set 0
(1)   32/   E8AF5 : =$0                 vcTLMask3 set 0
(1)   32/   E8AF5 : =$0                 vcTLMask2 set 0
(1)   32/   E8AF5 : =$0                 vcTLMask1 set 0
(1)   32/   E8AF5 :                     
(1)   32/   E8AF5 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8AF5 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8AF5 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8AF5 : =$80                vcTLMask1 set $80
(1)   32/   E8AF5 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8AF5 : =$29                vcTL2 set vcTL2&$7F
(1)   32/   E8AF5 : =$0                 vcTL3 set vcTL3&$7F
(1)   32/   E8AF5 : =$0                 vcTL4 set vcTL4&$7F
(1)   32/   E8AF5 :                     
(1)   32/   E8AF5 : 0900 7030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8AF9 : 1CDF 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8AFD : 150B 120F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8B01 : 0C00 0D0D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8B05 : 07FA 2FFA                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8B09 : 0080 2980                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8B0D :                     
(1)   34/   E8B0D :                     
  510/   E8B0D :                        Sound58:	include "sfx-improved/D8 - Bonus Bumper.asm"
(1)    1/   E8B0D :                     Sound58_BonusBumper_Header:
(1)    2/   E8B0D : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8B0D :                     
(1)    2/   E8B0D : =$2                 SourceDriver set 2
(1)    2/   E8B0D :                     
(1)    2/   E8B0D : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8B0D :                     
(1)    2/   E8B0D : =$E8B0D             songStart set *
(1)    2/   E8B0D :                     
(1)    2/   E8B0D :                     
(1)    3/   E8B0D : (MACRO)             	smpsHeaderVoice     Sound58_BonusBumper_Voices
(1)    3/   E8B0D : 1E8B                                dc.w    z80_ptr(SOUND58_BONUSBUMPER_VOICES)
(1)    4/   E8B0F : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8B0F : 01                          dc.b    $01
(1)    5/   E8B10 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8B10 : 01                          dc.b    $01
(1)    6/   E8B11 :                     
(1)    7/   E8B11 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound58_BonusBumper_FM5,	$00, $07
(1)    7/   E8B11 : 8005                        dc.b    $80,CFM5
(1)    7/   E8B13 :  (MACRO-2)                  CheckedChannelPointer SOUND58_BONUSBUMPER_FM5
(1)    7/   E8B13 : 178B                                dc.w    z80_ptr(SOUND58_BONUSBUMPER_FM5)
(1)    7/   E8B15 : 00                                  dc.b    $00
(1)    7/   E8B16 : 07                          dc.b    $07
(1)    8/   E8B17 :                     
(1)    9/   E8B17 :                     ; FM5 Data
(1)   10/   E8B17 :                     Sound58_BonusBumper_FM5:
(1)   11/   E8B17 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8B17 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8B17 : EF00                                dc.b    $EF,$00
(1)   12/   E8B19 : B306 B315           	dc.b	nD4, $06, nD4, $15
(1)   13/   E8B1D : (MACRO)             	smpsStop
(1)   13/   E8B1D : F2                          dc.b    $F2
(1)   14/   E8B1E :                     
(1)   15/   E8B1E :                     Sound58_BonusBumper_Voices:
(1)   16/   E8B1E :                     ;	Voice $00
(1)   17/   E8B1E :                     ;	$3C
(1)   18/   E8B1E :                     ;	$05, $01, $0A, $01, 	$56, $5C, $5C, $5C, 	$0E, $11, $11, $11
(1)   19/   E8B1E :                     ;	$09, $0A, $06, $0A, 	$4F, $3F, $3F, $3F, 	$17, $80, $20, $80
(1)   20/   E8B1E : (MACRO)             	smpsVcAlgorithm     $04
(1)   20/   E8B1E : =$4                 vcAlgorithm set $04
(1)   21/   E8B1E : (MACRO)             	smpsVcFeedback      $07
(1)   21/   E8B1E : =$7                 vcFeedback set $07
(1)   22/   E8B1E : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8B1E : =$0                 vcUnusedBits set $00
(1)   22/   E8B1E : =$0                 vcD1R1Unk set 0
(1)   22/   E8B1E : =$0                 vcD1R2Unk set 0
(1)   22/   E8B1E : =$0                 vcD1R3Unk set 0
(1)   22/   E8B1E : =$0                 vcD1R4Unk set 0
(1)   23/   E8B1E : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   23/   E8B1E : =$0                 vcDT1 set $00
(1)   23/   E8B1E : =$0                 vcDT2 set $00
(1)   23/   E8B1E : =$0                 vcDT3 set $00
(1)   23/   E8B1E : =$0                 vcDT4 set $00
(1)   24/   E8B1E : (MACRO)             	smpsVcCoarseFreq    $01, $0A, $01, $05
(1)   24/   E8B1E : =$1                 vcCF1 set $01
(1)   24/   E8B1E : =$A                 vcCF2 set $0A
(1)   24/   E8B1E : =$1                 vcCF3 set $01
(1)   24/   E8B1E : =$5                 vcCF4 set $05
(1)   25/   E8B1E : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)   25/   E8B1E : =$1                 vcRS1 set $01
(1)   25/   E8B1E : =$1                 vcRS2 set $01
(1)   25/   E8B1E : =$1                 vcRS3 set $01
(1)   25/   E8B1E : =$1                 vcRS4 set $01
(1)   26/   E8B1E : (MACRO)             	smpsVcAttackRate    $1C, $1C, $1C, $16
(1)   26/   E8B1E : =$1C                vcAR1 set $1C
(1)   26/   E8B1E : =$1C                vcAR2 set $1C
(1)   26/   E8B1E : =$1C                vcAR3 set $1C
(1)   26/   E8B1E : =$16                vcAR4 set $16
(1)   27/   E8B1E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8B1E : =$0                 vcAM1 set $00<<5
(1)   27/   E8B1E : =$0                 vcAM2 set $00<<5
(1)   27/   E8B1E : =$0                 vcAM3 set $00<<5
(1)   27/   E8B1E : =$0                 vcAM4 set $00<<5
(1)   28/   E8B1E : (MACRO)             	smpsVcDecayRate1    $11, $11, $11, $0E
(1)   28/   E8B1E : =$11                vcD1R1 set $11
(1)   28/   E8B1E : =$11                vcD1R2 set $11
(1)   28/   E8B1E : =$11                vcD1R3 set $11
(1)   28/   E8B1E : =$E                 vcD1R4 set $0E
(1)   29/   E8B1E : (MACRO)             	smpsVcDecayRate2    $0A, $06, $0A, $09
(1)   29/   E8B1E : =$A                 vcD2R1 set $0A
(1)   29/   E8B1E : =$6                 vcD2R2 set $06
(1)   29/   E8B1E : =$A                 vcD2R3 set $0A
(1)   29/   E8B1E : =$9                 vcD2R4 set $09
(1)   30/   E8B1E : (MACRO)             	smpsVcDecayLevel    $03, $03, $03, $04
(1)   30/   E8B1E : =$3                 vcDL1 set $03
(1)   30/   E8B1E : =$3                 vcDL2 set $03
(1)   30/   E8B1E : =$3                 vcDL3 set $03
(1)   30/   E8B1E : =$4                 vcDL4 set $04
(1)   31/   E8B1E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E8B1E : =$F                 vcRR1 set $0F
(1)   31/   E8B1E : =$F                 vcRR2 set $0F
(1)   31/   E8B1E : =$F                 vcRR3 set $0F
(1)   31/   E8B1E : =$F                 vcRR4 set $0F
(1)   32/   E8B1E : (MACRO)             	smpsVcTotalLevel    $00, $20, $00, $17
(1)   32/   E8B1E : =$0                 vcTL1 set $00
(1)   32/   E8B1E : =$20                vcTL2 set $20
(1)   32/   E8B1E : =$0                 vcTL3 set $00
(1)   32/   E8B1E : =$17                vcTL4 set $17
(1)   32/   E8B1E : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8B1F :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8B1F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8B1F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8B1F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8B1F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8B1F : =$80                vcTLMask1 set $80
(1)   32/   E8B1F :                     
(1)   32/   E8B1F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8B1F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8B1F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8B1F : =$80                vcTLMask1 set $80
(1)   32/   E8B1F : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8B1F : =$20                vcTL2 set vcTL2&$7F
(1)   32/   E8B1F : =$0                 vcTL3 set vcTL3&$7F
(1)   32/   E8B1F : =$17                vcTL4 set vcTL4&$7F
(1)   32/   E8B1F :                     
(1)   32/   E8B1F : 0501 0A01                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8B23 : 565C 5C5C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8B27 : 0E11 1111                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8B2B : 090A 060A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8B2F : 4F3F 3F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8B33 : 1780 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8B37 :                     
(1)   34/   E8B37 :                     
  511/   E8B37 :                        Sound59:	include "sfx-improved/D9 - Large Bumper.asm"
(1)    1/   E8B37 :                     Sound59_LargeBumper_Header:
(1)    2/   E8B37 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8B37 :                     
(1)    2/   E8B37 : =$2                 SourceDriver set 2
(1)    2/   E8B37 :                     
(1)    2/   E8B37 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8B37 :                     
(1)    2/   E8B37 : =$E8B37             songStart set *
(1)    2/   E8B37 :                     
(1)    2/   E8B37 :                     
(1)    3/   E8B37 : (MACRO)             	smpsHeaderVoice     Sound59_LargeBumper_Voices
(1)    3/   E8B37 : 5E8B                                dc.w    z80_ptr(SOUND59_LARGEBUMPER_VOICES)
(1)    4/   E8B39 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8B39 : 01                          dc.b    $01
(1)    5/   E8B3A : (MACRO)             	smpsHeaderChanSFX   $03
(1)    5/   E8B3A : 03                          dc.b    $03
(1)    6/   E8B3B :                     
(1)    7/   E8B3B : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound59_LargeBumper_FM4,	$00, $00
(1)    7/   E8B3B : 8004                        dc.b    $80,CFM4
(1)    7/   E8B3D :  (MACRO-2)                  CheckedChannelPointer SOUND59_LARGEBUMPER_FM4
(1)    7/   E8B3D : 4D8B                                dc.w    z80_ptr(SOUND59_LARGEBUMPER_FM4)
(1)    7/   E8B3F : 00                                  dc.b    $00
(1)    7/   E8B40 : 00                          dc.b    $00
(1)    8/   E8B41 : (MACRO)             	smpsHeaderSFXChannel cFM3, Sound59_LargeBumper_FM3,	$00, $02
(1)    8/   E8B41 : 8002                        dc.b    $80,CFM3
(1)    8/   E8B43 :  (MACRO-2)                  CheckedChannelPointer SOUND59_LARGEBUMPER_FM3
(1)    8/   E8B43 : 548B                                dc.w    z80_ptr(SOUND59_LARGEBUMPER_FM3)
(1)    8/   E8B45 : 00                                  dc.b    $00
(1)    8/   E8B46 : 02                          dc.b    $02
(1)    9/   E8B47 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound59_LargeBumper_FM5,	$00, $00
(1)    9/   E8B47 : 8005                        dc.b    $80,CFM5
(1)    9/   E8B49 :  (MACRO-2)                  CheckedChannelPointer SOUND59_LARGEBUMPER_FM5
(1)    9/   E8B49 : 598B                                dc.w    z80_ptr(SOUND59_LARGEBUMPER_FM5)
(1)    9/   E8B4B : 00                                  dc.b    $00
(1)    9/   E8B4C : 00                          dc.b    $00
(1)   10/   E8B4D :                     
(1)   11/   E8B4D :                     ; FM4 Data
(1)   12/   E8B4D :                     Sound59_LargeBumper_FM4:
(1)   13/   E8B4D : (MACRO)             	smpsSetvoice        $00
(1)   13/   E8B4D :  (MACRO-2)                  smpsFMvoice $00
(1)   13/   E8B4D : EF00                                dc.b    $EF,$00
(1)   14/   E8B4F : (MACRO)             	smpsAlterNote       $0C
(1)   14/   E8B4F :  (MACRO-2)                  smpsDetune      $0C
(1)   14/   E8B4F : E10C                        dc.b    $E1,$0C
(1)   15/   E8B51 : B514                	dc.b	nE4, $14
(1)   16/   E8B53 : (MACRO)             	smpsStop
(1)   16/   E8B53 : F2                          dc.b    $F2
(1)   17/   E8B54 :                     
(1)   18/   E8B54 :                     ; FM3 Data
(1)   19/   E8B54 :                     Sound59_LargeBumper_FM3:
(1)   20/   E8B54 : (MACRO)             	smpsSetvoice        $01
(1)   20/   E8B54 :  (MACRO-2)                  smpsFMvoice $01
(1)   20/   E8B54 : EF01                                dc.b    $EF,$01
(1)   21/   E8B56 : 9A03                	dc.b	nCs2, $03
(1)   22/   E8B58 : (MACRO)             	smpsStop
(1)   22/   E8B58 : F2                          dc.b    $F2
(1)   23/   E8B59 :                     
(1)   24/   E8B59 :                     ; FM5 Data
(1)   25/   E8B59 :                     Sound59_LargeBumper_FM5:
(1)   26/   E8B59 : (MACRO)             	smpsSetvoice        $00
(1)   26/   E8B59 :  (MACRO-2)                  smpsFMvoice $00
(1)   26/   E8B59 : EF00                                dc.b    $EF,$00
(1)   27/   E8B5B : B614                	dc.b	nF4, $14
(1)   28/   E8B5D : (MACRO)             	smpsStop
(1)   28/   E8B5D : F2                          dc.b    $F2
(1)   29/   E8B5E :                     
(1)   30/   E8B5E :                     Sound59_LargeBumper_Voices:
(1)   31/   E8B5E :                     ;	Voice $00
(1)   32/   E8B5E :                     ;	$32
(1)   33/   E8B5E :                     ;	$30, $40, $30, $70, 	$1F, $1F, $1F, $1F, 	$12, $01, $0A, $0D
(1)   34/   E8B5E :                     ;	$00, $01, $01, $0C, 	$00, $C3, $23, $F6, 	$08, $1C, $07, $03
(1)   35/   E8B5E : (MACRO)             	smpsVcAlgorithm     $02
(1)   35/   E8B5E : =$2                 vcAlgorithm set $02
(1)   36/   E8B5E : (MACRO)             	smpsVcFeedback      $06
(1)   36/   E8B5E : =$6                 vcFeedback set $06
(1)   37/   E8B5E : (MACRO)             	smpsVcUnusedBits    $00
(1)   37/   E8B5E : =$0                 vcUnusedBits set $00
(1)   37/   E8B5E : =$0                 vcD1R1Unk set 0
(1)   37/   E8B5E : =$0                 vcD1R2Unk set 0
(1)   37/   E8B5E : =$0                 vcD1R3Unk set 0
(1)   37/   E8B5E : =$0                 vcD1R4Unk set 0
(1)   38/   E8B5E : (MACRO)             	smpsVcDetune        $07, $03, $04, $03
(1)   38/   E8B5E : =$7                 vcDT1 set $07
(1)   38/   E8B5E : =$3                 vcDT2 set $03
(1)   38/   E8B5E : =$4                 vcDT3 set $04
(1)   38/   E8B5E : =$3                 vcDT4 set $03
(1)   39/   E8B5E : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   39/   E8B5E : =$0                 vcCF1 set $00
(1)   39/   E8B5E : =$0                 vcCF2 set $00
(1)   39/   E8B5E : =$0                 vcCF3 set $00
(1)   39/   E8B5E : =$0                 vcCF4 set $00
(1)   40/   E8B5E : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   40/   E8B5E : =$0                 vcRS1 set $00
(1)   40/   E8B5E : =$0                 vcRS2 set $00
(1)   40/   E8B5E : =$0                 vcRS3 set $00
(1)   40/   E8B5E : =$0                 vcRS4 set $00
(1)   41/   E8B5E : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   41/   E8B5E : =$1F                vcAR1 set $1F
(1)   41/   E8B5E : =$1F                vcAR2 set $1F
(1)   41/   E8B5E : =$1F                vcAR3 set $1F
(1)   41/   E8B5E : =$1F                vcAR4 set $1F
(1)   42/   E8B5E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   42/   E8B5E : =$0                 vcAM1 set $00<<7
(1)   42/   E8B5E : =$0                 vcAM2 set $00<<7
(1)   42/   E8B5E : =$0                 vcAM3 set $00<<7
(1)   42/   E8B5E : =$0                 vcAM4 set $00<<7
(1)   43/   E8B5E : (MACRO)             	smpsVcDecayRate1    $0D, $0A, $01, $12
(1)   43/   E8B5E : =$D                 vcD1R1 set $0D
(1)   43/   E8B5E : =$A                 vcD1R2 set $0A
(1)   43/   E8B5E : =$1                 vcD1R3 set $01
(1)   43/   E8B5E : =$12                vcD1R4 set $12
(1)   44/   E8B5E : (MACRO)             	smpsVcDecayRate2    $0C, $01, $01, $00
(1)   44/   E8B5E : =$C                 vcD2R1 set $0C
(1)   44/   E8B5E : =$1                 vcD2R2 set $01
(1)   44/   E8B5E : =$1                 vcD2R3 set $01
(1)   44/   E8B5E : =$0                 vcD2R4 set $00
(1)   45/   E8B5E : (MACRO)             	smpsVcDecayLevel    $0F, $02, $0C, $00
(1)   45/   E8B5E : =$F                 vcDL1 set $0F
(1)   45/   E8B5E : =$2                 vcDL2 set $02
(1)   45/   E8B5E : =$C                 vcDL3 set $0C
(1)   45/   E8B5E : =$0                 vcDL4 set $00
(1)   46/   E8B5E : (MACRO)             	smpsVcReleaseRate   $06, $03, $03, $00
(1)   46/   E8B5E : =$6                 vcRR1 set $06
(1)   46/   E8B5E : =$3                 vcRR2 set $03
(1)   46/   E8B5E : =$3                 vcRR3 set $03
(1)   46/   E8B5E : =$0                 vcRR4 set $00
(1)   47/   E8B5E : (MACRO)             	smpsVcTotalLevel    $03, $07, $1C, $08
(1)   47/   E8B5E : =$3                 vcTL1 set $03
(1)   47/   E8B5E : =$7                 vcTL2 set $07
(1)   47/   E8B5E : =$1C                vcTL3 set $1C
(1)   47/   E8B5E : =$8                 vcTL4 set $08
(1)   47/   E8B5E : 32                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   47/   E8B5F :                     ;   0     1     2     3     4     5     6     7
(1)   47/   E8B5F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   47/   E8B5F : =$0                 vcTLMask4 set 0
(1)   47/   E8B5F : =$0                 vcTLMask3 set 0
(1)   47/   E8B5F : =$0                 vcTLMask2 set 0
(1)   47/   E8B5F : =$0                 vcTLMask1 set 0
(1)   47/   E8B5F :                     
(1)   47/   E8B5F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   47/   E8B5F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   47/   E8B5F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   47/   E8B5F : =$80                vcTLMask1 set $80
(1)   47/   E8B5F : =$3                 vcTL1 set vcTL1&$7F
(1)   47/   E8B5F : =$7                 vcTL2 set vcTL2&$7F
(1)   47/   E8B5F : =$1C                vcTL3 set vcTL3&$7F
(1)   47/   E8B5F : =$8                 vcTL4 set vcTL4&$7F
(1)   47/   E8B5F :                     
(1)   47/   E8B5F : 3040 3070                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   47/   E8B63 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   47/   E8B67 : 1201 0A0D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   47/   E8B6B : 0001 010C                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   47/   E8B6F : 00C3 23F6                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   47/   E8B73 : 081C 0783                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   48/   E8B77 :                     
(1)   49/   E8B77 :                     ;	Voice $01
(1)   50/   E8B77 :                     ;	$05
(1)   51/   E8B77 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$12, $0C, $0C, $0C
(1)   52/   E8B77 :                     ;	$12, $08, $08, $08, 	$1F, $5F, $5F, $5F, 	$07, $80, $80, $80
(1)   53/   E8B77 : (MACRO)             	smpsVcAlgorithm     $05
(1)   53/   E8B77 : =$5                 vcAlgorithm set $05
(1)   54/   E8B77 : (MACRO)             	smpsVcFeedback      $00
(1)   54/   E8B77 : =$0                 vcFeedback set $00
(1)   55/   E8B77 : (MACRO)             	smpsVcUnusedBits    $00
(1)   55/   E8B77 : =$0                 vcUnusedBits set $00
(1)   55/   E8B77 : =$0                 vcD1R1Unk set 0
(1)   55/   E8B77 : =$0                 vcD1R2Unk set 0
(1)   55/   E8B77 : =$0                 vcD1R3Unk set 0
(1)   55/   E8B77 : =$0                 vcD1R4Unk set 0
(1)   56/   E8B77 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   56/   E8B77 : =$0                 vcDT1 set $00
(1)   56/   E8B77 : =$0                 vcDT2 set $00
(1)   56/   E8B77 : =$0                 vcDT3 set $00
(1)   56/   E8B77 : =$0                 vcDT4 set $00
(1)   57/   E8B77 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   57/   E8B77 : =$0                 vcCF1 set $00
(1)   57/   E8B77 : =$0                 vcCF2 set $00
(1)   57/   E8B77 : =$0                 vcCF3 set $00
(1)   57/   E8B77 : =$0                 vcCF4 set $00
(1)   58/   E8B77 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   58/   E8B77 : =$0                 vcRS1 set $00
(1)   58/   E8B77 : =$0                 vcRS2 set $00
(1)   58/   E8B77 : =$0                 vcRS3 set $00
(1)   58/   E8B77 : =$0                 vcRS4 set $00
(1)   59/   E8B77 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   59/   E8B77 : =$1F                vcAR1 set $1F
(1)   59/   E8B77 : =$1F                vcAR2 set $1F
(1)   59/   E8B77 : =$1F                vcAR3 set $1F
(1)   59/   E8B77 : =$1F                vcAR4 set $1F
(1)   60/   E8B77 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   60/   E8B77 : =$0                 vcAM1 set $00<<7
(1)   60/   E8B77 : =$0                 vcAM2 set $00<<7
(1)   60/   E8B77 : =$0                 vcAM3 set $00<<7
(1)   60/   E8B77 : =$0                 vcAM4 set $00<<7
(1)   61/   E8B77 : (MACRO)             	smpsVcDecayRate1    $0C, $0C, $0C, $12
(1)   61/   E8B77 : =$C                 vcD1R1 set $0C
(1)   61/   E8B77 : =$C                 vcD1R2 set $0C
(1)   61/   E8B77 : =$C                 vcD1R3 set $0C
(1)   61/   E8B77 : =$12                vcD1R4 set $12
(1)   62/   E8B77 : (MACRO)             	smpsVcDecayRate2    $08, $08, $08, $12
(1)   62/   E8B77 : =$8                 vcD2R1 set $08
(1)   62/   E8B77 : =$8                 vcD2R2 set $08
(1)   62/   E8B77 : =$8                 vcD2R3 set $08
(1)   62/   E8B77 : =$12                vcD2R4 set $12
(1)   63/   E8B77 : (MACRO)             	smpsVcDecayLevel    $05, $05, $05, $01
(1)   63/   E8B77 : =$5                 vcDL1 set $05
(1)   63/   E8B77 : =$5                 vcDL2 set $05
(1)   63/   E8B77 : =$5                 vcDL3 set $05
(1)   63/   E8B77 : =$1                 vcDL4 set $01
(1)   64/   E8B77 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   64/   E8B77 : =$F                 vcRR1 set $0F
(1)   64/   E8B77 : =$F                 vcRR2 set $0F
(1)   64/   E8B77 : =$F                 vcRR3 set $0F
(1)   64/   E8B77 : =$F                 vcRR4 set $0F
(1)   65/   E8B77 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $07
(1)   65/   E8B77 : =$80                vcTL1 set $80
(1)   65/   E8B77 : =$80                vcTL2 set $80
(1)   65/   E8B77 : =$80                vcTL3 set $80
(1)   65/   E8B77 : =$7                 vcTL4 set $07
(1)   65/   E8B77 : 05                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   65/   E8B78 :                     ;   0     1     2     3     4     5     6     7
(1)   65/   E8B78 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   65/   E8B78 : =$0                 vcTLMask4 set 0
(1)   65/   E8B78 : =$0                 vcTLMask3 set 0
(1)   65/   E8B78 : =$0                 vcTLMask2 set 0
(1)   65/   E8B78 : =$0                 vcTLMask1 set 0
(1)   65/   E8B78 :                     
(1)   65/   E8B78 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   65/   E8B78 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   65/   E8B78 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   65/   E8B78 : =$80                vcTLMask1 set $80
(1)   65/   E8B78 : =$0                 vcTL1 set vcTL1&$7F
(1)   65/   E8B78 : =$0                 vcTL2 set vcTL2&$7F
(1)   65/   E8B78 : =$0                 vcTL3 set vcTL3&$7F
(1)   65/   E8B78 : =$7                 vcTL4 set vcTL4&$7F
(1)   65/   E8B78 :                     
(1)   65/   E8B78 : 0000 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   65/   E8B7C : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   65/   E8B80 : 120C 0C0C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   65/   E8B84 : 1208 0808                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   65/   E8B88 : 1F5F 5F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   65/   E8B8C : 0780 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   66/   E8B90 :                     
(1)   67/   E8B90 :                     
  512/   E8B90 :                        Sound5A:	include "sfx-improved/DA - Gloop.asm"
(1)    1/   E8B90 :                     Sound5A_Gloop_Header:
(1)    2/   E8B90 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8B90 :                     
(1)    2/   E8B90 : =$2                 SourceDriver set 2
(1)    2/   E8B90 :                     
(1)    2/   E8B90 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8B90 :                     
(1)    2/   E8B90 : =$E8B90             songStart set *
(1)    2/   E8B90 :                     
(1)    2/   E8B90 :                     
(1)    3/   E8B90 : (MACRO)             	smpsHeaderVoice     Sound5A_Gloop_Voices
(1)    3/   E8B90 : A48B                                dc.w    z80_ptr(SOUND5A_GLOOP_VOICES)
(1)    4/   E8B92 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8B92 : 01                          dc.b    $01
(1)    5/   E8B93 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8B93 : 01                          dc.b    $01
(1)    6/   E8B94 :                     
(1)    7/   E8B94 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound5A_Gloop_FM5,	$00, $00
(1)    7/   E8B94 : 8005                        dc.b    $80,CFM5
(1)    7/   E8B96 :  (MACRO-2)                  CheckedChannelPointer SOUND5A_GLOOP_FM5
(1)    7/   E8B96 : 9A8B                                dc.w    z80_ptr(SOUND5A_GLOOP_FM5)
(1)    7/   E8B98 : 00                                  dc.b    $00
(1)    7/   E8B99 : 00                          dc.b    $00
(1)    8/   E8B9A :                     
(1)    9/   E8B9A :                     ; FM5 Data
(1)   10/   E8B9A :                     Sound5A_Gloop_FM5:
(1)   11/   E8B9A : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8B9A :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8B9A : EF00                                dc.b    $EF,$00
(1)   12/   E8B9C : (MACRO)             	smpsModSet          $01, $01, $7F, $F1
(1)   12/   E8B9C : F0                          dc.b    $F0
(1)   12/   E8B9D : 0201 7FF2                           dc.b    $01+1,$01,$7F,(($F1+1) * $01) & $FF
(1)   12/   E8BA1 :                             ;dc.b   $01,$7F,$F1
(1)   13/   E8BA1 : AA0A                	dc.b	nF3, $0A
(1)   14/   E8BA3 : (MACRO)             	smpsStop
(1)   14/   E8BA3 : F2                          dc.b    $F2
(1)   15/   E8BA4 :                     
(1)   16/   E8BA4 :                     Sound5A_Gloop_Voices:
(1)   17/   E8BA4 :                     ;	Voice $00
(1)   18/   E8BA4 :                     ;	$47
(1)   19/   E8BA4 :                     ;	$03, $02, $02, $04, 	$5F, $5F, $5F, $5F, 	$0E, $11, $1A, $0A
(1)   20/   E8BA4 :                     ;	$09, $0A, $0A, $0A, 	$4F, $3F, $3F, $3F, 	$7F, $80, $80, $A3
(1)   21/   E8BA4 : (MACRO)             	smpsVcAlgorithm     $07
(1)   21/   E8BA4 : =$7                 vcAlgorithm set $07
(1)   22/   E8BA4 : (MACRO)             	smpsVcFeedback      $00
(1)   22/   E8BA4 : =$0                 vcFeedback set $00
(1)   23/   E8BA4 : (MACRO)             	smpsVcUnusedBits    $01
(1)   23/   E8BA4 : =$1                 vcUnusedBits set $01
(1)   23/   E8BA4 : =$0                 vcD1R1Unk set 0
(1)   23/   E8BA4 : =$0                 vcD1R2Unk set 0
(1)   23/   E8BA4 : =$0                 vcD1R3Unk set 0
(1)   23/   E8BA4 : =$0                 vcD1R4Unk set 0
(1)   24/   E8BA4 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   24/   E8BA4 : =$0                 vcDT1 set $00
(1)   24/   E8BA4 : =$0                 vcDT2 set $00
(1)   24/   E8BA4 : =$0                 vcDT3 set $00
(1)   24/   E8BA4 : =$0                 vcDT4 set $00
(1)   25/   E8BA4 : (MACRO)             	smpsVcCoarseFreq    $04, $02, $02, $03
(1)   25/   E8BA4 : =$4                 vcCF1 set $04
(1)   25/   E8BA4 : =$2                 vcCF2 set $02
(1)   25/   E8BA4 : =$2                 vcCF3 set $02
(1)   25/   E8BA4 : =$3                 vcCF4 set $03
(1)   26/   E8BA4 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)   26/   E8BA4 : =$1                 vcRS1 set $01
(1)   26/   E8BA4 : =$1                 vcRS2 set $01
(1)   26/   E8BA4 : =$1                 vcRS3 set $01
(1)   26/   E8BA4 : =$1                 vcRS4 set $01
(1)   27/   E8BA4 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   27/   E8BA4 : =$1F                vcAR1 set $1F
(1)   27/   E8BA4 : =$1F                vcAR2 set $1F
(1)   27/   E8BA4 : =$1F                vcAR3 set $1F
(1)   27/   E8BA4 : =$1F                vcAR4 set $1F
(1)   28/   E8BA4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   28/   E8BA4 : =$0                 vcAM1 set $00<<7
(1)   28/   E8BA4 : =$0                 vcAM2 set $00<<7
(1)   28/   E8BA4 : =$0                 vcAM3 set $00<<7
(1)   28/   E8BA4 : =$0                 vcAM4 set $00<<7
(1)   29/   E8BA4 : (MACRO)             	smpsVcDecayRate1    $0A, $1A, $11, $0E
(1)   29/   E8BA4 : =$A                 vcD1R1 set $0A
(1)   29/   E8BA4 : =$1A                vcD1R2 set $1A
(1)   29/   E8BA4 : =$11                vcD1R3 set $11
(1)   29/   E8BA4 : =$E                 vcD1R4 set $0E
(1)   30/   E8BA4 : (MACRO)             	smpsVcDecayRate2    $0A, $0A, $0A, $09
(1)   30/   E8BA4 : =$A                 vcD2R1 set $0A
(1)   30/   E8BA4 : =$A                 vcD2R2 set $0A
(1)   30/   E8BA4 : =$A                 vcD2R3 set $0A
(1)   30/   E8BA4 : =$9                 vcD2R4 set $09
(1)   31/   E8BA4 : (MACRO)             	smpsVcDecayLevel    $03, $03, $03, $04
(1)   31/   E8BA4 : =$3                 vcDL1 set $03
(1)   31/   E8BA4 : =$3                 vcDL2 set $03
(1)   31/   E8BA4 : =$3                 vcDL3 set $03
(1)   31/   E8BA4 : =$4                 vcDL4 set $04
(1)   32/   E8BA4 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   32/   E8BA4 : =$F                 vcRR1 set $0F
(1)   32/   E8BA4 : =$F                 vcRR2 set $0F
(1)   32/   E8BA4 : =$F                 vcRR3 set $0F
(1)   32/   E8BA4 : =$F                 vcRR4 set $0F
(1)   33/   E8BA4 : (MACRO)             	smpsVcTotalLevel    $A3, $80, $80, $7F
(1)   33/   E8BA4 : =$A3                vcTL1 set $A3
(1)   33/   E8BA4 : =$80                vcTL2 set $80
(1)   33/   E8BA4 : =$80                vcTL3 set $80
(1)   33/   E8BA4 : =$7F                vcTL4 set $7F
(1)   33/   E8BA4 : 47                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   33/   E8BA5 :                     ;   0     1     2     3     4     5     6     7
(1)   33/   E8BA5 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   33/   E8BA5 : =$0                 vcTLMask4 set 0
(1)   33/   E8BA5 : =$0                 vcTLMask3 set 0
(1)   33/   E8BA5 : =$0                 vcTLMask2 set 0
(1)   33/   E8BA5 : =$0                 vcTLMask1 set 0
(1)   33/   E8BA5 :                     
(1)   33/   E8BA5 : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E8BA5 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E8BA5 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E8BA5 : =$80                vcTLMask1 set $80
(1)   33/   E8BA5 : =$23                vcTL1 set vcTL1&$7F
(1)   33/   E8BA5 : =$0                 vcTL2 set vcTL2&$7F
(1)   33/   E8BA5 : =$0                 vcTL3 set vcTL3&$7F
(1)   33/   E8BA5 : =$7F                vcTL4 set vcTL4&$7F
(1)   33/   E8BA5 :                     
(1)   33/   E8BA5 : 0302 0204                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   33/   E8BA9 : 5F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   33/   E8BAD : 0E11 1A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   33/   E8BB1 : 090A 0A0A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   33/   E8BB5 : 4F3F 3F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   33/   E8BB9 : FF80 80A3                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   34/   E8BBD :                     
(1)   35/   E8BBD :                     
  513/   E8BBD :                        Sound5B:	include "sfx-improved/DB - Pre-Arrow Firing.asm"
(1)    1/   E8BBD :                     Sound5B_PreArrowFiring_Header:
(1)    2/   E8BBD : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8BBD :                     
(1)    2/   E8BBD : =$2                 SourceDriver set 2
(1)    2/   E8BBD :                     
(1)    2/   E8BBD : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8BBD :                     
(1)    2/   E8BBD : =$E8BBD             songStart set *
(1)    2/   E8BBD :                     
(1)    2/   E8BBD :                     
(1)    3/   E8BBD : (MACRO)             	smpsHeaderVoice     Sound5B_PreArrowFiring_Voices
(1)    3/   E8BBD : D88B                                dc.w    z80_ptr(SOUND5B_PREARROWFIRING_VOICES)
(1)    4/   E8BBF : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8BBF : 01                          dc.b    $01
(1)    5/   E8BC0 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8BC0 : 01                          dc.b    $01
(1)    6/   E8BC1 :                     
(1)    7/   E8BC1 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound5B_PreArrowFiring_FM5,	$00, $00
(1)    7/   E8BC1 : 8005                        dc.b    $80,CFM5
(1)    7/   E8BC3 :  (MACRO-2)                  CheckedChannelPointer SOUND5B_PREARROWFIRING_FM5
(1)    7/   E8BC3 : C78B                                dc.w    z80_ptr(SOUND5B_PREARROWFIRING_FM5)
(1)    7/   E8BC5 : 00                                  dc.b    $00
(1)    7/   E8BC6 : 00                          dc.b    $00
(1)    8/   E8BC7 :                     
(1)    9/   E8BC7 :                     ; FM5 Data
(1)   10/   E8BC7 :                     Sound5B_PreArrowFiring_FM5:
(1)   11/   E8BC7 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8BC7 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8BC7 : EF00                                dc.b    $EF,$00
(1)   12/   E8BC9 : 8002 A501 E7        	dc.b	nRst, $02, nC3, $01, smpsNoAttack
(1)   13/   E8BCE :                     
(1)   14/   E8BCE :                     Sound5B_PreArrowFiring_Loop00:
(1)   15/   E8BCE : 01E7                	dc.b	$01, smpsNoAttack
(1)   16/   E8BD0 : (MACRO)             	smpsAlterVol        $02
(1)   16/   E8BD0 : E602                        dc.b    $E6,$02
(1)   17/   E8BD2 : (MACRO)             	smpsLoop            $00, $05, Sound5B_PreArrowFiring_Loop00
(1)   17/   E8BD2 : F7                          dc.b    $F7
(1)   17/   E8BD3 : 0005                        dc.b    $00,$05
(1)   17/   E8BD5 : CE8B                                dc.w    z80_ptr(SOUND5B_PREARROWFIRING_LOOP00)
(1)   18/   E8BD7 : (MACRO)             	smpsStop
(1)   18/   E8BD7 : F2                          dc.b    $F2
(1)   19/   E8BD8 :                     
(1)   20/   E8BD8 :                     Sound5B_PreArrowFiring_Voices:
(1)   21/   E8BD8 :                     ;	Voice $00
(1)   22/   E8BD8 :                     ;	$38
(1)   23/   E8BD8 :                     ;	$0F, $0F, $0F, $0F, 	$1F, $1F, $1F, $0E, 	$00, $00, $00, $00
(1)   24/   E8BD8 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $1F, 	$00, $00, $00, $80
(1)   25/   E8BD8 : (MACRO)             	smpsVcAlgorithm     $00
(1)   25/   E8BD8 : =$0                 vcAlgorithm set $00
(1)   26/   E8BD8 : (MACRO)             	smpsVcFeedback      $07
(1)   26/   E8BD8 : =$7                 vcFeedback set $07
(1)   27/   E8BD8 : (MACRO)             	smpsVcUnusedBits    $00
(1)   27/   E8BD8 : =$0                 vcUnusedBits set $00
(1)   27/   E8BD8 : =$0                 vcD1R1Unk set 0
(1)   27/   E8BD8 : =$0                 vcD1R2Unk set 0
(1)   27/   E8BD8 : =$0                 vcD1R3Unk set 0
(1)   27/   E8BD8 : =$0                 vcD1R4Unk set 0
(1)   28/   E8BD8 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   28/   E8BD8 : =$0                 vcDT1 set $00
(1)   28/   E8BD8 : =$0                 vcDT2 set $00
(1)   28/   E8BD8 : =$0                 vcDT3 set $00
(1)   28/   E8BD8 : =$0                 vcDT4 set $00
(1)   29/   E8BD8 : (MACRO)             	smpsVcCoarseFreq    $0F, $0F, $0F, $0F
(1)   29/   E8BD8 : =$F                 vcCF1 set $0F
(1)   29/   E8BD8 : =$F                 vcCF2 set $0F
(1)   29/   E8BD8 : =$F                 vcCF3 set $0F
(1)   29/   E8BD8 : =$F                 vcCF4 set $0F
(1)   30/   E8BD8 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   30/   E8BD8 : =$0                 vcRS1 set $00
(1)   30/   E8BD8 : =$0                 vcRS2 set $00
(1)   30/   E8BD8 : =$0                 vcRS3 set $00
(1)   30/   E8BD8 : =$0                 vcRS4 set $00
(1)   31/   E8BD8 : (MACRO)             	smpsVcAttackRate    $0E, $1F, $1F, $1F
(1)   31/   E8BD8 : =$E                 vcAR1 set $0E
(1)   31/   E8BD8 : =$1F                vcAR2 set $1F
(1)   31/   E8BD8 : =$1F                vcAR3 set $1F
(1)   31/   E8BD8 : =$1F                vcAR4 set $1F
(1)   32/   E8BD8 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   32/   E8BD8 : =$0                 vcAM1 set $00<<5
(1)   32/   E8BD8 : =$0                 vcAM2 set $00<<5
(1)   32/   E8BD8 : =$0                 vcAM3 set $00<<5
(1)   32/   E8BD8 : =$0                 vcAM4 set $00<<5
(1)   33/   E8BD8 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   33/   E8BD8 : =$0                 vcD1R1 set $00
(1)   33/   E8BD8 : =$0                 vcD1R2 set $00
(1)   33/   E8BD8 : =$0                 vcD1R3 set $00
(1)   33/   E8BD8 : =$0                 vcD1R4 set $00
(1)   34/   E8BD8 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   34/   E8BD8 : =$0                 vcD2R1 set $00
(1)   34/   E8BD8 : =$0                 vcD2R2 set $00
(1)   34/   E8BD8 : =$0                 vcD2R3 set $00
(1)   34/   E8BD8 : =$0                 vcD2R4 set $00
(1)   35/   E8BD8 : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1)   35/   E8BD8 : =$1                 vcDL1 set $01
(1)   35/   E8BD8 : =$0                 vcDL2 set $00
(1)   35/   E8BD8 : =$0                 vcDL3 set $00
(1)   35/   E8BD8 : =$0                 vcDL4 set $00
(1)   36/   E8BD8 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   36/   E8BD8 : =$F                 vcRR1 set $0F
(1)   36/   E8BD8 : =$F                 vcRR2 set $0F
(1)   36/   E8BD8 : =$F                 vcRR3 set $0F
(1)   36/   E8BD8 : =$F                 vcRR4 set $0F
(1)   37/   E8BD8 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $00
(1)   37/   E8BD8 : =$0                 vcTL1 set $00
(1)   37/   E8BD8 : =$0                 vcTL2 set $00
(1)   37/   E8BD8 : =$0                 vcTL3 set $00
(1)   37/   E8BD8 : =$0                 vcTL4 set $00
(1)   37/   E8BD8 : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   37/   E8BD9 :                     ;   0     1     2     3     4     5     6     7
(1)   37/   E8BD9 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   37/   E8BD9 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E8BD9 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E8BD9 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E8BD9 : =$80                vcTLMask1 set $80
(1)   37/   E8BD9 :                     
(1)   37/   E8BD9 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   37/   E8BD9 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   37/   E8BD9 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   37/   E8BD9 : =$80                vcTLMask1 set $80
(1)   37/   E8BD9 : =$0                 vcTL1 set vcTL1&$7F
(1)   37/   E8BD9 : =$0                 vcTL2 set vcTL2&$7F
(1)   37/   E8BD9 : =$0                 vcTL3 set vcTL3&$7F
(1)   37/   E8BD9 : =$0                 vcTL4 set vcTL4&$7F
(1)   37/   E8BD9 :                     
(1)   37/   E8BD9 : 0F0F 0F0F                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   37/   E8BDD : 1F1F 1F0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   37/   E8BE1 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   37/   E8BE5 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   37/   E8BE9 : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   37/   E8BED : 0000 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   E8BF1 :                     
(1)   39/   E8BF1 :                     
  514/   E8BF1 :                        Sound5C:	include "sfx-improved/DC - Fire.asm"
(1)    1/   E8BF1 :                     Sound5C_Fire_Header:
(1)    2/   E8BF1 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8BF1 :                     
(1)    2/   E8BF1 : =$2                 SourceDriver set 2
(1)    2/   E8BF1 :                     
(1)    2/   E8BF1 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8BF1 :                     
(1)    2/   E8BF1 : =$E8BF1             songStart set *
(1)    2/   E8BF1 :                     
(1)    2/   E8BF1 :                     
(1)    3/   E8BF1 : (MACRO)             	smpsHeaderVoice     Sound5C_Fire_Voices
(1)    3/   E8BF1 : 1F8C                                dc.w    z80_ptr(SOUND5C_FIRE_VOICES)
(1)    4/   E8BF3 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8BF3 : 01                          dc.b    $01
(1)    5/   E8BF4 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8BF4 : 02                          dc.b    $02
(1)    6/   E8BF5 :                     
(1)    7/   E8BF5 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound5C_Fire_FM4,	$00, $0E
(1)    7/   E8BF5 : 8004                        dc.b    $80,CFM4
(1)    7/   E8BF7 :  (MACRO-2)                  CheckedChannelPointer SOUND5C_FIRE_FM4
(1)    7/   E8BF7 : 018C                                dc.w    z80_ptr(SOUND5C_FIRE_FM4)
(1)    7/   E8BF9 : 00                                  dc.b    $00
(1)    7/   E8BFA : 0E                          dc.b    $0E
(1)    8/   E8BFB : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound5C_Fire_PSG3,	$00, $00
(1)    8/   E8BFB : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8BFD :  (MACRO-2)                  CheckedChannelPointer SOUND5C_FIRE_PSG3
(1)    8/   E8BFD : 0F8C                                dc.w    z80_ptr(SOUND5C_FIRE_PSG3)
(1)    8/   E8BFF :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8BFF : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8C00 : 00                          dc.b    $00
(1)    9/   E8C01 :                     
(1)   10/   E8C01 :                     ; FM4 Data
(1)   11/   E8C01 :                     Sound5C_Fire_FM4:
(1)   12/   E8C01 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8C01 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8C01 : EF00                                dc.b    $EF,$00
(1)   13/   E8C03 : 8540                	dc.b	nE0, $40
(1)   14/   E8C05 :                     
(1)   15/   E8C05 :                     Sound5C_Fire_Loop00:
(1)   16/   E8C05 : E704                	dc.b	smpsNoAttack, $04
(1)   17/   E8C07 : (MACRO)             	smpsAlterVol        $04
(1)   17/   E8C07 : E604                        dc.b    $E6,$04
(1)   18/   E8C09 : (MACRO)             	smpsLoop            $00, $0A, Sound5C_Fire_Loop00
(1)   18/   E8C09 : F7                          dc.b    $F7
(1)   18/   E8C0A : 000A                        dc.b    $00,$0A
(1)   18/   E8C0C : 058C                                dc.w    z80_ptr(SOUND5C_FIRE_LOOP00)
(1)   19/   E8C0E : (MACRO)             	smpsStop
(1)   19/   E8C0E : F2                          dc.b    $F2
(1)   20/   E8C0F :                     
(1)   21/   E8C0F :                     ; PSG3 Data
(1)   22/   E8C0F :                     Sound5C_Fire_PSG3:
(1)   23/   E8C0F : (MACRO)             	smpsPSGvoice        $00
(1)   23/   E8C0F : F500                        dc.b    $F5,$00
(1)   24/   E8C11 : (MACRO)             	smpsPSGform         $E7
(1)   24/   E8C11 : F3E7                        dc.b    $F3,$E7
(1)   25/   E8C13 : A740                	dc.b	nD3, $40
(1)   26/   E8C15 :                     
(1)   27/   E8C15 :                     Sound5C_Fire_Loop01:
(1)   28/   E8C15 : E708                	dc.b	smpsNoAttack, $08
(1)   29/   E8C17 : (MACRO)             	smpsPSGAlterVol     $01
(1)   29/   E8C17 : EC01                        dc.b    $EC,$01
(1)   30/   E8C19 : (MACRO)             	smpsLoop            $00, $05, Sound5C_Fire_Loop01
(1)   30/   E8C19 : F7                          dc.b    $F7
(1)   30/   E8C1A : 0005                        dc.b    $00,$05
(1)   30/   E8C1C : 158C                                dc.w    z80_ptr(SOUND5C_FIRE_LOOP01)
(1)   31/   E8C1E : (MACRO)             	smpsStop
(1)   31/   E8C1E : F2                          dc.b    $F2
(1)   32/   E8C1F :                     
(1)   33/   E8C1F :                     Sound5C_Fire_Voices:
(1)   34/   E8C1F :                     ;	Voice $00
(1)   35/   E8C1F :                     ;	$FA
(1)   36/   E8C1F :                     ;	$12, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   37/   E8C1F :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$81, $14, $8E, $80
(1)   38/   E8C1F : (MACRO)             	smpsVcAlgorithm     $02
(1)   38/   E8C1F : =$2                 vcAlgorithm set $02
(1)   39/   E8C1F : (MACRO)             	smpsVcFeedback      $07
(1)   39/   E8C1F : =$7                 vcFeedback set $07
(1)   40/   E8C1F : (MACRO)             	smpsVcUnusedBits    $03
(1)   40/   E8C1F : =$3                 vcUnusedBits set $03
(1)   40/   E8C1F : =$0                 vcD1R1Unk set 0
(1)   40/   E8C1F : =$0                 vcD1R2Unk set 0
(1)   40/   E8C1F : =$0                 vcD1R3Unk set 0
(1)   40/   E8C1F : =$0                 vcD1R4Unk set 0
(1)   41/   E8C1F : (MACRO)             	smpsVcDetune        $00, $00, $00, $01
(1)   41/   E8C1F : =$0                 vcDT1 set $00
(1)   41/   E8C1F : =$0                 vcDT2 set $00
(1)   41/   E8C1F : =$0                 vcDT3 set $00
(1)   41/   E8C1F : =$1                 vcDT4 set $01
(1)   42/   E8C1F : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $02
(1)   42/   E8C1F : =$1                 vcCF1 set $01
(1)   42/   E8C1F : =$1                 vcCF2 set $01
(1)   42/   E8C1F : =$1                 vcCF3 set $01
(1)   42/   E8C1F : =$2                 vcCF4 set $02
(1)   43/   E8C1F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   43/   E8C1F : =$0                 vcRS1 set $00
(1)   43/   E8C1F : =$0                 vcRS2 set $00
(1)   43/   E8C1F : =$0                 vcRS3 set $00
(1)   43/   E8C1F : =$0                 vcRS4 set $00
(1)   44/   E8C1F : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   44/   E8C1F : =$1F                vcAR1 set $1F
(1)   44/   E8C1F : =$1F                vcAR2 set $1F
(1)   44/   E8C1F : =$1F                vcAR3 set $1F
(1)   44/   E8C1F : =$1F                vcAR4 set $1F
(1)   45/   E8C1F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   45/   E8C1F : =$0                 vcAM1 set $00<<5
(1)   45/   E8C1F : =$0                 vcAM2 set $00<<5
(1)   45/   E8C1F : =$0                 vcAM3 set $00<<5
(1)   45/   E8C1F : =$0                 vcAM4 set $00<<5
(1)   46/   E8C1F : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   46/   E8C1F : =$0                 vcD1R1 set $00
(1)   46/   E8C1F : =$0                 vcD1R2 set $00
(1)   46/   E8C1F : =$0                 vcD1R3 set $00
(1)   46/   E8C1F : =$0                 vcD1R4 set $00
(1)   47/   E8C1F : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   47/   E8C1F : =$0                 vcD2R1 set $00
(1)   47/   E8C1F : =$0                 vcD2R2 set $00
(1)   47/   E8C1F : =$0                 vcD2R3 set $00
(1)   47/   E8C1F : =$0                 vcD2R4 set $00
(1)   48/   E8C1F : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   48/   E8C1F : =$0                 vcDL1 set $00
(1)   48/   E8C1F : =$0                 vcDL2 set $00
(1)   48/   E8C1F : =$0                 vcDL3 set $00
(1)   48/   E8C1F : =$0                 vcDL4 set $00
(1)   49/   E8C1F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   49/   E8C1F : =$F                 vcRR1 set $0F
(1)   49/   E8C1F : =$F                 vcRR2 set $0F
(1)   49/   E8C1F : =$F                 vcRR3 set $0F
(1)   49/   E8C1F : =$F                 vcRR4 set $0F
(1)   50/   E8C1F : (MACRO)             	smpsVcTotalLevel    $00, $8E, $14, $81
(1)   50/   E8C1F : =$0                 vcTL1 set $00
(1)   50/   E8C1F : =$8E                vcTL2 set $8E
(1)   50/   E8C1F : =$14                vcTL3 set $14
(1)   50/   E8C1F : =$81                vcTL4 set $81
(1)   50/   E8C1F : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   50/   E8C20 :                     ;   0     1     2     3     4     5     6     7
(1)   50/   E8C20 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   50/   E8C20 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   50/   E8C20 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   50/   E8C20 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   50/   E8C20 : =$80                vcTLMask1 set $80
(1)   50/   E8C20 :                     
(1)   50/   E8C20 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   50/   E8C20 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   50/   E8C20 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   50/   E8C20 : =$80                vcTLMask1 set $80
(1)   50/   E8C20 : =$0                 vcTL1 set vcTL1&$7F
(1)   50/   E8C20 : =$E                 vcTL2 set vcTL2&$7F
(1)   50/   E8C20 : =$14                vcTL3 set vcTL3&$7F
(1)   50/   E8C20 : =$1                 vcTL4 set vcTL4&$7F
(1)   50/   E8C20 :                     
(1)   50/   E8C20 : 1201 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   50/   E8C24 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   50/   E8C28 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   50/   E8C2C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   50/   E8C30 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   50/   E8C34 : 0114 0E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   51/   E8C38 :                     
(1)   52/   E8C38 :                     
  515/   E8C38 :                        Sound5D:	include "sfx-improved/DD - Arrow Stick.asm"
(1)    1/   E8C38 :                     Sound5D_ArrowStick_Header:
(1)    2/   E8C38 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8C38 :                     
(1)    2/   E8C38 : =$2                 SourceDriver set 2
(1)    2/   E8C38 :                     
(1)    2/   E8C38 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8C38 :                     
(1)    2/   E8C38 : =$E8C38             songStart set *
(1)    2/   E8C38 :                     
(1)    2/   E8C38 :                     
(1)    3/   E8C38 : (MACRO)             	smpsHeaderVoice     Sound5D_ArrowStick_Voices
(1)    3/   E8C38 : 478C                                dc.w    z80_ptr(SOUND5D_ARROWSTICK_VOICES)
(1)    4/   E8C3A : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8C3A : 01                          dc.b    $01
(1)    5/   E8C3B : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8C3B : 01                          dc.b    $01
(1)    6/   E8C3C :                     
(1)    7/   E8C3C : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound5D_ArrowStick_FM5,	$00, $00
(1)    7/   E8C3C : 8005                        dc.b    $80,CFM5
(1)    7/   E8C3E :  (MACRO-2)                  CheckedChannelPointer SOUND5D_ARROWSTICK_FM5
(1)    7/   E8C3E : 428C                                dc.w    z80_ptr(SOUND5D_ARROWSTICK_FM5)
(1)    7/   E8C40 : 00                                  dc.b    $00
(1)    7/   E8C41 : 00                          dc.b    $00
(1)    8/   E8C42 :                     
(1)    9/   E8C42 :                     ; FM5 Data
(1)   10/   E8C42 :                     Sound5D_ArrowStick_FM5:
(1)   11/   E8C42 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8C42 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8C42 : EF00                                dc.b    $EF,$00
(1)   12/   E8C44 : C004                	dc.b	nEb5, $04
(1)   13/   E8C46 : (MACRO)             	smpsStop
(1)   13/   E8C46 : F2                          dc.b    $F2
(1)   14/   E8C47 :                     
(1)   15/   E8C47 :                     Sound5D_ArrowStick_Voices:
(1)   16/   E8C47 :                     ;	Voice $00
(1)   17/   E8C47 :                     ;	$28
(1)   18/   E8C47 :                     ;	$2F, $5F, $37, $2B, 	$1F, $1F, $1F, $1F, 	$15, $15, $15, $13
(1)   19/   E8C47 :                     ;	$13, $0C, $0D, $10, 	$2F, $2F, $3F, $2F, 	$00, $10, $1F, $80
(1)   20/   E8C47 : (MACRO)             	smpsVcAlgorithm     $00
(1)   20/   E8C47 : =$0                 vcAlgorithm set $00
(1)   21/   E8C47 : (MACRO)             	smpsVcFeedback      $05
(1)   21/   E8C47 : =$5                 vcFeedback set $05
(1)   22/   E8C47 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8C47 : =$0                 vcUnusedBits set $00
(1)   22/   E8C47 : =$0                 vcD1R1Unk set 0
(1)   22/   E8C47 : =$0                 vcD1R2Unk set 0
(1)   22/   E8C47 : =$0                 vcD1R3Unk set 0
(1)   22/   E8C47 : =$0                 vcD1R4Unk set 0
(1)   23/   E8C47 : (MACRO)             	smpsVcDetune        $02, $03, $05, $02
(1)   23/   E8C47 : =$2                 vcDT1 set $02
(1)   23/   E8C47 : =$3                 vcDT2 set $03
(1)   23/   E8C47 : =$5                 vcDT3 set $05
(1)   23/   E8C47 : =$2                 vcDT4 set $02
(1)   24/   E8C47 : (MACRO)             	smpsVcCoarseFreq    $0B, $07, $0F, $0F
(1)   24/   E8C47 : =$B                 vcCF1 set $0B
(1)   24/   E8C47 : =$7                 vcCF2 set $07
(1)   24/   E8C47 : =$F                 vcCF3 set $0F
(1)   24/   E8C47 : =$F                 vcCF4 set $0F
(1)   25/   E8C47 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8C47 : =$0                 vcRS1 set $00
(1)   25/   E8C47 : =$0                 vcRS2 set $00
(1)   25/   E8C47 : =$0                 vcRS3 set $00
(1)   25/   E8C47 : =$0                 vcRS4 set $00
(1)   26/   E8C47 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E8C47 : =$1F                vcAR1 set $1F
(1)   26/   E8C47 : =$1F                vcAR2 set $1F
(1)   26/   E8C47 : =$1F                vcAR3 set $1F
(1)   26/   E8C47 : =$1F                vcAR4 set $1F
(1)   27/   E8C47 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8C47 : =$0                 vcAM1 set $00<<5
(1)   27/   E8C47 : =$0                 vcAM2 set $00<<5
(1)   27/   E8C47 : =$0                 vcAM3 set $00<<5
(1)   27/   E8C47 : =$0                 vcAM4 set $00<<5
(1)   28/   E8C47 : (MACRO)             	smpsVcDecayRate1    $13, $15, $15, $15
(1)   28/   E8C47 : =$13                vcD1R1 set $13
(1)   28/   E8C47 : =$15                vcD1R2 set $15
(1)   28/   E8C47 : =$15                vcD1R3 set $15
(1)   28/   E8C47 : =$15                vcD1R4 set $15
(1)   29/   E8C47 : (MACRO)             	smpsVcDecayRate2    $10, $0D, $0C, $13
(1)   29/   E8C47 : =$10                vcD2R1 set $10
(1)   29/   E8C47 : =$D                 vcD2R2 set $0D
(1)   29/   E8C47 : =$C                 vcD2R3 set $0C
(1)   29/   E8C47 : =$13                vcD2R4 set $13
(1)   30/   E8C47 : (MACRO)             	smpsVcDecayLevel    $02, $03, $02, $02
(1)   30/   E8C47 : =$2                 vcDL1 set $02
(1)   30/   E8C47 : =$3                 vcDL2 set $03
(1)   30/   E8C47 : =$2                 vcDL3 set $02
(1)   30/   E8C47 : =$2                 vcDL4 set $02
(1)   31/   E8C47 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E8C47 : =$F                 vcRR1 set $0F
(1)   31/   E8C47 : =$F                 vcRR2 set $0F
(1)   31/   E8C47 : =$F                 vcRR3 set $0F
(1)   31/   E8C47 : =$F                 vcRR4 set $0F
(1)   32/   E8C47 : (MACRO)             	smpsVcTotalLevel    $00, $1F, $10, $00
(1)   32/   E8C47 : =$0                 vcTL1 set $00
(1)   32/   E8C47 : =$1F                vcTL2 set $1F
(1)   32/   E8C47 : =$10                vcTL3 set $10
(1)   32/   E8C47 : =$0                 vcTL4 set $00
(1)   32/   E8C47 : 28                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8C48 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8C48 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8C48 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8C48 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8C48 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8C48 : =$80                vcTLMask1 set $80
(1)   32/   E8C48 :                     
(1)   32/   E8C48 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8C48 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8C48 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8C48 : =$80                vcTLMask1 set $80
(1)   32/   E8C48 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8C48 : =$1F                vcTL2 set vcTL2&$7F
(1)   32/   E8C48 : =$10                vcTL3 set vcTL3&$7F
(1)   32/   E8C48 : =$0                 vcTL4 set vcTL4&$7F
(1)   32/   E8C48 :                     
(1)   32/   E8C48 : 2F5F 372B                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8C4C : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8C50 : 1515 1513                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8C54 : 130C 0D10                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8C58 : 2F2F 3F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8C5C : 0010 1F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8C60 :                     
(1)   34/   E8C60 :                     
  516/   E8C60 :                        Sound5E:	include "sfx-improved/DE - Helicopter.asm"
(1)    1/   E8C60 :                     Sound5E_WingFortress_Header:
(1)    2/   E8C60 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8C60 :                     
(1)    2/   E8C60 : =$2                 SourceDriver set 2
(1)    2/   E8C60 :                     
(1)    2/   E8C60 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8C60 :                     
(1)    2/   E8C60 : =$E8C60             songStart set *
(1)    2/   E8C60 :                     
(1)    2/   E8C60 :                     
(1)    3/   E8C60 : (MACRO)             	smpsHeaderVoice     Sound5E_WingFortress_Voices
(1)    3/   E8C60 : 818C                                dc.w    z80_ptr(SOUND5E_WINGFORTRESS_VOICES)
(1)    4/   E8C62 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8C62 : 01                          dc.b    $01
(1)    5/   E8C63 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8C63 : 01                          dc.b    $01
(1)    6/   E8C64 :                     
(1)    7/   E8C64 : (MACRO)             	smpsHeaderSFXChannel cFM3, Sound5E_WingFortress_FM3,	$14, $05
(1)    7/   E8C64 : 8002                        dc.b    $80,CFM3
(1)    7/   E8C66 :  (MACRO-2)                  CheckedChannelPointer SOUND5E_WINGFORTRESS_FM3
(1)    7/   E8C66 : 6A8C                                dc.w    z80_ptr(SOUND5E_WINGFORTRESS_FM3)
(1)    7/   E8C68 : 14                                  dc.b    $14
(1)    7/   E8C69 : 05                          dc.b    $05
(1)    8/   E8C6A :                     
(1)    9/   E8C6A :                     ; FM3 Data
(1)   10/   E8C6A :                     Sound5E_WingFortress_FM3:
(1)   11/   E8C6A : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8C6A :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8C6A : EF00                                dc.b    $EF,$00
(1)   12/   E8C6C :                     
(1)   13/   E8C6C :                     Sound5E_WingFortress_Loop00:
(1)   14/   E8C6C : 9502 9501           	dc.b	nAb1, $02, nAb1, $01
(1)   15/   E8C70 : (MACRO)             	smpsLoop            $00, $13, Sound5E_WingFortress_Loop00
(1)   15/   E8C70 : F7                          dc.b    $F7
(1)   15/   E8C71 : 0013                        dc.b    $00,$13
(1)   15/   E8C73 : 6C8C                                dc.w    z80_ptr(SOUND5E_WINGFORTRESS_LOOP00)
(1)   16/   E8C75 :                     
(1)   17/   E8C75 :                     Sound5E_WingFortress_Loop01:
(1)   18/   E8C75 : 9502 9501           	dc.b	nAb1, $02, nAb1, $01
(1)   19/   E8C79 : (MACRO)             	smpsAlterVol        $01
(1)   19/   E8C79 : E601                        dc.b    $E6,$01
(1)   20/   E8C7B : (MACRO)             	smpsLoop            $00, $1B, Sound5E_WingFortress_Loop01
(1)   20/   E8C7B : F7                          dc.b    $F7
(1)   20/   E8C7C : 001B                        dc.b    $00,$1B
(1)   20/   E8C7E : 758C                                dc.w    z80_ptr(SOUND5E_WINGFORTRESS_LOOP01)
(1)   21/   E8C80 : (MACRO)             	smpsStop
(1)   21/   E8C80 : F2                          dc.b    $F2
(1)   22/   E8C81 :                     
(1)   23/   E8C81 :                     Sound5E_WingFortress_Voices:
(1)   24/   E8C81 :                     ;	Voice $00
(1)   25/   E8C81 :                     ;	$35
(1)   26/   E8C81 :                     ;	$30, $40, $44, $51, 	$1F, $1F, $1F, $1F, 	$10, $13, $00, $15
(1)   27/   E8C81 :                     ;	$1F, $1F, $00, $1A, 	$7F, $7F, $0F, $5F, 	$02, $80, $A8, $80
(1)   28/   E8C81 : (MACRO)             	smpsVcAlgorithm     $05
(1)   28/   E8C81 : =$5                 vcAlgorithm set $05
(1)   29/   E8C81 : (MACRO)             	smpsVcFeedback      $06
(1)   29/   E8C81 : =$6                 vcFeedback set $06
(1)   30/   E8C81 : (MACRO)             	smpsVcUnusedBits    $00
(1)   30/   E8C81 : =$0                 vcUnusedBits set $00
(1)   30/   E8C81 : =$0                 vcD1R1Unk set 0
(1)   30/   E8C81 : =$0                 vcD1R2Unk set 0
(1)   30/   E8C81 : =$0                 vcD1R3Unk set 0
(1)   30/   E8C81 : =$0                 vcD1R4Unk set 0
(1)   31/   E8C81 : (MACRO)             	smpsVcDetune        $05, $04, $04, $03
(1)   31/   E8C81 : =$5                 vcDT1 set $05
(1)   31/   E8C81 : =$4                 vcDT2 set $04
(1)   31/   E8C81 : =$4                 vcDT3 set $04
(1)   31/   E8C81 : =$3                 vcDT4 set $03
(1)   32/   E8C81 : (MACRO)             	smpsVcCoarseFreq    $01, $04, $00, $00
(1)   32/   E8C81 : =$1                 vcCF1 set $01
(1)   32/   E8C81 : =$4                 vcCF2 set $04
(1)   32/   E8C81 : =$0                 vcCF3 set $00
(1)   32/   E8C81 : =$0                 vcCF4 set $00
(1)   33/   E8C81 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   33/   E8C81 : =$0                 vcRS1 set $00
(1)   33/   E8C81 : =$0                 vcRS2 set $00
(1)   33/   E8C81 : =$0                 vcRS3 set $00
(1)   33/   E8C81 : =$0                 vcRS4 set $00
(1)   34/   E8C81 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   34/   E8C81 : =$1F                vcAR1 set $1F
(1)   34/   E8C81 : =$1F                vcAR2 set $1F
(1)   34/   E8C81 : =$1F                vcAR3 set $1F
(1)   34/   E8C81 : =$1F                vcAR4 set $1F
(1)   35/   E8C81 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   35/   E8C81 : =$0                 vcAM1 set $00<<5
(1)   35/   E8C81 : =$0                 vcAM2 set $00<<5
(1)   35/   E8C81 : =$0                 vcAM3 set $00<<5
(1)   35/   E8C81 : =$0                 vcAM4 set $00<<5
(1)   36/   E8C81 : (MACRO)             	smpsVcDecayRate1    $15, $00, $13, $10
(1)   36/   E8C81 : =$15                vcD1R1 set $15
(1)   36/   E8C81 : =$0                 vcD1R2 set $00
(1)   36/   E8C81 : =$13                vcD1R3 set $13
(1)   36/   E8C81 : =$10                vcD1R4 set $10
(1)   37/   E8C81 : (MACRO)             	smpsVcDecayRate2    $1A, $00, $1F, $1F
(1)   37/   E8C81 : =$1A                vcD2R1 set $1A
(1)   37/   E8C81 : =$0                 vcD2R2 set $00
(1)   37/   E8C81 : =$1F                vcD2R3 set $1F
(1)   37/   E8C81 : =$1F                vcD2R4 set $1F
(1)   38/   E8C81 : (MACRO)             	smpsVcDecayLevel    $05, $00, $07, $07
(1)   38/   E8C81 : =$5                 vcDL1 set $05
(1)   38/   E8C81 : =$0                 vcDL2 set $00
(1)   38/   E8C81 : =$7                 vcDL3 set $07
(1)   38/   E8C81 : =$7                 vcDL4 set $07
(1)   39/   E8C81 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   39/   E8C81 : =$F                 vcRR1 set $0F
(1)   39/   E8C81 : =$F                 vcRR2 set $0F
(1)   39/   E8C81 : =$F                 vcRR3 set $0F
(1)   39/   E8C81 : =$F                 vcRR4 set $0F
(1)   40/   E8C81 : (MACRO)             	smpsVcTotalLevel    $00, $28, $00, $02
(1)   40/   E8C81 : =$0                 vcTL1 set $00
(1)   40/   E8C81 : =$28                vcTL2 set $28
(1)   40/   E8C81 : =$0                 vcTL3 set $00
(1)   40/   E8C81 : =$2                 vcTL4 set $02
(1)   40/   E8C81 : 35                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   40/   E8C82 :                     ;   0     1     2     3     4     5     6     7
(1)   40/   E8C82 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   40/   E8C82 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   40/   E8C82 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   40/   E8C82 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   40/   E8C82 : =$80                vcTLMask1 set $80
(1)   40/   E8C82 :                     
(1)   40/   E8C82 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   40/   E8C82 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   40/   E8C82 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   40/   E8C82 : =$80                vcTLMask1 set $80
(1)   40/   E8C82 : =$0                 vcTL1 set vcTL1&$7F
(1)   40/   E8C82 : =$28                vcTL2 set vcTL2&$7F
(1)   40/   E8C82 : =$0                 vcTL3 set vcTL3&$7F
(1)   40/   E8C82 : =$2                 vcTL4 set vcTL4&$7F
(1)   40/   E8C82 :                     
(1)   40/   E8C82 : 3040 4451                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   40/   E8C86 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   40/   E8C8A : 1013 0015                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   40/   E8C8E : 1F1F 001A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   40/   E8C92 : 7F7F 0F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   40/   E8C96 : 0280 A880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   41/   E8C9A :                     
(1)   42/   E8C9A :                     
  517/   E8C9A :                        Sound5F:	include "sfx-improved/DF - Super Transform.asm"
(1)    1/   E8C9A :                     Sound5F_SuperTransform_Header:
(1)    2/   E8C9A : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8C9A :                     
(1)    2/   E8C9A : =$2                 SourceDriver set 2
(1)    2/   E8C9A :                     
(1)    2/   E8C9A : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8C9A :                     
(1)    2/   E8C9A : =$E8C9A             songStart set *
(1)    2/   E8C9A :                     
(1)    2/   E8C9A :                     
(1)    3/   E8C9A : (MACRO)             	smpsHeaderVoice     Sound5F_SuperTransform_Voices
(1)    3/   E8C9A : 048D                                dc.w    z80_ptr(SOUND5F_SUPERTRANSFORM_VOICES)
(1)    4/   E8C9C : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8C9C : 01                          dc.b    $01
(1)    5/   E8C9D : (MACRO)             	smpsHeaderChanSFX   $03
(1)    5/   E8C9D : 03                          dc.b    $03
(1)    6/   E8C9E :                     
(1)    7/   E8C9E : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound5F_SuperTransform_FM5,	$00, $00
(1)    7/   E8C9E : 8005                        dc.b    $80,CFM5
(1)    7/   E8CA0 :  (MACRO-2)                  CheckedChannelPointer SOUND5F_SUPERTRANSFORM_FM5
(1)    7/   E8CA0 : B08C                                dc.w    z80_ptr(SOUND5F_SUPERTRANSFORM_FM5)
(1)    7/   E8CA2 : 00                                  dc.b    $00
(1)    7/   E8CA3 : 00                          dc.b    $00
(1)    8/   E8CA4 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound5F_6C_PSG3,	$00, $00
(1)    8/   E8CA4 : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8CA6 :  (MACRO-2)                  CheckedChannelPointer SOUND5F_6C_PSG3
(1)    8/   E8CA6 : D08C                                dc.w    z80_ptr(SOUND5F_6C_PSG3)
(1)    8/   E8CA8 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8CA8 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8CA9 : 00                          dc.b    $00
(1)    9/   E8CAA : (MACRO)             	smpsHeaderSFXChannel cPSG2, Sound5F_6C_PSG2,	$00, $00
(1)    9/   E8CAA : 80A0                        dc.b    $80,CPSG2
(1)    9/   E8CAC :  (MACRO-2)                  CheckedChannelPointer SOUND5F_6C_PSG2
(1)    9/   E8CAC : E58C                                dc.w    z80_ptr(SOUND5F_6C_PSG2)
(1)    9/   E8CAE :  (MACRO-2)                          PSGPitchConvert $00
(1)    9/   E8CAE : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    9/   E8CAF : 00                          dc.b    $00
(1)   10/   E8CB0 :                     
(1)   11/   E8CB0 :                     ; FM5 Data
(1)   12/   E8CB0 :                     Sound5F_SuperTransform_FM5:
(1)   13/   E8CB0 : (MACRO)             	smpsSetvoice        $00
(1)   13/   E8CB0 :  (MACRO-2)                  smpsFMvoice $00
(1)   13/   E8CB0 : EF00                                dc.b    $EF,$00
(1)   14/   E8CB2 : (MACRO)             	smpsModSet          $01, $01, $C5, $1A
(1)   14/   E8CB2 : F0                          dc.b    $F0
(1)   14/   E8CB3 : 0201 C51B                           dc.b    $01+1,$01,$C5,(($1A+1) * $01) & $FF
(1)   14/   E8CB7 :                             ;dc.b   $01,$C5,$1A
(1)   15/   E8CB7 : CD07                	dc.b	nE6, $07
(1)   16/   E8CB9 : (MACRO)             	smpsAlterVol        $0A
(1)   16/   E8CB9 : E60A                        dc.b    $E6,$0A
(1)   17/   E8CBB : 8006                	dc.b	nRst, $06
(1)   18/   E8CBD : (MACRO)             	smpsSetvoice        $01
(1)   18/   E8CBD :  (MACRO-2)                  smpsFMvoice $01
(1)   18/   E8CBD : EF01                                dc.b    $EF,$01
(1)   19/   E8CBF : (MACRO)             	smpsModSet          $01, $01, $11, $FF
(1)   19/   E8CBF : F0                          dc.b    $F0
(1)   19/   E8CC0 : 0201 1100                           dc.b    $01+1,$01,$11,(($FF+1) * $01) & $FF
(1)   19/   E8CC4 :                             ;dc.b   $01,$11,$FF
(1)   20/   E8CC4 : A228                	dc.b	nA2, $28
(1)   21/   E8CC6 :                     
(1)   22/   E8CC6 :                     Sound5F_SuperTransform_Loop00:
(1)   23/   E8CC6 : E703                	dc.b	smpsNoAttack, $03
(1)   24/   E8CC8 : (MACRO)             	smpsAlterVol        $03
(1)   24/   E8CC8 : E603                        dc.b    $E6,$03
(1)   25/   E8CCA : (MACRO)             	smpsLoop            $00, $05, Sound5F_SuperTransform_Loop00
(1)   25/   E8CCA : F7                          dc.b    $F7
(1)   25/   E8CCB : 0005                        dc.b    $00,$05
(1)   25/   E8CCD : C68C                                dc.w    z80_ptr(SOUND5F_SUPERTRANSFORM_LOOP00)
(1)   26/   E8CCF : (MACRO)             	smpsStop
(1)   26/   E8CCF : F2                          dc.b    $F2
(1)   27/   E8CD0 :                     
(1)   28/   E8CD0 :                     ; PSG3 Data
(1)   29/   E8CD0 :                     Sound5F_6C_PSG3:
(1)   30/   E8CD0 : 8007                	dc.b	nRst, $07
(1)   31/   E8CD2 : (MACRO)             	smpsModSet          $01, $02, $05, $FF
(1)   31/   E8CD2 : F0                          dc.b    $F0
(1)   31/   E8CD3 : 0202 0500                           dc.b    $01+1,$02,$05,(($FF+1) * $02) & $FF
(1)   31/   E8CD7 :                             ;dc.b   $02,$05,$FF
(1)   32/   E8CD7 : (MACRO)             	smpsPSGform         $E7
(1)   32/   E8CD7 : F3E7                        dc.b    $F3,$E7
(1)   33/   E8CD9 : BB1D                	dc.b	nBb4, $1D
(1)   34/   E8CDB :                     
(1)   35/   E8CDB :                     Sound5F_SuperTransform_Loop03:
(1)   36/   E8CDB : E707                	dc.b	smpsNoAttack, $07
(1)   37/   E8CDD : (MACRO)             	smpsPSGAlterVol     $01
(1)   37/   E8CDD : EC01                        dc.b    $EC,$01
(1)   38/   E8CDF : (MACRO)             	smpsLoop            $00, $10, Sound5F_SuperTransform_Loop03
(1)   38/   E8CDF : F7                          dc.b    $F7
(1)   38/   E8CE0 : 0010                        dc.b    $00,$10
(1)   38/   E8CE2 : DB8C                                dc.w    z80_ptr(SOUND5F_SUPERTRANSFORM_LOOP03)
(1)   39/   E8CE4 : (MACRO)             	smpsStop
(1)   39/   E8CE4 : F2                          dc.b    $F2
(1)   40/   E8CE5 :                     
(1)   41/   E8CE5 :                     ; PSG2 Data
(1)   42/   E8CE5 :                     Sound5F_6C_PSG2:
(1)   43/   E8CE5 : 8016                	dc.b	nRst, $16
(1)   44/   E8CE7 : (MACRO)             	smpsPSGvoice        fTone_03
(1)   44/   E8CE7 : F503                        dc.b    $F5,FTONE_03
(1)   45/   E8CE9 :                     
(1)   46/   E8CE9 :                     Sound5F_SuperTransform_Loop01:
(1)   47/   E8CE9 : BF04 C1C3           	dc.b	nD5, $04, nE5, nFs5
(1)   48/   E8CED : (MACRO)             	smpsPSGAlterVol     $01
(1)   48/   E8CED : EC01                        dc.b    $EC,$01
(1)   49/   E8CEF : (MACRO)             	smpsAlterPitch      $FF
(1)   49/   E8CEF :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   49/   E8CEF : FBFF                                dc.b    $FB,$FF
(1)   50/   E8CF1 : (MACRO)             	smpsLoop            $00, $05, Sound5F_SuperTransform_Loop01
(1)   50/   E8CF1 : F7                          dc.b    $F7
(1)   50/   E8CF2 : 0005                        dc.b    $00,$05
(1)   50/   E8CF4 : E98C                                dc.w    z80_ptr(SOUND5F_SUPERTRANSFORM_LOOP01)
(1)   51/   E8CF6 :                     
(1)   52/   E8CF6 :                     Sound5F_SuperTransform_Loop02:
(1)   53/   E8CF6 : BF04 C1C3           	dc.b	nD5, $04, nE5, nFs5
(1)   54/   E8CFA : (MACRO)             	smpsPSGAlterVol     $01
(1)   54/   E8CFA : EC01                        dc.b    $EC,$01
(1)   55/   E8CFC : (MACRO)             	smpsAlterPitch      $01
(1)   55/   E8CFC :  (MACRO-2)                  smpsChangeTransposition $01
(1)   55/   E8CFC : FB01                                dc.b    $FB,$01
(1)   56/   E8CFE : (MACRO)             	smpsLoop            $00, $07, Sound5F_SuperTransform_Loop02
(1)   56/   E8CFE : F7                          dc.b    $F7
(1)   56/   E8CFF : 0007                        dc.b    $00,$07
(1)   56/   E8D01 : F68C                                dc.w    z80_ptr(SOUND5F_SUPERTRANSFORM_LOOP02)
(1)   57/   E8D03 : (MACRO)             	smpsStop
(1)   57/   E8D03 : F2                          dc.b    $F2
(1)   58/   E8D04 :                     
(1)   59/   E8D04 :                     Sound5F_SuperTransform_Voices:
(1)   60/   E8D04 :                     ;	Voice $00
(1)   61/   E8D04 :                     ;	$FD
(1)   62/   E8D04 :                     ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
(1)   63/   E8D04 :                     ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
(1)   64/   E8D04 : (MACRO)             	smpsVcAlgorithm     $05
(1)   64/   E8D04 : =$5                 vcAlgorithm set $05
(1)   65/   E8D04 : (MACRO)             	smpsVcFeedback      $07
(1)   65/   E8D04 : =$7                 vcFeedback set $07
(1)   66/   E8D04 : (MACRO)             	smpsVcUnusedBits    $03
(1)   66/   E8D04 : =$3                 vcUnusedBits set $03
(1)   66/   E8D04 : =$0                 vcD1R1Unk set 0
(1)   66/   E8D04 : =$0                 vcD1R2Unk set 0
(1)   66/   E8D04 : =$0                 vcD1R3Unk set 0
(1)   66/   E8D04 : =$0                 vcD1R4Unk set 0
(1)   67/   E8D04 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   67/   E8D04 : =$0                 vcDT1 set $00
(1)   67/   E8D04 : =$0                 vcDT2 set $00
(1)   67/   E8D04 : =$0                 vcDT3 set $00
(1)   67/   E8D04 : =$0                 vcDT4 set $00
(1)   68/   E8D04 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $03, $09
(1)   68/   E8D04 : =$0                 vcCF1 set $00
(1)   68/   E8D04 : =$0                 vcCF2 set $00
(1)   68/   E8D04 : =$3                 vcCF3 set $03
(1)   68/   E8D04 : =$9                 vcCF4 set $09
(1)   69/   E8D04 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   69/   E8D04 : =$0                 vcRS1 set $00
(1)   69/   E8D04 : =$0                 vcRS2 set $00
(1)   69/   E8D04 : =$0                 vcRS3 set $00
(1)   69/   E8D04 : =$0                 vcRS4 set $00
(1)   70/   E8D04 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   70/   E8D04 : =$1F                vcAR1 set $1F
(1)   70/   E8D04 : =$1F                vcAR2 set $1F
(1)   70/   E8D04 : =$1F                vcAR3 set $1F
(1)   70/   E8D04 : =$1F                vcAR4 set $1F
(1)   71/   E8D04 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   71/   E8D04 : =$0                 vcAM1 set $00<<5
(1)   71/   E8D04 : =$0                 vcAM2 set $00<<5
(1)   71/   E8D04 : =$0                 vcAM3 set $00<<5
(1)   71/   E8D04 : =$0                 vcAM4 set $00<<5
(1)   72/   E8D04 : (MACRO)             	smpsVcDecayRate1    $0C, $0C, $0C, $10
(1)   72/   E8D04 : =$C                 vcD1R1 set $0C
(1)   72/   E8D04 : =$C                 vcD1R2 set $0C
(1)   72/   E8D04 : =$C                 vcD1R3 set $0C
(1)   72/   E8D04 : =$10                vcD1R4 set $10
(1)   73/   E8D04 : (MACRO)             	smpsVcDecayRate2    $05, $10, $1F, $0B
(1)   73/   E8D04 : =$5                 vcD2R1 set $05
(1)   73/   E8D04 : =$10                vcD2R2 set $10
(1)   73/   E8D04 : =$1F                vcD2R3 set $1F
(1)   73/   E8D04 : =$B                 vcD2R4 set $0B
(1)   74/   E8D04 : (MACRO)             	smpsVcDecayLevel    $02, $04, $02, $01
(1)   74/   E8D04 : =$2                 vcDL1 set $02
(1)   74/   E8D04 : =$4                 vcDL2 set $04
(1)   74/   E8D04 : =$2                 vcDL3 set $02
(1)   74/   E8D04 : =$1                 vcDL4 set $01
(1)   75/   E8D04 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   75/   E8D04 : =$F                 vcRR1 set $0F
(1)   75/   E8D04 : =$F                 vcRR2 set $0F
(1)   75/   E8D04 : =$F                 vcRR3 set $0F
(1)   75/   E8D04 : =$F                 vcRR4 set $0F
(1)   76/   E8D04 : (MACRO)             	smpsVcTotalLevel    $0E, $12, $04, $09
(1)   76/   E8D04 : =$E                 vcTL1 set $0E
(1)   76/   E8D04 : =$12                vcTL2 set $12
(1)   76/   E8D04 : =$4                 vcTL3 set $04
(1)   76/   E8D04 : =$9                 vcTL4 set $09
(1)   76/   E8D04 : FD                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   76/   E8D05 :                     ;   0     1     2     3     4     5     6     7
(1)   76/   E8D05 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   76/   E8D05 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   76/   E8D05 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   76/   E8D05 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   76/   E8D05 : =$80                vcTLMask1 set $80
(1)   76/   E8D05 :                     
(1)   76/   E8D05 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   76/   E8D05 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   76/   E8D05 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   76/   E8D05 : =$80                vcTLMask1 set $80
(1)   76/   E8D05 : =$E                 vcTL1 set vcTL1&$7F
(1)   76/   E8D05 : =$12                vcTL2 set vcTL2&$7F
(1)   76/   E8D05 : =$4                 vcTL3 set vcTL3&$7F
(1)   76/   E8D05 : =$9                 vcTL4 set vcTL4&$7F
(1)   76/   E8D05 :                     
(1)   76/   E8D05 : 0903 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   76/   E8D09 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   76/   E8D0D : 100C 0C0C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   76/   E8D11 : 0B1F 1005                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   76/   E8D15 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   76/   E8D19 : 0984 928E                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   77/   E8D1D :                     
(1)   78/   E8D1D :                     ;	Voice $01
(1)   79/   E8D1D :                     ;	$3A
(1)   80/   E8D1D :                     ;	$70, $04, $30, $01, 	$0F, $19, $14, $16, 	$08, $0B, $0A, $05
(1)   81/   E8D1D :                     ;	$03, $03, $03, $05, 	$1F, $8F, $6F, $5F, 	$1F, $1F, $22, $80
(1)   82/   E8D1D : (MACRO)             	smpsVcAlgorithm     $02
(1)   82/   E8D1D : =$2                 vcAlgorithm set $02
(1)   83/   E8D1D : (MACRO)             	smpsVcFeedback      $07
(1)   83/   E8D1D : =$7                 vcFeedback set $07
(1)   84/   E8D1D : (MACRO)             	smpsVcUnusedBits    $00
(1)   84/   E8D1D : =$0                 vcUnusedBits set $00
(1)   84/   E8D1D : =$0                 vcD1R1Unk set 0
(1)   84/   E8D1D : =$0                 vcD1R2Unk set 0
(1)   84/   E8D1D : =$0                 vcD1R3Unk set 0
(1)   84/   E8D1D : =$0                 vcD1R4Unk set 0
(1)   85/   E8D1D : (MACRO)             	smpsVcDetune        $00, $03, $00, $07
(1)   85/   E8D1D : =$0                 vcDT1 set $00
(1)   85/   E8D1D : =$3                 vcDT2 set $03
(1)   85/   E8D1D : =$0                 vcDT3 set $00
(1)   85/   E8D1D : =$7                 vcDT4 set $07
(1)   86/   E8D1D : (MACRO)             	smpsVcCoarseFreq    $01, $00, $04, $00
(1)   86/   E8D1D : =$1                 vcCF1 set $01
(1)   86/   E8D1D : =$0                 vcCF2 set $00
(1)   86/   E8D1D : =$4                 vcCF3 set $04
(1)   86/   E8D1D : =$0                 vcCF4 set $00
(1)   87/   E8D1D : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   87/   E8D1D : =$0                 vcRS1 set $00
(1)   87/   E8D1D : =$0                 vcRS2 set $00
(1)   87/   E8D1D : =$0                 vcRS3 set $00
(1)   87/   E8D1D : =$0                 vcRS4 set $00
(1)   88/   E8D1D : (MACRO)             	smpsVcAttackRate    $16, $14, $19, $0F
(1)   88/   E8D1D : =$16                vcAR1 set $16
(1)   88/   E8D1D : =$14                vcAR2 set $14
(1)   88/   E8D1D : =$19                vcAR3 set $19
(1)   88/   E8D1D : =$F                 vcAR4 set $0F
(1)   89/   E8D1D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   89/   E8D1D : =$0                 vcAM1 set $00<<5
(1)   89/   E8D1D : =$0                 vcAM2 set $00<<5
(1)   89/   E8D1D : =$0                 vcAM3 set $00<<5
(1)   89/   E8D1D : =$0                 vcAM4 set $00<<5
(1)   90/   E8D1D : (MACRO)             	smpsVcDecayRate1    $05, $0A, $0B, $08
(1)   90/   E8D1D : =$5                 vcD1R1 set $05
(1)   90/   E8D1D : =$A                 vcD1R2 set $0A
(1)   90/   E8D1D : =$B                 vcD1R3 set $0B
(1)   90/   E8D1D : =$8                 vcD1R4 set $08
(1)   91/   E8D1D : (MACRO)             	smpsVcDecayRate2    $05, $03, $03, $03
(1)   91/   E8D1D : =$5                 vcD2R1 set $05
(1)   91/   E8D1D : =$3                 vcD2R2 set $03
(1)   91/   E8D1D : =$3                 vcD2R3 set $03
(1)   91/   E8D1D : =$3                 vcD2R4 set $03
(1)   92/   E8D1D : (MACRO)             	smpsVcDecayLevel    $05, $06, $08, $01
(1)   92/   E8D1D : =$5                 vcDL1 set $05
(1)   92/   E8D1D : =$6                 vcDL2 set $06
(1)   92/   E8D1D : =$8                 vcDL3 set $08
(1)   92/   E8D1D : =$1                 vcDL4 set $01
(1)   93/   E8D1D : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   93/   E8D1D : =$F                 vcRR1 set $0F
(1)   93/   E8D1D : =$F                 vcRR2 set $0F
(1)   93/   E8D1D : =$F                 vcRR3 set $0F
(1)   93/   E8D1D : =$F                 vcRR4 set $0F
(1)   94/   E8D1D : (MACRO)             	smpsVcTotalLevel    $00, $22, $1F, $1F
(1)   94/   E8D1D : =$0                 vcTL1 set $00
(1)   94/   E8D1D : =$22                vcTL2 set $22
(1)   94/   E8D1D : =$1F                vcTL3 set $1F
(1)   94/   E8D1D : =$1F                vcTL4 set $1F
(1)   94/   E8D1D : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   94/   E8D1E :                     ;   0     1     2     3     4     5     6     7
(1)   94/   E8D1E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   94/   E8D1E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   94/   E8D1E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   94/   E8D1E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   94/   E8D1E : =$80                vcTLMask1 set $80
(1)   94/   E8D1E :                     
(1)   94/   E8D1E : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   94/   E8D1E : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   94/   E8D1E : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   94/   E8D1E : =$80                vcTLMask1 set $80
(1)   94/   E8D1E : =$0                 vcTL1 set vcTL1&$7F
(1)   94/   E8D1E : =$22                vcTL2 set vcTL2&$7F
(1)   94/   E8D1E : =$1F                vcTL3 set vcTL3&$7F
(1)   94/   E8D1E : =$1F                vcTL4 set vcTL4&$7F
(1)   94/   E8D1E :                     
(1)   94/   E8D1E : 7004 3001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   94/   E8D22 : 0F19 1416                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   94/   E8D26 : 080B 0A05                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   94/   E8D2A : 0303 0305                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   94/   E8D2E : 1F8F 6F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   94/   E8D32 : 1F1F 2280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   95/   E8D36 :                     
(1)   96/   E8D36 :                     
  518/   E8D36 :                        Sound60:	include "sfx-improved/E0 - Spin Dash Rev.asm"
(1)    1/   E8D36 :                     Sound60_SpindashRev_Header:
(1)    2/   E8D36 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8D36 :                     
(1)    2/   E8D36 : =$2                 SourceDriver set 2
(1)    2/   E8D36 :                     
(1)    2/   E8D36 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8D36 :                     
(1)    2/   E8D36 : =$E8D36             songStart set *
(1)    2/   E8D36 :                     
(1)    2/   E8D36 :                     
(1)    3/   E8D36 : (MACRO)             	smpsHeaderVoice     Sound60_SpindashRev_Voices
(1)    3/   E8D36 : 588D                                dc.w    z80_ptr(SOUND60_SPINDASHREV_VOICES)
(1)    4/   E8D38 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8D38 : 01                          dc.b    $01
(1)    5/   E8D39 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8D39 : 01                          dc.b    $01
(1)    6/   E8D3A :                     
(1)    7/   E8D3A : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound60_SpindashRev_FM5,	$FE, $00
(1)    7/   E8D3A : 8005                        dc.b    $80,CFM5
(1)    7/   E8D3C :  (MACRO-2)                  CheckedChannelPointer SOUND60_SPINDASHREV_FM5
(1)    7/   E8D3C : 408D                                dc.w    z80_ptr(SOUND60_SPINDASHREV_FM5)
(1)    7/   E8D3E : FE                                  dc.b    $FE
(1)    7/   E8D3F : 00                          dc.b    $00
(1)    8/   E8D40 :                     
(1)    9/   E8D40 :                     ; FM5 Data
(1)   10/   E8D40 :                     Sound60_SpindashRev_FM5:
(1)   11/   E8D40 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8D40 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8D40 : EF00                                dc.b    $EF,$00
(1)   12/   E8D42 : (MACRO)             	smpsModSet          $00, $01, $20, $F6
(1)   12/   E8D42 : F0                          dc.b    $F0
(1)   12/   E8D43 : 0101 20F7                           dc.b    $00+1,$01,$20,(($F6+1) * $01) & $FF
(1)   12/   E8D47 :                             ;dc.b   $01,$20,$F6
(1)   13/   E8D47 : C416 E7             	dc.b	nG5, $16, smpsNoAttack
(1)   14/   E8D4A : (MACRO)             	smpsModOff
(1)   14/   E8D4A : FA                                  dc.b    $FA
(1)   15/   E8D4B : D018 E7             	dc.b	nG6, $18, smpsNoAttack
(1)   16/   E8D4E :                     
(1)   17/   E8D4E :                     Sound60_SpindashRev_Loop00:
(1)   18/   E8D4E : 04E7                	dc.b	$04, smpsNoAttack
(1)   19/   E8D50 : (MACRO)             	smpsAlterVol        $03
(1)   19/   E8D50 : E603                        dc.b    $E6,$03
(1)   20/   E8D52 : (MACRO)             	smpsLoop            $00, $10, Sound60_SpindashRev_Loop00
(1)   20/   E8D52 : F7                          dc.b    $F7
(1)   20/   E8D53 : 0010                        dc.b    $00,$10
(1)   20/   E8D55 : 4E8D                                dc.w    z80_ptr(SOUND60_SPINDASHREV_LOOP00)
(1)   21/   E8D57 : (MACRO)             	smpsStop
(1)   21/   E8D57 : F2                          dc.b    $F2
(1)   22/   E8D58 :                     
(1)   23/   E8D58 :                     Sound60_SpindashRev_Voices:
(1)   24/   E8D58 :                     ;	Voice $00
(1)   25/   E8D58 :                     ;	$34
(1)   26/   E8D58 :                     ;	$00, $0C, $03, $09, 	$9F, $8F, $8C, $95, 	$00, $00, $00, $00
(1)   27/   E8D58 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $00, $1D, $00
(1)   28/   E8D58 : (MACRO)             	smpsVcAlgorithm     $04
(1)   28/   E8D58 : =$4                 vcAlgorithm set $04
(1)   29/   E8D58 : (MACRO)             	smpsVcFeedback      $06
(1)   29/   E8D58 : =$6                 vcFeedback set $06
(1)   30/   E8D58 : (MACRO)             	smpsVcUnusedBits    $00
(1)   30/   E8D58 : =$0                 vcUnusedBits set $00
(1)   30/   E8D58 : =$0                 vcD1R1Unk set 0
(1)   30/   E8D58 : =$0                 vcD1R2Unk set 0
(1)   30/   E8D58 : =$0                 vcD1R3Unk set 0
(1)   30/   E8D58 : =$0                 vcD1R4Unk set 0
(1)   31/   E8D58 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   31/   E8D58 : =$0                 vcDT1 set $00
(1)   31/   E8D58 : =$0                 vcDT2 set $00
(1)   31/   E8D58 : =$0                 vcDT3 set $00
(1)   31/   E8D58 : =$0                 vcDT4 set $00
(1)   32/   E8D58 : (MACRO)             	smpsVcCoarseFreq    $09, $03, $0C, $00
(1)   32/   E8D58 : =$9                 vcCF1 set $09
(1)   32/   E8D58 : =$3                 vcCF2 set $03
(1)   32/   E8D58 : =$C                 vcCF3 set $0C
(1)   32/   E8D58 : =$0                 vcCF4 set $00
(1)   33/   E8D58 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(1)   33/   E8D58 : =$2                 vcRS1 set $02
(1)   33/   E8D58 : =$2                 vcRS2 set $02
(1)   33/   E8D58 : =$2                 vcRS3 set $02
(1)   33/   E8D58 : =$2                 vcRS4 set $02
(1)   34/   E8D58 : (MACRO)             	smpsVcAttackRate    $15, $0C, $0F, $1F
(1)   34/   E8D58 : =$15                vcAR1 set $15
(1)   34/   E8D58 : =$C                 vcAR2 set $0C
(1)   34/   E8D58 : =$F                 vcAR3 set $0F
(1)   34/   E8D58 : =$1F                vcAR4 set $1F
(1)   35/   E8D58 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   35/   E8D58 : =$0                 vcAM1 set $00<<7
(1)   35/   E8D58 : =$0                 vcAM2 set $00<<7
(1)   35/   E8D58 : =$0                 vcAM3 set $00<<7
(1)   35/   E8D58 : =$0                 vcAM4 set $00<<7
(1)   36/   E8D58 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   36/   E8D58 : =$0                 vcD1R1 set $00
(1)   36/   E8D58 : =$0                 vcD1R2 set $00
(1)   36/   E8D58 : =$0                 vcD1R3 set $00
(1)   36/   E8D58 : =$0                 vcD1R4 set $00
(1)   37/   E8D58 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   37/   E8D58 : =$0                 vcD2R1 set $00
(1)   37/   E8D58 : =$0                 vcD2R2 set $00
(1)   37/   E8D58 : =$0                 vcD2R3 set $00
(1)   37/   E8D58 : =$0                 vcD2R4 set $00
(1)   38/   E8D58 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   38/   E8D58 : =$0                 vcDL1 set $00
(1)   38/   E8D58 : =$0                 vcDL2 set $00
(1)   38/   E8D58 : =$0                 vcDL3 set $00
(1)   38/   E8D58 : =$0                 vcDL4 set $00
(1)   39/   E8D58 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   39/   E8D58 : =$F                 vcRR1 set $0F
(1)   39/   E8D58 : =$F                 vcRR2 set $0F
(1)   39/   E8D58 : =$F                 vcRR3 set $0F
(1)   39/   E8D58 : =$F                 vcRR4 set $0F
(1)   40/   E8D58 : (MACRO)             	smpsVcTotalLevel    $00, $1D, $00, $00
(1)   40/   E8D58 : =$0                 vcTL1 set $00
(1)   40/   E8D58 : =$1D                vcTL2 set $1D
(1)   40/   E8D58 : =$0                 vcTL3 set $00
(1)   40/   E8D58 : =$0                 vcTL4 set $00
(1)   40/   E8D58 : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   40/   E8D59 :                     ;   0     1     2     3     4     5     6     7
(1)   40/   E8D59 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   40/   E8D59 : =$0                 vcTLMask4 set 0
(1)   40/   E8D59 : =$0                 vcTLMask3 set 0
(1)   40/   E8D59 : =$0                 vcTLMask2 set 0
(1)   40/   E8D59 : =$0                 vcTLMask1 set 0
(1)   40/   E8D59 :                     
(1)   40/   E8D59 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   40/   E8D59 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   40/   E8D59 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   40/   E8D59 : =$80                vcTLMask1 set $80
(1)   40/   E8D59 : =$0                 vcTL1 set vcTL1&$7F
(1)   40/   E8D59 : =$1D                vcTL2 set vcTL2&$7F
(1)   40/   E8D59 : =$0                 vcTL3 set vcTL3&$7F
(1)   40/   E8D59 : =$0                 vcTL4 set vcTL4&$7F
(1)   40/   E8D59 :                     
(1)   40/   E8D59 : 000C 0309                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   40/   E8D5D : 9F8F 8C95                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   40/   E8D61 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   40/   E8D65 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   40/   E8D69 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   40/   E8D6D : 0080 1D80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   41/   E8D71 :                     
(1)   42/   E8D71 :                     
  519/   E8D71 :                        Sound61:	include "sfx-improved/E1 - Rumbling 2.asm"
(1)    1/   E8D71 :                     Sound61_Rumbling2_Header:
(1)    2/   E8D71 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8D71 :                     
(1)    2/   E8D71 : =$2                 SourceDriver set 2
(1)    2/   E8D71 :                     
(1)    2/   E8D71 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8D71 :                     
(1)    2/   E8D71 : =$E8D71             songStart set *
(1)    2/   E8D71 :                     
(1)    2/   E8D71 :                     
(1)    3/   E8D71 : (MACRO)             	smpsHeaderVoice     Sound61_Rumbling2_Voices
(1)    3/   E8D71 : B58D                                dc.w    z80_ptr(SOUND61_RUMBLING2_VOICES)
(1)    4/   E8D73 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8D73 : 01                          dc.b    $01
(1)    5/   E8D74 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8D74 : 01                          dc.b    $01
(1)    6/   E8D75 :                     
(1)    7/   E8D75 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound61_Rumbling2_FM4,	$00, $04
(1)    7/   E8D75 : 8004                        dc.b    $80,CFM4
(1)    7/   E8D77 :  (MACRO-2)                  CheckedChannelPointer SOUND61_RUMBLING2_FM4
(1)    7/   E8D77 : 7B8D                                dc.w    z80_ptr(SOUND61_RUMBLING2_FM4)
(1)    7/   E8D79 : 00                                  dc.b    $00
(1)    7/   E8D7A : 04                          dc.b    $04
(1)    8/   E8D7B :                     
(1)    9/   E8D7B :                     ; FM4 Data
(1)   10/   E8D7B :                     Sound61_Rumbling2_FM4:
(1)   11/   E8D7B : 8001                	dc.b	nRst, $01
(1)   12/   E8D7D : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8D7D :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8D7D : EF00                                dc.b    $EF,$00
(1)   13/   E8D7F : (MACRO)             	smpsModSet          $00, $01, $70, $06
(1)   13/   E8D7F : F0                          dc.b    $F0
(1)   13/   E8D80 : 0101 7007                           dc.b    $00+1,$01,$70,(($06+1) * $01) & $FF
(1)   13/   E8D84 :                             ;dc.b   $01,$70,$06
(1)   14/   E8D84 : 8206 8508 8301 8205 	dc.b	nCs0, $06, nE0, $08, nD0, $01, nCs0, $05, nF0, $06, nAb0, $03
            E8D8C : 8606 8903         
(1)   15/   E8D90 : 8208 8804 8206      	dc.b	nCs0, $08, nG0, $04, nCs0, $06
(1)   16/   E8D96 : (MACRO)             	smpsAlterVol        $02
(1)   16/   E8D96 : E602                        dc.b    $E6,$02
(1)   17/   E8D98 : 8508                	dc.b	nE0, $08
(1)   18/   E8D9A : (MACRO)             	smpsAlterVol        $02
(1)   18/   E8D9A : E602                        dc.b    $E6,$02
(1)   19/   E8D9C : 8301                	dc.b	nD0, $01
(1)   20/   E8D9E : (MACRO)             	smpsAlterVol        $02
(1)   20/   E8D9E : E602                        dc.b    $E6,$02
(1)   21/   E8DA0 : 8205                	dc.b	nCs0, $05
(1)   22/   E8DA2 : (MACRO)             	smpsAlterVol        $02
(1)   22/   E8DA2 : E602                        dc.b    $E6,$02
(1)   23/   E8DA4 : 8606                	dc.b	nF0, $06
(1)   24/   E8DA6 : (MACRO)             	smpsAlterVol        $02
(1)   24/   E8DA6 : E602                        dc.b    $E6,$02
(1)   25/   E8DA8 : 8903                	dc.b	nAb0, $03
(1)   26/   E8DAA : (MACRO)             	smpsAlterVol        $02
(1)   26/   E8DAA : E602                        dc.b    $E6,$02
(1)   27/   E8DAC : 8208                	dc.b	nCs0, $08
(1)   28/   E8DAE : (MACRO)             	smpsAlterVol        $02
(1)   28/   E8DAE : E602                        dc.b    $E6,$02
(1)   29/   E8DB0 : 8804                	dc.b	nG0, $04
(1)   30/   E8DB2 : (MACRO)             	smpsAlterVol        $02
(1)   30/   E8DB2 : E602                        dc.b    $E6,$02
(1)   31/   E8DB4 : (MACRO)             	smpsStop
(1)   31/   E8DB4 : F2                          dc.b    $F2
(1)   32/   E8DB5 :                     
(1)   33/   E8DB5 :                     Sound61_Rumbling2_Voices:
(1)   34/   E8DB5 :                     ;	Voice $00
(1)   35/   E8DB5 :                     ;	$32
(1)   36/   E8DB5 :                     ;	$30, $50, $30, $30, 	$1F, $19, $0E, $0E, 	$07, $15, $12, $09
(1)   37/   E8DB5 :                     ;	$0A, $1D, $09, $06, 	$E8, $0A, $03, $17, 	$07, $00, $00, $00
(1)   38/   E8DB5 : (MACRO)             	smpsVcAlgorithm     $02
(1)   38/   E8DB5 : =$2                 vcAlgorithm set $02
(1)   39/   E8DB5 : (MACRO)             	smpsVcFeedback      $06
(1)   39/   E8DB5 : =$6                 vcFeedback set $06
(1)   40/   E8DB5 : (MACRO)             	smpsVcUnusedBits    $00
(1)   40/   E8DB5 : =$0                 vcUnusedBits set $00
(1)   40/   E8DB5 : =$0                 vcD1R1Unk set 0
(1)   40/   E8DB5 : =$0                 vcD1R2Unk set 0
(1)   40/   E8DB5 : =$0                 vcD1R3Unk set 0
(1)   40/   E8DB5 : =$0                 vcD1R4Unk set 0
(1)   41/   E8DB5 : (MACRO)             	smpsVcDetune        $03, $03, $05, $03
(1)   41/   E8DB5 : =$3                 vcDT1 set $03
(1)   41/   E8DB5 : =$3                 vcDT2 set $03
(1)   41/   E8DB5 : =$5                 vcDT3 set $05
(1)   41/   E8DB5 : =$3                 vcDT4 set $03
(1)   42/   E8DB5 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   42/   E8DB5 : =$0                 vcCF1 set $00
(1)   42/   E8DB5 : =$0                 vcCF2 set $00
(1)   42/   E8DB5 : =$0                 vcCF3 set $00
(1)   42/   E8DB5 : =$0                 vcCF4 set $00
(1)   43/   E8DB5 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   43/   E8DB5 : =$0                 vcRS1 set $00
(1)   43/   E8DB5 : =$0                 vcRS2 set $00
(1)   43/   E8DB5 : =$0                 vcRS3 set $00
(1)   43/   E8DB5 : =$0                 vcRS4 set $00
(1)   44/   E8DB5 : (MACRO)             	smpsVcAttackRate    $0E, $0E, $19, $1F
(1)   44/   E8DB5 : =$E                 vcAR1 set $0E
(1)   44/   E8DB5 : =$E                 vcAR2 set $0E
(1)   44/   E8DB5 : =$19                vcAR3 set $19
(1)   44/   E8DB5 : =$1F                vcAR4 set $1F
(1)   45/   E8DB5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   45/   E8DB5 : =$0                 vcAM1 set $00<<7
(1)   45/   E8DB5 : =$0                 vcAM2 set $00<<7
(1)   45/   E8DB5 : =$0                 vcAM3 set $00<<7
(1)   45/   E8DB5 : =$0                 vcAM4 set $00<<7
(1)   46/   E8DB5 : (MACRO)             	smpsVcDecayRate1    $09, $12, $15, $07
(1)   46/   E8DB5 : =$9                 vcD1R1 set $09
(1)   46/   E8DB5 : =$12                vcD1R2 set $12
(1)   46/   E8DB5 : =$15                vcD1R3 set $15
(1)   46/   E8DB5 : =$7                 vcD1R4 set $07
(1)   47/   E8DB5 : (MACRO)             	smpsVcDecayRate2    $06, $09, $1D, $0A
(1)   47/   E8DB5 : =$6                 vcD2R1 set $06
(1)   47/   E8DB5 : =$9                 vcD2R2 set $09
(1)   47/   E8DB5 : =$1D                vcD2R3 set $1D
(1)   47/   E8DB5 : =$A                 vcD2R4 set $0A
(1)   48/   E8DB5 : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $0E
(1)   48/   E8DB5 : =$1                 vcDL1 set $01
(1)   48/   E8DB5 : =$0                 vcDL2 set $00
(1)   48/   E8DB5 : =$0                 vcDL3 set $00
(1)   48/   E8DB5 : =$E                 vcDL4 set $0E
(1)   49/   E8DB5 : (MACRO)             	smpsVcReleaseRate   $07, $03, $0A, $08
(1)   49/   E8DB5 : =$7                 vcRR1 set $07
(1)   49/   E8DB5 : =$3                 vcRR2 set $03
(1)   49/   E8DB5 : =$A                 vcRR3 set $0A
(1)   49/   E8DB5 : =$8                 vcRR4 set $08
(1)   50/   E8DB5 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $07
(1)   50/   E8DB5 : =$0                 vcTL1 set $00
(1)   50/   E8DB5 : =$0                 vcTL2 set $00
(1)   50/   E8DB5 : =$0                 vcTL3 set $00
(1)   50/   E8DB5 : =$7                 vcTL4 set $07
(1)   50/   E8DB5 : 32                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   50/   E8DB6 :                     ;   0     1     2     3     4     5     6     7
(1)   50/   E8DB6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   50/   E8DB6 : =$0                 vcTLMask4 set 0
(1)   50/   E8DB6 : =$0                 vcTLMask3 set 0
(1)   50/   E8DB6 : =$0                 vcTLMask2 set 0
(1)   50/   E8DB6 : =$0                 vcTLMask1 set 0
(1)   50/   E8DB6 :                     
(1)   50/   E8DB6 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   50/   E8DB6 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   50/   E8DB6 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   50/   E8DB6 : =$80                vcTLMask1 set $80
(1)   50/   E8DB6 : =$0                 vcTL1 set vcTL1&$7F
(1)   50/   E8DB6 : =$0                 vcTL2 set vcTL2&$7F
(1)   50/   E8DB6 : =$0                 vcTL3 set vcTL3&$7F
(1)   50/   E8DB6 : =$7                 vcTL4 set vcTL4&$7F
(1)   50/   E8DB6 :                     
(1)   50/   E8DB6 : 3050 3030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   50/   E8DBA : 1F19 0E0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   50/   E8DBE : 0715 1209                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   50/   E8DC2 : 0A1D 0906                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   50/   E8DC6 : E80A 0317                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   50/   E8DCA : 0700 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   51/   E8DCE :                     
(1)   52/   E8DCE :                     
  520/   E8DCE :                        Sound62:	include "sfx-improved/E2 - CNZ Launch.asm"
(1)    1/   E8DCE :                     Sound62_CNZLaunch_Header:
(1)    2/   E8DCE : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8DCE :                     
(1)    2/   E8DCE : =$2                 SourceDriver set 2
(1)    2/   E8DCE :                     
(1)    2/   E8DCE : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8DCE :                     
(1)    2/   E8DCE : =$E8DCE             songStart set *
(1)    2/   E8DCE :                     
(1)    2/   E8DCE :                     
(1)    3/   E8DCE : (MACRO)             	smpsHeaderVoice     Sound62_CNZLaunch_Voices
(1)    3/   E8DCE : EC8D                                dc.w    z80_ptr(SOUND62_CNZLAUNCH_VOICES)
(1)    4/   E8DD0 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8DD0 : 01                          dc.b    $01
(1)    5/   E8DD1 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8DD1 : 01                          dc.b    $01
(1)    6/   E8DD2 :                     
(1)    7/   E8DD2 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound62_CNZLaunch_FM5,	$FF, $00
(1)    7/   E8DD2 : 8005                        dc.b    $80,CFM5
(1)    7/   E8DD4 :  (MACRO-2)                  CheckedChannelPointer SOUND62_CNZLAUNCH_FM5
(1)    7/   E8DD4 : D88D                                dc.w    z80_ptr(SOUND62_CNZLAUNCH_FM5)
(1)    7/   E8DD6 : FF                                  dc.b    $FF
(1)    7/   E8DD7 : 00                          dc.b    $00
(1)    8/   E8DD8 :                     
(1)    9/   E8DD8 :                     ; FM5 Data
(1)   10/   E8DD8 :                     Sound62_CNZLaunch_FM5:
(1)   11/   E8DD8 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8DD8 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8DD8 : EF00                                dc.b    $EF,$00
(1)   12/   E8DDA : A605                	dc.b	nCs3, $05
(1)   13/   E8DDC : (MACRO)             	smpsModSet          $01, $01, $E7, $40
(1)   13/   E8DDC : F0                          dc.b    $F0
(1)   13/   E8DDD : 0201 E741                           dc.b    $01+1,$01,$E7,(($40+1) * $01) & $FF
(1)   13/   E8DE1 :                             ;dc.b   $01,$E7,$40
(1)   14/   E8DE1 :                     
(1)   15/   E8DE1 :                     Sound62_CNZLaunch_Loop00:
(1)   16/   E8DE1 : C402 E7             	dc.b	nG5, $02, smpsNoAttack
(1)   17/   E8DE4 : (MACRO)             	smpsAlterVol        $01
(1)   17/   E8DE4 : E601                        dc.b    $E6,$01
(1)   18/   E8DE6 : (MACRO)             	smpsLoop            $00, $12, Sound62_CNZLaunch_Loop00
(1)   18/   E8DE6 : F7                          dc.b    $F7
(1)   18/   E8DE7 : 0012                        dc.b    $00,$12
(1)   18/   E8DE9 : E18D                                dc.w    z80_ptr(SOUND62_CNZLAUNCH_LOOP00)
(1)   19/   E8DEB : (MACRO)             	smpsStop
(1)   19/   E8DEB : F2                          dc.b    $F2
(1)   20/   E8DEC :                     
(1)   21/   E8DEC :                     Sound62_CNZLaunch_Voices:
(1)   22/   E8DEC :                     ;	Voice $00
(1)   23/   E8DEC :                     ;	$34
(1)   24/   E8DEC :                     ;	$0C, $73, $10, $0C, 	$AF, $FF, $AC, $D5, 	$06, $02, $00, $01
(1)   25/   E8DEC :                     ;	$02, $04, $0A, $08, 	$BF, $BF, $BF, $BF, 	$00, $80, $08, $80
(1)   26/   E8DEC : (MACRO)             	smpsVcAlgorithm     $04
(1)   26/   E8DEC : =$4                 vcAlgorithm set $04
(1)   27/   E8DEC : (MACRO)             	smpsVcFeedback      $06
(1)   27/   E8DEC : =$6                 vcFeedback set $06
(1)   28/   E8DEC : (MACRO)             	smpsVcUnusedBits    $00
(1)   28/   E8DEC : =$0                 vcUnusedBits set $00
(1)   28/   E8DEC : =$0                 vcD1R1Unk set 0
(1)   28/   E8DEC : =$0                 vcD1R2Unk set 0
(1)   28/   E8DEC : =$0                 vcD1R3Unk set 0
(1)   28/   E8DEC : =$0                 vcD1R4Unk set 0
(1)   29/   E8DEC : (MACRO)             	smpsVcDetune        $00, $01, $07, $00
(1)   29/   E8DEC : =$0                 vcDT1 set $00
(1)   29/   E8DEC : =$1                 vcDT2 set $01
(1)   29/   E8DEC : =$7                 vcDT3 set $07
(1)   29/   E8DEC : =$0                 vcDT4 set $00
(1)   30/   E8DEC : (MACRO)             	smpsVcCoarseFreq    $0C, $00, $03, $0C
(1)   30/   E8DEC : =$C                 vcCF1 set $0C
(1)   30/   E8DEC : =$0                 vcCF2 set $00
(1)   30/   E8DEC : =$3                 vcCF3 set $03
(1)   30/   E8DEC : =$C                 vcCF4 set $0C
(1)   31/   E8DEC : (MACRO)             	smpsVcRateScale     $03, $02, $03, $02
(1)   31/   E8DEC : =$3                 vcRS1 set $03
(1)   31/   E8DEC : =$2                 vcRS2 set $02
(1)   31/   E8DEC : =$3                 vcRS3 set $03
(1)   31/   E8DEC : =$2                 vcRS4 set $02
(1)   32/   E8DEC : (MACRO)             	smpsVcAttackRate    $15, $2C, $3F, $2F
(1)   32/   E8DEC : =$15                vcAR1 set $15
(1)   32/   E8DEC : =$2C                vcAR2 set $2C
(1)   32/   E8DEC : =$3F                vcAR3 set $3F
(1)   32/   E8DEC : =$2F                vcAR4 set $2F
(1)   33/   E8DEC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   33/   E8DEC : =$0                 vcAM1 set $00<<5
(1)   33/   E8DEC : =$0                 vcAM2 set $00<<5
(1)   33/   E8DEC : =$0                 vcAM3 set $00<<5
(1)   33/   E8DEC : =$0                 vcAM4 set $00<<5
(1)   34/   E8DEC : (MACRO)             	smpsVcDecayRate1    $01, $00, $02, $06
(1)   34/   E8DEC : =$1                 vcD1R1 set $01
(1)   34/   E8DEC : =$0                 vcD1R2 set $00
(1)   34/   E8DEC : =$2                 vcD1R3 set $02
(1)   34/   E8DEC : =$6                 vcD1R4 set $06
(1)   35/   E8DEC : (MACRO)             	smpsVcDecayRate2    $08, $0A, $04, $02
(1)   35/   E8DEC : =$8                 vcD2R1 set $08
(1)   35/   E8DEC : =$A                 vcD2R2 set $0A
(1)   35/   E8DEC : =$4                 vcD2R3 set $04
(1)   35/   E8DEC : =$2                 vcD2R4 set $02
(1)   36/   E8DEC : (MACRO)             	smpsVcDecayLevel    $0B, $0B, $0B, $0B
(1)   36/   E8DEC : =$B                 vcDL1 set $0B
(1)   36/   E8DEC : =$B                 vcDL2 set $0B
(1)   36/   E8DEC : =$B                 vcDL3 set $0B
(1)   36/   E8DEC : =$B                 vcDL4 set $0B
(1)   37/   E8DEC : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   37/   E8DEC : =$F                 vcRR1 set $0F
(1)   37/   E8DEC : =$F                 vcRR2 set $0F
(1)   37/   E8DEC : =$F                 vcRR3 set $0F
(1)   37/   E8DEC : =$F                 vcRR4 set $0F
(1)   38/   E8DEC : (MACRO)             	smpsVcTotalLevel    $00, $08, $00, $00
(1)   38/   E8DEC : =$0                 vcTL1 set $00
(1)   38/   E8DEC : =$8                 vcTL2 set $08
(1)   38/   E8DEC : =$0                 vcTL3 set $00
(1)   38/   E8DEC : =$0                 vcTL4 set $00
(1)   38/   E8DEC : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   38/   E8DED :                     ;   0     1     2     3     4     5     6     7
(1)   38/   E8DED :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   38/   E8DED : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   38/   E8DED : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   38/   E8DED : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   38/   E8DED : =$80                vcTLMask1 set $80
(1)   38/   E8DED :                     
(1)   38/   E8DED : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   38/   E8DED : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   38/   E8DED : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   38/   E8DED : =$80                vcTLMask1 set $80
(1)   38/   E8DED : =$0                 vcTL1 set vcTL1&$7F
(1)   38/   E8DED : =$8                 vcTL2 set vcTL2&$7F
(1)   38/   E8DED : =$0                 vcTL3 set vcTL3&$7F
(1)   38/   E8DED : =$0                 vcTL4 set vcTL4&$7F
(1)   38/   E8DED :                     
(1)   38/   E8DED : 0C73 100C                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   38/   E8DF1 : AFFF ACD5                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   38/   E8DF5 : 0602 0001                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   E8DF9 : 0204 0A08                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   38/   E8DFD : BFBF BFBF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   38/   E8E01 : 0080 0880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   39/   E8E05 :                     
(1)   40/   E8E05 :                     
  521/   E8E05 :                        Sound63:	include "sfx-improved/E3 - Flipper.asm"
(1)    1/   E8E05 :                     Sound63_Flipper_Header:
(1)    2/   E8E05 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8E05 :                     
(1)    2/   E8E05 : =$2                 SourceDriver set 2
(1)    2/   E8E05 :                     
(1)    2/   E8E05 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8E05 :                     
(1)    2/   E8E05 : =$E8E05             songStart set *
(1)    2/   E8E05 :                     
(1)    2/   E8E05 :                     
(1)    3/   E8E05 : (MACRO)             	smpsHeaderVoice     Sound63_Flipper_Voices
(1)    3/   E8E05 : 1B8E                                dc.w    z80_ptr(SOUND63_FLIPPER_VOICES)
(1)    4/   E8E07 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8E07 : 01                          dc.b    $01
(1)    5/   E8E08 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8E08 : 01                          dc.b    $01
(1)    6/   E8E09 :                     
(1)    7/   E8E09 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound63_Flipper_FM5,	$09, $07
(1)    7/   E8E09 : 8005                        dc.b    $80,CFM5
(1)    7/   E8E0B :  (MACRO-2)                  CheckedChannelPointer SOUND63_FLIPPER_FM5
(1)    7/   E8E0B : 0F8E                                dc.w    z80_ptr(SOUND63_FLIPPER_FM5)
(1)    7/   E8E0D : 09                                  dc.b    $09
(1)    7/   E8E0E : 07                          dc.b    $07
(1)    8/   E8E0F :                     
(1)    9/   E8E0F :                     ; FM5 Data
(1)   10/   E8E0F :                     Sound63_Flipper_FM5:
(1)   11/   E8E0F : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8E0F :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8E0F : EF00                                dc.b    $EF,$00
(1)   12/   E8E11 : (MACRO)             	smpsModSet          $01, $01, $04, $56
(1)   12/   E8E11 : F0                          dc.b    $F0
(1)   12/   E8E12 : 0201 0457                           dc.b    $01+1,$01,$04,(($56+1) * $01) & $FF
(1)   12/   E8E16 :                             ;dc.b   $01,$04,$56
(1)   13/   E8E16 : 9203 9A25           	dc.b	nF1, $03, nCs2, $25
(1)   14/   E8E1A : (MACRO)             	smpsStop
(1)   14/   E8E1A : F2                          dc.b    $F2
(1)   15/   E8E1B :                     
(1)   16/   E8E1B :                     Sound63_Flipper_Voices:
(1)   17/   E8E1B :                     ;	Voice $00
(1)   18/   E8E1B :                     ;	$3D
(1)   19/   E8E1B :                     ;	$12, $77, $10, $30, 	$5F, $5F, $5F, $5F, 	$0F, $00, $0A, $01
(1)   20/   E8E1B :                     ;	$0A, $0D, $0A, $0D, 	$4F, $0F, $0F, $0F, 	$13, $80, $80, $80
(1)   21/   E8E1B : (MACRO)             	smpsVcAlgorithm     $05
(1)   21/   E8E1B : =$5                 vcAlgorithm set $05
(1)   22/   E8E1B : (MACRO)             	smpsVcFeedback      $07
(1)   22/   E8E1B : =$7                 vcFeedback set $07
(1)   23/   E8E1B : (MACRO)             	smpsVcUnusedBits    $00
(1)   23/   E8E1B : =$0                 vcUnusedBits set $00
(1)   23/   E8E1B : =$0                 vcD1R1Unk set 0
(1)   23/   E8E1B : =$0                 vcD1R2Unk set 0
(1)   23/   E8E1B : =$0                 vcD1R3Unk set 0
(1)   23/   E8E1B : =$0                 vcD1R4Unk set 0
(1)   24/   E8E1B : (MACRO)             	smpsVcDetune        $03, $01, $07, $01
(1)   24/   E8E1B : =$3                 vcDT1 set $03
(1)   24/   E8E1B : =$1                 vcDT2 set $01
(1)   24/   E8E1B : =$7                 vcDT3 set $07
(1)   24/   E8E1B : =$1                 vcDT4 set $01
(1)   25/   E8E1B : (MACRO)             	smpsVcCoarseFreq    $00, $00, $07, $02
(1)   25/   E8E1B : =$0                 vcCF1 set $00
(1)   25/   E8E1B : =$0                 vcCF2 set $00
(1)   25/   E8E1B : =$7                 vcCF3 set $07
(1)   25/   E8E1B : =$2                 vcCF4 set $02
(1)   26/   E8E1B : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)   26/   E8E1B : =$1                 vcRS1 set $01
(1)   26/   E8E1B : =$1                 vcRS2 set $01
(1)   26/   E8E1B : =$1                 vcRS3 set $01
(1)   26/   E8E1B : =$1                 vcRS4 set $01
(1)   27/   E8E1B : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   27/   E8E1B : =$1F                vcAR1 set $1F
(1)   27/   E8E1B : =$1F                vcAR2 set $1F
(1)   27/   E8E1B : =$1F                vcAR3 set $1F
(1)   27/   E8E1B : =$1F                vcAR4 set $1F
(1)   28/   E8E1B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   28/   E8E1B : =$0                 vcAM1 set $00<<5
(1)   28/   E8E1B : =$0                 vcAM2 set $00<<5
(1)   28/   E8E1B : =$0                 vcAM3 set $00<<5
(1)   28/   E8E1B : =$0                 vcAM4 set $00<<5
(1)   29/   E8E1B : (MACRO)             	smpsVcDecayRate1    $01, $0A, $00, $0F
(1)   29/   E8E1B : =$1                 vcD1R1 set $01
(1)   29/   E8E1B : =$A                 vcD1R2 set $0A
(1)   29/   E8E1B : =$0                 vcD1R3 set $00
(1)   29/   E8E1B : =$F                 vcD1R4 set $0F
(1)   30/   E8E1B : (MACRO)             	smpsVcDecayRate2    $0D, $0A, $0D, $0A
(1)   30/   E8E1B : =$D                 vcD2R1 set $0D
(1)   30/   E8E1B : =$A                 vcD2R2 set $0A
(1)   30/   E8E1B : =$D                 vcD2R3 set $0D
(1)   30/   E8E1B : =$A                 vcD2R4 set $0A
(1)   31/   E8E1B : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $04
(1)   31/   E8E1B : =$0                 vcDL1 set $00
(1)   31/   E8E1B : =$0                 vcDL2 set $00
(1)   31/   E8E1B : =$0                 vcDL3 set $00
(1)   31/   E8E1B : =$4                 vcDL4 set $04
(1)   32/   E8E1B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   32/   E8E1B : =$F                 vcRR1 set $0F
(1)   32/   E8E1B : =$F                 vcRR2 set $0F
(1)   32/   E8E1B : =$F                 vcRR3 set $0F
(1)   32/   E8E1B : =$F                 vcRR4 set $0F
(1)   33/   E8E1B : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $13
(1)   33/   E8E1B : =$0                 vcTL1 set $00
(1)   33/   E8E1B : =$0                 vcTL2 set $00
(1)   33/   E8E1B : =$0                 vcTL3 set $00
(1)   33/   E8E1B : =$13                vcTL4 set $13
(1)   33/   E8E1B : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   33/   E8E1C :                     ;   0     1     2     3     4     5     6     7
(1)   33/   E8E1C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   33/   E8E1C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E8E1C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E8E1C : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E8E1C : =$80                vcTLMask1 set $80
(1)   33/   E8E1C :                     
(1)   33/   E8E1C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   33/   E8E1C : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   33/   E8E1C : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   33/   E8E1C : =$80                vcTLMask1 set $80
(1)   33/   E8E1C : =$0                 vcTL1 set vcTL1&$7F
(1)   33/   E8E1C : =$0                 vcTL2 set vcTL2&$7F
(1)   33/   E8E1C : =$0                 vcTL3 set vcTL3&$7F
(1)   33/   E8E1C : =$13                vcTL4 set vcTL4&$7F
(1)   33/   E8E1C :                     
(1)   33/   E8E1C : 1277 1030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   33/   E8E20 : 5F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   33/   E8E24 : 0F00 0A01                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   33/   E8E28 : 0A0D 0A0D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   33/   E8E2C : 4F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   33/   E8E30 : 1380 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   34/   E8E34 :                     
(1)   35/   E8E34 :                     
  522/   E8E34 :                        Sound64:	include "sfx-improved/E4 - HTZ Lift Click.asm"
(1)    1/   E8E34 :                     Sound64_HTZLiftClick_Header:
(1)    2/   E8E34 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8E34 :                     
(1)    2/   E8E34 : =$2                 SourceDriver set 2
(1)    2/   E8E34 :                     
(1)    2/   E8E34 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8E34 :                     
(1)    2/   E8E34 : =$E8E34             songStart set *
(1)    2/   E8E34 :                     
(1)    2/   E8E34 :                     
(1)    3/   E8E34 : (MACRO)             	smpsHeaderVoice     Sound64_HTZLiftClick_Voices
(1)    3/   E8E34 : 438E                                dc.w    z80_ptr(SOUND64_HTZLIFTCLICK_VOICES)
(1)    4/   E8E36 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8E36 : 01                          dc.b    $01
(1)    5/   E8E37 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8E37 : 01                          dc.b    $01
(1)    6/   E8E38 :                     
(1)    7/   E8E38 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound64_HTZLiftClick_FM5,	$11, $00
(1)    7/   E8E38 : 8005                        dc.b    $80,CFM5
(1)    7/   E8E3A :  (MACRO-2)                  CheckedChannelPointer SOUND64_HTZLIFTCLICK_FM5
(1)    7/   E8E3A : 3E8E                                dc.w    z80_ptr(SOUND64_HTZLIFTCLICK_FM5)
(1)    7/   E8E3C : 11                                  dc.b    $11
(1)    7/   E8E3D : 00                          dc.b    $00
(1)    8/   E8E3E :                     
(1)    9/   E8E3E :                     ; FM5 Data
(1)   10/   E8E3E :                     Sound64_HTZLiftClick_FM5:
(1)   11/   E8E3E : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8E3E :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8E3E : EF00                                dc.b    $EF,$00
(1)   12/   E8E40 : C702                	dc.b	nBb5, $02
(1)   13/   E8E42 : (MACRO)             	smpsStop
(1)   13/   E8E42 : F2                          dc.b    $F2
(1)   14/   E8E43 :                     
(1)   15/   E8E43 :                     Sound64_HTZLiftClick_Voices:
(1)   16/   E8E43 :                     ;	Voice $00
(1)   17/   E8E43 :                     ;	$24
(1)   18/   E8E43 :                     ;	$2A, $05, $02, $01, 	$1A, $10, $1F, $1F, 	$0F, $1F, $1F, $1F
(1)   19/   E8E43 :                     ;	$0C, $11, $0D, $11, 	$0C, $09, $09, $0F, 	$0E, $80, $04, $80
(1)   20/   E8E43 : (MACRO)             	smpsVcAlgorithm     $04
(1)   20/   E8E43 : =$4                 vcAlgorithm set $04
(1)   21/   E8E43 : (MACRO)             	smpsVcFeedback      $04
(1)   21/   E8E43 : =$4                 vcFeedback set $04
(1)   22/   E8E43 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8E43 : =$0                 vcUnusedBits set $00
(1)   22/   E8E43 : =$0                 vcD1R1Unk set 0
(1)   22/   E8E43 : =$0                 vcD1R2Unk set 0
(1)   22/   E8E43 : =$0                 vcD1R3Unk set 0
(1)   22/   E8E43 : =$0                 vcD1R4Unk set 0
(1)   23/   E8E43 : (MACRO)             	smpsVcDetune        $00, $00, $00, $02
(1)   23/   E8E43 : =$0                 vcDT1 set $00
(1)   23/   E8E43 : =$0                 vcDT2 set $00
(1)   23/   E8E43 : =$0                 vcDT3 set $00
(1)   23/   E8E43 : =$2                 vcDT4 set $02
(1)   24/   E8E43 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $05, $0A
(1)   24/   E8E43 : =$1                 vcCF1 set $01
(1)   24/   E8E43 : =$2                 vcCF2 set $02
(1)   24/   E8E43 : =$5                 vcCF3 set $05
(1)   24/   E8E43 : =$A                 vcCF4 set $0A
(1)   25/   E8E43 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8E43 : =$0                 vcRS1 set $00
(1)   25/   E8E43 : =$0                 vcRS2 set $00
(1)   25/   E8E43 : =$0                 vcRS3 set $00
(1)   25/   E8E43 : =$0                 vcRS4 set $00
(1)   26/   E8E43 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $10, $1A
(1)   26/   E8E43 : =$1F                vcAR1 set $1F
(1)   26/   E8E43 : =$1F                vcAR2 set $1F
(1)   26/   E8E43 : =$10                vcAR3 set $10
(1)   26/   E8E43 : =$1A                vcAR4 set $1A
(1)   27/   E8E43 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8E43 : =$0                 vcAM1 set $00<<5
(1)   27/   E8E43 : =$0                 vcAM2 set $00<<5
(1)   27/   E8E43 : =$0                 vcAM3 set $00<<5
(1)   27/   E8E43 : =$0                 vcAM4 set $00<<5
(1)   28/   E8E43 : (MACRO)             	smpsVcDecayRate1    $1F, $1F, $1F, $0F
(1)   28/   E8E43 : =$1F                vcD1R1 set $1F
(1)   28/   E8E43 : =$1F                vcD1R2 set $1F
(1)   28/   E8E43 : =$1F                vcD1R3 set $1F
(1)   28/   E8E43 : =$F                 vcD1R4 set $0F
(1)   29/   E8E43 : (MACRO)             	smpsVcDecayRate2    $11, $0D, $11, $0C
(1)   29/   E8E43 : =$11                vcD2R1 set $11
(1)   29/   E8E43 : =$D                 vcD2R2 set $0D
(1)   29/   E8E43 : =$11                vcD2R3 set $11
(1)   29/   E8E43 : =$C                 vcD2R4 set $0C
(1)   30/   E8E43 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   30/   E8E43 : =$0                 vcDL1 set $00
(1)   30/   E8E43 : =$0                 vcDL2 set $00
(1)   30/   E8E43 : =$0                 vcDL3 set $00
(1)   30/   E8E43 : =$0                 vcDL4 set $00
(1)   31/   E8E43 : (MACRO)             	smpsVcReleaseRate   $0F, $09, $09, $0C
(1)   31/   E8E43 : =$F                 vcRR1 set $0F
(1)   31/   E8E43 : =$9                 vcRR2 set $09
(1)   31/   E8E43 : =$9                 vcRR3 set $09
(1)   31/   E8E43 : =$C                 vcRR4 set $0C
(1)   32/   E8E43 : (MACRO)             	smpsVcTotalLevel    $00, $04, $00, $0E
(1)   32/   E8E43 : =$0                 vcTL1 set $00
(1)   32/   E8E43 : =$4                 vcTL2 set $04
(1)   32/   E8E43 : =$0                 vcTL3 set $00
(1)   32/   E8E43 : =$E                 vcTL4 set $0E
(1)   32/   E8E43 : 24                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8E44 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8E44 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8E44 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8E44 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8E44 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8E44 : =$80                vcTLMask1 set $80
(1)   32/   E8E44 :                     
(1)   32/   E8E44 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8E44 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8E44 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8E44 : =$80                vcTLMask1 set $80
(1)   32/   E8E44 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8E44 : =$4                 vcTL2 set vcTL2&$7F
(1)   32/   E8E44 : =$0                 vcTL3 set vcTL3&$7F
(1)   32/   E8E44 : =$E                 vcTL4 set vcTL4&$7F
(1)   32/   E8E44 :                     
(1)   32/   E8E44 : 2A05 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8E48 : 1A10 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8E4C : 0F1F 1F1F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8E50 : 0C11 0D11                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8E54 : 0C09 090F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8E58 : 0E80 0480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8E5C :                     
(1)   34/   E8E5C :                     
  523/   E8E5C :                        Sound65:	include "sfx-improved/E5 - Leaves.asm"
(1)    1/   E8E5C :                     Sound65_Leaves_Header:
(1)    2/   E8E5C : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8E5C :                     
(1)    2/   E8E5C : =$2                 SourceDriver set 2
(1)    2/   E8E5C :                     
(1)    2/   E8E5C : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8E5C :                     
(1)    2/   E8E5C : =$E8E5C             songStart set *
(1)    2/   E8E5C :                     
(1)    2/   E8E5C :                     
(1)    3/   E8E5C : (MACRO)             	smpsHeaderVoice     Sound65_Leaves_Voices
(1)    3/   E8E5C : 7D8E                                dc.w    z80_ptr(SOUND65_LEAVES_VOICES)
(1)    4/   E8E5E : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8E5E : 01                          dc.b    $01
(1)    5/   E8E5F : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8E5F : 01                          dc.b    $01
(1)    6/   E8E60 :                     
(1)    7/   E8E60 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound65_Leaves_PSG3,	$F8, $00
(1)    7/   E8E60 : 80C0                        dc.b    $80,CPSG3
(1)    7/   E8E62 :  (MACRO-2)                  CheckedChannelPointer SOUND65_LEAVES_PSG3
(1)    7/   E8E62 : 668E                                dc.w    z80_ptr(SOUND65_LEAVES_PSG3)
(1)    7/   E8E64 :  (MACRO-2)                          PSGPitchConvert $F8
(1)    7/   E8E64 : 04                                  dc.b    ($F8+psgdelta)&$FF
(1)    7/   E8E65 : 00                          dc.b    $00
(1)    8/   E8E66 :                     
(1)    9/   E8E66 :                     ; PSG3 Data
(1)   10/   E8E66 :                     Sound65_Leaves_PSG3:
(1)   11/   E8E66 : (MACRO)             	smpsPSGvoice        fTone_03
(1)   11/   E8E66 : F503                        dc.b    $F5,FTONE_03
(1)   12/   E8E68 : (MACRO)             	smpsPSGform         $E7
(1)   12/   E8E68 : F3E7                        dc.b    $F3,$E7
(1)   13/   E8E6A : CF03                	dc.b	(nMaxPSG-$F8)&$FF, $03
(1)   14/   E8E6C : (MACRO)             	smpsPSGvoice        fTone_06
(1)   14/   E8E6C : F506                        dc.b    $F5,FTONE_06
(1)   15/   E8E6E : CF04                	dc.b	(nMaxPSG-$F8)&$FF, $04
(1)   16/   E8E70 : (MACRO)             	smpsPSGAlterVol     $02
(1)   16/   E8E70 : EC02                        dc.b    $EC,$02
(1)   17/   E8E72 : CF02                	dc.b	(nMaxPSG-$F8)&$FF, $02
(1)   18/   E8E74 : (MACRO)             	smpsPSGvoice        fTone_03
(1)   18/   E8E74 : F503                        dc.b    $F5,FTONE_03
(1)   19/   E8E76 : (MACRO)             	smpsPSGAlterVol     $FE
(1)   19/   E8E76 : ECFE                        dc.b    $EC,$FE
(1)   20/   E8E78 : CF08 CF18           	dc.b	(nMaxPSG-$F8)&$FF, $08, (nMaxPSG-$F8)&$FF, $18
(1)   21/   E8E7C : (MACRO)             	smpsStop
(1)   21/   E8E7C : F2                          dc.b    $F2
(1)   22/   E8E7D :                     
(1)   23/   E8E7D :                     ; Song seems to not use any FM voices
(1)   24/   E8E7D :                     Sound65_Leaves_Voices:
(1)   25/   E8E7D :                     
  524/   E8E7D :                        Sound66:	include "sfx-improved/E6 - Mega Mack Drop.asm"
(1)    1/   E8E7D :                     Sound66_MegaMackDrop_Header:
(1)    2/   E8E7D : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8E7D :                     
(1)    2/   E8E7D : =$2                 SourceDriver set 2
(1)    2/   E8E7D :                     
(1)    2/   E8E7D : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8E7D :                     
(1)    2/   E8E7D : =$E8E7D             songStart set *
(1)    2/   E8E7D :                     
(1)    2/   E8E7D :                     
(1)    3/   E8E7D : (MACRO)             	smpsHeaderVoice     Sound66_MegaMackDrop_Voices
(1)    3/   E8E7D : 9E8E                                dc.w    z80_ptr(SOUND66_MEGAMACKDROP_VOICES)
(1)    4/   E8E7F : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8E7F : 01                          dc.b    $01
(1)    5/   E8E80 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8E80 : 02                          dc.b    $02
(1)    6/   E8E81 :                     
(1)    7/   E8E81 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound66_MegaMackDrop_FM5,	$EE, $08
(1)    7/   E8E81 : 8005                        dc.b    $80,CFM5
(1)    7/   E8E83 :  (MACRO-2)                  CheckedChannelPointer SOUND66_MEGAMACKDROP_FM5
(1)    7/   E8E83 : 948E                                dc.w    z80_ptr(SOUND66_MEGAMACKDROP_FM5)
(1)    7/   E8E85 : EE                                  dc.b    $EE
(1)    7/   E8E86 : 08                          dc.b    $08
(1)    8/   E8E87 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound66_MegaMackDrop_PSG3,	$00, $00
(1)    8/   E8E87 : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8E89 :  (MACRO-2)                  CheckedChannelPointer SOUND66_MEGAMACKDROP_PSG3
(1)    8/   E8E89 : 8D8E                                dc.w    z80_ptr(SOUND66_MEGAMACKDROP_PSG3)
(1)    8/   E8E8B :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8E8B : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8E8C : 00                          dc.b    $00
(1)    9/   E8E8D :                     
(1)   10/   E8E8D :                     ; PSG3 Data
(1)   11/   E8E8D :                     Sound66_MegaMackDrop_PSG3:
(1)   12/   E8E8D : (MACRO)             	smpsPSGform         $E7
(1)   12/   E8E8D : F3E7                        dc.b    $F3,$E7
(1)   13/   E8E8F : (MACRO)             	smpsPSGvoice        fTone_09
(1)   13/   E8E8F : F509                        dc.b    $F5,FTONE_09
(1)   14/   E8E91 : C736                	dc.b	nMaxPSG, $36
(1)   15/   E8E93 : (MACRO)             	smpsStop
(1)   15/   E8E93 : F2                          dc.b    $F2
(1)   16/   E8E94 :                     
(1)   17/   E8E94 :                     ; FM5 Data
(1)   18/   E8E94 :                     Sound66_MegaMackDrop_FM5:
(1)   19/   E8E94 : (MACRO)             	smpsSetvoice        $00
(1)   19/   E8E94 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/   E8E94 : EF00                                dc.b    $EF,$00
(1)   20/   E8E96 : 8001 9202 0202 30   	dc.b	nRst, $01, nF1, $02, $02, $02, $30
(1)   21/   E8E9D : (MACRO)             	smpsStop
(1)   21/   E8E9D : F2                          dc.b    $F2
(1)   22/   E8E9E :                     
(1)   23/   E8E9E :                     Sound66_MegaMackDrop_Voices:
(1)   24/   E8E9E :                     ;	Voice $00
(1)   25/   E8E9E :                     ;	$32
(1)   26/   E8E9E :                     ;	$33, $34, $17, $13, 	$0F, $1B, $0D, $17, 	$00, $02, $04, $0B
(1)   27/   E8E9E :                     ;	$08, $08, $00, $09, 	$6F, $4F, $5F, $6F, 	$05, $00, $00, $80
(1)   28/   E8E9E : (MACRO)             	smpsVcAlgorithm     $02
(1)   28/   E8E9E : =$2                 vcAlgorithm set $02
(1)   29/   E8E9E : (MACRO)             	smpsVcFeedback      $06
(1)   29/   E8E9E : =$6                 vcFeedback set $06
(1)   30/   E8E9E : (MACRO)             	smpsVcUnusedBits    $00
(1)   30/   E8E9E : =$0                 vcUnusedBits set $00
(1)   30/   E8E9E : =$0                 vcD1R1Unk set 0
(1)   30/   E8E9E : =$0                 vcD1R2Unk set 0
(1)   30/   E8E9E : =$0                 vcD1R3Unk set 0
(1)   30/   E8E9E : =$0                 vcD1R4Unk set 0
(1)   31/   E8E9E : (MACRO)             	smpsVcDetune        $01, $01, $03, $03
(1)   31/   E8E9E : =$1                 vcDT1 set $01
(1)   31/   E8E9E : =$1                 vcDT2 set $01
(1)   31/   E8E9E : =$3                 vcDT3 set $03
(1)   31/   E8E9E : =$3                 vcDT4 set $03
(1)   32/   E8E9E : (MACRO)             	smpsVcCoarseFreq    $03, $07, $04, $03
(1)   32/   E8E9E : =$3                 vcCF1 set $03
(1)   32/   E8E9E : =$7                 vcCF2 set $07
(1)   32/   E8E9E : =$4                 vcCF3 set $04
(1)   32/   E8E9E : =$3                 vcCF4 set $03
(1)   33/   E8E9E : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   33/   E8E9E : =$0                 vcRS1 set $00
(1)   33/   E8E9E : =$0                 vcRS2 set $00
(1)   33/   E8E9E : =$0                 vcRS3 set $00
(1)   33/   E8E9E : =$0                 vcRS4 set $00
(1)   34/   E8E9E : (MACRO)             	smpsVcAttackRate    $17, $0D, $1B, $0F
(1)   34/   E8E9E : =$17                vcAR1 set $17
(1)   34/   E8E9E : =$D                 vcAR2 set $0D
(1)   34/   E8E9E : =$1B                vcAR3 set $1B
(1)   34/   E8E9E : =$F                 vcAR4 set $0F
(1)   35/   E8E9E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   35/   E8E9E : =$0                 vcAM1 set $00<<5
(1)   35/   E8E9E : =$0                 vcAM2 set $00<<5
(1)   35/   E8E9E : =$0                 vcAM3 set $00<<5
(1)   35/   E8E9E : =$0                 vcAM4 set $00<<5
(1)   36/   E8E9E : (MACRO)             	smpsVcDecayRate1    $0B, $04, $02, $00
(1)   36/   E8E9E : =$B                 vcD1R1 set $0B
(1)   36/   E8E9E : =$4                 vcD1R2 set $04
(1)   36/   E8E9E : =$2                 vcD1R3 set $02
(1)   36/   E8E9E : =$0                 vcD1R4 set $00
(1)   37/   E8E9E : (MACRO)             	smpsVcDecayRate2    $09, $00, $08, $08
(1)   37/   E8E9E : =$9                 vcD2R1 set $09
(1)   37/   E8E9E : =$0                 vcD2R2 set $00
(1)   37/   E8E9E : =$8                 vcD2R3 set $08
(1)   37/   E8E9E : =$8                 vcD2R4 set $08
(1)   38/   E8E9E : (MACRO)             	smpsVcDecayLevel    $06, $05, $04, $06
(1)   38/   E8E9E : =$6                 vcDL1 set $06
(1)   38/   E8E9E : =$5                 vcDL2 set $05
(1)   38/   E8E9E : =$4                 vcDL3 set $04
(1)   38/   E8E9E : =$6                 vcDL4 set $06
(1)   39/   E8E9E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   39/   E8E9E : =$F                 vcRR1 set $0F
(1)   39/   E8E9E : =$F                 vcRR2 set $0F
(1)   39/   E8E9E : =$F                 vcRR3 set $0F
(1)   39/   E8E9E : =$F                 vcRR4 set $0F
(1)   40/   E8E9E : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $05
(1)   40/   E8E9E : =$0                 vcTL1 set $00
(1)   40/   E8E9E : =$0                 vcTL2 set $00
(1)   40/   E8E9E : =$0                 vcTL3 set $00
(1)   40/   E8E9E : =$5                 vcTL4 set $05
(1)   40/   E8E9E : 32                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   40/   E8E9F :                     ;   0     1     2     3     4     5     6     7
(1)   40/   E8E9F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   40/   E8E9F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   40/   E8E9F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   40/   E8E9F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   40/   E8E9F : =$80                vcTLMask1 set $80
(1)   40/   E8E9F :                     
(1)   40/   E8E9F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   40/   E8E9F : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   40/   E8E9F : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   40/   E8E9F : =$80                vcTLMask1 set $80
(1)   40/   E8E9F : =$0                 vcTL1 set vcTL1&$7F
(1)   40/   E8E9F : =$0                 vcTL2 set vcTL2&$7F
(1)   40/   E8E9F : =$0                 vcTL3 set vcTL3&$7F
(1)   40/   E8E9F : =$5                 vcTL4 set vcTL4&$7F
(1)   40/   E8E9F :                     
(1)   40/   E8E9F : 3334 1713                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   40/   E8EA3 : 0F1B 0D17                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   40/   E8EA7 : 0002 040B                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   40/   E8EAB : 0808 0009                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   40/   E8EAF : 6F4F 5F6F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   40/   E8EB3 : 0500 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   41/   E8EB7 :                     
(1)   42/   E8EB7 :                     
  525/   E8EB7 :                        Sound67:	include "sfx-improved/E7 - Drawbridge Move.asm"
(1)    1/   E8EB7 :                     Sound67_DrawbridgeMove_Header:
(1)    2/   E8EB7 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8EB7 :                     
(1)    2/   E8EB7 : =$2                 SourceDriver set 2
(1)    2/   E8EB7 :                     
(1)    2/   E8EB7 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8EB7 :                     
(1)    2/   E8EB7 : =$E8EB7             songStart set *
(1)    2/   E8EB7 :                     
(1)    2/   E8EB7 :                     
(1)    3/   E8EB7 : (MACRO)             	smpsHeaderVoice     Sound67_DrawbridgeMove_Voices
(1)    3/   E8EB7 : D88E                                dc.w    z80_ptr(SOUND67_DRAWBRIDGEMOVE_VOICES)
(1)    4/   E8EB9 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8EB9 : 01                          dc.b    $01
(1)    5/   E8EBA : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8EBA : 01                          dc.b    $01
(1)    6/   E8EBB :                     
(1)    7/   E8EBB : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound67_DrawbridgeMove_PSG3,	$00, $00
(1)    7/   E8EBB : 80C0                        dc.b    $80,CPSG3
(1)    7/   E8EBD :  (MACRO-2)                  CheckedChannelPointer SOUND67_DRAWBRIDGEMOVE_PSG3
(1)    7/   E8EBD : C18E                                dc.w    z80_ptr(SOUND67_DRAWBRIDGEMOVE_PSG3)
(1)    7/   E8EBF :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E8EBF : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E8EC0 : 00                          dc.b    $00
(1)    8/   E8EC1 :                     
(1)    9/   E8EC1 :                     ; PSG3 Data
(1)   10/   E8EC1 :                     Sound67_DrawbridgeMove_PSG3:
(1)   11/   E8EC1 : (MACRO)             	smpsPSGvoice        fTone_06
(1)   11/   E8EC1 : F506                        dc.b    $F5,FTONE_06
(1)   12/   E8EC3 : (MACRO)             	smpsPSGform         $E7
(1)   12/   E8EC3 : F3E7                        dc.b    $F3,$E7
(1)   13/   E8EC5 : 900A 940A 980A 9C0A 	dc.b	nEb1, $0A, nG1, $0A, nB1, $0A, nEb2, $0A, nG2, $0A, nB2, $08
            E8ECD : A00A A408         
(1)   14/   E8ED1 : A808 AC08 B008      	dc.b	nEb3, $08, nG3, $08, nB3, $08
(1)   15/   E8ED7 : (MACRO)             	smpsStop
(1)   15/   E8ED7 : F2                          dc.b    $F2
(1)   16/   E8ED8 :                     
(1)   17/   E8ED8 :                     ; Song seems to not use any FM voices
(1)   18/   E8ED8 :                     Sound67_DrawbridgeMove_Voices:
(1)   19/   E8ED8 :                     
  526/   E8ED8 :                        Sound68:	include "sfx-improved/E8 - Quick Door Slam.asm"
(1)    1/   E8ED8 :                     Sound68_QuickDoorSlam_Header:
(1)    2/   E8ED8 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8ED8 :                     
(1)    2/   E8ED8 : =$2                 SourceDriver set 2
(1)    2/   E8ED8 :                     
(1)    2/   E8ED8 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8ED8 :                     
(1)    2/   E8ED8 : =$E8ED8             songStart set *
(1)    2/   E8ED8 :                     
(1)    2/   E8ED8 :                     
(1)    3/   E8ED8 : (MACRO)             	smpsHeaderVoice     Sound68_QuickDoorSlam_Voices
(1)    3/   E8ED8 : E98E                                dc.w    z80_ptr(SOUND68_QUICKDOORSLAM_VOICES)
(1)    4/   E8EDA : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8EDA : 01                          dc.b    $01
(1)    5/   E8EDB : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8EDB : 01                          dc.b    $01
(1)    6/   E8EDC :                     
(1)    7/   E8EDC : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound68_QuickDoorSlam_FM5,	$F4, $00
(1)    7/   E8EDC : 8005                        dc.b    $80,CFM5
(1)    7/   E8EDE :  (MACRO-2)                  CheckedChannelPointer SOUND68_QUICKDOORSLAM_FM5
(1)    7/   E8EDE : E28E                                dc.w    z80_ptr(SOUND68_QUICKDOORSLAM_FM5)
(1)    7/   E8EE0 : F4                                  dc.b    $F4
(1)    7/   E8EE1 : 00                          dc.b    $00
(1)    8/   E8EE2 :                     
(1)    9/   E8EE2 :                     ; FM5 Data
(1)   10/   E8EE2 :                     Sound68_QuickDoorSlam_FM5:
(1)   11/   E8EE2 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8EE2 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8EE2 : EF00                                dc.b    $EF,$00
(1)   12/   E8EE4 : 9B04 A506           	dc.b	nD2, $04, nC3, $06
(1)   13/   E8EE8 : (MACRO)             	smpsStop
(1)   13/   E8EE8 : F2                          dc.b    $F2
(1)   14/   E8EE9 :                     
(1)   15/   E8EE9 :                     Sound68_QuickDoorSlam_Voices:
(1)   16/   E8EE9 :                     ;	Voice $00
(1)   17/   E8EE9 :                     ;	$3C
(1)   18/   E8EE9 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $16, $0F, $0F
(1)   19/   E8EE9 :                     ;	$00, $00, $00, $00, 	$0F, $AF, $FF, $FF, 	$00, $80, $0A, $80
(1)   20/   E8EE9 : (MACRO)             	smpsVcAlgorithm     $04
(1)   20/   E8EE9 : =$4                 vcAlgorithm set $04
(1)   21/   E8EE9 : (MACRO)             	smpsVcFeedback      $07
(1)   21/   E8EE9 : =$7                 vcFeedback set $07
(1)   22/   E8EE9 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8EE9 : =$0                 vcUnusedBits set $00
(1)   22/   E8EE9 : =$0                 vcD1R1Unk set 0
(1)   22/   E8EE9 : =$0                 vcD1R2Unk set 0
(1)   22/   E8EE9 : =$0                 vcD1R3Unk set 0
(1)   22/   E8EE9 : =$0                 vcD1R4Unk set 0
(1)   23/   E8EE9 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   23/   E8EE9 : =$0                 vcDT1 set $00
(1)   23/   E8EE9 : =$0                 vcDT2 set $00
(1)   23/   E8EE9 : =$0                 vcDT3 set $00
(1)   23/   E8EE9 : =$0                 vcDT4 set $00
(1)   24/   E8EE9 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   24/   E8EE9 : =$0                 vcCF1 set $00
(1)   24/   E8EE9 : =$0                 vcCF2 set $00
(1)   24/   E8EE9 : =$0                 vcCF3 set $00
(1)   24/   E8EE9 : =$0                 vcCF4 set $00
(1)   25/   E8EE9 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8EE9 : =$0                 vcRS1 set $00
(1)   25/   E8EE9 : =$0                 vcRS2 set $00
(1)   25/   E8EE9 : =$0                 vcRS3 set $00
(1)   25/   E8EE9 : =$0                 vcRS4 set $00
(1)   26/   E8EE9 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E8EE9 : =$1F                vcAR1 set $1F
(1)   26/   E8EE9 : =$1F                vcAR2 set $1F
(1)   26/   E8EE9 : =$1F                vcAR3 set $1F
(1)   26/   E8EE9 : =$1F                vcAR4 set $1F
(1)   27/   E8EE9 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8EE9 : =$0                 vcAM1 set $00<<5
(1)   27/   E8EE9 : =$0                 vcAM2 set $00<<5
(1)   27/   E8EE9 : =$0                 vcAM3 set $00<<5
(1)   27/   E8EE9 : =$0                 vcAM4 set $00<<5
(1)   28/   E8EE9 : (MACRO)             	smpsVcDecayRate1    $0F, $0F, $16, $00
(1)   28/   E8EE9 : =$F                 vcD1R1 set $0F
(1)   28/   E8EE9 : =$F                 vcD1R2 set $0F
(1)   28/   E8EE9 : =$16                vcD1R3 set $16
(1)   28/   E8EE9 : =$0                 vcD1R4 set $00
(1)   29/   E8EE9 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   29/   E8EE9 : =$0                 vcD2R1 set $00
(1)   29/   E8EE9 : =$0                 vcD2R2 set $00
(1)   29/   E8EE9 : =$0                 vcD2R3 set $00
(1)   29/   E8EE9 : =$0                 vcD2R4 set $00
(1)   30/   E8EE9 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0A, $00
(1)   30/   E8EE9 : =$F                 vcDL1 set $0F
(1)   30/   E8EE9 : =$F                 vcDL2 set $0F
(1)   30/   E8EE9 : =$A                 vcDL3 set $0A
(1)   30/   E8EE9 : =$0                 vcDL4 set $00
(1)   31/   E8EE9 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E8EE9 : =$F                 vcRR1 set $0F
(1)   31/   E8EE9 : =$F                 vcRR2 set $0F
(1)   31/   E8EE9 : =$F                 vcRR3 set $0F
(1)   31/   E8EE9 : =$F                 vcRR4 set $0F
(1)   32/   E8EE9 : (MACRO)             	smpsVcTotalLevel    $00, $0A, $00, $00
(1)   32/   E8EE9 : =$0                 vcTL1 set $00
(1)   32/   E8EE9 : =$A                 vcTL2 set $0A
(1)   32/   E8EE9 : =$0                 vcTL3 set $00
(1)   32/   E8EE9 : =$0                 vcTL4 set $00
(1)   32/   E8EE9 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8EEA :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8EEA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8EEA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8EEA : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8EEA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8EEA : =$80                vcTLMask1 set $80
(1)   32/   E8EEA :                     
(1)   32/   E8EEA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8EEA : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8EEA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8EEA : =$80                vcTLMask1 set $80
(1)   32/   E8EEA : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E8EEA : =$A                 vcTL2 set vcTL2&$7F
(1)   32/   E8EEA : =$0                 vcTL3 set vcTL3&$7F
(1)   32/   E8EEA : =$0                 vcTL4 set vcTL4&$7F
(1)   32/   E8EEA :                     
(1)   32/   E8EEA : 0000 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8EEE : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8EF2 : 0016 0F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8EF6 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8EFA : 0FAF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8EFE : 0080 0A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8F02 :                     
(1)   34/   E8F02 :                     
  527/   E8F02 :                        Sound69:	include "sfx-improved/E9 - Drawbridge Down.asm"
(1)    1/   E8F02 :                     Sound69_DrawbridgeDown_Header:
(1)    2/   E8F02 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E8F02 :                     
(1)    2/   E8F02 : =$2                 SourceDriver set 2
(1)    2/   E8F02 :                     
(1)    2/   E8F02 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E8F02 :                     
(1)    2/   E8F02 : =$E8F02             songStart set *
(1)    2/   E8F02 :                     
(1)    2/   E8F02 :                     
(1)    3/   E8F02 : (MACRO)             	smpsHeaderVoice     Sound69_DrawbridgeDown_Voices
(1)    3/   E8F02 : 268F                                dc.w    z80_ptr(SOUND69_DRAWBRIDGEDOWN_VOICES)
(1)    4/   E8F04 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8F04 : 01                          dc.b    $01
(1)    5/   E8F05 : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E8F05 : 02                          dc.b    $02
(1)    6/   E8F06 :                     
(1)    7/   E8F06 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound69_DrawbridgeDown_FM5,	$F4, $00
(1)    7/   E8F06 : 8005                        dc.b    $80,CFM5
(1)    7/   E8F08 :  (MACRO-2)                  CheckedChannelPointer SOUND69_DRAWBRIDGEDOWN_FM5
(1)    7/   E8F08 : 128F                                dc.w    z80_ptr(SOUND69_DRAWBRIDGEDOWN_FM5)
(1)    7/   E8F0A : F4                                  dc.b    $F4
(1)    7/   E8F0B : 00                          dc.b    $00
(1)    8/   E8F0C : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound69_DrawbridgeDown_PSG3,	$00, $00
(1)    8/   E8F0C : 80C0                        dc.b    $80,CPSG3
(1)    8/   E8F0E :  (MACRO-2)                  CheckedChannelPointer SOUND69_DRAWBRIDGEDOWN_PSG3
(1)    8/   E8F0E : 1B8F                                dc.w    z80_ptr(SOUND69_DRAWBRIDGEDOWN_PSG3)
(1)    8/   E8F10 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E8F10 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E8F11 : 00                          dc.b    $00
(1)    9/   E8F12 :                     
(1)   10/   E8F12 :                     ; FM5 Data
(1)   11/   E8F12 :                     Sound69_DrawbridgeDown_FM5:
(1)   12/   E8F12 : (MACRO)             	smpsSetvoice        $00
(1)   12/   E8F12 :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E8F12 : EF00                                dc.b    $EF,$00
(1)   13/   E8F14 : 9B03 A806 9E08      	dc.b	nD2, $03, nEb3, $06, nF2, $08
(1)   14/   E8F1A : (MACRO)             	smpsStop
(1)   14/   E8F1A : F2                          dc.b    $F2
(1)   15/   E8F1B :                     
(1)   16/   E8F1B :                     ; PSG3 Data
(1)   17/   E8F1B :                     Sound69_DrawbridgeDown_PSG3:
(1)   18/   E8F1B : (MACRO)             	smpsPSGvoice        fTone_04
(1)   18/   E8F1B : F504                        dc.b    $F5,FTONE_04
(1)   19/   E8F1D : (MACRO)             	smpsPSGform         $E7
(1)   19/   E8F1D : F3E7                        dc.b    $F3,$E7
(1)   20/   E8F1F : C703 C706 C708      	dc.b	nMaxPSG, $03, nMaxPSG, $06, nMaxPSG, $08
(1)   21/   E8F25 : (MACRO)             	smpsStop
(1)   21/   E8F25 : F2                          dc.b    $F2
(1)   22/   E8F26 :                     
(1)   23/   E8F26 :                     Sound69_DrawbridgeDown_Voices:
(1)   24/   E8F26 :                     ;	Voice $00
(1)   25/   E8F26 :                     ;	$3C
(1)   26/   E8F26 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $16, $0F, $0F
(1)   27/   E8F26 :                     ;	$00, $00, $00, $00, 	$0F, $AF, $FF, $FF, 	$00, $80, $0A, $80
(1)   28/   E8F26 : (MACRO)             	smpsVcAlgorithm     $04
(1)   28/   E8F26 : =$4                 vcAlgorithm set $04
(1)   29/   E8F26 : (MACRO)             	smpsVcFeedback      $07
(1)   29/   E8F26 : =$7                 vcFeedback set $07
(1)   30/   E8F26 : (MACRO)             	smpsVcUnusedBits    $00
(1)   30/   E8F26 : =$0                 vcUnusedBits set $00
(1)   30/   E8F26 : =$0                 vcD1R1Unk set 0
(1)   30/   E8F26 : =$0                 vcD1R2Unk set 0
(1)   30/   E8F26 : =$0                 vcD1R3Unk set 0
(1)   30/   E8F26 : =$0                 vcD1R4Unk set 0
(1)   31/   E8F26 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   31/   E8F26 : =$0                 vcDT1 set $00
(1)   31/   E8F26 : =$0                 vcDT2 set $00
(1)   31/   E8F26 : =$0                 vcDT3 set $00
(1)   31/   E8F26 : =$0                 vcDT4 set $00
(1)   32/   E8F26 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   32/   E8F26 : =$0                 vcCF1 set $00
(1)   32/   E8F26 : =$0                 vcCF2 set $00
(1)   32/   E8F26 : =$0                 vcCF3 set $00
(1)   32/   E8F26 : =$0                 vcCF4 set $00
(1)   33/   E8F26 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   33/   E8F26 : =$0                 vcRS1 set $00
(1)   33/   E8F26 : =$0                 vcRS2 set $00
(1)   33/   E8F26 : =$0                 vcRS3 set $00
(1)   33/   E8F26 : =$0                 vcRS4 set $00
(1)   34/   E8F26 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   34/   E8F26 : =$1F                vcAR1 set $1F
(1)   34/   E8F26 : =$1F                vcAR2 set $1F
(1)   34/   E8F26 : =$1F                vcAR3 set $1F
(1)   34/   E8F26 : =$1F                vcAR4 set $1F
(1)   35/   E8F26 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   35/   E8F26 : =$0                 vcAM1 set $00<<5
(1)   35/   E8F26 : =$0                 vcAM2 set $00<<5
(1)   35/   E8F26 : =$0                 vcAM3 set $00<<5
(1)   35/   E8F26 : =$0                 vcAM4 set $00<<5
(1)   36/   E8F26 : (MACRO)             	smpsVcDecayRate1    $0F, $0F, $16, $00
(1)   36/   E8F26 : =$F                 vcD1R1 set $0F
(1)   36/   E8F26 : =$F                 vcD1R2 set $0F
(1)   36/   E8F26 : =$16                vcD1R3 set $16
(1)   36/   E8F26 : =$0                 vcD1R4 set $00
(1)   37/   E8F26 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   37/   E8F26 : =$0                 vcD2R1 set $00
(1)   37/   E8F26 : =$0                 vcD2R2 set $00
(1)   37/   E8F26 : =$0                 vcD2R3 set $00
(1)   37/   E8F26 : =$0                 vcD2R4 set $00
(1)   38/   E8F26 : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0A, $00
(1)   38/   E8F26 : =$F                 vcDL1 set $0F
(1)   38/   E8F26 : =$F                 vcDL2 set $0F
(1)   38/   E8F26 : =$A                 vcDL3 set $0A
(1)   38/   E8F26 : =$0                 vcDL4 set $00
(1)   39/   E8F26 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   39/   E8F26 : =$F                 vcRR1 set $0F
(1)   39/   E8F26 : =$F                 vcRR2 set $0F
(1)   39/   E8F26 : =$F                 vcRR3 set $0F
(1)   39/   E8F26 : =$F                 vcRR4 set $0F
(1)   40/   E8F26 : (MACRO)             	smpsVcTotalLevel    $00, $0A, $00, $00
(1)   40/   E8F26 : =$0                 vcTL1 set $00
(1)   40/   E8F26 : =$A                 vcTL2 set $0A
(1)   40/   E8F26 : =$0                 vcTL3 set $00
(1)   40/   E8F26 : =$0                 vcTL4 set $00
(1)   40/   E8F26 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   40/   E8F27 :                     ;   0     1     2     3     4     5     6     7
(1)   40/   E8F27 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   40/   E8F27 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   40/   E8F27 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   40/   E8F27 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   40/   E8F27 : =$80                vcTLMask1 set $80
(1)   40/   E8F27 :                     
(1)   40/   E8F27 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   40/   E8F27 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   40/   E8F27 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   40/   E8F27 : =$80                vcTLMask1 set $80
(1)   40/   E8F27 : =$0                 vcTL1 set vcTL1&$7F
(1)   40/   E8F27 : =$A                 vcTL2 set vcTL2&$7F
(1)   40/   E8F27 : =$0                 vcTL3 set vcTL3&$7F
(1)   40/   E8F27 : =$0                 vcTL4 set vcTL4&$7F
(1)   40/   E8F27 :                     
(1)   40/   E8F27 : 0000 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   40/   E8F2B : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   40/   E8F2F : 0016 0F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   40/   E8F33 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   40/   E8F37 : 0FAF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   40/   E8F3B : 0080 0A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   41/   E8F3F :                     
(1)   42/   E8F3F :                     
  528/   E8F3F :                        Sound6A:	include "sfx-improved/EA - Laser Burst.asm"
(1)    1/   E8F3F :                     Sound6A_LaserBurst_Header:
(1)    2/   E8F3F : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8F3F :                     
(1)    2/   E8F3F : =$2                 SourceDriver set 2
(1)    2/   E8F3F :                     
(1)    2/   E8F3F : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8F3F :                     
(1)    2/   E8F3F : =$E8F3F             songStart set *
(1)    2/   E8F3F :                     
(1)    2/   E8F3F :                     
(1)    3/   E8F3F : (MACRO)             	smpsHeaderVoice     Sound6A_6F_Laser_Voices
(1)    3/   E8F3F : 518F                                dc.w    z80_ptr(SOUND6A_6F_LASER_VOICES)
(1)    4/   E8F41 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8F41 : 01                          dc.b    $01
(1)    5/   E8F42 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8F42 : 01                          dc.b    $01
(1)    6/   E8F43 :                     
(1)    7/   E8F43 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound6A_LaserBurst_FM5,	$00, $04
(1)    7/   E8F43 : 8005                        dc.b    $80,CFM5
(1)    7/   E8F45 :  (MACRO-2)                  CheckedChannelPointer SOUND6A_LASERBURST_FM5
(1)    7/   E8F45 : 498F                                dc.w    z80_ptr(SOUND6A_LASERBURST_FM5)
(1)    7/   E8F47 : 00                                  dc.b    $00
(1)    7/   E8F48 : 04                          dc.b    $04
(1)    8/   E8F49 :                     
(1)    9/   E8F49 :                     ; FM5 Data
(1)   10/   E8F49 :                     Sound6A_LaserBurst_FM5:
(1)   11/   E8F49 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8F49 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8F49 : EF00                                dc.b    $EF,$00
(1)   12/   E8F4B : DF14                	dc.b	nBb7, $14
(1)   13/   E8F4D : (MACRO)             	smpsAlterVol        $18
(1)   13/   E8F4D : E618                        dc.b    $E6,$18
(1)   14/   E8F4F : 06                  	dc.b	$06
(1)   15/   E8F50 : (MACRO)             	smpsStop
(1)   15/   E8F50 : F2                          dc.b    $F2
(1)   16/   E8F51 :                     
(1)   17/   E8F51 :                     Sound6A_6F_Laser_Voices:
(1)   18/   E8F51 :                     ;	Voice $00
(1)   19/   E8F51 :                     ;	$3D
(1)   20/   E8F51 :                     ;	$09, $34, $34, $28, 	$1F, $16, $16, $16, 	$00, $00, $00, $04
(1)   21/   E8F51 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$15, $02, $02, $00
(1)   22/   E8F51 : (MACRO)             	smpsVcAlgorithm     $05
(1)   22/   E8F51 : =$5                 vcAlgorithm set $05
(1)   23/   E8F51 : (MACRO)             	smpsVcFeedback      $07
(1)   23/   E8F51 : =$7                 vcFeedback set $07
(1)   24/   E8F51 : (MACRO)             	smpsVcUnusedBits    $00
(1)   24/   E8F51 : =$0                 vcUnusedBits set $00
(1)   24/   E8F51 : =$0                 vcD1R1Unk set 0
(1)   24/   E8F51 : =$0                 vcD1R2Unk set 0
(1)   24/   E8F51 : =$0                 vcD1R3Unk set 0
(1)   24/   E8F51 : =$0                 vcD1R4Unk set 0
(1)   25/   E8F51 : (MACRO)             	smpsVcDetune        $02, $03, $03, $00
(1)   25/   E8F51 : =$2                 vcDT1 set $02
(1)   25/   E8F51 : =$3                 vcDT2 set $03
(1)   25/   E8F51 : =$3                 vcDT3 set $03
(1)   25/   E8F51 : =$0                 vcDT4 set $00
(1)   26/   E8F51 : (MACRO)             	smpsVcCoarseFreq    $08, $04, $04, $09
(1)   26/   E8F51 : =$8                 vcCF1 set $08
(1)   26/   E8F51 : =$4                 vcCF2 set $04
(1)   26/   E8F51 : =$4                 vcCF3 set $04
(1)   26/   E8F51 : =$9                 vcCF4 set $09
(1)   27/   E8F51 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   27/   E8F51 : =$0                 vcRS1 set $00
(1)   27/   E8F51 : =$0                 vcRS2 set $00
(1)   27/   E8F51 : =$0                 vcRS3 set $00
(1)   27/   E8F51 : =$0                 vcRS4 set $00
(1)   28/   E8F51 : (MACRO)             	smpsVcAttackRate    $16, $16, $16, $1F
(1)   28/   E8F51 : =$16                vcAR1 set $16
(1)   28/   E8F51 : =$16                vcAR2 set $16
(1)   28/   E8F51 : =$16                vcAR3 set $16
(1)   28/   E8F51 : =$1F                vcAR4 set $1F
(1)   29/   E8F51 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   29/   E8F51 : =$0                 vcAM1 set $00<<7
(1)   29/   E8F51 : =$0                 vcAM2 set $00<<7
(1)   29/   E8F51 : =$0                 vcAM3 set $00<<7
(1)   29/   E8F51 : =$0                 vcAM4 set $00<<7
(1)   30/   E8F51 : (MACRO)             	smpsVcDecayRate1    $04, $00, $00, $00
(1)   30/   E8F51 : =$4                 vcD1R1 set $04
(1)   30/   E8F51 : =$0                 vcD1R2 set $00
(1)   30/   E8F51 : =$0                 vcD1R3 set $00
(1)   30/   E8F51 : =$0                 vcD1R4 set $00
(1)   31/   E8F51 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   31/   E8F51 : =$0                 vcD2R1 set $00
(1)   31/   E8F51 : =$0                 vcD2R2 set $00
(1)   31/   E8F51 : =$0                 vcD2R3 set $00
(1)   31/   E8F51 : =$0                 vcD2R4 set $00
(1)   32/   E8F51 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   32/   E8F51 : =$0                 vcDL1 set $00
(1)   32/   E8F51 : =$0                 vcDL2 set $00
(1)   32/   E8F51 : =$0                 vcDL3 set $00
(1)   32/   E8F51 : =$0                 vcDL4 set $00
(1)   33/   E8F51 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   33/   E8F51 : =$F                 vcRR1 set $0F
(1)   33/   E8F51 : =$F                 vcRR2 set $0F
(1)   33/   E8F51 : =$F                 vcRR3 set $0F
(1)   33/   E8F51 : =$F                 vcRR4 set $0F
(1)   34/   E8F51 : (MACRO)             	smpsVcTotalLevel    $00, $02, $02, $15
(1)   34/   E8F51 : =$0                 vcTL1 set $00
(1)   34/   E8F51 : =$2                 vcTL2 set $02
(1)   34/   E8F51 : =$2                 vcTL3 set $02
(1)   34/   E8F51 : =$15                vcTL4 set $15
(1)   34/   E8F51 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   34/   E8F52 :                     ;   0     1     2     3     4     5     6     7
(1)   34/   E8F52 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   34/   E8F52 : =$0                 vcTLMask4 set 0
(1)   34/   E8F52 : =$0                 vcTLMask3 set 0
(1)   34/   E8F52 : =$0                 vcTLMask2 set 0
(1)   34/   E8F52 : =$0                 vcTLMask1 set 0
(1)   34/   E8F52 :                     
(1)   34/   E8F52 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   34/   E8F52 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   34/   E8F52 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   34/   E8F52 : =$80                vcTLMask1 set $80
(1)   34/   E8F52 : =$0                 vcTL1 set vcTL1&$7F
(1)   34/   E8F52 : =$2                 vcTL2 set vcTL2&$7F
(1)   34/   E8F52 : =$2                 vcTL3 set vcTL3&$7F
(1)   34/   E8F52 : =$15                vcTL4 set vcTL4&$7F
(1)   34/   E8F52 :                     
(1)   34/   E8F52 : 0934 3428                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   34/   E8F56 : 1F16 1616                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   34/   E8F5A : 0000 0004                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   34/   E8F5E : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   34/   E8F62 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   34/   E8F66 : 1582 8280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   35/   E8F6A :                     
(1)   36/   E8F6A :                     
  529/   E8F6A :                        Sound6B:	include "sfx-improved/EB - Scatter.asm"
(1)    1/   E8F6A :                     Sound6B_LaserFloor_Header:
(1)    2/   E8F6A : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8F6A :                     
(1)    2/   E8F6A : =$2                 SourceDriver set 2
(1)    2/   E8F6A :                     
(1)    2/   E8F6A : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8F6A :                     
(1)    2/   E8F6A : =$E8F6A             songStart set *
(1)    2/   E8F6A :                     
(1)    2/   E8F6A :                     
(1)    3/   E8F6A : (MACRO)             	smpsHeaderVoice     Sound6B_LaserFloor_Voices
(1)    3/   E8F6A : 7B8F                                dc.w    z80_ptr(SOUND6B_LASERFLOOR_VOICES)
(1)    4/   E8F6C : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8F6C : 01                          dc.b    $01
(1)    5/   E8F6D : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E8F6D : 01                          dc.b    $01
(1)    6/   E8F6E :                     
(1)    7/   E8F6E : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound6B_LaserFloor_FM4,	$00, $02
(1)    7/   E8F6E : 8004                        dc.b    $80,CFM4
(1)    7/   E8F70 :  (MACRO-2)                  CheckedChannelPointer SOUND6B_LASERFLOOR_FM4
(1)    7/   E8F70 : 748F                                dc.w    z80_ptr(SOUND6B_LASERFLOOR_FM4)
(1)    7/   E8F72 : 00                                  dc.b    $00
(1)    7/   E8F73 : 02                          dc.b    $02
(1)    8/   E8F74 :                     
(1)    9/   E8F74 :                     ; FM4 Data
(1)   10/   E8F74 :                     Sound6B_LaserFloor_FM4:
(1)   11/   E8F74 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E8F74 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E8F74 : EF00                                dc.b    $EF,$00
(1)   12/   E8F76 : 8104 800C           	dc.b	nC0, $04, nRst, $0C
(1)   13/   E8F7A : (MACRO)             	smpsStop
(1)   13/   E8F7A : F2                          dc.b    $F2
(1)   14/   E8F7B :                     
(1)   15/   E8F7B :                     Sound6B_LaserFloor_Voices:
(1)   16/   E8F7B :                     ;	Voice $00
(1)   17/   E8F7B :                     ;	$3A
(1)   18/   E8F7B :                     ;	$30, $40, $30, $70, 	$1F, $1F, $1F, $1F, 	$12, $01, $0A, $07
(1)   19/   E8F7B :                     ;	$00, $01, $01, $03, 	$00, $C3, $23, $46, 	$08, $1C, $07, $03
(1)   20/   E8F7B : (MACRO)             	smpsVcAlgorithm     $02
(1)   20/   E8F7B : =$2                 vcAlgorithm set $02
(1)   21/   E8F7B : (MACRO)             	smpsVcFeedback      $07
(1)   21/   E8F7B : =$7                 vcFeedback set $07
(1)   22/   E8F7B : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E8F7B : =$0                 vcUnusedBits set $00
(1)   22/   E8F7B : =$0                 vcD1R1Unk set 0
(1)   22/   E8F7B : =$0                 vcD1R2Unk set 0
(1)   22/   E8F7B : =$0                 vcD1R3Unk set 0
(1)   22/   E8F7B : =$0                 vcD1R4Unk set 0
(1)   23/   E8F7B : (MACRO)             	smpsVcDetune        $07, $03, $04, $03
(1)   23/   E8F7B : =$7                 vcDT1 set $07
(1)   23/   E8F7B : =$3                 vcDT2 set $03
(1)   23/   E8F7B : =$4                 vcDT3 set $04
(1)   23/   E8F7B : =$3                 vcDT4 set $03
(1)   24/   E8F7B : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   24/   E8F7B : =$0                 vcCF1 set $00
(1)   24/   E8F7B : =$0                 vcCF2 set $00
(1)   24/   E8F7B : =$0                 vcCF3 set $00
(1)   24/   E8F7B : =$0                 vcCF4 set $00
(1)   25/   E8F7B : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E8F7B : =$0                 vcRS1 set $00
(1)   25/   E8F7B : =$0                 vcRS2 set $00
(1)   25/   E8F7B : =$0                 vcRS3 set $00
(1)   25/   E8F7B : =$0                 vcRS4 set $00
(1)   26/   E8F7B : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E8F7B : =$1F                vcAR1 set $1F
(1)   26/   E8F7B : =$1F                vcAR2 set $1F
(1)   26/   E8F7B : =$1F                vcAR3 set $1F
(1)   26/   E8F7B : =$1F                vcAR4 set $1F
(1)   27/   E8F7B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E8F7B : =$0                 vcAM1 set $00<<7
(1)   27/   E8F7B : =$0                 vcAM2 set $00<<7
(1)   27/   E8F7B : =$0                 vcAM3 set $00<<7
(1)   27/   E8F7B : =$0                 vcAM4 set $00<<7
(1)   28/   E8F7B : (MACRO)             	smpsVcDecayRate1    $07, $0A, $01, $12
(1)   28/   E8F7B : =$7                 vcD1R1 set $07
(1)   28/   E8F7B : =$A                 vcD1R2 set $0A
(1)   28/   E8F7B : =$1                 vcD1R3 set $01
(1)   28/   E8F7B : =$12                vcD1R4 set $12
(1)   29/   E8F7B : (MACRO)             	smpsVcDecayRate2    $03, $01, $01, $00
(1)   29/   E8F7B : =$3                 vcD2R1 set $03
(1)   29/   E8F7B : =$1                 vcD2R2 set $01
(1)   29/   E8F7B : =$1                 vcD2R3 set $01
(1)   29/   E8F7B : =$0                 vcD2R4 set $00
(1)   30/   E8F7B : (MACRO)             	smpsVcDecayLevel    $04, $02, $0C, $00
(1)   30/   E8F7B : =$4                 vcDL1 set $04
(1)   30/   E8F7B : =$2                 vcDL2 set $02
(1)   30/   E8F7B : =$C                 vcDL3 set $0C
(1)   30/   E8F7B : =$0                 vcDL4 set $00
(1)   31/   E8F7B : (MACRO)             	smpsVcReleaseRate   $06, $03, $03, $00
(1)   31/   E8F7B : =$6                 vcRR1 set $06
(1)   31/   E8F7B : =$3                 vcRR2 set $03
(1)   31/   E8F7B : =$3                 vcRR3 set $03
(1)   31/   E8F7B : =$0                 vcRR4 set $00
(1)   32/   E8F7B : (MACRO)             	smpsVcTotalLevel    $03, $07, $1C, $08
(1)   32/   E8F7B : =$3                 vcTL1 set $03
(1)   32/   E8F7B : =$7                 vcTL2 set $07
(1)   32/   E8F7B : =$1C                vcTL3 set $1C
(1)   32/   E8F7B : =$8                 vcTL4 set $08
(1)   32/   E8F7B : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E8F7C :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E8F7C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E8F7C : =$0                 vcTLMask4 set 0
(1)   32/   E8F7C : =$0                 vcTLMask3 set 0
(1)   32/   E8F7C : =$0                 vcTLMask2 set 0
(1)   32/   E8F7C : =$0                 vcTLMask1 set 0
(1)   32/   E8F7C :                     
(1)   32/   E8F7C : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E8F7C : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E8F7C : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E8F7C : =$80                vcTLMask1 set $80
(1)   32/   E8F7C : =$3                 vcTL1 set vcTL1&$7F
(1)   32/   E8F7C : =$7                 vcTL2 set vcTL2&$7F
(1)   32/   E8F7C : =$1C                vcTL3 set vcTL3&$7F
(1)   32/   E8F7C : =$8                 vcTL4 set vcTL4&$7F
(1)   32/   E8F7C :                     
(1)   32/   E8F7C : 3040 3070                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E8F80 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E8F84 : 1201 0A07                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E8F88 : 0001 0103                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E8F8C : 00C3 2346                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E8F90 : 081C 0783                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E8F94 :                     
(1)   34/   E8F94 :                     
  530/   E8F94 :                        Sound6C:	include "sfx-improved/EC - Teleport.asm"
(1)    1/   E8F94 :                     Sound6C_Teleport_Header:
(1)    2/   E8F94 : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8F94 :                     
(1)    2/   E8F94 : =$2                 SourceDriver set 2
(1)    2/   E8F94 :                     
(1)    2/   E8F94 : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8F94 :                     
(1)    2/   E8F94 : =$E8F94             songStart set *
(1)    2/   E8F94 :                     
(1)    2/   E8F94 :                     
(1)    3/   E8F94 : (MACRO)             	smpsHeaderVoice     Sound6C_Teleport_Voices
(1)    3/   E8F94 : CD8F                                dc.w    z80_ptr(SOUND6C_TELEPORT_VOICES)
(1)    4/   E8F96 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E8F96 : 01                          dc.b    $01
(1)    5/   E8F97 : (MACRO)             	smpsHeaderChanSFX   $04
(1)    5/   E8F97 : 04                          dc.b    $04
(1)    6/   E8F98 :                     
(1)    7/   E8F98 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound6C_Teleport_FM5,	$00, $10
(1)    7/   E8F98 : 8005                        dc.b    $80,CFM5
(1)    7/   E8F9A :  (MACRO-2)                  CheckedChannelPointer SOUND6C_TELEPORT_FM5
(1)    7/   E8F9A : B28F                                dc.w    z80_ptr(SOUND6C_TELEPORT_FM5)
(1)    7/   E8F9C : 00                                  dc.b    $00
(1)    7/   E8F9D : 10                          dc.b    $10
(1)    8/   E8F9E : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound6C_Teleport_FM4,	$00, $10
(1)    8/   E8F9E : 8004                        dc.b    $80,CFM4
(1)    8/   E8FA0 :  (MACRO-2)                  CheckedChannelPointer SOUND6C_TELEPORT_FM4
(1)    8/   E8FA0 : B08F                                dc.w    z80_ptr(SOUND6C_TELEPORT_FM4)
(1)    8/   E8FA2 : 00                                  dc.b    $00
(1)    8/   E8FA3 : 10                          dc.b    $10
(1)    9/   E8FA4 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound5F_6C_PSG3,	$00, $00
(1)    9/   E8FA4 : 80C0                        dc.b    $80,CPSG3
(1)    9/   E8FA6 :  (MACRO-2)                  CheckedChannelPointer SOUND5F_6C_PSG3
(1)    9/   E8FA6 : D08C                                dc.w    z80_ptr(SOUND5F_6C_PSG3)
(1)    9/   E8FA8 :  (MACRO-2)                          PSGPitchConvert $00
(1)    9/   E8FA8 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    9/   E8FA9 : 00                          dc.b    $00
(1)   10/   E8FAA : (MACRO)             	smpsHeaderSFXChannel cPSG2, Sound5F_6C_PSG2,	$00, $00
(1)   10/   E8FAA : 80A0                        dc.b    $80,CPSG2
(1)   10/   E8FAC :  (MACRO-2)                  CheckedChannelPointer SOUND5F_6C_PSG2
(1)   10/   E8FAC : E58C                                dc.w    z80_ptr(SOUND5F_6C_PSG2)
(1)   10/   E8FAE :  (MACRO-2)                          PSGPitchConvert $00
(1)   10/   E8FAE : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)   10/   E8FAF : 00                          dc.b    $00
(1)   11/   E8FB0 :                     
(1)   12/   E8FB0 :                     ; FM4 Data
(1)   13/   E8FB0 :                     Sound6C_Teleport_FM4:
(1)   14/   E8FB0 : (MACRO)             	smpsAlterNote       $10
(1)   14/   E8FB0 :  (MACRO-2)                  smpsDetune      $10
(1)   14/   E8FB0 : E110                        dc.b    $E1,$10
(1)   15/   E8FB2 :                     
(1)   16/   E8FB2 :                     ; FM5 Data
(1)   17/   E8FB2 :                     Sound6C_Teleport_FM5:
(1)   18/   E8FB2 : (MACRO)             	smpsSetvoice        $01
(1)   18/   E8FB2 :  (MACRO-2)                  smpsFMvoice $01
(1)   18/   E8FB2 : EF01                                dc.b    $EF,$01
(1)   19/   E8FB4 : (MACRO)             	smpsModSet          $01, $01, $EC, $56
(1)   19/   E8FB4 : F0                          dc.b    $F0
(1)   19/   E8FB5 : 0201 EC57                           dc.b    $01+1,$01,$EC,(($56+1) * $01) & $FF
(1)   19/   E8FB9 :                             ;dc.b   $01,$EC,$56
(1)   20/   E8FB9 : C024                	dc.b	nEb5, $24
(1)   21/   E8FBB : (MACRO)             	smpsModOff
(1)   21/   E8FBB : FA                                  dc.b    $FA
(1)   22/   E8FBC : (MACRO)             	smpsSetvoice        $00
(1)   22/   E8FBC :  (MACRO-2)                  smpsFMvoice $00
(1)   22/   E8FBC : EF00                                dc.b    $EF,$00
(1)   23/   E8FBE : (MACRO)             	smpsAlterVol        $F0
(1)   23/   E8FBE : E6F0                        dc.b    $E6,$F0
(1)   24/   E8FC0 :                     
(1)   25/   E8FC0 :                     Sound6C_Teleport_Loop00:
(1)   26/   E8FC0 : BB02 E7             	dc.b	nBb4, $02, smpsNoAttack
(1)   27/   E8FC3 : (MACRO)             	smpsAlterVol        $02
(1)   27/   E8FC3 : E602                        dc.b    $E6,$02
(1)   28/   E8FC5 : (MACRO)             	smpsAlterPitch      $01
(1)   28/   E8FC5 :  (MACRO-2)                  smpsChangeTransposition $01
(1)   28/   E8FC5 : FB01                                dc.b    $FB,$01
(1)   29/   E8FC7 : (MACRO)             	smpsLoop            $00, $20, Sound6C_Teleport_Loop00
(1)   29/   E8FC7 : F7                          dc.b    $F7
(1)   29/   E8FC8 : 0020                        dc.b    $00,$20
(1)   29/   E8FCA : C08F                                dc.w    z80_ptr(SOUND6C_TELEPORT_LOOP00)
(1)   30/   E8FCC : (MACRO)             	smpsStop
(1)   30/   E8FCC : F2                          dc.b    $F2
(1)   31/   E8FCD :                     
(1)   32/   E8FCD :                     Sound6C_Teleport_Voices:
(1)   33/   E8FCD :                     ;	Voice $00
(1)   34/   E8FCD :                     ;	$00
(1)   35/   E8FCD :                     ;	$53, $03, $30, $30, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   36/   E8FCD :                     ;	$00, $00, $00, $00, 	$00, $00, $00, $0F, 	$0F, $23, $06, $80
(1)   37/   E8FCD : (MACRO)             	smpsVcAlgorithm     $00
(1)   37/   E8FCD : =$0                 vcAlgorithm set $00
(1)   38/   E8FCD : (MACRO)             	smpsVcFeedback      $00
(1)   38/   E8FCD : =$0                 vcFeedback set $00
(1)   39/   E8FCD : (MACRO)             	smpsVcUnusedBits    $00
(1)   39/   E8FCD : =$0                 vcUnusedBits set $00
(1)   39/   E8FCD : =$0                 vcD1R1Unk set 0
(1)   39/   E8FCD : =$0                 vcD1R2Unk set 0
(1)   39/   E8FCD : =$0                 vcD1R3Unk set 0
(1)   39/   E8FCD : =$0                 vcD1R4Unk set 0
(1)   40/   E8FCD : (MACRO)             	smpsVcDetune        $03, $03, $00, $05
(1)   40/   E8FCD : =$3                 vcDT1 set $03
(1)   40/   E8FCD : =$3                 vcDT2 set $03
(1)   40/   E8FCD : =$0                 vcDT3 set $00
(1)   40/   E8FCD : =$5                 vcDT4 set $05
(1)   41/   E8FCD : (MACRO)             	smpsVcCoarseFreq    $00, $00, $03, $03
(1)   41/   E8FCD : =$0                 vcCF1 set $00
(1)   41/   E8FCD : =$0                 vcCF2 set $00
(1)   41/   E8FCD : =$3                 vcCF3 set $03
(1)   41/   E8FCD : =$3                 vcCF4 set $03
(1)   42/   E8FCD : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   42/   E8FCD : =$0                 vcRS1 set $00
(1)   42/   E8FCD : =$0                 vcRS2 set $00
(1)   42/   E8FCD : =$0                 vcRS3 set $00
(1)   42/   E8FCD : =$0                 vcRS4 set $00
(1)   43/   E8FCD : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   43/   E8FCD : =$1F                vcAR1 set $1F
(1)   43/   E8FCD : =$1F                vcAR2 set $1F
(1)   43/   E8FCD : =$1F                vcAR3 set $1F
(1)   43/   E8FCD : =$1F                vcAR4 set $1F
(1)   44/   E8FCD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   44/   E8FCD : =$0                 vcAM1 set $00<<7
(1)   44/   E8FCD : =$0                 vcAM2 set $00<<7
(1)   44/   E8FCD : =$0                 vcAM3 set $00<<7
(1)   44/   E8FCD : =$0                 vcAM4 set $00<<7
(1)   45/   E8FCD : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   45/   E8FCD : =$0                 vcD1R1 set $00
(1)   45/   E8FCD : =$0                 vcD1R2 set $00
(1)   45/   E8FCD : =$0                 vcD1R3 set $00
(1)   45/   E8FCD : =$0                 vcD1R4 set $00
(1)   46/   E8FCD : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   46/   E8FCD : =$0                 vcD2R1 set $00
(1)   46/   E8FCD : =$0                 vcD2R2 set $00
(1)   46/   E8FCD : =$0                 vcD2R3 set $00
(1)   46/   E8FCD : =$0                 vcD2R4 set $00
(1)   47/   E8FCD : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   47/   E8FCD : =$0                 vcDL1 set $00
(1)   47/   E8FCD : =$0                 vcDL2 set $00
(1)   47/   E8FCD : =$0                 vcDL3 set $00
(1)   47/   E8FCD : =$0                 vcDL4 set $00
(1)   48/   E8FCD : (MACRO)             	smpsVcReleaseRate   $0F, $00, $00, $00
(1)   48/   E8FCD : =$F                 vcRR1 set $0F
(1)   48/   E8FCD : =$0                 vcRR2 set $00
(1)   48/   E8FCD : =$0                 vcRR3 set $00
(1)   48/   E8FCD : =$0                 vcRR4 set $00
(1)   49/   E8FCD : (MACRO)             	smpsVcTotalLevel    $80, $06, $23, $0F
(1)   49/   E8FCD : =$80                vcTL1 set $80
(1)   49/   E8FCD : =$6                 vcTL2 set $06
(1)   49/   E8FCD : =$23                vcTL3 set $23
(1)   49/   E8FCD : =$F                 vcTL4 set $0F
(1)   49/   E8FCD : 00                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   49/   E8FCE :                     ;   0     1     2     3     4     5     6     7
(1)   49/   E8FCE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   49/   E8FCE : =$0                 vcTLMask4 set 0
(1)   49/   E8FCE : =$0                 vcTLMask3 set 0
(1)   49/   E8FCE : =$0                 vcTLMask2 set 0
(1)   49/   E8FCE : =$0                 vcTLMask1 set 0
(1)   49/   E8FCE :                     
(1)   49/   E8FCE : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   49/   E8FCE : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   49/   E8FCE : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   49/   E8FCE : =$80                vcTLMask1 set $80
(1)   49/   E8FCE : =$0                 vcTL1 set vcTL1&$7F
(1)   49/   E8FCE : =$6                 vcTL2 set vcTL2&$7F
(1)   49/   E8FCE : =$23                vcTL3 set vcTL3&$7F
(1)   49/   E8FCE : =$F                 vcTL4 set vcTL4&$7F
(1)   49/   E8FCE :                     
(1)   49/   E8FCE : 5303 3030                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   49/   E8FD2 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   49/   E8FD6 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   49/   E8FDA : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   49/   E8FDE : 0000 000F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   49/   E8FE2 : 0F23 0680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   50/   E8FE6 :                     
(1)   51/   E8FE6 :                     ;	Voice $01
(1)   52/   E8FE6 :                     ;	$3C
(1)   53/   E8FE6 :                     ;	$72, $32, $32, $72, 	$14, $0F, $14, $0F, 	$00, $00, $00, $00
(1)   54/   E8FE6 :                     ;	$00, $00, $00, $00, 	$02, $08, $02, $08, 	$35, $00, $14, $00
(1)   55/   E8FE6 : (MACRO)             	smpsVcAlgorithm     $04
(1)   55/   E8FE6 : =$4                 vcAlgorithm set $04
(1)   56/   E8FE6 : (MACRO)             	smpsVcFeedback      $07
(1)   56/   E8FE6 : =$7                 vcFeedback set $07
(1)   57/   E8FE6 : (MACRO)             	smpsVcUnusedBits    $00
(1)   57/   E8FE6 : =$0                 vcUnusedBits set $00
(1)   57/   E8FE6 : =$0                 vcD1R1Unk set 0
(1)   57/   E8FE6 : =$0                 vcD1R2Unk set 0
(1)   57/   E8FE6 : =$0                 vcD1R3Unk set 0
(1)   57/   E8FE6 : =$0                 vcD1R4Unk set 0
(1)   58/   E8FE6 : (MACRO)             	smpsVcDetune        $07, $03, $03, $07
(1)   58/   E8FE6 : =$7                 vcDT1 set $07
(1)   58/   E8FE6 : =$3                 vcDT2 set $03
(1)   58/   E8FE6 : =$3                 vcDT3 set $03
(1)   58/   E8FE6 : =$7                 vcDT4 set $07
(1)   59/   E8FE6 : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $02
(1)   59/   E8FE6 : =$2                 vcCF1 set $02
(1)   59/   E8FE6 : =$2                 vcCF2 set $02
(1)   59/   E8FE6 : =$2                 vcCF3 set $02
(1)   59/   E8FE6 : =$2                 vcCF4 set $02
(1)   60/   E8FE6 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   60/   E8FE6 : =$0                 vcRS1 set $00
(1)   60/   E8FE6 : =$0                 vcRS2 set $00
(1)   60/   E8FE6 : =$0                 vcRS3 set $00
(1)   60/   E8FE6 : =$0                 vcRS4 set $00
(1)   61/   E8FE6 : (MACRO)             	smpsVcAttackRate    $0F, $14, $0F, $14
(1)   61/   E8FE6 : =$F                 vcAR1 set $0F
(1)   61/   E8FE6 : =$14                vcAR2 set $14
(1)   61/   E8FE6 : =$F                 vcAR3 set $0F
(1)   61/   E8FE6 : =$14                vcAR4 set $14
(1)   62/   E8FE6 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   62/   E8FE6 : =$0                 vcAM1 set $00<<7
(1)   62/   E8FE6 : =$0                 vcAM2 set $00<<7
(1)   62/   E8FE6 : =$0                 vcAM3 set $00<<7
(1)   62/   E8FE6 : =$0                 vcAM4 set $00<<7
(1)   63/   E8FE6 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   63/   E8FE6 : =$0                 vcD1R1 set $00
(1)   63/   E8FE6 : =$0                 vcD1R2 set $00
(1)   63/   E8FE6 : =$0                 vcD1R3 set $00
(1)   63/   E8FE6 : =$0                 vcD1R4 set $00
(1)   64/   E8FE6 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   64/   E8FE6 : =$0                 vcD2R1 set $00
(1)   64/   E8FE6 : =$0                 vcD2R2 set $00
(1)   64/   E8FE6 : =$0                 vcD2R3 set $00
(1)   64/   E8FE6 : =$0                 vcD2R4 set $00
(1)   65/   E8FE6 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   65/   E8FE6 : =$0                 vcDL1 set $00
(1)   65/   E8FE6 : =$0                 vcDL2 set $00
(1)   65/   E8FE6 : =$0                 vcDL3 set $00
(1)   65/   E8FE6 : =$0                 vcDL4 set $00
(1)   66/   E8FE6 : (MACRO)             	smpsVcReleaseRate   $08, $02, $08, $02
(1)   66/   E8FE6 : =$8                 vcRR1 set $08
(1)   66/   E8FE6 : =$2                 vcRR2 set $02
(1)   66/   E8FE6 : =$8                 vcRR3 set $08
(1)   66/   E8FE6 : =$2                 vcRR4 set $02
(1)   67/   E8FE6 : (MACRO)             	smpsVcTotalLevel    $00, $14, $00, $35
(1)   67/   E8FE6 : =$0                 vcTL1 set $00
(1)   67/   E8FE6 : =$14                vcTL2 set $14
(1)   67/   E8FE6 : =$0                 vcTL3 set $00
(1)   67/   E8FE6 : =$35                vcTL4 set $35
(1)   67/   E8FE6 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   67/   E8FE7 :                     ;   0     1     2     3     4     5     6     7
(1)   67/   E8FE7 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   67/   E8FE7 : =$0                 vcTLMask4 set 0
(1)   67/   E8FE7 : =$0                 vcTLMask3 set 0
(1)   67/   E8FE7 : =$0                 vcTLMask2 set 0
(1)   67/   E8FE7 : =$0                 vcTLMask1 set 0
(1)   67/   E8FE7 :                     
(1)   67/   E8FE7 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   67/   E8FE7 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   67/   E8FE7 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   67/   E8FE7 : =$80                vcTLMask1 set $80
(1)   67/   E8FE7 : =$0                 vcTL1 set vcTL1&$7F
(1)   67/   E8FE7 : =$14                vcTL2 set vcTL2&$7F
(1)   67/   E8FE7 : =$0                 vcTL3 set vcTL3&$7F
(1)   67/   E8FE7 : =$35                vcTL4 set vcTL4&$7F
(1)   67/   E8FE7 :                     
(1)   67/   E8FE7 : 7232 3272                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   67/   E8FEB : 140F 140F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   67/   E8FEF : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   67/   E8FF3 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   67/   E8FF7 : 0208 0208                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   67/   E8FFB : 3580 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   68/   E8FFF :                     
(1)   69/   E8FFF :                     
  531/   E8FFF :                        Sound6D:	include "sfx-improved/ED - Error.asm"
(1)    1/   E8FFF :                     Sound6D_Error_Header:
(1)    2/   E8FFF : (MACRO)             	smpsHeaderStartSong 2, 1
(1)    2/   E8FFF :                     
(1)    2/   E8FFF : =$2                 SourceDriver set 2
(1)    2/   E8FFF :                     
(1)    2/   E8FFF : =$1                 SourceSMPS2ASM set 1
(1)    2/   E8FFF :                     
(1)    2/   E8FFF : =$E8FFF             songStart set *
(1)    2/   E8FFF :                     
(1)    2/   E8FFF :                     
(1)    3/   E8FFF : (MACRO)             	smpsHeaderVoice     Sound6D_Error_Voices
(1)    3/   E8FFF : 1290                                dc.w    z80_ptr(SOUND6D_ERROR_VOICES)
(1)    4/   E9001 : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E9001 : 01                          dc.b    $01
(1)    5/   E9002 : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E9002 : 01                          dc.b    $01
(1)    6/   E9003 :                     
(1)    7/   E9003 : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound6D_Error_FM5,	$00, $04
(1)    7/   E9003 : 8005                        dc.b    $80,CFM5
(1)    7/   E9005 :  (MACRO-2)                  CheckedChannelPointer SOUND6D_ERROR_FM5
(1)    7/   E9005 : 0990                                dc.w    z80_ptr(SOUND6D_ERROR_FM5)
(1)    7/   E9007 : 00                                  dc.b    $00
(1)    7/   E9008 : 04                          dc.b    $04
(1)    8/   E9009 :                     
(1)    9/   E9009 :                     ; FM5 Data
(1)   10/   E9009 :                     Sound6D_Error_FM5:
(1)   11/   E9009 : (MACRO)             	smpsSetvoice        $00
(1)   11/   E9009 :  (MACRO-2)                  smpsFMvoice $00
(1)   11/   E9009 : EF00                                dc.b    $EF,$00
(1)   12/   E900B : B006 8006 B018      	dc.b	nB3, $06, nRst, $06, nB3, $18
(1)   13/   E9011 : (MACRO)             	smpsStop
(1)   13/   E9011 : F2                          dc.b    $F2
(1)   14/   E9012 :                     
(1)   15/   E9012 :                     Sound6D_Error_Voices:
(1)   16/   E9012 :                     ;	Voice $00
(1)   17/   E9012 :                     ;	$38
(1)   18/   E9012 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   19/   E9012 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1F, $17, $0C, $00
(1)   20/   E9012 : (MACRO)             	smpsVcAlgorithm     $00
(1)   20/   E9012 : =$0                 vcAlgorithm set $00
(1)   21/   E9012 : (MACRO)             	smpsVcFeedback      $07
(1)   21/   E9012 : =$7                 vcFeedback set $07
(1)   22/   E9012 : (MACRO)             	smpsVcUnusedBits    $00
(1)   22/   E9012 : =$0                 vcUnusedBits set $00
(1)   22/   E9012 : =$0                 vcD1R1Unk set 0
(1)   22/   E9012 : =$0                 vcD1R2Unk set 0
(1)   22/   E9012 : =$0                 vcD1R3Unk set 0
(1)   22/   E9012 : =$0                 vcD1R4Unk set 0
(1)   23/   E9012 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)   23/   E9012 : =$0                 vcDT1 set $00
(1)   23/   E9012 : =$0                 vcDT2 set $00
(1)   23/   E9012 : =$0                 vcDT3 set $00
(1)   23/   E9012 : =$0                 vcDT4 set $00
(1)   24/   E9012 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $00
(1)   24/   E9012 : =$0                 vcCF1 set $00
(1)   24/   E9012 : =$0                 vcCF2 set $00
(1)   24/   E9012 : =$0                 vcCF3 set $00
(1)   24/   E9012 : =$0                 vcCF4 set $00
(1)   25/   E9012 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   25/   E9012 : =$0                 vcRS1 set $00
(1)   25/   E9012 : =$0                 vcRS2 set $00
(1)   25/   E9012 : =$0                 vcRS3 set $00
(1)   25/   E9012 : =$0                 vcRS4 set $00
(1)   26/   E9012 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   26/   E9012 : =$1F                vcAR1 set $1F
(1)   26/   E9012 : =$1F                vcAR2 set $1F
(1)   26/   E9012 : =$1F                vcAR3 set $1F
(1)   26/   E9012 : =$1F                vcAR4 set $1F
(1)   27/   E9012 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   27/   E9012 : =$0                 vcAM1 set $00<<7
(1)   27/   E9012 : =$0                 vcAM2 set $00<<7
(1)   27/   E9012 : =$0                 vcAM3 set $00<<7
(1)   27/   E9012 : =$0                 vcAM4 set $00<<7
(1)   28/   E9012 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)   28/   E9012 : =$0                 vcD1R1 set $00
(1)   28/   E9012 : =$0                 vcD1R2 set $00
(1)   28/   E9012 : =$0                 vcD1R3 set $00
(1)   28/   E9012 : =$0                 vcD1R4 set $00
(1)   29/   E9012 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)   29/   E9012 : =$0                 vcD2R1 set $00
(1)   29/   E9012 : =$0                 vcD2R2 set $00
(1)   29/   E9012 : =$0                 vcD2R3 set $00
(1)   29/   E9012 : =$0                 vcD2R4 set $00
(1)   30/   E9012 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   30/   E9012 : =$0                 vcDL1 set $00
(1)   30/   E9012 : =$0                 vcDL2 set $00
(1)   30/   E9012 : =$0                 vcDL3 set $00
(1)   30/   E9012 : =$0                 vcDL4 set $00
(1)   31/   E9012 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   31/   E9012 : =$F                 vcRR1 set $0F
(1)   31/   E9012 : =$F                 vcRR2 set $0F
(1)   31/   E9012 : =$F                 vcRR3 set $0F
(1)   31/   E9012 : =$F                 vcRR4 set $0F
(1)   32/   E9012 : (MACRO)             	smpsVcTotalLevel    $00, $0C, $17, $1F
(1)   32/   E9012 : =$0                 vcTL1 set $00
(1)   32/   E9012 : =$C                 vcTL2 set $0C
(1)   32/   E9012 : =$17                vcTL3 set $17
(1)   32/   E9012 : =$1F                vcTL4 set $1F
(1)   32/   E9012 : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   32/   E9013 :                     ;   0     1     2     3     4     5     6     7
(1)   32/   E9013 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   32/   E9013 : =$0                 vcTLMask4 set 0
(1)   32/   E9013 : =$0                 vcTLMask3 set 0
(1)   32/   E9013 : =$0                 vcTLMask2 set 0
(1)   32/   E9013 : =$0                 vcTLMask1 set 0
(1)   32/   E9013 :                     
(1)   32/   E9013 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   32/   E9013 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   32/   E9013 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   32/   E9013 : =$80                vcTLMask1 set $80
(1)   32/   E9013 : =$0                 vcTL1 set vcTL1&$7F
(1)   32/   E9013 : =$C                 vcTL2 set vcTL2&$7F
(1)   32/   E9013 : =$17                vcTL3 set vcTL3&$7F
(1)   32/   E9013 : =$1F                vcTL4 set vcTL4&$7F
(1)   32/   E9013 :                     
(1)   32/   E9013 : 0000 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   32/   E9017 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   32/   E901B : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   32/   E901F : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   32/   E9023 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   32/   E9027 : 1F17 0C80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   33/   E902B :                     
(1)   34/   E902B :                     
  532/   E902B :                        Sound6E:	include "sfx-improved/EE - Mecha Sonic Buzz.asm"
(1)    1/   E902B :                     Sound6E_MechaSonicBuzz_Header:
(1)    2/   E902B : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E902B :                     
(1)    2/   E902B : =$2                 SourceDriver set 2
(1)    2/   E902B :                     
(1)    2/   E902B : =$0                 SourceSMPS2ASM set 0
(1)    2/   E902B :                     
(1)    2/   E902B : =$E902B             songStart set *
(1)    2/   E902B :                     
(1)    2/   E902B :                     
(1)    3/   E902B : (MACRO)             	smpsHeaderVoice     Sound6E_MechaSonicBuzz_Voices
(1)    3/   E902B : 5090                                dc.w    z80_ptr(SOUND6E_MECHASONICBUZZ_VOICES)
(1)    4/   E902D : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E902D : 01                          dc.b    $01
(1)    5/   E902E : (MACRO)             	smpsHeaderChanSFX   $02
(1)    5/   E902E : 02                          dc.b    $02
(1)    6/   E902F :                     
(1)    7/   E902F : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound6E_MechaSonicBuzz_FM5,	$00, $00
(1)    7/   E902F : 8005                        dc.b    $80,CFM5
(1)    7/   E9031 :  (MACRO-2)                  CheckedChannelPointer SOUND6E_MECHASONICBUZZ_FM5
(1)    7/   E9031 : 3B90                                dc.w    z80_ptr(SOUND6E_MECHASONICBUZZ_FM5)
(1)    7/   E9033 : 00                                  dc.b    $00
(1)    7/   E9034 : 00                          dc.b    $00
(1)    8/   E9035 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound6E_MechaSonicBuzz_PSG3,	$00, $00
(1)    8/   E9035 : 80C0                        dc.b    $80,CPSG3
(1)    8/   E9037 :  (MACRO-2)                  CheckedChannelPointer SOUND6E_MECHASONICBUZZ_PSG3
(1)    8/   E9037 : 4B90                                dc.w    z80_ptr(SOUND6E_MECHASONICBUZZ_PSG3)
(1)    8/   E9039 :  (MACRO-2)                          PSGPitchConvert $00
(1)    8/   E9039 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    8/   E903A : 00                          dc.b    $00
(1)    9/   E903B :                     
(1)   10/   E903B :                     ; FM5 Data
(1)   11/   E903B :                     Sound6E_MechaSonicBuzz_FM5:
(1)   12/   E903B : (MACRO)             	smpsSetvoice        $00
(1)   12/   E903B :  (MACRO-2)                  smpsFMvoice $00
(1)   12/   E903B : EF00                                dc.b    $EF,$00
(1)   13/   E903D : C624 E7             	dc.b	nA5, $24, smpsNoAttack
(1)   14/   E9040 :                     
(1)   15/   E9040 :                     Sound6E_MechaSonicBuzz_Loop00:
(1)   16/   E9040 : C604 E7             	dc.b	nA5, $04, smpsNoAttack
(1)   17/   E9043 : (MACRO)             	smpsAlterVol        $04
(1)   17/   E9043 : E604                        dc.b    $E6,$04
(1)   18/   E9045 : (MACRO)             	smpsLoop            $00, $08, Sound6E_MechaSonicBuzz_Loop00
(1)   18/   E9045 : F7                          dc.b    $F7
(1)   18/   E9046 : 0008                        dc.b    $00,$08
(1)   18/   E9048 : 4090                                dc.w    z80_ptr(SOUND6E_MECHASONICBUZZ_LOOP00)
(1)   19/   E904A : (MACRO)             	smpsStop
(1)   19/   E904A : F2                          dc.b    $F2
(1)   20/   E904B :                     
(1)   21/   E904B :                     ; PSG3 Data
(1)   22/   E904B :                     Sound6E_MechaSonicBuzz_PSG3:
(1)   23/   E904B : (MACRO)             	smpsPSGform         $E7
(1)   23/   E904B : F3E7                        dc.b    $F3,$E7
(1)   24/   E904D : C744                	dc.b	nBb5, $44
(1)   25/   E904F : (MACRO)             	smpsStop
(1)   25/   E904F : F2                          dc.b    $F2
(1)   26/   E9050 :                     
(1)   27/   E9050 :                     Sound6E_MechaSonicBuzz_Voices:
(1)   28/   E9050 :                     ;	Voice $00
(1)   29/   E9050 :                     ;	$33
(1)   30/   E9050 :                     ;	$00, $00, $10, $31, 	$1F, $1E, $1D, $0E, 	$00, $1D, $0C, $00
(1)   31/   E9050 :                     ;	$00, $01, $00, $00, 	$0F, $0F, $0F, $0F, 	$08, $07, $06, $80
(1)   32/   E9050 : (MACRO)             	smpsVcAlgorithm     $03
(1)   32/   E9050 : =$3                 vcAlgorithm set $03
(1)   33/   E9050 : (MACRO)             	smpsVcFeedback      $06
(1)   33/   E9050 : =$6                 vcFeedback set $06
(1)   34/   E9050 : (MACRO)             	smpsVcUnusedBits    $00
(1)   34/   E9050 : =$0                 vcUnusedBits set $00
(1)   34/   E9050 : =$0                 vcD1R1Unk set 0
(1)   34/   E9050 : =$0                 vcD1R2Unk set 0
(1)   34/   E9050 : =$0                 vcD1R3Unk set 0
(1)   34/   E9050 : =$0                 vcD1R4Unk set 0
(1)   35/   E9050 : (MACRO)             	smpsVcDetune        $03, $01, $00, $00
(1)   35/   E9050 : =$3                 vcDT1 set $03
(1)   35/   E9050 : =$1                 vcDT2 set $01
(1)   35/   E9050 : =$0                 vcDT3 set $00
(1)   35/   E9050 : =$0                 vcDT4 set $00
(1)   36/   E9050 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $00, $00
(1)   36/   E9050 : =$1                 vcCF1 set $01
(1)   36/   E9050 : =$0                 vcCF2 set $00
(1)   36/   E9050 : =$0                 vcCF3 set $00
(1)   36/   E9050 : =$0                 vcCF4 set $00
(1)   37/   E9050 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   37/   E9050 : =$0                 vcRS1 set $00
(1)   37/   E9050 : =$0                 vcRS2 set $00
(1)   37/   E9050 : =$0                 vcRS3 set $00
(1)   37/   E9050 : =$0                 vcRS4 set $00
(1)   38/   E9050 : (MACRO)             	smpsVcAttackRate    $0E, $1D, $1E, $1F
(1)   38/   E9050 : =$E                 vcAR1 set $0E
(1)   38/   E9050 : =$1D                vcAR2 set $1D
(1)   38/   E9050 : =$1E                vcAR3 set $1E
(1)   38/   E9050 : =$1F                vcAR4 set $1F
(1)   39/   E9050 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   39/   E9050 : =$0                 vcAM1 set $00<<5
(1)   39/   E9050 : =$0                 vcAM2 set $00<<5
(1)   39/   E9050 : =$0                 vcAM3 set $00<<5
(1)   39/   E9050 : =$0                 vcAM4 set $00<<5
(1)   40/   E9050 : (MACRO)             	smpsVcDecayRate1    $00, $0C, $1D, $00
(1)   40/   E9050 : =$0                 vcD1R1 set $00
(1)   40/   E9050 : =$C                 vcD1R2 set $0C
(1)   40/   E9050 : =$1D                vcD1R3 set $1D
(1)   40/   E9050 : =$0                 vcD1R4 set $00
(1)   41/   E9050 : (MACRO)             	smpsVcDecayRate2    $00, $00, $01, $00
(1)   41/   E9050 : =$0                 vcD2R1 set $00
(1)   41/   E9050 : =$0                 vcD2R2 set $00
(1)   41/   E9050 : =$1                 vcD2R3 set $01
(1)   41/   E9050 : =$0                 vcD2R4 set $00
(1)   42/   E9050 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)   42/   E9050 : =$0                 vcDL1 set $00
(1)   42/   E9050 : =$0                 vcDL2 set $00
(1)   42/   E9050 : =$0                 vcDL3 set $00
(1)   42/   E9050 : =$0                 vcDL4 set $00
(1)   43/   E9050 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   43/   E9050 : =$F                 vcRR1 set $0F
(1)   43/   E9050 : =$F                 vcRR2 set $0F
(1)   43/   E9050 : =$F                 vcRR3 set $0F
(1)   43/   E9050 : =$F                 vcRR4 set $0F
(1)   44/   E9050 : (MACRO)             	smpsVcTotalLevel    $00, $06, $07, $08
(1)   44/   E9050 : =$0                 vcTL1 set $00
(1)   44/   E9050 : =$6                 vcTL2 set $06
(1)   44/   E9050 : =$7                 vcTL3 set $07
(1)   44/   E9050 : =$8                 vcTL4 set $08
(1)   44/   E9050 : 33                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   44/   E9051 :                     ;   0     1     2     3     4     5     6     7
(1)   44/   E9051 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   44/   E9051 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   44/   E9051 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   44/   E9051 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   44/   E9051 : =$80                vcTLMask1 set $80
(1)   44/   E9051 :                     
(1)   44/   E9051 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   44/   E9051 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   44/   E9051 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   44/   E9051 : =$80                vcTLMask1 set $80
(1)   44/   E9051 : =$0                 vcTL1 set vcTL1&$7F
(1)   44/   E9051 : =$6                 vcTL2 set vcTL2&$7F
(1)   44/   E9051 : =$7                 vcTL3 set vcTL3&$7F
(1)   44/   E9051 : =$8                 vcTL4 set vcTL4&$7F
(1)   44/   E9051 :                     
(1)   44/   E9051 : 0000 1031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   44/   E9055 : 1F1E 1D0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   44/   E9059 : 001D 0C00                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   44/   E905D : 0001 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   44/   E9061 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   44/   E9065 : 0807 0680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   45/   E9069 :                     
(1)   46/   E9069 :                     
  533/   E9069 :                        Sound6F:	include "sfx-improved/EF - Large Laser.asm"
(1)    1/   E9069 :                     Sound6F_LargeLaser_Header:
(1)    2/   E9069 : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E9069 :                     
(1)    2/   E9069 : =$2                 SourceDriver set 2
(1)    2/   E9069 :                     
(1)    2/   E9069 : =$0                 SourceSMPS2ASM set 0
(1)    2/   E9069 :                     
(1)    2/   E9069 : =$E9069             songStart set *
(1)    2/   E9069 :                     
(1)    2/   E9069 :                     
(1)    3/   E9069 : (MACRO)             	smpsHeaderVoice     Sound6A_6F_Laser_Voices
(1)    3/   E9069 : 518F                                dc.w    z80_ptr(SOUND6A_6F_LASER_VOICES)
(1)    4/   E906B : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E906B : 01                          dc.b    $01
(1)    5/   E906C : (MACRO)             	smpsHeaderChanSFX   $03
(1)    5/   E906C : 03                          dc.b    $03
(1)    6/   E906D :                     
(1)    7/   E906D : (MACRO)             	smpsHeaderSFXChannel cFM5, Sound6F_LargeLaser_FM5,	$00, $0B
(1)    7/   E906D : 8005                        dc.b    $80,CFM5
(1)    7/   E906F :  (MACRO-2)                  CheckedChannelPointer SOUND6F_LARGELASER_FM5
(1)    7/   E906F : 8390                                dc.w    z80_ptr(SOUND6F_LARGELASER_FM5)
(1)    7/   E9071 : 00                                  dc.b    $00
(1)    7/   E9072 : 0B                          dc.b    $0B
(1)    8/   E9073 : (MACRO)             	smpsHeaderSFXChannel cFM4, Sound6F_LargeLaser_FM4,	$00, $12
(1)    8/   E9073 : 8004                        dc.b    $80,CFM4
(1)    8/   E9075 :  (MACRO-2)                  CheckedChannelPointer SOUND6F_LARGELASER_FM4
(1)    8/   E9075 : 7F90                                dc.w    z80_ptr(SOUND6F_LARGELASER_FM4)
(1)    8/   E9077 : 00                                  dc.b    $00
(1)    8/   E9078 : 12                          dc.b    $12
(1)    9/   E9079 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound6F_LargeLaser_PSG3,	$00, $00
(1)    9/   E9079 : 80C0                        dc.b    $80,CPSG3
(1)    9/   E907B :  (MACRO-2)                  CheckedChannelPointer SOUND6F_LARGELASER_PSG3
(1)    9/   E907B : 9A90                                dc.w    z80_ptr(SOUND6F_LARGELASER_PSG3)
(1)    9/   E907D :  (MACRO-2)                          PSGPitchConvert $00
(1)    9/   E907D : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    9/   E907E : 00                          dc.b    $00
(1)   10/   E907F :                     
(1)   11/   E907F :                     ; FM4 Data
(1)   12/   E907F :                     Sound6F_LargeLaser_FM4:
(1)   13/   E907F : (MACRO)             	smpsAlterNote       $02
(1)   13/   E907F :  (MACRO-2)                  smpsDetune      $02
(1)   13/   E907F : E102                        dc.b    $E1,$02
(1)   14/   E9081 : 8002                	dc.b	nRst, $02
(1)   15/   E9083 :                     
(1)   16/   E9083 :                     ; FM5 Data
(1)   17/   E9083 :                     Sound6F_LargeLaser_FM5:
(1)   18/   E9083 : (MACRO)             	smpsSetvoice        $00
(1)   18/   E9083 :  (MACRO-2)                  smpsFMvoice $00
(1)   18/   E9083 : EF00                                dc.b    $EF,$00
(1)   19/   E9085 : (MACRO)             	smpsAlterVol        $0C
(1)   19/   E9085 : E60C                        dc.b    $E6,$0C
(1)   20/   E9087 : DF06 E7             	dc.b	nBb7, $06, smpsNoAttack
(1)   21/   E908A : (MACRO)             	smpsAlterVol        $F4
(1)   21/   E908A : E6F4                        dc.b    $E6,$F4
(1)   22/   E908C : 06E7                	dc.b	$06, smpsNoAttack
(1)   23/   E908E : (MACRO)             	smpsAlterVol        $F4
(1)   23/   E908E : E6F4                        dc.b    $E6,$F4
(1)   24/   E9090 : 12E7                	dc.b	$12, smpsNoAttack
(1)   25/   E9092 : (MACRO)             	smpsAlterVol        $0C
(1)   25/   E9092 : E60C                        dc.b    $E6,$0C
(1)   26/   E9094 : 06E7                	dc.b	$06, smpsNoAttack
(1)   27/   E9096 : (MACRO)             	smpsAlterVol        $0C
(1)   27/   E9096 : E60C                        dc.b    $E6,$0C
(1)   28/   E9098 : 06                  	dc.b	$06
(1)   29/   E9099 : (MACRO)             	smpsStop
(1)   29/   E9099 : F2                          dc.b    $F2
(1)   30/   E909A :                     
(1)   31/   E909A :                     ; PSG3 Data
(1)   32/   E909A :                     Sound6F_LargeLaser_PSG3:
(1)   33/   E909A : (MACRO)             	smpsPSGform         $E7
(1)   33/   E909A : F3E7                        dc.b    $F3,$E7
(1)   34/   E909C : C704 C0BA B4AE      	dc.b	nMaxPSG, $04, nEb5, nA4, nEb4, nA3
(1)   35/   E90A2 : (MACRO)             	smpsPSGAlterVol     $01
(1)   35/   E90A2 : EC01                        dc.b    $EC,$01
(1)   36/   E90A4 : AE                  	dc.b	nA3
(1)   37/   E90A5 : (MACRO)             	smpsPSGAlterVol     $01
(1)   37/   E90A5 : EC01                        dc.b    $EC,$01
(1)   38/   E90A7 : AE                  	dc.b	nA3
(1)   39/   E90A8 : (MACRO)             	smpsPSGAlterVol     $01
(1)   39/   E90A8 : EC01                        dc.b    $EC,$01
(1)   40/   E90AA : AE                  	dc.b	nA3
(1)   41/   E90AB : (MACRO)             	smpsStop
(1)   41/   E90AB : F2                          dc.b    $F2
(1)   42/   E90AC :                     
  534/   E90AC :                        Sound70:	include "sfx-improved/F0 - Oil Slide.asm"    
(1)    1/   E90AC :                     Sound70_OilSlide_Header:
(1)    2/   E90AC : (MACRO)             	smpsHeaderStartSong 2
(1)    2/   E90AC :                     
(1)    2/   E90AC : =$2                 SourceDriver set 2
(1)    2/   E90AC :                     
(1)    2/   E90AC : =$0                 SourceSMPS2ASM set 0
(1)    2/   E90AC :                     
(1)    2/   E90AC : =$E90AC             songStart set *
(1)    2/   E90AC :                     
(1)    2/   E90AC :                     
(1)    3/   E90AC : (MACRO)             	smpsHeaderVoiceNull
(1)    3/   E90AC : 0000                        dc.w    $0000
(1)    4/   E90AE : (MACRO)             	smpsHeaderTempoSFX  $01
(1)    4/   E90AE : 01                          dc.b    $01
(1)    5/   E90AF : (MACRO)             	smpsHeaderChanSFX   $01
(1)    5/   E90AF : 01                          dc.b    $01
(1)    6/   E90B0 :                     
(1)    7/   E90B0 : (MACRO)             	smpsHeaderSFXChannel cPSG3, Sound70_OilSlide_PSG3,	$00, $00
(1)    7/   E90B0 : 80C0                        dc.b    $80,CPSG3
(1)    7/   E90B2 :  (MACRO-2)                  CheckedChannelPointer SOUND70_OILSLIDE_PSG3
(1)    7/   E90B2 : B690                                dc.w    z80_ptr(SOUND70_OILSLIDE_PSG3)
(1)    7/   E90B4 :  (MACRO-2)                          PSGPitchConvert $00
(1)    7/   E90B4 : 0C                                  dc.b    ($00+psgdelta)&$FF
(1)    7/   E90B5 : 00                          dc.b    $00
(1)    8/   E90B6 :                     
(1)    9/   E90B6 :                     ; PSG3 Data
(1)   10/   E90B6 :                     Sound70_OilSlide_PSG3:
(1)   11/   E90B6 : (MACRO)             	smpsPSGform         $E7
(1)   11/   E90B6 : F3E7                        dc.b    $F3,$E7
(1)   12/   E90B8 : C718                	dc.b	nMaxPSG, $18
(1)   13/   E90BA :                     
(1)   14/   E90BA :                     Sound70_OilSlide_Loop00:
(1)   15/   E90BA : E703                	dc.b	smpsNoAttack, $03
(1)   16/   E90BC : (MACRO)             	smpsPSGAlterVol     $01
(1)   16/   E90BC : EC01                        dc.b    $EC,$01
(1)   17/   E90BE : (MACRO)             	smpsLoop            $00, $08, Sound70_OilSlide_Loop00
(1)   17/   E90BE : F7                          dc.b    $F7
(1)   17/   E90BF : 0008                        dc.b    $00,$08
(1)   17/   E90C1 : BA90                                dc.w    z80_ptr(SOUND70_OILSLIDE_LOOP00)
(1)   18/   E90C3 : (MACRO)             	smpsStop
(1)   18/   E90C3 : F2                          dc.b    $F2
(1)   19/   E90C4 :                     
  535/   E90C4 :                        
  536/   E90C4 :                        ;-------------------------------------------------------------------------------
  537/   E90C4 : (MACRO)                				align	$F0000
  537/   E90C4 :  (MACRO-2)                     cnop 0,$F0000
  537/   E90C4 :   (MACRO-3)                            org (*-1+($F0000)-((*-1+(-(0)))#($F0000)))
  537/   F0000 :                                                !org (*-1+($F0000)-((*-1+(-(0)))#($F0000)))
  538/   F0000 :                        
  539/   F0000 :                        												; Offset_0x0F0000
  540/   F0000 : 2280                   				dc.w    (((DKick_Ptr>>$08)|(DKick_Ptr<<$08))&$FFFF)    ; $8036
  541/   F0002 : 2780                   				dc.w    (((DSnare_Ptr>>$08)|(DSnare_Ptr<<$08))&$FFFF)    ; $803B
  542/   F0004 : 2C80                   				dc.w    (((DClap_Ptr>>$08)|(DClap_Ptr<<$08))&$FFFF)    ; $8040
  543/   F0006 : 3180                   				dc.w    (((DScratch_Ptr>>$08)|(DScratch_Ptr<<$08))&$FFFF)    ; $8045
  544/   F0008 : 3680                   				dc.w    (((DTimpani_Ptr>>$08)|(DTimpani_Ptr<<$08))&$FFFF)    ; $804A
  545/   F000A : 3B80                   				dc.w    (((DTom_Ptr>>$08)|(DTom_Ptr<<$08))&$FFFF)    ; $804F
  546/   F000C : 4080                   				dc.w    (((DBongo_Ptr>>$08)|(DBongo_Ptr<<$08))&$FFFF)    ; $8054
  547/   F000E : 4580                   				dc.w    (((DAC_88_Ptr>>$08)|(DAC_88_Ptr<<$08))&$FFFF)    ; $8059
  548/   F0010 : 4A80                                   dc.w    (((DAC_89_Ptr>>$08)|(DAC_89_Ptr<<$08))&$FFFF)    ; $805E
  549/   F0012 : 4F80                                   dc.w    (((DAC_8A_Ptr>>$08)|(DAC_8A_Ptr<<$08))&$FFFF)    ; $8063
  550/   F0014 : 5480                                   dc.w    (((DAC_8B_Ptr>>$08)|(DAC_8B_Ptr<<$08))&$FFFF)    ; $8068
  551/   F0016 : 5980                                   dc.w    (((DAC_8C_Ptr>>$08)|(DAC_8C_Ptr<<$08))&$FFFF)    ; $806D
  552/   F0018 : 5E80                                   dc.w    (((DAC_8D_Ptr>>$08)|(DAC_8D_Ptr<<$08))&$FFFF)    ; $8072
  553/   F001A : 6380                                   dc.w    (((DAC_8E_Ptr>>$08)|(DAC_8E_Ptr<<$08))&$FFFF)    ; $8077
  554/   F001C : 6880                                   dc.w    (((DAC_8F_Ptr>>$08)|(DAC_8F_Ptr<<$08))&$FFFF)    ; $807C
  555/   F001E : 6D80                                   dc.w    (((DAC_90_Ptr>>$08)|(DAC_90_Ptr<<$08))&$FFFF)    ; $8081
  556/   F0020 : 7280                                   dc.w    (((DAC_91_Ptr>>$08)|(DAC_91_Ptr<<$08))&$FFFF)    ; $8086
  557/   F0022 :                        
  558/   F0022 :                        
  559/   F0022 :                                                 
  560/   F0022 :                        DKick_Setup:                                                  ; Offset_0x0F0036
  561/   F0022 : 17                                     dc.b    $17
  562/   F0023 : 9402                                   dc.w    (((DKick_Size>>$08)|(DKick_Size<<$08))&$FFFF)         ; $0790
  563/   F0025 : 7780                                   dc.w    (((DKick_Data_Ptr>>$08)|(DKick_Data_Ptr<<$08))&$FFFF) ; $83BD                
  564/   F0027 :                        DSnare_Setup:                                                  ; Offset_0x0F003B
  565/   F0027 : 01                                     dc.b    $01
  566/   F0028 : 2307                                   dc.w    (((DSnare_Size>>$08)|(DSnare_Size<<$08))&$FFFF)         ; $04C0
  567/   F002A : 0B83                                   dc.w    (((DSnare_Data_Ptr>>$08)|(DSnare_Data_Ptr<<$08))&$FFFF) ; $8B4D
  568/   F002C :                        DClap_Setup:                                                  ; Offset_0x0F0040
  569/   F002C : 06                                     dc.b    $06
  570/   F002D : 7605                                   dc.w    (((DClap_Size>>$08)|(DClap_Size<<$08))&$FFFF)         ; $04C0
  571/   F002F : 2E8A                                   dc.w    (((DClap_Data_Ptr>>$08)|(DClap_Data_Ptr<<$08))&$FFFF) ; $8B4D
  572/   F0031 :                        DScratch_Setup:                                                  ; Offset_0x0F0045
  573/   F0031 : 08                                     dc.b    $08
  574/   F0032 : 4C07                                   dc.w    (((DScratch_Size>>$08)|(DScratch_Size<<$08))&$FFFF)         ; $04C0
  575/   F0034 : A48F                                   dc.w    (((DScratch_Data_Ptr>>$08)|(DScratch_Data_Ptr<<$08))&$FFFF) ; $8B4D
  576/   F0036 :                        DTimpani_Setup:                                                  ; Offset_0x0F004A
  577/   F0036 : 1B                                     dc.b    $1B
  578/   F0037 : B50B                                   dc.w    (((DTimpani_Size>>$08)|(DTimpani_Size<<$08))&$FFFF)         ; $04C0
  579/   F0039 : F096                                   dc.w    (((DTimpani_Data_Ptr>>$08)|(DTimpani_Data_Ptr<<$08))&$FFFF) ; $8B4D
  580/   F003B :                        DTom_Setup:                                                  ; Offset_0x0F004F
  581/   F003B : 0A                                     dc.b    $0A
  582/   F003C : 0E07                                   dc.w    (((DTom_Size>>$08)|(DTom_Size<<$08))&$FFFF)         ; $0300
  583/   F003E : A5A2                                   dc.w    (((DTom_Data_Ptr>>$08)|(DTom_Data_Ptr<<$08))&$FFFF) ; $80BD 
  584/   F0040 :                        DBongo_Setup:                                                  ; Offset_0x0F0054
  585/   F0040 : 1B                                     dc.b    $1B
  586/   F0041 : C405                                   dc.w    (((DBongo_Size>>$08)|(DBongo_Size<<$08))&$FFFF)         ; $0740 
  587/   F0043 : B3A9                                   dc.w    (((DBongo_Data_Ptr>>$08)|(DBongo_Data_Ptr<<$08))&$FFFF) ; $B8D8
  588/   F0045 :                        DAC_88_Setup:                                                  ; Offset_0x0F0054
  589/   F0045 : 12                                     dc.b    $12
  590/   F0046 : B50B                                   dc.w    (((DTimpani_Size>>$08)|(DTimpani_Size<<$08))&$FFFF)         ; $04C0
  591/   F0048 : F096                                   dc.w    (((DTimpani_Data_Ptr>>$08)|(DTimpani_Data_Ptr<<$08))&$FFFF) ; $8B4D
  592/   F004A :                        DAC_89_Setup:                                                  ; Offset_0x0F004A
  593/   F004A : 15                                     dc.b    $15
  594/   F004B : B50B                                   dc.w    (((DTimpani_Size>>$08)|(DTimpani_Size<<$08))&$FFFF)         ; $04C0
  595/   F004D : F096                                   dc.w    (((DTimpani_Data_Ptr>>$08)|(DTimpani_Data_Ptr<<$08))&$FFFF) ; $8B4D
  596/   F004F :                        DAC_8A_Setup:                                                  ; Offset_0x0F004A
  597/   F004F : 1C                                     dc.b    $1C
  598/   F0050 : B50B                                   dc.w    (((DTimpani_Size>>$08)|(DTimpani_Size<<$08))&$FFFF)         ; $04C0
  599/   F0052 : F096                                   dc.w    (((DTimpani_Data_Ptr>>$08)|(DTimpani_Data_Ptr<<$08))&$FFFF) ; $8B4D
  600/   F0054 :                        DAC_8B_Setup:                                                  ; Offset_0x0F004A
  601/   F0054 : 1D                                     dc.b    $1D
  602/   F0055 : B50B                                   dc.w    (((DTimpani_Size>>$08)|(DTimpani_Size<<$08))&$FFFF)         ; $04C0
  603/   F0057 : F096                                   dc.w    (((DTimpani_Data_Ptr>>$08)|(DTimpani_Data_Ptr<<$08))&$FFFF) ; $8B4D
  604/   F0059 :                        DAC_8C_Setup:                                                  ; Offset_0x0F004F
  605/   F0059 : 02                                     dc.b    $02
  606/   F005A : 0E07                                   dc.w    (((DTom_Size>>$08)|(DTom_Size<<$08))&$FFFF)         ; $0300
  607/   F005C : A5A2                                   dc.w    (((DTom_Data_Ptr>>$08)|(DTom_Data_Ptr<<$08))&$FFFF) ; $80BD 
  608/   F005E :                        DAC_8D_Setup:                                                  ; Offset_0x0F004F
  609/   F005E : 05                                     dc.b    $05
  610/   F005F : 0E07                                   dc.w    (((DTom_Size>>$08)|(DTom_Size<<$08))&$FFFF)         ; $0300
  611/   F0061 : A5A2                                   dc.w    (((DTom_Data_Ptr>>$08)|(DTom_Data_Ptr<<$08))&$FFFF) ; $80BD 
  612/   F0063 :                        DAC_8E_Setup:                                                  ; Offset_0x0F004F
  613/   F0063 : 08                                     dc.b    $08
  614/   F0064 : 0E07                                   dc.w    (((DTom_Size>>$08)|(DTom_Size<<$08))&$FFFF)         ; $0300
  615/   F0066 : A5A2                                   dc.w    (((DTom_Data_Ptr>>$08)|(DTom_Data_Ptr<<$08))&$FFFF) ; $80BD 
  616/   F0068 :                        DAC_8F_Setup:                                                  ; Offset_0x0F0054
  617/   F0068 : 08                                     dc.b    $08
  618/   F0069 : C405                                   dc.w    (((DBongo_Size>>$08)|(DBongo_Size<<$08))&$FFFF)         ; $0740 
  619/   F006B : B3A9                                   dc.w    (((DBongo_Data_Ptr>>$08)|(DBongo_Data_Ptr<<$08))&$FFFF) ; $B8D8
  620/   F006D :                        DAC_90_Setup:                                                  ; Offset_0x0F0054
  621/   F006D : 0B                                     dc.b    $0B
  622/   F006E : C405                                   dc.w    (((DBongo_Size>>$08)|(DBongo_Size<<$08))&$FFFF)         ; $0740 
  623/   F0070 : B3A9                                   dc.w    (((DBongo_Data_Ptr>>$08)|(DBongo_Data_Ptr<<$08))&$FFFF) ; $B8D8
  624/   F0072 :                        DAC_91_Setup:                                                  ; Offset_0x0F0054
  625/   F0072 : 12                                     dc.b    $12
  626/   F0073 : C405                                   dc.w    (((DBongo_Size>>$08)|(DBongo_Size<<$08))&$FFFF)         ; $0740 
  627/   F0075 : B3A9                                   dc.w    (((DBongo_Data_Ptr>>$08)|(DBongo_Data_Ptr<<$08))&$FFFF) ; $B8D8
  628/   F0077 :                        
  629/   F0077 :                                        
  630/   F0077 :                        ;-------------------------------------------------------------------------------
  631/   F0077 :                        SndDAC_Start:
  632/   F0077 :                        
  633/   F0077 :                        DKick_Data:
  634/   F0077 :                        	BINCLUDE	"DAC/Kick.dpcm"
  635/   F030B :                        DKick_Data_End
  636/   F030B :                        
  637/   F030B :                        DSnare_Data:
  638/   F030B :                        	BINCLUDE	"DAC/Snare.dpcm"
  639/   F0A2E :                        DSnare_Data_End
  640/   F0A2E :                        
  641/   F0A2E :                        DClap_Data:
  642/   F0A2E :                        	BINCLUDE	"DAC/Clap.dpcm"
  643/   F0FA4 :                        DClap_Data_End
  644/   F0FA4 :                        	
  645/   F0FA4 :                        DScratch_Data:
  646/   F0FA4 :                        	BINCLUDE	"DAC/Scratch.dpcm"
  647/   F16F0 :                        DScratch_Data_End
  648/   F16F0 :                        
  649/   F16F0 :                        DTimpani_Data:
  650/   F16F0 :                        	BINCLUDE	"DAC/Timpani.dpcm"
  651/   F22A5 :                        DTimpani_Data_End
  652/   F22A5 :                        
  653/   F22A5 :                        DTom_Data:
  654/   F22A5 :                        	BINCLUDE	"DAC/Tom.dpcm"
  655/   F29B3 :                        DTom_Data_End
  656/   F29B3 :                        
  657/   F29B3 :                        DBongo_Data:
  658/   F29B3 :                        	BINCLUDE	"DAC/Bongo.dpcm"
  659/   F2F77 :                        DBongo_Data_End
  660/   F2F77 :                        
  661/   F2F77 :                        SndDAC_End
  662/   F2F77 :                        
  663/   F2F77 : =$8022                 DKick_Ptr      equ (DKick_Setup&$FFFF)|$8000
  664/   F2F77 : =$8027                 DSnare_Ptr      equ (DSnare_Setup&$FFFF)|$8000
  665/   F2F77 : =$802C                 DClap_Ptr      equ (DClap_Setup&$FFFF)|$8000
  666/   F2F77 : =$8031                 DScratch_Ptr      equ (DScratch_Setup&$FFFF)|$8000
  667/   F2F77 : =$8036                 DTimpani_Ptr      equ (DTimpani_Setup&$FFFF)|$8000
  668/   F2F77 : =$803B                 DTom_Ptr      equ (DTom_Setup&$FFFF)|$8000
  669/   F2F77 : =$8040                 DBongo_Ptr      equ (DBongo_Setup&$FFFF)|$8000
  670/   F2F77 : =$8045                 DAC_88_Ptr      equ (DAC_88_Setup&$FFFF)|$8000
  671/   F2F77 : =$804A                 DAC_89_Ptr      equ (DAC_89_Setup&$FFFF)|$8000
  672/   F2F77 : =$804F                 DAC_8A_Ptr      equ (DAC_8A_Setup&$FFFF)|$8000
  673/   F2F77 : =$8054                 DAC_8B_Ptr      equ (DAC_8B_Setup&$FFFF)|$8000
  674/   F2F77 : =$8059                 DAC_8C_Ptr      equ (DAC_8C_Setup&$FFFF)|$8000
  675/   F2F77 : =$805E                 DAC_8D_Ptr      equ (DAC_8D_Setup&$FFFF)|$8000
  676/   F2F77 : =$8063                 DAC_8E_Ptr      equ (DAC_8E_Setup&$FFFF)|$8000
  677/   F2F77 : =$8068                 DAC_8F_Ptr      equ (DAC_8F_Setup&$FFFF)|$8000
  678/   F2F77 : =$806D                 DAC_90_Ptr      equ (DAC_90_Setup&$FFFF)|$8000
  679/   F2F77 : =$8072                 DAC_91_Ptr      equ (DAC_91_Setup&$FFFF)|$8000
  680/   F2F77 :                        ;DAC_92_Ptr      equ (DAC_92_Setup&$FFFF)|$8000
  681/   F2F77 :                        ;DAC_93_Ptr      equ (DAC_93_Setup&$FFFF)|$8000
  682/   F2F77 :                        ;DAC_94_Ptr      equ (DAC_94_Setup&$FFFF)|$8000
  683/   F2F77 :                        ;DAC_95_Ptr      equ (DAC_95_Setup&$FFFF)|$8000
  684/   F2F77 :                        ;DAC_96_Ptr      equ (DAC_96_Setup&$FFFF)|$8000
  685/   F2F77 :                        ;DAC_97_Ptr      equ (DAC_97_Setup&$FFFF)|$8000
  686/   F2F77 :                        ;DAC_98_Ptr      equ (DAC_98_Setup&$FFFF)|$8000
  687/   F2F77 :                        ;DAC_99_Ptr      equ (DAC_99_Setup&$FFFF)|$8000
  688/   F2F77 :                        ;DAC_9A_Ptr      equ (DAC_9A_Setup&$FFFF)|$8000
  689/   F2F77 :                        ;DAC_9B_Ptr      equ (DAC_9B_Setup&$FFFF)|$8000
  690/   F2F77 :                        
  691/   F2F77 : =$294                  DKick_Size         equ (DKick_Data_End-DKick_Data)  
  692/   F2F77 : =$8077                 DKick_Data_Ptr     equ (DKick_Data&$FFFF)|$8000 
  693/   F2F77 : =$723                  DSnare_Size     	equ (DSnare_Data_End-DSnare_Data)  
  694/   F2F77 : =$830B                 DSnare_Data_Ptr 	equ (DSnare_Data&$FFFF)|$8000 
  695/   F2F77 : =$576                  DClap_Size     	equ (DClap_Data_End-DClap_Data)  
  696/   F2F77 : =$8A2E                 DClap_Data_Ptr 	equ (DClap_Data&$FFFF)|$8000 
  697/   F2F77 : =$74C                  DScratch_Size     	equ (DScratch_Data_End-DScratch_Data)  
  698/   F2F77 : =$8FA4                 DScratch_Data_Ptr 	equ (DScratch_Data&$FFFF)|$8000 
  699/   F2F77 : =$BB5                  DTimpani_Size     	equ (DTimpani_Data_End-DTimpani_Data)  
  700/   F2F77 : =$96F0                 DTimpani_Data_Ptr 	equ (DTimpani_Data&$FFFF)|$8000 
  701/   F2F77 : =$70E                  DTom_Size         equ (DTom_Data_End-DTom_Data)   
  702/   F2F77 : =$A2A5                 DTom_Data_Ptr     equ (DTom_Data&$FFFF)|$8000
  703/   F2F77 : =$5C4                  DBongo_Size         equ (DBongo_Data_End-DBongo_Data)   
  704/   F2F77 : =$A9B3                 DBongo_Data_Ptr     equ (DBongo_Data&$FFFF)|$8000
  705/   F2F77 :                        
  706/   F2F77 :                        ;-------------------------------------------------------------------------------
  707/   F2F77 :                        Offset_0x0F7304:
  708/   F2F77 : (MACRO)                                align	$8000
  708/   F2F77 :  (MACRO-2)                     cnop 0,$8000
  708/   F2F77 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
  708/   F8000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
  709/   F8000 :                        ;-------------------------------------------------------------------------------                   
  710/   F8000 :                        SEGA_PCM_Data:                                                 ; Offset_0x0F8000
  711/   F8000 :                                        binclude  "sounds\sega.pcm"
 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 2 - 2/19/2024 13:50:44


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
 ARZ_CALL00 :                 B8434 C |  ARZ_CALL01 :                 B8447 C |
 ARZ_CALL02 :                 B8090 C |  ARZ_CALL03 :                 B806D C |
 ARZ_CALL04 :                 B8030 C |  ARZ_CALL05 :                 B8048 C |
 ARZ_DAC :                    B8451 C |  ARZ_FM1 :                    B80B4 C |
 ARZ_FM2 :                    B81BB C |  ARZ_FM3 :                    B8242 C |
 ARZ_FM4 :                    B82F3 C |  ARZ_FM5 :                    B8396 C |
*ARZ_HEADER :                 B8000 C |  ARZ_JUMP00 :                 B8454 C |
 ARZ_JUMP01 :                 B8398 C |  ARZ_JUMP02 :                 B824D C |
 ARZ_JUMP03 :                 B81BD C |  ARZ_JUMP04 :                 B80BE C |
 ARZ_JUMP05 :                 B84E3 C |  ARZ_LOOP00 :                 B847C C |
 ARZ_LOOP01 :                 B8495 C |  ARZ_LOOP02 :                 B84B0 C |
 ARZ_LOOP03 :                 B84C7 C |  ARZ_LOOP04 :                 B83A1 C |
 ARZ_LOOP05 :                 B82F5 C |  ARZ_LOOP06 :                 B8322 C |
 ARZ_LOOP07 :                 B86D1 C |  ARZ_LOOP08 :                 B85DF C |
 ARZ_LOOP09 :                 B84E5 C |  ARZ_LOOP0A :                 B8509 C |
 ARZ_PSG1 :                   B84E1 C |  ARZ_PSG2 :                   B85D8 C |
 ARZ_PSG3 :                   B86CB C |  ARZ_VOICES :                 B86F9 C |
 BOSS_CALL00 :                C1619 C |  BOSS_CALL01 :                C1527 C |
 BOSS_CALL02 :                C14F2 C |  BOSS_CALL03 :                C14D3 C |
 BOSS_DAC :                   C163D C |  BOSS_FM1 :                   C1490 C |
 BOSS_FM2 :                   C14FD C |  BOSS_FM3 :                   C1555 C |
 BOSS_FM4 :                   C1588 C |  BOSS_FM5 :                   C1594 C |
*BOSS_HEADER :                C1460 C |  BOSS_JUMP00 :                C159B C |
 BOSS_JUMP01 :                C1492 C |  BOSS_LOOP00 :                C1659 C |
 BOSS_LOOP01 :                C1672 C |  BOSS_LOOP02 :                C169A C |
 BOSS_LOOP03 :                C16B3 C |  BOSS_LOOP04 :                C16BD C |
 BOSS_LOOP05 :                C15BD C |  BOSS_LOOP06 :                C1557 C |
 BOSS_LOOP07 :                C156E C |  BOSS_LOOP08 :                C1579 C |
 BOSS_LOOP09 :                C14FF C |  BOSS_LOOP0A :                C151A C |
 BOSS_LOOP0B :                C1499 C |  BOSS_LOOP0C :                C14B1 C |
 BOSS_LOOP0D :                C1627 C |  BOSS_LOOP0E :                C1633 C |
 BOSS_PSG1 :                  C14FC C |  BOSS_PSG2 :                  C14FC C |
 BOSS_PSG3 :                  C1623 C |  BOSS_VOICES :                C16CF C |
*CASESENSITIVE :                  0 - |  CFM3 :                           2 - |
 CFM4 :                           4 - |  CFM5 :                           5 - |
 CFM6 :                           6 - |  CNOISE :                        E0 - |
 CNZ_2P_CALL00 :              B8C8C C |  CNZ_2P_CALL01 :              B8B51 C |
 CNZ_2P_CALL02 :              B8B75 C |  CNZ_2P_CALL03 :              B8B62 C |
 CNZ_2P_CALL04 :              B8B29 C |  CNZ_2P_CALL05 :              B894A C |
 CNZ_2P_CALL06 :              B895C C |  CNZ_2P_CALL07 :              B8A66 C |
 CNZ_2P_CALL08 :              B8A7B C |  CNZ_2P_CALL09 :              B8A3E C |
 CNZ_2P_CALL0A :              B88E6 C |  CNZ_2P_CALL0B :              B8917 C |
 CNZ_2P_CALL0C :              B888D C |  CNZ_2P_DAC :                 B8C57 C |
 CNZ_2P_FM1 :                 B87BF C |  CNZ_2P_FM2 :                 B88B4 C |
 CNZ_2P_FM3 :                 B896F C |  CNZ_2P_FM4 :                 B89CB C |
 CNZ_2P_FM5 :                 B8A90 C | *CNZ_2P_HEADER :              B878F C |
 CNZ_2P_LOOP00 :              B8C60 C |  CNZ_2P_LOOP01 :              B8C74 C |
 CNZ_2P_LOOP02 :              B8A96 C |  CNZ_2P_LOOP03 :              B89D2 C |
 CNZ_2P_LOOP04 :              B89E7 C |  CNZ_2P_LOOP05 :              B89EF C |
 CNZ_2P_LOOP06 :              B8973 C |  CNZ_2P_LOOP07 :              B898B C |
 CNZ_2P_LOOP08 :              B88B9 C |  CNZ_2P_LOOP09 :              B88C7 C |
 CNZ_2P_LOOP0A :              B88CF C |  CNZ_2P_LOOP0B :              B87D2 C |
 CNZ_2P_LOOP0C :              B883F C |  CNZ_2P_LOOP0D :              B8BF0 C |
 CNZ_2P_LOOP0E :              B8C20 C |  CNZ_2P_LOOP0F :              B8C30 C |
 CNZ_2P_LOOP10 :              B8B88 C |  CNZ_2P_LOOP11 :              B8BB8 C |
 CNZ_2P_LOOP12 :              B8BC8 C |  CNZ_2P_PSG1 :                B8B84 C |
 CNZ_2P_PSG2 :                B8BEC C |  CNZ_2P_PSG3 :                B8C54 C |
 CNZ_2P_VOICES :              B8C97 C |  CNZ_CALL00 :                 B8FA9 C |
 CNZ_CALL01 :                 B9014 C |  CNZ_CALL02 :                 B8E73 C |
 CNZ_CALL03 :                 B8F03 C |  CNZ_CALL04 :                 B938F C |
 CNZ_DAC :                    B939E C |  CNZ_FM1 :                    B8D44 C |
 CNZ_FM2 :                    B905D C |  CNZ_FM3 :                    B8E16 C |
 CNZ_FM4 :                    B8F4C C |  CNZ_FM5 :                    B9175 C |
*CNZ_HEADER :                 B8D14 C |  CNZ_JUMP00 :                 B917E C |
 CNZ_JUMP01 :                 B9066 C |  CNZ_JUMP02 :                 B8F52 C |
 CNZ_JUMP03 :                 B8E1C C |  CNZ_JUMP04 :                 B8D48 C |
 CNZ_JUMP05 :                 B92FE C |  CNZ_JUMP06 :                 B9295 C |
 CNZ_LOOP00 :                 B93A6 C |  CNZ_LOOP01 :                 B93BA C |
 CNZ_LOOP02 :                 B93CC C |  CNZ_LOOP03 :                 B936A C |
 CNZ_LOOP04 :                 B9376 C |  CNZ_LOOP05 :                 B9382 C |
 CNZ_PSG1 :                   B9293 C |  CNZ_PSG2 :                   B92FC C |
 CNZ_PSG3 :                   B9366 C |  CNZ_VOICES :                 B93E5 C |
*CONSTPI :        3.141592653589793 - |  CONTINUE_DAC :               C8806 C |
 CONTINUE_FM1 :               C8752 C |  CONTINUE_FM2 :               C877D C |
 CONTINUE_FM3 :               C87B8 C |  CONTINUE_FM4 :               C87E0 C |
 CONTINUE_FM5 :               C8805 C | *CONTINUE_HEADER :            C8722 C |
 CONTINUE_LOOP00 :            C8808 C |  CONTINUE_LOOP01 :            C87E4 C |
 CONTINUE_LOOP02 :            C87BC C |  CONTINUE_LOOP03 :            C878E C |
 CONTINUE_LOOP04 :            C8756 C |  CONTINUE_PSG1 :              C8805 C |
 CONTINUE_PSG2 :              C8805 C |  CONTINUE_PSG3 :              C8805 C |
 CONTINUE_VOICES :            C8817 C |  CPSG1 :                         80 - |
 CPSG2 :                         A0 - |  CPSG3 :                         C0 - |
 CPZ_CALL00 :                 C0192 C |  CPZ_CALL01 :                 C01B9 C |
 CPZ_CALL02 :                 C00E9 C |  CPZ_CALL03 :                 C013F C |
 CPZ_CALL04 :                 C0114 C |  CPZ_CALL05 :                 C0047 C |
 CPZ_CALL06 :                 C003A C |  CPZ_CALL07 :                 C0078 C |
 CPZ_CALL08 :                 C00B5 C |  CPZ_CALL09 :                 C00C8 C |
 CPZ_CALL0A :                 C0151 C |  CPZ_CALL0B :                 C0032 C |
 CPZ_DAC :                    C056F C |  CPZ_FM1 :                    C01E2 C |
 CPZ_FM2 :                    C0450 C |  CPZ_FM3 :                    C03E0 C |
 CPZ_FM4 :                    C02E6 C |  CPZ_FM5 :                    C0362 C |
*CPZ_HEADER :                 C0000 C |  CPZ_JUMP00 :                 C03F1 C |
 CPZ_JUMP01 :                 C01F9 C |  CPZ_JUMP02 :                 C0592 C |
 CPZ_LOOP00 :                 C0577 C |  CPZ_LOOP01 :                 C0582 C |
 CPZ_LOOP02 :                 C0452 C |  CPZ_LOOP03 :                 C04C2 C |
 CPZ_LOOP04 :                 C03E9 C |  CPZ_LOOP05 :                 C03F3 C |
 CPZ_LOOP06 :                 C0416 C |  CPZ_LOOP07 :                 C042A C |
 CPZ_LOOP08 :                 C036B C |  CPZ_LOOP09 :                 C0373 C |
 CPZ_LOOP0A :                 C037C C |  CPZ_LOOP0B :                 C0395 C |
 CPZ_LOOP0C :                 C02ED C |  CPZ_LOOP0D :                 C02F5 C |
 CPZ_LOOP0E :                 C02FE C |  CPZ_LOOP0F :                 C031E C |
 CPZ_LOOP10 :                 C0206 C |  CPZ_PSG1 :                   C0030 C |
 CPZ_PSG2 :                   C0031 C |  CPZ_PSG3 :                   C0590 C |
 CPZ_VOICES :                 C05B5 C |  CREDITS_CALL00 :             C9C1F C |
 CREDITS_CALL01 :             C9C35 C |  CREDITS_CALL02 :             C9C50 C |
 CREDITS_CALL03 :             C8CB4 C |  CREDITS_CALL04 :             C9698 C |
 CREDITS_CALL05 :             C96A9 C |  CREDITS_CALL06 :             C8F4B C |
 CREDITS_CALL07 :             C93DD C |  CREDITS_CALL08 :             C967D C |
 CREDITS_CALL09 :             C96B2 C |  CREDITS_CALL0A :             C8C6C C |
 CREDITS_CALL0B :             C943F C |  CREDITS_CALL0C :             C9215 C |
 CREDITS_CALL0D :             C945E C |  CREDITS_CALL0E :             C946F C |
 CREDITS_CALL0F :             C9482 C |  CREDITS_CALL10 :             C8F85 C |
 CREDITS_CALL11 :             C93F6 C |  CREDITS_CALL12 :             C9478 C |
 CREDITS_CALL13 :             C91F0 C |  CREDITS_CALL14 :             C8F07 C |
 CREDITS_CALL15 :             C91A2 C |  CREDITS_CALL16 :             C8F63 C |
 CREDITS_CALL17 :             C91B4 C |  CREDITS_CALL18 :             C9201 C |
 CREDITS_CALL19 :             C920B C |  CREDITS_CALL1A :             C8FDA C |
 CREDITS_CALL1B :             C8F3B C |  CREDITS_CALL1C :             C8F9A C |
 CREDITS_CALL1D :             C8FA9 C |  CREDITS_CALL1E :             C8FB9 C |
 CREDITS_CALL1F :             C8FC7 C |  CREDITS_CALL20 :             C8FD0 C |
 CREDITS_CALL21 :             C8B7F C |  CREDITS_CALL22 :             C8BC1 C |
 CREDITS_CALL23 :             C8C93 C |  CREDITS_CALL24 :             C8C0D C |
 CREDITS_CALL25 :             C8C47 C |  CREDITS_CALL26 :             C8CAC C |
 CREDITS_CALL27 :             C97C7 C |  CREDITS_CALL28 :             C97E4 C |
 CREDITS_CALL29 :             C97DB C |  CREDITS_DAC :                C9A10 C |
 CREDITS_FM1 :                C8975 C |  CREDITS_FM2 :                C8CDF C |
 CREDITS_FM3 :                C8FE2 C |  CREDITS_FM4 :                C9229 C |
 CREDITS_FM5 :                C94B3 C | *CREDITS_HEADER :             C8945 C |
 CREDITS_JUMP00 :             C991D C |  CREDITS_LOOP00 :             C9A1D C |
 CREDITS_LOOP01 :             C9A27 C |  CREDITS_LOOP02 :             C9A51 C |
 CREDITS_LOOP03 :             C9A9B C |  CREDITS_LOOP04 :             C9AD8 C |
 CREDITS_LOOP05 :             C9B2A C |  CREDITS_LOOP06 :             C9B55 C |
 CREDITS_LOOP07 :             C9BCD C |  CREDITS_LOOP08 :             C9BDA C |
 CREDITS_LOOP09 :             C9BF8 C |  CREDITS_LOOP0A :             C94DE C |
 CREDITS_LOOP0B :             C94FB C |  CREDITS_LOOP0C :             C95A4 C |
 CREDITS_LOOP0D :             C924B C |  CREDITS_LOOP0E :             C9268 C |
 CREDITS_LOOP0F :             C92C2 C |  CREDITS_LOOP10 :             C92F4 C |
 CREDITS_LOOP11 :             C93B7 C |  CREDITS_LOOP12 :             C8FFF C |
 CREDITS_LOOP13 :             C9016 C |  CREDITS_LOOP14 :             C904D C |
 CREDITS_LOOP15 :             C908E C |  CREDITS_LOOP16 :             C916A C |
 CREDITS_LOOP17 :             C8CEB C |  CREDITS_LOOP18 :             C8CF9 C |
 CREDITS_LOOP19 :             C8CFF C |  CREDITS_LOOP1A :             C8D10 C |
 CREDITS_LOOP1B :             C8D1F C |  CREDITS_LOOP1C :             C8D35 C |
 CREDITS_LOOP1D :             C8D44 C |  CREDITS_LOOP1E :             C8D58 C |
 CREDITS_LOOP1F :             C8D63 C |  CREDITS_LOOP20 :             C8D41 C |
 CREDITS_LOOP21 :             C8DA0 C |  CREDITS_LOOP22 :             C8E08 C |
 CREDITS_LOOP23 :             C8EBA C |  CREDITS_LOOP24 :             C8980 C |
 CREDITS_LOOP25 :             C8994 C |  CREDITS_LOOP26 :             C89AD C |
 CREDITS_LOOP27 :             C9942 C |  CREDITS_LOOP28 :             C9952 C |
 CREDITS_LOOP29 :             C9959 C |  CREDITS_LOOP2A :             C9968 C |
 CREDITS_LOOP2B :             C997A C |  CREDITS_LOOP2C :             C9985 C |
 CREDITS_LOOP2D :             C9996 C |  CREDITS_LOOP2E :             C99B1 C |
 CREDITS_LOOP2F :             C99BA C |  CREDITS_LOOP30 :             C99CB C |
 CREDITS_LOOP31 :             C99D4 C |  CREDITS_LOOP32 :             C99DF C |
 CREDITS_LOOP33 :             C99F6 C |  CREDITS_LOOP34 :             C981D C |
 CREDITS_LOOP35 :             C982F C |  CREDITS_LOOP36 :             C983F C |
 CREDITS_LOOP37 :             C9882 C |  CREDITS_LOOP38 :             C98AD C |
 CREDITS_LOOP39 :             C98B5 C |  CREDITS_LOOP3A :             C9921 C |
 CREDITS_LOOP3B :             C992E C |  CREDITS_LOOP3C :             C96C8 C |
 CREDITS_LOOP3D :             C96DA C |  CREDITS_LOOP3E :             C96E3 C |
 CREDITS_LOOP3F :             C974C C |  CREDITS_LOOP40 :             C9754 C |
 CREDITS_LOOP41 :             C979C C |  CREDITS_LOOP42 :             C91D8 C |
 CREDITS_PSG1 :               C96C1 C |  CREDITS_PSG2 :               C9816 C |
 CREDITS_PSG3 :               C993C C |  CREDITS_VOICES :             C9C71 C |
 DAC_88_PTR :                  8045 - |  DAC_88_SETUP :               F0045 C |
 DAC_89_PTR :                  804A - |  DAC_89_SETUP :               F004A C |
 DAC_8A_PTR :                  804F - |  DAC_8A_SETUP :               F004F C |
 DAC_8B_PTR :                  8054 - |  DAC_8B_SETUP :               F0054 C |
 DAC_8C_PTR :                  8059 - |  DAC_8C_SETUP :               F0059 C |
 DAC_8D_PTR :                  805E - |  DAC_8D_SETUP :               F005E C |
 DAC_8E_PTR :                  8063 - |  DAC_8E_SETUP :               F0063 C |
 DAC_8F_PTR :                  8068 - |  DAC_8F_SETUP :               F0068 C |
 DAC_90_PTR :                  806D - |  DAC_90_SETUP :               F006D C |
 DAC_91_PTR :                  8072 - |  DAC_91_SETUP :               F0072 C |
*DATE :                 "2/19/2024" - |  DBONGO_DATA :                F29B3 C |
 DBONGO_DATA_END :            F2F77 C |  DBONGO_DATA_PTR :             A9B3 - |
 DBONGO_PTR :                  8040 - |  DBONGO_SETUP :               F0040 C |
 DBONGO_SIZE :                  5C4 - |  DCLAP :                         83 - |
 DCLAP_DATA :                 F0A2E C |  DCLAP_DATA_END :             F0FA4 C |
 DCLAP_DATA_PTR :              8A2E - |  DCLAP_PTR :                   802C - |
 DCLAP_SETUP :                F002C C |  DCLAP_SIZE :                   576 - |
 DEZ_CALL00 :                 B95F3 C |  DEZ_DAC :                    B9782 C |
 DEZ_FM1 :                    B9460 C |  DEZ_FM2 :                    B96FD C |
 DEZ_FM3 :                    B9586 C |  DEZ_FM4 :                    B9626 C |
 DEZ_FM5 :                    B9695 C | *DEZ_HEADER :                 B9430 C |
 DEZ_JUMP00 :                 B9701 C |  DEZ_JUMP01 :                 B9462 C |
 DEZ_JUMP02 :                 B9863 C |  DEZ_LOOP00 :                 B96BC C |
 DEZ_LOOP01 :                 B96DB C |  DEZ_LOOP02 :                 B9631 C |
 DEZ_LOOP03 :                 B962D C |  DEZ_LOOP04 :                 B967F C |
 DEZ_LOOP05 :                 B958F C |  DEZ_LOOP06 :                 B958D C |
 DEZ_LOOP07 :                 B95DD C |  DEZ_LOOP08 :                 B9877 C |
 DEZ_LOOP09 :                 B972F C |  DEZ_LOOP0A :                 B9756 C |
 DEZ_PSG1 :                   B9728 C |  DEZ_PSG2 :                   B9726 C |
 DEZ_PSG3 :                   B9861 C |  DEZ_VOICES :                 B9881 C |
 DFLOORTOM :                     8E - |  DHICLAP :                       8F - |
 DHITIMPANI :                    88 - | *DHITOM :                        86 - |
 DKICK :                         81 - |  DKICK_DATA :                 F0077 C |
 DKICK_DATA_END :             F030B C |  DKICK_DATA_PTR :              8077 - |
 DKICK_PTR :                   8022 - |  DKICK_SETUP :                F0022 C |
 DKICK_SIZE :                   294 - |  DLOWCLAP :                      91 - |
 DLOWTIMPANI :                   8A - |  DLOWTOM :                       8D - |
 DMIDCLAP :                      90 - |  DMIDTIMPANI :                   89 - |
 DMIDTOM :                       8C - |  DROWNING_CALL00 :            CA0E3 C |
 DROWNING_CALL01 :            CA0DA C |  DROWNING_DAC :               CA0CD C |
 DROWNING_FM1 :               CA045 C |  DROWNING_FM2 :               CA067 C |
 DROWNING_FM3 :               CA076 C |  DROWNING_FM4 :               CA093 C |
 DROWNING_FM5 :               CA0B0 C | *DROWNING_HEADER :            CA027 C |
 DROWNING_LOOP00 :            CA0B6 C |  DROWNING_LOOP01 :            CA099 C |
 DROWNING_LOOP02 :            CA078 C |  DROWNING_LOOP03 :            CA069 C |
 DROWNING_VOICES :            CA0ED C |  DSCRATCH :                      84 - |
 DSCRATCH_DATA :              F0FA4 C |  DSCRATCH_DATA_END :          F16F0 C |
 DSCRATCH_DATA_PTR :           8FA4 - |  DSCRATCH_PTR :                8031 - |
 DSCRATCH_SETUP :             F0031 C |  DSCRATCH_SIZE :                74C - |
 DSNARE :                        82 - |  DSNARE_DATA :                F030B C |
 DSNARE_DATA_END :            F0A2E C |  DSNARE_DATA_PTR :             830B - |
 DSNARE_PTR :                  8027 - |  DSNARE_SETUP :               F0027 C |
 DSNARE_SIZE :                  723 - | *DTIMPANI :                      85 - |
 DTIMPANI_DATA :              F16F0 C |  DTIMPANI_DATA_END :          F22A5 C |
 DTIMPANI_DATA_PTR :           96F0 - |  DTIMPANI_PTR :                8036 - |
 DTIMPANI_SETUP :             F0036 C |  DTIMPANI_SIZE :                BB5 - |
 DTOM_DATA :                  F22A5 C |  DTOM_DATA_END :              F29B3 C |
 DTOM_DATA_PTR :               A2A5 - |  DTOM_PTR :                    803B - |
 DTOM_SETUP :                 F003B C |  DTOM_SIZE :                    70E - |
*DVLOWCLAP :                     87 - |  DVLOWTIMPANI :                  8B - |
 EHZ_2P_CALL00 :              BA278 C |  EHZ_2P_CALL01 :              BA264 C |
 EHZ_2P_CALL02 :              BA064 C |  EHZ_2P_DAC :                 BA3AA C |
 EHZ_2P_FM1 :                 B9FEB C |  EHZ_2P_FM2 :                 BA30C C |
 EHZ_2P_FM3 :                 BA1B4 C |  EHZ_2P_FM4 :                 BA0C6 C |
 EHZ_2P_FM5 :                 BA2BC C | *EHZ_2P_HEADER :              B9FBB C |
 EHZ_2P_JUMP00 :              BA1C1 C |  EHZ_2P_JUMP01 :              B9FF8 C |
 EHZ_2P_JUMP02 :              BA446 C |  EHZ_2P_LOOP00 :              BA3BB C |
 EHZ_2P_LOOP01 :              BA31D C |  EHZ_2P_LOOP02 :              BA362 C |
 EHZ_2P_LOOP03 :              BA2C2 C |  EHZ_2P_LOOP04 :              BA2DC C |
 EHZ_2P_LOOP05 :              BA0D8 C |  EHZ_2P_LOOP06 :              BA3F7 C |
 EHZ_2P_PSG1 :                BA3D6 C |  EHZ_2P_PSG2 :                BA3F5 C |
 EHZ_2P_PSG3 :                BA444 C |  EHZ_2P_VOICES :              BA457 C |
 EHZ_DAC :                    B0A72 C |  EHZ_FM1 :                    B0803 C |
 EHZ_FM2 :                    B0507 C |  EHZ_FM3 :                    B0621 C |
 EHZ_FM4 :                    B079E C |  EHZ_FM5 :                    B0493 C |
*EHZ_HEADER :                 B0463 C |  EHZ_JUMP00 :                 B07AF C |
 EHZ_JUMP01 :                 B0630 C |  EHZ_JUMP02 :                 B0514 C |
 EHZ_JUMP03 :                 B04B4 C |  EHZ_JUMP04 :                 B0933 C |
 EHZ_JUMP05 :                 B08B9 C |  EHZ_LOOP00 :                 B0A86 C |
 EHZ_LOOP01 :                 B0A99 C |  EHZ_LOOP02 :                 B0AAB C |
 EHZ_LOOP03 :                 B0AC9 C |  EHZ_LOOP04 :                 B0823 C |
 EHZ_LOOP05 :                 B07BA C |  EHZ_LOOP06 :                 B04BF C |
 EHZ_LOOP07 :                 B09AF C |  EHZ_LOOP08 :                 B09D7 C |
 EHZ_LOOP09 :                 B0A01 C |  EHZ_LOOP0A :                 B0939 C |
 EHZ_LOOP0B :                 B08BF C |  EHZ_PSG1 :                   B08B4 C |
 EHZ_PSG2 :                   B092E C |  EHZ_PSG3 :                   B09A0 C |
 EHZ_VOICES :                 B0AF4 C |  EMERALD_DAC :                C8912 C |
 EMERALD_FM1 :                C88B1 C |  EMERALD_FM2 :                C88BD C |
 EMERALD_FM3 :                C88AF C |  EMERALD_FM4 :                C88C9 C |
 EMERALD_FM5 :                C88D7 C |  EMERALD_FM6 :                C88E5 C |
*EMERALD_HEADER :             C887B C |  EMERALD_LOOP00 :             C8906 C |
 EMERALD_LOOP01 :             C88F5 C |  EMERALD_PSG1 :               C8902 C |
 EMERALD_PSG2 :               C88F3 C |  EMERALD_PSG3 :               C8912 C |
 EMERALD_VOICES :             C8913 C |  ENDING_CALL00 :              C1FF5 C |
 ENDING_CALL01 :              C1C02 C |  ENDING_CALL02 :              C1C7D C |
 ENDING_CALL03 :              C1C37 C |  ENDING_CALL04 :              C1AFB C |
 ENDING_CALL05 :              C1AE8 C |  ENDING_CALL06 :              C1B26 C |
 ENDING_CALL07 :              C1B37 C |  ENDING_CALL08 :              C1F4F C |
 ENDING_DAC :                 C1F90 C |  ENDING_FM1 :                 C1A9B C |
 ENDING_FM2 :                 C1B88 C |  ENDING_FM3 :                 C1CA2 C |
 ENDING_FM4 :                 C1D6A C |  ENDING_FM5 :                 C1E1A C |
*ENDING_HEADER :              C1A6B C |  ENDING_LOOP00 :              C1F93 C |
 ENDING_LOOP01 :              C1FA3 C |  ENDING_LOOP02 :              C1FBD C |
 ENDING_LOOP03 :              C1FD8 C |  ENDING_LOOP04 :              C1E27 C |
 ENDING_LOOP05 :              C1E47 C |  ENDING_LOOP06 :              C1E73 C |
 ENDING_LOOP07 :              C1E7E C |  ENDING_LOOP08 :              C1D75 C |
 ENDING_LOOP09 :              C1D95 C |  ENDING_LOOP0A :              C1DC1 C |
 ENDING_LOOP0B :              C1DCB C |  ENDING_LOOP0C :              C1CA8 C |
 ENDING_LOOP0D :              C1D29 C |  ENDING_LOOP0E :              C1D33 C |
 ENDING_LOOP0F :              C1B9D C |  ENDING_LOOP10 :              C1BEF C |
 ENDING_PSG1 :                C1ED3 C |  ENDING_PSG2 :                C1ED7 C |
 ENDING_PSG3 :                C1F78 C |  ENDING_VOICES :              C2000 C |
 END_BOSS_CALL00 :            C18EB C |  END_BOSS_CALL01 :            C190D C |
 END_BOSS_CALL02 :            C195A C |  END_BOSS_CALL03 :            C196F C |
 END_BOSS_CALL04 :            C18DB C |  END_BOSS_CALL05 :            C1877 C |
 END_BOSS_CALL06 :            C184F C |  END_BOSS_CALL07 :            C1860 C |
 END_BOSS_CALL08 :            C17A0 C |  END_BOSS_CALL09 :            C17B2 C |
 END_BOSS_CALL0A :            C17EE C |  END_BOSS_CALL0B :            C17FF C |
 END_BOSS_DAC :               C1A0F C |  END_BOSS_FM1 :               C1763 C |
 END_BOSS_FM2 :               C180E C |  END_BOSS_FM3 :               C18B3 C |
 END_BOSS_FM4 :               C192E C |  END_BOSS_FM5 :               C1981 C |
*END_BOSS_HEADER :            C1733 C |  END_BOSS_JUMP00 :            C1935 C |
 END_BOSS_JUMP01 :            C18BA C |  END_BOSS_JUMP02 :            C1A06 C |
 END_BOSS_JUMP03 :            C19E8 C |  END_BOSS_JUMP04 :            C19B5 C |
 END_BOSS_LOOP00 :            C198F C |  END_BOSS_LOOP01 :            C1938 C |
 END_BOSS_LOOP02 :            C1940 C |  END_BOSS_LOOP03 :            C18BD C |
 END_BOSS_LOOP04 :            C1810 C |  END_BOSS_LOOP05 :            C1829 C |
 END_BOSS_LOOP06 :            C183C C |  END_BOSS_LOOP07 :            C1765 C |
 END_BOSS_LOOP08 :            C177A C |  END_BOSS_LOOP09 :            C178B C |
 END_BOSS_LOOP0A :            C19B9 C |  END_BOSS_LOOP0B :            C19C1 C |
 END_BOSS_LOOP0C :            C19C8 C |  END_BOSS_PSG1 :              C19B3 C |
 END_BOSS_PSG2 :              C19E1 C |  END_BOSS_PSG3 :              C1A02 C |
 END_BOSS_VOICES :            C1A20 C |  END_OF_LEVEL_DAC :           C8559 C |
 END_OF_LEVEL_FM1 :           C84CF C |  END_OF_LEVEL_FM2 :           C84EC C |
 END_OF_LEVEL_FM3 :           C850A C |  END_OF_LEVEL_FM4 :           C8526 C |
 END_OF_LEVEL_FM5 :           C8542 C | *END_OF_LEVEL_HEADER :        C849F C |
 END_OF_LEVEL_PSG1 :          C84D1 C |  END_OF_LEVEL_PSG2 :          C8549 C |
 END_OF_LEVEL_PSG3 :          C8558 C |  END_OF_LEVEL_VOICES :        C8573 C |
 EXTRALIFE_DAC :              C8255 C |  EXTRALIFE_FM1 :              C81FD C |
 EXTRALIFE_FM2 :              C8213 C |  EXTRALIFE_FM3 :              C822E C |
 EXTRALIFE_FM4 :              C81F6 C |  EXTRALIFE_FM5 :              C8227 C |
*EXTRALIFE_HEADER :           C81C6 C |  EXTRALIFE_JUMP00 :           C8230 C |
 EXTRALIFE_JUMP01 :           C81FF C |  EXTRALIFE_PSG1 :             C8243 C |
 EXTRALIFE_PSG2 :             C8254 C |  EXTRALIFE_PSG3 :             C8254 C |
 EXTRALIFE_VOICES :           C8266 C | *FALSE :                          0 - |
 FTONE_01 :                       1 - |  FTONE_02 :                       2 - |
 FTONE_03 :                       3 - |  FTONE_04 :                       4 - |
 FTONE_05 :                       5 - |  FTONE_06 :                       6 - |
 FTONE_07 :                       7 - |  FTONE_08 :                       8 - |
 FTONE_09 :                       9 - |  FTONE_0A :                       A - |
 FTONE_0B :                       B - |  FTONE_0C :                       C - |
*FTONE_0D :                       D - | *FULLPMMU :                       1 - |
 GOVER_DAC :                  C86B5 C |  GOVER_FM1 :                  C8607 C |
 GOVER_FM2 :                  C863C C |  GOVER_FM3 :                  C865B C |
 GOVER_FM4 :                  C8670 C |  GOVER_FM5 :                  C86A2 C |
*GOVER_HEADER :               C85D7 C |  GOVER_PSG1 :                 C86B4 C |
 GOVER_PSG2 :                 C86B4 C |  GOVER_PSG3 :                 C86B4 C |
 GOVER_VOICES :               C86BE C | *HAS64 :                          0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HPZ_CALL00 :                 C0C2D C |  HPZ_DAC :                    C0C3A C |
 HPZ_FM1 :                    C0AD8 C |  HPZ_FM2 :                    C0B2B C |
 HPZ_FM3 :                    C0BAB C |  HPZ_FM4 :                    C0AB6 C |
 HPZ_FM5 :                    C0AA8 C | *HPZ_HEADER :                 C0A78 C |
 HPZ_JUMP00 :                 C0BBA C |  HPZ_JUMP01 :                 C0B37 C |
 HPZ_JUMP02 :                 C0ADF C |  HPZ_LOOP00 :                 C0C42 C |
 HPZ_LOOP01 :                 C0C58 C |  HPZ_LOOP02 :                 C0BB6 C |
 HPZ_LOOP03 :                 C0B2D C |  HPZ_LOOP04 :                 C0AE1 C |
 HPZ_LOOP05 :                 C0BFD C |  HPZ_LOOP06 :                 C0C17 C |
 HPZ_PSG1 :                   C0AC4 C |  HPZ_PSG2 :                   C0ACC C |
 HPZ_PSG3 :                   C0BF9 C |  HPZ_VOICES :                 C0C73 C |
 HTZ_CALL00 :                 B1ED7 C |  HTZ_CALL01 :                 B1EE0 C |
 HTZ_CALL02 :                 B1DE3 C |  HTZ_CALL03 :                 B1DF4 C |
 HTZ_CALL04 :                 B1E09 C |  HTZ_CALL05 :                 B1E18 C |
 HTZ_CALL06 :                 B1D6B C |  HTZ_CALL07 :                 B1D1D C |
 HTZ_CALL08 :                 B1CA1 C |  HTZ_CALL09 :                 B1CB5 C |
 HTZ_CALL0A :                 B1CC9 C |  HTZ_CALL0B :                 B1C27 C |
 HTZ_CALL0C :                 B1C46 C |  HTZ_CALL0D :                 B1BC3 C |
 HTZ_CALL0E :                 B1BD6 C |  HTZ_CALL0F :                 B1BAE C |
 HTZ_DAC :                    B1E51 C |  HTZ_FM1 :                    B1AF7 C |
 HTZ_FM2 :                    B1D7C C |  HTZ_FM3 :                    B1BE8 C |
 HTZ_FM4 :                    B1D2E C |  HTZ_FM5 :                    B1CDE C |
*HTZ_HEADER :                 B1AC6 C |  HTZ_JUMP00 :                 B1D7E C |
 HTZ_JUMP01 :                 B1D30 C |  HTZ_JUMP02 :                 B1CE2 C |
 HTZ_LOOP00 :                 B1D35 C |  HTZ_LOOP01 :                 B1D5F C |
 HTZ_LOOP02 :                 B1CE7 C |  HTZ_LOOP03 :                 B1D11 C |
 HTZ_PSG1 :                   B1AF6 C |  HTZ_PSG2 :                   B1AF6 C |
 HTZ_PSG3 :                   B1AF6 C |  HTZ_VOICES :                 B1EEA C |
*INSUPMODE :                      1 - |  INVINCIBLE_DAC :             C8147 C |
 INVINCIBLE_FM1 :             C8032 C |  INVINCIBLE_FM2 :             C8080 C |
 INVINCIBLE_FM3 :             C80CA C |  INVINCIBLE_FM4 :             C80FE C |
 INVINCIBLE_FM5 :             C8030 C | *INVINCIBLE_HEADER :          C8000 C |
 INVINCIBLE_JUMP00 :          C8137 C |  INVINCIBLE_LOOP00 :          C8150 C |
 INVINCIBLE_LOOP01 :          C8102 C |  INVINCIBLE_LOOP02 :          C8122 C |
 INVINCIBLE_LOOP03 :          C80CE C |  INVINCIBLE_LOOP04 :          C80EE C |
 INVINCIBLE_LOOP05 :          C8084 C |  INVINCIBLE_LOOP06 :          C80AB C |
 INVINCIBLE_LOOP07 :          C8036 C |  INVINCIBLE_PSG1 :            C8132 C |
 INVINCIBLE_PSG2 :            C8132 C |  INVINCIBLE_PSG3 :            C8133 C |
 INVINCIBLE_VOICES :          C8194 C | *LISTON :                         3 - |
*MACEXP :                         7 - |  MCZ_2P_CALL00 :              B0C1F C |
 MCZ_2P_CALL01 :              B0C05 C |  MCZ_2P_CALL02 :              B0C0A C |
 MCZ_2P_CALL03 :              B0C32 C |  MCZ_2P_DAC :                 B1030 C |
 MCZ_2P_FM1 :                 B0C79 C |  MCZ_2P_FM2 :                 B0C63 C |
 MCZ_2P_FM3 :                 B0F4C C |  MCZ_2P_FM4 :                 B0DB2 C |
 MCZ_2P_FM5 :                 B0E7D C | *MCZ_2P_HEADER :              B0BD5 C |
 MCZ_2P_JUMP00 :              B1032 C |  MCZ_2P_JUMP01 :              B0F50 C |
 MCZ_2P_JUMP02 :              B0E88 C |  MCZ_2P_JUMP03 :              B0DBB C |
 MCZ_2P_JUMP04 :              B0C80 C |  MCZ_2P_JUMP05 :              B0C67 C |
 MCZ_2P_JUMP06 :              B0FC4 C |  MCZ_2P_JUMP07 :              B0D50 C |
 MCZ_2P_JUMP08 :              B0CF0 C |  MCZ_2P_LOOP00 :              B0F5A C |
 MCZ_2P_LOOP01 :              B0F7D C |  MCZ_2P_LOOP02 :              B0FCA C |
 MCZ_2P_LOOP03 :              B0FED C |  MCZ_2P_PSG1 :                B0CEC C |
 MCZ_2P_PSG2 :                B0FC0 C |  MCZ_2P_PSG3 :                B0D4E C |
 MCZ_2P_VOICES :              B1049 C |  MCZ_CALL00 :                 B9947 C |
 MCZ_CALL01 :                 B9AD5 C |  MCZ_CALL02 :                 B9ADF C |
 MCZ_CALL03 :                 B9964 C |  MCZ_CALL04 :                 B999C C |
 MCZ_DAC :                    B9EE1 C |  MCZ_FM1 :                    B9AFB C |
 MCZ_FM2 :                    B9D4D C |  MCZ_FM3 :                    B9C79 C |
 MCZ_FM4 :                    B9DBB C |  MCZ_FM5 :                    B99D7 C |
*MCZ_HEADER :                 B9917 C |  MCZ_JUMP00 :                 B9EE9 C |
 MCZ_JUMP01 :                 B9DC2 C |  MCZ_JUMP02 :                 B9B05 C |
 MCZ_JUMP03 :                 B99E0 C |  MCZ_JUMP04 :                 B9EDA C |
 MCZ_JUMP05 :                 B9B6B C |  MCZ_LOOP00 :                 B9E42 C |
 MCZ_LOOP01 :                 B9D52 C |  MCZ_LOOP02 :                 B9C9C C |
 MCZ_LOOP03 :                 B9D24 C |  MCZ_LOOP04 :                 B9B43 C |
 MCZ_LOOP05 :                 B9A50 C |  MCZ_LOOP06 :                 B9BCF C |
 MCZ_LOOP07 :                 B9C53 C |  MCZ_LOOP08 :                 B9BA9 C |
 MCZ_PSG1 :                   B9B66 C |  MCZ_PSG2 :                   B9BCC C |
 MCZ_PSG3 :                   B9ED5 C |  MCZ_VOICES :                 B9F0C C |
 MOMCPU :                     68008 - | *MOMCPUNAME :               "68008" - |
 MTZ_CALL00 :                 B19E5 C |  MTZ_DAC :                    B19FB C |
 MTZ_FM1 :                    B1583 C |  MTZ_FM2 :                    B18AF C |
 MTZ_FM3 :                    B16F0 C |  MTZ_FM4 :                    B178A C |
 MTZ_FM5 :                    B182C C | *MTZ_HEADER :                 B154B C |
 MTZ_JUMP00 :                 B18C2 C |  MTZ_JUMP01 :                 B1A25 C |
 MTZ_JUMP02 :                 B16AC C |  MTZ_LOOP00 :                 B1A03 C |
 MTZ_LOOP01 :                 B1833 C |  MTZ_LOOP02 :                 B183A C |
 MTZ_LOOP03 :                 B1796 C |  MTZ_LOOP04 :                 B17B8 C |
 MTZ_LOOP05 :                 B16FC C |  MTZ_LOOP06 :                 B171E C |
 MTZ_LOOP07 :                 B174B C |  MTZ_LOOP08 :                 B1765 C |
 MTZ_LOOP09 :                 B158B C |  MTZ_LOOP0A :                 B15C0 C |
 MTZ_LOOP0B :                 B16B1 C |  MTZ_LOOP0C :                 B16B9 C |
 MTZ_LOOP0D :                 B16C1 C |  MTZ_LOOP0E :                 B16E5 C |
 MTZ_PSG1 :                   B157B C |  MTZ_PSG2 :                   B157E C |
 MTZ_PSG3 :                   B1A23 C |  MTZ_VOICES :                 B1A30 C |
 MUSIC_01 :                   B0000 C |  MUSIC_01_PTR :                8000 - |
 MUSIC_02 :                   B0463 C |  MUSIC_02_PTR :                8463 - |
 MUSIC_03 :                   B0BD5 C |  MUSIC_03_PTR :                8BD5 - |
 MUSIC_04 :                   B10C6 C |  MUSIC_04_PTR :                90C6 - |
 MUSIC_05 :                   B154B C |  MUSIC_05_PTR :                954B - |
 MUSIC_06 :                   B1AC6 C |  MUSIC_06_PTR :                9AC6 - |
 MUSIC_07 :                   B8000 C |  MUSIC_07_PTR :                8000 - |
 MUSIC_08 :                   B878F C |  MUSIC_08_PTR :                878F - |
 MUSIC_09 :                   B8D14 C |  MUSIC_09_PTR :                8D14 - |
 MUSIC_0A :                   B9430 C |  MUSIC_0A_PTR :                9430 - |
 MUSIC_0B :                   B9917 C |  MUSIC_0B_PTR :                9917 - |
 MUSIC_0C :                   B9FBB C |  MUSIC_0C_PTR :                9FBB - |
 MUSIC_0D :                   BA4D4 C |  MUSIC_0D_PTR :                A4D4 - |
 MUSIC_0E :                   C0000 C |  MUSIC_0E_PTR :                8000 - |
 MUSIC_0F :                   C064B C |  MUSIC_0F_PTR :                864B - |
 MUSIC_10 :                   C0A78 C |  MUSIC_10_PTR :                8A78 - |
 MUSIC_11 :                   C0CD7 C |  MUSIC_11_PTR :                8CD7 - |
 MUSIC_12 :                   C0E52 C |  MUSIC_12_PTR :                8E52 - |
 MUSIC_13 :                   C1460 C |  MUSIC_13_PTR :                9460 - |
 MUSIC_14 :                   C1733 C |  MUSIC_14_PTR :                9733 - |
 MUSIC_15 :                   C1A6B C |  MUSIC_15_PTR :                9A6B - |
 MUSIC_16 :                   C2064 C |  MUSIC_16_PTR :                A064 - |
 MUSIC_17 :                   C8000 C |  MUSIC_17_PTR :                8000 - |
 MUSIC_18 :                   C81C6 C |  MUSIC_18_PTR :                81C6 - |
 MUSIC_19 :                   C82B1 C |  MUSIC_19_PTR :                82B1 - |
 MUSIC_1A :                   C849F C |  MUSIC_1A_PTR :                849F - |
 MUSIC_1B :                   C85D7 C |  MUSIC_1B_PTR :                85D7 - |
 MUSIC_1C :                   C8722 C |  MUSIC_1C_PTR :                8722 - |
 MUSIC_1D :                   C887B C |  MUSIC_1D_PTR :                887B - |
 MUSIC_1E :                   C8945 C |  MUSIC_1E_PTR :                8945 - |
 MUSIC_1F :                   CA027 C |  MUSIC_1F_PTR :                A027 - |
 NA0 :                           8A - |  NA1 :                           96 - |
 NA2 :                           A2 - |  NA3 :                           AE - |
 NA4 :                           BA - |  NA5 :                           C6 - |
 NA6 :                           D2 - |  NA7 :                           DE - |
 NAB0 :                          89 - |  NAB1 :                          95 - |
 NAB2 :                          A1 - |  NAB3 :                          AD - |
 NAB4 :                          B9 - |  NAB5 :                          C5 - |
 NAB6 :                          D1 - |  NAB7 :                          DD - |
 NB0 :                           8C - |  NB1 :                           98 - |
 NB2 :                           A4 - |  NB3 :                           B0 - |
 NB4 :                           BC - |  NB5 :                           C8 - |
 NB6 :                           D4 - |  NBB0 :                          8B - |
 NBB1 :                          97 - |  NBB2 :                          A3 - |
 NBB3 :                          AF - |  NBB4 :                          BB - |
 NBB5 :                          C7 - |  NBB6 :                          D3 - |
 NBB7 :                          DF - |  NC0 :                           81 - |
 NC1 :                           8D - |  NC2 :                           99 - |
 NC3 :                           A5 - |  NC4 :                           B1 - |
 NC5 :                           BD - |  NC6 :                           C9 - |
 NC7 :                           D5 - |  NCS0 :                          82 - |
 NCS1 :                          8E - |  NCS2 :                          9A - |
 NCS3 :                          A6 - |  NCS4 :                          B2 - |
 NCS5 :                          BE - |  NCS6 :                          CA - |
 NCS7 :                          D6 - |  ND0 :                           83 - |
 ND1 :                           8F - |  ND2 :                           9B - |
 ND3 :                           A7 - |  ND4 :                           B3 - |
 ND5 :                           BF - |  ND6 :                           CB - |
 ND7 :                           D7 - |  NE0 :                           85 - |
 NE1 :                           91 - |  NE2 :                           9D - |
 NE3 :                           A9 - |  NE4 :                           B5 - |
 NE5 :                           C1 - |  NE6 :                           CD - |
 NE7 :                           D9 - |  NEB0 :                          84 - |
 NEB1 :                          90 - |  NEB2 :                          9C - |
 NEB3 :                          A8 - |  NEB4 :                          B4 - |
 NEB5 :                          C0 - |  NEB6 :                          CC - |
 NEB7 :                          D8 - | *NESTMAX :                      100 - |
 NF0 :                           86 - |  NF1 :                           92 - |
 NF2 :                           9E - |  NF3 :                           AA - |
 NF4 :                           B6 - |  NF5 :                           C2 - |
 NF6 :                           CE - | *NF7 :                           DA - |
 NFS0 :                          87 - |  NFS1 :                          93 - |
 NFS2 :                          9F - |  NFS3 :                          AB - |
 NFS4 :                          B7 - |  NFS5 :                          C3 - |
 NFS6 :                          CF - |  NFS7 :                          DB - |
 NG0 :                           88 - |  NG1 :                           94 - |
 NG2 :                           A0 - |  NG3 :                           AC - |
 NG4 :                           B8 - |  NG5 :                           C4 - |
 NG6 :                           D0 - |  NG7 :                           DC - |
 NMAXPSG :                       C7 - | *NMAXPSG1 :                      D3 - |
*NMAXPSG2 :                      D4 - |  NRST :                          80 - |
*OFFSET_0X0F7304 :            F2F77 C |  OOZ_CALL00 :                 B12E5 C |
 OOZ_CALL01 :                 B1282 C |  OOZ_CALL02 :                 B112F C |
 OOZ_CALL03 :                 B114A C |  OOZ_CALL04 :                 B1187 C |
 OOZ_CALL05 :                 B11C3 C |  OOZ_CALL06 :                 B11F5 C |
 OOZ_CALL07 :                 B11DA C |  OOZ_CALL08 :                 B1201 C |
 OOZ_DAC :                    B147D C |  OOZ_FM1 :                    B10F6 C |
 OOZ_FM2 :                    B120E C |  OOZ_FM3 :                    B1363 C |
 OOZ_FM4 :                    B1295 C |  OOZ_FM5 :                    B12F9 C |
*OOZ_HEADER :                 B10C6 C |  OOZ_JUMP00 :                 B1100 C |
 OOZ_JUMP01 :                 B13EB C |  OOZ_JUMP02 :                 B13CC C |
 OOZ_LOOP00 :                 B1486 C |  OOZ_LOOP01 :                 B1391 C |
 OOZ_LOOP02 :                 B1310 C |  OOZ_LOOP03 :                 B1326 C |
 OOZ_LOOP04 :                 B12AA C |  OOZ_LOOP05 :                 B12C0 C |
 OOZ_LOOP06 :                 B12D8 C |  OOZ_LOOP07 :                 B121A C |
 OOZ_LOOP08 :                 B1452 C |  OOZ_LOOP09 :                 B11AA C |
 OOZ_PSG1 :                   B13C3 C |  OOZ_PSG2 :                   B13E6 C |
 OOZ_PSG3 :                   B1421 C |  OOZ_VOICES :                 B14B5 C |
 OPTIONS_DAC :                C0DC0 C |  OPTIONS_FM1 :                C0D87 C |
 OPTIONS_FM2 :                C0D59 C |  OPTIONS_FM3 :                C0D2A C |
 OPTIONS_FM4 :                C0D07 C |  OPTIONS_FM5 :                C0D4B C |
*OPTIONS_HEADER :             C0CD7 C |  OPTIONS_JUMP00 :             C0D62 C |
 OPTIONS_JUMP01 :             C0D2C C |  OPTIONS_LOOP00 :             C0D0D C |
 OPTIONS_PSG1 :               C0DBB C |  OPTIONS_PSG2 :               C0DAF C |
 OPTIONS_PSG3 :               C0DB4 C |  OPTIONS_VOICES :             C0DD5 C |
*PADDING :                        0 - |  PANCENTER :                     C0 - |
*PANCENTRE :                     C0 - |  PANLEFT :                       80 - |
*PANNONE :                        0 - |  PANRIGHT :                      40 - |
 PSGDELTA :                       C - | *RELAXED :                        0 - |
 RESULTS_SCREEN_2P_CALL00 :   B01F3 C |  RESULTS_SCREEN_2P_CALL01 :   B009C C |
 RESULTS_SCREEN_2P_CALL02 :   B01A8 C |  RESULTS_SCREEN_2P_CALL03 :   B0080 C |
 RESULTS_SCREEN_2P_CALL04 :   B0131 C |  RESULTS_SCREEN_2P_CALL05 :   B00CB C |
 RESULTS_SCREEN_2P_CALL06 :   B035D C |  RESULTS_SCREEN_2P_CALL07 :   B0372 C |
 RESULTS_SCREEN_2P_CALL08 :   B02CE C |  RESULTS_SCREEN_2P_CALL09 :   B02EF C |
 RESULTS_SCREEN_2P_CALL0A :   B0304 C |  RESULTS_SCREEN_2P_CALL0B :   B00B8 C |
 RESULTS_SCREEN_2P_CALL0C :   B008F C |  RESULTS_SCREEN_2P_DAC :      B039E C |
 RESULTS_SCREEN_2P_FM1 :      B0030 C |  RESULTS_SCREEN_2P_FM2 :      B00DE C |
 RESULTS_SCREEN_2P_FM3 :      B014A C |  RESULTS_SCREEN_2P_FM4 :      B0269 C |
 RESULTS_SCREEN_2P_FM5 :      B0218 C | *RESULTS_SCREEN_2P_HEADER :   B0000 C |
 RESULTS_SCREEN_2P_JUMP00 :   B021F C |  RESULTS_SCREEN_2P_JUMP01 :   B0392 C |
 RESULTS_SCREEN_2P_JUMP02 :   B0323 C |  RESULTS_SCREEN_2P_JUMP03 :   B0296 C |
 RESULTS_SCREEN_2P_LOOP00 :   B024E C |  RESULTS_SCREEN_2P_LOOP01 :   B00E0 C |
 RESULTS_SCREEN_2P_LOOP02 :   B00F0 C |  RESULTS_SCREEN_2P_LOOP03 :   B00FC C |
 RESULTS_SCREEN_2P_LOOP04 :   B013D C |  RESULTS_SCREEN_2P_PSG1 :     B0292 C |
 RESULTS_SCREEN_2P_PSG2 :     B031F C |  RESULTS_SCREEN_2P_PSG3 :     B038E C |
 RESULTS_SCREEN_2P_VOICES :   B03CD C |  SCZ_CALL00 :                 BA751 C |
 SCZ_CALL01 :                 BA75F C |  SCZ_CALL02 :                 BA716 C |
 SCZ_CALL03 :                 BA6C6 C |  SCZ_CALL04 :                 BA614 C |
 SCZ_CALL05 :                 BA56F C |  SCZ_CALL06 :                 BA578 C |
 SCZ_CALL07 :                 BA530 C |  SCZ_DAC :                    BA725 C |
 SCZ_FM1 :                    BA5B5 C |  SCZ_FM2 :                    BA6D6 C |
 SCZ_FM3 :                    BA61F C |  SCZ_FM4 :                    BA504 C |
 SCZ_FM5 :                    BA53A C | *SCZ_HEADER :                 BA4D4 C |
 SCZ_JUMP00 :                 BA634 C |  SCZ_JUMP01 :                 BA5C8 C |
 SCZ_JUMP02 :                 BA53E C |  SCZ_JUMP03 :                 BA50E C |
 SCZ_JUMP04 :                 BA823 C |  SCZ_JUMP05 :                 BA7B1 C |
 SCZ_LOOP00 :                 BA72D C |  SCZ_LOOP01 :                 BA73D C |
 SCZ_LOOP02 :                 BA6DF C |  SCZ_LOOP03 :                 BA506 C |
 SCZ_LOOP04 :                 BA525 C |  SCZ_LOOP05 :                 BA76F C |
 SCZ_PSG1 :                   BA76D C |  SCZ_PSG2 :                   BA7AD C |
 SCZ_PSG3 :                   BA81F C |  SCZ_VOICES :                 BA828 C |
*SEGA_PCM_DATA :              F8000 C |  SFX_20_PTR :                  800B - |
 SFX_21_PTR :                  8021 - |  SFX_22_PTR :                  804B - |
 SFX_23_PTR :                  806A - |  SFX_24_PTR :                  809C - |
 SFX_25_PTR :                  80D1 - |  SFX_26_PTR :                  80FD - |
 SFX_27_PTR :                  812C - |  SFX_28_PTR :                  8158 - |
 SFX_29_PTR :                  8167 - |  SFX_2A_PTR :                  8179 - |
 SFX_2B_PTR :                  81BA - |  SFX_2C_PTR :                  81D9 - |
 SFX_2D_PTR :                  820D - |  SFX_2E_PTR :                  8243 - |
 SFX_2F_PTR :                  828D - |  SFX_30_PTR :                  82BA - |
 SFX_31_PTR :                  82EB - |  SFX_32_PTR :                  8317 - |
 SFX_33_PTR :                  8366 - |  SFX_34_PTR :                  8397 - |
 SFX_35_PTR :                  83F2 - |  SFX_36_PTR :                  8407 - |
 SFX_37_PTR :                  8424 - |  SFX_38_PTR :                  845F - |
 SFX_39_PTR :                  847C - |  SFX_3A_PTR :                  84C6 - |
 SFX_3B_PTR :                  84EE - |  SFX_3C_PTR :                  8519 - |
 SFX_3D_PTR :                  855A - |  SFX_3E_PTR :                  85AD - |
 SFX_3F_PTR :                  85E7 - |  SFX_40_PTR :                  8659 - |
 SFX_41_PTR :                  8672 - |  SFX_42_PTR :                  86AC - |
 SFX_43_PTR :                  86BD - |  SFX_44_PTR :                  8737 - |
 SFX_45_PTR :                  875F - |  SFX_46_PTR :                  87C6 - |
 SFX_47_PTR :                  87EE - |  SFX_48_PTR :                  881C - |
 SFX_49_PTR :                  882D - |  SFX_4A_PTR :                  885A - |
 SFX_4B_PTR :                  8887 - |  SFX_4C_PTR :                  88BA - |
 SFX_4D_PTR :                  88F4 - |  SFX_4E_PTR :                  8901 - |
 SFX_4F_PTR :                  8916 - |  SFX_50_PTR :                  894D - |
 SFX_51_PTR :                  8980 - |  SFX_52_PTR :                  89B9 - |
 SFX_53_PTR :                  89F6 - |  SFX_54_PTR :                  8A35 - |
 SFX_55_PTR :                  8A76 - |  SFX_56_PTR :                  8AA0 - |
 SFX_57_PTR :                  8AE5 - |  SFX_58_PTR :                  8B0D - |
 SFX_59_PTR :                  8B37 - |  SFX_5A_PTR :                  8B90 - |
 SFX_5B_PTR :                  8BBD - |  SFX_5C_PTR :                  8BF1 - |
 SFX_5D_PTR :                  8C38 - |  SFX_5E_PTR :                  8C60 - |
 SFX_5F_PTR :                  8C9A - |  SFX_60_PTR :                  8D36 - |
 SFX_61_PTR :                  8D71 - |  SFX_62_PTR :                  8DCE - |
 SFX_63_PTR :                  8E05 - |  SFX_64_PTR :                  8E34 - |
 SFX_65_PTR :                  8E5C - |  SFX_66_PTR :                  8E7D - |
 SFX_67_PTR :                  8EB7 - |  SFX_68_PTR :                  8ED8 - |
 SFX_69_PTR :                  8F02 - |  SFX_6A_PTR :                  8F3F - |
 SFX_6B_PTR :                  8F6A - |  SFX_6C_PTR :                  8F94 - |
 SFX_6D_PTR :                  8FFF - |  SFX_6E_PTR :                  902B - |
 SFX_6F_PTR :                  9069 - |  SFX_70_PTR :                  90AC - |
 SFX_NN_PTR :                  8000 - |  SMPS2ASMVER :                    1 - |
 SMPSNOATTACK :                  E7 - | *SMPSPITCH00 :                    0 - |
*SMPSPITCH01HI :                  C - | *SMPSPITCH01LO :                 F4 - |
*SMPSPITCH02HI :                 18 - | *SMPSPITCH02LO :                 E8 - |
*SMPSPITCH03HI :                 24 - | *SMPSPITCH03LO :                 DC - |
*SMPSPITCH04HI :                 30 - | *SMPSPITCH04LO :                 D0 - |
*SMPSPITCH05HI :                 3C - | *SMPSPITCH05LO :                 C4 - |
*SMPSPITCH06HI :                 48 - | *SMPSPITCH06LO :                 B8 - |
*SMPSPITCH07HI :                 54 - | *SMPSPITCH07LO :                 AC - |
*SMPSPITCH08HI :                 60 - | *SMPSPITCH08LO :                 A0 - |
*SMPSPITCH09HI :                 6C - | *SMPSPITCH09LO :                 94 - |
*SMPSPITCH10HI :                 78 - | *SMPSPITCH10LO :                 88 - |
*SNDDAC_END :                 F2F77 C | *SNDDAC_START :               F0077 C |
 SONGSTART :                  E90AC - |  SONICDRIVERVER :                 3 - |
 SOUND20 :                    E800B C | *SOUND20_JUMP_HEADER :        E800B C |
 SOUND20_JUMP_PSG1 :          E8015 C | *SOUND20_NULL_HEADER :        E8000 C |
 SOUND20_NULL_PSG1 :          E800A C |  SOUND21 :                    E8021 C |
 SOUND21_CHECKPOINT_FM5 :     E8044 C | *SOUND21_CHECKPOINT_HEADER :  E8021 C |
 SOUND21_CHECKPOINT_VOICES :  E802B C |  SOUND22 :                    E804B C |
*SOUND22_SPIKESWITCH_HEADER : E804B C |  SOUND22_SPIKESWITCH_LOOP00 : E8060 C |
 SOUND22_SPIKESWITCH_PSG3 :   E8055 C |  SOUND23 :                    E806A C |
 SOUND23_HURT_FM5 :           E8074 C | *SOUND23_HURT_HEADER :        E806A C |
 SOUND23_HURT_LOOP00 :        E807A C |  SOUND23_HURT_VOICES :        E8083 C |
 SOUND24 :                    E809C C | *SOUND24_SKIDDING_HEADER :    E809C C |
 SOUND24_SKIDDING_LOOP00 :    E80C7 C |  SOUND24_SKIDDING_LOOP01 :    E80B4 C |
 SOUND24_SKIDDING_PSG2 :      E80AC C |  SOUND24_SKIDDING_PSG3 :      E80BE C |
 SOUND25 :                    E80D1 C |  SOUND25_BLOCKPUSH_FM5 :      E80DB C |
*SOUND25_BLOCKPUSH_HEADER :   E80D1 C |  SOUND25_BLOCKPUSH_VOICES :   E80E4 C |
 SOUND26 :                    E80FD C |  SOUND26_HURTBYSPIKES_FM5 :   E8107 C |
*SOUND26_HURTBYSPIKES_HEADER :                                        E80FD C |
 SOUND26_HURTBYSPIKES_VOICES :                                        E8113 C |
 SOUND27 :                    E812C C |  SOUND27_SPARKLE_FM4 :        E8136 C |
*SOUND27_SPARKLE_HEADER :     E812C C |  SOUND27_SPARKLE_VOICES :     E813F C |
 SOUND28 :                    E8158 C | *SOUND28_BEEP_HEADER :        E8158 C |
 SOUND28_BEEP_PSG1 :          E8162 C |  SOUND29 :                    E8167 C |
*SOUND29_BWOOP_HEADER :       E8167 C |  SOUND29_BWOOP_PSG2 :         E8171 C |
 SOUND2A :                    E8179 C |  SOUND2A_SPLASH_FM5 :         E819C C |
*SOUND2A_SPLASH_HEADER :      E8179 C |  SOUND2A_SPLASH_LOOP00 :      E8192 C |
 SOUND2A_SPLASH_PSG3 :        E8189 C |  SOUND2A_SPLASH_VOICES :      E81A1 C |
 SOUND2B :                    E81BA C | *SOUND2B_SWISH_HEADER :       E81BA C |
 SOUND2B_SWISH_LOOP00 :       E81CF C |  SOUND2B_SWISH_PSG3 :         E81C4 C |
 SOUND2C :                    E81D9 C |  SOUND2C_39_4B_VOICES :       E81F4 C |
 SOUND2C_BOSSHIT_FM5 :        E81E3 C | *SOUND2C_BOSSHIT_HEADER :     E81D9 C |
 SOUND2C_BOSSHIT_LOOP00 :     E81EA C |  SOUND2D :                    E820D C |
 SOUND2D_INHALINGBUBBLE_FM5 : E8217 C |
*SOUND2D_INHALINGBUBBLE_HEADER :                                      E820D C |
 SOUND2D_INHALINGBUBBLE_VOICES :                                      E822A C |
 SOUND2E :                    E8243 C |  SOUND2E_33_VOICES :          E8274 C |
 SOUND2E_LAVABALL_FM5 :       E8253 C | *SOUND2E_LAVABALL_HEADER :    E8243 C |
 SOUND2E_LAVABALL_LOOP00 :    E826A C |  SOUND2E_LAVABALL_PSG3 :      E8261 C |
 SOUND2F :                    E828D C |  SOUND2F_SHIELD_FM5 :         E8297 C |
*SOUND2F_SHIELD_HEADER :      E828D C |  SOUND2F_SHIELD_VOICES :      E82A1 C |
 SOUND30 :                    E82BA C |  SOUND30_LASERBEAM_FM5 :      E82C4 C |
*SOUND30_LASERBEAM_HEADER :   E82BA C |  SOUND30_LASERBEAM_LOOP00 :   E82C8 C |
 SOUND30_LASERBEAM_VOICES :   E82D2 C |  SOUND31 :                    E82EB C |
 SOUND31_ZAP_FM5 :            E82F5 C | *SOUND31_ZAP_HEADER :         E82EB C |
 SOUND31_ZAP_VOICES :         E82FE C |  SOUND32 :                    E8317 C |
 SOUND32_DROWN_FM4 :          E8339 C |  SOUND32_DROWN_FM5 :          E8327 C |
*SOUND32_DROWN_HEADER :       E8317 C |  SOUND32_DROWN_LOOP00 :       E8342 C |
 SOUND32_DROWN_LOOP01 :       E832E C |  SOUND32_DROWN_VOICES :       E834D C |
 SOUND33 :                    E8366 C |  SOUND33_FIREBURN_FM5 :       E8376 C |
*SOUND33_FIREBURN_HEADER :    E8366 C |  SOUND33_FIREBURN_LOOP00 :    E838D C |
 SOUND33_FIREBURN_PSG3 :      E8384 C |  SOUND34 :                    E8397 C |
 SOUND34_BUMPER_FM3 :         E83BB C |  SOUND34_BUMPER_FM4 :         E83B2 C |
 SOUND34_BUMPER_FM5 :         E83AD C | *SOUND34_BUMPER_HEADER :      E8397 C |
 SOUND34_BUMPER_JUMP00 :      E83B8 C |  SOUND34_BUMPER_VOICES :      E83C0 C |
 SOUND35 :                    E83F2 C |  SOUND35_RINGRIGHT_FM5 :      E83FC C |
*SOUND35_RINGRIGHT_HEADER :   E83F2 C |  SOUND36 :                    E8407 C |
*SOUND36_SPIKESMOVE_HEADER :  E8407 C |  SOUND36_SPIKESMOVE_LOOP00 :  E841A C |
 SOUND36_SPIKESMOVE_PSG3 :    E8411 C |  SOUND37 :                    E8424 C |
 SOUND37_RUMBLING_FM5 :       E842E C | *SOUND37_RUMBLING_HEADER :    E8424 C |
 SOUND37_RUMBLING_LOOP00 :    E8435 C |  SOUND37_RUMBLING_LOOP01 :    E843C C |
 SOUND37_RUMBLING_VOICES :    E8446 C |  SOUND38 :                    E845F C |
*SOUND38_HEADER :             E845F C |  SOUND38_LOOP00 :             E8472 C |
 SOUND38_PSG3 :               E8469 C |  SOUND39 :                    E847C C |
 SOUND39_SMASH_FM3 :          E8498 C |  SOUND39_SMASH_FM4 :          E84A3 C |
 SOUND39_SMASH_FM5 :          E849F C | *SOUND39_SMASH_HEADER :       E847C C |
 SOUND39_SMASH_LOOP00 :       E84AA C |  SOUND39_SMASH_LOOP01 :       E84BB C |
 SOUND39_SMASH_PSG3 :         E84B4 C |  SOUND3A :                    E84C6 C |
 SOUND3A_FM5 :                E84D0 C | *SOUND3A_HEADER :             E84C6 C |
 SOUND3A_VOICES :             E84D5 C |  SOUND3B :                    E84EE C |
 SOUND3B_DOORSLAM_FM5 :       E84F8 C | *SOUND3B_DOORSLAM_HEADER :    E84EE C |
 SOUND3B_DOORSLAM_VOICES :    E8500 C |  SOUND3C :                    E8519 C |
 SOUND3C_SPINDASHRELEASE_FM5 :                                        E8529 C |
*SOUND3C_SPINDASHRELEASE_HEADER :                                     E8519 C |
 SOUND3C_SPINDASHRELEASE_PSG3 :                                       E8533 C |
 SOUND3C_SPINDASHRELEASE_VOICES :                                     E8541 C |
 SOUND3D :                    E855A C |  SOUND3D_HAMMER_FM4 :         E8574 C |
 SOUND3D_HAMMER_FM5 :         E856A C | *SOUND3D_HAMMER_HEADER :      E855A C |
 SOUND3D_HAMMER_VOICES :      E857B C |  SOUND3E :                    E85AD C |
 SOUND3E_ROLL_FM4 :           E85B7 C | *SOUND3E_ROLL_HEADER :        E85AD C |
 SOUND3E_ROLL_LOOP00 :        E85C3 C |  SOUND3E_ROLL_VOICES :        E85CE C |
 SOUND3F :                    E85E7 C |  SOUND3F_40_42_VOICES :       E8640 C |
 SOUND3F_CONTINUEJINGLE_FM3 : E85FD C |  SOUND3F_CONTINUEJINGLE_FM4 : E8618 C |
 SOUND3F_CONTINUEJINGLE_FM5 : E862D C |
*SOUND3F_CONTINUEJINGLE_HEADER :                                      E85E7 C |
 SOUND3F_CONTINUEJINGLE_LOOP00 :                                      E8636 C |
 SOUND3F_CONTINUEJINGLE_LOOP01 :                                      E8623 C |
 SOUND3F_CONTINUEJINGLE_LOOP02 :                                      E860C C |
 SOUND40 :                    E8659 C |  SOUND40_CASINOBONUS_FM4 :    E8669 C |
 SOUND40_CASINOBONUS_FM5 :    E866D C | *SOUND40_CASINOBONUS_HEADER : E8659 C |
 SOUND41 :                    E8672 C |  SOUND41_EXPLOSION_FM5 :      E8682 C |
*SOUND41_EXPLOSION_HEADER :   E8672 C |  SOUND41_EXPLOSION_PSG3 :     E868C C |
 SOUND41_EXPLOSION_VOICES :   E8693 C |  SOUND42 :                    E86AC C |
 SOUND42_WATERWARNING_FM5 :   E86B6 C |
*SOUND42_WATERWARNING_HEADER :                                        E86AC C |
 SOUND43 :                    E86BD C |  SOUND43_ENTERGIANTRING_FM4 : E86CD C |
 SOUND43_ENTERGIANTRING_FM5 : E86D9 C |
*SOUND43_ENTERGIANTRING_HEADER :                                      E86BD C |
 SOUND43_ENTERGIANTRING_LOOP00 :                                      E86E2 C |
 SOUND43_ENTERGIANTRING_VOICES :                                      E86EC C |
 SOUND44 :                    E8737 C |  SOUND44_BOSSEXPLOSION_FM5 :  E8741 C |
*SOUND44_BOSSEXPLOSION_HEADER :                                       E8737 C |
 SOUND44_BOSSEXPLOSION_VOICES :                                       E8746 C |
 SOUND45 :                    E875F C |  SOUND45_TALLYEND_FM4 :       E877E C |
 SOUND45_TALLYEND_FM5 :       E8775 C | *SOUND45_TALLYEND_HEADER :    E875F C |
 SOUND45_TALLYEND_PSG3 :      E8785 C |  SOUND45_TALLYEND_VOICES :    E8794 C |
 SOUND46 :                    E87C6 C |  SOUND46_RINGSPILL_FM4 :      E87D6 C |
 SOUND46_RINGSPILL_FM5 :      E87E2 C | *SOUND46_RINGSPILL_HEADER :   E87C6 C |
 SOUND47 :                    E87EE C |  SOUND47_FM5 :                E87F8 C |
*SOUND47_HEADER :             E87EE C |  SOUND47_VOICES :             E8803 C |
 SOUND48 :                    E881C C |
*SOUND48_FLAMETHROWER_HEADER :                                        E881C C |
 SOUND48_FLAMETHROWER_PSG3 :  E8826 C |  SOUND49 :                    E882D C |
 SOUND49_BONUS_FM5 :          E8837 C | *SOUND49_BONUS_HEADER :       E882D C |
 SOUND49_BONUS_VOICES :       E8841 C |  SOUND4A :                    E885A C |
 SOUND4A_SPECSTAGEENTRY_FM5 : E8864 C |
*SOUND4A_SPECSTAGEENTRY_HEADER :                                      E885A C |
 SOUND4A_SPECSTAGEENTRY_VOICES :                                      E886E C |
 SOUND4B :                    E8887 C |  SOUND4B_SLOWSMASH_FM5 :      E8897 C |
*SOUND4B_SLOWSMASH_HEADER :   E8887 C |  SOUND4B_SLOWSMASH_LOOP00 :   E889E C |
 SOUND4B_SLOWSMASH_LOOP01 :   E88AF C |  SOUND4B_SLOWSMASH_PSG3 :     E88A8 C |
 SOUND4C :                    E88BA C |  SOUND4C_SPRING_FM4 :         E88C4 C |
*SOUND4C_SPRING_HEADER :      E88BA C |  SOUND4C_SPRING_LOOP00 :      E88D0 C |
 SOUND4C_SPRING_VOICES :      E88DB C |  SOUND4D :                    E88F4 C |
*SOUND4D_BLIP_HEADER :        E88F4 C |  SOUND4D_BLIP_PSG3 :          E88FE C |
 SOUND4E :                    E8901 C |  SOUND4E_RINGLEFT_FM4 :       E890B C |
*SOUND4E_RINGLEFT_HEADER :    E8901 C |  SOUND4F :                    E8916 C |
 SOUND4F_SIGNPOST_FM4 :       E8926 C |  SOUND4F_SIGNPOST_FM5 :       E8928 C |
*SOUND4F_SIGNPOST_HEADER :    E8916 C |  SOUND4F_SIGNPOST_LOOP00 :    E892A C |
 SOUND4F_SIGNPOST_VOICES :    E8934 C |  SOUND50 :                    E894D C |
 SOUND50_CNZBOSSZAP_FM5 :     E8957 C | *SOUND50_CNZBOSSZAP_HEADER :  E894D C |
 SOUND50_CNZBOSSZAP_LOOP00 :  E895D C |  SOUND50_CNZBOSSZAP_VOICES :  E8967 C |
 SOUND51 :                    E8980 C |  SOUND51_FM5 :                E8999 C |
*SOUND51_HEADER :             E8980 C |  SOUND51_PSG3 :               E8990 C |
 SOUND51_VOICES :             E89A0 C |  SOUND52 :                    E89B9 C |
 SOUND52_FM5 :                E89C3 C | *SOUND52_HEADER :             E89B9 C |
 SOUND52_LOOP00 :             E89CA C |  SOUND52_LOOP01 :             E89D2 C |
 SOUND52_VOICES :             E89DD C |  SOUND53 :                    E89F6 C |
 SOUND53_SIGNPOST2P_FM5 :     E8A00 C | *SOUND53_SIGNPOST2P_HEADER :  E89F6 C |
 SOUND53_SIGNPOST2P_VOICES :  E8A1C C |  SOUND54 :                    E8A35 C |
 SOUND54_OOZLIDPOP_FM5 :      E8A45 C | *SOUND54_OOZLIDPOP_HEADER :   E8A35 C |
 SOUND54_OOZLIDPOP_PSG3 :     E8A4A C |  SOUND54_OOZLIDPOP_VOICES :   E8A5D C |
 SOUND55 :                    E8A76 C |  SOUND55_SLIDINGSPIKE_FM5 :   E8A80 C |
*SOUND55_SLIDINGSPIKE_HEADER :                                        E8A76 C |
 SOUND55_SLIDINGSPIKE_VOICES :                                        E8A87 C |
 SOUND56 :                    E8AA0 C |  SOUND56_CNZELEVATOR_FM5 :    E8AAA C |
*SOUND56_CNZELEVATOR_HEADER : E8AA0 C |  SOUND56_CNZELEVATOR_LOOP00 : E8AB4 C |
 SOUND56_CNZELEVATOR_LOOP01 : E8ABC C |  SOUND56_CNZELEVATOR_VOICES : E8ACC C |
 SOUND57 :                    E8AE5 C |  SOUND57_PLATFORMKNOCK_FM5 :  E8AEF C |
*SOUND57_PLATFORMKNOCK_HEADER :                                       E8AE5 C |
 SOUND57_PLATFORMKNOCK_VOICES :                                       E8AF4 C |
 SOUND58 :                    E8B0D C |  SOUND58_BONUSBUMPER_FM5 :    E8B17 C |
*SOUND58_BONUSBUMPER_HEADER : E8B0D C |  SOUND58_BONUSBUMPER_VOICES : E8B1E C |
 SOUND59 :                    E8B37 C |  SOUND59_LARGEBUMPER_FM3 :    E8B54 C |
 SOUND59_LARGEBUMPER_FM4 :    E8B4D C |  SOUND59_LARGEBUMPER_FM5 :    E8B59 C |
*SOUND59_LARGEBUMPER_HEADER : E8B37 C |  SOUND59_LARGEBUMPER_VOICES : E8B5E C |
 SOUND5A :                    E8B90 C |  SOUND5A_GLOOP_FM5 :          E8B9A C |
*SOUND5A_GLOOP_HEADER :       E8B90 C |  SOUND5A_GLOOP_VOICES :       E8BA4 C |
 SOUND5B :                    E8BBD C |  SOUND5B_PREARROWFIRING_FM5 : E8BC7 C |
*SOUND5B_PREARROWFIRING_HEADER :                                      E8BBD C |
 SOUND5B_PREARROWFIRING_LOOP00 :                                      E8BCE C |
 SOUND5B_PREARROWFIRING_VOICES :                                      E8BD8 C |
 SOUND5C :                    E8BF1 C |  SOUND5C_FIRE_FM4 :           E8C01 C |
*SOUND5C_FIRE_HEADER :        E8BF1 C |  SOUND5C_FIRE_LOOP00 :        E8C05 C |
 SOUND5C_FIRE_LOOP01 :        E8C15 C |  SOUND5C_FIRE_PSG3 :          E8C0F C |
 SOUND5C_FIRE_VOICES :        E8C1F C |  SOUND5D :                    E8C38 C |
 SOUND5D_ARROWSTICK_FM5 :     E8C42 C | *SOUND5D_ARROWSTICK_HEADER :  E8C38 C |
 SOUND5D_ARROWSTICK_VOICES :  E8C47 C |  SOUND5E :                    E8C60 C |
 SOUND5E_WINGFORTRESS_FM3 :   E8C6A C |
*SOUND5E_WINGFORTRESS_HEADER :                                        E8C60 C |
 SOUND5E_WINGFORTRESS_LOOP00 :                                        E8C6C C |
 SOUND5E_WINGFORTRESS_LOOP01 :                                        E8C75 C |
 SOUND5E_WINGFORTRESS_VOICES :                                        E8C81 C |
 SOUND5F :                    E8C9A C |  SOUND5F_6C_PSG2 :            E8CE5 C |
 SOUND5F_6C_PSG3 :            E8CD0 C |  SOUND5F_SUPERTRANSFORM_FM5 : E8CB0 C |
*SOUND5F_SUPERTRANSFORM_HEADER :                                      E8C9A C |
 SOUND5F_SUPERTRANSFORM_LOOP00 :                                      E8CC6 C |
 SOUND5F_SUPERTRANSFORM_LOOP01 :                                      E8CE9 C |
 SOUND5F_SUPERTRANSFORM_LOOP02 :                                      E8CF6 C |
 SOUND5F_SUPERTRANSFORM_LOOP03 :                                      E8CDB C |
 SOUND5F_SUPERTRANSFORM_VOICES :                                      E8D04 C |
 SOUND60 :                    E8D36 C |  SOUND60_SPINDASHREV_FM5 :    E8D40 C |
*SOUND60_SPINDASHREV_HEADER : E8D36 C |  SOUND60_SPINDASHREV_LOOP00 : E8D4E C |
 SOUND60_SPINDASHREV_VOICES : E8D58 C |  SOUND61 :                    E8D71 C |
 SOUND61_RUMBLING2_FM4 :      E8D7B C | *SOUND61_RUMBLING2_HEADER :   E8D71 C |
 SOUND61_RUMBLING2_VOICES :   E8DB5 C |  SOUND62 :                    E8DCE C |
 SOUND62_CNZLAUNCH_FM5 :      E8DD8 C | *SOUND62_CNZLAUNCH_HEADER :   E8DCE C |
 SOUND62_CNZLAUNCH_LOOP00 :   E8DE1 C |  SOUND62_CNZLAUNCH_VOICES :   E8DEC C |
 SOUND63 :                    E8E05 C |  SOUND63_FLIPPER_FM5 :        E8E0F C |
*SOUND63_FLIPPER_HEADER :     E8E05 C |  SOUND63_FLIPPER_VOICES :     E8E1B C |
 SOUND64 :                    E8E34 C |  SOUND64_HTZLIFTCLICK_FM5 :   E8E3E C |
*SOUND64_HTZLIFTCLICK_HEADER :                                        E8E34 C |
 SOUND64_HTZLIFTCLICK_VOICES :                                        E8E43 C |
 SOUND65 :                    E8E5C C | *SOUND65_LEAVES_HEADER :      E8E5C C |
 SOUND65_LEAVES_PSG3 :        E8E66 C |  SOUND65_LEAVES_VOICES :      E8E7D C |
 SOUND66 :                    E8E7D C |  SOUND66_MEGAMACKDROP_FM5 :   E8E94 C |
*SOUND66_MEGAMACKDROP_HEADER :                                        E8E7D C |
 SOUND66_MEGAMACKDROP_PSG3 :  E8E8D C |
 SOUND66_MEGAMACKDROP_VOICES :                                        E8E9E C |
 SOUND67 :                    E8EB7 C |
*SOUND67_DRAWBRIDGEMOVE_HEADER :                                      E8EB7 C |
 SOUND67_DRAWBRIDGEMOVE_PSG3 :                                        E8EC1 C |
 SOUND67_DRAWBRIDGEMOVE_VOICES :                                      E8ED8 C |
 SOUND68 :                    E8ED8 C |  SOUND68_QUICKDOORSLAM_FM5 :  E8EE2 C |
*SOUND68_QUICKDOORSLAM_HEADER :                                       E8ED8 C |
 SOUND68_QUICKDOORSLAM_VOICES :                                       E8EE9 C |
 SOUND69 :                    E8F02 C |  SOUND69_DRAWBRIDGEDOWN_FM5 : E8F12 C |
*SOUND69_DRAWBRIDGEDOWN_HEADER :                                      E8F02 C |
 SOUND69_DRAWBRIDGEDOWN_PSG3 :                                        E8F1B C |
 SOUND69_DRAWBRIDGEDOWN_VOICES :                                      E8F26 C |
 SOUND6A :                    E8F3F C |  SOUND6A_6F_LASER_VOICES :    E8F51 C |
 SOUND6A_LASERBURST_FM5 :     E8F49 C | *SOUND6A_LASERBURST_HEADER :  E8F3F C |
 SOUND6B :                    E8F6A C |  SOUND6B_LASERFLOOR_FM4 :     E8F74 C |
*SOUND6B_LASERFLOOR_HEADER :  E8F6A C |  SOUND6B_LASERFLOOR_VOICES :  E8F7B C |
 SOUND6C :                    E8F94 C |  SOUND6C_TELEPORT_FM4 :       E8FB0 C |
 SOUND6C_TELEPORT_FM5 :       E8FB2 C | *SOUND6C_TELEPORT_HEADER :    E8F94 C |
 SOUND6C_TELEPORT_LOOP00 :    E8FC0 C |  SOUND6C_TELEPORT_VOICES :    E8FCD C |
 SOUND6D :                    E8FFF C |  SOUND6D_ERROR_FM5 :          E9009 C |
*SOUND6D_ERROR_HEADER :       E8FFF C |  SOUND6D_ERROR_VOICES :       E9012 C |
 SOUND6E :                    E902B C |  SOUND6E_MECHASONICBUZZ_FM5 : E903B C |
*SOUND6E_MECHASONICBUZZ_HEADER :                                      E902B C |
 SOUND6E_MECHASONICBUZZ_LOOP00 :                                      E9040 C |
 SOUND6E_MECHASONICBUZZ_PSG3 :                                        E904B C |
 SOUND6E_MECHASONICBUZZ_VOICES :                                      E9050 C |
 SOUND6F :                    E9069 C |  SOUND6F_LARGELASER_FM4 :     E907F C |
 SOUND6F_LARGELASER_FM5 :     E9083 C | *SOUND6F_LARGELASER_HEADER :  E9069 C |
 SOUND6F_LARGELASER_PSG3 :    E909A C |  SOUND70 :                    E90AC C |
*SOUND70_OILSLIDE_HEADER :    E90AC C |  SOUND70_OILSLIDE_LOOP00 :    E90BA C |
 SOUND70_OILSLIDE_PSG3 :      E90B6 C |  SOUNDNN :                    E8000 C |
 SOUND_RING_VOICES :          E87AD C |  SOURCEDRIVER :                   2 - |
 SOURCESMPS2ASM :                 0 - |  SPECSTG_CALL00 :             C0F9F C |
 SPECSTG_DAC :                C12C0 C |  SPECSTG_FM1 :                C0E82 C |
 SPECSTG_FM2 :                C0ED5 C |  SPECSTG_FM3 :                C0FD8 C |
 SPECSTG_FM4 :                C1094 C |  SPECSTG_FM5 :                C1142 C |
*SPECSTG_HEADER :             C0E52 C |  SPECSTG_JUMP00 :             C1213 C |
 SPECSTG_LOOP00 :             C12C7 C |  SPECSTG_LOOP01 :             C12DC C |
 SPECSTG_LOOP02 :             C12FE C |  SPECSTG_LOOP03 :             C1156 C |
 SPECSTG_LOOP04 :             C10C5 C |  SPECSTG_LOOP05 :             C10C0 C |
 SPECSTG_LOOP06 :             C1107 C |  SPECSTG_LOOP07 :             C1009 C |
 SPECSTG_LOOP08 :             C1004 C |  SPECSTG_LOOP09 :             C1055 C |
 SPECSTG_LOOP0A :             C0F0D C |  SPECSTG_LOOP0B :             C0F60 C |
 SPECSTG_LOOP0C :             C0E95 C |  SPECSTG_LOOP0D :             C1332 C |
 SPECSTG_LOOP0E :             C1355 C |  SPECSTG_LOOP0F :             C1389 C |
 SPECSTG_LOOP10 :             C139A C |  SPECSTG_LOOP11 :             C1184 C |
 SPECSTG_PSG1 :               C1175 C |  SPECSTG_PSG2 :               C1202 C |
 SPECSTG_PSG3 :               C1325 C |  SPECSTG_VOICES :             C13B1 C |
 SUPERSONIC_CALL00 :          C2263 C |  SUPERSONIC_CALL01 :          C20DD C |
 SUPERSONIC_CALL02 :          C20E6 C |  SUPERSONIC_CALL03 :          C21F9 C |
 SUPERSONIC_CALL04 :          C21A2 C |  SUPERSONIC_CALL05 :          C20BF C |
 SUPERSONIC_CALL06 :          C22A3 C |  SUPERSONIC_DAC :             C22AF C |
 SUPERSONIC_FM1 :             C2094 C |  SUPERSONIC_FM2 :             C21AC C |
 SUPERSONIC_FM3 :             C20F5 C |  SUPERSONIC_FM4 :             C2144 C |
 SUPERSONIC_FM5 :             C220B C | *SUPERSONIC_HEADER :          C2064 C |
 SUPERSONIC_JUMP00 :          C21AE C |  SUPERSONIC_JUMP01 :          C2146 C |
 SUPERSONIC_LOOP00 :          C22C5 C |  SUPERSONIC_LOOP01 :          C2212 C |
 SUPERSONIC_LOOP02 :          C222D C |  SUPERSONIC_LOOP03 :          C21C4 C |
 SUPERSONIC_LOOP04 :          C21D9 C |  SUPERSONIC_LOOP05 :          C215C C |
 SUPERSONIC_LOOP06 :          C2179 C |  SUPERSONIC_LOOP07 :          C210F C |
 SUPERSONIC_LOOP08 :          C2117 C |  SUPERSONIC_LOOP09 :          C2099 C |
 SUPERSONIC_LOOP0A :          C20A1 C |  SUPERSONIC_PSG1 :            C226D C |
 SUPERSONIC_PSG2 :            C22AD C |  SUPERSONIC_PSG3 :            C22AE C |
 SUPERSONIC_VOICES :          C22DA C | *TIME :                  "13:50:43" - |
 TITLE_SCREEN_DAC :           C83E2 C |  TITLE_SCREEN_FM1 :           C82E3 C |
 TITLE_SCREEN_FM2 :           C8318 C |  TITLE_SCREEN_FM3 :           C834A C |
 TITLE_SCREEN_FM4 :           C8383 C |  TITLE_SCREEN_FM5 :           C82E1 C |
*TITLE_SCREEN_HEADER :        C82B1 C |  TITLE_SCREEN_LOOP00 :        C8420 C |
 TITLE_SCREEN_LOOP01 :        C842D C |  TITLE_SCREEN_LOOP02 :        C83C3 C |
 TITLE_SCREEN_PSG1 :          C8417 C |  TITLE_SCREEN_PSG2 :          C8415 C |
 TITLE_SCREEN_PSG3 :          C83BF C |  TITLE_SCREEN_VOICES :        C843B C |
*TRACENUM :                       0 - | *TRUE :                           1 - |
*USE_S2_SAMPLES :                 1 - | *USE_S3D_SAMPLES :                1 - |
*USE_S3_SAMPLES :                 1 - | *USE_SK_SAMPLES :                 1 - |
 VCALGORITHM :                    3 - |  VCAM1 :                          0 - |
 VCAM2 :                          0 - |  VCAM3 :                          0 - |
 VCAM4 :                          0 - |  VCAR1 :                          E - |
 VCAR2 :                         1D - |  VCAR3 :                         1E - |
 VCAR4 :                         1F - |  VCCF1 :                          1 - |
 VCCF2 :                          0 - |  VCCF3 :                          0 - |
 VCCF4 :                          0 - |  VCD1R1 :                         0 - |
 VCD1R1UNK :                      0 - |  VCD1R2 :                         C - |
 VCD1R2UNK :                      0 - |  VCD1R3 :                        1D - |
 VCD1R3UNK :                      0 - |  VCD1R4 :                         0 - |
 VCD1R4UNK :                      0 - |  VCD2R1 :                         0 - |
 VCD2R2 :                         0 - |  VCD2R3 :                         1 - |
 VCD2R4 :                         0 - |  VCDL1 :                          0 - |
 VCDL2 :                          0 - |  VCDL3 :                          0 - |
 VCDL4 :                          0 - |  VCDT1 :                          3 - |
 VCDT2 :                          1 - |  VCDT3 :                          0 - |
 VCDT4 :                          0 - |  VCFEEDBACK :                     6 - |
 VCRR1 :                          F - |  VCRR2 :                          F - |
 VCRR3 :                          F - |  VCRR4 :                          F - |
 VCRS1 :                          0 - |  VCRS2 :                          0 - |
 VCRS3 :                          0 - |  VCRS4 :                          0 - |
 VCTL1 :                          0 - |  VCTL2 :                          6 - |
 VCTL3 :                          7 - |  VCTL4 :                          8 - |
 VCTLMASK1 :                     80 - |  VCTLMASK2 :                      0 - |
 VCTLMASK3 :                      0 - |  VCTLMASK4 :                      0 - |
 VCUNUSEDBITS :                   0 - | *VERSION :                     142F - |
 WFZ_CALL00 :                 C096A C |  WFZ_CALL01 :                 C0976 C |
 WFZ_CALL02 :                 C0A0F C |  WFZ_CALL03 :                 C081E C |
 WFZ_CALL04 :                 C0828 C |  WFZ_DAC :                    C090B C |
 WFZ_FM1 :                    C06FC C |  WFZ_FM2 :                    C0783 C |
 WFZ_FM3 :                    C0835 C |  WFZ_FM4 :                    C0981 C |
 WFZ_FM5 :                    C067C C | *WFZ_HEADER :                 C064B C |
 WFZ_JUMP00 :                 C090F C |  WFZ_JUMP01 :                 C0986 C |
 WFZ_JUMP02 :                 C0839 C |  WFZ_JUMP03 :                 C0787 C |
 WFZ_JUMP04 :                 C0702 C |  WFZ_JUMP05 :                 C0682 C |
 WFZ_LOOP00 :                 C083B C |  WFZ_LOOP01 :                 C07AF C |
 WFZ_LOOP02 :                 C0706 C |  WFZ_LOOP03 :                 C075A C |
 WFZ_LOOP04 :                 C0686 C |  WFZ_LOOP05 :                 C06CF C |
 WFZ_PSG1 :                   C067B C |  WFZ_PSG2 :                   C067B C |
 WFZ_PSG3 :                   C067B C |  WFZ_VOICES :                 C0A14 C |
*Z80_DRIVER :                 E0000 C |  ZEROOFFSETOPTIMIZATION :         0 - |

   1766 symbols
    172 unused symbols

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 3 - 2/19/2024 13:50:44


  Defined Macros:
  ---------------

ALIGN                                 | ALIGN0                               
CHECKEDCHANNELPOINTER                 | CNOP                                 
CNOP0                                 | CONVERTMAINTEMPOMOD                  
DS                                    | EVEN                                 
INSN1OP                               | INSN2OP                              
ORG                                   | ORG0                                 
PSGPITCHCONVERT                       | SMPSALTERNATESMPS                    
SMPSALTERNOTE                         | SMPSALTERPITCH                       
SMPSALTERVOL                          | SMPSCALL                             
SMPSCHANGETRANSPOSITION               | SMPSCHANTEMPODIV                     
SMPSCLEARPUSH                         | SMPSCONDITIONALJUMP                  
SMPSCONTINUOUSLOOP                    | SMPSCOPYDATA                         
SMPSDETUNE                            | SMPSFADE                             
SMPSFM3SPECIALMODE                    | SMPSFMALTERVOL                       
SMPSFMFLUTTER                         | SMPSFMICOMMAND                       
SMPSFMVOICE                           | SMPSFMVOLENV                         
SMPSHALTMUSIC                         | SMPSHEADERCHAN                       
SMPSHEADERCHANSFX                     | SMPSHEADERDAC                        
SMPSHEADERFM                          | SMPSHEADERPSG                        
SMPSHEADERSFXCHANNEL                  | SMPSHEADERSTARTSONG                  
SMPSHEADERTEMPO                       | SMPSHEADERTEMPOSFX                   
SMPSHEADERVOICE                       | SMPSHEADERVOICENULL                  
SMPSHEADERVOICEUVB                    | SMPSJUMP                             
SMPSLOOP                              | SMPSMAXRELRATE                       
SMPSMODCHANGE                         | SMPSMODCHANGE2                       
SMPSMODOFF                            | SMPSMODON                            
SMPSMODSET                            | SMPSNOP                              
SMPSNOTEFILL                          | SMPSPAN                              
SMPSPLAYDACSAMPLE                     | SMPSPLAYSOUND                        
SMPSPSGALTERVOL                       | SMPSPSGFORM                          
SMPSPSGVOICE                          | SMPSRESETSPINDASHREV                 
SMPSRETURN                            | SMPSSETNOTE                          
SMPSSETTEMPODIV                       | SMPSSETTEMPOMOD                      
SMPSSETVOICE                          | SMPSSETVOL                           
SMPSSPINDASHREV                       | SMPSSSGEG                            
SMPSSTOP                              | SMPSSTOPFM                           
SMPSSTOPSPECIAL                       | SMPSVCALGORITHM                      
SMPSVCAMPMOD                          | SMPSVCATTACKRATE                     
SMPSVCCOARSEFREQ                      | SMPSVCDECAYLEVEL                     
SMPSVCDECAYRATE1                      | SMPSVCDECAYRATE2                     
SMPSVCDETUNE                          | SMPSVCFEEDBACK                       
SMPSVCRATESCALE                       | SMPSVCRELEASERATE                    
SMPSVCTOTALLEVEL                      | SMPSVCUNUSEDBITS                     
SMPSWEIRDD1LRR                        | STARTZ80                             
STOPZ80                               | TRACE                                
WAITZ80                               | _ADD                                 
_ADDQ                                 | _CLR                                 
_CMP                                  | _CMPI                                
_MOVE                                 | _TST                                 

     98 macros

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 4 - 2/19/2024 13:50:44


  Defined Functions:
  ------------------

S3TEMPOTOS2                           | S3TEMPOTOS1                          
S1TEMPOTOS3                           | S1TEMPOTOS2                          
S2TEMPOTOS3                           | S2TEMPOTOS1                          
CONV0TO256                            | SIGNEXTENDB                          
SIGNEXTEND                            | SIGNMASK                             
BIT                                   | CHKOP                                
NOTZ80                                | Z80_PTR                              

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 5 - 2/19/2024 13:50:44


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

1.17 second assembly time

  16507 lines source file
  72865 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
